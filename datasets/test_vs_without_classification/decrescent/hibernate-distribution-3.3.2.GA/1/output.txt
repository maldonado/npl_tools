//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994424606414705	WITHOUT_CLASSIFICATION	5.575393585294554E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9997556748912253	WITHOUT_CLASSIFICATION	2.443251087747168E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999977944577184	WITHOUT_CLASSIFICATION	2.2055422814915225E-6	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999994077139593	WITHOUT_CLASSIFICATION	5.922860406919263E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999975482316747	WITHOUT_CLASSIFICATION	2.4517683253110857E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999975482316747	WITHOUT_CLASSIFICATION	2.4517683253110857E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999993617717218	WITHOUT_CLASSIFICATION	6.382282781430343E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994448887074	WITHOUT_CLASSIFICATION	5.551112925313971E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999972667151785	WITHOUT_CLASSIFICATION	2.733284821563975E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999998280083479	WITHOUT_CLASSIFICATION	1.719916521021219E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999930869042049	WITHOUT_CLASSIFICATION	6.913095795154586E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999930869042049	WITHOUT_CLASSIFICATION	6.913095795154586E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999850415872157	WITHOUT_CLASSIFICATION	1.4958412784356651E-5	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999977819308984	WITHOUT_CLASSIFICATION	2.2180691016353146E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.999998000281316	WITHOUT_CLASSIFICATION	1.9997186839330947E-6	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999736613399904	WITHOUT_CLASSIFICATION	2.6338660009553657E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996696207213	WITHOUT_CLASSIFICATION	3.3037927875948156E-7	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999419028409969	WITHOUT_CLASSIFICATION	5.8097159003022916E-5	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999597205582532	WITHOUT_CLASSIFICATION	4.0279441746841856E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999547390023468	WITHOUT_CLASSIFICATION	4.5260997653281504E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999539737185624	WITHOUT_CLASSIFICATION	4.602628143761931E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9992615591101311	WITHOUT_CLASSIFICATION	7.384408898689059E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999674239290256	WITHOUT_CLASSIFICATION	3.257607097440758E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999460667492275	WITHOUT_CLASSIFICATION	5.393325077260401E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994693144566	WITHOUT_CLASSIFICATION	5.306855433607902E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999422299163102	WITHOUT_CLASSIFICATION	5.777008368969614E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999422299163102	WITHOUT_CLASSIFICATION	5.777008368969614E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996186979893	WITHOUT_CLASSIFICATION	3.8130201077059716E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999524307693178	WITHOUT_CLASSIFICATION	4.7569230682212086E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999987828128376	WITHOUT_CLASSIFICATION	1.2171871623059512E-6	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998806274703	WITHOUT_CLASSIFICATION	1.193725297733637E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999970818502827	WITHOUT_CLASSIFICATION	2.918149717241015E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9987586177012966	WITHOUT_CLASSIFICATION	0.0012413822987035086	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9987586177012966	WITHOUT_CLASSIFICATION	0.0012413822987035086	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999979929636386	WITHOUT_CLASSIFICATION	2.0070363614819237E-6	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999990574258137	WITHOUT_CLASSIFICATION	9.425741862761675E-7	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999997364124404	WITHOUT_CLASSIFICATION	2.6358755952798346E-7	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999893922456344	WITHOUT_CLASSIFICATION	1.0607754365474352E-5	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999990424661042	WITHOUT_CLASSIFICATION	9.575338958321431E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976684541242	WITHOUT_CLASSIFICATION	2.3315458758208123E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954897459493	WITHOUT_CLASSIFICATION	4.510254050649548E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999960183921093	WITHOUT_CLASSIFICATION	3.981607890707715E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999667616996885	WITHOUT_CLASSIFICATION	3.323830031157243E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999146370533	WITHOUT_CLASSIFICATION	8.536294670535555E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.999979878352298	WITHOUT_CLASSIFICATION	2.0121647702083522E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999667616996885	WITHOUT_CLASSIFICATION	3.323830031157243E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.999979878352298	WITHOUT_CLASSIFICATION	2.0121647702083522E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999407543751099	WITHOUT_CLASSIFICATION	5.924562489016897E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999872380722847	WITHOUT_CLASSIFICATION	1.276192771529703E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999958762077827	WITHOUT_CLASSIFICATION	4.123792217272717E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999917874285426	WITHOUT_CLASSIFICATION	8.212571457440537E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999995025986434	WITHOUT_CLASSIFICATION	4.974013565973694E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.99998272800382	WITHOUT_CLASSIFICATION	1.7271996179906195E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999957638014637	WITHOUT_CLASSIFICATION	4.236198536266927E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999985813941373	WITHOUT_CLASSIFICATION	1.4186058627085716E-5	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999984209540275	WITHOUT_CLASSIFICATION	1.5790459725257677E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998454618409179	WITHOUT_CLASSIFICATION	1.54538159082052E-4	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999925909730101	WITHOUT_CLASSIFICATION	7.409026989934663E-6	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999953845532884	WITHOUT_CLASSIFICATION	4.615446711506882E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999958905488594	WITHOUT_CLASSIFICATION	4.109451140588874E-6	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999976937250293	WITHOUT_CLASSIFICATION	2.306274970620594E-6	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999926734782897	WITHOUT_CLASSIFICATION	7.326521710332507E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9995917144843168	WITHOUT_CLASSIFICATION	4.0828551568318397E-4	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999980442911859	WITHOUT_CLASSIFICATION	1.955708814125153E-6	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999995764285401	WITHOUT_CLASSIFICATION	4.235714598631333E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999897642807181	WITHOUT_CLASSIFICATION	1.0235719281951635E-5	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999962705965347	WITHOUT_CLASSIFICATION	3.7294034651719795E-6	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999904953943051	WITHOUT_CLASSIFICATION	9.504605694919348E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999998655866291	WITHOUT_CLASSIFICATION	1.344133709001694E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985089263024	WITHOUT_CLASSIFICATION	1.4910736975646493E-6	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971942124096	WITHOUT_CLASSIFICATION	2.8057875904391052E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999986177789721	WITHOUT_CLASSIFICATION	1.3822210278577096E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996019225786	WITHOUT_CLASSIFICATION	3.9807742138841976E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998990976443	WITHOUT_CLASSIFICATION	1.0090235570373013E-7	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999996908913351	WITHOUT_CLASSIFICATION	3.091086649535281E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999861073641663	WITHOUT_CLASSIFICATION	1.3892635833815148E-5	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999984251194949	WITHOUT_CLASSIFICATION	1.5748805050936097E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999818164923066	WITHOUT_CLASSIFICATION	1.81835076935091E-5	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999991737192032	WITHOUT_CLASSIFICATION	8.26280796817162E-7	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999968834155671	WITHOUT_CLASSIFICATION	3.116584432875427E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999986667262213	WITHOUT_CLASSIFICATION	1.3332737786473432E-6	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999995279103953	WITHOUT_CLASSIFICATION	4.7208960477169014E-7	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997183642598	WITHOUT_CLASSIFICATION	2.8163574008481926E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999986667262213	WITHOUT_CLASSIFICATION	1.3332737786473432E-6	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997958002247	WITHOUT_CLASSIFICATION	2.0419977533236892E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999995170272726	WITHOUT_CLASSIFICATION	4.829727273513981E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999970501111767	WITHOUT_CLASSIFICATION	2.9498888234148587E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999989067166934	WITHOUT_CLASSIFICATION	1.0932833065725176E-6	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999968256768061	WITHOUT_CLASSIFICATION	3.174323193956433E-6	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994941096875	WITHOUT_CLASSIFICATION	5.058903125391982E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994941096875	WITHOUT_CLASSIFICATION	5.058903125391982E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999873654069217	WITHOUT_CLASSIFICATION	1.2634593078427689E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999963842662175	WITHOUT_CLASSIFICATION	3.6157337825961544E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999909009396014	WITHOUT_CLASSIFICATION	9.099060398610557E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999988327090251	WITHOUT_CLASSIFICATION	1.1672909749045612E-6	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999990891648689	WITHOUT_CLASSIFICATION	9.108351309364622E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999965783360918	WITHOUT_CLASSIFICATION	3.4216639081252492E-6	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999989954958536	WITHOUT_CLASSIFICATION	1.0045041464289962E-6	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999987758006739	WITHOUT_CLASSIFICATION	1.2241993261443198E-6	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999795584519915	WITHOUT_CLASSIFICATION	2.0441548008472676E-5	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999987983183702	WITHOUT_CLASSIFICATION	1.2016816298064173E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991048869218	WITHOUT_CLASSIFICATION	8.951130782688591E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991048869218	WITHOUT_CLASSIFICATION	8.951130782688591E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999202905197	WITHOUT_CLASSIFICATION	7.970948031695863E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999991297256621	WITHOUT_CLASSIFICATION	8.702743379025001E-7	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999592577091359	WITHOUT_CLASSIFICATION	4.074229086411281E-5	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991048869218	WITHOUT_CLASSIFICATION	8.951130782688591E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999202905197	WITHOUT_CLASSIFICATION	7.970948031695863E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999202905197	WITHOUT_CLASSIFICATION	7.970948031695863E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999410150356368	WITHOUT_CLASSIFICATION	5.898496436311946E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999975349405066	WITHOUT_CLASSIFICATION	2.465059493475269E-6	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999159323187	WITHOUT_CLASSIFICATION	8.406768119359374E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999437356033933	WITHOUT_CLASSIFICATION	5.6264396606810634E-5	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999988931648115	WITHOUT_CLASSIFICATION	1.1068351885721156E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999988931648115	WITHOUT_CLASSIFICATION	1.1068351885721156E-6	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999913203116696	WITHOUT_CLASSIFICATION	8.679688330502113E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999495181302273	WITHOUT_CLASSIFICATION	5.0481869772724885E-5	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999875119869419	WITHOUT_CLASSIFICATION	1.2488013058123237E-5	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999991368644703	WITHOUT_CLASSIFICATION	8.631355297257301E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999991368644703	WITHOUT_CLASSIFICATION	8.631355297257301E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999989789651756	WITHOUT_CLASSIFICATION	1.0210348243945977E-5	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999997388957161	WITHOUT_CLASSIFICATION	2.6110428391328793E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999931462921364	WITHOUT_CLASSIFICATION	6.853707863601879E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999962510040421	WITHOUT_CLASSIFICATION	3.7489959577845025E-6	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999806030386087	WITHOUT_CLASSIFICATION	1.9396961391266132E-5	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997911331463	WITHOUT_CLASSIFICATION	2.088668536488829E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999936172887928	WITHOUT_CLASSIFICATION	6.382711207205797E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999990064836208	WITHOUT_CLASSIFICATION	9.935163790681323E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.999992022495029	WITHOUT_CLASSIFICATION	7.977504970855991E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999931462921364	WITHOUT_CLASSIFICATION	6.853707863601879E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999503551554897	WITHOUT_CLASSIFICATION	4.964484451032478E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999841570260003	WITHOUT_CLASSIFICATION	1.5842973999741848E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999841570260003	WITHOUT_CLASSIFICATION	1.5842973999741848E-5	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999996667934739	WITHOUT_CLASSIFICATION	3.3320652608454157E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999934781130792	WITHOUT_CLASSIFICATION	6.521886920790739E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999975657652179	WITHOUT_CLASSIFICATION	2.4342347820456852E-6	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999632143023469	WITHOUT_CLASSIFICATION	3.678569765308171E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999860811148535	WITHOUT_CLASSIFICATION	1.3918885146455433E-5	TEST
//then by id	WITHOUT_CLASSIFICATION	0.999936369525037	WITHOUT_CLASSIFICATION	6.36304749630896E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999993539856328	WITHOUT_CLASSIFICATION	6.460143672522883E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999987780558217	WITHOUT_CLASSIFICATION	1.221944178254259E-6	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996336782784	WITHOUT_CLASSIFICATION	3.6632172165221935E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996336782784	WITHOUT_CLASSIFICATION	3.6632172165221935E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994424606414705	WITHOUT_CLASSIFICATION	5.575393585294554E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999979629634705	WITHOUT_CLASSIFICATION	2.0370365294876707E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999975348978777	WITHOUT_CLASSIFICATION	2.465102122317613E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999994850006426	WITHOUT_CLASSIFICATION	5.149993574153057E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999992794563573	WITHOUT_CLASSIFICATION	7.205436426956035E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999956439055012	WITHOUT_CLASSIFICATION	4.356094498846804E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999960816557892	WITHOUT_CLASSIFICATION	3.91834421082537E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999980959950666	WITHOUT_CLASSIFICATION	1.9040049334155767E-6	TEST
// new	WITHOUT_CLASSIFICATION	0.999968479227188	WITHOUT_CLASSIFICATION	3.15207728119322E-5	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999795361226314	WITHOUT_CLASSIFICATION	2.0463877368687942E-5	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999943875441023	WITHOUT_CLASSIFICATION	5.6124558976679275E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999977944577184	WITHOUT_CLASSIFICATION	2.2055422814915225E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998037866581	WITHOUT_CLASSIFICATION	1.9621334189583353E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998037866581	WITHOUT_CLASSIFICATION	1.9621334189583353E-6	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999982631037678	WITHOUT_CLASSIFICATION	1.7368962320759464E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998521313731457	WITHOUT_CLASSIFICATION	1.478686268543333E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999989296783198	WITHOUT_CLASSIFICATION	1.0703216802078803E-6	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999881435899592	WITHOUT_CLASSIFICATION	1.185641004083475E-5	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999996863724484	WITHOUT_CLASSIFICATION	3.1362755159017942E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999958844889724	WITHOUT_CLASSIFICATION	4.1155110276420214E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999975482316747	WITHOUT_CLASSIFICATION	2.4517683253110857E-6	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999984325045455	WITHOUT_CLASSIFICATION	1.5674954546005805E-6	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999748539887947	WITHOUT_CLASSIFICATION	2.514601120524237E-5	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999964032790754	WITHOUT_CLASSIFICATION	3.596720924671091E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999987307364764	WITHOUT_CLASSIFICATION	1.269263523521756E-6	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999904673524449	WITHOUT_CLASSIFICATION	9.532647554997421E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999907242626253	WITHOUT_CLASSIFICATION	9.275737374768538E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999953938670748	WITHOUT_CLASSIFICATION	4.606132925234481E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999994569672875	WITHOUT_CLASSIFICATION	5.430327123572097E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999995436814462	WITHOUT_CLASSIFICATION	4.563185537542176E-7	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999983766886559	WITHOUT_CLASSIFICATION	1.6233113441222525E-6	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999988933915552	WITHOUT_CLASSIFICATION	1.1066084447979519E-6	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999984270932564	WITHOUT_CLASSIFICATION	1.5729067436968887E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999911632788178	WITHOUT_CLASSIFICATION	8.836721182305216E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999795361226314	WITHOUT_CLASSIFICATION	2.0463877368687942E-5	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999998037866581	WITHOUT_CLASSIFICATION	1.9621334189583353E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999953938670748	WITHOUT_CLASSIFICATION	4.606132925234481E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999993617717218	WITHOUT_CLASSIFICATION	6.382282781430343E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.999998750073569	WITHOUT_CLASSIFICATION	1.2499264309991245E-6	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999873624211323	WITHOUT_CLASSIFICATION	1.2637578867597702E-5	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999978755906526	WITHOUT_CLASSIFICATION	2.1244093475165114E-6	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999659357632473	WITHOUT_CLASSIFICATION	3.406423675267272E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999970600930306	WITHOUT_CLASSIFICATION	2.9399069692973956E-6	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999833243201965	WITHOUT_CLASSIFICATION	1.6675679803507098E-5	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999982453207907	WITHOUT_CLASSIFICATION	1.7546792092349252E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9998885178261906	WITHOUT_CLASSIFICATION	1.1148217380934905E-4	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999715638765712	WITHOUT_CLASSIFICATION	2.8436123428937667E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999281896466375	WITHOUT_CLASSIFICATION	7.181035336245126E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999281896466375	WITHOUT_CLASSIFICATION	7.181035336245126E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999981151577194	WITHOUT_CLASSIFICATION	1.8848422805699399E-6	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999997031148128	WITHOUT_CLASSIFICATION	2.9688518725836105E-7	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999620126783952	WITHOUT_CLASSIFICATION	3.798732160475413E-5	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999953365087929	WITHOUT_CLASSIFICATION	4.663491207018651E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999989022344743	WITHOUT_CLASSIFICATION	1.097765525734381E-6	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999995679254231	WITHOUT_CLASSIFICATION	4.3207457698134157E-7	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999888057161557	WITHOUT_CLASSIFICATION	1.1194283844232693E-5	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994448887074	WITHOUT_CLASSIFICATION	5.551112925313971E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999907132996905	WITHOUT_CLASSIFICATION	9.28670030948221E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999985175482179	WITHOUT_CLASSIFICATION	1.482451782139619E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999985175482179	WITHOUT_CLASSIFICATION	1.482451782139619E-6	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999975082424499	WITHOUT_CLASSIFICATION	2.4917575501178705E-6	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999968576893647	WITHOUT_CLASSIFICATION	3.1423106352671835E-6	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999963978987015	WITHOUT_CLASSIFICATION	3.602101298489882E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999993699252178	WITHOUT_CLASSIFICATION	6.300747822832526E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999868680427586	WITHOUT_CLASSIFICATION	1.3131957241484167E-5	TEST
// return	WITHOUT_CLASSIFICATION	0.9999977488717419	WITHOUT_CLASSIFICATION	2.251128258146095E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999795361226314	WITHOUT_CLASSIFICATION	2.0463877368687942E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999977944577184	WITHOUT_CLASSIFICATION	2.2055422814915225E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999953938670748	WITHOUT_CLASSIFICATION	4.606132925234481E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999953938670748	WITHOUT_CLASSIFICATION	4.606132925234481E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994243776142	WITHOUT_CLASSIFICATION	5.756223858365489E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994243776142	WITHOUT_CLASSIFICATION	5.756223858365489E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999996493037271	WITHOUT_CLASSIFICATION	3.50696272893759E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999994016758315	WITHOUT_CLASSIFICATION	5.98324168505784E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999994016758315	WITHOUT_CLASSIFICATION	5.98324168505784E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999949672551071	WITHOUT_CLASSIFICATION	5.032744892964566E-6	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999976665401807	WITHOUT_CLASSIFICATION	2.3334598193820756E-6	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.999992938057828	WITHOUT_CLASSIFICATION	7.06194217200257E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999968322812219	WITHOUT_CLASSIFICATION	3.1677187780285136E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999991493263541	WITHOUT_CLASSIFICATION	8.506736458347787E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999998280083479	WITHOUT_CLASSIFICATION	1.719916521021219E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999998280083479	WITHOUT_CLASSIFICATION	1.719916521021219E-6	TEST
// not array	WITHOUT_CLASSIFICATION	0.999986232289824	WITHOUT_CLASSIFICATION	1.3767710175923018E-5	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999983331423359	WITHOUT_CLASSIFICATION	1.6668576640844943E-6	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999940234262801	WITHOUT_CLASSIFICATION	5.976573719923385E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999843498938851	WITHOUT_CLASSIFICATION	1.5650106114906715E-5	TEST
// char	WITHOUT_CLASSIFICATION	0.9999799944004198	WITHOUT_CLASSIFICATION	2.0005599580070372E-5	TEST
// short	WITHOUT_CLASSIFICATION	0.9999852704670078	WITHOUT_CLASSIFICATION	1.4729532992173255E-5	TEST
// double	WITHOUT_CLASSIFICATION	0.9999930869042049	WITHOUT_CLASSIFICATION	6.913095795154586E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999899566780045	WITHOUT_CLASSIFICATION	1.0043321995515858E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999899566780045	WITHOUT_CLASSIFICATION	1.0043321995515858E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999850415872157	WITHOUT_CLASSIFICATION	1.4958412784356651E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999850415872157	WITHOUT_CLASSIFICATION	1.4958412784356651E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999929743156543	WITHOUT_CLASSIFICATION	7.02568434576041E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999929743156543	WITHOUT_CLASSIFICATION	7.02568434576041E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999974330384063	WITHOUT_CLASSIFICATION	2.566961593755227E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999974330384063	WITHOUT_CLASSIFICATION	2.566961593755227E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.999998280083479	WITHOUT_CLASSIFICATION	1.719916521021219E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999930869042049	WITHOUT_CLASSIFICATION	6.913095795154586E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999899566780045	WITHOUT_CLASSIFICATION	1.0043321995515858E-5	TEST
// float	WITHOUT_CLASSIFICATION	0.9999899566780045	WITHOUT_CLASSIFICATION	1.0043321995515858E-5	TEST
// long	WITHOUT_CLASSIFICATION	0.9999850415872157	WITHOUT_CLASSIFICATION	1.4958412784356651E-5	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999929743156543	WITHOUT_CLASSIFICATION	7.02568434576041E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999929743156543	WITHOUT_CLASSIFICATION	7.02568434576041E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999974330384063	WITHOUT_CLASSIFICATION	2.566961593755227E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999995758674198	WITHOUT_CLASSIFICATION	4.241325801318159E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999828285931889	WITHOUT_CLASSIFICATION	1.7171406811134003E-5	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999893740524043	WITHOUT_CLASSIFICATION	1.062594759569827E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999530627256198	WITHOUT_CLASSIFICATION	4.6937274380208585E-5	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999694881998841	WITHOUT_CLASSIFICATION	3.051180011593067E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999854668338598	WITHOUT_CLASSIFICATION	1.4533166140185432E-5	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999998915976418	WITHOUT_CLASSIFICATION	1.0840235820193794E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999899494437934	WITHOUT_CLASSIFICATION	1.005055620662227E-5	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999965209440045	WITHOUT_CLASSIFICATION	3.4790559955764233E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999966797794765	WITHOUT_CLASSIFICATION	3.3202205234972384E-6	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998083374355	WITHOUT_CLASSIFICATION	1.9166256450863195E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999991608724431	WITHOUT_CLASSIFICATION	8.391275569075816E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999873654069217	WITHOUT_CLASSIFICATION	1.2634593078427689E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999854668338598	WITHOUT_CLASSIFICATION	1.4533166140185432E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998618538331848	WITHOUT_CLASSIFICATION	1.3814616681520397E-4	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998618538331848	WITHOUT_CLASSIFICATION	1.3814616681520397E-4	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999982614198971	WITHOUT_CLASSIFICATION	1.738580102896792E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999985318397742	WITHOUT_CLASSIFICATION	1.468160225844148E-6	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999985318397742	WITHOUT_CLASSIFICATION	1.468160225844148E-6	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997913274120377	WITHOUT_CLASSIFICATION	2.0867258796232935E-4	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999994214630735	WITHOUT_CLASSIFICATION	5.78536926504354E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999946204179513	WITHOUT_CLASSIFICATION	5.379582048743651E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999993062894226	WITHOUT_CLASSIFICATION	6.937105774969585E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999993062894226	WITHOUT_CLASSIFICATION	6.937105774969585E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996696207213	WITHOUT_CLASSIFICATION	3.3037927875948156E-7	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999957046096045	WITHOUT_CLASSIFICATION	4.295390395520449E-6	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999957046096045	WITHOUT_CLASSIFICATION	4.295390395520449E-6	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999554934360051	WITHOUT_CLASSIFICATION	4.4506563994997816E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999989560834148	WITHOUT_CLASSIFICATION	1.0439165851310229E-6	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999992161237589	WITHOUT_CLASSIFICATION	7.838762411703711E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999289859636613	WITHOUT_CLASSIFICATION	7.101403633858733E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999591891582563	WITHOUT_CLASSIFICATION	4.0810841743747936E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999407605511617	WITHOUT_CLASSIFICATION	5.923944883833124E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999419028409969	WITHOUT_CLASSIFICATION	5.8097159003022916E-5	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999634342138953	WITHOUT_CLASSIFICATION	3.6565786104702755E-5	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.998518566008457	WITHOUT_CLASSIFICATION	0.0014814339915430008	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999576124149706	WITHOUT_CLASSIFICATION	4.2387585029388085E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999945821603441	WITHOUT_CLASSIFICATION	5.417839655889377E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999539737185624	WITHOUT_CLASSIFICATION	4.602628143761931E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999970969746992	WITHOUT_CLASSIFICATION	2.903025300774051E-6	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997891769170195	WITHOUT_CLASSIFICATION	2.1082308298041218E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999932499063092	WITHOUT_CLASSIFICATION	6.750093690705894E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999539737185624	WITHOUT_CLASSIFICATION	4.602628143761931E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999997507249303	WITHOUT_CLASSIFICATION	2.492750696755945E-7	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998540031448	WITHOUT_CLASSIFICATION	1.4599685505308685E-7	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999589995389776	WITHOUT_CLASSIFICATION	4.100046102236308E-5	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999761807749074	WITHOUT_CLASSIFICATION	2.3819225092599772E-5	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999681248550458	WITHOUT_CLASSIFICATION	3.187514495416597E-5	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999519049575479	WITHOUT_CLASSIFICATION	4.8095042452022305E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999330894612686	WITHOUT_CLASSIFICATION	6.691053873143995E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999460667492275	WITHOUT_CLASSIFICATION	5.393325077260401E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999638463422829	WITHOUT_CLASSIFICATION	3.6153657717175974E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994693144566	WITHOUT_CLASSIFICATION	5.306855433607902E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999982579531534	WITHOUT_CLASSIFICATION	1.7420468465862018E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999977143812163	WITHOUT_CLASSIFICATION	2.285618783734989E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999448432305934	WITHOUT_CLASSIFICATION	5.515676940663029E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999419028409969	WITHOUT_CLASSIFICATION	5.8097159003022916E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999638463422829	WITHOUT_CLASSIFICATION	3.6153657717175974E-5	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999982579531534	WITHOUT_CLASSIFICATION	1.7420468465862018E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999448432305934	WITHOUT_CLASSIFICATION	5.515676940663029E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996820196574	WITHOUT_CLASSIFICATION	3.179803425005416E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.999947221688039	WITHOUT_CLASSIFICATION	5.277831196116061E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998714340269	WITHOUT_CLASSIFICATION	1.2856597315207462E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999422299163102	WITHOUT_CLASSIFICATION	5.777008368969614E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999708278210999	WITHOUT_CLASSIFICATION	2.9172178900177934E-5	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999937318633154	WITHOUT_CLASSIFICATION	6.26813668461658E-6	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999784992912639	WITHOUT_CLASSIFICATION	2.1500708736006997E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999986824892219	WITHOUT_CLASSIFICATION	1.3175107781908378E-6	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999816016995612	WITHOUT_CLASSIFICATION	1.8398300438821088E-5	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999701935914	WITHOUT_CLASSIFICATION	2.9806408595886285E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999981634331889	WITHOUT_CLASSIFICATION	1.8365668110792053E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999990129141975	WITHOUT_CLASSIFICATION	9.8708580262503E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999698532636	WITHOUT_CLASSIFICATION	3.0146736389446486E-7	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999991025557584	WITHOUT_CLASSIFICATION	8.974442416680785E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999462023274446	WITHOUT_CLASSIFICATION	5.379767255546518E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999497922897715	WITHOUT_CLASSIFICATION	5.020771022836106E-5	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999524307693178	WITHOUT_CLASSIFICATION	4.7569230682212086E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999997989687473	WITHOUT_CLASSIFICATION	2.0103125269523195E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999693376604243	WITHOUT_CLASSIFICATION	3.06623395756671E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999638463422829	WITHOUT_CLASSIFICATION	3.6153657717175974E-5	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991788465797	WITHOUT_CLASSIFICATION	8.211534202537963E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999986602860391	WITHOUT_CLASSIFICATION	1.3397139609054034E-6	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999991912599491	WITHOUT_CLASSIFICATION	8.087400508694451E-7	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9981044819927656	WITHOUT_CLASSIFICATION	0.001895518007234396	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999975241887452	WITHOUT_CLASSIFICATION	2.4758112548382548E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999972146844042	WITHOUT_CLASSIFICATION	2.7853155957762966E-6	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999765838957	WITHOUT_CLASSIFICATION	2.3416104284683303E-8	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.99999943972628	WITHOUT_CLASSIFICATION	5.602737198694888E-7	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999695647421161	WITHOUT_CLASSIFICATION	3.0435257883935553E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999373548196191	WITHOUT_CLASSIFICATION	6.264518038088465E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999722410665596	WITHOUT_CLASSIFICATION	2.775893344040256E-5	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999609940231057	WITHOUT_CLASSIFICATION	3.900597689426521E-5	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999996829422735	WITHOUT_CLASSIFICATION	3.170577264713082E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998806274703	WITHOUT_CLASSIFICATION	1.193725297733637E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.999998584757281	WITHOUT_CLASSIFICATION	1.4152427189972483E-6	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999988691655938	WITHOUT_CLASSIFICATION	1.1308344062958488E-6	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999944478600411	WITHOUT_CLASSIFICATION	5.552139958832803E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999979475998642	WITHOUT_CLASSIFICATION	2.0524001358662646E-6	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999987843752614	WITHOUT_CLASSIFICATION	1.2156247386621771E-6	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999889422643328	WITHOUT_CLASSIFICATION	1.105773566716188E-5	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999994254335918	WITHOUT_CLASSIFICATION	5.745664083068713E-7	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999992813084614	WITHOUT_CLASSIFICATION	7.186915386544402E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999918386824277	WITHOUT_CLASSIFICATION	8.16131757239254E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999876548050419	WITHOUT_CLASSIFICATION	1.2345194957973403E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999882483245431	WITHOUT_CLASSIFICATION	1.1751675456915858E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999882483245431	WITHOUT_CLASSIFICATION	1.1751675456915858E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999855943832646	WITHOUT_CLASSIFICATION	1.4405616735272788E-5	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999977870642629	WITHOUT_CLASSIFICATION	2.2129357370835454E-6	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999996008794682	WITHOUT_CLASSIFICATION	3.9912053184918077E-7	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999970526844661	WITHOUT_CLASSIFICATION	2.947315533790083E-6	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999797013535453	WITHOUT_CLASSIFICATION	2.0298646454763907E-5	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999972029420028	WITHOUT_CLASSIFICATION	2.797057997252503E-6	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999986868596695	WITHOUT_CLASSIFICATION	1.3131403305779875E-6	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999986480575662	WITHOUT_CLASSIFICATION	1.351942433770771E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999301014263733	WITHOUT_CLASSIFICATION	6.989857362672118E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999937313152923	WITHOUT_CLASSIFICATION	6.268684707702294E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999881142468616	WITHOUT_CLASSIFICATION	1.1885753138435365E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999992625270144	WITHOUT_CLASSIFICATION	7.374729856223468E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999992564125453	WITHOUT_CLASSIFICATION	7.435874547421047E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999982531658486	WITHOUT_CLASSIFICATION	1.7468341513892153E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980415508944	WITHOUT_CLASSIFICATION	1.958449105545999E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993207890916	WITHOUT_CLASSIFICATION	6.792109082855009E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999703288149767	WITHOUT_CLASSIFICATION	2.967118502328395E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999980353476194	WITHOUT_CLASSIFICATION	1.964652380490637E-6	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999933947505725	WITHOUT_CLASSIFICATION	6.605249427517166E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999977661484402	WITHOUT_CLASSIFICATION	2.233851559826023E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999878753521375	WITHOUT_CLASSIFICATION	1.2124647862536662E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999878753521375	WITHOUT_CLASSIFICATION	1.2124647862536662E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999951950885289	WITHOUT_CLASSIFICATION	4.8049114710950706E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999951950885289	WITHOUT_CLASSIFICATION	4.8049114710950706E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999918386824277	WITHOUT_CLASSIFICATION	8.16131757239254E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999976086231182	WITHOUT_CLASSIFICATION	2.391376881936276E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998582130347341	WITHOUT_CLASSIFICATION	1.4178696526594568E-4	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999926266860891	WITHOUT_CLASSIFICATION	7.373313910962234E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998582130347341	WITHOUT_CLASSIFICATION	1.4178696526594568E-4	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999926266860891	WITHOUT_CLASSIFICATION	7.373313910962234E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999812917882797	WITHOUT_CLASSIFICATION	1.8708211720298067E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998656440068024	WITHOUT_CLASSIFICATION	1.3435599319763176E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999279681698	WITHOUT_CLASSIFICATION	7.203183021137192E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999985262164656	WITHOUT_CLASSIFICATION	1.4737835344785217E-6	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999947957326116	WITHOUT_CLASSIFICATION	5.2042673884445756E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9993774374722981	WITHOUT_CLASSIFICATION	6.225625277019141E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990436381572	WITHOUT_CLASSIFICATION	9.563618428131537E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999953076976771	WITHOUT_CLASSIFICATION	4.692302322859285E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999800566742472	WITHOUT_CLASSIFICATION	1.9943325752817884E-5	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999933557731838	WITHOUT_CLASSIFICATION	6.644226816195044E-6	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999949224709054	WITHOUT_CLASSIFICATION	5.077529094648866E-6	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997884890314	WITHOUT_CLASSIFICATION	2.1151096861817958E-7	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999981778135775	WITHOUT_CLASSIFICATION	1.822186422499079E-6	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999538812425836	WITHOUT_CLASSIFICATION	4.6118757416562976E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999615208817887	WITHOUT_CLASSIFICATION	3.847911821129592E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998622254631663	WITHOUT_CLASSIFICATION	1.3777453683371394E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998622254631663	WITHOUT_CLASSIFICATION	1.3777453683371394E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999986067773594	WITHOUT_CLASSIFICATION	1.3932226406976924E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999812917882797	WITHOUT_CLASSIFICATION	1.8708211720298067E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999903912893469	WITHOUT_CLASSIFICATION	9.608710653202789E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999462513856511	WITHOUT_CLASSIFICATION	5.37486143488737E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995823524507	WITHOUT_CLASSIFICATION	4.1764754940291164E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999693303163135	WITHOUT_CLASSIFICATION	3.066968368640877E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9947796205306315	WITHOUT_CLASSIFICATION	0.005220379469368544	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999812917882797	WITHOUT_CLASSIFICATION	1.8708211720298067E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999693303163135	WITHOUT_CLASSIFICATION	3.066968368640877E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9947796205306315	WITHOUT_CLASSIFICATION	0.005220379469368544	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999912511028571	WITHOUT_CLASSIFICATION	8.748897142943124E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999607772291574	WITHOUT_CLASSIFICATION	3.9222770842526655E-5	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999987856486355	WITHOUT_CLASSIFICATION	1.214351364479003E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999812917882797	WITHOUT_CLASSIFICATION	1.8708211720298067E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999812917882797	WITHOUT_CLASSIFICATION	1.8708211720298067E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999951646502053	WITHOUT_CLASSIFICATION	4.835349794571667E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999980255499452	WITHOUT_CLASSIFICATION	1.974450054780389E-6	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.999984217129418	WITHOUT_CLASSIFICATION	1.5782870582041674E-5	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999978883916181	WITHOUT_CLASSIFICATION	2.111608381867779E-6	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999964331695452	WITHOUT_CLASSIFICATION	3.566830454712911E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999995381802553	WITHOUT_CLASSIFICATION	4.6181974461027386E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999994072617506	WITHOUT_CLASSIFICATION	5.927382493084305E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999969370066664	WITHOUT_CLASSIFICATION	3.062993333706964E-6	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999985424182118	WITHOUT_CLASSIFICATION	1.457581788178555E-6	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999822485987624	WITHOUT_CLASSIFICATION	1.7751401237587545E-5	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998873659118	WITHOUT_CLASSIFICATION	1.126340881204815E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999983098885267	WITHOUT_CLASSIFICATION	1.6901114732919332E-6	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999917340642733	WITHOUT_CLASSIFICATION	8.265935726637702E-6	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999986714117095	WITHOUT_CLASSIFICATION	1.3285882905206658E-6	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981957434698	WITHOUT_CLASSIFICATION	1.8042565301227614E-6	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9983714467613372	WITHOUT_CLASSIFICATION	0.0016285532386628504	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999893922456344	WITHOUT_CLASSIFICATION	1.0607754365474352E-5	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999842072796763	WITHOUT_CLASSIFICATION	1.579272032367856E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999861446815834	WITHOUT_CLASSIFICATION	1.3855318416535584E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999965966921394	WITHOUT_CLASSIFICATION	3.403307860666945E-6	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999800306649375	WITHOUT_CLASSIFICATION	1.996933506255605E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998471323499345	WITHOUT_CLASSIFICATION	1.5286765006554355E-4	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9998471323499345	WITHOUT_CLASSIFICATION	1.5286765006554355E-4	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999893922456344	WITHOUT_CLASSIFICATION	1.0607754365474352E-5	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9789876788823177	WITHOUT_CLASSIFICATION	0.02101232111768221	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9994468385503895	WITHOUT_CLASSIFICATION	5.531614496104292E-4	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9997306952968877	WITHOUT_CLASSIFICATION	2.6930470311223564E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999865161485894	WITHOUT_CLASSIFICATION	1.3483851410642529E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999649040747586	WITHOUT_CLASSIFICATION	3.509592524143075E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999990572692659	WITHOUT_CLASSIFICATION	9.427307341718397E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999992697030151	WITHOUT_CLASSIFICATION	7.302969849383448E-7	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999923989494257	WITHOUT_CLASSIFICATION	7.601050574216081E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998868318826	WITHOUT_CLASSIFICATION	1.1316811737916547E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999964477582137	WITHOUT_CLASSIFICATION	3.552241786343479E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999986290725025	WITHOUT_CLASSIFICATION	1.3709274974497865E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999971139052014	WITHOUT_CLASSIFICATION	2.886094798513636E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999209751059819	WITHOUT_CLASSIFICATION	7.902489401812404E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996625570337	WITHOUT_CLASSIFICATION	3.3744296643250264E-7	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989385808479	WITHOUT_CLASSIFICATION	1.0614191522150711E-6	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999990073379744	WITHOUT_CLASSIFICATION	9.926620255905152E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999442994721	WITHOUT_CLASSIFICATION	5.57005277775542E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999930403815708	WITHOUT_CLASSIFICATION	6.959618429175424E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998699269469	WITHOUT_CLASSIFICATION	1.3007305308950316E-6	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999994630822715	WITHOUT_CLASSIFICATION	5.369177284673705E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999998623180754	WITHOUT_CLASSIFICATION	1.3768192458667726E-6	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998022954941	WITHOUT_CLASSIFICATION	1.9770450591817846E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988726976307	WITHOUT_CLASSIFICATION	1.127302369386005E-6	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967035548233	WITHOUT_CLASSIFICATION	3.29644517672015E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918067089837	WITHOUT_CLASSIFICATION	8.193291016337577E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967192209132	WITHOUT_CLASSIFICATION	3.2807790868932764E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806929132232	WITHOUT_CLASSIFICATION	1.9307086776745783E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816181706171	WITHOUT_CLASSIFICATION	1.838182938288418E-5	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999862235150914	WITHOUT_CLASSIFICATION	1.3776484908555814E-5	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957051443862	WITHOUT_CLASSIFICATION	4.294855613880601E-6	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999979730326634	WITHOUT_CLASSIFICATION	2.0269673366071654E-6	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999996231944582	WITHOUT_CLASSIFICATION	3.7680554184380175E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976217582301	WITHOUT_CLASSIFICATION	2.3782417698726144E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969698935262	WITHOUT_CLASSIFICATION	3.0301064738941992E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991451098894	WITHOUT_CLASSIFICATION	8.548901107031832E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984489560852	WITHOUT_CLASSIFICATION	1.551043914805758E-5	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845795051253	WITHOUT_CLASSIFICATION	1.542049487467299E-5	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937306305735	WITHOUT_CLASSIFICATION	6.269369426404337E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972185327786	WITHOUT_CLASSIFICATION	2.7814672214484374E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789896043567	WITHOUT_CLASSIFICATION	2.1010395643274023E-5	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999963880829742	WITHOUT_CLASSIFICATION	3.611917025865946E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991370186508	WITHOUT_CLASSIFICATION	8.629813492146521E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999900668139032	WITHOUT_CLASSIFICATION	9.93318609670264E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999947123557353	WITHOUT_CLASSIFICATION	5.2876442646528935E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999978352665071	WITHOUT_CLASSIFICATION	2.1647334929443453E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998292624646481	WITHOUT_CLASSIFICATION	1.707375353519209E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999646365765608	WITHOUT_CLASSIFICATION	3.536342343923815E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999950273169643	WITHOUT_CLASSIFICATION	4.9726830356093125E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999969079741318	WITHOUT_CLASSIFICATION	3.0920258682118955E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999587748902576	WITHOUT_CLASSIFICATION	4.122510974247248E-5	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999707557281213	WITHOUT_CLASSIFICATION	2.9244271878577502E-5	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999451239605173	WITHOUT_CLASSIFICATION	5.48760394827199E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999731317602164	WITHOUT_CLASSIFICATION	2.6868239783499504E-5	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999646383891728	WITHOUT_CLASSIFICATION	3.536161082719949E-5	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999932744857175	WITHOUT_CLASSIFICATION	6.725514282426035E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999989554171873	WITHOUT_CLASSIFICATION	1.0445828126338522E-6	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999993883581534	WITHOUT_CLASSIFICATION	6.116418465911566E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999400572788829	WITHOUT_CLASSIFICATION	5.994272111699788E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999460296194	WITHOUT_CLASSIFICATION	5.3970380664048256E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932433906319	WITHOUT_CLASSIFICATION	6.7566093681114025E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866926879541	WITHOUT_CLASSIFICATION	1.3307312045896267E-5	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981819499686	WITHOUT_CLASSIFICATION	1.8180500314751727E-6	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909958121379	WITHOUT_CLASSIFICATION	9.004187862186386E-6	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999890297696075	WITHOUT_CLASSIFICATION	1.0970230392655005E-5	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999995175020249	WITHOUT_CLASSIFICATION	4.824979750935804E-7	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999999627699758	WITHOUT_CLASSIFICATION	3.72300241977645E-7	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999997584130864	WITHOUT_CLASSIFICATION	2.415869135964313E-6	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847243623962	WITHOUT_CLASSIFICATION	1.5275637603772716E-5	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999995622665769	WITHOUT_CLASSIFICATION	4.3773342298314713E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999686606431061	WITHOUT_CLASSIFICATION	3.133935689390257E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999992962879489	WITHOUT_CLASSIFICATION	7.037120511024737E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999595909002	WITHOUT_CLASSIFICATION	4.040909979527085E-8	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999982056631888	WITHOUT_CLASSIFICATION	1.7943368112849007E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996864283449	WITHOUT_CLASSIFICATION	3.1357165500972186E-7	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999978478695407	WITHOUT_CLASSIFICATION	2.1521304592539775E-6	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999967691454681	WITHOUT_CLASSIFICATION	3.2308545319976085E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998292624646481	WITHOUT_CLASSIFICATION	1.707375353519209E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999990645464554	WITHOUT_CLASSIFICATION	9.354535446337531E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996377027023	WITHOUT_CLASSIFICATION	3.6229729769713104E-7	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999989188295983	WITHOUT_CLASSIFICATION	1.0811704016820547E-6	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999949274235193	WITHOUT_CLASSIFICATION	5.072576480762564E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996836163955	WITHOUT_CLASSIFICATION	3.1638360452075657E-7	TEST
// function templates	WITHOUT_CLASSIFICATION	0.999993875406809	WITHOUT_CLASSIFICATION	6.1245931910732465E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999583805521063	WITHOUT_CLASSIFICATION	4.161944789370963E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999904821278295	WITHOUT_CLASSIFICATION	9.517872170449081E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999832329903571	WITHOUT_CLASSIFICATION	1.6767009642913482E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999998946745598	WITHOUT_CLASSIFICATION	1.0532544020302947E-6	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999599774999	WITHOUT_CLASSIFICATION	4.0022500098424095E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999833669733	WITHOUT_CLASSIFICATION	1.6633026703411798E-7	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999998646915271	WITHOUT_CLASSIFICATION	1.353084729077187E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998620860429	WITHOUT_CLASSIFICATION	1.3791395710526047E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999682081944843	WITHOUT_CLASSIFICATION	3.179180551564479E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999973702837357	WITHOUT_CLASSIFICATION	2.6297162643249702E-6	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999813308086604	WITHOUT_CLASSIFICATION	1.866919133961391E-5	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999876347397236	WITHOUT_CLASSIFICATION	1.2365260276401176E-5	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999976715521913	WITHOUT_CLASSIFICATION	2.328447808803858E-6	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999940889692175	WITHOUT_CLASSIFICATION	5.911030782531491E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997965089892	WITHOUT_CLASSIFICATION	2.0349101077763105E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999944407347736	WITHOUT_CLASSIFICATION	5.559265226384507E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.99999891717324	WITHOUT_CLASSIFICATION	1.0828267600530636E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999995824354923	WITHOUT_CLASSIFICATION	4.1756450777698177E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999962536180329	WITHOUT_CLASSIFICATION	3.746381967134784E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999947301337224	WITHOUT_CLASSIFICATION	5.269866277579379E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9992615591101311	WITHOUT_CLASSIFICATION	7.384408898689059E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999972951599336	WITHOUT_CLASSIFICATION	2.7048400663177193E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999965250382928	WITHOUT_CLASSIFICATION	3.4749617071268045E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974811646197	WITHOUT_CLASSIFICATION	2.5188353802987777E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998292624646481	WITHOUT_CLASSIFICATION	1.707375353519209E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999971126890602	WITHOUT_CLASSIFICATION	2.887310939753746E-6	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999824905197672	WITHOUT_CLASSIFICATION	1.7509480232867414E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998472312750025	WITHOUT_CLASSIFICATION	1.5276872499748304E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998292624646481	WITHOUT_CLASSIFICATION	1.707375353519209E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999997086639981	WITHOUT_CLASSIFICATION	2.9133600189861555E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999997965089892	WITHOUT_CLASSIFICATION	2.0349101077763105E-7	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999891709331822	WITHOUT_CLASSIFICATION	1.0829066817860092E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998603033518317	WITHOUT_CLASSIFICATION	1.3969664816835742E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998325832316585	WITHOUT_CLASSIFICATION	1.6741676834153076E-4	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999998946745598	WITHOUT_CLASSIFICATION	1.0532544020302947E-6	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999599774999	WITHOUT_CLASSIFICATION	4.0022500098424095E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999833669733	WITHOUT_CLASSIFICATION	1.6633026703411798E-7	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999948989509893	WITHOUT_CLASSIFICATION	5.101049010813247E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999982755519226	WITHOUT_CLASSIFICATION	1.7244480774446787E-6	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999891500940598	WITHOUT_CLASSIFICATION	1.0849905940297371E-5	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999978072578559	WITHOUT_CLASSIFICATION	2.1927421441207337E-6	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999995916550979	WITHOUT_CLASSIFICATION	4.083449020415073E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998292624646481	WITHOUT_CLASSIFICATION	1.707375353519209E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999998646915271	WITHOUT_CLASSIFICATION	1.353084729077187E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999998620860429	WITHOUT_CLASSIFICATION	1.3791395710526047E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972481019621	WITHOUT_CLASSIFICATION	2.7518980378234056E-6	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976188018668	WITHOUT_CLASSIFICATION	2.3811981332311613E-6	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999930237188398	WITHOUT_CLASSIFICATION	6.976281160244415E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999938962892923	WITHOUT_CLASSIFICATION	6.103710707694384E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999978025174587	WITHOUT_CLASSIFICATION	2.1974825412975324E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999996626745518	WITHOUT_CLASSIFICATION	3.3732544824186694E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789896043567	WITHOUT_CLASSIFICATION	2.1010395643274023E-5	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999932460317853	WITHOUT_CLASSIFICATION	6.753968214649271E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997139055075127	WITHOUT_CLASSIFICATION	2.8609449248730173E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999865579097589	WITHOUT_CLASSIFICATION	1.3442090241237855E-5	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998588605882	WITHOUT_CLASSIFICATION	1.4113941175480208E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999996679034817	WITHOUT_CLASSIFICATION	3.32096518282381E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806929132232	WITHOUT_CLASSIFICATION	1.9307086776745783E-5	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816181706171	WITHOUT_CLASSIFICATION	1.838182938288418E-5	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969698935262	WITHOUT_CLASSIFICATION	3.0301064738941992E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999996679034817	WITHOUT_CLASSIFICATION	3.32096518282381E-7	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999996159289866	WITHOUT_CLASSIFICATION	3.840710134115462E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997795005349	WITHOUT_CLASSIFICATION	2.204994651681762E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944923162863	WITHOUT_CLASSIFICATION	5.507683713698288E-6	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993199705741	WITHOUT_CLASSIFICATION	6.800294259014335E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999987497763923	WITHOUT_CLASSIFICATION	1.250223607689806E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998395041037703	WITHOUT_CLASSIFICATION	1.6049589622957414E-4	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991451098894	WITHOUT_CLASSIFICATION	8.548901107031832E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937306305735	WITHOUT_CLASSIFICATION	6.269369426404337E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999595909002	WITHOUT_CLASSIFICATION	4.040909979527085E-8	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999960008947978	WITHOUT_CLASSIFICATION	3.999105202177535E-6	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999997613643129	WITHOUT_CLASSIFICATION	2.386356870818256E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999973407186298	WITHOUT_CLASSIFICATION	2.6592813702472553E-6	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998785965898347	WITHOUT_CLASSIFICATION	1.2140341016533986E-4	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999988993401536	WITHOUT_CLASSIFICATION	1.1006598463566184E-6	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999979077834055	WITHOUT_CLASSIFICATION	2.0922165944553026E-6	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999932565485093	WITHOUT_CLASSIFICATION	6.743451490536852E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998868318826	WITHOUT_CLASSIFICATION	1.1316811737916547E-7	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999999441395372	WITHOUT_CLASSIFICATION	5.586046280595069E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999932526771889	WITHOUT_CLASSIFICATION	6.747322811214332E-6	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999991346201764	WITHOUT_CLASSIFICATION	8.653798235111791E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999949317249327	WITHOUT_CLASSIFICATION	5.0682750672930706E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999987794668924	WITHOUT_CLASSIFICATION	1.2205331076164644E-6	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999769072062519	WITHOUT_CLASSIFICATION	2.3092793748112385E-5	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958202028062	WITHOUT_CLASSIFICATION	4.179797193875493E-6	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994476658731	WITHOUT_CLASSIFICATION	5.523341269966117E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989503304249	WITHOUT_CLASSIFICATION	1.0496695751865024E-6	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999970465655846	WITHOUT_CLASSIFICATION	2.953434415298551E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999801578232071	WITHOUT_CLASSIFICATION	1.9842176792845433E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992325189307	WITHOUT_CLASSIFICATION	7.674810693217828E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992149819928	WITHOUT_CLASSIFICATION	7.850180070682823E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993958806979	WITHOUT_CLASSIFICATION	6.041193021717042E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994157792188	WITHOUT_CLASSIFICATION	5.842207813191592E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999986285406888	WITHOUT_CLASSIFICATION	1.3714593111819158E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999994898480478	WITHOUT_CLASSIFICATION	5.101519522040727E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996692116764	WITHOUT_CLASSIFICATION	3.3078832367684123E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999972895467014	WITHOUT_CLASSIFICATION	2.7104532985096126E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990704546364	WITHOUT_CLASSIFICATION	9.295453635060848E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982580221748	WITHOUT_CLASSIFICATION	1.7419778251976805E-6	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999995858530443	WITHOUT_CLASSIFICATION	4.1414695570615705E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999870973527958	WITHOUT_CLASSIFICATION	1.290264720416134E-5	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999988281796782	WITHOUT_CLASSIFICATION	1.1718203218689733E-6	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999987737823488	WITHOUT_CLASSIFICATION	1.2262176511925547E-6	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999622499705579	WITHOUT_CLASSIFICATION	3.77500294420885E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999575231344708	WITHOUT_CLASSIFICATION	4.2476865529110275E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999713364129056	WITHOUT_CLASSIFICATION	2.8663587094394675E-5	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999279128876	WITHOUT_CLASSIFICATION	7.208711240537527E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999986333570219	WITHOUT_CLASSIFICATION	1.3666429781088886E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999965921017867	WITHOUT_CLASSIFICATION	3.407898213301856E-6	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999260700047	WITHOUT_CLASSIFICATION	7.392999536077417E-8	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999987913327144	WITHOUT_CLASSIFICATION	1.2086672856035582E-5	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999751013186773	WITHOUT_CLASSIFICATION	2.489868132265407E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999985956034891	WITHOUT_CLASSIFICATION	1.4043965108430927E-6	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998880713512216	WITHOUT_CLASSIFICATION	1.1192864877842487E-4	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999991199386185	WITHOUT_CLASSIFICATION	8.800613814849535E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999892541931169	WITHOUT_CLASSIFICATION	1.0745806883098783E-5	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999721394062562	WITHOUT_CLASSIFICATION	2.7860593743924426E-5	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999842401634373	WITHOUT_CLASSIFICATION	1.5759836562716092E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999578474773774	WITHOUT_CLASSIFICATION	4.215252262259231E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999988261570807	WITHOUT_CLASSIFICATION	1.1738429193061446E-6	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999708561087173	WITHOUT_CLASSIFICATION	2.9143891282739312E-5	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996109638591	WITHOUT_CLASSIFICATION	3.8903614084137876E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999973535706507	WITHOUT_CLASSIFICATION	2.646429349284244E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999993203716604	WITHOUT_CLASSIFICATION	6.796283396718056E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999996380579784	WITHOUT_CLASSIFICATION	3.619420215914975E-6	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999991801909953	WITHOUT_CLASSIFICATION	8.19809004699297E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999901220543533	WITHOUT_CLASSIFICATION	9.877945646647824E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999975830979558	WITHOUT_CLASSIFICATION	2.416902044202018E-6	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994919361455	WITHOUT_CLASSIFICATION	5.080638545562704E-7	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999996847754023	WITHOUT_CLASSIFICATION	3.152245976976285E-6	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999909513621336	WITHOUT_CLASSIFICATION	9.048637866447621E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998718786824	WITHOUT_CLASSIFICATION	1.2812131758013405E-7	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999995351780684	WITHOUT_CLASSIFICATION	4.6482193170084323E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998573008849544	WITHOUT_CLASSIFICATION	1.426991150456553E-4	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999982010889893	WITHOUT_CLASSIFICATION	1.7989110106670024E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999995184186312	WITHOUT_CLASSIFICATION	4.815813687669646E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999919664294824	WITHOUT_CLASSIFICATION	8.03357051751856E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999984721113102	WITHOUT_CLASSIFICATION	1.5278886897494384E-6	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999988024658218	WITHOUT_CLASSIFICATION	1.1975341781837418E-6	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999986643926014	WITHOUT_CLASSIFICATION	1.3356073986039541E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999962209694943	WITHOUT_CLASSIFICATION	3.7790305058618236E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999309370826618	WITHOUT_CLASSIFICATION	6.906291733824075E-5	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999846118989126	WITHOUT_CLASSIFICATION	1.538810108741092E-5	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998575056570814	WITHOUT_CLASSIFICATION	1.424943429185748E-4	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999894072554154	WITHOUT_CLASSIFICATION	1.0592744584547118E-5	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999990215847998	WITHOUT_CLASSIFICATION	9.784152001472549E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999692404882448	WITHOUT_CLASSIFICATION	3.0759511755277527E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999774814190586	WITHOUT_CLASSIFICATION	2.2518580941423334E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999943182828236	WITHOUT_CLASSIFICATION	5.681717176349438E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999610971528072	WITHOUT_CLASSIFICATION	3.890284719284386E-5	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999978295269832	WITHOUT_CLASSIFICATION	2.1704730167555184E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999999747221839	WITHOUT_CLASSIFICATION	2.5277816104873686E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999991783638713	WITHOUT_CLASSIFICATION	8.216361287348126E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999644179794431	WITHOUT_CLASSIFICATION	3.558202055680827E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999977781829852	WITHOUT_CLASSIFICATION	2.221817014806232E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998421561116895	WITHOUT_CLASSIFICATION	1.5784388831044686E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999979232373416	WITHOUT_CLASSIFICATION	2.076762658308253E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991656707641	WITHOUT_CLASSIFICATION	8.343292358468152E-7	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999857345528043	WITHOUT_CLASSIFICATION	1.426544719564875E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999923253621612	WITHOUT_CLASSIFICATION	7.674637838744881E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999909886849558	WITHOUT_CLASSIFICATION	9.011315044095067E-6	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998502599525271	WITHOUT_CLASSIFICATION	1.497400474729729E-4	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999718961329325	WITHOUT_CLASSIFICATION	2.8103867067495695E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999641485131768	WITHOUT_CLASSIFICATION	3.585148682312274E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999927645645847	WITHOUT_CLASSIFICATION	7.235435415158825E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.99999410597519	WITHOUT_CLASSIFICATION	5.894024810074315E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999947744035034	WITHOUT_CLASSIFICATION	5.225596496632861E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999961479903	WITHOUT_CLASSIFICATION	3.852009742768209E-9	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999898766662605	WITHOUT_CLASSIFICATION	1.0123333739506503E-5	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999932974002184	WITHOUT_CLASSIFICATION	6.702599781624275E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999882321619228	WITHOUT_CLASSIFICATION	1.1767838077236764E-5	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999898766662605	WITHOUT_CLASSIFICATION	1.0123333739506503E-5	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999997181600327	WITHOUT_CLASSIFICATION	2.818399673092203E-6	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999932692066845	WITHOUT_CLASSIFICATION	6.730793315392612E-6	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999724601943919	WITHOUT_CLASSIFICATION	2.7539805608189938E-5	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999724622969617	WITHOUT_CLASSIFICATION	2.753770303827796E-5	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997603024122	WITHOUT_CLASSIFICATION	2.396975878061512E-7	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999978081552817	WITHOUT_CLASSIFICATION	2.191844718318843E-6	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998160936294201	WITHOUT_CLASSIFICATION	1.8390637057984674E-4	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999977199025568	WITHOUT_CLASSIFICATION	2.2800974431200184E-6	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999996910217422	WITHOUT_CLASSIFICATION	3.0897825777106027E-7	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999649345770371	WITHOUT_CLASSIFICATION	3.506542296291993E-5	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999994495902206	WITHOUT_CLASSIFICATION	5.504097794451616E-7	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999930799111296	WITHOUT_CLASSIFICATION	6.920088870334716E-6	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999890447712484	WITHOUT_CLASSIFICATION	1.0955228751629907E-5	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999936704611425	WITHOUT_CLASSIFICATION	6.329538857545482E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999953522735426	WITHOUT_CLASSIFICATION	4.647726457374024E-6	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999778836330085	WITHOUT_CLASSIFICATION	2.211636699152607E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999368950162629	WITHOUT_CLASSIFICATION	6.310498373714091E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999368950162629	WITHOUT_CLASSIFICATION	6.310498373714091E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999978831976176	WITHOUT_CLASSIFICATION	2.1168023823491696E-6	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999291665696259	WITHOUT_CLASSIFICATION	7.083343037412173E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999589984474714	WITHOUT_CLASSIFICATION	4.10015525285936E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999746905708714	WITHOUT_CLASSIFICATION	2.5309429128604804E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995122915581	WITHOUT_CLASSIFICATION	4.877084417968226E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998017677039662	WITHOUT_CLASSIFICATION	1.9823229603382523E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999867223143358	WITHOUT_CLASSIFICATION	1.3277685664124526E-5	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999788030895	WITHOUT_CLASSIFICATION	2.119691051261856E-7	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999979845448055	WITHOUT_CLASSIFICATION	2.0154551945242366E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999506770727997	WITHOUT_CLASSIFICATION	4.9322927200175816E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999983413812713	WITHOUT_CLASSIFICATION	1.6586187286726473E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999885839926	WITHOUT_CLASSIFICATION	1.1416007374503084E-8	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999976137394504	WITHOUT_CLASSIFICATION	2.386260549558559E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999979992744465	WITHOUT_CLASSIFICATION	2.000725553360114E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999997102876009	WITHOUT_CLASSIFICATION	2.8971239910530127E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999769072062519	WITHOUT_CLASSIFICATION	2.3092793748112385E-5	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999943356780714	WITHOUT_CLASSIFICATION	5.664321928578056E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999970425118176	WITHOUT_CLASSIFICATION	2.9574881823189094E-6	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999864401593872	WITHOUT_CLASSIFICATION	1.3559840612728743E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9965125034595711	WITHOUT_CLASSIFICATION	0.0034874965404289543	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999121577364	WITHOUT_CLASSIFICATION	8.784226357165699E-8	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999519909794398	WITHOUT_CLASSIFICATION	4.800902056023388E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999990573385475	WITHOUT_CLASSIFICATION	9.42661452514859E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999898124617129	WITHOUT_CLASSIFICATION	1.0187538287192229E-5	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997377028541	WITHOUT_CLASSIFICATION	2.622971458496482E-7	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999856495489	WITHOUT_CLASSIFICATION	1.435045110565404E-7	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999987503946985	WITHOUT_CLASSIFICATION	1.2496053013744188E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999991367102122	WITHOUT_CLASSIFICATION	8.632897877106363E-7	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999983879183914	WITHOUT_CLASSIFICATION	1.6120816086503927E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999072798731271	WITHOUT_CLASSIFICATION	9.272012687290355E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999965943060402	WITHOUT_CLASSIFICATION	3.4056939597800352E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999971708354389	WITHOUT_CLASSIFICATION	2.8291645611242445E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9998963678843384	WITHOUT_CLASSIFICATION	1.0363211566167985E-4	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999662216568694	WITHOUT_CLASSIFICATION	3.377834313053135E-5	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999882554999112	WITHOUT_CLASSIFICATION	1.1744500088788337E-5	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999893493583902	WITHOUT_CLASSIFICATION	1.065064160984147E-5	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999890204200403	WITHOUT_CLASSIFICATION	1.0979579959621361E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999899029242333	WITHOUT_CLASSIFICATION	1.0097075766662279E-5	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999989134453894	WITHOUT_CLASSIFICATION	1.0865546106219826E-6	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999928289389285	WITHOUT_CLASSIFICATION	7.171061071504817E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999782812180645	WITHOUT_CLASSIFICATION	2.171878193557366E-5	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999941228183283	WITHOUT_CLASSIFICATION	5.877181671694897E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999075492134	WITHOUT_CLASSIFICATION	9.245078658850678E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998398774851	WITHOUT_CLASSIFICATION	1.6012251488107003E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999984460068693	WITHOUT_CLASSIFICATION	1.5539931307013697E-5	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999975567365247	WITHOUT_CLASSIFICATION	2.443263475270431E-6	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879401415626	WITHOUT_CLASSIFICATION	1.2059858437344188E-5	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961976335527	WITHOUT_CLASSIFICATION	3.8023664471799913E-6	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895512132436	WITHOUT_CLASSIFICATION	1.044878675629305E-5	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998042391158	WITHOUT_CLASSIFICATION	1.957608840933583E-7	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999997722888783	WITHOUT_CLASSIFICATION	2.277111217403923E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999907081804201	WITHOUT_CLASSIFICATION	9.291819579888292E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999997408922022	WITHOUT_CLASSIFICATION	2.5910779774877797E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999998918369287	WITHOUT_CLASSIFICATION	1.0816307129999317E-6	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884389381823	WITHOUT_CLASSIFICATION	1.1561061817665409E-5	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999998918369287	WITHOUT_CLASSIFICATION	1.0816307129999317E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999909688831988	WITHOUT_CLASSIFICATION	9.031116801203558E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999986045700251	WITHOUT_CLASSIFICATION	1.3954299748070391E-6	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999956519980037	WITHOUT_CLASSIFICATION	4.3480019963454105E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992732549077	WITHOUT_CLASSIFICATION	7.267450923621019E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999853950212952	WITHOUT_CLASSIFICATION	1.4604978704748659E-5	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999577422079627	WITHOUT_CLASSIFICATION	4.225779203735955E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998013791245	WITHOUT_CLASSIFICATION	1.9862087555477276E-7	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999994623949768	WITHOUT_CLASSIFICATION	5.376050231620847E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999994183644935	WITHOUT_CLASSIFICATION	5.816355065140159E-7	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999787787837904	WITHOUT_CLASSIFICATION	2.122121620963541E-5	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999996311640447	WITHOUT_CLASSIFICATION	3.68835955408123E-7	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999983793532666	WITHOUT_CLASSIFICATION	1.620646733357211E-6	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999707405000876	WITHOUT_CLASSIFICATION	2.9259499912336495E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9996118524575153	WITHOUT_CLASSIFICATION	3.881475424846844E-4	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999991248865167	WITHOUT_CLASSIFICATION	8.751134834586275E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999994454346026	WITHOUT_CLASSIFICATION	5.545653974162343E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999224434954022	WITHOUT_CLASSIFICATION	7.755650459777372E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999224434954022	WITHOUT_CLASSIFICATION	7.755650459777372E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999919959345743	WITHOUT_CLASSIFICATION	8.00406542568684E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999987736528829	WITHOUT_CLASSIFICATION	1.2263471170525005E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999428207731	WITHOUT_CLASSIFICATION	5.717922689117764E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995508966463	WITHOUT_CLASSIFICATION	4.4910335382000355E-7	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999989426766855	WITHOUT_CLASSIFICATION	1.0573233144900269E-5	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999891768130167	WITHOUT_CLASSIFICATION	1.0823186983264604E-5	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999970346662497	WITHOUT_CLASSIFICATION	2.965333750224402E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999771099410907	WITHOUT_CLASSIFICATION	2.289005890920343E-5	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999880213075256	WITHOUT_CLASSIFICATION	1.1978692474425928E-5	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999990212513533	WITHOUT_CLASSIFICATION	9.787486467217923E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969779950622	WITHOUT_CLASSIFICATION	3.0220049378638953E-6	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999901937887	WITHOUT_CLASSIFICATION	9.806211297490752E-8	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999994001272756	WITHOUT_CLASSIFICATION	5.998727244389255E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999954653538374	WITHOUT_CLASSIFICATION	4.534646162566928E-6	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999981031746571	WITHOUT_CLASSIFICATION	1.896825342813487E-6	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999961251538274	WITHOUT_CLASSIFICATION	3.874846172598506E-6	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999996539484249	WITHOUT_CLASSIFICATION	3.4605157511368887E-7	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999858478058288	WITHOUT_CLASSIFICATION	1.4152194171261299E-5	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999980816726796	WITHOUT_CLASSIFICATION	1.9183273204640194E-6	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999415483065	WITHOUT_CLASSIFICATION	5.845169340207223E-8	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.99999784496125	WITHOUT_CLASSIFICATION	2.1550387500397604E-6	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999986534673633	WITHOUT_CLASSIFICATION	1.3465326367819867E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996193788889	WITHOUT_CLASSIFICATION	3.8062111097550845E-7	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999998491663775	WITHOUT_CLASSIFICATION	1.50833622562069E-7	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999936479331856	WITHOUT_CLASSIFICATION	6.3520668144116485E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999986356342955	WITHOUT_CLASSIFICATION	1.3643657044754946E-6	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999870971885032	WITHOUT_CLASSIFICATION	1.290281149676265E-5	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999920138082972	WITHOUT_CLASSIFICATION	7.986191702950775E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999935125742706	WITHOUT_CLASSIFICATION	6.487425729406378E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999925459031872	WITHOUT_CLASSIFICATION	7.45409681280388E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999995174906174	WITHOUT_CLASSIFICATION	4.8250938259892935E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999927708799764	WITHOUT_CLASSIFICATION	7.229120023590184E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999014476533258	WITHOUT_CLASSIFICATION	9.855234667420037E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999547729858617	WITHOUT_CLASSIFICATION	4.5227014138441454E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999945938580694	WITHOUT_CLASSIFICATION	5.40614193066745E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998961495703	WITHOUT_CLASSIFICATION	1.0385042970104851E-7	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998317180856	WITHOUT_CLASSIFICATION	1.6828191451005786E-7	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999607832001735	WITHOUT_CLASSIFICATION	3.9216799826508916E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999986954042641	WITHOUT_CLASSIFICATION	1.304595735890792E-6	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999995205610025	WITHOUT_CLASSIFICATION	4.794389975985294E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999570839079	WITHOUT_CLASSIFICATION	4.2916092103381876E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859440231424	WITHOUT_CLASSIFICATION	1.4055976857517945E-5	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999828063556275	WITHOUT_CLASSIFICATION	1.7193644372479494E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999996379821567	WITHOUT_CLASSIFICATION	3.620178432282539E-7	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999235447949	WITHOUT_CLASSIFICATION	7.645520507629618E-8	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999976744936742	WITHOUT_CLASSIFICATION	2.3255063258352863E-6	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999993683626627	WITHOUT_CLASSIFICATION	6.316373373514466E-7	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998648397334	WITHOUT_CLASSIFICATION	1.3516026672765169E-7	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999972953263531	WITHOUT_CLASSIFICATION	2.7046736469829335E-6	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999787250429645	WITHOUT_CLASSIFICATION	2.127495703554249E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980431086895	WITHOUT_CLASSIFICATION	1.956891310495379E-5	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999910610449148	WITHOUT_CLASSIFICATION	8.93895508522042E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999769111795506	WITHOUT_CLASSIFICATION	2.308882044945476E-5	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999923776858444	WITHOUT_CLASSIFICATION	7.6223141557322935E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999839786727571	WITHOUT_CLASSIFICATION	1.6021327242781593E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999997086639981	WITHOUT_CLASSIFICATION	2.9133600189861555E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.999997086639981	WITHOUT_CLASSIFICATION	2.9133600189861555E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999759997085215	WITHOUT_CLASSIFICATION	2.400029147847483E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999536225359679	WITHOUT_CLASSIFICATION	4.6377464032224605E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999991173693956	WITHOUT_CLASSIFICATION	8.826306043635814E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999977263120088	WITHOUT_CLASSIFICATION	2.2736879912059926E-6	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999978079889096	WITHOUT_CLASSIFICATION	2.1920110903837632E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999959291372341	WITHOUT_CLASSIFICATION	4.070862765845923E-6	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999997188779743	WITHOUT_CLASSIFICATION	2.8112202566085246E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999998257000722	WITHOUT_CLASSIFICATION	1.7429992793403693E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999686040415324	WITHOUT_CLASSIFICATION	3.139595846754603E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999210469814	WITHOUT_CLASSIFICATION	7.895301846592717E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999982993797456	WITHOUT_CLASSIFICATION	1.7006202544447398E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999970514385419	WITHOUT_CLASSIFICATION	2.9485614580978088E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999488911752972	WITHOUT_CLASSIFICATION	5.110882470275044E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996429311864	WITHOUT_CLASSIFICATION	3.570688136074268E-7	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999944449979946	WITHOUT_CLASSIFICATION	5.555002005403937E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999819058657056	WITHOUT_CLASSIFICATION	1.8094134294492942E-5	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997455281876	WITHOUT_CLASSIFICATION	2.5447181229436066E-7	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999380783227244	WITHOUT_CLASSIFICATION	6.19216772755224E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999914135547572	WITHOUT_CLASSIFICATION	8.586445242713116E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999881067156364	WITHOUT_CLASSIFICATION	1.1893284363679074E-5	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999988789284786	WITHOUT_CLASSIFICATION	1.1210715213506065E-6	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999882008799118	WITHOUT_CLASSIFICATION	1.1799120088217785E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998448837168176	WITHOUT_CLASSIFICATION	1.5511628318248341E-4	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999990729709795	WITHOUT_CLASSIFICATION	9.2702902063211E-7	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999980170504247	WITHOUT_CLASSIFICATION	1.9829495752959665E-6	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999928603032752	WITHOUT_CLASSIFICATION	7.1396967249184836E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999968188937326	WITHOUT_CLASSIFICATION	3.1811062674094882E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998320350343275	WITHOUT_CLASSIFICATION	1.679649656725477E-4	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999956192029644	WITHOUT_CLASSIFICATION	4.380797035646634E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998448837168176	WITHOUT_CLASSIFICATION	1.5511628318248341E-4	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999997302332676	WITHOUT_CLASSIFICATION	2.6976673240429137E-6	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999971786244	WITHOUT_CLASSIFICATION	2.821375612470051E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9994433139187667	WITHOUT_CLASSIFICATION	5.566860812333154E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999938960611849	WITHOUT_CLASSIFICATION	6.1039388150783565E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999996518736263	WITHOUT_CLASSIFICATION	3.4812637369850584E-6	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998358728316902	WITHOUT_CLASSIFICATION	1.6412716830975732E-4	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999982661685541	WITHOUT_CLASSIFICATION	1.733831445902515E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999943266182006	WITHOUT_CLASSIFICATION	5.673381799342579E-6	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999148713776151	WITHOUT_CLASSIFICATION	8.512862238484484E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999938960611849	WITHOUT_CLASSIFICATION	6.1039388150783565E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999887173296221	WITHOUT_CLASSIFICATION	1.1282670377962451E-5	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999953230419352	WITHOUT_CLASSIFICATION	4.67695806490294E-6	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999977138470136	WITHOUT_CLASSIFICATION	2.28615298629599E-6	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998557439331561	WITHOUT_CLASSIFICATION	1.4425606684393205E-4	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999871905198187	WITHOUT_CLASSIFICATION	1.2809480181280748E-5	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969779950622	WITHOUT_CLASSIFICATION	3.0220049378638953E-6	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999975806681217	WITHOUT_CLASSIFICATION	2.419331878220297E-6	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999323284098335	WITHOUT_CLASSIFICATION	6.76715901665123E-5	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999982230671598	WITHOUT_CLASSIFICATION	1.7769328400876675E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999974643922418	WITHOUT_CLASSIFICATION	2.5356077582037003E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999510447997068	WITHOUT_CLASSIFICATION	4.8955200293144505E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999953760595491	WITHOUT_CLASSIFICATION	4.6239404509074195E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998518203608869	WITHOUT_CLASSIFICATION	1.481796391130112E-4	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999933126441837	WITHOUT_CLASSIFICATION	6.687355816281764E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999701309570581	WITHOUT_CLASSIFICATION	2.9869042941878218E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999996285686425	WITHOUT_CLASSIFICATION	3.7143135749872657E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998497420940016	WITHOUT_CLASSIFICATION	1.502579059984146E-4	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999994066179458	WITHOUT_CLASSIFICATION	5.933820542944966E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999989948041449	WITHOUT_CLASSIFICATION	1.0051958550805342E-6	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999920368212992	WITHOUT_CLASSIFICATION	7.963178700699944E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999999442105787	WITHOUT_CLASSIFICATION	5.578942131070552E-7	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999964860410757	WITHOUT_CLASSIFICATION	3.5139589242860145E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999970959651048	WITHOUT_CLASSIFICATION	2.9040348953031316E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987482910977	WITHOUT_CLASSIFICATION	1.2517089022800273E-6	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999996431205528	WITHOUT_CLASSIFICATION	3.568794471897702E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999953911112314	WITHOUT_CLASSIFICATION	4.60888876867233E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999954398850229	WITHOUT_CLASSIFICATION	4.560114977104703E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999990396832726	WITHOUT_CLASSIFICATION	9.603167273824982E-7	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999976184233826	WITHOUT_CLASSIFICATION	2.381576617428383E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999921891067822	WITHOUT_CLASSIFICATION	7.810893217785841E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999989062812357	WITHOUT_CLASSIFICATION	1.0937187643042592E-5	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999130940910141	WITHOUT_CLASSIFICATION	8.690590898589123E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999882428614476	WITHOUT_CLASSIFICATION	1.1757138552413326E-5	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984090637384	WITHOUT_CLASSIFICATION	1.5909362615175704E-6	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972776026018	WITHOUT_CLASSIFICATION	2.7223973981522297E-6	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999991828116453	WITHOUT_CLASSIFICATION	8.171883546112847E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999997660915747	WITHOUT_CLASSIFICATION	2.339084252917673E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999987563636253	WITHOUT_CLASSIFICATION	1.2436363745693758E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998636926603	WITHOUT_CLASSIFICATION	1.3630733964588916E-7	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999988697529506	WITHOUT_CLASSIFICATION	1.1302470493725313E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999934510002065	WITHOUT_CLASSIFICATION	6.548999793575091E-6	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999988623262004	WITHOUT_CLASSIFICATION	1.1376737996239605E-6	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999982075417737	WITHOUT_CLASSIFICATION	1.792458226283927E-6	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.99999109632965	WITHOUT_CLASSIFICATION	8.903670350035295E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999934294272645	WITHOUT_CLASSIFICATION	6.5705727354082006E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999998741663178	WITHOUT_CLASSIFICATION	1.2583368218981274E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999971537041695	WITHOUT_CLASSIFICATION	2.846295830458352E-6	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998638004937	WITHOUT_CLASSIFICATION	1.3619950636381955E-7	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999972172531125	WITHOUT_CLASSIFICATION	2.782746887447929E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999990489103777	WITHOUT_CLASSIFICATION	9.510896222501403E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9995436505821592	WITHOUT_CLASSIFICATION	4.5634941784075065E-4	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999958775654167	WITHOUT_CLASSIFICATION	4.122434583249239E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999956185115239	WITHOUT_CLASSIFICATION	4.38148847615474E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999997289392972	WITHOUT_CLASSIFICATION	2.7106070272129233E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999957445607722	WITHOUT_CLASSIFICATION	4.255439227669786E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999913007771162	WITHOUT_CLASSIFICATION	8.699222883805778E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999992356346836	WITHOUT_CLASSIFICATION	7.643653163016861E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999847406130392	WITHOUT_CLASSIFICATION	1.5259386960778654E-5	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999519566262	WITHOUT_CLASSIFICATION	4.804337375058661E-8	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999838359651789	WITHOUT_CLASSIFICATION	1.6164034821101792E-5	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999720212164773	WITHOUT_CLASSIFICATION	2.7978783522629812E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999904573311004	WITHOUT_CLASSIFICATION	9.542668899681898E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984090637384	WITHOUT_CLASSIFICATION	1.5909362615175704E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999985529316302	WITHOUT_CLASSIFICATION	1.447068369846808E-6	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999964645389	WITHOUT_CLASSIFICATION	3.5354611002815603E-8	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999763484049884	WITHOUT_CLASSIFICATION	2.3651595011670425E-5	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999952926611312	WITHOUT_CLASSIFICATION	4.707338868818675E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999993445003758	WITHOUT_CLASSIFICATION	6.554996242503793E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997570734717	WITHOUT_CLASSIFICATION	2.429265282888795E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974667464382	WITHOUT_CLASSIFICATION	2.5332535619219453E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999970334733395	WITHOUT_CLASSIFICATION	2.9665266604284297E-6	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999998501384387	WITHOUT_CLASSIFICATION	1.4986156130414395E-6	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999998624721	WITHOUT_CLASSIFICATION	1.3752790000258737E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999994963627973	WITHOUT_CLASSIFICATION	5.036372027866294E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995871873954536	WITHOUT_CLASSIFICATION	4.128126045464001E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999989605341781	WITHOUT_CLASSIFICATION	1.0394658218843195E-6	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999914935990406	WITHOUT_CLASSIFICATION	8.5064009594E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999909688831988	WITHOUT_CLASSIFICATION	9.031116801203558E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999236923415	WITHOUT_CLASSIFICATION	7.630765851834652E-8	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999294342647	WITHOUT_CLASSIFICATION	7.056573534077052E-8	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999995231776135	WITHOUT_CLASSIFICATION	4.768223864609127E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999924351028582	WITHOUT_CLASSIFICATION	7.56489714178994E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999957923812	WITHOUT_CLASSIFICATION	4.207618877190079E-9	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999972523683976	WITHOUT_CLASSIFICATION	2.7476316023954607E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999972523683976	WITHOUT_CLASSIFICATION	2.7476316023954607E-5	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999960256276059	WITHOUT_CLASSIFICATION	3.974372394171846E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999996362981738	WITHOUT_CLASSIFICATION	3.6370182627849984E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999992235753216	WITHOUT_CLASSIFICATION	7.764246784912294E-7	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999966329033013	WITHOUT_CLASSIFICATION	3.367096698652262E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999983365376531	WITHOUT_CLASSIFICATION	1.6634623469069375E-6	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998404270237	WITHOUT_CLASSIFICATION	1.5957297623694636E-7	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999972855610295	WITHOUT_CLASSIFICATION	2.714438970503774E-5	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999976993779963	WITHOUT_CLASSIFICATION	2.3006220038021333E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999976993779963	WITHOUT_CLASSIFICATION	2.3006220038021333E-6	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999980562568359	WITHOUT_CLASSIFICATION	1.9437431640957034E-5	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999977143309223	WITHOUT_CLASSIFICATION	2.285669077801367E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999962191482114	WITHOUT_CLASSIFICATION	3.7808517886065142E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980264785798	WITHOUT_CLASSIFICATION	1.9735214202796683E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980264785798	WITHOUT_CLASSIFICATION	1.9735214202796683E-6	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999980264785798	WITHOUT_CLASSIFICATION	1.9735214202796683E-6	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999998486832728	WITHOUT_CLASSIFICATION	1.5131672719962528E-6	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999991315263405	WITHOUT_CLASSIFICATION	8.684736594917832E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999916241287105	WITHOUT_CLASSIFICATION	8.375871289460594E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999809947227485	WITHOUT_CLASSIFICATION	1.9005277251450014E-5	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999992491898725	WITHOUT_CLASSIFICATION	7.508101274735001E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999997389680314	WITHOUT_CLASSIFICATION	2.6103196864015785E-7	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999989115907055	WITHOUT_CLASSIFICATION	1.0884092943660615E-6	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999985064151553	WITHOUT_CLASSIFICATION	1.4935848447081982E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999989314714148	WITHOUT_CLASSIFICATION	1.0685285851074727E-6	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999989228423853	WITHOUT_CLASSIFICATION	1.0771576145578292E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999819555454224	WITHOUT_CLASSIFICATION	1.8044454577634543E-5	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999963878650824	WITHOUT_CLASSIFICATION	3.612134917610645E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999996379408829	WITHOUT_CLASSIFICATION	3.620591170572899E-7	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998963833028	WITHOUT_CLASSIFICATION	1.036166972204696E-7	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997840750379	WITHOUT_CLASSIFICATION	2.1592496226876222E-7	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999948860461929	WITHOUT_CLASSIFICATION	5.1139538070938296E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999750135521092	WITHOUT_CLASSIFICATION	2.498644789084903E-5	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999750135521092	WITHOUT_CLASSIFICATION	2.498644789084903E-5	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999815717378078	WITHOUT_CLASSIFICATION	1.8428262192191197E-5	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999815717378078	WITHOUT_CLASSIFICATION	1.8428262192191197E-5	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999812566367285	WITHOUT_CLASSIFICATION	1.8743363271486822E-5	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999820306248561	WITHOUT_CLASSIFICATION	1.796937514382314E-5	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999820306248561	WITHOUT_CLASSIFICATION	1.796937514382314E-5	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999894101720218	WITHOUT_CLASSIFICATION	1.0589827978139714E-5	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999973016971761	WITHOUT_CLASSIFICATION	2.6983028238996088E-5	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996994929563	WITHOUT_CLASSIFICATION	3.00507043670425E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999972523683976	WITHOUT_CLASSIFICATION	2.7476316023954607E-5	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999994981211829	WITHOUT_CLASSIFICATION	5.018788170765248E-7	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999973016971761	WITHOUT_CLASSIFICATION	2.6983028238996088E-5	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999959541149878	WITHOUT_CLASSIFICATION	4.045885012286593E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999984255663695	WITHOUT_CLASSIFICATION	1.5744336304144415E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999793015527966	WITHOUT_CLASSIFICATION	2.069844720348087E-5	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999879921813132	WITHOUT_CLASSIFICATION	1.20078186869052E-5	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995432433118	WITHOUT_CLASSIFICATION	4.567566881758159E-7	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999736015995645	WITHOUT_CLASSIFICATION	2.639840043549604E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999953522090992	WITHOUT_CLASSIFICATION	4.647790900868633E-6	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999983962683654	WITHOUT_CLASSIFICATION	1.603731634577277E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998150630875	WITHOUT_CLASSIFICATION	1.849369123908963E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999986871800105	WITHOUT_CLASSIFICATION	1.3128199894033454E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999746564475	WITHOUT_CLASSIFICATION	2.534355240351462E-8	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999649526445811	WITHOUT_CLASSIFICATION	3.504735541890989E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999975678018842	WITHOUT_CLASSIFICATION	2.4321981158255245E-6	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999864106920895	WITHOUT_CLASSIFICATION	1.3589307910426033E-5	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999964697223699	WITHOUT_CLASSIFICATION	3.530277630061644E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999974392590758	WITHOUT_CLASSIFICATION	2.5607409242553293E-6	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999154732515	WITHOUT_CLASSIFICATION	8.452674855465374E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999921229671478	WITHOUT_CLASSIFICATION	7.877032852078774E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999921229671478	WITHOUT_CLASSIFICATION	7.877032852078774E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999975260848412	WITHOUT_CLASSIFICATION	2.473915158875474E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999971865655402	WITHOUT_CLASSIFICATION	2.813434459863975E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999988735365204	WITHOUT_CLASSIFICATION	1.1264634796214093E-6	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999949657468933	WITHOUT_CLASSIFICATION	5.034253106641884E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999898563510303	WITHOUT_CLASSIFICATION	1.0143648969707594E-5	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999813156862	WITHOUT_CLASSIFICATION	1.8684313802064346E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999998836377963	WITHOUT_CLASSIFICATION	1.1636220372248018E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999979170462173	WITHOUT_CLASSIFICATION	2.0829537826060687E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999982662187654	WITHOUT_CLASSIFICATION	1.7337812346165607E-6	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999303765215	WITHOUT_CLASSIFICATION	6.962347852348403E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999993704167716	WITHOUT_CLASSIFICATION	6.295832283858746E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995871873954536	WITHOUT_CLASSIFICATION	4.128126045464001E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999480744206	WITHOUT_CLASSIFICATION	5.192557942615214E-8	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999990228103636	WITHOUT_CLASSIFICATION	9.77189636414643E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.99999944974344	WITHOUT_CLASSIFICATION	5.502565600417157E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999994651816252	WITHOUT_CLASSIFICATION	5.348183748547033E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996598664832	WITHOUT_CLASSIFICATION	3.401335168253273E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996598664832	WITHOUT_CLASSIFICATION	3.401335168253273E-7	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999857144199611	WITHOUT_CLASSIFICATION	1.4285580038837788E-5	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999976419553475	WITHOUT_CLASSIFICATION	2.3580446525658022E-6	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999991858860079	WITHOUT_CLASSIFICATION	8.141139921479101E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999991175055478	WITHOUT_CLASSIFICATION	8.824944521755418E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999993946068139	WITHOUT_CLASSIFICATION	6.053931861601508E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999827152236	WITHOUT_CLASSIFICATION	1.7284776399964443E-5	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999982827034134	WITHOUT_CLASSIFICATION	1.717296586716279E-6	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998756635647	WITHOUT_CLASSIFICATION	1.2433643526225056E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999991695142129	WITHOUT_CLASSIFICATION	8.30485787050278E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999977362306115	WITHOUT_CLASSIFICATION	2.2637693885013607E-6	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999992214800018	WITHOUT_CLASSIFICATION	7.785199982871678E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998756635647	WITHOUT_CLASSIFICATION	1.2433643526225056E-7	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998148590112	WITHOUT_CLASSIFICATION	1.8514098882726742E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999995935116978	WITHOUT_CLASSIFICATION	4.064883022435629E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999997181300585	WITHOUT_CLASSIFICATION	2.818699414988293E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.999990639782252	WITHOUT_CLASSIFICATION	9.360217748091603E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999645652586	WITHOUT_CLASSIFICATION	3.5434741377042886E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998824873712	WITHOUT_CLASSIFICATION	1.1751262884914378E-7	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999974680150892	WITHOUT_CLASSIFICATION	2.531984910933191E-6	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999992884648791	WITHOUT_CLASSIFICATION	7.115351209500241E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999087456913	WITHOUT_CLASSIFICATION	9.125430868871248E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999834972169971	WITHOUT_CLASSIFICATION	1.6502783002901865E-5	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999984180206463	WITHOUT_CLASSIFICATION	1.5819793536732688E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999990600147496	WITHOUT_CLASSIFICATION	9.399852503774733E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999993412594045	WITHOUT_CLASSIFICATION	6.587405956009066E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999980409520209	WITHOUT_CLASSIFICATION	1.959047979015371E-6	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999908674577207	WITHOUT_CLASSIFICATION	9.132542279266118E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999940626219433	WITHOUT_CLASSIFICATION	5.9373780565820795E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999209512678533	WITHOUT_CLASSIFICATION	7.904873214667821E-5	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.99999661732089	WITHOUT_CLASSIFICATION	3.382679110015186E-6	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999994616619246	WITHOUT_CLASSIFICATION	5.383380753927145E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999982884070179	WITHOUT_CLASSIFICATION	1.7115929820500571E-6	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999982073585421	WITHOUT_CLASSIFICATION	1.7926414580235596E-6	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999982891918938	WITHOUT_CLASSIFICATION	1.7108081061975778E-6	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999577756669215	WITHOUT_CLASSIFICATION	4.222433307865123E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999549135909405	WITHOUT_CLASSIFICATION	4.508640905953761E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999987796986375	WITHOUT_CLASSIFICATION	1.2203013625012206E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999841570260003	WITHOUT_CLASSIFICATION	1.5842973999741848E-5	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999445383255	WITHOUT_CLASSIFICATION	5.546167449239089E-7	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999995973609229	WITHOUT_CLASSIFICATION	4.0263907706647986E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999872046587	WITHOUT_CLASSIFICATION	1.2795341307818834E-7	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999767306645255	WITHOUT_CLASSIFICATION	2.3269335474470445E-5	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998184675957	WITHOUT_CLASSIFICATION	1.8153240426409142E-7	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999999225742699	WITHOUT_CLASSIFICATION	7.74257301039463E-7	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999934216493748	WITHOUT_CLASSIFICATION	6.578350625249347E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999986945249427	WITHOUT_CLASSIFICATION	1.305475057338479E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994414989748	WITHOUT_CLASSIFICATION	5.585010252808161E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999996181195917	WITHOUT_CLASSIFICATION	3.818804082934241E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999786855959	WITHOUT_CLASSIFICATION	2.1314404121415342E-8	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999561772133	WITHOUT_CLASSIFICATION	4.38227867052049E-8	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999978842845917	WITHOUT_CLASSIFICATION	2.1157154083391426E-6	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999996860395923	WITHOUT_CLASSIFICATION	3.1396040771185097E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999761054392322	WITHOUT_CLASSIFICATION	2.3894560767792938E-5	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999972328461384	WITHOUT_CLASSIFICATION	2.7671538615168474E-6	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999994898480972	WITHOUT_CLASSIFICATION	5.101519028166238E-7	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999994767798455	WITHOUT_CLASSIFICATION	5.232201545319067E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999993252002488	WITHOUT_CLASSIFICATION	6.747997510809127E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999948350975146	WITHOUT_CLASSIFICATION	5.164902485401344E-6	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999979408944358	WITHOUT_CLASSIFICATION	2.0591055641549814E-6	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999944756378685	WITHOUT_CLASSIFICATION	5.524362131581958E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999956465309678	WITHOUT_CLASSIFICATION	4.353469032070296E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999927529470234	WITHOUT_CLASSIFICATION	7.247052976550053E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898802890045	WITHOUT_CLASSIFICATION	1.0119710995482E-5	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999990983819308	WITHOUT_CLASSIFICATION	9.016180691648964E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999993972229846	WITHOUT_CLASSIFICATION	6.027770154846922E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999977788843186	WITHOUT_CLASSIFICATION	2.221115681331396E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999994913935251	WITHOUT_CLASSIFICATION	5.086064749323816E-7	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999997073463824	WITHOUT_CLASSIFICATION	2.92653617593622E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999965714789893	WITHOUT_CLASSIFICATION	3.4285210106133243E-6	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997300611795	WITHOUT_CLASSIFICATION	2.699388204819388E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.999986268656201	WITHOUT_CLASSIFICATION	1.3731343798940129E-5	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999992258940997	WITHOUT_CLASSIFICATION	7.741059002356598E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999995873203225	WITHOUT_CLASSIFICATION	4.126796775075936E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999963335598167	WITHOUT_CLASSIFICATION	3.666440183373423E-6	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999993622973404	WITHOUT_CLASSIFICATION	6.377026595997348E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999984731744872	WITHOUT_CLASSIFICATION	1.5268255127515166E-6	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999961906892645	WITHOUT_CLASSIFICATION	3.809310735554607E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999951787566805	WITHOUT_CLASSIFICATION	4.821243319485772E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898802890045	WITHOUT_CLASSIFICATION	1.0119710995482E-5	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999948975835524	WITHOUT_CLASSIFICATION	5.102416447562765E-6	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999998581008965	WITHOUT_CLASSIFICATION	1.418991033778858E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997477728202	WITHOUT_CLASSIFICATION	2.5222717984259414E-7	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999997558676272	WITHOUT_CLASSIFICATION	2.4413237282313294E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999994646148826	WITHOUT_CLASSIFICATION	5.353851173527309E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999981239644995	WITHOUT_CLASSIFICATION	1.8760355005451444E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999991695142129	WITHOUT_CLASSIFICATION	8.30485787050278E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999914397589995	WITHOUT_CLASSIFICATION	8.560241000564556E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994414989748	WITHOUT_CLASSIFICATION	5.585010252808161E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999974148416119	WITHOUT_CLASSIFICATION	2.5851583881310196E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998581197643	WITHOUT_CLASSIFICATION	1.4188023579462554E-7	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999980526110366	WITHOUT_CLASSIFICATION	1.947388963469064E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999978264043692	WITHOUT_CLASSIFICATION	2.1735956307258245E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997875837259	WITHOUT_CLASSIFICATION	2.1241627408075393E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999980940081796	WITHOUT_CLASSIFICATION	1.9059918203809626E-6	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999974934783443	WITHOUT_CLASSIFICATION	2.506521655724256E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999990990368339	WITHOUT_CLASSIFICATION	9.00963166123053E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999996474903506	WITHOUT_CLASSIFICATION	3.525096494443925E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997491019516	WITHOUT_CLASSIFICATION	2.5089804845993615E-7	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999964768579048	WITHOUT_CLASSIFICATION	3.523142095232078E-6	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999998642588243	WITHOUT_CLASSIFICATION	1.3574117569019615E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997634731377	WITHOUT_CLASSIFICATION	2.3652686219324883E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997634731377	WITHOUT_CLASSIFICATION	2.3652686219324883E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999286840748	WITHOUT_CLASSIFICATION	7.131592516635701E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999824770612947	WITHOUT_CLASSIFICATION	1.75229387053015E-5	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999964985094638	WITHOUT_CLASSIFICATION	3.5014905361592344E-6	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999985085876699	WITHOUT_CLASSIFICATION	1.4914123300997952E-5	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998162915789	WITHOUT_CLASSIFICATION	1.8370842117157903E-7	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999985766857897	WITHOUT_CLASSIFICATION	1.4233142102534849E-6	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999998568754174	WITHOUT_CLASSIFICATION	1.4312458261723516E-7	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999976501893132	WITHOUT_CLASSIFICATION	2.34981068691588E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999995622756531	WITHOUT_CLASSIFICATION	4.377243468567496E-7	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999977868338253	WITHOUT_CLASSIFICATION	2.2131661745785364E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999938079415839	WITHOUT_CLASSIFICATION	6.192058416079243E-6	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999937710198283	WITHOUT_CLASSIFICATION	6.228980171699942E-6	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999989871582573	WITHOUT_CLASSIFICATION	1.012841742656225E-6	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999931225826	WITHOUT_CLASSIFICATION	6.877417404939475E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999997107598292	WITHOUT_CLASSIFICATION	2.8924017090700796E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994889800683	WITHOUT_CLASSIFICATION	5.110199316645754E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999646823584165	WITHOUT_CLASSIFICATION	3.531764158360231E-5	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999983366155251	WITHOUT_CLASSIFICATION	1.6633844749352305E-6	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999961667042	WITHOUT_CLASSIFICATION	3.833295807155966E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999973591941185	WITHOUT_CLASSIFICATION	2.6408058815970505E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999965088782394	WITHOUT_CLASSIFICATION	3.4911217605791423E-6	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999959298571072	WITHOUT_CLASSIFICATION	4.070142892904752E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999996382838903	WITHOUT_CLASSIFICATION	3.6171610969670313E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999159593997057	WITHOUT_CLASSIFICATION	8.404060029436912E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992586341475	WITHOUT_CLASSIFICATION	7.413658524522657E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983628480632	WITHOUT_CLASSIFICATION	1.6371519368276292E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999986290725025	WITHOUT_CLASSIFICATION	1.3709274974497865E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999993472056542	WITHOUT_CLASSIFICATION	6.527943457581389E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999886153146634	WITHOUT_CLASSIFICATION	1.1384685336514865E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999975004597971	WITHOUT_CLASSIFICATION	2.4995402028536443E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9992615591101311	WITHOUT_CLASSIFICATION	7.384408898689059E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999657510369255	WITHOUT_CLASSIFICATION	3.424896307451571E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999994981715622	WITHOUT_CLASSIFICATION	5.018284378223022E-7	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999797372755	WITHOUT_CLASSIFICATION	2.026272453244798E-8	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999943976963337	WITHOUT_CLASSIFICATION	5.602303666297759E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.99999766778031	WITHOUT_CLASSIFICATION	2.3322196901225817E-6	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999984012254423	WITHOUT_CLASSIFICATION	1.598774557694754E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999997385700299	WITHOUT_CLASSIFICATION	2.6142997012727584E-7	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999980349300378	WITHOUT_CLASSIFICATION	1.965069962247373E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999936743667395	WITHOUT_CLASSIFICATION	6.325633260433465E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876910061337	WITHOUT_CLASSIFICATION	1.230899386636601E-5	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998368384198	WITHOUT_CLASSIFICATION	1.6316158019122372E-7	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999897057692149	WITHOUT_CLASSIFICATION	1.0294230785105647E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999550695478472	WITHOUT_CLASSIFICATION	4.493045215270361E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999803822209776	WITHOUT_CLASSIFICATION	1.961777902232837E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944923162863	WITHOUT_CLASSIFICATION	5.507683713698288E-6	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9984342228610813	WITHOUT_CLASSIFICATION	0.001565777138918706	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999978947426702	WITHOUT_CLASSIFICATION	2.105257329798155E-6	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999995242779985	WITHOUT_CLASSIFICATION	4.757220013538423E-7	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999976163243031	WITHOUT_CLASSIFICATION	2.383675696935573E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963789624084	WITHOUT_CLASSIFICATION	3.6210375914868214E-6	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999846197738	WITHOUT_CLASSIFICATION	1.5380226209980538E-7	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999840063046179	WITHOUT_CLASSIFICATION	1.5993695382055653E-5	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999986714156377	WITHOUT_CLASSIFICATION	1.3285843622635345E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999936447832249	WITHOUT_CLASSIFICATION	6.355216775043122E-6	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999985205604373	WITHOUT_CLASSIFICATION	1.479439562770513E-6	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999840619400614	WITHOUT_CLASSIFICATION	1.5938059938612127E-5	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999972639547237	WITHOUT_CLASSIFICATION	2.736045276446891E-6	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999972936639391	WITHOUT_CLASSIFICATION	2.706336060966625E-6	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999983720654453	WITHOUT_CLASSIFICATION	1.6279345548294357E-6	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999971269453126	WITHOUT_CLASSIFICATION	2.8730546874142113E-5	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999987863178721	WITHOUT_CLASSIFICATION	1.2136821279355995E-6	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999946857270772	WITHOUT_CLASSIFICATION	5.314272922831887E-6	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999973498259934	WITHOUT_CLASSIFICATION	2.650174006599551E-6	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999998856335333	WITHOUT_CLASSIFICATION	1.14366466700586E-6	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999995037820475	WITHOUT_CLASSIFICATION	4.962179524397086E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999325944101437	WITHOUT_CLASSIFICATION	6.740558985626052E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999996191538736	WITHOUT_CLASSIFICATION	3.8084612643190824E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999996786760761	WITHOUT_CLASSIFICATION	3.2132392389511276E-6	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999983315827269	WITHOUT_CLASSIFICATION	1.668417273166979E-6	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999996786760761	WITHOUT_CLASSIFICATION	3.2132392389511276E-6	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999540155543	WITHOUT_CLASSIFICATION	4.598444572368467E-8	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999999706333845	WITHOUT_CLASSIFICATION	2.93666154995682E-7	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999989306957522	WITHOUT_CLASSIFICATION	1.0693042478125478E-6	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994453091375	WITHOUT_CLASSIFICATION	5.546908623859937E-7	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999402535629	WITHOUT_CLASSIFICATION	5.974643709477294E-7	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999986479813452	WITHOUT_CLASSIFICATION	1.3520186548320015E-6	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999998817250491	WITHOUT_CLASSIFICATION	1.182749508984552E-6	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998742492389222	WITHOUT_CLASSIFICATION	1.2575076107787533E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999989069615699	WITHOUT_CLASSIFICATION	1.093038430099132E-6	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998917073	WITHOUT_CLASSIFICATION	1.0829270003747706E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999967812955517	WITHOUT_CLASSIFICATION	3.218704448312811E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999279224643	WITHOUT_CLASSIFICATION	7.207753569596858E-7	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999964637740674	WITHOUT_CLASSIFICATION	3.536225932528928E-6	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999947226813376	WITHOUT_CLASSIFICATION	5.277318662415725E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999968087268665	WITHOUT_CLASSIFICATION	3.191273133619442E-6	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997829183169	WITHOUT_CLASSIFICATION	2.1708168303699538E-7	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999994967335333	WITHOUT_CLASSIFICATION	5.032664667648071E-7	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999987212343997	WITHOUT_CLASSIFICATION	1.2787656002789475E-6	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998067325764	WITHOUT_CLASSIFICATION	1.9326742359550255E-7	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999764554953664	WITHOUT_CLASSIFICATION	2.3544504633603144E-5	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999913041054	WITHOUT_CLASSIFICATION	8.695894596677491E-8	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999918927515065	WITHOUT_CLASSIFICATION	8.107248493467977E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998586757765093	WITHOUT_CLASSIFICATION	1.413242234907069E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99999780992493	WITHOUT_CLASSIFICATION	2.1900750699744353E-6	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999995981839555	WITHOUT_CLASSIFICATION	4.0181604450866476E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999921543100669	WITHOUT_CLASSIFICATION	7.845689932997835E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999858648305534	WITHOUT_CLASSIFICATION	1.4135169446516991E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999875218271164	WITHOUT_CLASSIFICATION	1.2478172883600129E-5	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999965705982898	WITHOUT_CLASSIFICATION	3.4294017101442614E-6	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999987096053748	WITHOUT_CLASSIFICATION	1.2903946252045639E-5	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.999974049311329	WITHOUT_CLASSIFICATION	2.595068867091979E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999996063296884	WITHOUT_CLASSIFICATION	3.936703116005027E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999987559904592	WITHOUT_CLASSIFICATION	1.2440095407723468E-6	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999899079649067	WITHOUT_CLASSIFICATION	1.0092035093309202E-5	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999942290694933	WITHOUT_CLASSIFICATION	5.770930506641807E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9998748255430389	WITHOUT_CLASSIFICATION	1.2517445696118268E-4	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999956828835947	WITHOUT_CLASSIFICATION	4.317116405222948E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999957523861026	WITHOUT_CLASSIFICATION	4.24761389740608E-6	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999583081319066	WITHOUT_CLASSIFICATION	4.1691868093492995E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999805016434198	WITHOUT_CLASSIFICATION	1.9498356580212066E-5	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999847969184564	WITHOUT_CLASSIFICATION	1.5203081543672635E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999892291230045	WITHOUT_CLASSIFICATION	1.0770876995574095E-5	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998472312750025	WITHOUT_CLASSIFICATION	1.5276872499748304E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999921543100669	WITHOUT_CLASSIFICATION	7.845689932997835E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999912961186924	WITHOUT_CLASSIFICATION	8.703881307604734E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999973317067838	WITHOUT_CLASSIFICATION	2.668293216096858E-6	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999583928698563	WITHOUT_CLASSIFICATION	4.160713014363304E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999053654526606	WITHOUT_CLASSIFICATION	9.463454733937845E-5	TEST
//special case	WITHOUT_CLASSIFICATION	0.999994553192158	WITHOUT_CLASSIFICATION	5.446807841991453E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999968394597708	WITHOUT_CLASSIFICATION	3.1605402293374183E-6	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999992721001978	WITHOUT_CLASSIFICATION	7.27899802171598E-7	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999662156204934	WITHOUT_CLASSIFICATION	3.37843795066696E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999973352738858	WITHOUT_CLASSIFICATION	2.6647261143128022E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999996699203042	WITHOUT_CLASSIFICATION	3.3007969579529693E-6	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999657995788489	WITHOUT_CLASSIFICATION	3.420042115122175E-5	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999879821129432	WITHOUT_CLASSIFICATION	1.2017887056885872E-5	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999859360038972	WITHOUT_CLASSIFICATION	1.4063996102928669E-5	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999978813918727	WITHOUT_CLASSIFICATION	2.1186081272995495E-5	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999978507154266	WITHOUT_CLASSIFICATION	2.1492845734360345E-6	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999881936551	WITHOUT_CLASSIFICATION	1.1806344895581539E-7	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999944879277832	WITHOUT_CLASSIFICATION	5.51207221682164E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999947212609979	WITHOUT_CLASSIFICATION	5.2787390021249295E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999996929225468	WITHOUT_CLASSIFICATION	3.070774531434655E-7	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999912961186924	WITHOUT_CLASSIFICATION	8.703881307604734E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999668965754769	WITHOUT_CLASSIFICATION	3.310342452321449E-5	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999975660777373	WITHOUT_CLASSIFICATION	2.433922262696718E-6	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999787006960746	WITHOUT_CLASSIFICATION	2.129930392542449E-5	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999908320144086	WITHOUT_CLASSIFICATION	9.167985591378012E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999980935795869	WITHOUT_CLASSIFICATION	1.9064204131642087E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999668268450342	WITHOUT_CLASSIFICATION	3.317315496572909E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999668268450342	WITHOUT_CLASSIFICATION	3.317315496572909E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999988702893883	WITHOUT_CLASSIFICATION	1.129710611673734E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999668268450342	WITHOUT_CLASSIFICATION	3.317315496572909E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999668268450342	WITHOUT_CLASSIFICATION	3.317315496572909E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999553241928066	WITHOUT_CLASSIFICATION	4.467580719337772E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999692371546844	WITHOUT_CLASSIFICATION	3.0762845315655806E-5	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999966781500128	WITHOUT_CLASSIFICATION	3.3218499872479234E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999957410044761	WITHOUT_CLASSIFICATION	4.258995523945189E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999994375854601	WITHOUT_CLASSIFICATION	5.624145399788095E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999899922921623	WITHOUT_CLASSIFICATION	1.000770783767748E-5	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999967043665176	WITHOUT_CLASSIFICATION	3.2956334823420933E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999886660490256	WITHOUT_CLASSIFICATION	1.1333950974458778E-5	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999992436436314	WITHOUT_CLASSIFICATION	7.5635636859753485E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997851502099256	WITHOUT_CLASSIFICATION	2.1484979007431172E-4	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999881651011171	WITHOUT_CLASSIFICATION	1.183489888282886E-5	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999943035981315	WITHOUT_CLASSIFICATION	5.6964018685535985E-6	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999690613974728	WITHOUT_CLASSIFICATION	3.093860252722402E-5	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999955964958281	WITHOUT_CLASSIFICATION	4.4035041719032676E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999937704465802	WITHOUT_CLASSIFICATION	6.22955341972832E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999198590029355	WITHOUT_CLASSIFICATION	8.014099706453912E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999907081804201	WITHOUT_CLASSIFICATION	9.291819579888292E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999980273399086	WITHOUT_CLASSIFICATION	1.972660091299456E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999730020463428	WITHOUT_CLASSIFICATION	2.6997953657294622E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999484021063598	WITHOUT_CLASSIFICATION	5.15978936401563E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999965658828976	WITHOUT_CLASSIFICATION	3.4341171023614394E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999935545694926	WITHOUT_CLASSIFICATION	6.4454305074563856E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999907081804201	WITHOUT_CLASSIFICATION	9.291819579888292E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999858648305534	WITHOUT_CLASSIFICATION	1.4135169446516991E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999858340831659	WITHOUT_CLASSIFICATION	1.4165916833967474E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994157792188	WITHOUT_CLASSIFICATION	5.842207813191592E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996692116764	WITHOUT_CLASSIFICATION	3.3078832367684123E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999668299393653	WITHOUT_CLASSIFICATION	3.317006063484766E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999993619588906	WITHOUT_CLASSIFICATION	6.380411094083951E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9998683604214149	WITHOUT_CLASSIFICATION	1.316395785851238E-4	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999971640915422	WITHOUT_CLASSIFICATION	2.835908457748614E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999934440439022	WITHOUT_CLASSIFICATION	6.555956097800719E-6	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999983047719532	WITHOUT_CLASSIFICATION	1.6952280468408492E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999796247350007	WITHOUT_CLASSIFICATION	2.0375264999263876E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999988037867896	WITHOUT_CLASSIFICATION	1.1962132104687454E-6	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999988795945475	WITHOUT_CLASSIFICATION	1.1204054525062887E-6	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999993463759411	WITHOUT_CLASSIFICATION	6.536240588547603E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999085717507077	WITHOUT_CLASSIFICATION	9.142824929235238E-5	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998547769016	WITHOUT_CLASSIFICATION	1.4522309842819314E-7	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999943915267223	WITHOUT_CLASSIFICATION	5.608473277799199E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999882566019304	WITHOUT_CLASSIFICATION	1.1743398069566528E-5	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999957534310014	WITHOUT_CLASSIFICATION	4.246568998555721E-6	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999780563105181	WITHOUT_CLASSIFICATION	2.194368948191103E-5	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999951032962939	WITHOUT_CLASSIFICATION	4.89670370605235E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999841540081923	WITHOUT_CLASSIFICATION	1.584599180762787E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999928980295	WITHOUT_CLASSIFICATION	7.101970433627703E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999934440439022	WITHOUT_CLASSIFICATION	6.555956097800719E-6	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999953699646339	WITHOUT_CLASSIFICATION	4.630035366076885E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999960241477249	WITHOUT_CLASSIFICATION	3.975852274997991E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999937758154941	WITHOUT_CLASSIFICATION	6.224184505878699E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999852777870404	WITHOUT_CLASSIFICATION	1.4722212959506602E-5	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948236536876	WITHOUT_CLASSIFICATION	5.176346312383699E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999681626543986	WITHOUT_CLASSIFICATION	3.1837345601352576E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999696593451719	WITHOUT_CLASSIFICATION	3.03406548281627E-5	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999992931610658	WITHOUT_CLASSIFICATION	7.068389340658149E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999876020250152	WITHOUT_CLASSIFICATION	1.2397974984867286E-5	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9998755925466862	WITHOUT_CLASSIFICATION	1.244074533137678E-4	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991050303484	WITHOUT_CLASSIFICATION	8.949696516078287E-6	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999979086587023	WITHOUT_CLASSIFICATION	2.091341297612496E-6	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999904492006535	WITHOUT_CLASSIFICATION	9.550799346515992E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99998490508961	WITHOUT_CLASSIFICATION	1.5094910390003753E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999966955596175	WITHOUT_CLASSIFICATION	3.3044403825451176E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999931142116857	WITHOUT_CLASSIFICATION	6.8857883143101775E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991050303484	WITHOUT_CLASSIFICATION	8.949696516078287E-6	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999646103238464	WITHOUT_CLASSIFICATION	3.538967615344677E-5	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999944526946081	WITHOUT_CLASSIFICATION	5.5473053918432924E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999941252219212	WITHOUT_CLASSIFICATION	5.874778078826567E-6	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999975127791254	WITHOUT_CLASSIFICATION	2.4872208745918285E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999982651264924	WITHOUT_CLASSIFICATION	1.7348735076537085E-6	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999993005728225	WITHOUT_CLASSIFICATION	6.994271775748983E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999978029211921	WITHOUT_CLASSIFICATION	2.1970788079703635E-6	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988359510034	WITHOUT_CLASSIFICATION	1.1640489966219444E-6	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992849481902	WITHOUT_CLASSIFICATION	7.150518098153507E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982100428172	WITHOUT_CLASSIFICATION	1.789957182799955E-6	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996007025936	WITHOUT_CLASSIFICATION	3.992974063661224E-7	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990545931187	WITHOUT_CLASSIFICATION	9.454068812662687E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997991257997	WITHOUT_CLASSIFICATION	2.00874200271488E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997991257997	WITHOUT_CLASSIFICATION	2.00874200271488E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999465674179453	WITHOUT_CLASSIFICATION	5.343258205471631E-5	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999981805883321	WITHOUT_CLASSIFICATION	1.819411667833987E-6	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999959628835343	WITHOUT_CLASSIFICATION	4.0371164657556734E-6	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999954699280634	WITHOUT_CLASSIFICATION	4.530071936561873E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999821720773544	WITHOUT_CLASSIFICATION	1.7827922645556124E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870390645703	WITHOUT_CLASSIFICATION	1.2960935429744084E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881452218539	WITHOUT_CLASSIFICATION	1.1854778146141876E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931878835585	WITHOUT_CLASSIFICATION	6.812116441490186E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999971549057861	WITHOUT_CLASSIFICATION	2.8450942138384205E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954741076243	WITHOUT_CLASSIFICATION	4.525892375601373E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870390645703	WITHOUT_CLASSIFICATION	1.2960935429744084E-5	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881452218539	WITHOUT_CLASSIFICATION	1.1854778146141876E-5	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931878835585	WITHOUT_CLASSIFICATION	6.812116441490186E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999849483688111	WITHOUT_CLASSIFICATION	1.5051631188832543E-5	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999433738426233	WITHOUT_CLASSIFICATION	5.662615737657155E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999995924614514	WITHOUT_CLASSIFICATION	4.0753854853326614E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999983735560555	WITHOUT_CLASSIFICATION	1.6264439445320764E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999994046410073	WITHOUT_CLASSIFICATION	5.953589926189625E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999957227269929	WITHOUT_CLASSIFICATION	4.277273007047661E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999921531196865	WITHOUT_CLASSIFICATION	7.846880313522902E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999786334703643	WITHOUT_CLASSIFICATION	2.1366529635628437E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9998145332453029	WITHOUT_CLASSIFICATION	1.8546675469717201E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999812886008207	WITHOUT_CLASSIFICATION	1.871139917939692E-5	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999969032674406	WITHOUT_CLASSIFICATION	3.096732559423445E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999073865619822	WITHOUT_CLASSIFICATION	9.261343801780569E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999701800152341	WITHOUT_CLASSIFICATION	2.981998476598652E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999990278437261	WITHOUT_CLASSIFICATION	9.721562739156556E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995861682096	WITHOUT_CLASSIFICATION	4.138317903770322E-7	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999963705435408	WITHOUT_CLASSIFICATION	3.629456459286196E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9965764249171618	WITHOUT_CLASSIFICATION	0.0034235750828381637	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998602622064383	WITHOUT_CLASSIFICATION	1.3973779356164618E-4	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999973993378106	WITHOUT_CLASSIFICATION	2.60066218942626E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999669954218127	WITHOUT_CLASSIFICATION	3.300457818740852E-5	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983682257584	WITHOUT_CLASSIFICATION	1.6317742415964878E-6	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999999759014314	WITHOUT_CLASSIFICATION	2.409856858780938E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999991563911028	WITHOUT_CLASSIFICATION	8.436088970813201E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998786536504	WITHOUT_CLASSIFICATION	1.2134634965937153E-7	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999998370224983	WITHOUT_CLASSIFICATION	1.629775016603598E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999910142448085	WITHOUT_CLASSIFICATION	8.985755191386991E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866059639304	WITHOUT_CLASSIFICATION	1.3394036069508522E-5	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999724123552569	WITHOUT_CLASSIFICATION	2.758764474307262E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999965065833372	WITHOUT_CLASSIFICATION	3.4934166628386503E-6	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976173994074	WITHOUT_CLASSIFICATION	2.382600592591299E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825118288834	WITHOUT_CLASSIFICATION	1.7488171116561858E-5	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999923253621612	WITHOUT_CLASSIFICATION	7.674637838744881E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999923253621612	WITHOUT_CLASSIFICATION	7.674637838744881E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999544540361054	WITHOUT_CLASSIFICATION	4.554596389451738E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999843694539491	WITHOUT_CLASSIFICATION	1.5630546050986533E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999995250195167	WITHOUT_CLASSIFICATION	4.7498048330262554E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995871873954536	WITHOUT_CLASSIFICATION	4.128126045464001E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999942332593406	WITHOUT_CLASSIFICATION	5.76674065951948E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999985312820784	WITHOUT_CLASSIFICATION	1.4687179216413127E-6	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9998495755972931	WITHOUT_CLASSIFICATION	1.504244027068536E-4	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999985213218604	WITHOUT_CLASSIFICATION	1.4786781395735183E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999947744035034	WITHOUT_CLASSIFICATION	5.225596496632861E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996986552509	WITHOUT_CLASSIFICATION	3.0134474909507165E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969594400167	WITHOUT_CLASSIFICATION	3.0405599832592683E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974041389991	WITHOUT_CLASSIFICATION	2.5958610008811497E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938065145884	WITHOUT_CLASSIFICATION	6.1934854116711785E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954268925462	WITHOUT_CLASSIFICATION	4.573107453804541E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952211779052	WITHOUT_CLASSIFICATION	4.7788220948541385E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956049054021	WITHOUT_CLASSIFICATION	4.395094597981226E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979668583472	WITHOUT_CLASSIFICATION	2.0331416527614606E-6	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976890934429	WITHOUT_CLASSIFICATION	2.3109065571539137E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922811235388	WITHOUT_CLASSIFICATION	7.718876461221182E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956192564977	WITHOUT_CLASSIFICATION	4.380743502325535E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999980524914415	WITHOUT_CLASSIFICATION	1.9475085586324464E-6	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999981606262182	WITHOUT_CLASSIFICATION	1.8393737817904593E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999235046058749	WITHOUT_CLASSIFICATION	7.649539412518104E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999972450418475	WITHOUT_CLASSIFICATION	2.754958152545557E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999962838510996	WITHOUT_CLASSIFICATION	3.7161489004665646E-6	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999984963091805	WITHOUT_CLASSIFICATION	1.503690819575268E-6	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999890699206859	WITHOUT_CLASSIFICATION	1.0930079314044212E-5	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999995464274648	WITHOUT_CLASSIFICATION	4.5357253519195777E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999235046058749	WITHOUT_CLASSIFICATION	7.649539412518104E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999235046058749	WITHOUT_CLASSIFICATION	7.649539412518104E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999138291299785	WITHOUT_CLASSIFICATION	8.61708700214435E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999994440036736	WITHOUT_CLASSIFICATION	5.559963264613546E-7	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999989760696189	WITHOUT_CLASSIFICATION	1.0239303811021211E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999964999450957	WITHOUT_CLASSIFICATION	3.500054904247458E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999975678018842	WITHOUT_CLASSIFICATION	2.4321981158255245E-6	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999669954218127	WITHOUT_CLASSIFICATION	3.300457818740852E-5	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999044560601916	WITHOUT_CLASSIFICATION	9.554393980841264E-5	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999995370867429	WITHOUT_CLASSIFICATION	4.6291325713947966E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999993164594755	WITHOUT_CLASSIFICATION	6.835405244648048E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890742646526	WITHOUT_CLASSIFICATION	1.0925735347513137E-5	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999981167752094	WITHOUT_CLASSIFICATION	1.8832247904938994E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999740293838619	WITHOUT_CLASSIFICATION	2.5970616138021212E-5	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999980244332988	WITHOUT_CLASSIFICATION	1.9755667013176255E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999980244332988	WITHOUT_CLASSIFICATION	1.9755667013176255E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999948023489077	WITHOUT_CLASSIFICATION	5.197651092273459E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999948023489077	WITHOUT_CLASSIFICATION	5.197651092273459E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976663673537	WITHOUT_CLASSIFICATION	2.333632646304232E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938747334994	WITHOUT_CLASSIFICATION	6.12526650046099E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999197192543069	WITHOUT_CLASSIFICATION	8.028074569304733E-5	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997352369636	WITHOUT_CLASSIFICATION	2.647630364047971E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999995504349367	WITHOUT_CLASSIFICATION	4.4956506337289927E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999981255663636	WITHOUT_CLASSIFICATION	1.8744336363876138E-6	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970531757763	WITHOUT_CLASSIFICATION	2.9468242237431886E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989310183752	WITHOUT_CLASSIFICATION	1.0689816247967187E-5	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999993768838616	WITHOUT_CLASSIFICATION	6.231161383273093E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.999890495092686	WITHOUT_CLASSIFICATION	1.0950490731400259E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999957932309769	WITHOUT_CLASSIFICATION	4.206769023094815E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999941370067649	WITHOUT_CLASSIFICATION	5.8629932351430035E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999978220257633	WITHOUT_CLASSIFICATION	2.1779742367520016E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999975136447317	WITHOUT_CLASSIFICATION	2.4863552683993713E-6	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999875966662456	WITHOUT_CLASSIFICATION	1.2403333754381086E-5	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999996773269001	WITHOUT_CLASSIFICATION	3.226730998950299E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999996773269001	WITHOUT_CLASSIFICATION	3.226730998950299E-6	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999974246615275	WITHOUT_CLASSIFICATION	2.5753384724281565E-6	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999976422308664	WITHOUT_CLASSIFICATION	2.357769133609836E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999306036591	WITHOUT_CLASSIFICATION	6.939634089194683E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999536225359679	WITHOUT_CLASSIFICATION	4.6377464032224605E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964215509658	WITHOUT_CLASSIFICATION	3.57844903409677E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857241371664	WITHOUT_CLASSIFICATION	1.4275862833571565E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999991093535527	WITHOUT_CLASSIFICATION	8.906464472589754E-7	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995764411832	WITHOUT_CLASSIFICATION	4.2355881685949927E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995710016961	WITHOUT_CLASSIFICATION	4.2899830392435295E-7	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999996989442071	WITHOUT_CLASSIFICATION	3.010557927581045E-7	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999970096991224	WITHOUT_CLASSIFICATION	2.9903008775801186E-6	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999995701568346	WITHOUT_CLASSIFICATION	4.2984316540709603E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981957434698	WITHOUT_CLASSIFICATION	1.8042565301227614E-6	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997035005016	WITHOUT_CLASSIFICATION	2.9649949832784444E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999985235572871	WITHOUT_CLASSIFICATION	1.476442712822206E-6	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999851520555242	WITHOUT_CLASSIFICATION	1.484794447572606E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986899357857	WITHOUT_CLASSIFICATION	1.3100642143273718E-6	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999979598184299	WITHOUT_CLASSIFICATION	2.0401815702283353E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999981644916239	WITHOUT_CLASSIFICATION	1.8355083761198007E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999991798094174	WITHOUT_CLASSIFICATION	8.201905824264606E-7	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999988461829441	WITHOUT_CLASSIFICATION	1.153817055953239E-6	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999630433431081	WITHOUT_CLASSIFICATION	3.695665689195399E-5	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999912694004116	WITHOUT_CLASSIFICATION	8.730599588440461E-6	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999976320205247	WITHOUT_CLASSIFICATION	2.367979475287108E-6	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999984316337907	WITHOUT_CLASSIFICATION	1.5683662093715745E-6	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999985379904984	WITHOUT_CLASSIFICATION	1.4620095015491312E-6	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999983355381273	WITHOUT_CLASSIFICATION	1.664461872690505E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999925281419529	WITHOUT_CLASSIFICATION	7.4718580470533025E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999955663696092	WITHOUT_CLASSIFICATION	4.4336303908103705E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999662216568694	WITHOUT_CLASSIFICATION	3.377834313053135E-5	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999688755495	WITHOUT_CLASSIFICATION	3.112445047531955E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999894867168534	WITHOUT_CLASSIFICATION	1.0513283146601264E-5	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999736998934807	WITHOUT_CLASSIFICATION	2.630010651925753E-5	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999951686749031	WITHOUT_CLASSIFICATION	4.831325096876206E-6	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999909425547709	WITHOUT_CLASSIFICATION	9.05744522909904E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999966567477394	WITHOUT_CLASSIFICATION	3.343252260574724E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997455281876	WITHOUT_CLASSIFICATION	2.5447181229436066E-7	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999994170629809	WITHOUT_CLASSIFICATION	5.82937019108847E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999991289941405	WITHOUT_CLASSIFICATION	8.710058595167518E-7	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999982006696572	WITHOUT_CLASSIFICATION	1.7993303428286314E-6	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999214235076	WITHOUT_CLASSIFICATION	7.857649251495003E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999987810983686	WITHOUT_CLASSIFICATION	1.2189016314261473E-6	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999579029237085	WITHOUT_CLASSIFICATION	4.209707629151857E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999990889444547	WITHOUT_CLASSIFICATION	9.110555452709668E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995856900181	WITHOUT_CLASSIFICATION	4.1430998176958496E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999970098183061	WITHOUT_CLASSIFICATION	2.9901816938978293E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999897270058182	WITHOUT_CLASSIFICATION	1.0272994181712606E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999224434954022	WITHOUT_CLASSIFICATION	7.755650459777372E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999949704037796	WITHOUT_CLASSIFICATION	5.0295962204131585E-6	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9950434407075458	WITHOUT_CLASSIFICATION	0.004956559292454192	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999971875270487	WITHOUT_CLASSIFICATION	2.812472951315858E-6	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999402972406425	WITHOUT_CLASSIFICATION	5.970275935755293E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999926936015557	WITHOUT_CLASSIFICATION	7.306398444247042E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999096849726534	WITHOUT_CLASSIFICATION	9.031502734654097E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999954787680275	WITHOUT_CLASSIFICATION	4.521231972392557E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999973587497877	WITHOUT_CLASSIFICATION	2.6412502124129547E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996542446877821	WITHOUT_CLASSIFICATION	3.457553122179361E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.999992315452226	WITHOUT_CLASSIFICATION	7.684547773982923E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999997192231449	WITHOUT_CLASSIFICATION	2.8077685509722097E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999421867005115	WITHOUT_CLASSIFICATION	5.781329948858301E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999496574614	WITHOUT_CLASSIFICATION	5.034253861447933E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999977986821633	WITHOUT_CLASSIFICATION	2.2013178366263943E-6	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999994576734076	WITHOUT_CLASSIFICATION	5.423265924074405E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999988126266354	WITHOUT_CLASSIFICATION	1.1873733645866453E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999046171072	WITHOUT_CLASSIFICATION	9.538289280457438E-7	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999229136835	WITHOUT_CLASSIFICATION	7.708631648764093E-7	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998227775224	WITHOUT_CLASSIFICATION	1.7722247749955537E-7	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999992538343415	WITHOUT_CLASSIFICATION	7.461656584102959E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998448837168176	WITHOUT_CLASSIFICATION	1.5511628318248341E-4	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998448837168176	WITHOUT_CLASSIFICATION	1.5511628318248341E-4	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999830595899388	WITHOUT_CLASSIFICATION	1.694041006113685E-5	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999927811870496	WITHOUT_CLASSIFICATION	7.21881295042926E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999995216922396	WITHOUT_CLASSIFICATION	4.783077603142108E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999926088514941	WITHOUT_CLASSIFICATION	7.391148505857658E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999966245994721	WITHOUT_CLASSIFICATION	3.3754005279353508E-6	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999322981701776	WITHOUT_CLASSIFICATION	6.770182982242121E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999995610003132	WITHOUT_CLASSIFICATION	4.389996868834812E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999962264521841	WITHOUT_CLASSIFICATION	3.7735478158224506E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999966467272138	WITHOUT_CLASSIFICATION	3.3532727861954896E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999992258277497	WITHOUT_CLASSIFICATION	7.741722501781261E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999998591106549	WITHOUT_CLASSIFICATION	1.4088934509885446E-6	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999999982442737	WITHOUT_CLASSIFICATION	1.755726302315543E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.999994639013902	WITHOUT_CLASSIFICATION	5.360986098022101E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998218252952	WITHOUT_CLASSIFICATION	1.781747047773869E-7	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999992014354254	WITHOUT_CLASSIFICATION	7.985645745939721E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999961342499482	WITHOUT_CLASSIFICATION	3.865750051809646E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999978141453606	WITHOUT_CLASSIFICATION	2.185854639362374E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999906131460201	WITHOUT_CLASSIFICATION	9.386853979900061E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999990523399125	WITHOUT_CLASSIFICATION	9.476600875574951E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999910128888345	WITHOUT_CLASSIFICATION	8.987111165386238E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999918300388329	WITHOUT_CLASSIFICATION	8.16996116725077E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999986264106434	WITHOUT_CLASSIFICATION	1.3735893566201046E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999247715008465	WITHOUT_CLASSIFICATION	7.522849915357723E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999785316952788	WITHOUT_CLASSIFICATION	2.1468304721252085E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999994901147204	WITHOUT_CLASSIFICATION	5.098852795921274E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999932163222907	WITHOUT_CLASSIFICATION	6.783677709445776E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999991363252603	WITHOUT_CLASSIFICATION	8.636747397131303E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999962863708871	WITHOUT_CLASSIFICATION	3.713629112842789E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999807965431908	WITHOUT_CLASSIFICATION	1.9203456809196144E-5	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999939425533783	WITHOUT_CLASSIFICATION	6.057446621690966E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999926562025079	WITHOUT_CLASSIFICATION	7.343797492182633E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999973554225202	WITHOUT_CLASSIFICATION	2.6445774797576348E-6	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.999993467901718	WITHOUT_CLASSIFICATION	6.532098282068791E-6	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999946938952645	WITHOUT_CLASSIFICATION	5.306104735450273E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999875022908712	WITHOUT_CLASSIFICATION	1.2497709128795942E-5	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999875022908712	WITHOUT_CLASSIFICATION	1.2497709128795942E-5	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999985713233153	WITHOUT_CLASSIFICATION	1.4286766847398523E-6	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999626033769649	WITHOUT_CLASSIFICATION	3.73966230351695E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999988811904958	WITHOUT_CLASSIFICATION	1.1188095042377058E-6	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999984869524828	WITHOUT_CLASSIFICATION	1.5130475171582876E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999943295193261	WITHOUT_CLASSIFICATION	5.670480673902034E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999862924516218	WITHOUT_CLASSIFICATION	1.370754837822236E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999972175992708	WITHOUT_CLASSIFICATION	2.7824007291388836E-6	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997195106317	WITHOUT_CLASSIFICATION	2.804893682766886E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998954890250933	WITHOUT_CLASSIFICATION	1.045109749066699E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999998964844205	WITHOUT_CLASSIFICATION	1.0351557948776483E-6	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999984517348925	WITHOUT_CLASSIFICATION	1.5482651074531914E-6	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999949990934675	WITHOUT_CLASSIFICATION	5.000906532577652E-6	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999581571840193	WITHOUT_CLASSIFICATION	4.184281598079017E-5	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999977262875398	WITHOUT_CLASSIFICATION	2.273712460296613E-6	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999970687194453	WITHOUT_CLASSIFICATION	2.9312805545852707E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999596309479405	WITHOUT_CLASSIFICATION	4.0369052059518344E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999596309479405	WITHOUT_CLASSIFICATION	4.0369052059518344E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999998308820073	WITHOUT_CLASSIFICATION	1.691179927251651E-7	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999977232815933	WITHOUT_CLASSIFICATION	2.276718406752517E-6	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999990166300629	WITHOUT_CLASSIFICATION	9.833699371283012E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994911695195	WITHOUT_CLASSIFICATION	5.088304804939921E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998320350343275	WITHOUT_CLASSIFICATION	1.679649656725477E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999997008392528	WITHOUT_CLASSIFICATION	2.991607471554048E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994645196182	WITHOUT_CLASSIFICATION	5.354803817990428E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994645196182	WITHOUT_CLASSIFICATION	5.354803817990428E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999988527616354	WITHOUT_CLASSIFICATION	1.1472383646193239E-6	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999969380148	WITHOUT_CLASSIFICATION	3.061985200471346E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999911830195685	WITHOUT_CLASSIFICATION	8.816980431616312E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999977484963875	WITHOUT_CLASSIFICATION	2.2515036125175764E-6	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999965134208002	WITHOUT_CLASSIFICATION	3.486579199830211E-6	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998557439331561	WITHOUT_CLASSIFICATION	1.4425606684393205E-4	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999992182906695	WITHOUT_CLASSIFICATION	7.817093305399739E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996994929563	WITHOUT_CLASSIFICATION	3.00507043670425E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976501699063	WITHOUT_CLASSIFICATION	2.3498300938080027E-6	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999701087570689	WITHOUT_CLASSIFICATION	2.989124293105247E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999997289392972	WITHOUT_CLASSIFICATION	2.7106070272129233E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999952926611312	WITHOUT_CLASSIFICATION	4.707338868818675E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999827217571325	WITHOUT_CLASSIFICATION	1.7278242867460944E-5	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999812566367285	WITHOUT_CLASSIFICATION	1.8743363271486822E-5	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999886153146634	WITHOUT_CLASSIFICATION	1.1384685336514865E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999993425070732	WITHOUT_CLASSIFICATION	6.574929266521125E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999926743165989	WITHOUT_CLASSIFICATION	7.32568340117076E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999848405577387	WITHOUT_CLASSIFICATION	1.5159442261141675E-5	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999884738742081	WITHOUT_CLASSIFICATION	1.1526125791803543E-5	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999996500518257	WITHOUT_CLASSIFICATION	3.4994817431975057E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999929581202427	WITHOUT_CLASSIFICATION	7.04187975734294E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999894101720218	WITHOUT_CLASSIFICATION	1.0589827978139714E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999737206803733	WITHOUT_CLASSIFICATION	2.627931962669938E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999989154385462	WITHOUT_CLASSIFICATION	1.0845614537307823E-6	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999976571271059	WITHOUT_CLASSIFICATION	2.342872894098308E-6	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999999689269908	WITHOUT_CLASSIFICATION	3.107300919145421E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9990208725459818	WITHOUT_CLASSIFICATION	9.791274540182308E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999975320508636	WITHOUT_CLASSIFICATION	2.4679491363987438E-6	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999992875306238	WITHOUT_CLASSIFICATION	7.124693762214055E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999996598664832	WITHOUT_CLASSIFICATION	3.401335168253273E-7	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998855739971272	WITHOUT_CLASSIFICATION	1.1442600287282622E-4	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999869528476311	WITHOUT_CLASSIFICATION	1.3047152369017137E-5	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999925764294978	WITHOUT_CLASSIFICATION	7.423570502302801E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999966018329491	WITHOUT_CLASSIFICATION	3.3981670509657574E-6	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999436638275964	WITHOUT_CLASSIFICATION	5.63361724036298E-5	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999988470145564	WITHOUT_CLASSIFICATION	1.1529854436095943E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999930865473312	WITHOUT_CLASSIFICATION	6.913452668812237E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.999998825014721	WITHOUT_CLASSIFICATION	1.174985278980289E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999927683354822	WITHOUT_CLASSIFICATION	7.231664517698441E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999931318935897	WITHOUT_CLASSIFICATION	6.868106410241948E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998520110004	WITHOUT_CLASSIFICATION	1.4798899947412678E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999989629469922	WITHOUT_CLASSIFICATION	1.03705300777374E-6	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999907680321577	WITHOUT_CLASSIFICATION	9.231967842189847E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999987464171118	WITHOUT_CLASSIFICATION	1.2535828881364446E-6	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999832265208	WITHOUT_CLASSIFICATION	1.6773479148493394E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999992770562433	WITHOUT_CLASSIFICATION	7.2294375671144005E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999927683354822	WITHOUT_CLASSIFICATION	7.231664517698441E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999931318935897	WITHOUT_CLASSIFICATION	6.868106410241948E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999843975305366	WITHOUT_CLASSIFICATION	1.5602469463410438E-5	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999860309194204	WITHOUT_CLASSIFICATION	1.3969080579518276E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999968470012633	WITHOUT_CLASSIFICATION	3.152998736602828E-6	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999780111570564	WITHOUT_CLASSIFICATION	2.19888429436341E-5	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999977912967163	WITHOUT_CLASSIFICATION	2.208703283818256E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999995705371183	WITHOUT_CLASSIFICATION	4.2946288178960264E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999335161865359	WITHOUT_CLASSIFICATION	6.64838134641088E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999529356712825	WITHOUT_CLASSIFICATION	4.706432871749087E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999995677865708	WITHOUT_CLASSIFICATION	4.3221342921713544E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999815317504878	WITHOUT_CLASSIFICATION	1.846824951224216E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999963350515916	WITHOUT_CLASSIFICATION	3.6649484083887632E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999815317504878	WITHOUT_CLASSIFICATION	1.846824951224216E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999978779700127	WITHOUT_CLASSIFICATION	2.122029987371966E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.99995807019935	WITHOUT_CLASSIFICATION	4.19298006499308E-5	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999975331771329	WITHOUT_CLASSIFICATION	2.4668228670877927E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564338607796	WITHOUT_CLASSIFICATION	4.356613922042666E-5	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999965330922792	WITHOUT_CLASSIFICATION	3.466907720697991E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9995145350706054	WITHOUT_CLASSIFICATION	4.854649293945293E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9995145350706054	WITHOUT_CLASSIFICATION	4.854649293945293E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999994587859757	WITHOUT_CLASSIFICATION	5.412140242961224E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999986162280277	WITHOUT_CLASSIFICATION	1.3837719723597454E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999951548108823	WITHOUT_CLASSIFICATION	4.845189117672327E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999991865234148	WITHOUT_CLASSIFICATION	8.134765852135048E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999871562814651	WITHOUT_CLASSIFICATION	1.2843718534947686E-5	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999694490615951	WITHOUT_CLASSIFICATION	3.055093840487432E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999867358536507	WITHOUT_CLASSIFICATION	1.3264146349180613E-5	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999970236356529	WITHOUT_CLASSIFICATION	2.976364347124111E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999448432305934	WITHOUT_CLASSIFICATION	5.515676940663029E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999264773660199	WITHOUT_CLASSIFICATION	7.352263398002499E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999747464492058	WITHOUT_CLASSIFICATION	2.5253550794161433E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999901718791835	WITHOUT_CLASSIFICATION	9.828120816506664E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9998849712776801	WITHOUT_CLASSIFICATION	1.1502872231994466E-4	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999932879019476	WITHOUT_CLASSIFICATION	6.71209805227421E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999966608412882	WITHOUT_CLASSIFICATION	3.339158711741898E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999998897268793	WITHOUT_CLASSIFICATION	1.1027312065197699E-7	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999983523756422	WITHOUT_CLASSIFICATION	1.647624357758138E-6	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996724898425	WITHOUT_CLASSIFICATION	3.2751015754041447E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999915330573838	WITHOUT_CLASSIFICATION	8.466942616246971E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.99962444254496	WITHOUT_CLASSIFICATION	3.755574550399277E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998390464762	WITHOUT_CLASSIFICATION	1.6095352382279707E-7	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999708716851277	WITHOUT_CLASSIFICATION	2.9128314872379448E-5	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999992357555358	WITHOUT_CLASSIFICATION	7.642444641878905E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999936640561035	WITHOUT_CLASSIFICATION	6.335943896571543E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999938397422818	WITHOUT_CLASSIFICATION	6.160257718123484E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998650011955298	WITHOUT_CLASSIFICATION	1.3499880447022408E-4	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998637723911	WITHOUT_CLASSIFICATION	1.3622760888606396E-7	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999982535362052	WITHOUT_CLASSIFICATION	1.74646379482467E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999994720897483	WITHOUT_CLASSIFICATION	5.279102516948741E-6	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999937380461217	WITHOUT_CLASSIFICATION	6.261953878370655E-6	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999824828749482	WITHOUT_CLASSIFICATION	1.7517125051839596E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999945868237681	WITHOUT_CLASSIFICATION	5.413176231955005E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999867358536507	WITHOUT_CLASSIFICATION	1.3264146349180613E-5	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999987660056541	WITHOUT_CLASSIFICATION	1.2339943459470511E-6	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999199093275626	WITHOUT_CLASSIFICATION	8.009067243741368E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9995065181953389	WITHOUT_CLASSIFICATION	4.934818046610638E-4	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999739280613203	WITHOUT_CLASSIFICATION	2.607193867961636E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999998196694166	WITHOUT_CLASSIFICATION	1.8033058340273542E-6	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.999974145713979	WITHOUT_CLASSIFICATION	2.5854286020962462E-5	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999991865234148	WITHOUT_CLASSIFICATION	8.134765852135048E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999991865234148	WITHOUT_CLASSIFICATION	8.134765852135048E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999952309102786	WITHOUT_CLASSIFICATION	4.769089721403183E-6	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999750795153762	WITHOUT_CLASSIFICATION	2.492048462373818E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999926828541685	WITHOUT_CLASSIFICATION	7.31714583143512E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999991756474098	WITHOUT_CLASSIFICATION	8.243525901461923E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999658272628598	WITHOUT_CLASSIFICATION	3.417273714019118E-5	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999993750630692	WITHOUT_CLASSIFICATION	6.249369308150813E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999969089639071	WITHOUT_CLASSIFICATION	3.0910360929748254E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999999227393613	WITHOUT_CLASSIFICATION	7.726063869962012E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999944394832	WITHOUT_CLASSIFICATION	5.5605168000689785E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999981880682499	WITHOUT_CLASSIFICATION	1.8119317500715831E-6	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999940513919908	WITHOUT_CLASSIFICATION	5.9486080092229525E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996513392968903	WITHOUT_CLASSIFICATION	3.4866070310975064E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999727826846256	WITHOUT_CLASSIFICATION	2.721731537442784E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999981880682499	WITHOUT_CLASSIFICATION	1.8119317500715831E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999709991154859	WITHOUT_CLASSIFICATION	2.900088451411797E-5	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999987823210127	WITHOUT_CLASSIFICATION	1.2176789873693978E-6	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999901412149629	WITHOUT_CLASSIFICATION	9.858785037062232E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9983938794771687	WITHOUT_CLASSIFICATION	0.0016061205228312346	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996513392968903	WITHOUT_CLASSIFICATION	3.4866070310975064E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999982521663287	WITHOUT_CLASSIFICATION	1.747833671288371E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997273270994	WITHOUT_CLASSIFICATION	2.726729005675521E-7	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993230882593	WITHOUT_CLASSIFICATION	6.769117406649604E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999998877741311	WITHOUT_CLASSIFICATION	1.1222586893446238E-7	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997675434377666	WITHOUT_CLASSIFICATION	2.324565622334228E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999990084930142	WITHOUT_CLASSIFICATION	9.915069857991712E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999998065630005	WITHOUT_CLASSIFICATION	1.9343699953856907E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999609619896985	WITHOUT_CLASSIFICATION	3.903801030140457E-5	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999991462372501	WITHOUT_CLASSIFICATION	8.537627498977444E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999925327875605	WITHOUT_CLASSIFICATION	7.4672124394000284E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999996659757385	WITHOUT_CLASSIFICATION	3.340242614141053E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999088120946	WITHOUT_CLASSIFICATION	9.118790540550533E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999981880682499	WITHOUT_CLASSIFICATION	1.8119317500715831E-6	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999982521663287	WITHOUT_CLASSIFICATION	1.747833671288371E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993230882593	WITHOUT_CLASSIFICATION	6.769117406649604E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999980244284861	WITHOUT_CLASSIFICATION	1.9755715139108066E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999251877821804	WITHOUT_CLASSIFICATION	7.48122178195578E-5	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999980951595894	WITHOUT_CLASSIFICATION	1.904840410625717E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996513392968903	WITHOUT_CLASSIFICATION	3.4866070310975064E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999978305433221	WITHOUT_CLASSIFICATION	2.169456677870108E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999458599812735	WITHOUT_CLASSIFICATION	5.414001872653745E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999539737185624	WITHOUT_CLASSIFICATION	4.602628143761931E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999422299163102	WITHOUT_CLASSIFICATION	5.777008368969614E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999609619896985	WITHOUT_CLASSIFICATION	3.903801030140457E-5	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999709991154859	WITHOUT_CLASSIFICATION	2.900088451411797E-5	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999607719494552	WITHOUT_CLASSIFICATION	3.922805054486515E-5	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999996523585066	WITHOUT_CLASSIFICATION	3.4764149340037693E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999709519119584	WITHOUT_CLASSIFICATION	2.9048088041661445E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999616544082743	WITHOUT_CLASSIFICATION	3.83455917257059E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998463107850816	WITHOUT_CLASSIFICATION	1.536892149183915E-4	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999103988682241	WITHOUT_CLASSIFICATION	8.960113177586066E-5	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999856342383197	WITHOUT_CLASSIFICATION	1.4365761680420812E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564338607796	WITHOUT_CLASSIFICATION	4.356613922042666E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975465441215	WITHOUT_CLASSIFICATION	2.4534558783980743E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999986657403879	WITHOUT_CLASSIFICATION	1.3342596121343556E-6	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998720064625195	WITHOUT_CLASSIFICATION	1.2799353748055916E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999925950581303	WITHOUT_CLASSIFICATION	7.404941869671813E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999926061941219	WITHOUT_CLASSIFICATION	7.393805878115813E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999997793451622	WITHOUT_CLASSIFICATION	2.2065483783023306E-7	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999900826502037	WITHOUT_CLASSIFICATION	9.917349796281159E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999973099340621	WITHOUT_CLASSIFICATION	2.6900659378636605E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999422299163102	WITHOUT_CLASSIFICATION	5.777008368969614E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999482598636698	WITHOUT_CLASSIFICATION	5.174013633032137E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999607578931373	WITHOUT_CLASSIFICATION	3.9242106862735425E-5	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998939000119403	WITHOUT_CLASSIFICATION	1.0609998805969029E-4	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999527820903518	WITHOUT_CLASSIFICATION	4.721790964830597E-5	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.999991524556492	WITHOUT_CLASSIFICATION	8.475443507955836E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999392984716	WITHOUT_CLASSIFICATION	6.070152835492048E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999965098761011	WITHOUT_CLASSIFICATION	3.4901238987867457E-6	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.999992016167696	WITHOUT_CLASSIFICATION	7.983832304063644E-6	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999987194391258	WITHOUT_CLASSIFICATION	1.2805608741790164E-6	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999785892559582	WITHOUT_CLASSIFICATION	2.1410744041878788E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999862779988765	WITHOUT_CLASSIFICATION	1.3722001123520907E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999791108862276	WITHOUT_CLASSIFICATION	2.0889113772363813E-5	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999798628543183	WITHOUT_CLASSIFICATION	2.0137145681804653E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999867399529467	WITHOUT_CLASSIFICATION	1.3260047053321538E-5	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999996174605393	WITHOUT_CLASSIFICATION	3.825394607360963E-7	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999981210329529	WITHOUT_CLASSIFICATION	1.8789670470634823E-6	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999996688039258	WITHOUT_CLASSIFICATION	3.311960742150706E-7	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999993773327216	WITHOUT_CLASSIFICATION	6.226672784692677E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999997425284672	WITHOUT_CLASSIFICATION	2.5747153273549E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999939710546266	WITHOUT_CLASSIFICATION	6.028945373414954E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999716109629312	WITHOUT_CLASSIFICATION	2.838903706884527E-5	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999984658645549	WITHOUT_CLASSIFICATION	1.5341354451587717E-6	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999990817885411	WITHOUT_CLASSIFICATION	9.18211458892925E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997868029972	WITHOUT_CLASSIFICATION	2.131970028602215E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999991995490782	WITHOUT_CLASSIFICATION	8.004509217599548E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997841756956549	WITHOUT_CLASSIFICATION	2.158243043451548E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999888835752121	WITHOUT_CLASSIFICATION	1.1116424787893905E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999795173862143	WITHOUT_CLASSIFICATION	2.048261378571779E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999858671204993	WITHOUT_CLASSIFICATION	1.4132879500701652E-5	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9998993190005955	WITHOUT_CLASSIFICATION	1.0068099940458836E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999975487712857	WITHOUT_CLASSIFICATION	2.4512287143285362E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999834972169971	WITHOUT_CLASSIFICATION	1.6502783002901865E-5	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999993450453624	WITHOUT_CLASSIFICATION	6.549546376601402E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999914397589995	WITHOUT_CLASSIFICATION	8.560241000564556E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999990894685165	WITHOUT_CLASSIFICATION	9.105314835882563E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999997718906309	WITHOUT_CLASSIFICATION	2.2810936894230155E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999408521166	WITHOUT_CLASSIFICATION	5.914788340222911E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998708215924	WITHOUT_CLASSIFICATION	1.291784077071382E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999997718906309	WITHOUT_CLASSIFICATION	2.2810936894230155E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999990894685165	WITHOUT_CLASSIFICATION	9.105314835882563E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999408521166	WITHOUT_CLASSIFICATION	5.914788340222911E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999991160995894	WITHOUT_CLASSIFICATION	8.839004105912041E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999998515291589	WITHOUT_CLASSIFICATION	1.4847084110406962E-6	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999976977132465	WITHOUT_CLASSIFICATION	2.302286753498897E-5	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999971419202682	WITHOUT_CLASSIFICATION	2.8580797317772286E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999458733663	WITHOUT_CLASSIFICATION	5.412663369230036E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997123646264104	WITHOUT_CLASSIFICATION	2.876353735895129E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999790811392505	WITHOUT_CLASSIFICATION	2.091886074950631E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999876018981517	WITHOUT_CLASSIFICATION	1.2398101848282834E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999964681180595	WITHOUT_CLASSIFICATION	3.5318819405054937E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999987854902564	WITHOUT_CLASSIFICATION	1.2145097435700757E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999930208629122	WITHOUT_CLASSIFICATION	6.979137087796887E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999907718419463	WITHOUT_CLASSIFICATION	9.228158053741038E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999999640127873	WITHOUT_CLASSIFICATION	3.5987212700859235E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999889364553486	WITHOUT_CLASSIFICATION	1.1063544651372313E-5	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999991779664691	WITHOUT_CLASSIFICATION	8.220335310116707E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999972891045729	WITHOUT_CLASSIFICATION	2.7108954271304395E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996982112532	WITHOUT_CLASSIFICATION	3.0178874682027926E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999998156139936	WITHOUT_CLASSIFICATION	1.8438600626189863E-7	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998052771206	WITHOUT_CLASSIFICATION	1.9472287939402432E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999862040589547	WITHOUT_CLASSIFICATION	1.3795941045476255E-5	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999982200630639	WITHOUT_CLASSIFICATION	1.7799369360876101E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996244928814	WITHOUT_CLASSIFICATION	3.7550711855951956E-7	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999886439959554	WITHOUT_CLASSIFICATION	1.1356004044487008E-5	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999194670051	WITHOUT_CLASSIFICATION	8.053299490195542E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999983566590914	WITHOUT_CLASSIFICATION	1.6433409085949764E-5	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999983566590914	WITHOUT_CLASSIFICATION	1.6433409085949764E-5	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996835724605	WITHOUT_CLASSIFICATION	3.164275395450316E-7	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996835724605	WITHOUT_CLASSIFICATION	3.164275395450316E-7	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999714482899312	WITHOUT_CLASSIFICATION	2.8551710068808258E-5	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996982112532	WITHOUT_CLASSIFICATION	3.0178874682027926E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999975866468164	WITHOUT_CLASSIFICATION	2.413353183561872E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999997821565185	WITHOUT_CLASSIFICATION	2.178434815798275E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999970494756771	WITHOUT_CLASSIFICATION	2.950524322890631E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999970494756771	WITHOUT_CLASSIFICATION	2.950524322890631E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999987652410157	WITHOUT_CLASSIFICATION	1.2347589842576853E-6	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.99991986986292	WITHOUT_CLASSIFICATION	8.013013708000981E-5	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999998330907098	WITHOUT_CLASSIFICATION	1.6690929012959897E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999911159516716	WITHOUT_CLASSIFICATION	8.884048328409332E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999931892864568	WITHOUT_CLASSIFICATION	6.810713543364116E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999509130708	WITHOUT_CLASSIFICATION	4.9086929290301546E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999987484254564	WITHOUT_CLASSIFICATION	1.25157454358326E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999472112607191	WITHOUT_CLASSIFICATION	5.2788739280883605E-5	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999935157162176	WITHOUT_CLASSIFICATION	6.484283782254217E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999993348194666	WITHOUT_CLASSIFICATION	6.651805334340611E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999976550337206	WITHOUT_CLASSIFICATION	2.344966279307018E-6	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999898311869276	WITHOUT_CLASSIFICATION	1.0168813072338632E-5	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999983628753828	WITHOUT_CLASSIFICATION	1.637124617172585E-6	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999706997201617	WITHOUT_CLASSIFICATION	2.930027983833632E-5	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999925183260518	WITHOUT_CLASSIFICATION	7.481673948195161E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991095103498	WITHOUT_CLASSIFICATION	8.904896503513889E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931778783899	WITHOUT_CLASSIFICATION	6.822121610079002E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999997989231343	WITHOUT_CLASSIFICATION	2.0107686564847435E-7	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999948963218739	WITHOUT_CLASSIFICATION	5.103678126073342E-6	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999994833668551	WITHOUT_CLASSIFICATION	5.166331448773985E-7	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999056178996	WITHOUT_CLASSIFICATION	9.438210031412385E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999920247389089	WITHOUT_CLASSIFICATION	7.975261091219251E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999996629250185	WITHOUT_CLASSIFICATION	3.370749815119115E-7	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999995282359	WITHOUT_CLASSIFICATION	4.7176409995000545E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995871873954536	WITHOUT_CLASSIFICATION	4.128126045464001E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999983665363991	WITHOUT_CLASSIFICATION	1.6334636009188493E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999791108862276	WITHOUT_CLASSIFICATION	2.0889113772363813E-5	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999973846382662	WITHOUT_CLASSIFICATION	2.6153617338514786E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999993897190421	WITHOUT_CLASSIFICATION	6.102809579603613E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793564311229	WITHOUT_CLASSIFICATION	2.0643568877103297E-5	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914473618716	WITHOUT_CLASSIFICATION	8.552638128442578E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999820456510942	WITHOUT_CLASSIFICATION	1.795434890585664E-5	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999820456510942	WITHOUT_CLASSIFICATION	1.795434890585664E-5	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999997743273721	WITHOUT_CLASSIFICATION	2.256726278987612E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999930614508481	WITHOUT_CLASSIFICATION	6.9385491518359095E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999868458320221	WITHOUT_CLASSIFICATION	1.3154167977984825E-5	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999868458320221	WITHOUT_CLASSIFICATION	1.3154167977984825E-5	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999965714789893	WITHOUT_CLASSIFICATION	3.4285210106133243E-6	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999951426647333	WITHOUT_CLASSIFICATION	4.857335266748603E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999686713789174	WITHOUT_CLASSIFICATION	3.132862108265755E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999975678018842	WITHOUT_CLASSIFICATION	2.4321981158255245E-6	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999634343870946	WITHOUT_CLASSIFICATION	3.65656129054239E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999854152538921	WITHOUT_CLASSIFICATION	1.4584746107911817E-5	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.999992626433937	WITHOUT_CLASSIFICATION	7.373566062986089E-6	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999995758674198	WITHOUT_CLASSIFICATION	4.241325801318159E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999968029305893	WITHOUT_CLASSIFICATION	3.1970694106758057E-6	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999968029305893	WITHOUT_CLASSIFICATION	3.1970694106758057E-6	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999611561693	WITHOUT_CLASSIFICATION	3.884383074244811E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999895929860216	WITHOUT_CLASSIFICATION	1.0407013978320938E-5	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999895929860216	WITHOUT_CLASSIFICATION	1.0407013978320938E-5	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999990247080351	WITHOUT_CLASSIFICATION	9.752919648923751E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999930658525129	WITHOUT_CLASSIFICATION	6.9341474870639775E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9987861158765526	WITHOUT_CLASSIFICATION	0.0012138841234473664	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999974455351941	WITHOUT_CLASSIFICATION	2.5544648059399207E-6	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995837707301	WITHOUT_CLASSIFICATION	4.162292699575649E-7	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999993159678126	WITHOUT_CLASSIFICATION	6.840321875427496E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998650659831864	WITHOUT_CLASSIFICATION	1.3493401681361194E-4	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999029619242709	WITHOUT_CLASSIFICATION	9.703807572914935E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999998389129042	WITHOUT_CLASSIFICATION	1.6108709571000524E-7	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999404541635136	WITHOUT_CLASSIFICATION	5.954583648648743E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997923735905	WITHOUT_CLASSIFICATION	2.0762640954915235E-7	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999522134395	WITHOUT_CLASSIFICATION	4.778656037831199E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999649040747586	WITHOUT_CLASSIFICATION	3.509592524143075E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999649040747586	WITHOUT_CLASSIFICATION	3.509592524143075E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999649040747586	WITHOUT_CLASSIFICATION	3.509592524143075E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999649040747586	WITHOUT_CLASSIFICATION	3.509592524143075E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999978068396783	WITHOUT_CLASSIFICATION	2.1931603216857477E-6	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999951533571736	WITHOUT_CLASSIFICATION	4.8466428264781006E-6	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999901150058899	WITHOUT_CLASSIFICATION	9.884994110165084E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999261659555685	WITHOUT_CLASSIFICATION	7.383404443149597E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999906439593623	WITHOUT_CLASSIFICATION	9.356040637720656E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999976915071657	WITHOUT_CLASSIFICATION	2.3084928343979997E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996066439025075	WITHOUT_CLASSIFICATION	3.933560974925051E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999875690392994	WITHOUT_CLASSIFICATION	1.2430960700661953E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998569035669	WITHOUT_CLASSIFICATION	1.430964330579552E-7	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999927611917895	WITHOUT_CLASSIFICATION	7.238808210439343E-6	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999972215040904	WITHOUT_CLASSIFICATION	2.7784959096167713E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983788284684	WITHOUT_CLASSIFICATION	1.6211715316684377E-6	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9990118756732617	WITHOUT_CLASSIFICATION	9.88124326738259E-4	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999389937382244	WITHOUT_CLASSIFICATION	6.100626177564672E-5	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999962121654469	WITHOUT_CLASSIFICATION	3.787834553235662E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983788284684	WITHOUT_CLASSIFICATION	1.6211715316684377E-6	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9977993065631453	WITHOUT_CLASSIFICATION	0.0022006934368547213	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999997968042535	WITHOUT_CLASSIFICATION	2.0319574643306901E-7	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999969917352204	WITHOUT_CLASSIFICATION	3.0082647797340933E-6	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999871186342695	WITHOUT_CLASSIFICATION	1.2881365730453164E-5	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999970158094871	WITHOUT_CLASSIFICATION	2.9841905129166595E-6	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999924539865239	WITHOUT_CLASSIFICATION	7.546013476067863E-6	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999988694000429	WITHOUT_CLASSIFICATION	1.1305999570961977E-6	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999897786835762	WITHOUT_CLASSIFICATION	1.02213164237808E-5	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995198151302	WITHOUT_CLASSIFICATION	4.801848698387937E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999995101150071	WITHOUT_CLASSIFICATION	4.898849928904628E-7	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974149821559	WITHOUT_CLASSIFICATION	2.5850178441674975E-6	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999989225990887	WITHOUT_CLASSIFICATION	1.077400911354672E-6	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999956061379914	WITHOUT_CLASSIFICATION	4.393862008522612E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9982913922112759	WITHOUT_CLASSIFICATION	0.0017086077887241437	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999481800568	WITHOUT_CLASSIFICATION	5.181994320009305E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999964603156919	WITHOUT_CLASSIFICATION	3.5396843082686844E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999980238157066	WITHOUT_CLASSIFICATION	1.976184293511675E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993697942956	WITHOUT_CLASSIFICATION	6.302057044481334E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999936943282303	WITHOUT_CLASSIFICATION	6.3056717697013255E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993697942956	WITHOUT_CLASSIFICATION	6.302057044481334E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998190712432	WITHOUT_CLASSIFICATION	1.8092875671585558E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999863492008725	WITHOUT_CLASSIFICATION	1.3650799127623795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999979275085326	WITHOUT_CLASSIFICATION	2.0724914674877026E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999148547789173	WITHOUT_CLASSIFICATION	8.514522108270592E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999980238157066	WITHOUT_CLASSIFICATION	1.976184293511675E-6	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999936943282303	WITHOUT_CLASSIFICATION	6.3056717697013255E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998190712432	WITHOUT_CLASSIFICATION	1.8092875671585558E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996555015745	WITHOUT_CLASSIFICATION	3.444984254787764E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999957273945174	WITHOUT_CLASSIFICATION	4.2726054827066946E-6	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999618145313752	WITHOUT_CLASSIFICATION	3.818546862479542E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.999987267418886	WITHOUT_CLASSIFICATION	1.2732581114036205E-5	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999997722056083	WITHOUT_CLASSIFICATION	2.2779439172372798E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999982439368044	WITHOUT_CLASSIFICATION	1.7560631957388376E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931778783899	WITHOUT_CLASSIFICATION	6.822121610079002E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999863492008725	WITHOUT_CLASSIFICATION	1.3650799127623795E-5	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999326370093	WITHOUT_CLASSIFICATION	6.736299067223686E-8	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999960198004924	WITHOUT_CLASSIFICATION	3.980199507736101E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999993294270915	WITHOUT_CLASSIFICATION	6.705729085236018E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931778783899	WITHOUT_CLASSIFICATION	6.822121610079002E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999945819117569	WITHOUT_CLASSIFICATION	5.418088243024216E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931778783899	WITHOUT_CLASSIFICATION	6.822121610079002E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999928661627984	WITHOUT_CLASSIFICATION	7.133837201607413E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999936743667395	WITHOUT_CLASSIFICATION	6.325633260433465E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999859850797426	WITHOUT_CLASSIFICATION	1.4014920257399027E-5	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999995911247605	WITHOUT_CLASSIFICATION	4.088752394947843E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999978947426702	WITHOUT_CLASSIFICATION	2.105257329798155E-6	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999921843544568	WITHOUT_CLASSIFICATION	7.815645543173903E-6	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999949511814283	WITHOUT_CLASSIFICATION	5.048818571699769E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999958985558988	WITHOUT_CLASSIFICATION	4.101444101296966E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999973437225741	WITHOUT_CLASSIFICATION	2.6562774258462232E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999874753687339	WITHOUT_CLASSIFICATION	1.252463126599939E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998448837168176	WITHOUT_CLASSIFICATION	1.5511628318248341E-4	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999989190833442	WITHOUT_CLASSIFICATION	1.0809166558571519E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9987861158765526	WITHOUT_CLASSIFICATION	0.0012138841234473664	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999275889558804	WITHOUT_CLASSIFICATION	7.241104411960956E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999553099901113	WITHOUT_CLASSIFICATION	4.4690009888620055E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999624828119018	WITHOUT_CLASSIFICATION	3.75171880983025E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999897057692149	WITHOUT_CLASSIFICATION	1.0294230785105647E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999527544133	WITHOUT_CLASSIFICATION	4.7245586702220394E-7	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999973769286027	WITHOUT_CLASSIFICATION	2.6230713974354133E-6	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999993424177399	WITHOUT_CLASSIFICATION	6.575822600168478E-7	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999969670311496	WITHOUT_CLASSIFICATION	3.0329688504036977E-5	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998017779089	WITHOUT_CLASSIFICATION	1.982220909552703E-7	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999989245423513	WITHOUT_CLASSIFICATION	1.0754576486871972E-6	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9987861158765526	WITHOUT_CLASSIFICATION	0.0012138841234473664	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999459447628654	WITHOUT_CLASSIFICATION	5.405523713470694E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999975517054525	WITHOUT_CLASSIFICATION	2.4482945474871226E-5	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999980920371193	WITHOUT_CLASSIFICATION	1.9079628806985954E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999980799702176	WITHOUT_CLASSIFICATION	1.9200297823953683E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998618538331848	WITHOUT_CLASSIFICATION	1.3814616681520397E-4	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999977146646812	WITHOUT_CLASSIFICATION	2.285335318767324E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994406171452	WITHOUT_CLASSIFICATION	5.59382854825908E-7	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999998178801591	WITHOUT_CLASSIFICATION	1.8211984078189055E-7	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999580653633595	WITHOUT_CLASSIFICATION	4.19346366405644E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999754106889576	WITHOUT_CLASSIFICATION	2.4589311042426276E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9988710004889395	WITHOUT_CLASSIFICATION	0.0011289995110605271	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999325944101437	WITHOUT_CLASSIFICATION	6.740558985626052E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999920088930213	WITHOUT_CLASSIFICATION	7.991106978664309E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9998273528634496	WITHOUT_CLASSIFICATION	1.726471365504251E-4	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998580778326629	WITHOUT_CLASSIFICATION	1.419221673369787E-4	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999968503195654	WITHOUT_CLASSIFICATION	3.149680434686907E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984982623292298	WITHOUT_CLASSIFICATION	0.0015017376707701481	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995670251953	WITHOUT_CLASSIFICATION	4.3297480470563334E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999995244911664	WITHOUT_CLASSIFICATION	4.755088335961478E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999429874448674	WITHOUT_CLASSIFICATION	5.7012555132459846E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999429874448674	WITHOUT_CLASSIFICATION	5.7012555132459846E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999984207210567	WITHOUT_CLASSIFICATION	1.579278943290303E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999958985558988	WITHOUT_CLASSIFICATION	4.101444101296966E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999945643596013	WITHOUT_CLASSIFICATION	5.43564039865863E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999965351394435	WITHOUT_CLASSIFICATION	3.464860556540638E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999993025774143	WITHOUT_CLASSIFICATION	6.974225856851963E-7	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999990318075286	WITHOUT_CLASSIFICATION	9.681924715032771E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.999988443809933	WITHOUT_CLASSIFICATION	1.155619006700607E-5	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9994253231686512	WITHOUT_CLASSIFICATION	5.746768313488897E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999832687103758	WITHOUT_CLASSIFICATION	1.6731289624253626E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999982318329839	WITHOUT_CLASSIFICATION	1.7681670161035974E-5	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999994804034364	WITHOUT_CLASSIFICATION	5.195965634979897E-7	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999995058708988	WITHOUT_CLASSIFICATION	4.941291012809335E-7	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995422457786	WITHOUT_CLASSIFICATION	4.577542214916466E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999959941832276	WITHOUT_CLASSIFICATION	4.005816772376634E-6	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999967279731596	WITHOUT_CLASSIFICATION	3.2720268403166575E-6	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999942828049	WITHOUT_CLASSIFICATION	5.717195085839971E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999993697641052	WITHOUT_CLASSIFICATION	6.302358947534796E-7	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999611045512	WITHOUT_CLASSIFICATION	3.8895448789284496E-7	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999993152880668	WITHOUT_CLASSIFICATION	6.847119331889185E-7	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999277630235	WITHOUT_CLASSIFICATION	7.223697647618397E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999623296623	WITHOUT_CLASSIFICATION	3.7670337748487186E-8	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999975562449334	WITHOUT_CLASSIFICATION	2.4437550666847233E-6	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999969328571988	WITHOUT_CLASSIFICATION	3.067142801214362E-6	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999777116565	WITHOUT_CLASSIFICATION	2.2288343535612285E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984982623292298	WITHOUT_CLASSIFICATION	0.0015017376707701481	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999997628732494	WITHOUT_CLASSIFICATION	2.3712675056786528E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999196486147	WITHOUT_CLASSIFICATION	8.035138535080199E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999983094792846	WITHOUT_CLASSIFICATION	1.6905207154794662E-6	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999995788547938	WITHOUT_CLASSIFICATION	4.2114520619762714E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999948181776593	WITHOUT_CLASSIFICATION	5.181822340675568E-6	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999974426120048	WITHOUT_CLASSIFICATION	2.557387995131704E-6	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998768309176512	WITHOUT_CLASSIFICATION	1.2316908234879509E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999912900619802	WITHOUT_CLASSIFICATION	8.709938019744292E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999987283987105	WITHOUT_CLASSIFICATION	1.2716012894049194E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999959481484362	WITHOUT_CLASSIFICATION	4.0518515638032785E-6	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999961723812519	WITHOUT_CLASSIFICATION	3.827618748104619E-6	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9990434738917506	WITHOUT_CLASSIFICATION	9.565261082494102E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999256770783692	WITHOUT_CLASSIFICATION	7.432292163072371E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999993678746525	WITHOUT_CLASSIFICATION	6.321253474833637E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999989495388324	WITHOUT_CLASSIFICATION	1.0504611676037433E-6	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999989495388324	WITHOUT_CLASSIFICATION	1.0504611676037433E-6	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999981198391699	WITHOUT_CLASSIFICATION	1.8801608300777708E-6	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999951036272745	WITHOUT_CLASSIFICATION	4.896372725466036E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999872434253071	WITHOUT_CLASSIFICATION	1.2756574692902697E-5	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999872434253071	WITHOUT_CLASSIFICATION	1.2756574692902697E-5	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999997758165667	WITHOUT_CLASSIFICATION	2.241834332541978E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999943035981315	WITHOUT_CLASSIFICATION	5.6964018685535985E-6	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999999712474647	WITHOUT_CLASSIFICATION	2.87525353036793E-7	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999975203445131	WITHOUT_CLASSIFICATION	2.4796554870029025E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999854514013229	WITHOUT_CLASSIFICATION	1.454859867716937E-5	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970978186241	WITHOUT_CLASSIFICATION	2.9021813758497767E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988681816812	WITHOUT_CLASSIFICATION	1.1318183189210144E-6	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988681816812	WITHOUT_CLASSIFICATION	1.1318183189210144E-6	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999961204110854	WITHOUT_CLASSIFICATION	3.8795889145962895E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999939942477282	WITHOUT_CLASSIFICATION	6.0057522718273635E-6	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999362570479514	WITHOUT_CLASSIFICATION	6.374295204866419E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999989397002114	WITHOUT_CLASSIFICATION	1.0602997885928228E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999989397002114	WITHOUT_CLASSIFICATION	1.0602997885928228E-6	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999947774232322	WITHOUT_CLASSIFICATION	5.222576767805447E-6	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999968572443454	WITHOUT_CLASSIFICATION	3.142755654581429E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999975259958452	WITHOUT_CLASSIFICATION	2.474004154757149E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999973502792159	WITHOUT_CLASSIFICATION	2.649720784038223E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999994415057595	WITHOUT_CLASSIFICATION	5.58494240605202E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999938138900428	WITHOUT_CLASSIFICATION	6.186109957203404E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999944998420659	WITHOUT_CLASSIFICATION	5.5001579341046835E-6	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999962164397523	WITHOUT_CLASSIFICATION	3.783560247738789E-6	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.999996031538115	WITHOUT_CLASSIFICATION	3.968461884982223E-6	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999955356793002	WITHOUT_CLASSIFICATION	4.464320699776351E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999991638473535	WITHOUT_CLASSIFICATION	8.361526464923414E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999709376238233	WITHOUT_CLASSIFICATION	2.906237617670555E-5	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999213200333871	WITHOUT_CLASSIFICATION	7.867996661286658E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999988102043271	WITHOUT_CLASSIFICATION	1.1897956728975165E-5	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999911262775879	WITHOUT_CLASSIFICATION	8.873722412118083E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999886941757792	WITHOUT_CLASSIFICATION	1.1305824220773005E-5	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998339357675	WITHOUT_CLASSIFICATION	1.6606423242772206E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999994531773667	WITHOUT_CLASSIFICATION	5.468226333399114E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999993177569821	WITHOUT_CLASSIFICATION	6.822430179011629E-6	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999852633070855	WITHOUT_CLASSIFICATION	1.4736692914511787E-5	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999951260730184	WITHOUT_CLASSIFICATION	4.873926981654416E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999974674505578	WITHOUT_CLASSIFICATION	2.5325494421630482E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9996569194656302	WITHOUT_CLASSIFICATION	3.430805343698391E-4	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999493351412362	WITHOUT_CLASSIFICATION	5.066485876391553E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999376861080495	WITHOUT_CLASSIFICATION	6.231389195057712E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999987920366936	WITHOUT_CLASSIFICATION	1.2079633063662424E-6	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999985030910366	WITHOUT_CLASSIFICATION	1.4969089634014492E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998662946068998	WITHOUT_CLASSIFICATION	1.337053931001157E-4	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999998224101722	WITHOUT_CLASSIFICATION	1.7758982796732925E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995861682096	WITHOUT_CLASSIFICATION	4.138317903770322E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999999759014314	WITHOUT_CLASSIFICATION	2.409856858780938E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999991690397889	WITHOUT_CLASSIFICATION	8.309602111613537E-7	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998059064952	WITHOUT_CLASSIFICATION	1.9409350493033392E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999906987423853	WITHOUT_CLASSIFICATION	9.301257614681389E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999993222778906	WITHOUT_CLASSIFICATION	6.777221094620538E-7	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999314166376094	WITHOUT_CLASSIFICATION	6.858336239053366E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999702772160008	WITHOUT_CLASSIFICATION	2.9722783999090567E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999973399735831	WITHOUT_CLASSIFICATION	2.660026416886725E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999970024575091	WITHOUT_CLASSIFICATION	2.997542490895629E-6	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999985373073695	WITHOUT_CLASSIFICATION	1.4626926304635336E-6	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999576315086	WITHOUT_CLASSIFICATION	4.2368491414063254E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999906023175038	WITHOUT_CLASSIFICATION	9.397682496297504E-6	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999974916350834	WITHOUT_CLASSIFICATION	2.508364916599931E-6	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999995168988302	WITHOUT_CLASSIFICATION	4.831011698327257E-7	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999891696318709	WITHOUT_CLASSIFICATION	1.083036812915712E-5	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999977357079243	WITHOUT_CLASSIFICATION	2.264292075724909E-6	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999854767300008	WITHOUT_CLASSIFICATION	1.4523269999155764E-5	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999978256647495	WITHOUT_CLASSIFICATION	2.174335250504891E-5	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.99999926065798	WITHOUT_CLASSIFICATION	7.393420200465638E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999941053009138	WITHOUT_CLASSIFICATION	5.894699086270806E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999981891095608	WITHOUT_CLASSIFICATION	1.8108904391919362E-6	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999930200040147	WITHOUT_CLASSIFICATION	6.979995985296263E-6	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999505934642682	WITHOUT_CLASSIFICATION	4.940653573194399E-5	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999997017141109	WITHOUT_CLASSIFICATION	2.9828588918216806E-7	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999882011582453	WITHOUT_CLASSIFICATION	1.1798841754751794E-5	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999989476804513	WITHOUT_CLASSIFICATION	1.0523195486357226E-6	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999974094024554	WITHOUT_CLASSIFICATION	2.590597544595932E-6	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999964376549498	WITHOUT_CLASSIFICATION	3.562345050271338E-6	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999988495231042	WITHOUT_CLASSIFICATION	1.1504768957534155E-6	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999913033897995	WITHOUT_CLASSIFICATION	8.69661020050665E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999969395874339	WITHOUT_CLASSIFICATION	3.0604125660606234E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999969395874339	WITHOUT_CLASSIFICATION	3.0604125660606234E-6	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9997768508070006	WITHOUT_CLASSIFICATION	2.2314919299949048E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999717874515294	WITHOUT_CLASSIFICATION	2.8212548470670428E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999989862501208	WITHOUT_CLASSIFICATION	1.0137498791743284E-6	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999959527111182	WITHOUT_CLASSIFICATION	4.0472888817921105E-6	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999963300616816	WITHOUT_CLASSIFICATION	3.6699383184030617E-5	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999507599272142	WITHOUT_CLASSIFICATION	4.9240072785835074E-5	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999998063709289	WITHOUT_CLASSIFICATION	1.9362907106810477E-7	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999640232585	WITHOUT_CLASSIFICATION	3.597674141061391E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999975223143379	WITHOUT_CLASSIFICATION	2.4776856621264437E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999935963235592	WITHOUT_CLASSIFICATION	6.4036764408710415E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998353020328	WITHOUT_CLASSIFICATION	1.6469796717561865E-7	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999706500517802	WITHOUT_CLASSIFICATION	2.934994821967626E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999874118456084	WITHOUT_CLASSIFICATION	1.258815439161578E-5	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999996495910273	WITHOUT_CLASSIFICATION	3.5040897277610823E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999931142116857	WITHOUT_CLASSIFICATION	6.8857883143101775E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999931142116857	WITHOUT_CLASSIFICATION	6.8857883143101775E-6	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999996410915376	WITHOUT_CLASSIFICATION	3.589084624557806E-7	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999973632216524	WITHOUT_CLASSIFICATION	2.636778347560716E-6	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999965303384154	WITHOUT_CLASSIFICATION	3.4696615845955662E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999999896762913	WITHOUT_CLASSIFICATION	1.0323708700934391E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991050303484	WITHOUT_CLASSIFICATION	8.949696516078287E-6	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790843143771	WITHOUT_CLASSIFICATION	2.091568562283906E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999804943655434	WITHOUT_CLASSIFICATION	1.9505634456658777E-5	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999951991647621	WITHOUT_CLASSIFICATION	4.800835237935553E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999698763203	WITHOUT_CLASSIFICATION	3.0123679644343E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999942787294548	WITHOUT_CLASSIFICATION	5.721270545109103E-6	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999996488434456	WITHOUT_CLASSIFICATION	3.5115655439865047E-7	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999848441895471	WITHOUT_CLASSIFICATION	1.5155810452733012E-5	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999700001404	WITHOUT_CLASSIFICATION	2.999985961609291E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999994462768135	WITHOUT_CLASSIFICATION	5.5372318649881E-6	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999970863835997	WITHOUT_CLASSIFICATION	2.9136164003178615E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999990645464554	WITHOUT_CLASSIFICATION	9.354535446337531E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998325832316585	WITHOUT_CLASSIFICATION	1.6741676834153076E-4	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999988033202222	WITHOUT_CLASSIFICATION	1.1966797778034443E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999996537686955	WITHOUT_CLASSIFICATION	3.4623130449278917E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999881371702	WITHOUT_CLASSIFICATION	1.1862829741235134E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999998513194299	WITHOUT_CLASSIFICATION	1.4868057011694384E-7	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997016821142	WITHOUT_CLASSIFICATION	2.98317885858698E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999985872144751	WITHOUT_CLASSIFICATION	1.4127855248555031E-6	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998851907111233	WITHOUT_CLASSIFICATION	1.1480928887670715E-4	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999073865619822	WITHOUT_CLASSIFICATION	9.261343801780569E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999860913358253	WITHOUT_CLASSIFICATION	1.3908664174618845E-5	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998374179465	WITHOUT_CLASSIFICATION	1.6258205346088426E-7	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999874846369802	WITHOUT_CLASSIFICATION	1.2515363019787556E-5	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999936729252302	WITHOUT_CLASSIFICATION	6.327074769777229E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999964408088311	WITHOUT_CLASSIFICATION	3.5591911688778504E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999439964542544	WITHOUT_CLASSIFICATION	5.600354574568114E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999989727735863	WITHOUT_CLASSIFICATION	1.0272264137378458E-6	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999994108246001	WITHOUT_CLASSIFICATION	5.891753999454748E-7	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999977282371509	WITHOUT_CLASSIFICATION	2.2717628491223978E-6	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999999240656606	WITHOUT_CLASSIFICATION	7.593433943264776E-8	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999984288022825	WITHOUT_CLASSIFICATION	1.5711977175028826E-6	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998950997028	WITHOUT_CLASSIFICATION	1.0490029732299959E-7	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999974302989962	WITHOUT_CLASSIFICATION	2.5697010037315198E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999764449453524	WITHOUT_CLASSIFICATION	2.355505464747825E-5	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999962002500655	WITHOUT_CLASSIFICATION	3.799749934368809E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999969157797419	WITHOUT_CLASSIFICATION	3.0842202581276026E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999969157797419	WITHOUT_CLASSIFICATION	3.0842202581276026E-6	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999979573749237	WITHOUT_CLASSIFICATION	2.042625076314738E-6	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993424646778	WITHOUT_CLASSIFICATION	6.575353221917639E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999995725119569	WITHOUT_CLASSIFICATION	4.2748804302248393E-7	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999994288535361	WITHOUT_CLASSIFICATION	5.711464638510244E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999982713506609	WITHOUT_CLASSIFICATION	1.7286493391050816E-6	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999996063749802	WITHOUT_CLASSIFICATION	3.9362501976501416E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999978972244259	WITHOUT_CLASSIFICATION	2.1027755739774076E-6	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999803120122537	WITHOUT_CLASSIFICATION	1.9687987746210527E-5	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999814965161	WITHOUT_CLASSIFICATION	1.8503483879627614E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945461551352	WITHOUT_CLASSIFICATION	5.453844864815294E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922136036198	WITHOUT_CLASSIFICATION	7.78639638026948E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999235046058749	WITHOUT_CLASSIFICATION	7.649539412518104E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999973470537885	WITHOUT_CLASSIFICATION	2.6529462114969524E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997030000889	WITHOUT_CLASSIFICATION	2.969999111137661E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999920342548612	WITHOUT_CLASSIFICATION	7.965745138834301E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999790972623656	WITHOUT_CLASSIFICATION	2.0902737634426804E-5	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999998356259169	WITHOUT_CLASSIFICATION	1.64374083224004E-7	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999933244648	WITHOUT_CLASSIFICATION	6.67553520169257E-9	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999989067598893	WITHOUT_CLASSIFICATION	1.093240110590914E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999993052676801	WITHOUT_CLASSIFICATION	6.947323199442276E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999539241755	WITHOUT_CLASSIFICATION	4.607582448472162E-8	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999987681273359	WITHOUT_CLASSIFICATION	1.2318726641173428E-6	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999728164581381	WITHOUT_CLASSIFICATION	2.7183541861913897E-5	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999460100776189	WITHOUT_CLASSIFICATION	5.398992238118241E-5	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999944278527535	WITHOUT_CLASSIFICATION	5.572147246589139E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.99995785086197	WITHOUT_CLASSIFICATION	4.214913803007363E-5	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999997219577492	WITHOUT_CLASSIFICATION	2.780422508180893E-7	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999361410605	WITHOUT_CLASSIFICATION	6.385893946228916E-8	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999984142605649	WITHOUT_CLASSIFICATION	1.5857394350900037E-6	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999994416694025	WITHOUT_CLASSIFICATION	5.583305975125135E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999993578120748	WITHOUT_CLASSIFICATION	6.421879252173408E-7	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999489821211	WITHOUT_CLASSIFICATION	5.1017878866262E-8	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999992029594049	WITHOUT_CLASSIFICATION	7.970405950222908E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997491019516	WITHOUT_CLASSIFICATION	2.5089804845993615E-7	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999975384025823	WITHOUT_CLASSIFICATION	2.4615974177218353E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99999780992493	WITHOUT_CLASSIFICATION	2.1900750699744353E-6	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999992914793648	WITHOUT_CLASSIFICATION	7.085206351332497E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998919025628	WITHOUT_CLASSIFICATION	1.0809743726813446E-7	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999423228278995	WITHOUT_CLASSIFICATION	5.767717210049115E-5	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999784285273404	WITHOUT_CLASSIFICATION	2.1571472659648217E-5	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999971517561947	WITHOUT_CLASSIFICATION	2.8482438052457747E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999837980512	WITHOUT_CLASSIFICATION	1.6201948806227295E-7	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998926301819	WITHOUT_CLASSIFICATION	1.0736981809130937E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999524356627573	WITHOUT_CLASSIFICATION	4.756433724268432E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999755364855	WITHOUT_CLASSIFICATION	2.4463514474757E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999941463142137	WITHOUT_CLASSIFICATION	5.853685786229802E-6	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999902072001776	WITHOUT_CLASSIFICATION	9.792799822338384E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999874118456084	WITHOUT_CLASSIFICATION	1.258815439161578E-5	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999866439318746	WITHOUT_CLASSIFICATION	1.3356068125356924E-5	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999968350645663	WITHOUT_CLASSIFICATION	3.164935433826842E-6	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999693748209071	WITHOUT_CLASSIFICATION	3.062517909295339E-5	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999962902776838	WITHOUT_CLASSIFICATION	3.7097223162282465E-6	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999995955862596	WITHOUT_CLASSIFICATION	4.044137403747513E-7	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999997503927321	WITHOUT_CLASSIFICATION	2.4960726783495797E-7	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999998306136319	WITHOUT_CLASSIFICATION	1.6938636809636177E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999816520028139	WITHOUT_CLASSIFICATION	1.8347997186112955E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999957932309769	WITHOUT_CLASSIFICATION	4.206769023094815E-6	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999979188588113	WITHOUT_CLASSIFICATION	2.0811411886700664E-6	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999990278159714	WITHOUT_CLASSIFICATION	9.721840285834959E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999908320144086	WITHOUT_CLASSIFICATION	9.167985591378012E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999940920189092	WITHOUT_CLASSIFICATION	5.907981090755347E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999996566449162	WITHOUT_CLASSIFICATION	3.4335508378583585E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789829089292	WITHOUT_CLASSIFICATION	2.101709107080455E-5	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999296616995131	WITHOUT_CLASSIFICATION	7.033830048680452E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999731612544137	WITHOUT_CLASSIFICATION	2.683874558626883E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999979718799733	WITHOUT_CLASSIFICATION	2.0281200267292104E-6	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999928319317706	WITHOUT_CLASSIFICATION	7.1680682293788066E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789829089292	WITHOUT_CLASSIFICATION	2.101709107080455E-5	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9992682247120778	WITHOUT_CLASSIFICATION	7.317752879221564E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999975798563044	WITHOUT_CLASSIFICATION	2.4201436956065688E-5	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998138516313	WITHOUT_CLASSIFICATION	1.8614836872184324E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999987960737741	WITHOUT_CLASSIFICATION	1.2039262259090563E-6	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999985892963648	WITHOUT_CLASSIFICATION	1.4107036351982831E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996195731291	WITHOUT_CLASSIFICATION	3.8042687098851847E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999994962841693	WITHOUT_CLASSIFICATION	5.037158306417849E-7	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999940065082514	WITHOUT_CLASSIFICATION	5.99349174864426E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999994563268726	WITHOUT_CLASSIFICATION	5.436731273261615E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998586198202	WITHOUT_CLASSIFICATION	1.4138017979680908E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999877535974208	WITHOUT_CLASSIFICATION	1.2246402579377946E-5	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9990018959139684	WITHOUT_CLASSIFICATION	9.98104086031687E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999997883907948	WITHOUT_CLASSIFICATION	2.116092052606575E-7	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999992770708724	WITHOUT_CLASSIFICATION	7.229291275864421E-7	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999990557596191	WITHOUT_CLASSIFICATION	9.442403808757827E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999777116565	WITHOUT_CLASSIFICATION	2.2288343535612285E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999893980394	WITHOUT_CLASSIFICATION	1.0601960748759515E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999987655288398	WITHOUT_CLASSIFICATION	1.2344711601762087E-6	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999994443395505	WITHOUT_CLASSIFICATION	5.556604494949294E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999998231452	WITHOUT_CLASSIFICATION	1.7685480007363254E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999308918022	WITHOUT_CLASSIFICATION	6.910819782083029E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999992500752812	WITHOUT_CLASSIFICATION	7.499247186942901E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999092526447	WITHOUT_CLASSIFICATION	9.074735532619742E-8	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999415643241	WITHOUT_CLASSIFICATION	5.843567582209701E-8	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994308078134	WITHOUT_CLASSIFICATION	5.691921866653911E-7	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999966464150468	WITHOUT_CLASSIFICATION	3.353584953142426E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999814981112748	WITHOUT_CLASSIFICATION	1.8501888725238585E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986899357857	WITHOUT_CLASSIFICATION	1.3100642143273718E-6	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999798318324965	WITHOUT_CLASSIFICATION	2.0168167503542406E-5	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999989889678913	WITHOUT_CLASSIFICATION	1.0110321087189823E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999997936888328	WITHOUT_CLASSIFICATION	2.0631116729894222E-7	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999916902575366	WITHOUT_CLASSIFICATION	8.3097424633964E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999972983011088	WITHOUT_CLASSIFICATION	2.7016988911081502E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999997857251389	WITHOUT_CLASSIFICATION	2.1427486117501808E-7	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999986970537013	WITHOUT_CLASSIFICATION	1.3029462988271906E-6	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999998497079002	WITHOUT_CLASSIFICATION	1.5029209979202071E-6	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999905440195026	WITHOUT_CLASSIFICATION	9.455980497485575E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999457148291	WITHOUT_CLASSIFICATION	5.428517090344315E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998643549505	WITHOUT_CLASSIFICATION	1.3564504954202556E-7	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999994901147204	WITHOUT_CLASSIFICATION	5.098852795921274E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994040401361	WITHOUT_CLASSIFICATION	5.959598638864427E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994040401361	WITHOUT_CLASSIFICATION	5.959598638864427E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999862924516218	WITHOUT_CLASSIFICATION	1.370754837822236E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999998964844205	WITHOUT_CLASSIFICATION	1.0351557948776483E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994911695195	WITHOUT_CLASSIFICATION	5.088304804939921E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.9987586177012966	WITHOUT_CLASSIFICATION	0.0012413822987035086	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999975678018842	WITHOUT_CLASSIFICATION	2.4321981158255245E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999975678018842	WITHOUT_CLASSIFICATION	2.4321981158255245E-6	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999240424778066	WITHOUT_CLASSIFICATION	7.595752219327906E-5	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999993425070732	WITHOUT_CLASSIFICATION	6.574929266521125E-7	TEST
//	WITHOUT_CLASSIFICATION	0.999646093015765	WITHOUT_CLASSIFICATION	3.539069842349619E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999737206803733	WITHOUT_CLASSIFICATION	2.627931962669938E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999958235190549	WITHOUT_CLASSIFICATION	4.1764809451072585E-6	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999817807888346	WITHOUT_CLASSIFICATION	1.821921116545031E-5	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997423567594	WITHOUT_CLASSIFICATION	2.5764324069022626E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997819049128	WITHOUT_CLASSIFICATION	2.1809508724308966E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999975521086606	WITHOUT_CLASSIFICATION	2.4478913393353204E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746994039916	WITHOUT_CLASSIFICATION	2.5300596008390975E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746994039916	WITHOUT_CLASSIFICATION	2.5300596008390975E-5	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999968026049224	WITHOUT_CLASSIFICATION	3.1973950775468037E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999609619896985	WITHOUT_CLASSIFICATION	3.903801030140457E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999990084930142	WITHOUT_CLASSIFICATION	9.915069857991712E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999053044707977	WITHOUT_CLASSIFICATION	9.46955292023455E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999967140940901	WITHOUT_CLASSIFICATION	3.2859059098828805E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975465441215	WITHOUT_CLASSIFICATION	2.4534558783980743E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135949111192	WITHOUT_CLASSIFICATION	8.640508888082028E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997841524464	WITHOUT_CLASSIFICATION	2.1584755360531207E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999984339286779	WITHOUT_CLASSIFICATION	1.566071322053068E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999990940840086	WITHOUT_CLASSIFICATION	9.059159914055687E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999956656002353	WITHOUT_CLASSIFICATION	4.3343997646513674E-6	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998586198202	WITHOUT_CLASSIFICATION	1.4138017979680908E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999939310133548	WITHOUT_CLASSIFICATION	6.068986645196418E-6	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9997873807495978	WITHOUT_CLASSIFICATION	2.1261925040210358E-4	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999980635065675	WITHOUT_CLASSIFICATION	1.9364934324019467E-6	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.999997271827216	WITHOUT_CLASSIFICATION	2.7281727839664485E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999601251062277	WITHOUT_CLASSIFICATION	3.9874893772421346E-5	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999858139128661	WITHOUT_CLASSIFICATION	1.4186087133818852E-5	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999927455343277	WITHOUT_CLASSIFICATION	7.2544656723687225E-6	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998865921749	WITHOUT_CLASSIFICATION	1.1340782513024157E-7	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999998987912081	WITHOUT_CLASSIFICATION	1.0120879190323343E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999864165543911	WITHOUT_CLASSIFICATION	1.3583445608734703E-5	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999864165543911	WITHOUT_CLASSIFICATION	1.3583445608734703E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983788284684	WITHOUT_CLASSIFICATION	1.6211715316684377E-6	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999993478531	WITHOUT_CLASSIFICATION	6.521469042378706E-9	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999110846806846	WITHOUT_CLASSIFICATION	8.891531931547934E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999951390655674	WITHOUT_CLASSIFICATION	4.86093443260112E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999989067166934	WITHOUT_CLASSIFICATION	1.0932833065725176E-6	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999995078339964	WITHOUT_CLASSIFICATION	4.921660036518196E-7	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999481800568	WITHOUT_CLASSIFICATION	5.181994320009305E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999983351292379	WITHOUT_CLASSIFICATION	1.6648707621980092E-6	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996555015745	WITHOUT_CLASSIFICATION	3.444984254787764E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999917874285426	WITHOUT_CLASSIFICATION	8.212571457440537E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931778783899	WITHOUT_CLASSIFICATION	6.822121610079002E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999935589149714	WITHOUT_CLASSIFICATION	6.441085028473583E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999996509351736	WITHOUT_CLASSIFICATION	3.4906482637272506E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999958905488594	WITHOUT_CLASSIFICATION	4.109451140588874E-6	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999842811226589	WITHOUT_CLASSIFICATION	1.571887734117102E-5	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985089263024	WITHOUT_CLASSIFICATION	1.4910736975646493E-6	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999993937723739	WITHOUT_CLASSIFICATION	6.062276260676826E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971942124096	WITHOUT_CLASSIFICATION	2.8057875904391052E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999897161370608	WITHOUT_CLASSIFICATION	1.0283862939076038E-5	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999985311608338	WITHOUT_CLASSIFICATION	1.4688391662311286E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995684234113	WITHOUT_CLASSIFICATION	4.31576588735002E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.99999676396053	WITHOUT_CLASSIFICATION	3.2360394699417617E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999975259958452	WITHOUT_CLASSIFICATION	2.474004154757149E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999990418863262	WITHOUT_CLASSIFICATION	9.581136738491075E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994941096875	WITHOUT_CLASSIFICATION	5.058903125391982E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994941096875	WITHOUT_CLASSIFICATION	5.058903125391982E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999997388957161	WITHOUT_CLASSIFICATION	2.6110428391328793E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999975657652179	WITHOUT_CLASSIFICATION	2.4342347820456852E-6	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999976762201978	WITHOUT_CLASSIFICATION	2.3237798023559278E-6	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999946177924298	WITHOUT_CLASSIFICATION	5.382207570112414E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.999998320067143	WITHOUT_CLASSIFICATION	1.679932857071985E-6	TEST
