test out the optimizer:	WITHOUT_CLASSIFICATION	0.998441032192656	WITHOUT_CLASSIFICATION	0.0015589678073439763	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9997370273170894	WITHOUT_CLASSIFICATION	2.6297268291066914E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999845400840568	WITHOUT_CLASSIFICATION	1.545991594324681E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999935992116793	WITHOUT_CLASSIFICATION	6.400788320676328E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999935992116793	WITHOUT_CLASSIFICATION	6.400788320676328E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999779747209916	WITHOUT_CLASSIFICATION	2.2025279008486575E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999673976705608	WITHOUT_CLASSIFICATION	3.2602329439171706E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998338320526055	WITHOUT_CLASSIFICATION	1.6616794739451044E-4	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999919366336177	WITHOUT_CLASSIFICATION	8.063366382329583E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999902370694517	WITHOUT_CLASSIFICATION	9.762930548309309E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999902370694517	WITHOUT_CLASSIFICATION	9.762930548309309E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999857361334451	WITHOUT_CLASSIFICATION	1.4263866554930496E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999895331532277	WITHOUT_CLASSIFICATION	1.0466846772337225E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999654717091239	WITHOUT_CLASSIFICATION	3.4528290876107935E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.99998712558596	WITHOUT_CLASSIFICATION	1.2874414039889975E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999936518429647	WITHOUT_CLASSIFICATION	6.348157035214885E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999872918738223	WITHOUT_CLASSIFICATION	1.2708126177617794E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999825440365292	WITHOUT_CLASSIFICATION	1.745596347082377E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999763399374723	WITHOUT_CLASSIFICATION	2.3660062527752955E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872028948559	WITHOUT_CLASSIFICATION	1.2797105144189618E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872028948559	WITHOUT_CLASSIFICATION	1.2797105144189618E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999772824624402	WITHOUT_CLASSIFICATION	2.2717537559806303E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999872041810844	WITHOUT_CLASSIFICATION	1.2795818915509826E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999674649191028	WITHOUT_CLASSIFICATION	3.2535080897147785E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999554248750254	WITHOUT_CLASSIFICATION	4.4575124974638995E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999673601641867	WITHOUT_CLASSIFICATION	3.263983581313848E-5	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999992696196978	WITHOUT_CLASSIFICATION	7.30380302162988E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999521362061553	WITHOUT_CLASSIFICATION	4.786379384461599E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999880273304419	WITHOUT_CLASSIFICATION	1.1972669558122137E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999922079115215	WITHOUT_CLASSIFICATION	7.792088478377944E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999691934378728	WITHOUT_CLASSIFICATION	3.080656212725798E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999964231194044	WITHOUT_CLASSIFICATION	3.57688059560654E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998448927566864	WITHOUT_CLASSIFICATION	1.5510724331354138E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999921715896143	WITHOUT_CLASSIFICATION	7.828410385720336E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999752508159399	WITHOUT_CLASSIFICATION	2.4749184060172858E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999681103051098	WITHOUT_CLASSIFICATION	3.1889694890153386E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666037850446	WITHOUT_CLASSIFICATION	3.3396214955305986E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999911666358761	WITHOUT_CLASSIFICATION	8.83336412403305E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999572326301548	WITHOUT_CLASSIFICATION	4.27673698451233E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999875879026926	WITHOUT_CLASSIFICATION	1.2412097307502434E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999875879026926	WITHOUT_CLASSIFICATION	1.2412097307502434E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999911666358761	WITHOUT_CLASSIFICATION	8.83336412403305E-6	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9997413980931804	WITHOUT_CLASSIFICATION	2.5860190681954313E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999692227647173	WITHOUT_CLASSIFICATION	3.077723528258597E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999984386246942	WITHOUT_CLASSIFICATION	1.5613753058066396E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999986312490851	WITHOUT_CLASSIFICATION	1.3687509149102844E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999981615714877	WITHOUT_CLASSIFICATION	1.838428512273161E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993758750905344	WITHOUT_CLASSIFICATION	6.24124909465724E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999406658855827	WITHOUT_CLASSIFICATION	5.933411441715907E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999944305894757	WITHOUT_CLASSIFICATION	5.569410524270605E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998893892035654	WITHOUT_CLASSIFICATION	1.1061079643458676E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999805177123582	WITHOUT_CLASSIFICATION	1.9482287641808373E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999875879026926	WITHOUT_CLASSIFICATION	1.2412097307502434E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999957539737636	WITHOUT_CLASSIFICATION	4.246026236302246E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999951237932986	WITHOUT_CLASSIFICATION	4.876206701399114E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999871386730401	WITHOUT_CLASSIFICATION	1.2861326959863031E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999937493019296	WITHOUT_CLASSIFICATION	6.250698070471787E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999863773918136	WITHOUT_CLASSIFICATION	1.3622608186504044E-5	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999991765358887	WITHOUT_CLASSIFICATION	8.234641113058357E-6	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999683020624978	WITHOUT_CLASSIFICATION	3.169793750217839E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999815197308483	WITHOUT_CLASSIFICATION	1.8480269151759612E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999771919631611	WITHOUT_CLASSIFICATION	2.2808036838845677E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999985435745964	WITHOUT_CLASSIFICATION	1.4564254035908058E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964933852481	WITHOUT_CLASSIFICATION	3.506614751988786E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999636056624707	WITHOUT_CLASSIFICATION	3.639433752942374E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999924357144524	WITHOUT_CLASSIFICATION	7.564285547622609E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999885298710389	WITHOUT_CLASSIFICATION	1.147012896108367E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999989592305927	WITHOUT_CLASSIFICATION	1.0407694073521412E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999735224556046	WITHOUT_CLASSIFICATION	2.6477544395361524E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999873575275587	WITHOUT_CLASSIFICATION	1.2642472441252549E-5	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999111680198236	WITHOUT_CLASSIFICATION	8.883198017638552E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999373346179	WITHOUT_CLASSIFICATION	6.266538209340216E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999927708657739	WITHOUT_CLASSIFICATION	7.229134226226867E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997059361170266	WITHOUT_CLASSIFICATION	2.94063882973446E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999801331479672	WITHOUT_CLASSIFICATION	1.9866852032827904E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999716141984967	WITHOUT_CLASSIFICATION	2.8385801503332894E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999887122260439	WITHOUT_CLASSIFICATION	1.1287773956131133E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999801331479672	WITHOUT_CLASSIFICATION	1.9866852032827904E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998154827316	WITHOUT_CLASSIFICATION	1.8451726829624176E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999681549167618	WITHOUT_CLASSIFICATION	3.184508323820087E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999984707737977	WITHOUT_CLASSIFICATION	1.5292262023017245E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999920926903755	WITHOUT_CLASSIFICATION	7.907309624463325E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999869570157066	WITHOUT_CLASSIFICATION	1.304298429339151E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999869570157066	WITHOUT_CLASSIFICATION	1.304298429339151E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999851167185041	WITHOUT_CLASSIFICATION	1.4883281495957913E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999757115073	WITHOUT_CLASSIFICATION	2.4288492699992145E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999987714314552	WITHOUT_CLASSIFICATION	1.2285685448047426E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999679774514582	WITHOUT_CLASSIFICATION	3.20225485417694E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999994641951125	WITHOUT_CLASSIFICATION	5.358048875038412E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999852494396547	WITHOUT_CLASSIFICATION	1.4750560345220935E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999879989174157	WITHOUT_CLASSIFICATION	1.2001082584338233E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999914933610042	WITHOUT_CLASSIFICATION	8.506638995711888E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999988293500121	WITHOUT_CLASSIFICATION	1.1706499879053384E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999846423573654	WITHOUT_CLASSIFICATION	1.535764263459345E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999735945100382	WITHOUT_CLASSIFICATION	2.6405489961793186E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999735945100382	WITHOUT_CLASSIFICATION	2.6405489961793186E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999868315583974	WITHOUT_CLASSIFICATION	1.316844160268366E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999996160246977	WITHOUT_CLASSIFICATION	3.839753023074831E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999803888556391	WITHOUT_CLASSIFICATION	1.9611144360844048E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999735945100382	WITHOUT_CLASSIFICATION	2.6405489961793186E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999868315583974	WITHOUT_CLASSIFICATION	1.316844160268366E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999868315583974	WITHOUT_CLASSIFICATION	1.316844160268366E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999810778392947	WITHOUT_CLASSIFICATION	1.892216070526779E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999675335410141	WITHOUT_CLASSIFICATION	3.246645898588913E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999869273623141	WITHOUT_CLASSIFICATION	1.307263768585883E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999618905446308	WITHOUT_CLASSIFICATION	3.810945536922158E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999866419974337	WITHOUT_CLASSIFICATION	1.3358002566338165E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999866419974337	WITHOUT_CLASSIFICATION	1.3358002566338165E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999885252007421	WITHOUT_CLASSIFICATION	1.1474799258022151E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999977210581046	WITHOUT_CLASSIFICATION	2.2789418953866335E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999765260331444	WITHOUT_CLASSIFICATION	2.34739668556361E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999933455841906	WITHOUT_CLASSIFICATION	6.654415809409001E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999933455841906	WITHOUT_CLASSIFICATION	6.654415809409001E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999697543260737	WITHOUT_CLASSIFICATION	3.0245673926265626E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999757803672209	WITHOUT_CLASSIFICATION	2.421963277910753E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994609487866791	WITHOUT_CLASSIFICATION	5.390512133208267E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.99998442675206	WITHOUT_CLASSIFICATION	1.55732479399295E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999477624102291	WITHOUT_CLASSIFICATION	5.223758977089433E-4	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999910723899292	WITHOUT_CLASSIFICATION	8.927610070860564E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999560483691713	WITHOUT_CLASSIFICATION	4.395163082863775E-5	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.999925440811309	WITHOUT_CLASSIFICATION	7.455918869096269E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994609487866791	WITHOUT_CLASSIFICATION	5.390512133208267E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999493154627337	WITHOUT_CLASSIFICATION	5.068453726633885E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999914846673207	WITHOUT_CLASSIFICATION	8.51533267931907E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999914846673207	WITHOUT_CLASSIFICATION	8.51533267931907E-6	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999382805423724	WITHOUT_CLASSIFICATION	6.171945762752936E-5	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9997172308994862	WITHOUT_CLASSIFICATION	2.8276910051383455E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999796122941065	WITHOUT_CLASSIFICATION	2.0387705893508647E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99987225832901	WITHOUT_CLASSIFICATION	1.277416709899516E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999735919421815	WITHOUT_CLASSIFICATION	2.6408057818445187E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999353947423646	WITHOUT_CLASSIFICATION	6.460525763535028E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999359900787216	WITHOUT_CLASSIFICATION	6.4009921278466E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999913177030945	WITHOUT_CLASSIFICATION	8.682296905438824E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999960353936351	WITHOUT_CLASSIFICATION	3.964606364897994E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985894006551	WITHOUT_CLASSIFICATION	1.41059934479455E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985894006551	WITHOUT_CLASSIFICATION	1.41059934479455E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.998441032192656	WITHOUT_CLASSIFICATION	0.0015589678073439763	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999987326050491	WITHOUT_CLASSIFICATION	1.267394950911974E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999836378584805	WITHOUT_CLASSIFICATION	1.6362141519482673E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999860500775489	WITHOUT_CLASSIFICATION	1.394992245109669E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999872333657753	WITHOUT_CLASSIFICATION	1.2766634224651729E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999856771824045	WITHOUT_CLASSIFICATION	1.4322817595464012E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999355560719582	WITHOUT_CLASSIFICATION	6.444392804183487E-5	TEST
new	WITHOUT_CLASSIFICATION	0.999981485651177	WITHOUT_CLASSIFICATION	1.8514348822998582E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999872216961716	WITHOUT_CLASSIFICATION	1.2778303828414502E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999770682702879	WITHOUT_CLASSIFICATION	2.2931729712057453E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999856771824045	WITHOUT_CLASSIFICATION	1.4322817595464012E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997661437337434	WITHOUT_CLASSIFICATION	2.3385626625657436E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999868239073746	WITHOUT_CLASSIFICATION	1.317609262533511E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999864462526014	WITHOUT_CLASSIFICATION	1.3553747398677614E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999766426443919	WITHOUT_CLASSIFICATION	2.335735560807858E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999893353563106	WITHOUT_CLASSIFICATION	1.0664643689357499E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999935992116793	WITHOUT_CLASSIFICATION	6.400788320676328E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999859795802148	WITHOUT_CLASSIFICATION	1.4020419785118834E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.999990034358527	WITHOUT_CLASSIFICATION	9.965641473035989E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999801860744018	WITHOUT_CLASSIFICATION	1.981392559829303E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999766941890421	WITHOUT_CLASSIFICATION	2.3305810957885583E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999872017741025	WITHOUT_CLASSIFICATION	1.2798225897622589E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999795211027901	WITHOUT_CLASSIFICATION	2.0478897209912562E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999808331520855	WITHOUT_CLASSIFICATION	1.916684791439685E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999940409279442	WITHOUT_CLASSIFICATION	5.959072055841972E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999862689244867	WITHOUT_CLASSIFICATION	1.373107551326944E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999843625523681	WITHOUT_CLASSIFICATION	1.563744763190017E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999872216961716	WITHOUT_CLASSIFICATION	1.2778303828414502E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999872017741025	WITHOUT_CLASSIFICATION	1.2798225897622589E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999779747209916	WITHOUT_CLASSIFICATION	2.2025279008486575E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999733759889393	WITHOUT_CLASSIFICATION	2.662401106073268E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999463106855824	WITHOUT_CLASSIFICATION	5.368931441755295E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999658779182519	WITHOUT_CLASSIFICATION	3.412208174808406E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999872908251737	WITHOUT_CLASSIFICATION	1.2709174826358161E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999650541570729	WITHOUT_CLASSIFICATION	3.494584292710615E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999873279934831	WITHOUT_CLASSIFICATION	1.267200651681417E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.999668155881347	WITHOUT_CLASSIFICATION	3.3184411865295116E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999320831690434	WITHOUT_CLASSIFICATION	6.791683095660667E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999320831690434	WITHOUT_CLASSIFICATION	6.791683095660667E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998402301038316	WITHOUT_CLASSIFICATION	1.5976989616830524E-4	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999495845485884	WITHOUT_CLASSIFICATION	5.041545141164711E-5	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997834798773306	WITHOUT_CLASSIFICATION	2.1652012266933955E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999957709488415	WITHOUT_CLASSIFICATION	4.229051158493996E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998401384145604	WITHOUT_CLASSIFICATION	1.5986158543966815E-4	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.999842020996832	WITHOUT_CLASSIFICATION	1.579790031681062E-4	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9998741684015053	WITHOUT_CLASSIFICATION	1.2583159849467897E-4	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999673976705608	WITHOUT_CLASSIFICATION	3.2602329439171706E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999977073683166	WITHOUT_CLASSIFICATION	2.2926316832934746E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999977073683166	WITHOUT_CLASSIFICATION	2.2926316832934746E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999947749630189	WITHOUT_CLASSIFICATION	5.225036981152872E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9998308053729728	WITHOUT_CLASSIFICATION	1.6919462702718387E-4	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999947749630189	WITHOUT_CLASSIFICATION	5.225036981152872E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999889017105433	WITHOUT_CLASSIFICATION	1.1098289456663394E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999883912649009	WITHOUT_CLASSIFICATION	1.1608735099188944E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943833136542	WITHOUT_CLASSIFICATION	5.6166863457539185E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999872216961716	WITHOUT_CLASSIFICATION	1.2778303828414502E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999872017741025	WITHOUT_CLASSIFICATION	1.2798225897622589E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999872017741025	WITHOUT_CLASSIFICATION	1.2798225897622589E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999943979649121	WITHOUT_CLASSIFICATION	5.602035087825291E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.999823256904462	WITHOUT_CLASSIFICATION	1.7674309553795468E-4	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999853096156316	WITHOUT_CLASSIFICATION	1.4690384368385098E-4	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999919366336177	WITHOUT_CLASSIFICATION	8.063366382329583E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999919366336177	WITHOUT_CLASSIFICATION	8.063366382329583E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999825614492759	WITHOUT_CLASSIFICATION	1.743855072405529E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999891140430933	WITHOUT_CLASSIFICATION	1.088595690663999E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999775717277174	WITHOUT_CLASSIFICATION	2.242827228261247E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999881053002996	WITHOUT_CLASSIFICATION	1.1894699700452595E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999903325099928	WITHOUT_CLASSIFICATION	9.667490007212268E-6	TEST
short	WITHOUT_CLASSIFICATION	0.9999873012643722	WITHOUT_CLASSIFICATION	1.2698735627695632E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999902370694517	WITHOUT_CLASSIFICATION	9.762930548309309E-6	TEST
float	WITHOUT_CLASSIFICATION	0.999987233443115	WITHOUT_CLASSIFICATION	1.2766556885060524E-5	TEST
float	WITHOUT_CLASSIFICATION	0.999987233443115	WITHOUT_CLASSIFICATION	1.2766556885060524E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999857361334451	WITHOUT_CLASSIFICATION	1.4263866554930496E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999857361334451	WITHOUT_CLASSIFICATION	1.4263866554930496E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999923645062734	WITHOUT_CLASSIFICATION	7.635493726644038E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999923645062734	WITHOUT_CLASSIFICATION	7.635493726644038E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999675975281646	WITHOUT_CLASSIFICATION	3.240247183540474E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999675975281646	WITHOUT_CLASSIFICATION	3.240247183540474E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999919366336177	WITHOUT_CLASSIFICATION	8.063366382329583E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999902370694517	WITHOUT_CLASSIFICATION	9.762930548309309E-6	TEST
float	WITHOUT_CLASSIFICATION	0.999987233443115	WITHOUT_CLASSIFICATION	1.2766556885060524E-5	TEST
float	WITHOUT_CLASSIFICATION	0.999987233443115	WITHOUT_CLASSIFICATION	1.2766556885060524E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999857361334451	WITHOUT_CLASSIFICATION	1.4263866554930496E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999923645062734	WITHOUT_CLASSIFICATION	7.635493726644038E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999923645062734	WITHOUT_CLASSIFICATION	7.635493726644038E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999675975281646	WITHOUT_CLASSIFICATION	3.240247183540474E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.999972747545143	WITHOUT_CLASSIFICATION	2.725245485707106E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999923795438751	WITHOUT_CLASSIFICATION	7.620456124876578E-6	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999912817507086	WITHOUT_CLASSIFICATION	8.71824929131087E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999706417264111	WITHOUT_CLASSIFICATION	2.935827358893459E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999857905201394	WITHOUT_CLASSIFICATION	1.4209479860588706E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999872076416401	WITHOUT_CLASSIFICATION	1.2792358359873425E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999912670862775	WITHOUT_CLASSIFICATION	8.73291372248661E-6	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999927169992406	WITHOUT_CLASSIFICATION	7.2830007592978645E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999380858435557	WITHOUT_CLASSIFICATION	6.19141564442633E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999974825956816	WITHOUT_CLASSIFICATION	2.5174043183973392E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999971338089805	WITHOUT_CLASSIFICATION	2.8661910195055494E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999729251458838	WITHOUT_CLASSIFICATION	2.7074854116264818E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999851167185041	WITHOUT_CLASSIFICATION	1.4883281495957913E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999872076416401	WITHOUT_CLASSIFICATION	1.2792358359873425E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999872076416401	WITHOUT_CLASSIFICATION	1.2792358359873425E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999872076416401	WITHOUT_CLASSIFICATION	1.2792358359873425E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999853789236091	WITHOUT_CLASSIFICATION	1.4621076390897018E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999730732531655	WITHOUT_CLASSIFICATION	2.692674683445768E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999730732531655	WITHOUT_CLASSIFICATION	2.692674683445768E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999807249101412	WITHOUT_CLASSIFICATION	1.9275089858731747E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999923835342593	WITHOUT_CLASSIFICATION	7.6164657406777344E-6	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998260177647854	WITHOUT_CLASSIFICATION	1.739822352145594E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999818489151436	WITHOUT_CLASSIFICATION	1.8151084856275712E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999818489151436	WITHOUT_CLASSIFICATION	1.8151084856275712E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999936518429647	WITHOUT_CLASSIFICATION	6.348157035214885E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999966672934612	WITHOUT_CLASSIFICATION	3.3327065387306113E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999966672934612	WITHOUT_CLASSIFICATION	3.3327065387306113E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999783699250431	WITHOUT_CLASSIFICATION	2.1630074956953535E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999786301343841	WITHOUT_CLASSIFICATION	2.1369865615856037E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999763399374723	WITHOUT_CLASSIFICATION	2.3660062527752955E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9961877923693607	WITHOUT_CLASSIFICATION	0.0038122076306392762	TEST
ID	WITHOUT_CLASSIFICATION	0.9999872918738223	WITHOUT_CLASSIFICATION	1.2708126177617794E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999904292366419	WITHOUT_CLASSIFICATION	9.570763358075315E-6	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999507858623097	WITHOUT_CLASSIFICATION	4.9214137690232215E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.99948500293568	WITHOUT_CLASSIFICATION	5.149970643199499E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9998893535847059	WITHOUT_CLASSIFICATION	1.1064641529417303E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999554248750254	WITHOUT_CLASSIFICATION	4.4575124974638995E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999986583409611	WITHOUT_CLASSIFICATION	1.341659038904925E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999872001358733	WITHOUT_CLASSIFICATION	1.2799864126613312E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999846813929345	WITHOUT_CLASSIFICATION	1.531860706555233E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999846550554786	WITHOUT_CLASSIFICATION	1.534494452141556E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872207549979	WITHOUT_CLASSIFICATION	1.277924500204068E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999763399374723	WITHOUT_CLASSIFICATION	2.3660062527752955E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999899002356109	WITHOUT_CLASSIFICATION	1.0099764389089219E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.999985550346548	WITHOUT_CLASSIFICATION	1.4449653451876519E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999872233870449	WITHOUT_CLASSIFICATION	1.2776612955060963E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872207549979	WITHOUT_CLASSIFICATION	1.277924500204068E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999899002356109	WITHOUT_CLASSIFICATION	1.0099764389089219E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999872233870449	WITHOUT_CLASSIFICATION	1.2776612955060963E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999386778542106	WITHOUT_CLASSIFICATION	6.132214578927455E-5	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999386778542106	WITHOUT_CLASSIFICATION	6.132214578927455E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872028948559	WITHOUT_CLASSIFICATION	1.2797105144189618E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999874173830733	WITHOUT_CLASSIFICATION	1.2582616926668282E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999859051691816	WITHOUT_CLASSIFICATION	1.4094830818454543E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996889993419903	WITHOUT_CLASSIFICATION	3.110006580096472E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999449671852257	WITHOUT_CLASSIFICATION	5.503281477420387E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999768198665873	WITHOUT_CLASSIFICATION	2.318013341279273E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999712390879472	WITHOUT_CLASSIFICATION	2.8760912052854497E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999956900544738	WITHOUT_CLASSIFICATION	4.309945526214467E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999950124936624	WITHOUT_CLASSIFICATION	4.9875063375019675E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999712390879472	WITHOUT_CLASSIFICATION	2.8760912052854497E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999872041810844	WITHOUT_CLASSIFICATION	1.2795818915509826E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999908548445976	WITHOUT_CLASSIFICATION	9.145155402465552E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999872013121418	WITHOUT_CLASSIFICATION	1.2798687858122761E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872207549979	WITHOUT_CLASSIFICATION	1.277924500204068E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999791070228277	WITHOUT_CLASSIFICATION	2.0892977172362204E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999933535210406	WITHOUT_CLASSIFICATION	6.6464789595013624E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996981465936906	WITHOUT_CLASSIFICATION	3.0185340630941063E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999902862473415	WITHOUT_CLASSIFICATION	9.713752658433586E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999575391497872	WITHOUT_CLASSIFICATION	4.246085021267456E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999981833467265	WITHOUT_CLASSIFICATION	1.816653273549177E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999023900925844	WITHOUT_CLASSIFICATION	9.760990741557788E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999943941718599	WITHOUT_CLASSIFICATION	5.605828140102413E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999872555582797	WITHOUT_CLASSIFICATION	1.2744441720365169E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999847617527196	WITHOUT_CLASSIFICATION	1.52382472803979E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999594116273804	WITHOUT_CLASSIFICATION	4.058837261955964E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999554248750254	WITHOUT_CLASSIFICATION	4.4575124974638995E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999859357773735	WITHOUT_CLASSIFICATION	1.4064222626471045E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997316568484138	WITHOUT_CLASSIFICATION	2.6834315158619687E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999730041345429	WITHOUT_CLASSIFICATION	2.6995865457074077E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999909468829866	WITHOUT_CLASSIFICATION	9.053117013412951E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999909786189625	WITHOUT_CLASSIFICATION	9.02138103750707E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999975869118104	WITHOUT_CLASSIFICATION	2.4130881895990995E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999775815342337	WITHOUT_CLASSIFICATION	2.241846576630342E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999705043091982	WITHOUT_CLASSIFICATION	2.9495690801722796E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999782858441514	WITHOUT_CLASSIFICATION	2.1714155848648232E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999850421734707	WITHOUT_CLASSIFICATION	1.4957826529156648E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999920858761921	WITHOUT_CLASSIFICATION	7.914123807912314E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999920858761921	WITHOUT_CLASSIFICATION	7.914123807912314E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999629355003475	WITHOUT_CLASSIFICATION	3.706449965245978E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999759941011609	WITHOUT_CLASSIFICATION	2.400589883912338E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.999994372473082	WITHOUT_CLASSIFICATION	5.627526918087836E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999629373000527	WITHOUT_CLASSIFICATION	3.706269994727472E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999629580077102	WITHOUT_CLASSIFICATION	3.704199228979431E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999647800375614	WITHOUT_CLASSIFICATION	3.521996243860583E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999977659163631	WITHOUT_CLASSIFICATION	2.2340836369000156E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9994632872583399	WITHOUT_CLASSIFICATION	5.367127416601045E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999458114434395	WITHOUT_CLASSIFICATION	5.4188556560418795E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999991050651314	WITHOUT_CLASSIFICATION	8.949348686040658E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999847421129634	WITHOUT_CLASSIFICATION	1.5257887036450665E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999897148255401	WITHOUT_CLASSIFICATION	1.0285174459809796E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999818121411944	WITHOUT_CLASSIFICATION	1.818785880549159E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999974683785563	WITHOUT_CLASSIFICATION	2.5316214436965617E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999769595209588	WITHOUT_CLASSIFICATION	2.304047904128492E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999947091343749	WITHOUT_CLASSIFICATION	5.290865625032922E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761619336748	WITHOUT_CLASSIFICATION	2.383806632511316E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999931667606756	WITHOUT_CLASSIFICATION	6.8332393244619565E-6	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745785815707	WITHOUT_CLASSIFICATION	2.5421418429333506E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999926677083388	WITHOUT_CLASSIFICATION	7.332291661212614E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999977108178127	WITHOUT_CLASSIFICATION	2.289182187247287E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999036233115517	WITHOUT_CLASSIFICATION	9.637668844832369E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999947091343749	WITHOUT_CLASSIFICATION	5.290865625032922E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999665715584037	WITHOUT_CLASSIFICATION	3.3428441596215194E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999822329721914	WITHOUT_CLASSIFICATION	1.7767027808712816E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999822301188793	WITHOUT_CLASSIFICATION	1.7769881120700906E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999317376775841	WITHOUT_CLASSIFICATION	6.826232241586318E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999683516909643	WITHOUT_CLASSIFICATION	3.164830903565863E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999931667606756	WITHOUT_CLASSIFICATION	6.8332393244619565E-6	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999870582901456	WITHOUT_CLASSIFICATION	1.2941709854455448E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999879742801037	WITHOUT_CLASSIFICATION	1.2025719896290001E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999877278825362	WITHOUT_CLASSIFICATION	1.2272117463859403E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999895186473817	WITHOUT_CLASSIFICATION	1.048135261833237E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999895186473817	WITHOUT_CLASSIFICATION	1.048135261833237E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999773288044995	WITHOUT_CLASSIFICATION	2.26711955005544E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999846548413738	WITHOUT_CLASSIFICATION	1.534515862617779E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999846548413738	WITHOUT_CLASSIFICATION	1.534515862617779E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999782858441514	WITHOUT_CLASSIFICATION	2.1714155848648232E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999969682422195	WITHOUT_CLASSIFICATION	3.031757780508207E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998912769662308	WITHOUT_CLASSIFICATION	1.0872303376916254E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999934822545069	WITHOUT_CLASSIFICATION	6.517745493162084E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998912769662308	WITHOUT_CLASSIFICATION	1.0872303376916254E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999934822545069	WITHOUT_CLASSIFICATION	6.517745493162084E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998785016418481	WITHOUT_CLASSIFICATION	1.2149835815195445E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999890586820982	WITHOUT_CLASSIFICATION	1.094131790172973E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999997571532509	WITHOUT_CLASSIFICATION	2.4284674909033405E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999882244684297	WITHOUT_CLASSIFICATION	1.1775531570311706E-5	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999961283215398	WITHOUT_CLASSIFICATION	3.8716784602018155E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997452519008717	WITHOUT_CLASSIFICATION	2.547480991282396E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998505898663814	WITHOUT_CLASSIFICATION	1.4941013361846546E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998505898663814	WITHOUT_CLASSIFICATION	1.4941013361846546E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999775056488657	WITHOUT_CLASSIFICATION	2.2494351134291238E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999838151608418	WITHOUT_CLASSIFICATION	1.6184839158177915E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999867481263648	WITHOUT_CLASSIFICATION	1.3251873635254203E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999976497611784	WITHOUT_CLASSIFICATION	2.350238821650424E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.999983680882187	WITHOUT_CLASSIFICATION	1.631911781295606E-5	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999986100141918	WITHOUT_CLASSIFICATION	1.389985808189306E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999986100141918	WITHOUT_CLASSIFICATION	1.389985808189306E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999360214750895	WITHOUT_CLASSIFICATION	6.397852491043566E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999360214750895	WITHOUT_CLASSIFICATION	6.397852491043566E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999972336017198	WITHOUT_CLASSIFICATION	2.7663982802315072E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998785016418481	WITHOUT_CLASSIFICATION	1.2149835815195445E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999820433997536	WITHOUT_CLASSIFICATION	1.7956600246476332E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999182913401872	WITHOUT_CLASSIFICATION	8.170865981276058E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998205336341123	WITHOUT_CLASSIFICATION	1.7946636588767116E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999745931425581	WITHOUT_CLASSIFICATION	2.540685744194634E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993896149167549	WITHOUT_CLASSIFICATION	6.103850832451192E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998785016418481	WITHOUT_CLASSIFICATION	1.2149835815195445E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999745931425581	WITHOUT_CLASSIFICATION	2.540685744194634E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993896149167549	WITHOUT_CLASSIFICATION	6.103850832451192E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999621110422016	WITHOUT_CLASSIFICATION	3.7888957798313386E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999849422664651	WITHOUT_CLASSIFICATION	1.5057733534979965E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999899041813043	WITHOUT_CLASSIFICATION	1.0095818695612711E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998785016418481	WITHOUT_CLASSIFICATION	1.2149835815195445E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998785016418481	WITHOUT_CLASSIFICATION	1.2149835815195445E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999915659592652	WITHOUT_CLASSIFICATION	8.434040734861774E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999896644192341	WITHOUT_CLASSIFICATION	1.0335580765964652E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999954800703461	WITHOUT_CLASSIFICATION	4.519929653938945E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999752508159399	WITHOUT_CLASSIFICATION	2.4749184060172858E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999950388954795	WITHOUT_CLASSIFICATION	4.961104520527196E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999975775444544	WITHOUT_CLASSIFICATION	2.422455545643072E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997421291953562	WITHOUT_CLASSIFICATION	2.578708046437607E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999850966132151	WITHOUT_CLASSIFICATION	1.4903386784855252E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999905687108488	WITHOUT_CLASSIFICATION	9.431289151239446E-6	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999457297660705	WITHOUT_CLASSIFICATION	5.427023392945532E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999871202962073	WITHOUT_CLASSIFICATION	1.2879703792724825E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999869138782593	WITHOUT_CLASSIFICATION	1.3086121740716064E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999708191863705	WITHOUT_CLASSIFICATION	2.9180813629459886E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999605588389953	WITHOUT_CLASSIFICATION	3.944116100475814E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671450993551	WITHOUT_CLASSIFICATION	3.2854900644837214E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997697215204386	WITHOUT_CLASSIFICATION	2.302784795613259E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999752508159399	WITHOUT_CLASSIFICATION	2.4749184060172858E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999719072197145	WITHOUT_CLASSIFICATION	2.80927802855058E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999761651182024	WITHOUT_CLASSIFICATION	2.383488179756321E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999883184422586	WITHOUT_CLASSIFICATION	1.1681557741502614E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999292020603403	WITHOUT_CLASSIFICATION	7.07979396597199E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999846582040788	WITHOUT_CLASSIFICATION	1.5341795921180137E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999846582040788	WITHOUT_CLASSIFICATION	1.5341795921180137E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999752508159399	WITHOUT_CLASSIFICATION	2.4749184060172858E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999813645633113	WITHOUT_CLASSIFICATION	1.8635436688679124E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996072534127457	WITHOUT_CLASSIFICATION	3.927465872543474E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9994491531325269	WITHOUT_CLASSIFICATION	5.508468674730348E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999862018598131	WITHOUT_CLASSIFICATION	1.379814018697123E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999872095661566	WITHOUT_CLASSIFICATION	1.2790433843473273E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999944023120313	WITHOUT_CLASSIFICATION	5.597687968697236E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999660936868516	WITHOUT_CLASSIFICATION	3.3906313148406786E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999988075464449	WITHOUT_CLASSIFICATION	1.19245355520929E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999781855983456	WITHOUT_CLASSIFICATION	2.181440165434772E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999069695734872	WITHOUT_CLASSIFICATION	9.303042651280033E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999720246626206	WITHOUT_CLASSIFICATION	2.7975337379359536E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999657007285717	WITHOUT_CLASSIFICATION	3.4299271428362504E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999958561880976	WITHOUT_CLASSIFICATION	4.1438119024034335E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876224680645	WITHOUT_CLASSIFICATION	1.2377531935513478E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999683891466196	WITHOUT_CLASSIFICATION	3.161085338052584E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999944969520822	WITHOUT_CLASSIFICATION	5.503047917870289E-6	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999944819965646	WITHOUT_CLASSIFICATION	5.518003435351499E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988044595124	WITHOUT_CLASSIFICATION	1.195540487594374E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999633375450134	WITHOUT_CLASSIFICATION	3.66624549866903E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999743764420336	WITHOUT_CLASSIFICATION	2.5623557966456067E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999997840010822	WITHOUT_CLASSIFICATION	2.1599891779404493E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851373428646	WITHOUT_CLASSIFICATION	1.4862657135417375E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849977226822	WITHOUT_CLASSIFICATION	1.5002277317723531E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761246666063	WITHOUT_CLASSIFICATION	2.3875333393611415E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673500226309	WITHOUT_CLASSIFICATION	3.264997736907348E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999862913710745	WITHOUT_CLASSIFICATION	1.3708628925320314E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999829818070249	WITHOUT_CLASSIFICATION	1.7018192975132736E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977291907781	WITHOUT_CLASSIFICATION	2.2708092219027336E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795166177472	WITHOUT_CLASSIFICATION	2.0483382252800654E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999764822615528	WITHOUT_CLASSIFICATION	2.3517738447221078E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845935818386	WITHOUT_CLASSIFICATION	1.540641816146767E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751952510373	WITHOUT_CLASSIFICATION	2.4804748962660677E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752325311114	WITHOUT_CLASSIFICATION	2.4767468888570856E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999726255816497	WITHOUT_CLASSIFICATION	2.737441835025615E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665146527232	WITHOUT_CLASSIFICATION	3.3485347276793214E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999888748344236	WITHOUT_CLASSIFICATION	1.112516557647E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940287835243	WITHOUT_CLASSIFICATION	5.971216475689186E-6	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999991716348708	WITHOUT_CLASSIFICATION	8.283651292272466E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998172430227181	WITHOUT_CLASSIFICATION	1.827569772818368E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999860638124931	WITHOUT_CLASSIFICATION	1.39361875069276E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999817135627637	WITHOUT_CLASSIFICATION	1.8286437236279345E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999950812245928	WITHOUT_CLASSIFICATION	4.918775407217817E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999629490037896	WITHOUT_CLASSIFICATION	3.7050996210396266E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998018169894276	WITHOUT_CLASSIFICATION	1.9818301057247312E-4	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999873063907125	WITHOUT_CLASSIFICATION	1.2693609287520683E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999959856288829	WITHOUT_CLASSIFICATION	4.014371117029174E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999911872410069	WITHOUT_CLASSIFICATION	8.812758993005135E-6	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999744319810954	WITHOUT_CLASSIFICATION	2.556801890458588E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999986619058387	WITHOUT_CLASSIFICATION	1.3380941612914152E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716712401284	WITHOUT_CLASSIFICATION	2.8328759871573376E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736876910007	WITHOUT_CLASSIFICATION	2.6312308999337055E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932486330164	WITHOUT_CLASSIFICATION	6.751366983648436E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717097698525	WITHOUT_CLASSIFICATION	2.829023014749011E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998686531831207	WITHOUT_CLASSIFICATION	1.313468168792527E-4	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999698222059865	WITHOUT_CLASSIFICATION	3.0177794013604594E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999785244552492	WITHOUT_CLASSIFICATION	2.1475544750906964E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999827681604484	WITHOUT_CLASSIFICATION	1.7231839551580462E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651704724378	WITHOUT_CLASSIFICATION	3.482952756211752E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999645544971568	WITHOUT_CLASSIFICATION	3.544550284309099E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999759465500795	WITHOUT_CLASSIFICATION	2.4053449920512262E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999750698988213	WITHOUT_CLASSIFICATION	2.493010117868249E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999904923699503	WITHOUT_CLASSIFICATION	9.507630049668654E-6	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999603053209831	WITHOUT_CLASSIFICATION	3.969467901677795E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999700706678746	WITHOUT_CLASSIFICATION	2.9929332125414286E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999128370592465	WITHOUT_CLASSIFICATION	8.71629407534345E-5	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999857886004448	WITHOUT_CLASSIFICATION	1.4211399555128063E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998172430227181	WITHOUT_CLASSIFICATION	1.827569772818368E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999932664407187	WITHOUT_CLASSIFICATION	6.733559281197063E-6	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999821632980225	WITHOUT_CLASSIFICATION	1.7836701977500677E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999981154905234	WITHOUT_CLASSIFICATION	1.8845094766047765E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940287835243	WITHOUT_CLASSIFICATION	5.971216475689186E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999881255679155	WITHOUT_CLASSIFICATION	1.1874432084461447E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998686531831207	WITHOUT_CLASSIFICATION	1.313468168792527E-4	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999641677873721	WITHOUT_CLASSIFICATION	3.583221262796526E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999717859897801	WITHOUT_CLASSIFICATION	2.8214010219881132E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999409681039049	WITHOUT_CLASSIFICATION	5.903189609511457E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999666032536496	WITHOUT_CLASSIFICATION	3.339674635038667E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999681981630751	WITHOUT_CLASSIFICATION	3.1801836924786204E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999689188865769	WITHOUT_CLASSIFICATION	3.1081113423187525E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999717889291819	WITHOUT_CLASSIFICATION	2.821107081797669E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999880962873409	WITHOUT_CLASSIFICATION	1.1903712659080069E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995187361575398	WITHOUT_CLASSIFICATION	4.812638424602369E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999738287667383	WITHOUT_CLASSIFICATION	2.6171233261629268E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999582389111353	WITHOUT_CLASSIFICATION	4.1761088864642094E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940287835243	WITHOUT_CLASSIFICATION	5.971216475689186E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999809689574802	WITHOUT_CLASSIFICATION	1.9031042519857923E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999480202018521	WITHOUT_CLASSIFICATION	5.197979814774561E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999857501409125	WITHOUT_CLASSIFICATION	1.4249859087542068E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999880159169685	WITHOUT_CLASSIFICATION	1.1984083031597688E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999900938768291	WITHOUT_CLASSIFICATION	9.906123170870902E-6	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999840428919751	WITHOUT_CLASSIFICATION	1.595710802488826E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999467649856778	WITHOUT_CLASSIFICATION	5.32350143222586E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999896649757268	WITHOUT_CLASSIFICATION	1.0335024273185225E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999942148342629	WITHOUT_CLASSIFICATION	5.78516573705446E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999603573167625	WITHOUT_CLASSIFICATION	3.964268323744808E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999861468504065	WITHOUT_CLASSIFICATION	1.3853149593495898E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999934623892411	WITHOUT_CLASSIFICATION	6.537610758892765E-6	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999934623892411	WITHOUT_CLASSIFICATION	6.537610758892765E-6	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940287835243	WITHOUT_CLASSIFICATION	5.971216475689186E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998172430227181	WITHOUT_CLASSIFICATION	1.827569772818368E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999919735644229	WITHOUT_CLASSIFICATION	8.026435577109997E-5	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999965014147851	WITHOUT_CLASSIFICATION	3.498585214743549E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991187929436656	WITHOUT_CLASSIFICATION	8.812070563343315E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999679732603806	WITHOUT_CLASSIFICATION	3.2026739619381665E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999679878658865	WITHOUT_CLASSIFICATION	3.201213411355799E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999679878658865	WITHOUT_CLASSIFICATION	3.201213411355799E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998172430227181	WITHOUT_CLASSIFICATION	1.827569772818368E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999847814289635	WITHOUT_CLASSIFICATION	1.5218571036437204E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999880159169685	WITHOUT_CLASSIFICATION	1.1984083031597688E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999816247901882	WITHOUT_CLASSIFICATION	1.8375209811880675E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999857501409125	WITHOUT_CLASSIFICATION	1.4249859087542068E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999651349347212	WITHOUT_CLASSIFICATION	3.48650652788176E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9988503450478513	WITHOUT_CLASSIFICATION	0.0011496549521487133	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999309656682407	WITHOUT_CLASSIFICATION	6.903433175924666E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999409681039049	WITHOUT_CLASSIFICATION	5.903189609511457E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999666032536496	WITHOUT_CLASSIFICATION	3.339674635038667E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999681981630751	WITHOUT_CLASSIFICATION	3.1801836924786204E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999865191030863	WITHOUT_CLASSIFICATION	1.3480896913658628E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999814675486183	WITHOUT_CLASSIFICATION	1.85324513816539E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999711857187208	WITHOUT_CLASSIFICATION	2.88142812791545E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999857501409125	WITHOUT_CLASSIFICATION	1.4249859087542068E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999651349347212	WITHOUT_CLASSIFICATION	3.48650652788176E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998172430227181	WITHOUT_CLASSIFICATION	1.827569772818368E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999689188865769	WITHOUT_CLASSIFICATION	3.1081113423187525E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999717889291819	WITHOUT_CLASSIFICATION	2.821107081797669E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999880962873409	WITHOUT_CLASSIFICATION	1.1903712659080069E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959587752378	WITHOUT_CLASSIFICATION	4.041224762234627E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961296725727	WITHOUT_CLASSIFICATION	3.870327427253541E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999767590177702	WITHOUT_CLASSIFICATION	2.324098222987344E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999981553402136	WITHOUT_CLASSIFICATION	1.8446597864078285E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999658171976813	WITHOUT_CLASSIFICATION	3.418280231872219E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999447902944355	WITHOUT_CLASSIFICATION	5.520970556440205E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999879828815548	WITHOUT_CLASSIFICATION	1.2017118445194081E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999468673611766	WITHOUT_CLASSIFICATION	5.3132638823523064E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999969176415736	WITHOUT_CLASSIFICATION	3.082358426401173E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795166177472	WITHOUT_CLASSIFICATION	2.0483382252800654E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999793998809664	WITHOUT_CLASSIFICATION	2.060011903364461E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999707552241432	WITHOUT_CLASSIFICATION	2.924477585671425E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758672858047	WITHOUT_CLASSIFICATION	2.4132714195323214E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999845220786628	WITHOUT_CLASSIFICATION	1.5477921337163708E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999872024153174	WITHOUT_CLASSIFICATION	1.2797584682592843E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999764822615528	WITHOUT_CLASSIFICATION	2.3517738447221078E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751921361751	WITHOUT_CLASSIFICATION	2.4807863824871982E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999904923699503	WITHOUT_CLASSIFICATION	9.507630049668654E-6	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999666137467684	WITHOUT_CLASSIFICATION	3.338625323151459E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999912181920677	WITHOUT_CLASSIFICATION	8.781807932367351E-6	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999853406371589	WITHOUT_CLASSIFICATION	1.4659362841130413E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995541334265212	WITHOUT_CLASSIFICATION	4.4586657347882324E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999967032642787	WITHOUT_CLASSIFICATION	3.296735721229379E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999386778542106	WITHOUT_CLASSIFICATION	6.132214578927455E-5	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999990811741111	WITHOUT_CLASSIFICATION	9.188258888974256E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999988075464449	WITHOUT_CLASSIFICATION	1.19245355520929E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999970350190108	WITHOUT_CLASSIFICATION	2.964980989187339E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999805215303695	WITHOUT_CLASSIFICATION	1.9478469630487797E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999845317160481	WITHOUT_CLASSIFICATION	1.5468283952000132E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999826118317522	WITHOUT_CLASSIFICATION	1.7388168247775622E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999930522719283	WITHOUT_CLASSIFICATION	6.9477280717907335E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999920708283665	WITHOUT_CLASSIFICATION	7.929171633561564E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980225763979	WITHOUT_CLASSIFICATION	1.9774236020909052E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804474177997	WITHOUT_CLASSIFICATION	1.9552582200272786E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999533741724541	WITHOUT_CLASSIFICATION	4.662582754587609E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999586186131731	WITHOUT_CLASSIFICATION	4.1381386826733164E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999896565058284	WITHOUT_CLASSIFICATION	1.0343494171664846E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999416354477956	WITHOUT_CLASSIFICATION	5.836455220445468E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999413600807924	WITHOUT_CLASSIFICATION	5.863991920761399E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999746148029484	WITHOUT_CLASSIFICATION	2.5385197051540946E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999869961499275	WITHOUT_CLASSIFICATION	1.3003850072515098E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999535182118547	WITHOUT_CLASSIFICATION	4.6481788145218086E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999611986892041	WITHOUT_CLASSIFICATION	3.8801310795972905E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999746148029484	WITHOUT_CLASSIFICATION	2.5385197051540946E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999961501872578	WITHOUT_CLASSIFICATION	3.849812742225913E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999476274092457	WITHOUT_CLASSIFICATION	5.2372590754338066E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976834006634	WITHOUT_CLASSIFICATION	2.3165993366078962E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999932230578644	WITHOUT_CLASSIFICATION	6.7769421355245086E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999986555281709	WITHOUT_CLASSIFICATION	1.344471829065914E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999666833200915	WITHOUT_CLASSIFICATION	3.331667990853968E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999901151902617	WITHOUT_CLASSIFICATION	9.884809738312586E-6	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.999965038993325	WITHOUT_CLASSIFICATION	3.4961006675079996E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.999965038993325	WITHOUT_CLASSIFICATION	3.4961006675079996E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999992800629646	WITHOUT_CLASSIFICATION	7.199370353898066E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999943689177615	WITHOUT_CLASSIFICATION	5.631082238536159E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999948655533129	WITHOUT_CLASSIFICATION	5.134446687205725E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999908670627708	WITHOUT_CLASSIFICATION	9.132937229129292E-6	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999981820787113	WITHOUT_CLASSIFICATION	1.8179212887399603E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999466483855273	WITHOUT_CLASSIFICATION	5.33516144727904E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999294824808951	WITHOUT_CLASSIFICATION	7.051751910494316E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999832771740047	WITHOUT_CLASSIFICATION	1.6722825995243645E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997964808565327	WITHOUT_CLASSIFICATION	2.035191434673262E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999974792019268	WITHOUT_CLASSIFICATION	2.520798073102349E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999275397179227	WITHOUT_CLASSIFICATION	7.24602820773218E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999169268406825	WITHOUT_CLASSIFICATION	8.307315931752548E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998786133922145	WITHOUT_CLASSIFICATION	1.2138660778546507E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999774623036687	WITHOUT_CLASSIFICATION	2.2537696331369492E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999933409370656	WITHOUT_CLASSIFICATION	6.6590629343192805E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999524631132332	WITHOUT_CLASSIFICATION	4.75368867668857E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999933252641142	WITHOUT_CLASSIFICATION	6.674735885735276E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999808440629663	WITHOUT_CLASSIFICATION	1.9155937033661498E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999678461994613	WITHOUT_CLASSIFICATION	3.215380053863298E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999480664920334	WITHOUT_CLASSIFICATION	5.193350796653947E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999877069861313	WITHOUT_CLASSIFICATION	1.229301386867059E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999333993796526	WITHOUT_CLASSIFICATION	6.660062034740302E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999821623885999	WITHOUT_CLASSIFICATION	1.7837611400064673E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999988806809823	WITHOUT_CLASSIFICATION	1.1193190176987932E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999745793144754	WITHOUT_CLASSIFICATION	2.5420685524666686E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999875172778973	WITHOUT_CLASSIFICATION	1.2482722102791438E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999975103099945	WITHOUT_CLASSIFICATION	2.4896900054853093E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999968842003507	WITHOUT_CLASSIFICATION	3.1157996493113843E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999488925277557	WITHOUT_CLASSIFICATION	5.11074722443066E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999847501668306	WITHOUT_CLASSIFICATION	1.524983316932162E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999693083086506	WITHOUT_CLASSIFICATION	3.069169134948884E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999928522980553	WITHOUT_CLASSIFICATION	7.147701944673142E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999898257273697	WITHOUT_CLASSIFICATION	1.0174272630246003E-5	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999923955598885	WITHOUT_CLASSIFICATION	7.60444011139548E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999841924036692	WITHOUT_CLASSIFICATION	1.5807596330755016E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999848764790685	WITHOUT_CLASSIFICATION	1.5123520931491656E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997772570197969	WITHOUT_CLASSIFICATION	2.2274298020308537E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999686623257666	WITHOUT_CLASSIFICATION	3.1337674233320476E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999990533234617	WITHOUT_CLASSIFICATION	9.466765383015859E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999914164166236	WITHOUT_CLASSIFICATION	8.583583376361108E-6	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999810500397215	WITHOUT_CLASSIFICATION	1.894996027846197E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999582389111353	WITHOUT_CLASSIFICATION	4.1761088864642094E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999582389111353	WITHOUT_CLASSIFICATION	4.1761088864642094E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999553305904805	WITHOUT_CLASSIFICATION	4.4669409519535235E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999853365043677	WITHOUT_CLASSIFICATION	1.4663495632267737E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999665609646271	WITHOUT_CLASSIFICATION	3.343903537298502E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999857561251891	WITHOUT_CLASSIFICATION	1.4243874810778809E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999894642496218	WITHOUT_CLASSIFICATION	1.0535750378181185E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999879513491824	WITHOUT_CLASSIFICATION	1.2048650817689036E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.99998528853835	WITHOUT_CLASSIFICATION	1.471146165010743E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999458560903093	WITHOUT_CLASSIFICATION	5.4143909690746274E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999906448837765	WITHOUT_CLASSIFICATION	9.355116223482796E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999844538495722	WITHOUT_CLASSIFICATION	1.5546150427756453E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999503048562165	WITHOUT_CLASSIFICATION	4.9695143783540966E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999098204707862	WITHOUT_CLASSIFICATION	9.017952921377249E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999966475921073	WITHOUT_CLASSIFICATION	3.35240789269581E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999857042282926	WITHOUT_CLASSIFICATION	1.4295771707390235E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999697064509375	WITHOUT_CLASSIFICATION	3.0293549062418256E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999958895131537	WITHOUT_CLASSIFICATION	4.1104868462371445E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999977653031314	WITHOUT_CLASSIFICATION	2.2346968686200832E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999999871453917	WITHOUT_CLASSIFICATION	1.2854608301875953E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957865343824	WITHOUT_CLASSIFICATION	4.21346561754767E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999455055542347	WITHOUT_CLASSIFICATION	5.449444576535289E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999002714871342	WITHOUT_CLASSIFICATION	9.972851286575313E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957865343824	WITHOUT_CLASSIFICATION	4.21346561754767E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999527238503961	WITHOUT_CLASSIFICATION	4.727614960397755E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999941219811195	WITHOUT_CLASSIFICATION	5.8780188805979224E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999525704895877	WITHOUT_CLASSIFICATION	4.742951041221069E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999122860282572	WITHOUT_CLASSIFICATION	8.77139717427283E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999848218831852	WITHOUT_CLASSIFICATION	1.517811681484001E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999932591109411	WITHOUT_CLASSIFICATION	6.740889058913817E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999665120950262	WITHOUT_CLASSIFICATION	3.348790497380246E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999763159285189	WITHOUT_CLASSIFICATION	2.3684071481195717E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999921679719571	WITHOUT_CLASSIFICATION	7.832028042967344E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999668797092454	WITHOUT_CLASSIFICATION	3.3120290754538496E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999941418075504	WITHOUT_CLASSIFICATION	5.858192449462065E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999870591000561	WITHOUT_CLASSIFICATION	1.294089994390672E-4	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999933969125335	WITHOUT_CLASSIFICATION	6.603087466476733E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999937289899226	WITHOUT_CLASSIFICATION	6.271010077481522E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999851793991719	WITHOUT_CLASSIFICATION	1.4820600828142203E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9994890474702024	WITHOUT_CLASSIFICATION	5.109525297976114E-4	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999899180025976	WITHOUT_CLASSIFICATION	1.0081997402293915E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999848345835303	WITHOUT_CLASSIFICATION	1.516541646966118E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999633237356045	WITHOUT_CLASSIFICATION	3.667626439558006E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999192494630155	WITHOUT_CLASSIFICATION	8.075053698449012E-5	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997379030507694	WITHOUT_CLASSIFICATION	2.620969492306682E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999837879579847	WITHOUT_CLASSIFICATION	1.6212042015292216E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999990328046573	WITHOUT_CLASSIFICATION	9.671953428014633E-7	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999874359172338	WITHOUT_CLASSIFICATION	1.2564082766200256E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998724618364628	WITHOUT_CLASSIFICATION	1.2753816353704462E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999918962135826	WITHOUT_CLASSIFICATION	8.10378641743505E-6	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999986157377919	WITHOUT_CLASSIFICATION	1.3842622080609963E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999915611847177	WITHOUT_CLASSIFICATION	8.438815282304481E-6	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999876846682755	WITHOUT_CLASSIFICATION	1.2315331724439562E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999989486450157	WITHOUT_CLASSIFICATION	1.0513549843213992E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999920708283665	WITHOUT_CLASSIFICATION	7.929171633561564E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999540057841318	WITHOUT_CLASSIFICATION	4.599421586812668E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999979987528692	WITHOUT_CLASSIFICATION	2.0012471308865336E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999947241353871	WITHOUT_CLASSIFICATION	5.275864612766704E-6	TEST
do the test	WITHOUT_CLASSIFICATION	0.9994715569901709	WITHOUT_CLASSIFICATION	5.284430098291451E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999005301822852	WITHOUT_CLASSIFICATION	9.94698177148742E-5	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999795356534997	WITHOUT_CLASSIFICATION	2.0464346500266985E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999312749179703	WITHOUT_CLASSIFICATION	6.872508202971363E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999909767712052	WITHOUT_CLASSIFICATION	9.0232287948174E-6	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999992128209144	WITHOUT_CLASSIFICATION	7.871790855976291E-6	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999921298935911	WITHOUT_CLASSIFICATION	7.870106408846108E-6	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999854506585403	WITHOUT_CLASSIFICATION	1.4549341459701128E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999893806161118	WITHOUT_CLASSIFICATION	1.0619383888256925E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9899833857754746	WITHOUT_CLASSIFICATION	0.010016614224525317	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999921677947272	WITHOUT_CLASSIFICATION	7.832205272836202E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999887478070963	WITHOUT_CLASSIFICATION	1.125219290367232E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.99999462927117	WITHOUT_CLASSIFICATION	5.3707288299805E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999929256221755	WITHOUT_CLASSIFICATION	7.074377824548762E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999992234427002	WITHOUT_CLASSIFICATION	7.765572997999053E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999912827953983	WITHOUT_CLASSIFICATION	8.717204601679677E-6	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999893072615281	WITHOUT_CLASSIFICATION	1.0692738471933376E-5	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999920451510883	WITHOUT_CLASSIFICATION	7.954848911737233E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999995569330246	WITHOUT_CLASSIFICATION	4.430669753902796E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999730725054663	WITHOUT_CLASSIFICATION	2.6927494533696903E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998748474540745	WITHOUT_CLASSIFICATION	1.2515254592553016E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9999950879902272	WITHOUT_CLASSIFICATION	4.912009772849873E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999992582959011	WITHOUT_CLASSIFICATION	7.417040989152213E-6	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999992451181707	WITHOUT_CLASSIFICATION	7.548818293299422E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999245781684644	WITHOUT_CLASSIFICATION	7.542183153565946E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9997928960423895	WITHOUT_CLASSIFICATION	2.071039576104394E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702104715469	WITHOUT_CLASSIFICATION	2.9789528453195644E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999460285049834	WITHOUT_CLASSIFICATION	5.397149501666607E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729234544281	WITHOUT_CLASSIFICATION	2.707654557184741E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999882037473009	WITHOUT_CLASSIFICATION	1.1796252699165079E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999811700697417	WITHOUT_CLASSIFICATION	1.882993025822118E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999945525878563	WITHOUT_CLASSIFICATION	5.447412143807012E-6	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999977159435922	WITHOUT_CLASSIFICATION	2.284056407751995E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999830786444828	WITHOUT_CLASSIFICATION	1.6921355517134997E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99997000119348	WITHOUT_CLASSIFICATION	2.999880651995807E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999830786444828	WITHOUT_CLASSIFICATION	1.6921355517134997E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998825169113694	WITHOUT_CLASSIFICATION	1.1748308863060459E-4	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999869310476156	WITHOUT_CLASSIFICATION	1.3068952384352921E-5	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999881432390908	WITHOUT_CLASSIFICATION	1.1856760909129499E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999063315239093	WITHOUT_CLASSIFICATION	9.366847609081301E-5	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999433791844065	WITHOUT_CLASSIFICATION	5.662081559352568E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.992423542151292	WITHOUT_CLASSIFICATION	0.007576457848707966	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999958244266963	WITHOUT_CLASSIFICATION	4.175573303664071E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999796404118463	WITHOUT_CLASSIFICATION	2.0359588153779483E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999962785775061	WITHOUT_CLASSIFICATION	3.721422494029498E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998430853250292	WITHOUT_CLASSIFICATION	1.5691467497087135E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999832276728585	WITHOUT_CLASSIFICATION	1.6772327141503717E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999906958173849	WITHOUT_CLASSIFICATION	9.304182615146674E-6	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999871860290505	WITHOUT_CLASSIFICATION	1.281397094949788E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9989964612817515	WITHOUT_CLASSIFICATION	0.00100353871824858	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999951362373365	WITHOUT_CLASSIFICATION	4.863762663512602E-6	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999964540489894	WITHOUT_CLASSIFICATION	3.5459510105701904E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999895426184268	WITHOUT_CLASSIFICATION	1.0457381573311464E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999895426184268	WITHOUT_CLASSIFICATION	1.0457381573311464E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999824645828118	WITHOUT_CLASSIFICATION	1.75354171881789E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999815870720471	WITHOUT_CLASSIFICATION	1.841292795295072E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999752021180878	WITHOUT_CLASSIFICATION	2.4797881912228067E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999575627157764	WITHOUT_CLASSIFICATION	4.243728422365441E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999791595699745	WITHOUT_CLASSIFICATION	2.0840430025423924E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999927070508019	WITHOUT_CLASSIFICATION	7.292949198102758E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997685983078551	WITHOUT_CLASSIFICATION	2.3140169214499188E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999891787250235	WITHOUT_CLASSIFICATION	1.0821274976502963E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.999990075510819	WITHOUT_CLASSIFICATION	9.92448918107641E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999984437805889	WITHOUT_CLASSIFICATION	1.5562194111089352E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999617144213533	WITHOUT_CLASSIFICATION	3.8285578646762135E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999786751770599	WITHOUT_CLASSIFICATION	2.1324822940144995E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999888863308829	WITHOUT_CLASSIFICATION	1.111366911711777E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999635686760006	WITHOUT_CLASSIFICATION	3.6431323999525835E-5	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999819571111953	WITHOUT_CLASSIFICATION	1.8042888804658037E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999908904875656	WITHOUT_CLASSIFICATION	9.109512434450726E-6	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999962109951438	WITHOUT_CLASSIFICATION	3.7890048561538173E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999657011602622	WITHOUT_CLASSIFICATION	3.429883973784979E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999938891351176	WITHOUT_CLASSIFICATION	6.110864882457097E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999911419315304	WITHOUT_CLASSIFICATION	8.858068469540785E-6	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999515105665998	WITHOUT_CLASSIFICATION	4.848943340019108E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999887638184549	WITHOUT_CLASSIFICATION	1.123618154519991E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999725394655332	WITHOUT_CLASSIFICATION	2.746053446685533E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999860213246454	WITHOUT_CLASSIFICATION	1.3978675354589471E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999420726686764	WITHOUT_CLASSIFICATION	5.792733132370526E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999860133475157	WITHOUT_CLASSIFICATION	1.3986652484292434E-5	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999376611063061	WITHOUT_CLASSIFICATION	6.233889369380113E-5	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998882173114777	WITHOUT_CLASSIFICATION	1.1178268852224116E-4	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999920183501634	WITHOUT_CLASSIFICATION	7.981649836659401E-6	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999961002145735	WITHOUT_CLASSIFICATION	3.899785426414082E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999701033927849	WITHOUT_CLASSIFICATION	2.989660721508982E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999847101882587	WITHOUT_CLASSIFICATION	1.5289811741243723E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993477084781544	WITHOUT_CLASSIFICATION	6.522915218456581E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999994699906753	WITHOUT_CLASSIFICATION	5.300093246968713E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.99998976320544	WITHOUT_CLASSIFICATION	1.0236794560018293E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999939741345504	WITHOUT_CLASSIFICATION	6.02586544961203E-6	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999777880397555	WITHOUT_CLASSIFICATION	2.2211960244569038E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999582243246606	WITHOUT_CLASSIFICATION	4.177567533934346E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999914384010171	WITHOUT_CLASSIFICATION	8.56159898281636E-6	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9997243075038316	WITHOUT_CLASSIFICATION	2.756924961684839E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999564984638828	WITHOUT_CLASSIFICATION	4.350153611720686E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672909648087	WITHOUT_CLASSIFICATION	3.2709035191238156E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999466847088633	WITHOUT_CLASSIFICATION	5.331529113672979E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999737013854489	WITHOUT_CLASSIFICATION	2.6298614550976458E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999862816630384	WITHOUT_CLASSIFICATION	1.3718336961654968E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999975392659398	WITHOUT_CLASSIFICATION	2.460734060218041E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999260917503794	WITHOUT_CLASSIFICATION	7.390824962060253E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999771328551333	WITHOUT_CLASSIFICATION	2.2867144866639646E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999792928495834	WITHOUT_CLASSIFICATION	2.070715041657196E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999792355418315	WITHOUT_CLASSIFICATION	2.0764458168386778E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672909648087	WITHOUT_CLASSIFICATION	3.2709035191238156E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999945886044952	WITHOUT_CLASSIFICATION	5.411395504788471E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998425926863828	WITHOUT_CLASSIFICATION	1.574073136171943E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999970806709926	WITHOUT_CLASSIFICATION	2.9193290074003595E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999929769958902	WITHOUT_CLASSIFICATION	7.023004109778597E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999847814289635	WITHOUT_CLASSIFICATION	1.5218571036437204E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999847814289635	WITHOUT_CLASSIFICATION	1.5218571036437204E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9979042674755657	WITHOUT_CLASSIFICATION	0.0020957325244343452	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999935134509513	WITHOUT_CLASSIFICATION	6.486549048674876E-6	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999515414374767	WITHOUT_CLASSIFICATION	4.845856252339176E-5	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999975702711509	WITHOUT_CLASSIFICATION	2.4297288490937758E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999697312595004	WITHOUT_CLASSIFICATION	3.0268740499692908E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999543094255751	WITHOUT_CLASSIFICATION	4.56905744249243E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999941799662849	WITHOUT_CLASSIFICATION	5.820033715053911E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9991381375706009	WITHOUT_CLASSIFICATION	8.618624293990823E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999846717097124	WITHOUT_CLASSIFICATION	1.5328290287638653E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999741332184693	WITHOUT_CLASSIFICATION	2.586678153070418E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999913214939574	WITHOUT_CLASSIFICATION	8.678506042549194E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999937418881373	WITHOUT_CLASSIFICATION	6.25811186276286E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999985817475711	WITHOUT_CLASSIFICATION	1.4182524289049545E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999950543932778	WITHOUT_CLASSIFICATION	4.945606722180462E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998599265322502	WITHOUT_CLASSIFICATION	1.4007346774976283E-4	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9992605423944801	WITHOUT_CLASSIFICATION	7.394576055198995E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989548277847	WITHOUT_CLASSIFICATION	1.0451722153422628E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999805201277538	WITHOUT_CLASSIFICATION	1.9479872246224942E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999820522834594	WITHOUT_CLASSIFICATION	1.7947716540602812E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999987221677968	WITHOUT_CLASSIFICATION	1.2778322032713522E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999994213424734	WITHOUT_CLASSIFICATION	5.786575265976624E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999991911999383	WITHOUT_CLASSIFICATION	8.088000617118402E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999999367000697	WITHOUT_CLASSIFICATION	6.329993030925736E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999437842294827	WITHOUT_CLASSIFICATION	5.6215770517312805E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999869356161503	WITHOUT_CLASSIFICATION	1.3064383849754698E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999860449178841	WITHOUT_CLASSIFICATION	1.3955082115944574E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998941491242759	WITHOUT_CLASSIFICATION	1.0585087572408488E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999855661019792	WITHOUT_CLASSIFICATION	1.4433898020861E-5	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999847179245785	WITHOUT_CLASSIFICATION	1.528207542151053E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999988966141778	WITHOUT_CLASSIFICATION	1.1033858221969537E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998602052755751	WITHOUT_CLASSIFICATION	1.3979472442498338E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999696439064776	WITHOUT_CLASSIFICATION	3.035609352240016E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999867026761242	WITHOUT_CLASSIFICATION	1.329732387580411E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999927325186387	WITHOUT_CLASSIFICATION	7.2674813611535916E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999847179245785	WITHOUT_CLASSIFICATION	1.528207542151053E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9996891475150248	WITHOUT_CLASSIFICATION	3.1085248497510594E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999867026761242	WITHOUT_CLASSIFICATION	1.329732387580411E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999698340593762	WITHOUT_CLASSIFICATION	3.0165940623788264E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999829276314942	WITHOUT_CLASSIFICATION	1.707236850572488E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999617144213533	WITHOUT_CLASSIFICATION	3.8285578646762135E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999686490732485	WITHOUT_CLASSIFICATION	3.135092675144059E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999386778542106	WITHOUT_CLASSIFICATION	6.132214578927455E-5	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999967759196562	WITHOUT_CLASSIFICATION	3.224080343905488E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999634474945164	WITHOUT_CLASSIFICATION	3.6552505483575636E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999908815336592	WITHOUT_CLASSIFICATION	9.118466340795663E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999337067950268	WITHOUT_CLASSIFICATION	6.629320497319382E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998940286765744	WITHOUT_CLASSIFICATION	1.059713234256034E-4	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999681897337195	WITHOUT_CLASSIFICATION	3.1810266280545514E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999459206002445	WITHOUT_CLASSIFICATION	5.407939975545852E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999848477126749	WITHOUT_CLASSIFICATION	1.515228732516958E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999836533504128	WITHOUT_CLASSIFICATION	1.6346649587220208E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999913969493718	WITHOUT_CLASSIFICATION	8.603050628163222E-6	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999965498062684	WITHOUT_CLASSIFICATION	3.4501937316579945E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999931990264286	WITHOUT_CLASSIFICATION	6.800973571395598E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999623857662084	WITHOUT_CLASSIFICATION	3.761423379166326E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999724090492881	WITHOUT_CLASSIFICATION	2.7590950711959894E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999799711482366	WITHOUT_CLASSIFICATION	2.002885176346367E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.999988269178814	WITHOUT_CLASSIFICATION	1.1730821185988027E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999664896743407	WITHOUT_CLASSIFICATION	3.3510325659269546E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999866383451298	WITHOUT_CLASSIFICATION	1.33616548702964E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999622575679482	WITHOUT_CLASSIFICATION	3.7742432051859356E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998529288572346	WITHOUT_CLASSIFICATION	1.4707114276541614E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999972168874896	WITHOUT_CLASSIFICATION	2.7831125103977537E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999879900299107	WITHOUT_CLASSIFICATION	1.2009970089239364E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999729412881957	WITHOUT_CLASSIFICATION	2.7058711804301117E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999722275527262	WITHOUT_CLASSIFICATION	2.7772447273896313E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753977328046	WITHOUT_CLASSIFICATION	2.4602267195473533E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999551676620043	WITHOUT_CLASSIFICATION	4.483233799564473E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999809137754793	WITHOUT_CLASSIFICATION	1.908622452082059E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999909877611155	WITHOUT_CLASSIFICATION	9.012238884536073E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999990491189092	WITHOUT_CLASSIFICATION	9.50881090889836E-7	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999923715080481	WITHOUT_CLASSIFICATION	7.628491951857533E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999904910154163	WITHOUT_CLASSIFICATION	9.508984583783933E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999666491006423	WITHOUT_CLASSIFICATION	3.335089935776839E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999924412501769	WITHOUT_CLASSIFICATION	7.5587498230793265E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999661989966125	WITHOUT_CLASSIFICATION	3.380100338743769E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999956111080427	WITHOUT_CLASSIFICATION	4.38889195724574E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999503602664013	WITHOUT_CLASSIFICATION	4.9639733598796093E-5	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999659386985251	WITHOUT_CLASSIFICATION	3.406130147480634E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999960991332899	WITHOUT_CLASSIFICATION	3.90086671005993E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999963845657431	WITHOUT_CLASSIFICATION	3.6154342568928004E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999955396124416	WITHOUT_CLASSIFICATION	4.460387558400748E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998271680689333	WITHOUT_CLASSIFICATION	1.7283193106659646E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999107270534127	WITHOUT_CLASSIFICATION	8.927294658725734E-5	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999842469350985	WITHOUT_CLASSIFICATION	1.575306490156506E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999890145843292	WITHOUT_CLASSIFICATION	1.0985415670894976E-5	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999132932872076	WITHOUT_CLASSIFICATION	8.670671279239904E-5	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999208737321561	WITHOUT_CLASSIFICATION	7.912626784391029E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999727783582798	WITHOUT_CLASSIFICATION	2.7221641720110873E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998201305898609	WITHOUT_CLASSIFICATION	1.7986941013913946E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999980290217892	WITHOUT_CLASSIFICATION	1.9709782106760735E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999805871898317	WITHOUT_CLASSIFICATION	1.9412810168185794E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993247883501756	WITHOUT_CLASSIFICATION	6.752116498244859E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998842552297329	WITHOUT_CLASSIFICATION	1.1574477026718598E-4	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999722275527262	WITHOUT_CLASSIFICATION	2.7772447273896313E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999474640223801	WITHOUT_CLASSIFICATION	5.25359776199862E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999987276305167	WITHOUT_CLASSIFICATION	1.2723694833421302E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999876519708714	WITHOUT_CLASSIFICATION	1.2348029128634056E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.999965659242639	WITHOUT_CLASSIFICATION	3.434075736090777E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999568096057911	WITHOUT_CLASSIFICATION	4.3190394208807394E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999414850113925	WITHOUT_CLASSIFICATION	5.8514988607467607E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974431053076	WITHOUT_CLASSIFICATION	2.5568946924075592E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999910996758388	WITHOUT_CLASSIFICATION	8.90032416122667E-6	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999954002695534	WITHOUT_CLASSIFICATION	4.59973044666363E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999573152465399	WITHOUT_CLASSIFICATION	4.2684753460143886E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999994834657216	WITHOUT_CLASSIFICATION	5.165342784081906E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999920183501634	WITHOUT_CLASSIFICATION	7.981649836659401E-6	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999855083338798	WITHOUT_CLASSIFICATION	1.4491666120246323E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999660590364111	WITHOUT_CLASSIFICATION	3.3940963588828666E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998825169113694	WITHOUT_CLASSIFICATION	1.1748308863060459E-4	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999994756664997	WITHOUT_CLASSIFICATION	5.243335003177887E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999981501690749	WITHOUT_CLASSIFICATION	1.8498309250881817E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999909513479133	WITHOUT_CLASSIFICATION	9.048652086731838E-6	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999929433696427	WITHOUT_CLASSIFICATION	7.0566303572632776E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999998896930447	WITHOUT_CLASSIFICATION	1.1030695530600634E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999727140441905	WITHOUT_CLASSIFICATION	2.728595580949728E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999727140441905	WITHOUT_CLASSIFICATION	2.728595580949728E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999873142584933	WITHOUT_CLASSIFICATION	1.2685741506791695E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999945102420218	WITHOUT_CLASSIFICATION	5.48975797821627E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999812397897992	WITHOUT_CLASSIFICATION	1.876021020064547E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999798899998388	WITHOUT_CLASSIFICATION	2.0110000161307347E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999474862796291	WITHOUT_CLASSIFICATION	5.251372037082978E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999924399532983	WITHOUT_CLASSIFICATION	7.560046701662332E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999924733887268	WITHOUT_CLASSIFICATION	7.5266112732013E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999765514788774	WITHOUT_CLASSIFICATION	2.3448521122510016E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999765514788774	WITHOUT_CLASSIFICATION	2.3448521122510016E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999299012465439	WITHOUT_CLASSIFICATION	7.009875345617356E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999910137671	WITHOUT_CLASSIFICATION	8.986232900049134E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998678726058442	WITHOUT_CLASSIFICATION	1.3212739415576684E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999851440846226	WITHOUT_CLASSIFICATION	1.4855915377420042E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999851440846226	WITHOUT_CLASSIFICATION	1.4855915377420042E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999851440846226	WITHOUT_CLASSIFICATION	1.4855915377420042E-5	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999687544338256	WITHOUT_CLASSIFICATION	3.1245566174380616E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999732569514768	WITHOUT_CLASSIFICATION	2.6743048523254582E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999989242180944	WITHOUT_CLASSIFICATION	1.0757819055909363E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999454899283547	WITHOUT_CLASSIFICATION	5.451007164523776E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999843133387558	WITHOUT_CLASSIFICATION	1.5686661244140737E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999995471324982	WITHOUT_CLASSIFICATION	4.528675017731758E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999573545399567	WITHOUT_CLASSIFICATION	4.264546004330252E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.99913539545364	WITHOUT_CLASSIFICATION	8.646045463600047E-4	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999830257205403	WITHOUT_CLASSIFICATION	1.6974279459654633E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999949636561708	WITHOUT_CLASSIFICATION	5.036343829199798E-6	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999849145105949	WITHOUT_CLASSIFICATION	1.5085489405039676E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.99998974718911	WITHOUT_CLASSIFICATION	1.0252810889971517E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998512612481044	WITHOUT_CLASSIFICATION	1.4873875189559045E-4	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999833179539778	WITHOUT_CLASSIFICATION	1.6682046022251867E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999966468865085	WITHOUT_CLASSIFICATION	3.3531134916266007E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999878490448836	WITHOUT_CLASSIFICATION	1.2150955116317988E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999823136634054	WITHOUT_CLASSIFICATION	1.7686336594606818E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999915097617175	WITHOUT_CLASSIFICATION	8.490238282425544E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999727140441905	WITHOUT_CLASSIFICATION	2.728595580949728E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999880684150904	WITHOUT_CLASSIFICATION	1.1931584909531301E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999978081984384	WITHOUT_CLASSIFICATION	2.1918015614535294E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999963734299518	WITHOUT_CLASSIFICATION	3.626570048198428E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999703846223379	WITHOUT_CLASSIFICATION	2.961537766211601E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999856718393291	WITHOUT_CLASSIFICATION	1.4328160670820772E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999955827520083	WITHOUT_CLASSIFICATION	4.41724799167709E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9993514456354045	WITHOUT_CLASSIFICATION	6.485543645955113E-4	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999949016452367	WITHOUT_CLASSIFICATION	5.098354763290652E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9994885531335848	WITHOUT_CLASSIFICATION	5.114468664151512E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999771362274144	WITHOUT_CLASSIFICATION	2.286377258568354E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999593097514229	WITHOUT_CLASSIFICATION	4.0690248577110634E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999694239414716	WITHOUT_CLASSIFICATION	3.0576058528397976E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999919019764834	WITHOUT_CLASSIFICATION	8.098023516699455E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999904837397275	WITHOUT_CLASSIFICATION	9.516260272511082E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999756988314863	WITHOUT_CLASSIFICATION	2.4301168513705692E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999987480750391	WITHOUT_CLASSIFICATION	1.2519249608641766E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999951279204716	WITHOUT_CLASSIFICATION	4.872079528350074E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999974669409502	WITHOUT_CLASSIFICATION	2.5330590498577013E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999786518990168	WITHOUT_CLASSIFICATION	2.134810098320321E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999786518990168	WITHOUT_CLASSIFICATION	2.134810098320321E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999804740921739	WITHOUT_CLASSIFICATION	1.9525907826131916E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999942252246616	WITHOUT_CLASSIFICATION	5.774775338304021E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999785304546035	WITHOUT_CLASSIFICATION	2.1469545396535647E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999677951504596	WITHOUT_CLASSIFICATION	3.2204849540365E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999190950308948	WITHOUT_CLASSIFICATION	8.09049691052239E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999975792952751	WITHOUT_CLASSIFICATION	2.420704724911555E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999842558504728	WITHOUT_CLASSIFICATION	1.5744149527152836E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999301591831115	WITHOUT_CLASSIFICATION	6.98408168885132E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999981908319441	WITHOUT_CLASSIFICATION	1.8091680558993658E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999866628223126	WITHOUT_CLASSIFICATION	1.3337177687432935E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999409456957846	WITHOUT_CLASSIFICATION	5.9054304215459336E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999920183501634	WITHOUT_CLASSIFICATION	7.981649836659401E-6	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999979268607231	WITHOUT_CLASSIFICATION	2.073139276865139E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999928391060688	WITHOUT_CLASSIFICATION	7.16089393118778E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999989811917656	WITHOUT_CLASSIFICATION	1.018808234442917E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998669326511408	WITHOUT_CLASSIFICATION	1.3306734885920956E-4	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984002142647	WITHOUT_CLASSIFICATION	1.5997857353286485E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984002142647	WITHOUT_CLASSIFICATION	1.5997857353286485E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999675036053985	WITHOUT_CLASSIFICATION	3.249639460150483E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999996269092881	WITHOUT_CLASSIFICATION	3.730907118746456E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999081205870128	WITHOUT_CLASSIFICATION	9.187941298713717E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.999898064983198	WITHOUT_CLASSIFICATION	1.0193501680196847E-4	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998365354674433	WITHOUT_CLASSIFICATION	1.634645325566451E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997950425132888	WITHOUT_CLASSIFICATION	2.0495748671128791E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999546504962885	WITHOUT_CLASSIFICATION	4.534950371147738E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999946603097957	WITHOUT_CLASSIFICATION	5.339690204343893E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999535431372483	WITHOUT_CLASSIFICATION	4.6456862751781424E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999123961178524	WITHOUT_CLASSIFICATION	8.760388214755976E-5	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999232646170466	WITHOUT_CLASSIFICATION	7.673538295336451E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999946603097957	WITHOUT_CLASSIFICATION	5.339690204343893E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999807858241493	WITHOUT_CLASSIFICATION	1.9214175850746107E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999850540020372	WITHOUT_CLASSIFICATION	1.4945997962667145E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999972185639863	WITHOUT_CLASSIFICATION	2.7814360137797796E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999539817935893	WITHOUT_CLASSIFICATION	4.6018206410656436E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999964501258147	WITHOUT_CLASSIFICATION	3.549874185313161E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999928945136937	WITHOUT_CLASSIFICATION	7.105486306413081E-6	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999864134537522	WITHOUT_CLASSIFICATION	1.3586546247873882E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999729479282884	WITHOUT_CLASSIFICATION	2.7052071711565808E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999700483652592	WITHOUT_CLASSIFICATION	2.995163474086582E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999848802505874	WITHOUT_CLASSIFICATION	1.511974941262395E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998789240834192	WITHOUT_CLASSIFICATION	1.2107591658075971E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999927637243188	WITHOUT_CLASSIFICATION	7.236275681234639E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999869086135295	WITHOUT_CLASSIFICATION	1.309138647054085E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999989979103866	WITHOUT_CLASSIFICATION	1.0020896133977964E-5	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999882515978327	WITHOUT_CLASSIFICATION	1.174840216732615E-5	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999923474875496	WITHOUT_CLASSIFICATION	7.652512450390045E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997016325804682	WITHOUT_CLASSIFICATION	2.9836741953190136E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999425910660387	WITHOUT_CLASSIFICATION	5.740893396139217E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999425910660387	WITHOUT_CLASSIFICATION	5.740893396139217E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999864134537522	WITHOUT_CLASSIFICATION	1.3586546247873882E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999828074643339	WITHOUT_CLASSIFICATION	1.7192535666040446E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999925926039427	WITHOUT_CLASSIFICATION	7.407396057352204E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998743119106441	WITHOUT_CLASSIFICATION	1.2568808935585948E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999872028828537	WITHOUT_CLASSIFICATION	1.2797117146330691E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999845897075912	WITHOUT_CLASSIFICATION	1.5410292408813786E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999914846673207	WITHOUT_CLASSIFICATION	8.51533267931907E-6	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999920670642123	WITHOUT_CLASSIFICATION	7.932935787660006E-6	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999630271420076	WITHOUT_CLASSIFICATION	3.697285799242613E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999996664705735	WITHOUT_CLASSIFICATION	3.3352942650848633E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999756563957066	WITHOUT_CLASSIFICATION	2.4343604293355942E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999977054721174	WITHOUT_CLASSIFICATION	2.2945278825678754E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999930043619351	WITHOUT_CLASSIFICATION	6.995638064987517E-6	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999977373573632	WITHOUT_CLASSIFICATION	2.2626426367977965E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999901822597912	WITHOUT_CLASSIFICATION	9.817740208816993E-6	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999710995490804	WITHOUT_CLASSIFICATION	2.8900450919669802E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999991080485903	WITHOUT_CLASSIFICATION	8.919514097005345E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999924571958452	WITHOUT_CLASSIFICATION	7.542804154785485E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999947688594266	WITHOUT_CLASSIFICATION	5.231140573413955E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999067807517248	WITHOUT_CLASSIFICATION	9.321924827525901E-5	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999843173289714	WITHOUT_CLASSIFICATION	1.5682671028518138E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999749855086257	WITHOUT_CLASSIFICATION	2.501449137426434E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999701199321738	WITHOUT_CLASSIFICATION	2.9880067826188068E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999676256374918	WITHOUT_CLASSIFICATION	3.2374362508268404E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999901447793367	WITHOUT_CLASSIFICATION	9.855220663334039E-6	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999739127798815	WITHOUT_CLASSIFICATION	2.608722011848479E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999874766606534	WITHOUT_CLASSIFICATION	1.2523339346704721E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9971913561422401	WITHOUT_CLASSIFICATION	0.002808643857759826	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999032659158594	WITHOUT_CLASSIFICATION	9.673408414061993E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999788047799216	WITHOUT_CLASSIFICATION	2.1195220078391603E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999785620171955	WITHOUT_CLASSIFICATION	2.1437982804472812E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999707326533069	WITHOUT_CLASSIFICATION	2.926734669299217E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999840536533137	WITHOUT_CLASSIFICATION	1.594634668636356E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999930192901513	WITHOUT_CLASSIFICATION	6.9807098486667065E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999945274096274	WITHOUT_CLASSIFICATION	5.472590372702311E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999883637344632	WITHOUT_CLASSIFICATION	1.16362655367457E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998929076925275	WITHOUT_CLASSIFICATION	1.0709230747254478E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999951957864137	WITHOUT_CLASSIFICATION	4.804213586331293E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999823643239641	WITHOUT_CLASSIFICATION	1.763567603589974E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996275389797229	WITHOUT_CLASSIFICATION	3.72461020277056E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999883015791556	WITHOUT_CLASSIFICATION	1.1698420844353693E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999686466626222	WITHOUT_CLASSIFICATION	3.135333737778471E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999886490283941	WITHOUT_CLASSIFICATION	1.1350971605889688E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998114871432228	WITHOUT_CLASSIFICATION	1.885128567772628E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999957495823796	WITHOUT_CLASSIFICATION	4.2504176203574E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997612195595044	WITHOUT_CLASSIFICATION	2.3878044049564543E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999910296930629	WITHOUT_CLASSIFICATION	8.970306937098888E-5	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999920880474669	WITHOUT_CLASSIFICATION	7.911952533154389E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995130162559064	WITHOUT_CLASSIFICATION	4.869837440935849E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999989135257005	WITHOUT_CLASSIFICATION	1.0864742994973976E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999577735090874	WITHOUT_CLASSIFICATION	4.2226490912696255E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999050374992818	WITHOUT_CLASSIFICATION	9.496250071824617E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999535431372483	WITHOUT_CLASSIFICATION	4.6456862751781424E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999813191305985	WITHOUT_CLASSIFICATION	1.8680869401508708E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999710995490804	WITHOUT_CLASSIFICATION	2.8900450919669802E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999796183603827	WITHOUT_CLASSIFICATION	2.038163961724381E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999863949192174	WITHOUT_CLASSIFICATION	1.3605080782657869E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999971261729543	WITHOUT_CLASSIFICATION	2.8738270456672948E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999970919879452	WITHOUT_CLASSIFICATION	2.908012054775486E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999879051450146	WITHOUT_CLASSIFICATION	1.2094854985469757E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999980121852697	WITHOUT_CLASSIFICATION	1.9878147303200375E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999071544749202	WITHOUT_CLASSIFICATION	9.284552507990098E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999734153586692	WITHOUT_CLASSIFICATION	2.6584641330768062E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.99996132046825	WITHOUT_CLASSIFICATION	3.867953174984217E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983882021799	WITHOUT_CLASSIFICATION	1.611797820137407E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99993258862107	WITHOUT_CLASSIFICATION	6.741137892997976E-5	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999986152404554	WITHOUT_CLASSIFICATION	1.3847595445944044E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999916864739453	WITHOUT_CLASSIFICATION	8.31352605466474E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999916864739453	WITHOUT_CLASSIFICATION	8.31352605466474E-6	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998834040478382	WITHOUT_CLASSIFICATION	1.1659595216180966E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9991796012708675	WITHOUT_CLASSIFICATION	8.203987291325302E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999951667853736	WITHOUT_CLASSIFICATION	4.833214626483932E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9980603015383819	WITHOUT_CLASSIFICATION	0.0019396984616180972	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999921554767193	WITHOUT_CLASSIFICATION	7.844523280709482E-6	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999818307496937	WITHOUT_CLASSIFICATION	1.816925030625731E-5	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999288670892	WITHOUT_CLASSIFICATION	7.11329108030638E-7	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999282325583952	WITHOUT_CLASSIFICATION	7.176744160471501E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999830629785897	WITHOUT_CLASSIFICATION	1.693702141027171E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999692923158727	WITHOUT_CLASSIFICATION	3.070768412733223E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999692923158727	WITHOUT_CLASSIFICATION	3.070768412733223E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999722646746991	WITHOUT_CLASSIFICATION	2.7735325300873025E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997254648041	WITHOUT_CLASSIFICATION	2.745351959662308E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999844355413082	WITHOUT_CLASSIFICATION	1.5564458691752697E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999937949356118	WITHOUT_CLASSIFICATION	6.2050643882179925E-6	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999538501889854	WITHOUT_CLASSIFICATION	4.6149811014628645E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998108659191433	WITHOUT_CLASSIFICATION	1.8913408085675194E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999981629489302	WITHOUT_CLASSIFICATION	1.8370510698336795E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999478088876269	WITHOUT_CLASSIFICATION	5.2191112373113767E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999582257774452	WITHOUT_CLASSIFICATION	4.1774222554857495E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999957859541363	WITHOUT_CLASSIFICATION	4.214045863708931E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999901473589022	WITHOUT_CLASSIFICATION	9.852641097738991E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999671187742158	WITHOUT_CLASSIFICATION	3.288122578423694E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999872651147031	WITHOUT_CLASSIFICATION	1.2734885296801435E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999662472018837	WITHOUT_CLASSIFICATION	3.3752798116329006E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666115937678	WITHOUT_CLASSIFICATION	3.338840623216202E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999069695734872	WITHOUT_CLASSIFICATION	9.303042651280033E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999845336813421	WITHOUT_CLASSIFICATION	1.5466318657851754E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999697543260737	WITHOUT_CLASSIFICATION	3.0245673926265626E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940287835243	WITHOUT_CLASSIFICATION	5.971216475689186E-6	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999919000405758	WITHOUT_CLASSIFICATION	8.099959424244946E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999761651182024	WITHOUT_CLASSIFICATION	2.383488179756321E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999949616888901	WITHOUT_CLASSIFICATION	5.0383111098985225E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999984667199037	WITHOUT_CLASSIFICATION	1.5332800962610217E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999754932866083	WITHOUT_CLASSIFICATION	2.4506713391721587E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999781578809862	WITHOUT_CLASSIFICATION	2.184211901377668E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999920405133991	WITHOUT_CLASSIFICATION	7.959486600852444E-6	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999466347643947	WITHOUT_CLASSIFICATION	5.336523560527103E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999986669967399	WITHOUT_CLASSIFICATION	1.33300326010494E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804658233031	WITHOUT_CLASSIFICATION	1.9534176696827237E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999977543127266	WITHOUT_CLASSIFICATION	2.245687273354637E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999629458630945	WITHOUT_CLASSIFICATION	3.705413690556406E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999701241328455	WITHOUT_CLASSIFICATION	2.987586715461427E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758672858047	WITHOUT_CLASSIFICATION	2.4132714195323214E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9961877923693607	WITHOUT_CLASSIFICATION	0.0038122076306392762	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999958788778065	WITHOUT_CLASSIFICATION	4.121122193465517E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999272783816429	WITHOUT_CLASSIFICATION	7.272161835715188E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999824793635743	WITHOUT_CLASSIFICATION	1.75206364256682E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782797653585	WITHOUT_CLASSIFICATION	2.172023464151331E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999988713178748	WITHOUT_CLASSIFICATION	1.128682125263202E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999695836641992	WITHOUT_CLASSIFICATION	3.0416335800820793E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999977492077437	WITHOUT_CLASSIFICATION	2.250792256301036E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999762835638537	WITHOUT_CLASSIFICATION	2.3716436146347917E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999887783791513	WITHOUT_CLASSIFICATION	1.1221620848620015E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997956226774247	WITHOUT_CLASSIFICATION	2.04377322575381E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999882831472097	WITHOUT_CLASSIFICATION	1.1716852790345586E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999879137446857	WITHOUT_CLASSIFICATION	1.2086255314413362E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999734270442318	WITHOUT_CLASSIFICATION	2.65729557682775E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998259039072764	WITHOUT_CLASSIFICATION	1.7409609272362782E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999988379518692	WITHOUT_CLASSIFICATION	1.1620481307938221E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999189450961783	WITHOUT_CLASSIFICATION	8.105490382173227E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999866850810692	WITHOUT_CLASSIFICATION	1.3314918930709832E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999578972262451	WITHOUT_CLASSIFICATION	4.210277375497416E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999834264356903	WITHOUT_CLASSIFICATION	1.6573564309816204E-5	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999885370028478	WITHOUT_CLASSIFICATION	1.1462997152113404E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999931217734281	WITHOUT_CLASSIFICATION	6.878226571921705E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883852530218	WITHOUT_CLASSIFICATION	1.1614746978166272E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999971104341315	WITHOUT_CLASSIFICATION	2.889565868506212E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883852530218	WITHOUT_CLASSIFICATION	1.1614746978166272E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999668594620659	WITHOUT_CLASSIFICATION	3.3140537934126915E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999996708930588	WITHOUT_CLASSIFICATION	3.2910694118860776E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999845807578841	WITHOUT_CLASSIFICATION	1.541924211597399E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998411961529	WITHOUT_CLASSIFICATION	1.5880384708323595E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999839596750771	WITHOUT_CLASSIFICATION	1.604032492282394E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999845807578841	WITHOUT_CLASSIFICATION	1.541924211597399E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999881065811919	WITHOUT_CLASSIFICATION	1.1893418808247034E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999752678566015	WITHOUT_CLASSIFICATION	2.473214339849167E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999953143937518	WITHOUT_CLASSIFICATION	4.685606248219679E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999948674452571	WITHOUT_CLASSIFICATION	5.132554742816433E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999654668089083	WITHOUT_CLASSIFICATION	3.453319109174976E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999949160417099	WITHOUT_CLASSIFICATION	5.083958290212157E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999965897945566	WITHOUT_CLASSIFICATION	3.4102054434495114E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9994952043816211	WITHOUT_CLASSIFICATION	5.04795618379002E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.99999349177312	WITHOUT_CLASSIFICATION	6.508226879917279E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999962672076481	WITHOUT_CLASSIFICATION	3.732792351961524E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999870093017628	WITHOUT_CLASSIFICATION	1.299069823718981E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999971049971116	WITHOUT_CLASSIFICATION	2.8950028883995286E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999992728034497	WITHOUT_CLASSIFICATION	7.271965502603226E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9996773284005237	WITHOUT_CLASSIFICATION	3.226715994763302E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999859125486067	WITHOUT_CLASSIFICATION	1.4087451393424552E-5	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999568096179479	WITHOUT_CLASSIFICATION	4.319038205223703E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9975253009251743	WITHOUT_CLASSIFICATION	0.002474699074825612	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999979465168647	WITHOUT_CLASSIFICATION	2.05348313529337E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999673326537013	WITHOUT_CLASSIFICATION	3.266734629870453E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.997334619685265	WITHOUT_CLASSIFICATION	0.0026653803147349115	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999723230909109	WITHOUT_CLASSIFICATION	2.767690908915996E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.99999466514487	WITHOUT_CLASSIFICATION	5.334855129978106E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999877211871397	WITHOUT_CLASSIFICATION	1.2278812860231023E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999685169529776	WITHOUT_CLASSIFICATION	3.14830470223231E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999835553633138	WITHOUT_CLASSIFICATION	1.6444636686186117E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999587290880037	WITHOUT_CLASSIFICATION	4.127091199647072E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999969043272502	WITHOUT_CLASSIFICATION	3.0956727498581316E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999829332734439	WITHOUT_CLASSIFICATION	1.706672655602123E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999867073874786	WITHOUT_CLASSIFICATION	1.3292612521384442E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999645448855252	WITHOUT_CLASSIFICATION	3.54551144748683E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999877211871397	WITHOUT_CLASSIFICATION	1.2278812860231023E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999877709127882	WITHOUT_CLASSIFICATION	1.2229087211672641E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999565986169766	WITHOUT_CLASSIFICATION	4.340138302338045E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999740064134112	WITHOUT_CLASSIFICATION	2.599358658893778E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991187929436656	WITHOUT_CLASSIFICATION	8.812070563343315E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.997334619685265	WITHOUT_CLASSIFICATION	0.0026653803147349115	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999846508702922	WITHOUT_CLASSIFICATION	1.534912970780073E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999871598625262	WITHOUT_CLASSIFICATION	1.2840137473927977E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999635735583491	WITHOUT_CLASSIFICATION	3.642644165099734E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999831110076386	WITHOUT_CLASSIFICATION	1.6888992361389597E-5	TEST
special case	WITHOUT_CLASSIFICATION	0.9999907170213284	WITHOUT_CLASSIFICATION	9.282978671680885E-6	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999322669809075	WITHOUT_CLASSIFICATION	6.773301909242645E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999988594333862	WITHOUT_CLASSIFICATION	1.1405666138251315E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999320512850556	WITHOUT_CLASSIFICATION	6.794871494449887E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999673276632544	WITHOUT_CLASSIFICATION	3.267233674559291E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999766282962437	WITHOUT_CLASSIFICATION	2.3371703756412728E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999651006778971	WITHOUT_CLASSIFICATION	3.489932210284029E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9995747503056535	WITHOUT_CLASSIFICATION	4.252496943465147E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999919820806701	WITHOUT_CLASSIFICATION	8.017919329864894E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.99999313921264	WITHOUT_CLASSIFICATION	6.860787360004665E-6	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999940357998525	WITHOUT_CLASSIFICATION	5.964200147462952E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999902290064495	WITHOUT_CLASSIFICATION	9.770993550443484E-6	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999975427745289	WITHOUT_CLASSIFICATION	2.4572254711686537E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999846508702922	WITHOUT_CLASSIFICATION	1.534912970780073E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999124654217213	WITHOUT_CLASSIFICATION	8.753457827869441E-5	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998677148129703	WITHOUT_CLASSIFICATION	1.3228518702962003E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996498747756664	WITHOUT_CLASSIFICATION	3.501252243336192E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999470400756912	WITHOUT_CLASSIFICATION	5.2959924308840884E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999790515553937	WITHOUT_CLASSIFICATION	2.09484446063583E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999790515553937	WITHOUT_CLASSIFICATION	2.09484446063583E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999944023120313	WITHOUT_CLASSIFICATION	5.597687968697236E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999790515553937	WITHOUT_CLASSIFICATION	2.09484446063583E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999790515553937	WITHOUT_CLASSIFICATION	2.09484446063583E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999860065873395	WITHOUT_CLASSIFICATION	1.3993412660548363E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998057315630663	WITHOUT_CLASSIFICATION	1.9426843693364808E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999679482225677	WITHOUT_CLASSIFICATION	3.205177743230802E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999679482225677	WITHOUT_CLASSIFICATION	3.205177743230802E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999660936868516	WITHOUT_CLASSIFICATION	3.3906313148406786E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999541695861679	WITHOUT_CLASSIFICATION	4.5830413831991116E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999886086819186	WITHOUT_CLASSIFICATION	1.1391318081303201E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999566718468046	WITHOUT_CLASSIFICATION	4.3328153195410196E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999925788614668	WITHOUT_CLASSIFICATION	7.421138533305139E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999186253737942	WITHOUT_CLASSIFICATION	8.137462620585443E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999380014083922	WITHOUT_CLASSIFICATION	6.199859160777297E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999943519085552	WITHOUT_CLASSIFICATION	5.648091444834254E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999048505112368	WITHOUT_CLASSIFICATION	9.514948876327395E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999142253088343	WITHOUT_CLASSIFICATION	8.577469116563912E-5	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999755550620423	WITHOUT_CLASSIFICATION	2.444493795769672E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998281993155645	WITHOUT_CLASSIFICATION	1.7180068443536337E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999945525878563	WITHOUT_CLASSIFICATION	5.447412143807012E-6	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999862896007078	WITHOUT_CLASSIFICATION	1.371039929217427E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999842914183102	WITHOUT_CLASSIFICATION	1.570858168972687E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998834200371327	WITHOUT_CLASSIFICATION	1.1657996286725823E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999972377835453	WITHOUT_CLASSIFICATION	2.7622164546135985E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999801954549064	WITHOUT_CLASSIFICATION	1.980454509367594E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999945525878563	WITHOUT_CLASSIFICATION	5.447412143807012E-6	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999723230909109	WITHOUT_CLASSIFICATION	2.767690908915996E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999889270124889	WITHOUT_CLASSIFICATION	1.1072987511070917E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999869961499275	WITHOUT_CLASSIFICATION	1.3003850072515098E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999746148029484	WITHOUT_CLASSIFICATION	2.5385197051540946E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999923363581762	WITHOUT_CLASSIFICATION	7.663641823751038E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999992641883681	WITHOUT_CLASSIFICATION	7.358116319107691E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999213427619054	WITHOUT_CLASSIFICATION	7.865723809459467E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999881169910505	WITHOUT_CLASSIFICATION	1.1883008949546602E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999782670268053	WITHOUT_CLASSIFICATION	2.1732973194695862E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999974685244722	WITHOUT_CLASSIFICATION	2.5314755277882405E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.999988435581917	WITHOUT_CLASSIFICATION	1.156441808307304E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999429351285243	WITHOUT_CLASSIFICATION	5.7064871475683055E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999944967844278	WITHOUT_CLASSIFICATION	5.503215572233599E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999725686229539	WITHOUT_CLASSIFICATION	2.7431377046168276E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999188778007927	WITHOUT_CLASSIFICATION	8.11221992072684E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999930455883217	WITHOUT_CLASSIFICATION	6.954411678302017E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999913630347425	WITHOUT_CLASSIFICATION	8.636965257594547E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999937340426271	WITHOUT_CLASSIFICATION	6.265957372747672E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999680952438088	WITHOUT_CLASSIFICATION	3.1904756191211047E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999416253059921	WITHOUT_CLASSIFICATION	5.8374694007978236E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999887621747171	WITHOUT_CLASSIFICATION	1.1237825282861775E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999683110374132	WITHOUT_CLASSIFICATION	3.168896258673887E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999013428931	WITHOUT_CLASSIFICATION	9.865710690948955E-8	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999782670268053	WITHOUT_CLASSIFICATION	2.1732973194695862E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999890450298317	WITHOUT_CLASSIFICATION	1.0954970168395655E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999879234134459	WITHOUT_CLASSIFICATION	1.2076586554119443E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999668971104183	WITHOUT_CLASSIFICATION	3.3102889581673626E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998715101709689	WITHOUT_CLASSIFICATION	1.2848982903117584E-4	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999846647486694	WITHOUT_CLASSIFICATION	1.5335251330571956E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999943754565784	WITHOUT_CLASSIFICATION	5.624543421511547E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999849671711254	WITHOUT_CLASSIFICATION	1.5032828874451376E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999943775864946	WITHOUT_CLASSIFICATION	5.622413505482991E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999857997347398	WITHOUT_CLASSIFICATION	1.4200265260220162E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999822071869782	WITHOUT_CLASSIFICATION	1.7792813021890813E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.99989412633966	WITHOUT_CLASSIFICATION	1.0587366034001884E-4	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999778606178555	WITHOUT_CLASSIFICATION	2.213938214435511E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999695712791598	WITHOUT_CLASSIFICATION	3.042872084031118E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999883080898342	WITHOUT_CLASSIFICATION	1.1691910165755576E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999793757385629	WITHOUT_CLASSIFICATION	2.0624261437151005E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999822071869782	WITHOUT_CLASSIFICATION	1.7792813021890813E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999872426526943	WITHOUT_CLASSIFICATION	1.275734730561665E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999745639028905	WITHOUT_CLASSIFICATION	2.543609710944827E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999480664920334	WITHOUT_CLASSIFICATION	5.193350796653947E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998659011458311	WITHOUT_CLASSIFICATION	1.3409885416891938E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.999990942062918	WITHOUT_CLASSIFICATION	9.057937081930115E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999596451800081	WITHOUT_CLASSIFICATION	4.035481999187165E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999795241792953	WITHOUT_CLASSIFICATION	2.04758207047021E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665617963558	WITHOUT_CLASSIFICATION	3.34382036442327E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713270156523	WITHOUT_CLASSIFICATION	2.8672984347683943E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973220154446	WITHOUT_CLASSIFICATION	2.6779845554017343E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973220154446	WITHOUT_CLASSIFICATION	2.6779845554017343E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973220154446	WITHOUT_CLASSIFICATION	2.6779845554017343E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999951470965425	WITHOUT_CLASSIFICATION	4.8529034575790875E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999951470965425	WITHOUT_CLASSIFICATION	4.8529034575790875E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999138592707143	WITHOUT_CLASSIFICATION	8.614072928570007E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999934072658055	WITHOUT_CLASSIFICATION	6.592734194477142E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.999984843082038	WITHOUT_CLASSIFICATION	1.5156917961953228E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.99998828268089	WITHOUT_CLASSIFICATION	1.17173191100021E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999378951375398	WITHOUT_CLASSIFICATION	6.210486246021695E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666712494174	WITHOUT_CLASSIFICATION	3.3328750582513836E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967480199489	WITHOUT_CLASSIFICATION	3.251980051103227E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999978009766594	WITHOUT_CLASSIFICATION	2.1990233406643394E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756559576228	WITHOUT_CLASSIFICATION	2.4344042377174777E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666712494174	WITHOUT_CLASSIFICATION	3.3328750582513836E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967480199489	WITHOUT_CLASSIFICATION	3.251980051103227E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999273491216711	WITHOUT_CLASSIFICATION	7.265087832885263E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999979640096775	WITHOUT_CLASSIFICATION	2.0359903225046808E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999975415589247	WITHOUT_CLASSIFICATION	2.4584410753142442E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999027404274903	WITHOUT_CLASSIFICATION	9.72595725097522E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999738497030938	WITHOUT_CLASSIFICATION	2.615029690612208E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999605661177895	WITHOUT_CLASSIFICATION	3.9433882210416977E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999872162839967	WITHOUT_CLASSIFICATION	1.2783716003367467E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999732953377697	WITHOUT_CLASSIFICATION	2.670466223032353E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998506116404249	WITHOUT_CLASSIFICATION	1.4938835957509168E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999040568478353	WITHOUT_CLASSIFICATION	9.594315216471574E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999977423606135	WITHOUT_CLASSIFICATION	2.2576393865030097E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999972802146881	WITHOUT_CLASSIFICATION	2.7197853118994855E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999905112600468	WITHOUT_CLASSIFICATION	9.488739953186355E-6	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9968361831649174	WITHOUT_CLASSIFICATION	0.0031638168350826565	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999848477126749	WITHOUT_CLASSIFICATION	1.515228732516958E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999525376968776	WITHOUT_CLASSIFICATION	4.746230312246681E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999298693042977	WITHOUT_CLASSIFICATION	7.01306957023151E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999973891534675	WITHOUT_CLASSIFICATION	2.6108465325594113E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999673407543066	WITHOUT_CLASSIFICATION	3.2659245693346514E-5	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999582760271135	WITHOUT_CLASSIFICATION	4.172397288659568E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999838449552768	WITHOUT_CLASSIFICATION	1.6155044723175823E-5	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.999980647565419	WITHOUT_CLASSIFICATION	1.9352434580997758E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999961920842192	WITHOUT_CLASSIFICATION	3.8079157807945116E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664847804931	WITHOUT_CLASSIFICATION	3.3515219506940944E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999820929592512	WITHOUT_CLASSIFICATION	1.790704074874622E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695075117921	WITHOUT_CLASSIFICATION	3.0492488207826066E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999480830657851	WITHOUT_CLASSIFICATION	5.191693421490005E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999503048562165	WITHOUT_CLASSIFICATION	4.9695143783540966E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999503048562165	WITHOUT_CLASSIFICATION	4.9695143783540966E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999953340518583	WITHOUT_CLASSIFICATION	4.6659481416942296E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999962829934688	WITHOUT_CLASSIFICATION	3.7170065311170517E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999571722374422	WITHOUT_CLASSIFICATION	4.2827762557812686E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999920183501634	WITHOUT_CLASSIFICATION	7.981649836659401E-6	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999961614174371	WITHOUT_CLASSIFICATION	3.838582562883941E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999816107185205	WITHOUT_CLASSIFICATION	1.838928147946728E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999836330550993	WITHOUT_CLASSIFICATION	1.636694490068217E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.999993576481539	WITHOUT_CLASSIFICATION	6.423518461043424E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999977653031314	WITHOUT_CLASSIFICATION	2.2346968686200832E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673850355156	WITHOUT_CLASSIFICATION	3.261496448446114E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673260853386	WITHOUT_CLASSIFICATION	3.2673914661427175E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673379020271	WITHOUT_CLASSIFICATION	3.266209797285782E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999824042530462	WITHOUT_CLASSIFICATION	1.7595746953910332E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9983964542731691	WITHOUT_CLASSIFICATION	0.001603545726830835	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997583203681472	WITHOUT_CLASSIFICATION	2.416796318528486E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999983657592466	WITHOUT_CLASSIFICATION	1.6342407532882918E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999874865342184	WITHOUT_CLASSIFICATION	1.2513465781694985E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999337200666534	WITHOUT_CLASSIFICATION	6.62799333466067E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999666407637293	WITHOUT_CLASSIFICATION	3.3359236270699434E-5	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999908794966752	WITHOUT_CLASSIFICATION	9.12050332475211E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997583203681472	WITHOUT_CLASSIFICATION	2.416796318528486E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997583203681472	WITHOUT_CLASSIFICATION	2.416796318528486E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999599945064737	WITHOUT_CLASSIFICATION	4.000549352629748E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999657190788023	WITHOUT_CLASSIFICATION	3.428092119778266E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9953522769985551	WITHOUT_CLASSIFICATION	0.004647723001444869	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999951890325276	WITHOUT_CLASSIFICATION	4.810967472385812E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999904837397275	WITHOUT_CLASSIFICATION	9.516260272511082E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999298693042977	WITHOUT_CLASSIFICATION	7.01306957023151E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9993245368601515	WITHOUT_CLASSIFICATION	6.754631398483968E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999780885755783	WITHOUT_CLASSIFICATION	2.191142442155221E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999668949687894	WITHOUT_CLASSIFICATION	3.3105031210598446E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729405195492	WITHOUT_CLASSIFICATION	2.7059480450800492E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999881243677247	WITHOUT_CLASSIFICATION	1.1875632275387653E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711269936358	WITHOUT_CLASSIFICATION	2.887300636425036E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999847939030814	WITHOUT_CLASSIFICATION	1.520609691855496E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999847939030814	WITHOUT_CLASSIFICATION	1.520609691855496E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999847939030814	WITHOUT_CLASSIFICATION	1.520609691855496E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999847939030814	WITHOUT_CLASSIFICATION	1.520609691855496E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709915586112	WITHOUT_CLASSIFICATION	2.9008441388821642E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999485113095329	WITHOUT_CLASSIFICATION	5.148869046719274E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999211528828044	WITHOUT_CLASSIFICATION	7.88471171956603E-5	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999860528967631	WITHOUT_CLASSIFICATION	1.394710323694155E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665687483619	WITHOUT_CLASSIFICATION	3.343125163816345E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694981852876	WITHOUT_CLASSIFICATION	3.050181471240633E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999861621275187	WITHOUT_CLASSIFICATION	1.3837872481251715E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999917661837805	WITHOUT_CLASSIFICATION	8.23381621945895E-6	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999812046794229	WITHOUT_CLASSIFICATION	1.87953205770945E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999695649676283	WITHOUT_CLASSIFICATION	3.0435032371664877E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999940978609327	WITHOUT_CLASSIFICATION	5.902139067294037E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999864684130182	WITHOUT_CLASSIFICATION	1.353158698175025E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999890600254605	WITHOUT_CLASSIFICATION	1.0939974539619865E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999890600254605	WITHOUT_CLASSIFICATION	1.0939974539619865E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999890600254605	WITHOUT_CLASSIFICATION	1.0939974539619865E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999986393695385	WITHOUT_CLASSIFICATION	1.360630461503763E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999849672409328	WITHOUT_CLASSIFICATION	1.5032759067165073E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987655232456	WITHOUT_CLASSIFICATION	1.2344767543536809E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665120159584	WITHOUT_CLASSIFICATION	3.348798404162164E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999900462451574	WITHOUT_CLASSIFICATION	9.953754842510368E-6	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973220154446	WITHOUT_CLASSIFICATION	2.6779845554017343E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999980672396412	WITHOUT_CLASSIFICATION	1.9327603588323796E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999808803319407	WITHOUT_CLASSIFICATION	1.9119668059383645E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999969607572188	WITHOUT_CLASSIFICATION	3.0392427812136083E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999300283872103	WITHOUT_CLASSIFICATION	6.997161278969675E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671450993551	WITHOUT_CLASSIFICATION	3.2854900644837214E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999901849538095	WITHOUT_CLASSIFICATION	9.815046190390077E-6	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999698543004304	WITHOUT_CLASSIFICATION	3.014569956963272E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999512631084913	WITHOUT_CLASSIFICATION	4.873689150878983E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998491435953245	WITHOUT_CLASSIFICATION	1.508564046755092E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999701159347836	WITHOUT_CLASSIFICATION	2.9884065216345437E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999695213251779	WITHOUT_CLASSIFICATION	3.0478674822120887E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999915178949429	WITHOUT_CLASSIFICATION	8.48210505712532E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997361711604	WITHOUT_CLASSIFICATION	2.6382883952929064E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999825649593385	WITHOUT_CLASSIFICATION	1.7435040661632093E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999452122089	WITHOUT_CLASSIFICATION	5.47877910986735E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999434958220793	WITHOUT_CLASSIFICATION	5.6504177920549746E-5	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999991641463801	WITHOUT_CLASSIFICATION	8.358536198969435E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9997558558841285	WITHOUT_CLASSIFICATION	2.441441158715677E-4	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999922892581498	WITHOUT_CLASSIFICATION	7.710741850167004E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999708323202243	WITHOUT_CLASSIFICATION	2.9167679775726862E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999872247825701	WITHOUT_CLASSIFICATION	1.2775217429896474E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999929256221755	WITHOUT_CLASSIFICATION	7.074377824548762E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999982558214133	WITHOUT_CLASSIFICATION	1.7441785867223664E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999846236198926	WITHOUT_CLASSIFICATION	1.5376380107432976E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999343953793944	WITHOUT_CLASSIFICATION	6.560462060560769E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999940666533093	WITHOUT_CLASSIFICATION	5.933346690773692E-6	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9996749594860306	WITHOUT_CLASSIFICATION	3.25040513969374E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989548277847	WITHOUT_CLASSIFICATION	1.0451722153422628E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999797799810998	WITHOUT_CLASSIFICATION	2.0220018900255943E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999907451257802	WITHOUT_CLASSIFICATION	9.25487421977478E-6	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999803075202303	WITHOUT_CLASSIFICATION	1.969247976972232E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999612974062188	WITHOUT_CLASSIFICATION	3.870259378125301E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999795291380955	WITHOUT_CLASSIFICATION	2.0470861904506133E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999491001932137	WITHOUT_CLASSIFICATION	5.089980678619723E-5	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999856189078346	WITHOUT_CLASSIFICATION	1.43810921654062E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999929975153916	WITHOUT_CLASSIFICATION	7.002484608394646E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999571317541854	WITHOUT_CLASSIFICATION	4.286824581455434E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999972595207621	WITHOUT_CLASSIFICATION	2.7404792379058804E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999895426184268	WITHOUT_CLASSIFICATION	1.0457381573311464E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999792373878545	WITHOUT_CLASSIFICATION	2.0762612145542384E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999762407819766	WITHOUT_CLASSIFICATION	2.3759218023338753E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999957064712136	WITHOUT_CLASSIFICATION	4.293528786400405E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998868943193019	WITHOUT_CLASSIFICATION	1.131056806980247E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999570049779688	WITHOUT_CLASSIFICATION	4.299502203121224E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997805118047532	WITHOUT_CLASSIFICATION	2.1948819524674295E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999944593861042	WITHOUT_CLASSIFICATION	5.540613895752198E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.999992136665735	WITHOUT_CLASSIFICATION	7.863334264965385E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999506179850709	WITHOUT_CLASSIFICATION	4.938201492923924E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999924723015305	WITHOUT_CLASSIFICATION	7.5276984694294146E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999984981248537	WITHOUT_CLASSIFICATION	1.5018751463020007E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999667451024684	WITHOUT_CLASSIFICATION	3.325489753160442E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999942765888739	WITHOUT_CLASSIFICATION	5.7234111261893415E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999953164340071	WITHOUT_CLASSIFICATION	4.68356599285537E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9996279554310096	WITHOUT_CLASSIFICATION	3.720445689903999E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999876686841618	WITHOUT_CLASSIFICATION	1.2331315838211144E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999800731862483	WITHOUT_CLASSIFICATION	1.9926813751763492E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998871132846865	WITHOUT_CLASSIFICATION	1.1288671531359306E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995341947581	WITHOUT_CLASSIFICATION	4.658052419134847E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999679960162724	WITHOUT_CLASSIFICATION	3.2003983727553686E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9997317527200364	WITHOUT_CLASSIFICATION	2.6824727996361397E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999875944744953	WITHOUT_CLASSIFICATION	1.240552550467116E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999839081842912	WITHOUT_CLASSIFICATION	1.6091815708836342E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999983824605188	WITHOUT_CLASSIFICATION	1.6175394812408044E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999831334229143	WITHOUT_CLASSIFICATION	1.686657708564826E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999969124827229	WITHOUT_CLASSIFICATION	3.0875172770502426E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999896356300483	WITHOUT_CLASSIFICATION	1.0364369951669333E-5	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999756418573894	WITHOUT_CLASSIFICATION	2.4358142610607107E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999944811257026	WITHOUT_CLASSIFICATION	5.518874297393917E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992365244851	WITHOUT_CLASSIFICATION	7.634755149857081E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999934507906139	WITHOUT_CLASSIFICATION	6.549209386244911E-6	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999902483387176	WITHOUT_CLASSIFICATION	9.751661282351016E-6	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996282702911	WITHOUT_CLASSIFICATION	3.717297088126207E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999807986044124	WITHOUT_CLASSIFICATION	1.9201395587602116E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998727352929234	WITHOUT_CLASSIFICATION	1.2726470707655516E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999673750223518	WITHOUT_CLASSIFICATION	3.262497764817951E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999342017883931	WITHOUT_CLASSIFICATION	6.579821160696377E-5	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999241202089203	WITHOUT_CLASSIFICATION	7.587979107970171E-4	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999718436293679	WITHOUT_CLASSIFICATION	2.8156370632179864E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999839324168669	WITHOUT_CLASSIFICATION	1.6067583133072696E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999907514836452	WITHOUT_CLASSIFICATION	9.24851635483763E-6	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999810174020571	WITHOUT_CLASSIFICATION	1.8982597942913098E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9975521325588788	WITHOUT_CLASSIFICATION	0.0024478674411212912	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999858078375686	WITHOUT_CLASSIFICATION	1.4192162431350602E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999790607241472	WITHOUT_CLASSIFICATION	2.0939275852795447E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999891378195578	WITHOUT_CLASSIFICATION	1.0862180442243882E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999792475525903	WITHOUT_CLASSIFICATION	2.075244740981061E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.999878561023364	WITHOUT_CLASSIFICATION	1.2143897663598995E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999549631561309	WITHOUT_CLASSIFICATION	4.5036843869230265E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999860971350095	WITHOUT_CLASSIFICATION	1.3902864990509136E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999877817517088	WITHOUT_CLASSIFICATION	1.2218248291250657E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999866756392779	WITHOUT_CLASSIFICATION	1.3324360722160123E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999861015702742	WITHOUT_CLASSIFICATION	1.3898429725657026E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999993231955479	WITHOUT_CLASSIFICATION	6.7680445209609775E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999993231955479	WITHOUT_CLASSIFICATION	6.7680445209609775E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999613446323621	WITHOUT_CLASSIFICATION	3.865536763788744E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999581548469797	WITHOUT_CLASSIFICATION	4.184515302032749E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999963431841031	WITHOUT_CLASSIFICATION	3.6568158969020144E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9997287688031254	WITHOUT_CLASSIFICATION	2.7123119687456356E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999877239101554	WITHOUT_CLASSIFICATION	1.2276089844421344E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9997933304591865	WITHOUT_CLASSIFICATION	2.066695408136367E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9986628657316078	WITHOUT_CLASSIFICATION	0.0013371342683923025	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9998029214115691	WITHOUT_CLASSIFICATION	1.9707858843087618E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999769969022843	WITHOUT_CLASSIFICATION	2.300309771572513E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9984281885817866	WITHOUT_CLASSIFICATION	0.0015718114182133494	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999927303816791	WITHOUT_CLASSIFICATION	7.269618320907406E-6	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999942778499819	WITHOUT_CLASSIFICATION	5.7221500180828044E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999860176670609	WITHOUT_CLASSIFICATION	1.3982332939097217E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999933160992033	WITHOUT_CLASSIFICATION	6.683900796665356E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999958963705133	WITHOUT_CLASSIFICATION	4.103629486611491E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999242634214071	WITHOUT_CLASSIFICATION	7.57365785929132E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999894109782702	WITHOUT_CLASSIFICATION	1.058902172973653E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999894109782702	WITHOUT_CLASSIFICATION	1.058902172973653E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999967889294303	WITHOUT_CLASSIFICATION	3.2110705697012E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998907890394207	WITHOUT_CLASSIFICATION	1.0921096057927799E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999910552565712	WITHOUT_CLASSIFICATION	8.944743428886253E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999584372124343	WITHOUT_CLASSIFICATION	4.1562787565774206E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999879861284727	WITHOUT_CLASSIFICATION	1.2013871527277538E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999869356161503	WITHOUT_CLASSIFICATION	1.3064383849754698E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999879861284727	WITHOUT_CLASSIFICATION	1.2013871527277538E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999681946937623	WITHOUT_CLASSIFICATION	3.180530623757307E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999857985836128	WITHOUT_CLASSIFICATION	1.4201416387325007E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999847495951002	WITHOUT_CLASSIFICATION	1.5250404899944451E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999847495951002	WITHOUT_CLASSIFICATION	1.5250404899944451E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999113263992294	WITHOUT_CLASSIFICATION	8.86736007705682E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999646772399683	WITHOUT_CLASSIFICATION	3.5322760031715127E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999668425276941	WITHOUT_CLASSIFICATION	3.315747230593024E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999967973377835	WITHOUT_CLASSIFICATION	3.2026622164984376E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999949205771	WITHOUT_CLASSIFICATION	5.0794229065228785E-8	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9997838746326859	WITHOUT_CLASSIFICATION	2.1612536731408335E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999940477974241	WITHOUT_CLASSIFICATION	5.9522025759761835E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999915097617175	WITHOUT_CLASSIFICATION	8.490238282425544E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942358715309	WITHOUT_CLASSIFICATION	5.764128469149811E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997563421672794	WITHOUT_CLASSIFICATION	2.436578327205762E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999890145843292	WITHOUT_CLASSIFICATION	1.0985415670894976E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.999965659242639	WITHOUT_CLASSIFICATION	3.434075736090777E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9978464423251309	WITHOUT_CLASSIFICATION	0.002153557674869128	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999810395130952	WITHOUT_CLASSIFICATION	1.896048690477406E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999697543260737	WITHOUT_CLASSIFICATION	3.0245673926265626E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952580250643	WITHOUT_CLASSIFICATION	4.741974935715387E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999908151593114	WITHOUT_CLASSIFICATION	9.184840688636133E-6	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998667830164254	WITHOUT_CLASSIFICATION	1.33216983574524E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999525684556506	WITHOUT_CLASSIFICATION	4.743154434930227E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999424844029214	WITHOUT_CLASSIFICATION	5.751559707853398E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999828748181723	WITHOUT_CLASSIFICATION	1.712518182777611E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999890424765983	WITHOUT_CLASSIFICATION	1.0957523401675696E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999809747085913	WITHOUT_CLASSIFICATION	1.9025291408735333E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999714165704521	WITHOUT_CLASSIFICATION	2.858342954790285E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999624508172642	WITHOUT_CLASSIFICATION	3.7549182735866893E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9994638764256788	WITHOUT_CLASSIFICATION	5.361235743212232E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999808344456228	WITHOUT_CLASSIFICATION	1.9165554377187487E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999992582640648	WITHOUT_CLASSIFICATION	7.41735935186283E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984002142647	WITHOUT_CLASSIFICATION	1.5997857353286485E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999841160401122	WITHOUT_CLASSIFICATION	1.5883959887885746E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999850836362545	WITHOUT_CLASSIFICATION	1.4916363745546046E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999361056974305	WITHOUT_CLASSIFICATION	6.38943025695331E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999481518381703	WITHOUT_CLASSIFICATION	5.184816182972537E-5	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999760199972021	WITHOUT_CLASSIFICATION	2.398000279788338E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999747458161304	WITHOUT_CLASSIFICATION	2.525418386948353E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999884384974147	WITHOUT_CLASSIFICATION	1.1561502585279626E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999884384974147	WITHOUT_CLASSIFICATION	1.1561502585279626E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999872110703751	WITHOUT_CLASSIFICATION	1.2788929624850872E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999507858623097	WITHOUT_CLASSIFICATION	4.9214137690232215E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999947261276164	WITHOUT_CLASSIFICATION	5.273872383603667E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.999988785173323	WITHOUT_CLASSIFICATION	1.1214826677035704E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999634165517041	WITHOUT_CLASSIFICATION	3.658344829590967E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999995625330292	WITHOUT_CLASSIFICATION	4.374669707998813E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999879350453	WITHOUT_CLASSIFICATION	1.2064954660807355E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999645636912653	WITHOUT_CLASSIFICATION	3.5436308734688874E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999872110703751	WITHOUT_CLASSIFICATION	1.2788929624850872E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999507858623097	WITHOUT_CLASSIFICATION	4.9214137690232215E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998237865443517	WITHOUT_CLASSIFICATION	1.762134556482643E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999346545958366	WITHOUT_CLASSIFICATION	6.5345404163411E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999942531491027	WITHOUT_CLASSIFICATION	5.746850897309672E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999661089613823	WITHOUT_CLASSIFICATION	3.389103861778304E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999877704183221	WITHOUT_CLASSIFICATION	1.2229581677829468E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9998845034278937	WITHOUT_CLASSIFICATION	1.1549657210637151E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999870535473746	WITHOUT_CLASSIFICATION	1.2946452625410501E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999896514456863	WITHOUT_CLASSIFICATION	1.0348554313755919E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999995630583294	WITHOUT_CLASSIFICATION	4.3694167059829055E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998995565013328	WITHOUT_CLASSIFICATION	0.001004434986672044	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999869387673243	WITHOUT_CLASSIFICATION	1.3061232675726572E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998995565013328	WITHOUT_CLASSIFICATION	0.001004434986672044	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998696750389265	WITHOUT_CLASSIFICATION	1.303249610734044E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999679960162724	WITHOUT_CLASSIFICATION	3.2003983727553686E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998696750389265	WITHOUT_CLASSIFICATION	1.303249610734044E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998590064430866	WITHOUT_CLASSIFICATION	1.409935569134624E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999349320911713	WITHOUT_CLASSIFICATION	6.506790882863468E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999896514456863	WITHOUT_CLASSIFICATION	1.0348554313755919E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999896514456863	WITHOUT_CLASSIFICATION	1.0348554313755919E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.99998528853835	WITHOUT_CLASSIFICATION	1.471146165010743E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999852931449704	WITHOUT_CLASSIFICATION	1.4706855029680353E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.99998528853835	WITHOUT_CLASSIFICATION	1.471146165010743E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999850640482846	WITHOUT_CLASSIFICATION	1.4935951715422382E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999983711907358	WITHOUT_CLASSIFICATION	1.628809264206439E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999660397459244	WITHOUT_CLASSIFICATION	3.3960254075702636E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999265439745736	WITHOUT_CLASSIFICATION	7.345602542633313E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999854900904649	WITHOUT_CLASSIFICATION	1.4509909535050985E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999582208124078	WITHOUT_CLASSIFICATION	4.1779187592249414E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999872233870449	WITHOUT_CLASSIFICATION	1.2776612955060963E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999875978324746	WITHOUT_CLASSIFICATION	1.240216752548318E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.999984686885543	WITHOUT_CLASSIFICATION	1.5313114457034004E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999968794156646	WITHOUT_CLASSIFICATION	3.12058433538886E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999889701901729	WITHOUT_CLASSIFICATION	1.102980982706349E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999876729959185	WITHOUT_CLASSIFICATION	1.2327004081497843E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999785349017017	WITHOUT_CLASSIFICATION	2.1465098298227826E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999820439069088	WITHOUT_CLASSIFICATION	1.7956093091141616E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999743663962963	WITHOUT_CLASSIFICATION	2.5633603703679996E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999902029843006	WITHOUT_CLASSIFICATION	9.797015699362432E-6	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999959059867237	WITHOUT_CLASSIFICATION	4.09401327622463E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999847352114768	WITHOUT_CLASSIFICATION	1.526478852321678E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999934191863998	WITHOUT_CLASSIFICATION	6.580813600197875E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999877705841582	WITHOUT_CLASSIFICATION	1.2229415841811658E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999848932738159	WITHOUT_CLASSIFICATION	1.5106726184213181E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999645737110526	WITHOUT_CLASSIFICATION	3.5426288947374134E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998569571471485	WITHOUT_CLASSIFICATION	1.4304285285140985E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999131632495987	WITHOUT_CLASSIFICATION	8.68367504013535E-5	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998889737471695	WITHOUT_CLASSIFICATION	1.1102625283063947E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.991879937691212	WITHOUT_CLASSIFICATION	0.008120062308788095	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999906523220365	WITHOUT_CLASSIFICATION	9.34767796356174E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999854900904649	WITHOUT_CLASSIFICATION	1.4509909535050985E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999829804010827	WITHOUT_CLASSIFICATION	1.701959891740221E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.999932677783131	WITHOUT_CLASSIFICATION	6.7322216868952E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9355283293663346	WITHOUT_CLASSIFICATION	0.06447167063366536	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999511511472572	WITHOUT_CLASSIFICATION	4.8848852742832283E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999841049457058	WITHOUT_CLASSIFICATION	1.5895054294303526E-5	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999877769611568	WITHOUT_CLASSIFICATION	1.2223038843304685E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999850640482846	WITHOUT_CLASSIFICATION	1.4935951715422382E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999850640482846	WITHOUT_CLASSIFICATION	1.4935951715422382E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999892992130474	WITHOUT_CLASSIFICATION	1.0700786952706399E-5	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999817566191267	WITHOUT_CLASSIFICATION	1.8243380873309828E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999891179044967	WITHOUT_CLASSIFICATION	1.0882095503159228E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999856667144192	WITHOUT_CLASSIFICATION	1.4333285580781042E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998766118999408	WITHOUT_CLASSIFICATION	1.233881000591988E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999878593869668	WITHOUT_CLASSIFICATION	1.2140613033219644E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999946756263701	WITHOUT_CLASSIFICATION	5.324373629939258E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999888081031986	WITHOUT_CLASSIFICATION	1.1191896801369799E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999425640554833	WITHOUT_CLASSIFICATION	5.743594451665109E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999898714502513	WITHOUT_CLASSIFICATION	1.0128549748615819E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880690291194	WITHOUT_CLASSIFICATION	1.1930970880484617E-5	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999785349017017	WITHOUT_CLASSIFICATION	2.1465098298227826E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999872110703751	WITHOUT_CLASSIFICATION	1.2788929624850872E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880690291194	WITHOUT_CLASSIFICATION	1.1930970880484617E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999913084121635	WITHOUT_CLASSIFICATION	8.691587836410655E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999981684067417	WITHOUT_CLASSIFICATION	1.831593258295527E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999835223961446	WITHOUT_CLASSIFICATION	1.647760385533644E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9979033399092033	WITHOUT_CLASSIFICATION	0.002096660090796685	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999494587152604	WITHOUT_CLASSIFICATION	5.054128473958318E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999982874486769	WITHOUT_CLASSIFICATION	1.7125513231395718E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999946890541735	WITHOUT_CLASSIFICATION	5.310945826486374E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999863558722144	WITHOUT_CLASSIFICATION	1.3644127785692926E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999872017075919	WITHOUT_CLASSIFICATION	1.279829240812076E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999748885659878	WITHOUT_CLASSIFICATION	2.5111434012068398E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999554248750254	WITHOUT_CLASSIFICATION	4.4575124974638995E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999554248750254	WITHOUT_CLASSIFICATION	4.4575124974638995E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999627045773757	WITHOUT_CLASSIFICATION	3.7295422624292056E-5	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999018822725938	WITHOUT_CLASSIFICATION	9.811772740626045E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880690291194	WITHOUT_CLASSIFICATION	1.1930970880484617E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999494587152604	WITHOUT_CLASSIFICATION	5.054128473958318E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999946890541735	WITHOUT_CLASSIFICATION	5.310945826486374E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999737464820843	WITHOUT_CLASSIFICATION	2.6253517915695296E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999995529941273	WITHOUT_CLASSIFICATION	4.470058727130774E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999859148432908	WITHOUT_CLASSIFICATION	1.4085156709326029E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999880150912324	WITHOUT_CLASSIFICATION	1.1984908767662353E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999892250280251	WITHOUT_CLASSIFICATION	1.0774971974997413E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872028948559	WITHOUT_CLASSIFICATION	1.2797105144189618E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999913084121635	WITHOUT_CLASSIFICATION	8.691587836410655E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999679920296188	WITHOUT_CLASSIFICATION	3.2007970381155374E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999852602716127	WITHOUT_CLASSIFICATION	1.4739728387189952E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999341745511356	WITHOUT_CLASSIFICATION	6.58254488643058E-5	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999694365373676	WITHOUT_CLASSIFICATION	3.0563462632305835E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999684544493448	WITHOUT_CLASSIFICATION	3.154555065532259E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.999990988524474	WITHOUT_CLASSIFICATION	9.011475525887996E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998590064430866	WITHOUT_CLASSIFICATION	1.409935569134624E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868228532978	WITHOUT_CLASSIFICATION	1.3177146702269316E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998784268193321	WITHOUT_CLASSIFICATION	1.2157318066793464E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999795930402247	WITHOUT_CLASSIFICATION	2.0406959775309976E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999972314556461	WITHOUT_CLASSIFICATION	2.768544353936287E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999964910716616	WITHOUT_CLASSIFICATION	3.5089283385253134E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999986984807012	WITHOUT_CLASSIFICATION	1.301519298790413E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999848494290371	WITHOUT_CLASSIFICATION	1.5150570962997485E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999755517567667	WITHOUT_CLASSIFICATION	2.4448243233314648E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999872028948559	WITHOUT_CLASSIFICATION	1.2797105144189618E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999847329155062	WITHOUT_CLASSIFICATION	1.526708449384889E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999629585385191	WITHOUT_CLASSIFICATION	3.704146148088468E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999627003229494	WITHOUT_CLASSIFICATION	3.72996770505621E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999932245434271	WITHOUT_CLASSIFICATION	6.775456572874812E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998782188602366	WITHOUT_CLASSIFICATION	1.217811397634356E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999692263964144	WITHOUT_CLASSIFICATION	3.0773603585590395E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998979796856126	WITHOUT_CLASSIFICATION	1.0202031438746211E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998052860087157	WITHOUT_CLASSIFICATION	1.9471399128435858E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999868851346396	WITHOUT_CLASSIFICATION	1.3114865360387912E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999871391148943	WITHOUT_CLASSIFICATION	1.2860885105652725E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999951594717619	WITHOUT_CLASSIFICATION	4.840528238047672E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999910786063195	WITHOUT_CLASSIFICATION	8.921393680596616E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999988296626426	WITHOUT_CLASSIFICATION	1.1703373573911237E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999986093752879	WITHOUT_CLASSIFICATION	1.3906247121042447E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999634340532748	WITHOUT_CLASSIFICATION	3.6565946725184094E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999930566184226	WITHOUT_CLASSIFICATION	6.943381577402691E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999605697674324	WITHOUT_CLASSIFICATION	3.9430232567597505E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999780843515285	WITHOUT_CLASSIFICATION	2.1915648471462078E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999503714895583	WITHOUT_CLASSIFICATION	4.962851044169594E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999531559619992	WITHOUT_CLASSIFICATION	4.684403800090617E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999873311972229	WITHOUT_CLASSIFICATION	1.2668802777064125E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999421855600927	WITHOUT_CLASSIFICATION	5.781443990729162E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9961004522447238	WITHOUT_CLASSIFICATION	0.003899547755276237	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998738300714438	WITHOUT_CLASSIFICATION	1.2616992855621266E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999745331134337	WITHOUT_CLASSIFICATION	2.5466886566373788E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999612294827357	WITHOUT_CLASSIFICATION	3.877051726430839E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9890241810614855	WITHOUT_CLASSIFICATION	0.01097581893851447	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999631304437256	WITHOUT_CLASSIFICATION	3.686955627425575E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999848802505874	WITHOUT_CLASSIFICATION	1.511974941262395E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999863111373002	WITHOUT_CLASSIFICATION	1.3688862699671798E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999813191305985	WITHOUT_CLASSIFICATION	1.8680869401508708E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999357514109146	WITHOUT_CLASSIFICATION	6.424858908530427E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999467367612618	WITHOUT_CLASSIFICATION	5.326323873817972E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.999946519270043	WITHOUT_CLASSIFICATION	5.348072995697412E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998261694999417	WITHOUT_CLASSIFICATION	1.7383050005828987E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999467367612618	WITHOUT_CLASSIFICATION	5.326323873817972E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999357514109146	WITHOUT_CLASSIFICATION	6.424858908530427E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.999946519270043	WITHOUT_CLASSIFICATION	5.348072995697412E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999712160471387	WITHOUT_CLASSIFICATION	2.8783952861280664E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999797473338085	WITHOUT_CLASSIFICATION	2.025266619148745E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9992293953602861	WITHOUT_CLASSIFICATION	7.706046397140078E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999991261503813	WITHOUT_CLASSIFICATION	8.73849618694023E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999996947589732	WITHOUT_CLASSIFICATION	3.05241026789975E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9891357464405849	WITHOUT_CLASSIFICATION	0.010864253559415105	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999502375863142	WITHOUT_CLASSIFICATION	4.976241368581838E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999988537441538	WITHOUT_CLASSIFICATION	1.1462558461972863E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999971100960849	WITHOUT_CLASSIFICATION	2.889903915003139E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999863251798075	WITHOUT_CLASSIFICATION	1.3674820192507968E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.999987220957736	WITHOUT_CLASSIFICATION	1.2779042264012144E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999927833838678	WITHOUT_CLASSIFICATION	7.216616132115213E-6	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.99997530708161	WITHOUT_CLASSIFICATION	2.4692918390091294E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999991261503813	WITHOUT_CLASSIFICATION	8.73849618694023E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999938831891005	WITHOUT_CLASSIFICATION	6.116810899518629E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999897740252723	WITHOUT_CLASSIFICATION	1.0225974727612495E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998337788236037	WITHOUT_CLASSIFICATION	1.662211763962573E-4	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999988798906644	WITHOUT_CLASSIFICATION	1.1201093355650438E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999557362189029	WITHOUT_CLASSIFICATION	4.4263781097191246E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999517352595714	WITHOUT_CLASSIFICATION	4.826474042865761E-5	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999457467692554	WITHOUT_CLASSIFICATION	5.425323074458526E-5	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999973443481224	WITHOUT_CLASSIFICATION	2.6556518776992957E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998397143994374	WITHOUT_CLASSIFICATION	1.60285600562672E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999405801446921	WITHOUT_CLASSIFICATION	5.94198553080288E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999517352595714	WITHOUT_CLASSIFICATION	4.826474042865761E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999517352595714	WITHOUT_CLASSIFICATION	4.826474042865761E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999991517946318	WITHOUT_CLASSIFICATION	8.482053682013901E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999991517946318	WITHOUT_CLASSIFICATION	8.482053682013901E-6	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999562710526778	WITHOUT_CLASSIFICATION	4.372894732222679E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998337788236037	WITHOUT_CLASSIFICATION	1.662211763962573E-4	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999128446739541	WITHOUT_CLASSIFICATION	8.715532604584461E-5	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999857239712334	WITHOUT_CLASSIFICATION	1.4276028766443092E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999900625336355	WITHOUT_CLASSIFICATION	9.937466364393912E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999900625336355	WITHOUT_CLASSIFICATION	9.937466364393912E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999938644256291	WITHOUT_CLASSIFICATION	6.135574370953276E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999248734315669	WITHOUT_CLASSIFICATION	7.51265684331354E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999983471659455	WITHOUT_CLASSIFICATION	1.6528340545034312E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.999979677283307	WITHOUT_CLASSIFICATION	2.0322716693102583E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999930378185908	WITHOUT_CLASSIFICATION	6.962181409136007E-6	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998879084391	WITHOUT_CLASSIFICATION	1.1209156095591727E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999905439715624	WITHOUT_CLASSIFICATION	9.456028437629552E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999783836516956	WITHOUT_CLASSIFICATION	2.1616348304419226E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.999990617126927	WITHOUT_CLASSIFICATION	9.38287307284801E-6	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999940797678823	WITHOUT_CLASSIFICATION	5.920232117560782E-6	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999792983995641	WITHOUT_CLASSIFICATION	2.0701600435849644E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999613222167666	WITHOUT_CLASSIFICATION	3.867778323336836E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999629063378527	WITHOUT_CLASSIFICATION	3.709366214743025E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999882661239783	WITHOUT_CLASSIFICATION	1.173387602171733E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999755184629812	WITHOUT_CLASSIFICATION	2.4481537018813578E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999753212708873	WITHOUT_CLASSIFICATION	2.467872911267122E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697569571331	WITHOUT_CLASSIFICATION	3.024304286687617E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999825554738518	WITHOUT_CLASSIFICATION	1.7444526148120336E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999878855915598	WITHOUT_CLASSIFICATION	1.2114408440200567E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999971310369378	WITHOUT_CLASSIFICATION	2.8689630621575854E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999885164166168	WITHOUT_CLASSIFICATION	1.1483583383199467E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9998819074329749	WITHOUT_CLASSIFICATION	1.1809256702518391E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999873292639736	WITHOUT_CLASSIFICATION	1.2670736026310892E-5	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999890176980138	WITHOUT_CLASSIFICATION	1.098230198618979E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999920183501634	WITHOUT_CLASSIFICATION	7.981649836659401E-6	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.99998462007954	WITHOUT_CLASSIFICATION	1.5379920459922607E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999871391148943	WITHOUT_CLASSIFICATION	1.2860885105652725E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999878325705147	WITHOUT_CLASSIFICATION	1.2167429485175355E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999908068296645	WITHOUT_CLASSIFICATION	9.193170335444115E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665365995695	WITHOUT_CLASSIFICATION	3.34634004306413E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660547707195	WITHOUT_CLASSIFICATION	3.394522928044785E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999885711124169	WITHOUT_CLASSIFICATION	1.1428887583034715E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999885711124169	WITHOUT_CLASSIFICATION	1.1428887583034715E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999722719256051	WITHOUT_CLASSIFICATION	2.772807439490444E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999892724302739	WITHOUT_CLASSIFICATION	1.0727569726166967E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999878958034311	WITHOUT_CLASSIFICATION	1.2104196568941848E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999878958034311	WITHOUT_CLASSIFICATION	1.2104196568941848E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998929076925275	WITHOUT_CLASSIFICATION	1.0709230747254478E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998905645550745	WITHOUT_CLASSIFICATION	1.0943544492552777E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999866514052187	WITHOUT_CLASSIFICATION	1.3348594781316374E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999904837397275	WITHOUT_CLASSIFICATION	9.516260272511082E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999855767261787	WITHOUT_CLASSIFICATION	1.4423273821154096E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996785403773691	WITHOUT_CLASSIFICATION	3.214596226308225E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.999972747545143	WITHOUT_CLASSIFICATION	2.725245485707106E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999947019565505	WITHOUT_CLASSIFICATION	5.2980434495037745E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999947019565505	WITHOUT_CLASSIFICATION	5.2980434495037745E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999911729540373	WITHOUT_CLASSIFICATION	8.827045962697675E-6	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9998911813563403	WITHOUT_CLASSIFICATION	1.0881864365983222E-4	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9998911813563403	WITHOUT_CLASSIFICATION	1.0881864365983222E-4	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999532458604297	WITHOUT_CLASSIFICATION	4.675413957044809E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.999986392774468	WITHOUT_CLASSIFICATION	1.3607225531863403E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999877649291762	WITHOUT_CLASSIFICATION	1.2235070823764289E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999704104032676	WITHOUT_CLASSIFICATION	2.9589596732418318E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999900196024052	WITHOUT_CLASSIFICATION	9.980397594913772E-6	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999419749952277	WITHOUT_CLASSIFICATION	5.8025004772218686E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998176330078732	WITHOUT_CLASSIFICATION	1.8236699212686655E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999909202671191	WITHOUT_CLASSIFICATION	9.079732880966822E-6	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998399334038409	WITHOUT_CLASSIFICATION	1.6006659615914112E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924540280215	WITHOUT_CLASSIFICATION	7.545971978525068E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999554260659391	WITHOUT_CLASSIFICATION	4.4573934060986735E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999872095661566	WITHOUT_CLASSIFICATION	1.2790433843473273E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999872095661566	WITHOUT_CLASSIFICATION	1.2790433843473273E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999872095661566	WITHOUT_CLASSIFICATION	1.2790433843473273E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999872095661566	WITHOUT_CLASSIFICATION	1.2790433843473273E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999971403767452	WITHOUT_CLASSIFICATION	2.8596232548096646E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998837443419643	WITHOUT_CLASSIFICATION	1.16255658035733E-4	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999836330550993	WITHOUT_CLASSIFICATION	1.636694490068217E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999982360097342	WITHOUT_CLASSIFICATION	1.7639902658074624E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999240873501042	WITHOUT_CLASSIFICATION	7.591264989584591E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997298842485192	WITHOUT_CLASSIFICATION	2.7011575148089295E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999234463385602	WITHOUT_CLASSIFICATION	7.655366143976198E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999982836317605	WITHOUT_CLASSIFICATION	1.71636823959489E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999787969571403	WITHOUT_CLASSIFICATION	2.120304285969809E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999861069868751	WITHOUT_CLASSIFICATION	1.3893013124947256E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616998045939	WITHOUT_CLASSIFICATION	3.8300195406029976E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9900258918302685	WITHOUT_CLASSIFICATION	0.009974108169731506	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997343182173354	WITHOUT_CLASSIFICATION	2.656817826646367E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999322652728763	WITHOUT_CLASSIFICATION	6.773472712377539E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616998045939	WITHOUT_CLASSIFICATION	3.8300195406029976E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9980756739359201	WITHOUT_CLASSIFICATION	0.001924326064079879	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999957362998221	WITHOUT_CLASSIFICATION	4.26370017788523E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998654589011243	WITHOUT_CLASSIFICATION	1.3454109887573218E-4	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997804230868776	WITHOUT_CLASSIFICATION	2.1957691312229395E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995925527998731	WITHOUT_CLASSIFICATION	4.074472001268951E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998987938299096	WITHOUT_CLASSIFICATION	1.0120617009030928E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999969363790354	WITHOUT_CLASSIFICATION	3.0636209645314526E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999900690815132	WITHOUT_CLASSIFICATION	9.930918486853085E-6	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913906905834	WITHOUT_CLASSIFICATION	8.609309416672244E-6	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999873050717089	WITHOUT_CLASSIFICATION	1.2694928291210245E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913906905834	WITHOUT_CLASSIFICATION	8.609309416672244E-6	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999851416593103	WITHOUT_CLASSIFICATION	1.4858340689726502E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997003283427067	WITHOUT_CLASSIFICATION	2.996716572932777E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997567322145683	WITHOUT_CLASSIFICATION	2.432677854317351E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999963751843433	WITHOUT_CLASSIFICATION	3.6248156567281905E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999995362163913	WITHOUT_CLASSIFICATION	4.6378360869494635E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999153571432718	WITHOUT_CLASSIFICATION	8.464285672819515E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999980625816586	WITHOUT_CLASSIFICATION	1.9374183414021995E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996605808770629	WITHOUT_CLASSIFICATION	3.394191229371533E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999980625816586	WITHOUT_CLASSIFICATION	1.9374183414021995E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999852926805971	WITHOUT_CLASSIFICATION	1.4707319402970122E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999852217182438	WITHOUT_CLASSIFICATION	1.477828175635059E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999768899095395	WITHOUT_CLASSIFICATION	2.3110090460447707E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999541794147003	WITHOUT_CLASSIFICATION	4.582058529964241E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999807644621305	WITHOUT_CLASSIFICATION	1.923553786961944E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997235346493496	WITHOUT_CLASSIFICATION	2.7646535065039586E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999153571432718	WITHOUT_CLASSIFICATION	8.464285672819515E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996605808770629	WITHOUT_CLASSIFICATION	3.394191229371533E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999852926805971	WITHOUT_CLASSIFICATION	1.4707319402970122E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999436428444457	WITHOUT_CLASSIFICATION	5.63571555541888E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999932650514263	WITHOUT_CLASSIFICATION	6.734948573702093E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999894778396611	WITHOUT_CLASSIFICATION	1.0522160338949656E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999995751078385	WITHOUT_CLASSIFICATION	4.248921614403734E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.999992341221125	WITHOUT_CLASSIFICATION	7.658778875012763E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999677372699741	WITHOUT_CLASSIFICATION	3.2262730025771845E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999927976039158	WITHOUT_CLASSIFICATION	7.202396084295172E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697569571331	WITHOUT_CLASSIFICATION	3.024304286687617E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999852217182438	WITHOUT_CLASSIFICATION	1.477828175635059E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999926725218278	WITHOUT_CLASSIFICATION	7.327478172180474E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.99998528853835	WITHOUT_CLASSIFICATION	1.471146165010743E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999559917507428	WITHOUT_CLASSIFICATION	4.4008249257193014E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999644606909016	WITHOUT_CLASSIFICATION	3.553930909832326E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697569571331	WITHOUT_CLASSIFICATION	3.024304286687617E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999795369601588	WITHOUT_CLASSIFICATION	2.0463039841193492E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697569571331	WITHOUT_CLASSIFICATION	3.024304286687617E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999780396055948	WITHOUT_CLASSIFICATION	2.1960394405212675E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999986669967399	WITHOUT_CLASSIFICATION	1.33300326010494E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999682966262714	WITHOUT_CLASSIFICATION	3.1703373728519436E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999560572152106	WITHOUT_CLASSIFICATION	4.394278478933047E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999958788778065	WITHOUT_CLASSIFICATION	4.121122193465517E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.99998901230647	WITHOUT_CLASSIFICATION	1.0987693530022612E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999880689854745	WITHOUT_CLASSIFICATION	1.1931014525561157E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999754076187917	WITHOUT_CLASSIFICATION	2.4592381208286286E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999640276643408	WITHOUT_CLASSIFICATION	3.5972335659202785E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9998282835827622	WITHOUT_CLASSIFICATION	1.7171641723784427E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999893119985999	WITHOUT_CLASSIFICATION	1.0688001400245042E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.999856197584416	WITHOUT_CLASSIFICATION	1.4380241558391123E-4	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9996864171359364	WITHOUT_CLASSIFICATION	3.1358286406355326E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999846995924834	WITHOUT_CLASSIFICATION	1.5300407516576425E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999560058841139	WITHOUT_CLASSIFICATION	4.3994115886120394E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999990458283348	WITHOUT_CLASSIFICATION	9.541716653013698E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999940628450841	WITHOUT_CLASSIFICATION	5.9371549159071525E-6	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999066001816633	WITHOUT_CLASSIFICATION	9.339981833666927E-5	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999979943024445	WITHOUT_CLASSIFICATION	2.0056975554761573E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999915826034281	WITHOUT_CLASSIFICATION	8.417396571847295E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999474710989658	WITHOUT_CLASSIFICATION	5.252890103422387E-5	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999474710989658	WITHOUT_CLASSIFICATION	5.252890103422387E-5	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999928221704296	WITHOUT_CLASSIFICATION	7.177829570381139E-6	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999625168807053	WITHOUT_CLASSIFICATION	3.748311929472476E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999872076416401	WITHOUT_CLASSIFICATION	1.2792358359873425E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999707442561503	WITHOUT_CLASSIFICATION	2.9255743849693674E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999996470504011	WITHOUT_CLASSIFICATION	3.529495987801065E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999943455734244	WITHOUT_CLASSIFICATION	5.6544265756381495E-6	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999657007285717	WITHOUT_CLASSIFICATION	3.4299271428362504E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999632733657218	WITHOUT_CLASSIFICATION	3.67266342782149E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9940284919254161	WITHOUT_CLASSIFICATION	0.005971508074583824	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999885370028478	WITHOUT_CLASSIFICATION	1.1462997152113404E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999663450739382	WITHOUT_CLASSIFICATION	3.365492606173284E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999558945234913	WITHOUT_CLASSIFICATION	4.41054765087625E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998830151576272	WITHOUT_CLASSIFICATION	1.1698484237276862E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999805755767814	WITHOUT_CLASSIFICATION	1.942442321854213E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998411961529	WITHOUT_CLASSIFICATION	1.5880384708323595E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999832570206384	WITHOUT_CLASSIFICATION	1.674297936154647E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999914846673207	WITHOUT_CLASSIFICATION	8.51533267931907E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999914846673207	WITHOUT_CLASSIFICATION	8.51533267931907E-6	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999950812704351	WITHOUT_CLASSIFICATION	4.918729564915962E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999754076187917	WITHOUT_CLASSIFICATION	2.4592381208286286E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999575412545647	WITHOUT_CLASSIFICATION	4.245874543530108E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999684211683995	WITHOUT_CLASSIFICATION	3.1578831600550196E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999952628624306	WITHOUT_CLASSIFICATION	4.737137569488523E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999975101374515	WITHOUT_CLASSIFICATION	2.489862548514855E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999715572312918	WITHOUT_CLASSIFICATION	2.8442768708202408E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999873831639174	WITHOUT_CLASSIFICATION	1.261683608249482E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999878380842813	WITHOUT_CLASSIFICATION	1.216191571869591E-5	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999112236979664	WITHOUT_CLASSIFICATION	8.877630203362965E-5	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999935689741238	WITHOUT_CLASSIFICATION	6.431025876231659E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999977738914959	WITHOUT_CLASSIFICATION	2.226108504013711E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999627171098434	WITHOUT_CLASSIFICATION	3.7282890156618446E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999316419835459	WITHOUT_CLASSIFICATION	6.835801645408469E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999976723069254	WITHOUT_CLASSIFICATION	2.327693074558823E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999724231737679	WITHOUT_CLASSIFICATION	2.757682623204551E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999941194564176	WITHOUT_CLASSIFICATION	5.880543582460617E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999978993306607	WITHOUT_CLASSIFICATION	2.100669339238378E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999968102687035	WITHOUT_CLASSIFICATION	3.1897312965118393E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999976949065477	WITHOUT_CLASSIFICATION	2.305093452357175E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999626309111794	WITHOUT_CLASSIFICATION	3.736908882050495E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998808156648366	WITHOUT_CLASSIFICATION	1.1918433516344247E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999689086491783	WITHOUT_CLASSIFICATION	3.109135082179184E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999930891045566	WITHOUT_CLASSIFICATION	6.910895443411612E-6	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999762680741152	WITHOUT_CLASSIFICATION	2.3731925884800832E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999830180383674	WITHOUT_CLASSIFICATION	1.6981961632523355E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999081230073661	WITHOUT_CLASSIFICATION	9.187699263399282E-5	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998982293449076	WITHOUT_CLASSIFICATION	1.0177065509252215E-4	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999920486327633	WITHOUT_CLASSIFICATION	7.951367236703547E-5	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999175358680116	WITHOUT_CLASSIFICATION	8.246413198837653E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999666814532137	WITHOUT_CLASSIFICATION	3.3318546786407034E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999679488478379	WITHOUT_CLASSIFICATION	3.205115216199423E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999970096018005	WITHOUT_CLASSIFICATION	2.9903981994462527E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999968746096906	WITHOUT_CLASSIFICATION	3.1253903094000874E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999823954795831	WITHOUT_CLASSIFICATION	1.7604520416862297E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9977429269125658	WITHOUT_CLASSIFICATION	0.00225707308743413	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999555214593255	WITHOUT_CLASSIFICATION	4.447854067437505E-5	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999908588992554	WITHOUT_CLASSIFICATION	9.141100744550409E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997874447141779	WITHOUT_CLASSIFICATION	2.1255528582208444E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997874447141779	WITHOUT_CLASSIFICATION	2.1255528582208444E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999660208196326	WITHOUT_CLASSIFICATION	3.397918036738072E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999669465689809	WITHOUT_CLASSIFICATION	3.3053431019099186E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999700358546483	WITHOUT_CLASSIFICATION	2.9964145351683943E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999700358546483	WITHOUT_CLASSIFICATION	2.9964145351683943E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999972527700145	WITHOUT_CLASSIFICATION	2.747229985588238E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999943519085552	WITHOUT_CLASSIFICATION	5.648091444834254E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999854739813706	WITHOUT_CLASSIFICATION	1.452601862940256E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999976210028161	WITHOUT_CLASSIFICATION	2.37899718395314E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999671288514853	WITHOUT_CLASSIFICATION	3.2871148514629594E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999665166911781	WITHOUT_CLASSIFICATION	3.348330882199758E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999891990640525	WITHOUT_CLASSIFICATION	1.0800935947485757E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999891990640525	WITHOUT_CLASSIFICATION	1.0800935947485757E-5	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999665166911781	WITHOUT_CLASSIFICATION	3.348330882199758E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999847523024653	WITHOUT_CLASSIFICATION	1.5247697534601934E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999850640482846	WITHOUT_CLASSIFICATION	1.4935951715422382E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999846577409864	WITHOUT_CLASSIFICATION	1.534225901348184E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999846577409864	WITHOUT_CLASSIFICATION	1.534225901348184E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999888596609124	WITHOUT_CLASSIFICATION	1.1140339087639357E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999943966714909	WITHOUT_CLASSIFICATION	5.603328509126562E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999963694946082	WITHOUT_CLASSIFICATION	3.630505391723685E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999805943106963	WITHOUT_CLASSIFICATION	1.9405689303672336E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999874463136788	WITHOUT_CLASSIFICATION	1.2553686321320093E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999847206394011	WITHOUT_CLASSIFICATION	1.5279360598914437E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999965625442546	WITHOUT_CLASSIFICATION	3.437455745352744E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999943955536078	WITHOUT_CLASSIFICATION	5.604446392138063E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999871123682839	WITHOUT_CLASSIFICATION	1.2887631716019247E-5	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999742248476466	WITHOUT_CLASSIFICATION	2.577515235329783E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999949833943688	WITHOUT_CLASSIFICATION	5.016605631212178E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9991758832879344	WITHOUT_CLASSIFICATION	8.24116712065562E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999432219799695	WITHOUT_CLASSIFICATION	5.6778020030424975E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999998187266502	WITHOUT_CLASSIFICATION	1.8127334979614937E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999872950679901	WITHOUT_CLASSIFICATION	1.2704932009954723E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999743343587591	WITHOUT_CLASSIFICATION	2.566564124090537E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999940596802303	WITHOUT_CLASSIFICATION	5.940319769718828E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999680725719448	WITHOUT_CLASSIFICATION	3.192742805512511E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999798526672716	WITHOUT_CLASSIFICATION	2.0147332728297458E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999449868853219	WITHOUT_CLASSIFICATION	5.501311467823118E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999691325275032	WITHOUT_CLASSIFICATION	3.086747249680501E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999544567157037	WITHOUT_CLASSIFICATION	4.5543284296264E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9981267180199149	WITHOUT_CLASSIFICATION	0.001873281980085161	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999408235178039	WITHOUT_CLASSIFICATION	5.917648219607754E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999970425283999	WITHOUT_CLASSIFICATION	2.9574716001427695E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999819301044888	WITHOUT_CLASSIFICATION	1.8069895511258337E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999740064134112	WITHOUT_CLASSIFICATION	2.599358658893778E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999986598675941	WITHOUT_CLASSIFICATION	1.3401324059898762E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999972802146881	WITHOUT_CLASSIFICATION	2.7197853118994855E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999673407543066	WITHOUT_CLASSIFICATION	3.2659245693346514E-5	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999706841720595	WITHOUT_CLASSIFICATION	2.9315827940530726E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999905224964096	WITHOUT_CLASSIFICATION	9.47750359027173E-6	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999846628917967	WITHOUT_CLASSIFICATION	1.5337108203265838E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999901322899076	WITHOUT_CLASSIFICATION	9.867710092363823E-6	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999628791822203	WITHOUT_CLASSIFICATION	3.71208177798593E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999682550630603	WITHOUT_CLASSIFICATION	3.174493693962621E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999989166322157	WITHOUT_CLASSIFICATION	1.0833677842937754E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999937827836668	WITHOUT_CLASSIFICATION	6.217216333176002E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999978234485682	WITHOUT_CLASSIFICATION	2.1765514317119064E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999869097697247	WITHOUT_CLASSIFICATION	1.3090230275188591E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999859086321692	WITHOUT_CLASSIFICATION	1.4091367830764104E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999875093446382	WITHOUT_CLASSIFICATION	1.249065536183971E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999852530550125	WITHOUT_CLASSIFICATION	1.474694498757982E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999978629095333	WITHOUT_CLASSIFICATION	2.137090466693449E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999626499043215	WITHOUT_CLASSIFICATION	3.735009567854069E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999941425381802	WITHOUT_CLASSIFICATION	5.85746181979443E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999989685677741	WITHOUT_CLASSIFICATION	1.0314322258895394E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999629507313568	WITHOUT_CLASSIFICATION	3.704926864335352E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999925501572438	WITHOUT_CLASSIFICATION	7.44984275623991E-6	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9966555518244478	WITHOUT_CLASSIFICATION	0.003344448175552223	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999967197308703	WITHOUT_CLASSIFICATION	3.2802691296504975E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999966575758539	WITHOUT_CLASSIFICATION	3.3424241462130344E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999792130274583	WITHOUT_CLASSIFICATION	2.0786972541653107E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999952378826883	WITHOUT_CLASSIFICATION	4.762117311692732E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999751070073327	WITHOUT_CLASSIFICATION	2.489299266723689E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999943659624345	WITHOUT_CLASSIFICATION	5.634037565488729E-6	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999652935577795	WITHOUT_CLASSIFICATION	3.470644222055997E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988606091368	WITHOUT_CLASSIFICATION	1.1393908631483282E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988606091368	WITHOUT_CLASSIFICATION	1.1393908631483282E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999764736233508	WITHOUT_CLASSIFICATION	2.3526376649059098E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999813911942672	WITHOUT_CLASSIFICATION	1.8608805732823528E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999863780998894	WITHOUT_CLASSIFICATION	1.3621900110427456E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999630846173951	WITHOUT_CLASSIFICATION	3.6915382604795436E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999432192582937	WITHOUT_CLASSIFICATION	5.67807417062278E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9993115722363468	WITHOUT_CLASSIFICATION	6.88427763653207E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999688303074178	WITHOUT_CLASSIFICATION	3.116969258221388E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999989313325556	WITHOUT_CLASSIFICATION	1.0686674444242903E-6	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999652022192407	WITHOUT_CLASSIFICATION	3.479778075938196E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999914178225128	WITHOUT_CLASSIFICATION	8.58217748722132E-6	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999923121957672	WITHOUT_CLASSIFICATION	7.6878042327603E-6	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999039920792694	WITHOUT_CLASSIFICATION	9.600792073064211E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999948177631317	WITHOUT_CLASSIFICATION	5.182236868196208E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998405992057394	WITHOUT_CLASSIFICATION	1.5940079426049795E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999793757385629	WITHOUT_CLASSIFICATION	2.0624261437151005E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999793757385629	WITHOUT_CLASSIFICATION	2.0624261437151005E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999786301343841	WITHOUT_CLASSIFICATION	2.1369865615856037E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999690293364435	WITHOUT_CLASSIFICATION	3.0970663556426856E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999870145218779	WITHOUT_CLASSIFICATION	1.298547812204861E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999989053414202	WITHOUT_CLASSIFICATION	1.0946585798181771E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999822071869782	WITHOUT_CLASSIFICATION	1.7792813021890813E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762594776415	WITHOUT_CLASSIFICATION	2.3740522358606947E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999926643002902	WITHOUT_CLASSIFICATION	7.335699709871597E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999940942865212	WITHOUT_CLASSIFICATION	5.905713478860417E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999713509093967	WITHOUT_CLASSIFICATION	2.8649090603212778E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999984832466692	WITHOUT_CLASSIFICATION	1.5167533309157537E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999718029156276	WITHOUT_CLASSIFICATION	2.819708437240726E-4	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999929869045384	WITHOUT_CLASSIFICATION	7.013095461634469E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999693222416305	WITHOUT_CLASSIFICATION	3.0677758369488E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999812799739591	WITHOUT_CLASSIFICATION	1.8720026040882467E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999830899604768	WITHOUT_CLASSIFICATION	1.6910039523118413E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999983276360645	WITHOUT_CLASSIFICATION	1.67236393550557E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999932664407187	WITHOUT_CLASSIFICATION	6.733559281197063E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999309656682407	WITHOUT_CLASSIFICATION	6.903433175924666E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999632770520822	WITHOUT_CLASSIFICATION	3.672294791781699E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999651349347212	WITHOUT_CLASSIFICATION	3.48650652788176E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999628747547598	WITHOUT_CLASSIFICATION	3.7125245240144945E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999935248923718	WITHOUT_CLASSIFICATION	6.475107628206551E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999682468454785	WITHOUT_CLASSIFICATION	3.175315452148461E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999992810593321	WITHOUT_CLASSIFICATION	7.189406679404894E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999887587032065	WITHOUT_CLASSIFICATION	1.1241296793600579E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999846507593565	WITHOUT_CLASSIFICATION	1.5349240643485243E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998506116404249	WITHOUT_CLASSIFICATION	1.4938835957509168E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999874758511104	WITHOUT_CLASSIFICATION	1.2524148889649074E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999966396735251	WITHOUT_CLASSIFICATION	3.3603264748748334E-6	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999925586796246	WITHOUT_CLASSIFICATION	7.441320375475604E-6	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999973387193332	WITHOUT_CLASSIFICATION	2.661280666799659E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999675137447133	WITHOUT_CLASSIFICATION	3.248625528662369E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999240163801216	WITHOUT_CLASSIFICATION	7.598361987846272E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999999008981027	WITHOUT_CLASSIFICATION	9.910189729970538E-7	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999734156226469	WITHOUT_CLASSIFICATION	2.6584377353076322E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999896588421237	WITHOUT_CLASSIFICATION	1.0341157876300049E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999874051786993	WITHOUT_CLASSIFICATION	1.259482130053752E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999961771387897	WITHOUT_CLASSIFICATION	3.8228612102446426E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999869109184796	WITHOUT_CLASSIFICATION	1.3089081520310021E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999230478185447	WITHOUT_CLASSIFICATION	7.695218145528942E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9998572424499809	WITHOUT_CLASSIFICATION	1.4275755001921683E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999988060348365	WITHOUT_CLASSIFICATION	1.193965163502543E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998399305642025	WITHOUT_CLASSIFICATION	1.600694357976141E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998399305642025	WITHOUT_CLASSIFICATION	1.600694357976141E-4	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999887160362549	WITHOUT_CLASSIFICATION	1.1283963745076074E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999974803576925	WITHOUT_CLASSIFICATION	2.5196423074288E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9991344027724275	WITHOUT_CLASSIFICATION	8.65597227572516E-4	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999725534006663	WITHOUT_CLASSIFICATION	2.7446599333794522E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999939143879882	WITHOUT_CLASSIFICATION	6.085612011802184E-6	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999986113221312	WITHOUT_CLASSIFICATION	1.3886778687745057E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999789046785755	WITHOUT_CLASSIFICATION	2.1095321424467324E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998648391200404	WITHOUT_CLASSIFICATION	1.3516087995956995E-4	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999993428507697	WITHOUT_CLASSIFICATION	6.571492302117528E-7	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674006995033	WITHOUT_CLASSIFICATION	3.259930049670933E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673221434698	WITHOUT_CLASSIFICATION	3.267785653010403E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997583203681472	WITHOUT_CLASSIFICATION	2.416796318528486E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9938515757914742	WITHOUT_CLASSIFICATION	0.006148424208525853	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999981098679958	WITHOUT_CLASSIFICATION	1.8901320042559396E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999750250316071	WITHOUT_CLASSIFICATION	2.4974968392860443E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9992406544016712	WITHOUT_CLASSIFICATION	7.593455983287295E-4	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999929280363334	WITHOUT_CLASSIFICATION	7.0719636664907E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999986897509191	WITHOUT_CLASSIFICATION	1.3102490810030502E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999890794205101	WITHOUT_CLASSIFICATION	1.0920579489963155E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998710418368454	WITHOUT_CLASSIFICATION	1.2895816315454202E-4	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999963379061489	WITHOUT_CLASSIFICATION	3.662093851099095E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997253211752	WITHOUT_CLASSIFICATION	2.7467882477540937E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999743187328501	WITHOUT_CLASSIFICATION	2.5681267149841898E-5	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999349950281912	WITHOUT_CLASSIFICATION	6.500497180888631E-5	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999807293231854	WITHOUT_CLASSIFICATION	1.927067681457218E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999478920370044	WITHOUT_CLASSIFICATION	5.210796299563502E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999995908389445	WITHOUT_CLASSIFICATION	4.091610555041847E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999941955041066	WITHOUT_CLASSIFICATION	5.804495893369015E-6	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9990653202092062	WITHOUT_CLASSIFICATION	9.346797907938289E-4	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999346950012425	WITHOUT_CLASSIFICATION	6.530499875742947E-5	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999929441464027	WITHOUT_CLASSIFICATION	7.0558535973330675E-6	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999965834407742	WITHOUT_CLASSIFICATION	3.4165592259144977E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999971037700245	WITHOUT_CLASSIFICATION	2.8962299755406653E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999968864919464	WITHOUT_CLASSIFICATION	3.113508053554925E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983882021799	WITHOUT_CLASSIFICATION	1.611797820137407E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999834611570751	WITHOUT_CLASSIFICATION	1.6538842924889434E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999979465168647	WITHOUT_CLASSIFICATION	2.05348313529337E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999836435351322	WITHOUT_CLASSIFICATION	1.635646486777545E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999758344831432	WITHOUT_CLASSIFICATION	2.4165516856709318E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9994653304657959	WITHOUT_CLASSIFICATION	5.346695342041981E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999992328290883	WITHOUT_CLASSIFICATION	7.671709117033566E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998952542549192	WITHOUT_CLASSIFICATION	1.047457450808092E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999896908322191	WITHOUT_CLASSIFICATION	1.030916778083229E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999984821710766	WITHOUT_CLASSIFICATION	1.5178289233937942E-6	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999990171222114	WITHOUT_CLASSIFICATION	9.82877788606703E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9995973053959137	WITHOUT_CLASSIFICATION	4.026946040863475E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9990998239878688	WITHOUT_CLASSIFICATION	9.001760121312094E-4	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999375955040944	WITHOUT_CLASSIFICATION	6.240449590551099E-5	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996624165134	WITHOUT_CLASSIFICATION	3.375834865515664E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999948177631317	WITHOUT_CLASSIFICATION	5.182236868196208E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999982837959468	WITHOUT_CLASSIFICATION	1.7162040531983363E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999997675271454	WITHOUT_CLASSIFICATION	2.3247285448449752E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999955618418637	WITHOUT_CLASSIFICATION	4.4381581363769024E-6	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999987171997857	WITHOUT_CLASSIFICATION	1.2828002142684745E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999991297992625	WITHOUT_CLASSIFICATION	8.702007374977437E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999950532879498	WITHOUT_CLASSIFICATION	4.946712050165149E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999296859096094	WITHOUT_CLASSIFICATION	7.03140903906788E-5	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9991970943759022	WITHOUT_CLASSIFICATION	8.029056240977377E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999812046794229	WITHOUT_CLASSIFICATION	1.87953205770945E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999939141830345	WITHOUT_CLASSIFICATION	6.085816965400363E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999702658182548	WITHOUT_CLASSIFICATION	2.9734181745140717E-5	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9995394251179508	WITHOUT_CLASSIFICATION	4.605748820492093E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996498747756664	WITHOUT_CLASSIFICATION	3.501252243336192E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999929758478756	WITHOUT_CLASSIFICATION	7.0241521244101384E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998896740132128	WITHOUT_CLASSIFICATION	1.1032598678711467E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997993038272591	WITHOUT_CLASSIFICATION	2.0069617274079998E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999714329358655	WITHOUT_CLASSIFICATION	2.8567064134416025E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998458846099	WITHOUT_CLASSIFICATION	1.541153901239054E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999993121203017	WITHOUT_CLASSIFICATION	6.878796982848936E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997993038272591	WITHOUT_CLASSIFICATION	2.0069617274079998E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999445446216515	WITHOUT_CLASSIFICATION	5.545537834857675E-5	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999992155696823	WITHOUT_CLASSIFICATION	7.844303177835884E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999987035440563	WITHOUT_CLASSIFICATION	1.2964559437221428E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999835500302665	WITHOUT_CLASSIFICATION	1.6449969733486976E-5	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999817459469355	WITHOUT_CLASSIFICATION	1.8254053064596637E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998194143179099	WITHOUT_CLASSIFICATION	1.8058568209014213E-4	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999976418413373	WITHOUT_CLASSIFICATION	2.3581586626532457E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9978673110842344	WITHOUT_CLASSIFICATION	0.002132688915765567	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998735320590695	WITHOUT_CLASSIFICATION	1.264679409305504E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998039522087517	WITHOUT_CLASSIFICATION	1.9604779124833194E-4	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999430315227489	WITHOUT_CLASSIFICATION	5.6968477251222504E-5	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996751820255373	WITHOUT_CLASSIFICATION	3.2481797446261084E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999993060731624	WITHOUT_CLASSIFICATION	6.939268375948583E-6	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999765657142379	WITHOUT_CLASSIFICATION	2.3434285762135993E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999976115295943	WITHOUT_CLASSIFICATION	2.3884704056551188E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999988264108005	WITHOUT_CLASSIFICATION	1.1735891994963739E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999689086491783	WITHOUT_CLASSIFICATION	3.109135082179184E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999965455972976	WITHOUT_CLASSIFICATION	3.4544027023911096E-6	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999975377828755	WITHOUT_CLASSIFICATION	2.462217124436334E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997320406217914	WITHOUT_CLASSIFICATION	2.679593782086073E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999947445348466	WITHOUT_CLASSIFICATION	5.255465153356714E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999964268191072	WITHOUT_CLASSIFICATION	3.5731808927146E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999992241861807	WITHOUT_CLASSIFICATION	7.758138192985432E-6	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999986059343234	WITHOUT_CLASSIFICATION	1.3940656765543946E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999998181175677	WITHOUT_CLASSIFICATION	1.818824322301145E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999994047940868	WITHOUT_CLASSIFICATION	5.952059132827506E-7	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999352136275313	WITHOUT_CLASSIFICATION	6.478637246863936E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.99919027613983	WITHOUT_CLASSIFICATION	8.097238601699277E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998491435953245	WITHOUT_CLASSIFICATION	1.508564046755092E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999915415379586	WITHOUT_CLASSIFICATION	8.458462041369723E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999719797128901	WITHOUT_CLASSIFICATION	2.8020287109858673E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999975460105077	WITHOUT_CLASSIFICATION	2.4539894921640403E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999832632631136	WITHOUT_CLASSIFICATION	1.6736736886372122E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999928359519442	WITHOUT_CLASSIFICATION	7.164048055732291E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999992845524361	WITHOUT_CLASSIFICATION	7.154475637912894E-7	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999733803335058	WITHOUT_CLASSIFICATION	2.6619666494270564E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994109518485	WITHOUT_CLASSIFICATION	5.890481515071117E-7	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999979482798249	WITHOUT_CLASSIFICATION	2.0517201749800124E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999952182770382	WITHOUT_CLASSIFICATION	4.781722961726017E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999995205961612	WITHOUT_CLASSIFICATION	4.79403838905622E-7	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999858078375686	WITHOUT_CLASSIFICATION	1.4192162431350602E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999932444995548	WITHOUT_CLASSIFICATION	6.7555004451108095E-6	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999932444995548	WITHOUT_CLASSIFICATION	6.7555004451108095E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9997933304591865	WITHOUT_CLASSIFICATION	2.066695408136367E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999927303816791	WITHOUT_CLASSIFICATION	7.269618320907406E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999584372124343	WITHOUT_CLASSIFICATION	4.1562787565774206E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999991150533264	WITHOUT_CLASSIFICATION	8.849466735905376E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999904837397275	WITHOUT_CLASSIFICATION	9.516260272511082E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999904837397275	WITHOUT_CLASSIFICATION	9.516260272511082E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999896514456863	WITHOUT_CLASSIFICATION	1.0348554313755919E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999885073978786	WITHOUT_CLASSIFICATION	1.149260212138645E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999838393128435	WITHOUT_CLASSIFICATION	1.6160687156511164E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952580250643	WITHOUT_CLASSIFICATION	4.741974935715387E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999877140318506	WITHOUT_CLASSIFICATION	1.2285968149416895E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999890424765983	WITHOUT_CLASSIFICATION	1.0957523401675696E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998781928084763	WITHOUT_CLASSIFICATION	1.2180719152364805E-4	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999854413520181	WITHOUT_CLASSIFICATION	1.4558647981906415E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999982693381743	WITHOUT_CLASSIFICATION	1.730661825802241E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998808505769988	WITHOUT_CLASSIFICATION	1.191494230012104E-4	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9984079188420947	WITHOUT_CLASSIFICATION	0.0015920811579054077	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300877405304	WITHOUT_CLASSIFICATION	6.991225946968881E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300877405304	WITHOUT_CLASSIFICATION	6.991225946968881E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999988264108005	WITHOUT_CLASSIFICATION	1.1735891994963739E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999871993092885	WITHOUT_CLASSIFICATION	1.2800690711574165E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999872017075919	WITHOUT_CLASSIFICATION	1.279829240812076E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999764979784675	WITHOUT_CLASSIFICATION	2.3502021532512813E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999304353195855	WITHOUT_CLASSIFICATION	6.956468041454086E-5	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868228532978	WITHOUT_CLASSIFICATION	1.3177146702269316E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999826684125017	WITHOUT_CLASSIFICATION	1.7331587498254436E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999851262042008	WITHOUT_CLASSIFICATION	1.487379579920695E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999858793323426	WITHOUT_CLASSIFICATION	1.4120667657380258E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998648632559669	WITHOUT_CLASSIFICATION	1.351367440330723E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998039522087517	WITHOUT_CLASSIFICATION	1.9604779124833194E-4	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999967583111016	WITHOUT_CLASSIFICATION	3.241688898408323E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999868502092868	WITHOUT_CLASSIFICATION	1.3149790713195655E-4	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999657583086963	WITHOUT_CLASSIFICATION	3.42416913037376E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999879100293658	WITHOUT_CLASSIFICATION	1.2089970634121549E-5	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999859835836674	WITHOUT_CLASSIFICATION	1.4016416332559437E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999966472281289	WITHOUT_CLASSIFICATION	3.352771871102939E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999296240818392	WITHOUT_CLASSIFICATION	7.037591816083716E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999794881679336	WITHOUT_CLASSIFICATION	2.0511832066422135E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999570249870641	WITHOUT_CLASSIFICATION	4.297501293589494E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999649335176546	WITHOUT_CLASSIFICATION	3.506648234538614E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999649335176546	WITHOUT_CLASSIFICATION	3.506648234538614E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616998045939	WITHOUT_CLASSIFICATION	3.8300195406029976E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999999965437409	WITHOUT_CLASSIFICATION	3.4562590994928855E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999894105023222	WITHOUT_CLASSIFICATION	1.0589497677818845E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999595703062812	WITHOUT_CLASSIFICATION	4.0429693718696794E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999984707737977	WITHOUT_CLASSIFICATION	1.5292262023017245E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999911600254586	WITHOUT_CLASSIFICATION	8.839974541410298E-6	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999963751843433	WITHOUT_CLASSIFICATION	3.6248156567281905E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999992178471422	WITHOUT_CLASSIFICATION	7.821528577894496E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999436428444457	WITHOUT_CLASSIFICATION	5.63571555541888E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999984386246942	WITHOUT_CLASSIFICATION	1.5613753058066396E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697569571331	WITHOUT_CLASSIFICATION	3.024304286687617E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999345393749421	WITHOUT_CLASSIFICATION	6.546062505792485E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999955744118301	WITHOUT_CLASSIFICATION	4.425588169951332E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999957539737636	WITHOUT_CLASSIFICATION	4.246026236302246E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998525407861362	WITHOUT_CLASSIFICATION	1.4745921386377235E-4	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964933852481	WITHOUT_CLASSIFICATION	3.506614751988786E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999983388552243	WITHOUT_CLASSIFICATION	1.6611447757604378E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999636056624707	WITHOUT_CLASSIFICATION	3.639433752942374E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998769125730063	WITHOUT_CLASSIFICATION	1.2308742699374732E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999965472192163	WITHOUT_CLASSIFICATION	3.4527807838102667E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999929789441487	WITHOUT_CLASSIFICATION	7.021055851280907E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999990782630269	WITHOUT_CLASSIFICATION	9.217369731380912E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999963694946082	WITHOUT_CLASSIFICATION	3.630505391723685E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9998995623009931	WITHOUT_CLASSIFICATION	1.0043769900685733E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999869570157066	WITHOUT_CLASSIFICATION	1.304298429339151E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999869570157066	WITHOUT_CLASSIFICATION	1.304298429339151E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999757803672209	WITHOUT_CLASSIFICATION	2.421963277910753E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99987225832901	WITHOUT_CLASSIFICATION	1.277416709899516E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999649316367835	WITHOUT_CLASSIFICATION	3.506836321652852E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999983115130018	WITHOUT_CLASSIFICATION	1.6884869982715394E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999990733852685	WITHOUT_CLASSIFICATION	9.266147314965142E-6	TEST
