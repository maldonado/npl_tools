test out the optimizer:	WITHOUT_CLASSIFICATION	0.999787332052588	WITHOUT_CLASSIFICATION	2.1266794741209627E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999738394491974	WITHOUT_CLASSIFICATION	2.616055080262539E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999989822377101	WITHOUT_CLASSIFICATION	1.0177622898267727E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999987135361291	WITHOUT_CLASSIFICATION	1.2864638707857058E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999800366016	WITHOUT_CLASSIFICATION	1.9963398398282135E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999800366016	WITHOUT_CLASSIFICATION	1.9963398398282135E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998494510711	WITHOUT_CLASSIFICATION	1.5054892884814747E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999810606576	WITHOUT_CLASSIFICATION	1.8939342395849458E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999951220267017	WITHOUT_CLASSIFICATION	4.8779732983150396E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993347439805	WITHOUT_CLASSIFICATION	6.652560195081335E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999946054191061	WITHOUT_CLASSIFICATION	5.394580893861365E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999946054191061	WITHOUT_CLASSIFICATION	5.394580893861365E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999376973322321	WITHOUT_CLASSIFICATION	6.230266776782486E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999757862776	WITHOUT_CLASSIFICATION	2.4213722334109713E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.999999812478266	WITHOUT_CLASSIFICATION	1.8752173404405582E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990533677078	WITHOUT_CLASSIFICATION	9.466322921931196E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998708864698	WITHOUT_CLASSIFICATION	1.2911353016904048E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999318422838128	WITHOUT_CLASSIFICATION	6.815771618717526E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999818038722554	WITHOUT_CLASSIFICATION	1.8196127744534294E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997830503416775	WITHOUT_CLASSIFICATION	2.1694965832247599E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997550817589591	WITHOUT_CLASSIFICATION	2.4491824104086614E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997345439834	WITHOUT_CLASSIFICATION	2.654560165911686E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999769653695963	WITHOUT_CLASSIFICATION	2.303463040365606E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999599059850929	WITHOUT_CLASSIFICATION	4.0094014906995146E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999718148233	WITHOUT_CLASSIFICATION	2.818517670468198E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999958638837433	WITHOUT_CLASSIFICATION	4.136116256705813E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999958638837433	WITHOUT_CLASSIFICATION	4.136116256705813E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999996707009323	WITHOUT_CLASSIFICATION	3.292990677488548E-7	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999506177361377	WITHOUT_CLASSIFICATION	4.9382263862205606E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999900577307	WITHOUT_CLASSIFICATION	9.942269363851066E-9	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999834113124	WITHOUT_CLASSIFICATION	1.658868763203651E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999975870269021	WITHOUT_CLASSIFICATION	2.4129730979617226E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998084047358	WITHOUT_CLASSIFICATION	1.915952641782913E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999987830729555	WITHOUT_CLASSIFICATION	1.2169270444198924E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999592038366	WITHOUT_CLASSIFICATION	4.0796163472866624E-8	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999485156797	WITHOUT_CLASSIFICATION	5.148432023303019E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999974917052954	WITHOUT_CLASSIFICATION	2.5082947045343516E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995704019057	WITHOUT_CLASSIFICATION	4.295980943141218E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999983221277825	WITHOUT_CLASSIFICATION	1.6778722175015534E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999833084426	WITHOUT_CLASSIFICATION	1.6691557320476437E-8	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998934581765	WITHOUT_CLASSIFICATION	1.0654182349789313E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999997763141553	WITHOUT_CLASSIFICATION	2.2368584475256648E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961384324705	WITHOUT_CLASSIFICATION	3.861567529506484E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854498399117	WITHOUT_CLASSIFICATION	1.4550160088395676E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999999944663328	WITHOUT_CLASSIFICATION	5.533667202294657E-8	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998403239132	WITHOUT_CLASSIFICATION	1.5967608676578306E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999976920178895	WITHOUT_CLASSIFICATION	2.307982110530813E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999891912053	WITHOUT_CLASSIFICATION	1.0808794786685084E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998481759631	WITHOUT_CLASSIFICATION	1.5182403679564957E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999976920178895	WITHOUT_CLASSIFICATION	2.307982110530813E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998481759631	WITHOUT_CLASSIFICATION	1.5182403679564957E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998594208631	WITHOUT_CLASSIFICATION	1.405791368929238E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.997323992293648	WITHOUT_CLASSIFICATION	0.002676007706352047	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999980947072116	WITHOUT_CLASSIFICATION	1.905292788425159E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999986931828797	WITHOUT_CLASSIFICATION	1.3068171202489184E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999972396476342	WITHOUT_CLASSIFICATION	2.760352365740401E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999887407448039	WITHOUT_CLASSIFICATION	1.1259255196051416E-5	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999472150100046	WITHOUT_CLASSIFICATION	5.2784989995327105E-5	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999980241623061	WITHOUT_CLASSIFICATION	1.9758376939576292E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999997476100972	WITHOUT_CLASSIFICATION	2.523899027591452E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999678014168787	WITHOUT_CLASSIFICATION	3.219858312137339E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999999457309318	WITHOUT_CLASSIFICATION	5.426906819683362E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998481759631	WITHOUT_CLASSIFICATION	1.5182403679564957E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999447906914	WITHOUT_CLASSIFICATION	5.520930849349576E-8	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999999898498941	WITHOUT_CLASSIFICATION	1.0150105894333079E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999999637776825	WITHOUT_CLASSIFICATION	3.622231748676432E-8	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999958576704354	WITHOUT_CLASSIFICATION	4.1423295645847545E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998775427258	WITHOUT_CLASSIFICATION	1.2245727418806856E-7	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999368711875	WITHOUT_CLASSIFICATION	6.312881256923661E-8	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999994319085274	WITHOUT_CLASSIFICATION	5.680914725934833E-7	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997034050815	WITHOUT_CLASSIFICATION	2.9659491850799434E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995346195776	WITHOUT_CLASSIFICATION	4.653804223789658E-7	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999989085262	WITHOUT_CLASSIFICATION	1.0914738015277443E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999765659965	WITHOUT_CLASSIFICATION	2.3434003492454034E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999995622036834	WITHOUT_CLASSIFICATION	4.377963165937947E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999989097232561	WITHOUT_CLASSIFICATION	1.0902767438265172E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999762911927	WITHOUT_CLASSIFICATION	2.370880718850499E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999971556778	WITHOUT_CLASSIFICATION	2.844322315471572E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999993025196244	WITHOUT_CLASSIFICATION	6.974803755940627E-7	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999990366971468	WITHOUT_CLASSIFICATION	9.633028531803507E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988946408531	WITHOUT_CLASSIFICATION	1.1053591469192686E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999993092188718	WITHOUT_CLASSIFICATION	6.907811282536915E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999768780561	WITHOUT_CLASSIFICATION	2.3121943972335453E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999996085311215	WITHOUT_CLASSIFICATION	3.9146887853684774E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999995597545	WITHOUT_CLASSIFICATION	4.4024549429736935E-9	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999993396739977	WITHOUT_CLASSIFICATION	6.603260023458449E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995922554551	WITHOUT_CLASSIFICATION	4.077445448942121E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999995597545	WITHOUT_CLASSIFICATION	4.4024549429736935E-9	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999689742878	WITHOUT_CLASSIFICATION	3.1025712264696046E-8	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998674116475	WITHOUT_CLASSIFICATION	1.325883524523338E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999976920178895	WITHOUT_CLASSIFICATION	2.307982110530813E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999999862380471	WITHOUT_CLASSIFICATION	1.3761952911687403E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999999258897926	WITHOUT_CLASSIFICATION	7.411020743615173E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999677383709	WITHOUT_CLASSIFICATION	3.22616292259476E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999677383709	WITHOUT_CLASSIFICATION	3.22616292259476E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999993183946693	WITHOUT_CLASSIFICATION	6.816053307637039E-7	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999990256200401	WITHOUT_CLASSIFICATION	9.743799599885306E-7	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999236827603	WITHOUT_CLASSIFICATION	7.631723982033274E-8	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999843266988	WITHOUT_CLASSIFICATION	1.5673301222545702E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997650361904	WITHOUT_CLASSIFICATION	2.349638095202172E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999318080793	WITHOUT_CLASSIFICATION	6.819192069062468E-8	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999994606687257	WITHOUT_CLASSIFICATION	5.393312742949761E-7	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999998464395721	WITHOUT_CLASSIFICATION	1.5356042789555146E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995316101769	WITHOUT_CLASSIFICATION	4.6838982311422437E-7	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997061965816	WITHOUT_CLASSIFICATION	2.9380341837370237E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994187547536	WITHOUT_CLASSIFICATION	5.812452464644943E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994187547536	WITHOUT_CLASSIFICATION	5.812452464644943E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999198686613	WITHOUT_CLASSIFICATION	8.013133874280094E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998769274634	WITHOUT_CLASSIFICATION	1.230725365616855E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999998006611045	WITHOUT_CLASSIFICATION	1.9933889550720394E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994187547536	WITHOUT_CLASSIFICATION	5.812452464644943E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999198686613	WITHOUT_CLASSIFICATION	8.013133874280094E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999198686613	WITHOUT_CLASSIFICATION	8.013133874280094E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999745251567389	WITHOUT_CLASSIFICATION	2.5474843261059847E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999990845964146	WITHOUT_CLASSIFICATION	9.154035854446337E-7	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998108827941	WITHOUT_CLASSIFICATION	1.891172059176548E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999991235873313	WITHOUT_CLASSIFICATION	8.764126685937549E-7	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999971980126717	WITHOUT_CLASSIFICATION	2.801987328171881E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999971980126717	WITHOUT_CLASSIFICATION	2.801987328171881E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999999696322811	WITHOUT_CLASSIFICATION	3.036771889818973E-7	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999996850874643	WITHOUT_CLASSIFICATION	3.1491253580614904E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999985626101102	WITHOUT_CLASSIFICATION	1.437389889791229E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997360799369	WITHOUT_CLASSIFICATION	2.6392006312170234E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997360799369	WITHOUT_CLASSIFICATION	2.6392006312170234E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998013820278	WITHOUT_CLASSIFICATION	1.9861797217093124E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970234503118	WITHOUT_CLASSIFICATION	2.976549688130271E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989202259558	WITHOUT_CLASSIFICATION	1.0797740441918838E-6	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998964663358	WITHOUT_CLASSIFICATION	1.0353366418222934E-7	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999987896750028	WITHOUT_CLASSIFICATION	1.2103249971718763E-6	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999991373671351	WITHOUT_CLASSIFICATION	8.626328649964459E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999993430832701	WITHOUT_CLASSIFICATION	6.569167298740381E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999996261384418	WITHOUT_CLASSIFICATION	3.7386155815817226E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999970718352553	WITHOUT_CLASSIFICATION	2.928164744730763E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989202259558	WITHOUT_CLASSIFICATION	1.0797740441918838E-6	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999966298094662	WITHOUT_CLASSIFICATION	3.370190533720951E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999841314673427	WITHOUT_CLASSIFICATION	1.586853265733829E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999841314673427	WITHOUT_CLASSIFICATION	1.586853265733829E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997485185855	WITHOUT_CLASSIFICATION	2.51481414410746E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999979049881289	WITHOUT_CLASSIFICATION	2.095011871090636E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999998989612521	WITHOUT_CLASSIFICATION	1.0103874782972173E-7	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999617249025	WITHOUT_CLASSIFICATION	3.827509749749832E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999988678027866	WITHOUT_CLASSIFICATION	1.1321972134210284E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999989029588057	WITHOUT_CLASSIFICATION	1.0970411942968683E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.999997751042462	WITHOUT_CLASSIFICATION	2.2489575379698256E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999997295386317	WITHOUT_CLASSIFICATION	2.704613682496224E-7	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999906461929	WITHOUT_CLASSIFICATION	9.353807101571357E-9	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999751617432	WITHOUT_CLASSIFICATION	2.4838256735491496E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999751617432	WITHOUT_CLASSIFICATION	2.4838256735491496E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999787332052588	WITHOUT_CLASSIFICATION	2.1266794741209627E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994905138221	WITHOUT_CLASSIFICATION	5.09486177850665E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999977188918804	WITHOUT_CLASSIFICATION	2.281108119570389E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999979237596702	WITHOUT_CLASSIFICATION	2.076240329838436E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999993516837844	WITHOUT_CLASSIFICATION	6.483162155857654E-7	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999989799101459	WITHOUT_CLASSIFICATION	1.020089854098674E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999977764570018	WITHOUT_CLASSIFICATION	2.2235429981718057E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999992684739337	WITHOUT_CLASSIFICATION	7.315260663816215E-7	TEST
new	WITHOUT_CLASSIFICATION	0.9999577629747579	WITHOUT_CLASSIFICATION	4.2237025242050247E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999481820063908	WITHOUT_CLASSIFICATION	5.1817993609112436E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999998079984418	WITHOUT_CLASSIFICATION	1.920015581926373E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999989822377101	WITHOUT_CLASSIFICATION	1.0177622898267727E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999975516502163	WITHOUT_CLASSIFICATION	2.448349783738559E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999975516502163	WITHOUT_CLASSIFICATION	2.448349783738559E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999990181926217	WITHOUT_CLASSIFICATION	9.818073782762477E-7	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999925043773409	WITHOUT_CLASSIFICATION	7.495622659132531E-6	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999999434945361	WITHOUT_CLASSIFICATION	5.650546392020948E-8	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999972969494588	WITHOUT_CLASSIFICATION	2.7030505412670746E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999983262853075	WITHOUT_CLASSIFICATION	1.673714692544248E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999935254089	WITHOUT_CLASSIFICATION	6.474591091677868E-8	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999800366016	WITHOUT_CLASSIFICATION	1.9963398398282135E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999993175895453	WITHOUT_CLASSIFICATION	6.82410454755686E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.999997806015803	WITHOUT_CLASSIFICATION	2.1939841969994374E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999998997407705	WITHOUT_CLASSIFICATION	1.0025922949517818E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999990534630813	WITHOUT_CLASSIFICATION	9.465369187229628E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.999997358445661	WITHOUT_CLASSIFICATION	2.6415543390094773E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999754610732805	WITHOUT_CLASSIFICATION	2.453892671939598E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999976983157899	WITHOUT_CLASSIFICATION	2.301684210079778E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998318286331	WITHOUT_CLASSIFICATION	1.681713669435671E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997761821979	WITHOUT_CLASSIFICATION	2.238178020590793E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998131534591	WITHOUT_CLASSIFICATION	1.8684654093893311E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996264521966	WITHOUT_CLASSIFICATION	3.7354780331756523E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999995038888967	WITHOUT_CLASSIFICATION	4.961111032894551E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999798030931665	WITHOUT_CLASSIFICATION	2.019690683351657E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999481820063908	WITHOUT_CLASSIFICATION	5.1817993609112436E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999975516502163	WITHOUT_CLASSIFICATION	2.448349783738559E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999976983157899	WITHOUT_CLASSIFICATION	2.301684210079778E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998494510711	WITHOUT_CLASSIFICATION	1.5054892884814747E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999995941072595	WITHOUT_CLASSIFICATION	4.0589274050334126E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999993613175495	WITHOUT_CLASSIFICATION	6.386824504930232E-7	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999990468588159	WITHOUT_CLASSIFICATION	9.531411841739353E-7	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999948048101915	WITHOUT_CLASSIFICATION	5.195189808469859E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999999803816639	WITHOUT_CLASSIFICATION	1.9618336104400457E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999849290809689	WITHOUT_CLASSIFICATION	1.5070919031053495E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999997907479753	WITHOUT_CLASSIFICATION	2.0925202471059178E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999889650630046	WITHOUT_CLASSIFICATION	1.1034936995352916E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999843414194859	WITHOUT_CLASSIFICATION	1.5658580514139263E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999808752204203	WITHOUT_CLASSIFICATION	1.9124779579573105E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999808752204203	WITHOUT_CLASSIFICATION	1.9124779579573105E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996834286404	WITHOUT_CLASSIFICATION	3.165713596296252E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999998375101976	WITHOUT_CLASSIFICATION	1.6248980237678616E-7	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999867347558791	WITHOUT_CLASSIFICATION	1.3265244120844986E-5	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999879190691785	WITHOUT_CLASSIFICATION	1.2080930821627985E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998885443839	WITHOUT_CLASSIFICATION	1.1145561610871398E-7	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999997915012464	WITHOUT_CLASSIFICATION	2.0849875364623097E-7	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999939097595419	WITHOUT_CLASSIFICATION	6.090240458067264E-6	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999810606576	WITHOUT_CLASSIFICATION	1.8939342395849458E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999961058862171	WITHOUT_CLASSIFICATION	3.894113782864886E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999235369912	WITHOUT_CLASSIFICATION	7.646300878843953E-8	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999235369912	WITHOUT_CLASSIFICATION	7.646300878843953E-8	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999997149650931	WITHOUT_CLASSIFICATION	2.850349068049413E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999962990506696	WITHOUT_CLASSIFICATION	3.7009493304207073E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.999999652947806	WITHOUT_CLASSIFICATION	3.470521938679366E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999583671293	WITHOUT_CLASSIFICATION	4.163287070795135E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999884903104191	WITHOUT_CLASSIFICATION	1.1509689580937358E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999985883897211	WITHOUT_CLASSIFICATION	1.4116102788390382E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999481820063908	WITHOUT_CLASSIFICATION	5.1817993609112436E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999989822377101	WITHOUT_CLASSIFICATION	1.0177622898267727E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999976983157899	WITHOUT_CLASSIFICATION	2.301684210079778E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999976983157899	WITHOUT_CLASSIFICATION	2.301684210079778E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996862162557	WITHOUT_CLASSIFICATION	3.137837443279039E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996862162557	WITHOUT_CLASSIFICATION	3.137837443279039E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997046001099	WITHOUT_CLASSIFICATION	2.953998900735469E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999803106865719	WITHOUT_CLASSIFICATION	1.9689313428024326E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999803106865719	WITHOUT_CLASSIFICATION	1.9689313428024326E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999962539128744	WITHOUT_CLASSIFICATION	3.7460871256917483E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999998355149267	WITHOUT_CLASSIFICATION	1.6448507329541532E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999888323311562	WITHOUT_CLASSIFICATION	1.1167668843824086E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999918546635455	WITHOUT_CLASSIFICATION	8.145336454581392E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998722091976	WITHOUT_CLASSIFICATION	1.277908024604424E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993347439805	WITHOUT_CLASSIFICATION	6.652560195081335E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993347439805	WITHOUT_CLASSIFICATION	6.652560195081335E-7	TEST
not array	WITHOUT_CLASSIFICATION	0.9999988877090653	WITHOUT_CLASSIFICATION	1.1122909347056126E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999987622094826	WITHOUT_CLASSIFICATION	1.2377905174835792E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999870954310203	WITHOUT_CLASSIFICATION	1.2904568979731988E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999784831458195	WITHOUT_CLASSIFICATION	2.1516854180417836E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999831898702419	WITHOUT_CLASSIFICATION	1.681012975803262E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999705268875793	WITHOUT_CLASSIFICATION	2.9473112420693682E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999946054191061	WITHOUT_CLASSIFICATION	5.394580893861365E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999844837695734	WITHOUT_CLASSIFICATION	1.551623042661691E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999844837695734	WITHOUT_CLASSIFICATION	1.551623042661691E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999376973322321	WITHOUT_CLASSIFICATION	6.230266776782486E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999376973322321	WITHOUT_CLASSIFICATION	6.230266776782486E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999990458209184	WITHOUT_CLASSIFICATION	9.541790816583531E-7	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999990458209184	WITHOUT_CLASSIFICATION	9.541790816583531E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999992633884233	WITHOUT_CLASSIFICATION	7.366115766719665E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999992633884233	WITHOUT_CLASSIFICATION	7.366115766719665E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993347439805	WITHOUT_CLASSIFICATION	6.652560195081335E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999946054191061	WITHOUT_CLASSIFICATION	5.394580893861365E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999844837695734	WITHOUT_CLASSIFICATION	1.551623042661691E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999844837695734	WITHOUT_CLASSIFICATION	1.551623042661691E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999376973322321	WITHOUT_CLASSIFICATION	6.230266776782486E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999990458209184	WITHOUT_CLASSIFICATION	9.541790816583531E-7	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999990458209184	WITHOUT_CLASSIFICATION	9.541790816583531E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999992633884233	WITHOUT_CLASSIFICATION	7.366115766719665E-7	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993566283002	WITHOUT_CLASSIFICATION	6.433716998439682E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999997209359461	WITHOUT_CLASSIFICATION	2.790640539217291E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999992327295641	WITHOUT_CLASSIFICATION	7.672704358607564E-7	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999957430559695	WITHOUT_CLASSIFICATION	4.256944030456695E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999989376124057	WITHOUT_CLASSIFICATION	1.0623875942910304E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999722661789042	WITHOUT_CLASSIFICATION	2.7733821095797793E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999640794742	WITHOUT_CLASSIFICATION	3.592052579331617E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999998925383855	WITHOUT_CLASSIFICATION	1.0746161449898865E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999996467261788	WITHOUT_CLASSIFICATION	3.532738211742676E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999987315870049	WITHOUT_CLASSIFICATION	1.2684129951361983E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999995570937759	WITHOUT_CLASSIFICATION	4.4290622407772327E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999989685294225	WITHOUT_CLASSIFICATION	1.0314705774800982E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999993183946693	WITHOUT_CLASSIFICATION	6.816053307637039E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999722661789042	WITHOUT_CLASSIFICATION	2.7733821095797793E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999722661789042	WITHOUT_CLASSIFICATION	2.7733821095797793E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999722661789042	WITHOUT_CLASSIFICATION	2.7733821095797793E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999994259817138	WITHOUT_CLASSIFICATION	5.740182863195378E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999995624086322	WITHOUT_CLASSIFICATION	4.3759136774608644E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999995624086322	WITHOUT_CLASSIFICATION	4.3759136774608644E-7	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999996250039224	WITHOUT_CLASSIFICATION	3.749960776940037E-7	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999997550060782	WITHOUT_CLASSIFICATION	2.4499392180724676E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999330320859	WITHOUT_CLASSIFICATION	6.69679141073986E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999191890481	WITHOUT_CLASSIFICATION	8.081095190793648E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999191890481	WITHOUT_CLASSIFICATION	8.081095190793648E-8	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998708864698	WITHOUT_CLASSIFICATION	1.2911353016904048E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999705875213	WITHOUT_CLASSIFICATION	2.9412478641910534E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999705875213	WITHOUT_CLASSIFICATION	2.9412478641910534E-8	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999843862513627	WITHOUT_CLASSIFICATION	1.5613748637396996E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999994709667285	WITHOUT_CLASSIFICATION	5.290332714906531E-7	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999999206941227	WITHOUT_CLASSIFICATION	7.930587728671812E-7	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997514545352137	WITHOUT_CLASSIFICATION	2.485454647863243E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999559015690577	WITHOUT_CLASSIFICATION	4.409843094222225E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999335145059928	WITHOUT_CLASSIFICATION	6.648549400720524E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999318422838128	WITHOUT_CLASSIFICATION	6.815771618717526E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998600158973284	WITHOUT_CLASSIFICATION	1.3998410267160766E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9949504002444326	WITHOUT_CLASSIFICATION	0.005049599755567389	TEST
ID	WITHOUT_CLASSIFICATION	0.9998157401404273	WITHOUT_CLASSIFICATION	1.842598595726445E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999767504107535	WITHOUT_CLASSIFICATION	2.3249589246551747E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997550817589591	WITHOUT_CLASSIFICATION	2.4491824104086614E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998444158389	WITHOUT_CLASSIFICATION	1.5558416115333687E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999772011607605	WITHOUT_CLASSIFICATION	2.279883923941201E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999822520261562	WITHOUT_CLASSIFICATION	1.7747973843763928E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997550817589591	WITHOUT_CLASSIFICATION	2.4491824104086614E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999902580358	WITHOUT_CLASSIFICATION	9.74196413599355E-9	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999831854903	WITHOUT_CLASSIFICATION	1.681450964993355E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999746140312068	WITHOUT_CLASSIFICATION	2.538596879321795E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.999924471192797	WITHOUT_CLASSIFICATION	7.552880720289513E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999953919586569	WITHOUT_CLASSIFICATION	4.6080413429669305E-6	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999884135848541	WITHOUT_CLASSIFICATION	1.1586415145966873E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.99995839376604	WITHOUT_CLASSIFICATION	4.160623396007296E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999599059850929	WITHOUT_CLASSIFICATION	4.0094014906995146E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999877965851479	WITHOUT_CLASSIFICATION	1.220341485201126E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999718148233	WITHOUT_CLASSIFICATION	2.818517670468198E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999964053501663	WITHOUT_CLASSIFICATION	3.5946498335402644E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.999999847423776	WITHOUT_CLASSIFICATION	1.5257622398284763E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998863265346715	WITHOUT_CLASSIFICATION	1.1367346532855343E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999318422838128	WITHOUT_CLASSIFICATION	6.815771618717526E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999877965851479	WITHOUT_CLASSIFICATION	1.220341485201126E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999964053501663	WITHOUT_CLASSIFICATION	3.5946498335402644E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998863265346715	WITHOUT_CLASSIFICATION	1.1367346532855343E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998754765123	WITHOUT_CLASSIFICATION	1.2452348778434984E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.999945578581807	WITHOUT_CLASSIFICATION	5.442141819305012E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999831101314	WITHOUT_CLASSIFICATION	1.6889868615188835E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999958638837433	WITHOUT_CLASSIFICATION	4.136116256705813E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999937182453247	WITHOUT_CLASSIFICATION	6.281754675298679E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999993698004239	WITHOUT_CLASSIFICATION	6.301995760514929E-7	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999983004641562	WITHOUT_CLASSIFICATION	1.6995358438448526E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999960924472617	WITHOUT_CLASSIFICATION	3.9075527383078846E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999917232581763	WITHOUT_CLASSIFICATION	8.276741823718315E-6	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999898101829	WITHOUT_CLASSIFICATION	1.0189817107034791E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999980277994609	WITHOUT_CLASSIFICATION	1.972200539175883E-6	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987283746391	WITHOUT_CLASSIFICATION	1.2716253609619697E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999878151384	WITHOUT_CLASSIFICATION	1.2184861623436492E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999143316071	WITHOUT_CLASSIFICATION	8.566839290792735E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999391217864383	WITHOUT_CLASSIFICATION	6.087821356158855E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999893213073576	WITHOUT_CLASSIFICATION	1.0678692642376734E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999506177361377	WITHOUT_CLASSIFICATION	4.9382263862205606E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999984731311359	WITHOUT_CLASSIFICATION	1.5268688641082958E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999108257958765	WITHOUT_CLASSIFICATION	8.917420412348825E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999877965851479	WITHOUT_CLASSIFICATION	1.220341485201126E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999252151439	WITHOUT_CLASSIFICATION	7.478485609771422E-7	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999689283012	WITHOUT_CLASSIFICATION	3.10716988801382E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999999246227887	WITHOUT_CLASSIFICATION	7.537721129700457E-8	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9952226323884853	WITHOUT_CLASSIFICATION	0.0047773676115146985	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999962093794478	WITHOUT_CLASSIFICATION	3.7906205522094037E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999985864358755	WITHOUT_CLASSIFICATION	1.413564124601951E-6	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999999933255	WITHOUT_CLASSIFICATION	6.674500187109977E-11	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999695299702	WITHOUT_CLASSIFICATION	3.0470029796081666E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999984044728184	WITHOUT_CLASSIFICATION	1.595527181681792E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999423979633346	WITHOUT_CLASSIFICATION	5.7602036665439356E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999816959398872	WITHOUT_CLASSIFICATION	1.8304060112873825E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999710461446516	WITHOUT_CLASSIFICATION	2.895385534832348E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999995537603346	WITHOUT_CLASSIFICATION	4.46239665434123E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999834113124	WITHOUT_CLASSIFICATION	1.658868763203651E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.999999963951237	WITHOUT_CLASSIFICATION	3.604876299557919E-8	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999705559783	WITHOUT_CLASSIFICATION	2.944402174205423E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999959995860188	WITHOUT_CLASSIFICATION	4.000413981175943E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998423435714	WITHOUT_CLASSIFICATION	1.5765642859863435E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999998738707142	WITHOUT_CLASSIFICATION	1.2612928579793149E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999981099854732	WITHOUT_CLASSIFICATION	1.8900145267623626E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998128171865	WITHOUT_CLASSIFICATION	1.871828134317798E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999995985449581	WITHOUT_CLASSIFICATION	4.014550418642668E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999626372115	WITHOUT_CLASSIFICATION	3.736278853436338E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999994081654295	WITHOUT_CLASSIFICATION	5.918345703532087E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999997207412853	WITHOUT_CLASSIFICATION	2.792587148104801E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999997207412853	WITHOUT_CLASSIFICATION	2.792587148104801E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999944041416274	WITHOUT_CLASSIFICATION	5.595858372493503E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999998770345419	WITHOUT_CLASSIFICATION	1.2296545825593276E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999494846358	WITHOUT_CLASSIFICATION	5.0515364228271643E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997849973574	WITHOUT_CLASSIFICATION	2.1500264256122998E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999995327731654	WITHOUT_CLASSIFICATION	4.6722683458916423E-7	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999998282373722	WITHOUT_CLASSIFICATION	1.717626278150117E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999999689222844	WITHOUT_CLASSIFICATION	3.10777156092995E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999932210571173	WITHOUT_CLASSIFICATION	6.778942882674055E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999954848938036	WITHOUT_CLASSIFICATION	4.515106196314923E-6	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999987320781151	WITHOUT_CLASSIFICATION	1.2679218848639994E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999951292336783	WITHOUT_CLASSIFICATION	4.870766321735963E-6	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999986825783248	WITHOUT_CLASSIFICATION	1.3174216752217346E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999996187038986	WITHOUT_CLASSIFICATION	3.8129610132198226E-7	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999999354931531	WITHOUT_CLASSIFICATION	6.450684681398211E-8	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.99999953679965	WITHOUT_CLASSIFICATION	4.6320034994506585E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999978995871119	WITHOUT_CLASSIFICATION	2.100412888176968E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999999456717642	WITHOUT_CLASSIFICATION	5.4328235904959526E-8	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.999999801957065	WITHOUT_CLASSIFICATION	1.9804293504514212E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993819453302	WITHOUT_CLASSIFICATION	6.180546697493546E-7	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999633350685	WITHOUT_CLASSIFICATION	3.666493154274891E-8	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997437600128	WITHOUT_CLASSIFICATION	2.562399872674819E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999998601783416	WITHOUT_CLASSIFICATION	1.398216584362032E-7	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999997897667068	WITHOUT_CLASSIFICATION	2.1023329315582842E-7	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999990558289774	WITHOUT_CLASSIFICATION	9.441710225432381E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.99999980380887	WITHOUT_CLASSIFICATION	1.9619112994478312E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999986790073592	WITHOUT_CLASSIFICATION	1.320992640887081E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992218441252	WITHOUT_CLASSIFICATION	7.781558747968577E-7	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999999831215851	WITHOUT_CLASSIFICATION	1.6878414898743095E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998947683448	WITHOUT_CLASSIFICATION	1.0523165516832684E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999999498693037	WITHOUT_CLASSIFICATION	5.013069630262738E-7	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999633350685	WITHOUT_CLASSIFICATION	3.666493154274891E-8	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999991538435414	WITHOUT_CLASSIFICATION	8.461564585375083E-7	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999738251814	WITHOUT_CLASSIFICATION	2.6174818592871965E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999997243279851	WITHOUT_CLASSIFICATION	2.7567201488747626E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999872384004388	WITHOUT_CLASSIFICATION	1.276159956111413E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999872384004388	WITHOUT_CLASSIFICATION	1.276159956111413E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999990761241621	WITHOUT_CLASSIFICATION	9.238758378927115E-7	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999995242233973	WITHOUT_CLASSIFICATION	4.757766027036025E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999953378410854	WITHOUT_CLASSIFICATION	4.662158914599198E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999953378410854	WITHOUT_CLASSIFICATION	4.662158914599198E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999626372115	WITHOUT_CLASSIFICATION	3.736278853436338E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999761299357	WITHOUT_CLASSIFICATION	2.3870064219830946E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999988087393037	WITHOUT_CLASSIFICATION	1.1912606963468474E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994275802114	WITHOUT_CLASSIFICATION	5.724197884522335E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999988087393037	WITHOUT_CLASSIFICATION	1.1912606963468474E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994275802114	WITHOUT_CLASSIFICATION	5.724197884522335E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995044263058	WITHOUT_CLASSIFICATION	4.955736941472344E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999926506401652	WITHOUT_CLASSIFICATION	7.349359834817096E-6	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999728721477	WITHOUT_CLASSIFICATION	2.7127852396739958E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999993409614553	WITHOUT_CLASSIFICATION	6.590385446693281E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999998999868953	WITHOUT_CLASSIFICATION	1.0001310470645842E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999975418647737	WITHOUT_CLASSIFICATION	2.458135226283025E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995653264031	WITHOUT_CLASSIFICATION	4.3467359686787343E-7	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995653264031	WITHOUT_CLASSIFICATION	4.3467359686787343E-7	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999994403001868	WITHOUT_CLASSIFICATION	5.596998131491262E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999509905313	WITHOUT_CLASSIFICATION	4.900946881852078E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999987836798608	WITHOUT_CLASSIFICATION	1.2163201391636692E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999990203026	WITHOUT_CLASSIFICATION	9.796974000284896E-10	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999964743643349	WITHOUT_CLASSIFICATION	3.5256356650288625E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999956190117618	WITHOUT_CLASSIFICATION	4.380988238198087E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999974394917636	WITHOUT_CLASSIFICATION	2.560508236456917E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999924714875803	WITHOUT_CLASSIFICATION	7.52851241961706E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999924714875803	WITHOUT_CLASSIFICATION	7.52851241961706E-6	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999877162757	WITHOUT_CLASSIFICATION	1.2283724254599814E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995044263058	WITHOUT_CLASSIFICATION	4.955736941472344E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999967359440922	WITHOUT_CLASSIFICATION	3.2640559077811436E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999748815543742	WITHOUT_CLASSIFICATION	2.5118445625870395E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999999790199465	WITHOUT_CLASSIFICATION	2.0980053491853483E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999997125051436	WITHOUT_CLASSIFICATION	2.8749485640263836E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999840461582153	WITHOUT_CLASSIFICATION	1.5953841784616643E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995044263058	WITHOUT_CLASSIFICATION	4.955736941472344E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999997125051436	WITHOUT_CLASSIFICATION	2.8749485640263836E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999840461582153	WITHOUT_CLASSIFICATION	1.5953841784616643E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999706150734	WITHOUT_CLASSIFICATION	2.9384926571754066E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999977301117503	WITHOUT_CLASSIFICATION	2.269888249732209E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999936220626	WITHOUT_CLASSIFICATION	6.377937400854512E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995044263058	WITHOUT_CLASSIFICATION	4.955736941472344E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999995044263058	WITHOUT_CLASSIFICATION	4.955736941472344E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999964722866203	WITHOUT_CLASSIFICATION	3.527713379727551E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999971205380753	WITHOUT_CLASSIFICATION	2.879461924707377E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999997122006645	WITHOUT_CLASSIFICATION	2.877993354572503E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998934581765	WITHOUT_CLASSIFICATION	1.0654182349789313E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999999278677314	WITHOUT_CLASSIFICATION	7.213226859392758E-8	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999996096421812	WITHOUT_CLASSIFICATION	3.903578188221617E-7	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999962958013223	WITHOUT_CLASSIFICATION	3.7041986777747508E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997066037096	WITHOUT_CLASSIFICATION	2.933962902929345E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999828530028	WITHOUT_CLASSIFICATION	1.7146997092652014E-8	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999912538239822	WITHOUT_CLASSIFICATION	8.74617601770185E-6	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999997959851527	WITHOUT_CLASSIFICATION	2.0401484729990844E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999989645485494	WITHOUT_CLASSIFICATION	1.0354514505659785E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999995476880855	WITHOUT_CLASSIFICATION	4.5231191449873936E-7	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999998916373703	WITHOUT_CLASSIFICATION	1.083626297114709E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993988942782	WITHOUT_CLASSIFICATION	6.011057217747973E-7	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999946252628117	WITHOUT_CLASSIFICATION	5.374737188219843E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998934581765	WITHOUT_CLASSIFICATION	1.0654182349789313E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999906027656286	WITHOUT_CLASSIFICATION	9.397234371539574E-6	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999998248172157	WITHOUT_CLASSIFICATION	1.7518278429966353E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999527108407	WITHOUT_CLASSIFICATION	4.7289159303143115E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999953125359313	WITHOUT_CLASSIFICATION	4.6874640686955344E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999959625101928	WITHOUT_CLASSIFICATION	4.037489807146899E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999959625101928	WITHOUT_CLASSIFICATION	4.037489807146899E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998934581765	WITHOUT_CLASSIFICATION	1.0654182349789313E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998898808701605	WITHOUT_CLASSIFICATION	1.1011912983949328E-4	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999993021625982	WITHOUT_CLASSIFICATION	6.978374018059731E-7	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999448873042827	WITHOUT_CLASSIFICATION	5.511269571727487E-5	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999977876955031	WITHOUT_CLASSIFICATION	2.2123044968251627E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984430979566	WITHOUT_CLASSIFICATION	1.5569020434458536E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997603997365	WITHOUT_CLASSIFICATION	2.3960026347123164E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999997824662067	WITHOUT_CLASSIFICATION	2.1753379335048687E-7	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999982230430702	WITHOUT_CLASSIFICATION	1.7769569298303718E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999962956448	WITHOUT_CLASSIFICATION	3.7043550703587726E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999950524187	WITHOUT_CLASSIFICATION	4.947581311683613E-8	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992258295007	WITHOUT_CLASSIFICATION	7.741704991157817E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999915214096997	WITHOUT_CLASSIFICATION	8.478590300262893E-6	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998460111805887	WITHOUT_CLASSIFICATION	1.539888194113813E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999962543522	WITHOUT_CLASSIFICATION	3.7456477329177404E-9	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999395707485	WITHOUT_CLASSIFICATION	6.042925147650463E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999998850897943	WITHOUT_CLASSIFICATION	1.1491020567809894E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999933686307	WITHOUT_CLASSIFICATION	6.631369297216053E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999998189296154	WITHOUT_CLASSIFICATION	1.810703846799062E-7	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998166121753	WITHOUT_CLASSIFICATION	1.8338782465851094E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999977423352	WITHOUT_CLASSIFICATION	2.2576648057675755E-8	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999959706887	WITHOUT_CLASSIFICATION	4.029311260916205E-9	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998941346865	WITHOUT_CLASSIFICATION	1.0586531348726854E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994333784568	WITHOUT_CLASSIFICATION	5.666215431673469E-7	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945113296699	WITHOUT_CLASSIFICATION	5.488670330177641E-6	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976257104624	WITHOUT_CLASSIFICATION	2.374289537627722E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982936393325	WITHOUT_CLASSIFICATION	1.7063606675913315E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998934343462	WITHOUT_CLASSIFICATION	1.0656565380000718E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923952599156	WITHOUT_CLASSIFICATION	7.604740084381895E-6	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890238590485	WITHOUT_CLASSIFICATION	1.0976140951438592E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986823885921	WITHOUT_CLASSIFICATION	1.3176114078469977E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999997866811529	WITHOUT_CLASSIFICATION	2.1331884709634775E-7	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999810514029	WITHOUT_CLASSIFICATION	1.894859716095635E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998134271002	WITHOUT_CLASSIFICATION	1.8657289979380695E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985050201177	WITHOUT_CLASSIFICATION	1.4949798822527863E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996542338485	WITHOUT_CLASSIFICATION	3.4576615152058334E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951776335468	WITHOUT_CLASSIFICATION	4.822366453158481E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989427864229	WITHOUT_CLASSIFICATION	1.0572135770979723E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994442229604	WITHOUT_CLASSIFICATION	5.557770396071214E-7	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991139229374	WITHOUT_CLASSIFICATION	8.8607706261876E-7	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838127009542	WITHOUT_CLASSIFICATION	1.618729904587491E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999935447730143	WITHOUT_CLASSIFICATION	6.455226985681721E-6	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992895876533	WITHOUT_CLASSIFICATION	7.104123468135666E-7	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999989475307342	WITHOUT_CLASSIFICATION	1.0524692658059305E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999519040236	WITHOUT_CLASSIFICATION	4.8095976354326874E-8	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999993718799	WITHOUT_CLASSIFICATION	6.281201004488352E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998520330794228	WITHOUT_CLASSIFICATION	1.4796692057712294E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999976907330186	WITHOUT_CLASSIFICATION	2.3092669814292336E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999997346895952	WITHOUT_CLASSIFICATION	2.653104048012399E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999885295773	WITHOUT_CLASSIFICATION	1.147042270917044E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999915385797068	WITHOUT_CLASSIFICATION	8.461420293207068E-6	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999805799085068	WITHOUT_CLASSIFICATION	1.9420091493256334E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999753245104157	WITHOUT_CLASSIFICATION	2.4675489584264483E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999950707853413	WITHOUT_CLASSIFICATION	4.929214658696876E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999953682548102	WITHOUT_CLASSIFICATION	4.631745189768297E-6	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999984048430084	WITHOUT_CLASSIFICATION	1.5951569915486206E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999921810551	WITHOUT_CLASSIFICATION	7.81894490885551E-9	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999992643499417	WITHOUT_CLASSIFICATION	7.356500582914204E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999024069165824	WITHOUT_CLASSIFICATION	9.759308341765126E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999950109258	WITHOUT_CLASSIFICATION	4.98907415628902E-9	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995776238484	WITHOUT_CLASSIFICATION	4.223761515964201E-7	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988859279741	WITHOUT_CLASSIFICATION	1.1140720259284446E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993642480132	WITHOUT_CLASSIFICATION	6.35751986791556E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989053122753	WITHOUT_CLASSIFICATION	1.0946877246626962E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999699235001493	WITHOUT_CLASSIFICATION	3.0076499850533805E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999950422767	WITHOUT_CLASSIFICATION	4.9577234464989795E-9	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999998626183185	WITHOUT_CLASSIFICATION	1.373816815564937E-7	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999995999037322	WITHOUT_CLASSIFICATION	4.0009626786786297E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945262797373	WITHOUT_CLASSIFICATION	5.4737202627722525E-6	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999474312653	WITHOUT_CLASSIFICATION	5.256873479113081E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999928653858621	WITHOUT_CLASSIFICATION	7.134614137917435E-6	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999998235585161	WITHOUT_CLASSIFICATION	1.7644148383221224E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.99999999899711	WITHOUT_CLASSIFICATION	1.0028899449229873E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999533992988388	WITHOUT_CLASSIFICATION	4.6600701161280974E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996410331746	WITHOUT_CLASSIFICATION	3.5896682533984107E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999998826873618	WITHOUT_CLASSIFICATION	1.1731263820319992E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999996872501834	WITHOUT_CLASSIFICATION	3.1274981660577474E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998520330794228	WITHOUT_CLASSIFICATION	1.4796692057712294E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995586301014	WITHOUT_CLASSIFICATION	4.4136989856612685E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999999995173668	WITHOUT_CLASSIFICATION	4.826332032147367E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997539545324	WITHOUT_CLASSIFICATION	2.460454676620058E-7	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995361352514	WITHOUT_CLASSIFICATION	4.638647485335523E-7	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999590317727	WITHOUT_CLASSIFICATION	4.0968227229278706E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999995968566155	WITHOUT_CLASSIFICATION	4.031433843480512E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999699235001493	WITHOUT_CLASSIFICATION	3.0076499850533805E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998773526676	WITHOUT_CLASSIFICATION	1.226473323877428E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999523065507	WITHOUT_CLASSIFICATION	4.769344924633193E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999104085272	WITHOUT_CLASSIFICATION	8.959147275967598E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999699630672	WITHOUT_CLASSIFICATION	3.003693283906719E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999699196209	WITHOUT_CLASSIFICATION	3.0080379125462573E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998913109673	WITHOUT_CLASSIFICATION	1.0868903266586915E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999651708746	WITHOUT_CLASSIFICATION	3.482912527611053E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999997287210292	WITHOUT_CLASSIFICATION	2.7127897089695426E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999614991118416	WITHOUT_CLASSIFICATION	3.850088815836786E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999992817119663	WITHOUT_CLASSIFICATION	7.182880336709035E-7	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999954789179	WITHOUT_CLASSIFICATION	4.521082161536279E-9	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998733048073	WITHOUT_CLASSIFICATION	1.2669519277573344E-7	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998756311833	WITHOUT_CLASSIFICATION	1.2436881672306635E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999919105499412	WITHOUT_CLASSIFICATION	8.08945005882838E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999996492217477	WITHOUT_CLASSIFICATION	3.507782523760429E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994576190221	WITHOUT_CLASSIFICATION	5.423809779169508E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999539101854	WITHOUT_CLASSIFICATION	4.608981463608631E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999878199677	WITHOUT_CLASSIFICATION	1.2180032361566207E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998614608361	WITHOUT_CLASSIFICATION	1.3853916394544116E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999981657832024	WITHOUT_CLASSIFICATION	1.8342167975355798E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999997117045144	WITHOUT_CLASSIFICATION	2.882954855448543E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999987949594985	WITHOUT_CLASSIFICATION	1.205040501417256E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999996150382806	WITHOUT_CLASSIFICATION	3.8496171950701954E-7	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999978893716479	WITHOUT_CLASSIFICATION	2.1106283520012067E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999999631020261	WITHOUT_CLASSIFICATION	3.689797389222044E-8	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999578174239	WITHOUT_CLASSIFICATION	4.218257605144833E-8	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999851123158	WITHOUT_CLASSIFICATION	1.4887684198856058E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998520330794228	WITHOUT_CLASSIFICATION	1.4796692057712294E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996879221927	WITHOUT_CLASSIFICATION	3.120778072967526E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999637049602	WITHOUT_CLASSIFICATION	3.629503983219337E-8	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997418348439181	WITHOUT_CLASSIFICATION	2.581651560819487E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999990118163431	WITHOUT_CLASSIFICATION	9.881836568670849E-7	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999991596425073	WITHOUT_CLASSIFICATION	8.40357492686703E-7	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999995107129035	WITHOUT_CLASSIFICATION	4.892870964855926E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998520330794228	WITHOUT_CLASSIFICATION	1.4796692057712294E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.99999872897468	WITHOUT_CLASSIFICATION	1.2710253199289258E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999539101854	WITHOUT_CLASSIFICATION	4.608981463608631E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999986704337089	WITHOUT_CLASSIFICATION	1.329566291128597E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994576190221	WITHOUT_CLASSIFICATION	5.423809779169508E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999991913132269	WITHOUT_CLASSIFICATION	8.086867730624243E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993661773706813	WITHOUT_CLASSIFICATION	6.338226293185964E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999925416413578	WITHOUT_CLASSIFICATION	7.458358642280479E-6	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999104085272	WITHOUT_CLASSIFICATION	8.959147275967598E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999699630672	WITHOUT_CLASSIFICATION	3.003693283906719E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999699196209	WITHOUT_CLASSIFICATION	3.0080379125462573E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999966202369436	WITHOUT_CLASSIFICATION	3.379763056555978E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999993940118204	WITHOUT_CLASSIFICATION	6.059881795895596E-7	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997798112026	WITHOUT_CLASSIFICATION	2.2018879731555232E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994576190221	WITHOUT_CLASSIFICATION	5.423809779169508E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999991913132269	WITHOUT_CLASSIFICATION	8.086867730624243E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998520330794228	WITHOUT_CLASSIFICATION	1.4796692057712294E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998913109673	WITHOUT_CLASSIFICATION	1.0868903266586915E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999651708746	WITHOUT_CLASSIFICATION	3.482912527611053E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999997287210292	WITHOUT_CLASSIFICATION	2.7127897089695426E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999549785306	WITHOUT_CLASSIFICATION	4.502146930062373E-8	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999690018853	WITHOUT_CLASSIFICATION	3.0998114714734025E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999986911250599	WITHOUT_CLASSIFICATION	1.3088749400989845E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998901798601	WITHOUT_CLASSIFICATION	1.0982013983249328E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999973555998427	WITHOUT_CLASSIFICATION	2.644400157244911E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999914095966	WITHOUT_CLASSIFICATION	8.590403381922102E-9	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838127009542	WITHOUT_CLASSIFICATION	1.618729904587491E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999970023571543	WITHOUT_CLASSIFICATION	2.997642845761325E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999749759934067	WITHOUT_CLASSIFICATION	2.5024006593420986E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999987014766692	WITHOUT_CLASSIFICATION	1.2985233308357031E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999976171899	WITHOUT_CLASSIFICATION	2.3828100260987576E-9	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999148246715	WITHOUT_CLASSIFICATION	8.517532843794583E-8	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998934343462	WITHOUT_CLASSIFICATION	1.0656565380000718E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923952599156	WITHOUT_CLASSIFICATION	7.604740084381895E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985050201177	WITHOUT_CLASSIFICATION	1.4949798822527863E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999148246715	WITHOUT_CLASSIFICATION	8.517532843794583E-8	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999800649017	WITHOUT_CLASSIFICATION	1.9935098347146313E-8	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998548502719	WITHOUT_CLASSIFICATION	1.4514972806710578E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982096679321	WITHOUT_CLASSIFICATION	1.790332067981184E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997139552524	WITHOUT_CLASSIFICATION	2.8604474759630084E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999726997604	WITHOUT_CLASSIFICATION	2.730023963526162E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999949099791681	WITHOUT_CLASSIFICATION	5.0900208319155E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996542338485	WITHOUT_CLASSIFICATION	3.4576615152058334E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994442229604	WITHOUT_CLASSIFICATION	5.557770396071214E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.99999999899711	WITHOUT_CLASSIFICATION	1.0028899449229873E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999995070533423	WITHOUT_CLASSIFICATION	4.92946657680187E-7	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999640948274	WITHOUT_CLASSIFICATION	3.5905172720093094E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999846272228	WITHOUT_CLASSIFICATION	1.5372777231030188E-8	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999884746296935	WITHOUT_CLASSIFICATION	1.1525370306408271E-5	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999227533319	WITHOUT_CLASSIFICATION	7.724666811660485E-8	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999866190726	WITHOUT_CLASSIFICATION	1.3380927412055475E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999997357468591	WITHOUT_CLASSIFICATION	2.642531409013327E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999962956448	WITHOUT_CLASSIFICATION	3.7043550703587726E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999999766211021	WITHOUT_CLASSIFICATION	2.3378897902585447E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999082557789	WITHOUT_CLASSIFICATION	9.174422116050541E-8	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999994612019304	WITHOUT_CLASSIFICATION	5.387980695550744E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999970648436779	WITHOUT_CLASSIFICATION	2.9351563220519058E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999794787121	WITHOUT_CLASSIFICATION	2.052128791088427E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992105953001	WITHOUT_CLASSIFICATION	7.894046999441635E-7	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997742468156	WITHOUT_CLASSIFICATION	2.2575318448546892E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996970320151	WITHOUT_CLASSIFICATION	3.029679849249911E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998723832919	WITHOUT_CLASSIFICATION	1.2761670810034634E-6	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.99999960266785	WITHOUT_CLASSIFICATION	3.9733214995925273E-7	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999989159345811	WITHOUT_CLASSIFICATION	1.0840654188970556E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999967670460379	WITHOUT_CLASSIFICATION	3.2329539620179396E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982922718319	WITHOUT_CLASSIFICATION	1.7077281681144063E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993476066108	WITHOUT_CLASSIFICATION	6.52393389245069E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990070335663	WITHOUT_CLASSIFICATION	9.929664337454465E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999996661670834	WITHOUT_CLASSIFICATION	3.3383291658804856E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999990648030054	WITHOUT_CLASSIFICATION	9.35196994544954E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994100394387	WITHOUT_CLASSIFICATION	5.899605612405877E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999999434000947	WITHOUT_CLASSIFICATION	5.6599905394959363E-8	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973888587469	WITHOUT_CLASSIFICATION	2.611141253139145E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999587305662	WITHOUT_CLASSIFICATION	4.1269433803679594E-7	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999994489309366	WITHOUT_CLASSIFICATION	5.510690633846675E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999991342863148	WITHOUT_CLASSIFICATION	8.657136852055411E-7	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998806304303	WITHOUT_CLASSIFICATION	1.193695695572206E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.999999858319103	WITHOUT_CLASSIFICATION	1.4168089709926732E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999834589634518	WITHOUT_CLASSIFICATION	1.654103654831191E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999766293157909	WITHOUT_CLASSIFICATION	2.3370684209153515E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999995913107768	WITHOUT_CLASSIFICATION	4.086892231973233E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999361428433	WITHOUT_CLASSIFICATION	6.385715671800031E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999994743747026	WITHOUT_CLASSIFICATION	5.25625297395301E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999168328715	WITHOUT_CLASSIFICATION	8.31671284693094E-8	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999962642094	WITHOUT_CLASSIFICATION	3.735790524757766E-9	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999972934018944	WITHOUT_CLASSIFICATION	2.706598105632064E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999994676405825	WITHOUT_CLASSIFICATION	5.323594174988919E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999952041109	WITHOUT_CLASSIFICATION	4.795889085090574E-8	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999866727485109	WITHOUT_CLASSIFICATION	1.3327251488948954E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999994974712796	WITHOUT_CLASSIFICATION	5.02528720373302E-7	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999979943270385	WITHOUT_CLASSIFICATION	2.005672961497435E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999963349251779	WITHOUT_CLASSIFICATION	3.665074822075814E-6	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998679257248994	WITHOUT_CLASSIFICATION	1.320742751006642E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999691930403121	WITHOUT_CLASSIFICATION	3.080695968792692E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999850029706	WITHOUT_CLASSIFICATION	1.499702941541725E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999991097668746	WITHOUT_CLASSIFICATION	8.902331254987495E-7	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999810013864	WITHOUT_CLASSIFICATION	1.899861359452757E-8	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999998441861594	WITHOUT_CLASSIFICATION	1.5581384058405208E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995305294693	WITHOUT_CLASSIFICATION	4.6947053064560475E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999446147931	WITHOUT_CLASSIFICATION	5.538520700822351E-8	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999661886783	WITHOUT_CLASSIFICATION	3.381132177781445E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990489002658	WITHOUT_CLASSIFICATION	9.510997342759984E-7	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999999824420512	WITHOUT_CLASSIFICATION	1.7557948798009148E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999635081126	WITHOUT_CLASSIFICATION	3.649188737456072E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996907287233	WITHOUT_CLASSIFICATION	3.0927127660660957E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997358872148	WITHOUT_CLASSIFICATION	2.641127851579255E-7	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999856079531	WITHOUT_CLASSIFICATION	1.4392046807639983E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999995623014771	WITHOUT_CLASSIFICATION	4.376985228803767E-7	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999977947733381	WITHOUT_CLASSIFICATION	2.2052266619385063E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999994597455621	WITHOUT_CLASSIFICATION	5.402544378403842E-7	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999996305796163	WITHOUT_CLASSIFICATION	3.6942038372539975E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998897225408	WITHOUT_CLASSIFICATION	1.1027745922446807E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999334807813	WITHOUT_CLASSIFICATION	6.651921870007503E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999999291556929	WITHOUT_CLASSIFICATION	7.08443071066238E-8	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999985936234345	WITHOUT_CLASSIFICATION	1.4063765655239966E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999988175198672	WITHOUT_CLASSIFICATION	1.1824801327787882E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999810576023308	WITHOUT_CLASSIFICATION	1.8942397669139913E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999989368299197	WITHOUT_CLASSIFICATION	1.063170080248818E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999992371857483	WITHOUT_CLASSIFICATION	7.628142516027691E-7	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998844349933	WITHOUT_CLASSIFICATION	1.1556500669155249E-7	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999461846769	WITHOUT_CLASSIFICATION	5.3815323062289085E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999853731868	WITHOUT_CLASSIFICATION	1.462681318058089E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999671248857	WITHOUT_CLASSIFICATION	3.28751142916108E-8	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999955282342883	WITHOUT_CLASSIFICATION	4.471765711627398E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999994801779234	WITHOUT_CLASSIFICATION	5.198220765197804E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999995537988449	WITHOUT_CLASSIFICATION	4.4620115507976633E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996956836174	WITHOUT_CLASSIFICATION	3.043163827299807E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999997301115121	WITHOUT_CLASSIFICATION	2.6988848780401686E-7	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999987011473056	WITHOUT_CLASSIFICATION	1.2988526944076192E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999994064244908	WITHOUT_CLASSIFICATION	5.93575509079419E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999988773019425	WITHOUT_CLASSIFICATION	1.122698057493806E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999980758724034	WITHOUT_CLASSIFICATION	1.924127596547066E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.999999125139205	WITHOUT_CLASSIFICATION	8.748607949198491E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.999999555321097	WITHOUT_CLASSIFICATION	4.446789031272815E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993213966791	WITHOUT_CLASSIFICATION	6.786033209423546E-7	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999990969151964	WITHOUT_CLASSIFICATION	9.030848037207639E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999981124436557	WITHOUT_CLASSIFICATION	1.8875563443630487E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999612656494276	WITHOUT_CLASSIFICATION	3.8734350572480576E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999995745760352	WITHOUT_CLASSIFICATION	4.2542396486130814E-7	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999993354771233	WITHOUT_CLASSIFICATION	6.645228767639028E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999976655324144	WITHOUT_CLASSIFICATION	2.334467585525958E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.999999844698754	WITHOUT_CLASSIFICATION	1.5530124597138039E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999996753351	WITHOUT_CLASSIFICATION	3.2466478843528626E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999976817535711	WITHOUT_CLASSIFICATION	2.318246428977349E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999576438583072	WITHOUT_CLASSIFICATION	4.235614169280182E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999915996128335	WITHOUT_CLASSIFICATION	8.400387166560941E-6	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999976817535711	WITHOUT_CLASSIFICATION	2.318246428977349E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999996524493104	WITHOUT_CLASSIFICATION	3.4755068963084385E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999998174902022	WITHOUT_CLASSIFICATION	1.8250979769182614E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999968784516226	WITHOUT_CLASSIFICATION	3.12154837745761E-6	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999990143773507	WITHOUT_CLASSIFICATION	9.856226492872538E-6	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999999297599688	WITHOUT_CLASSIFICATION	7.024003116692933E-8	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998887664346	WITHOUT_CLASSIFICATION	1.1123356529884087E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999707871410897	WITHOUT_CLASSIFICATION	2.9212858910296447E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999990334430785	WITHOUT_CLASSIFICATION	9.665569214994685E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999446867925	WITHOUT_CLASSIFICATION	5.53132076094519E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999825653303905	WITHOUT_CLASSIFICATION	1.743466960956948E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999303779844	WITHOUT_CLASSIFICATION	6.962201562718311E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999989539366112	WITHOUT_CLASSIFICATION	1.046063388841901E-6	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999993686002684	WITHOUT_CLASSIFICATION	6.313997317059543E-7	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999991575997695	WITHOUT_CLASSIFICATION	8.424002303548299E-7	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999006858394	WITHOUT_CLASSIFICATION	9.931416057804168E-8	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.99999214867363	WITHOUT_CLASSIFICATION	7.851326370052181E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999895627001953	WITHOUT_CLASSIFICATION	1.0437299804661967E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999895627001953	WITHOUT_CLASSIFICATION	1.0437299804661967E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999777776066	WITHOUT_CLASSIFICATION	2.2222393390033786E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999766727736626	WITHOUT_CLASSIFICATION	2.332722633744615E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999855237005862	WITHOUT_CLASSIFICATION	1.4476299413804087E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999942268153355	WITHOUT_CLASSIFICATION	5.773184664621986E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996546164819	WITHOUT_CLASSIFICATION	3.45383518055333E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999501064112793	WITHOUT_CLASSIFICATION	4.989358872068863E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999993107131908	WITHOUT_CLASSIFICATION	6.892868091892437E-7	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999751772567	WITHOUT_CLASSIFICATION	2.482274339648897E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999993236515715	WITHOUT_CLASSIFICATION	6.763484285019614E-7	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999983629108843	WITHOUT_CLASSIFICATION	1.6370891158088072E-6	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999462105773	WITHOUT_CLASSIFICATION	5.37894225697084E-8	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999951607587	WITHOUT_CLASSIFICATION	4.839241385856926E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999529704086	WITHOUT_CLASSIFICATION	4.70295913389634E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999996710511181	WITHOUT_CLASSIFICATION	3.289488819402083E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999971744827	WITHOUT_CLASSIFICATION	2.8255172399359573E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992105953001	WITHOUT_CLASSIFICATION	7.894046999441635E-7	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999962349512634	WITHOUT_CLASSIFICATION	3.7650487365085613E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999853435776	WITHOUT_CLASSIFICATION	1.465642250393557E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999999905467013	WITHOUT_CLASSIFICATION	9.45329869777766E-8	TEST
do the test	WITHOUT_CLASSIFICATION	0.9989731895979441	WITHOUT_CLASSIFICATION	0.001026810402055863	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999613535744	WITHOUT_CLASSIFICATION	3.864642557607709E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999992373840311	WITHOUT_CLASSIFICATION	7.626159688426948E-7	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999998312189176	WITHOUT_CLASSIFICATION	1.6878108254208898E-7	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999254601251	WITHOUT_CLASSIFICATION	7.453987496427588E-8	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999862527534	WITHOUT_CLASSIFICATION	1.3747246468716785E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999692977686	WITHOUT_CLASSIFICATION	3.070223150597096E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999993015490243	WITHOUT_CLASSIFICATION	6.984509756343058E-7	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999998528827442	WITHOUT_CLASSIFICATION	1.471172558412019E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999932943840354	WITHOUT_CLASSIFICATION	6.705615964580446E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999991420668386	WITHOUT_CLASSIFICATION	8.579331612903719E-7	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999996104759773	WITHOUT_CLASSIFICATION	3.895240226109269E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999766406835	WITHOUT_CLASSIFICATION	2.3359316476777425E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999955743917618	WITHOUT_CLASSIFICATION	4.425608238187509E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999978050729117	WITHOUT_CLASSIFICATION	2.19492708838062E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999996948737494	WITHOUT_CLASSIFICATION	3.0512625065360936E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999621381265	WITHOUT_CLASSIFICATION	3.786187351288131E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999986683648072	WITHOUT_CLASSIFICATION	1.3316351927109555E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999999876915768	WITHOUT_CLASSIFICATION	1.230842320093865E-7	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999976831961173	WITHOUT_CLASSIFICATION	2.3168038826982714E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999973673196455	WITHOUT_CLASSIFICATION	2.6326803546078947E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.999984321408283	WITHOUT_CLASSIFICATION	1.567859171700953E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.999999709463957	WITHOUT_CLASSIFICATION	2.905360429695069E-7	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999531969286	WITHOUT_CLASSIFICATION	4.6803071358412765E-8	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999753620945	WITHOUT_CLASSIFICATION	2.4637905524614668E-8	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999968977051537	WITHOUT_CLASSIFICATION	3.1022948463793552E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995710965648	WITHOUT_CLASSIFICATION	4.289034353283905E-7	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972878723887	WITHOUT_CLASSIFICATION	2.712127611314074E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984892954912	WITHOUT_CLASSIFICATION	1.510704508800844E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982819937103	WITHOUT_CLASSIFICATION	1.7180062896640935E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999642970341	WITHOUT_CLASSIFICATION	3.570296600317097E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999131033271	WITHOUT_CLASSIFICATION	8.689667292609805E-8	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995675022239	WITHOUT_CLASSIFICATION	4.3249777616030037E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999927906195	WITHOUT_CLASSIFICATION	7.209380584891653E-9	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999996594914233	WITHOUT_CLASSIFICATION	3.405085767637698E-7	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985476870331	WITHOUT_CLASSIFICATION	1.452312966874849E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999996594914233	WITHOUT_CLASSIFICATION	3.405085767637698E-7	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999970199754594	WITHOUT_CLASSIFICATION	2.9800245404685764E-6	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999984885601038	WITHOUT_CLASSIFICATION	1.5114398962967304E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999973943778883	WITHOUT_CLASSIFICATION	2.6056221116978907E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998755194244	WITHOUT_CLASSIFICATION	1.2448057560894912E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999974433341684	WITHOUT_CLASSIFICATION	2.556665831678389E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998571509955536	WITHOUT_CLASSIFICATION	1.4284900444638376E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998878695168	WITHOUT_CLASSIFICATION	1.1213048320811845E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999993658222168	WITHOUT_CLASSIFICATION	6.34177783206674E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999999971328414	WITHOUT_CLASSIFICATION	2.8671586012967135E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999933181009056	WITHOUT_CLASSIFICATION	6.681899094354355E-6	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999995277045824	WITHOUT_CLASSIFICATION	4.7229541752165616E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999884143945	WITHOUT_CLASSIFICATION	1.1585605446448863E-8	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999964718335526	WITHOUT_CLASSIFICATION	3.528166447535303E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999933070984637	WITHOUT_CLASSIFICATION	6.6929015362273474E-6	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999939809476	WITHOUT_CLASSIFICATION	6.0190523627173305E-9	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999935379857	WITHOUT_CLASSIFICATION	6.462014345242284E-9	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977234948209	WITHOUT_CLASSIFICATION	2.2765051790439784E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977234948209	WITHOUT_CLASSIFICATION	2.2765051790439784E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999998737972593	WITHOUT_CLASSIFICATION	1.2620274064232601E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999994827333715	WITHOUT_CLASSIFICATION	5.172666285058295E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999917905346	WITHOUT_CLASSIFICATION	8.209465404861612E-9	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995420728148	WITHOUT_CLASSIFICATION	4.579271851156133E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998981443781	WITHOUT_CLASSIFICATION	1.0185562195261028E-7	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999992138809066	WITHOUT_CLASSIFICATION	7.861190934748719E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999992495926406	WITHOUT_CLASSIFICATION	7.504073593823836E-7	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991128658524	WITHOUT_CLASSIFICATION	8.871341477206866E-7	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999985978887589	WITHOUT_CLASSIFICATION	1.4021112410630655E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999612293363	WITHOUT_CLASSIFICATION	3.8770663541318857E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999038754616	WITHOUT_CLASSIFICATION	9.612453852264164E-8	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999285784874	WITHOUT_CLASSIFICATION	7.142151268847367E-8	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999046444958	WITHOUT_CLASSIFICATION	9.535550412348172E-8	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996942418907	WITHOUT_CLASSIFICATION	3.057581093649903E-7	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998207703209	WITHOUT_CLASSIFICATION	1.792296790328463E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999577828131	WITHOUT_CLASSIFICATION	4.221718683095185E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999746304519	WITHOUT_CLASSIFICATION	2.5369548176094543E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999995776474153	WITHOUT_CLASSIFICATION	4.2235258472198227E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999999458253789	WITHOUT_CLASSIFICATION	5.417462108475013E-8	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999990759123	WITHOUT_CLASSIFICATION	9.240876462624235E-10	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999965894593319	WITHOUT_CLASSIFICATION	3.4105406682274685E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997415720994	WITHOUT_CLASSIFICATION	2.5842790063710004E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999390113052	WITHOUT_CLASSIFICATION	6.098869473674737E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999483873335	WITHOUT_CLASSIFICATION	5.161266649406552E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999990824971087	WITHOUT_CLASSIFICATION	9.175028914507602E-7	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999990427795484	WITHOUT_CLASSIFICATION	9.572204515144369E-7	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999313176255	WITHOUT_CLASSIFICATION	6.868237445016331E-8	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999996293609705	WITHOUT_CLASSIFICATION	3.706390293683834E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999849599228873	WITHOUT_CLASSIFICATION	1.5040077112790296E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999072613914	WITHOUT_CLASSIFICATION	9.27386085886901E-8	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999990153882162	WITHOUT_CLASSIFICATION	9.846117837639538E-7	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999990623284012	WITHOUT_CLASSIFICATION	9.376715988145558E-7	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999674430116879	WITHOUT_CLASSIFICATION	3.2556988312115785E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999995498967572	WITHOUT_CLASSIFICATION	4.501032427693128E-7	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999997315316004	WITHOUT_CLASSIFICATION	2.68468399695075E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999291957349	WITHOUT_CLASSIFICATION	7.080426504665778E-8	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998342416881	WITHOUT_CLASSIFICATION	1.6575831187465912E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999984561140293	WITHOUT_CLASSIFICATION	1.5438859706996751E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999840422731	WITHOUT_CLASSIFICATION	1.5957726924094766E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998627298453	WITHOUT_CLASSIFICATION	1.3727015460917777E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999349448044	WITHOUT_CLASSIFICATION	6.505519562652163E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990141398122	WITHOUT_CLASSIFICATION	9.858601878432036E-7	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999984379219397	WITHOUT_CLASSIFICATION	1.5620780604200274E-6	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999939477847	WITHOUT_CLASSIFICATION	6.052215285532943E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999980464589	WITHOUT_CLASSIFICATION	1.9535411926270938E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999999002157052	WITHOUT_CLASSIFICATION	9.978429484000176E-8	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999285872697	WITHOUT_CLASSIFICATION	7.141273024505516E-8	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996790601136	WITHOUT_CLASSIFICATION	3.2093988640522424E-7	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999993277841179	WITHOUT_CLASSIFICATION	6.72215882042219E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999991455088564	WITHOUT_CLASSIFICATION	8.544911437251174E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974782722821	WITHOUT_CLASSIFICATION	2.5217277177984603E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999991432751612	WITHOUT_CLASSIFICATION	8.567248388206599E-7	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999338044864	WITHOUT_CLASSIFICATION	6.619551353943771E-8	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999996947949062	WITHOUT_CLASSIFICATION	3.0520509371211966E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999987264568567	WITHOUT_CLASSIFICATION	1.273543143238949E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.99999872897468	WITHOUT_CLASSIFICATION	1.2710253199289258E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.99999872897468	WITHOUT_CLASSIFICATION	1.2710253199289258E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999433447769857	WITHOUT_CLASSIFICATION	5.6655223014251894E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999785817203861	WITHOUT_CLASSIFICATION	2.1418279613928383E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999279853095	WITHOUT_CLASSIFICATION	7.201469059466671E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999326001777	WITHOUT_CLASSIFICATION	6.739982233789789E-8	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999987190156	WITHOUT_CLASSIFICATION	1.2809843919714457E-8	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999449721143	WITHOUT_CLASSIFICATION	5.50278857782544E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998407472761	WITHOUT_CLASSIFICATION	1.5925272392506335E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999645914702	WITHOUT_CLASSIFICATION	3.5408529688908395E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999989814999626	WITHOUT_CLASSIFICATION	1.0185000374629385E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999555941635535	WITHOUT_CLASSIFICATION	4.440583644645562E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998936203153	WITHOUT_CLASSIFICATION	1.0637968462144466E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999997822245862	WITHOUT_CLASSIFICATION	2.177754137990999E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999999240362508	WITHOUT_CLASSIFICATION	7.596374919219763E-8	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999928797080252	WITHOUT_CLASSIFICATION	7.120291974772957E-6	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999315911254	WITHOUT_CLASSIFICATION	6.840887451554424E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999982502731107	WITHOUT_CLASSIFICATION	1.7497268893443697E-6	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999943939501618	WITHOUT_CLASSIFICATION	5.606049838236902E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999918531134	WITHOUT_CLASSIFICATION	8.14688655094356E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999948926683604	WITHOUT_CLASSIFICATION	5.1073316396712045E-6	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999987483210143	WITHOUT_CLASSIFICATION	1.2516789855746387E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997213633334	WITHOUT_CLASSIFICATION	2.7863666664530945E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999884521308	WITHOUT_CLASSIFICATION	1.1547869226785599E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999989049884414	WITHOUT_CLASSIFICATION	1.0950115586180722E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999980818193445	WITHOUT_CLASSIFICATION	1.918180655501846E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999798352349	WITHOUT_CLASSIFICATION	2.0164765093870785E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999506678537	WITHOUT_CLASSIFICATION	4.9332146221341285E-8	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999994996253141	WITHOUT_CLASSIFICATION	5.003746859251194E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999998580832572	WITHOUT_CLASSIFICATION	1.419167427218439E-7	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999508335633951	WITHOUT_CLASSIFICATION	4.916643660488741E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999997423264637	WITHOUT_CLASSIFICATION	2.5767353628623395E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999980818193445	WITHOUT_CLASSIFICATION	1.918180655501846E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999999510008715	WITHOUT_CLASSIFICATION	4.899912849508231E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999978314973	WITHOUT_CLASSIFICATION	2.168502724157369E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9998983469771979	WITHOUT_CLASSIFICATION	1.0165302280203046E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999995653242728	WITHOUT_CLASSIFICATION	4.3467572720652086E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999886487856	WITHOUT_CLASSIFICATION	1.1351214440490341E-8	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999699686795358	WITHOUT_CLASSIFICATION	3.003132046423859E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999459643896	WITHOUT_CLASSIFICATION	5.403561038219388E-8	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998941688705	WITHOUT_CLASSIFICATION	1.0583112946283568E-7	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999941509208372	WITHOUT_CLASSIFICATION	5.8490791627490525E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999995653242728	WITHOUT_CLASSIFICATION	4.3467572720652086E-7	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999582199526548	WITHOUT_CLASSIFICATION	4.1780047345209015E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998941688705	WITHOUT_CLASSIFICATION	1.0583112946283568E-7	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999304126501	WITHOUT_CLASSIFICATION	6.95873499379913E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999995982403201	WITHOUT_CLASSIFICATION	4.017596798991271E-6	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999942961293	WITHOUT_CLASSIFICATION	5.703870786813551E-9	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999038754616	WITHOUT_CLASSIFICATION	9.612453852264164E-8	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999800485775	WITHOUT_CLASSIFICATION	1.9951422533915912E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999997313787482	WITHOUT_CLASSIFICATION	2.686212518417347E-7	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999338824412	WITHOUT_CLASSIFICATION	6.611755865336958E-8	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999996360015869	WITHOUT_CLASSIFICATION	3.639984130849492E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999993301904412	WITHOUT_CLASSIFICATION	6.698095587935902E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999944843363502	WITHOUT_CLASSIFICATION	5.5156636497719275E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999932710432108	WITHOUT_CLASSIFICATION	6.728956789231181E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999980988389846	WITHOUT_CLASSIFICATION	1.9011610153863794E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999997659961615	WITHOUT_CLASSIFICATION	2.340038384950803E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999994445097465	WITHOUT_CLASSIFICATION	5.554902534135787E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999776130513546	WITHOUT_CLASSIFICATION	2.2386948645450943E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999848865826	WITHOUT_CLASSIFICATION	1.511341746109278E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999964248599	WITHOUT_CLASSIFICATION	3.5751401039425386E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999993965896994	WITHOUT_CLASSIFICATION	6.034103005833254E-7	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.99999999376795	WITHOUT_CLASSIFICATION	6.23204997460862E-9	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999989941781612	WITHOUT_CLASSIFICATION	1.0058218388442237E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999957310027059	WITHOUT_CLASSIFICATION	4.268997294099408E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995268968215	WITHOUT_CLASSIFICATION	4.7310317860498556E-7	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995414649724	WITHOUT_CLASSIFICATION	4.5853502766067065E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999996490686739	WITHOUT_CLASSIFICATION	3.5093132611953824E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999992398685071	WITHOUT_CLASSIFICATION	7.601314928558352E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999023503376	WITHOUT_CLASSIFICATION	9.764966226390706E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998789493831	WITHOUT_CLASSIFICATION	1.2105061686710395E-7	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999953339219597	WITHOUT_CLASSIFICATION	4.666078040316208E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999997128170833	WITHOUT_CLASSIFICATION	2.8718291668337543E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999450734583154	WITHOUT_CLASSIFICATION	5.492654168471261E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999990510679813	WITHOUT_CLASSIFICATION	9.489320187938399E-7	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988460335442	WITHOUT_CLASSIFICATION	1.1539664557265485E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988848972987	WITHOUT_CLASSIFICATION	1.1151027011960416E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999993774142782	WITHOUT_CLASSIFICATION	6.225857217030952E-7	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999997664751293	WITHOUT_CLASSIFICATION	2.3352487069748845E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998029767823	WITHOUT_CLASSIFICATION	1.970232178070344E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999983371312	WITHOUT_CLASSIFICATION	1.6628687967874773E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999995719933042	WITHOUT_CLASSIFICATION	4.280066957212499E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999991378236962	WITHOUT_CLASSIFICATION	8.621763037749469E-7	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999998965959516	WITHOUT_CLASSIFICATION	1.0340404847076553E-7	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999918612773	WITHOUT_CLASSIFICATION	8.138722698133572E-8	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999984928523222	WITHOUT_CLASSIFICATION	1.507147677714289E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996879423669	WITHOUT_CLASSIFICATION	3.120576329833723E-7	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999976025855526	WITHOUT_CLASSIFICATION	2.397414447354245E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999093761901	WITHOUT_CLASSIFICATION	9.062380987514531E-8	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999833618648	WITHOUT_CLASSIFICATION	1.663813521716317E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999976527529507	WITHOUT_CLASSIFICATION	2.347247049319337E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987936343341	WITHOUT_CLASSIFICATION	1.2063656659133127E-6	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999437692510474	WITHOUT_CLASSIFICATION	5.62307489524761E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999953427394993	WITHOUT_CLASSIFICATION	4.657260500721512E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999986994029845	WITHOUT_CLASSIFICATION	1.3005970155146112E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999972654582681	WITHOUT_CLASSIFICATION	2.7345417319262925E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999972693972733	WITHOUT_CLASSIFICATION	2.730602726638276E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999989638774303	WITHOUT_CLASSIFICATION	1.0361225697262547E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999907001192	WITHOUT_CLASSIFICATION	9.299880845148346E-9	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999983819269068	WITHOUT_CLASSIFICATION	1.6180730932020857E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999793612969	WITHOUT_CLASSIFICATION	2.0638703123360725E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999994123706537	WITHOUT_CLASSIFICATION	5.876293462687146E-7	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998641922284187	WITHOUT_CLASSIFICATION	1.3580777158121572E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999905745539764	WITHOUT_CLASSIFICATION	9.42544602360021E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988460335442	WITHOUT_CLASSIFICATION	1.1539664557265485E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999894816568	WITHOUT_CLASSIFICATION	1.0518343189420848E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999980308395	WITHOUT_CLASSIFICATION	1.969160492775421E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999935654723543	WITHOUT_CLASSIFICATION	6.434527645764897E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.999975107777167	WITHOUT_CLASSIFICATION	2.489222283306551E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999820634475	WITHOUT_CLASSIFICATION	1.7936552493009373E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999990488630668	WITHOUT_CLASSIFICATION	9.511369333514237E-7	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966233850073	WITHOUT_CLASSIFICATION	3.376614992711856E-6	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999649005432	WITHOUT_CLASSIFICATION	3.5099456767341416E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999745066351	WITHOUT_CLASSIFICATION	2.549336481995597E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999977902934772	WITHOUT_CLASSIFICATION	2.2097065227808013E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999949164536	WITHOUT_CLASSIFICATION	5.083546361424691E-9	TEST
/	WITHOUT_CLASSIFICATION	0.9998474010727356	WITHOUT_CLASSIFICATION	1.5259892726441403E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999995403385183	WITHOUT_CLASSIFICATION	4.59661481757467E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999988042093216	WITHOUT_CLASSIFICATION	1.1957906783150913E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999970199754594	WITHOUT_CLASSIFICATION	2.9800245404685764E-6	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999977840929	WITHOUT_CLASSIFICATION	2.2159072095213025E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999999076048	WITHOUT_CLASSIFICATION	9.23952347551415E-11	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998699495424	WITHOUT_CLASSIFICATION	1.300504576352762E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999990269924288	WITHOUT_CLASSIFICATION	9.730075711971493E-7	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999959676651	WITHOUT_CLASSIFICATION	4.03233498378939E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990821052663	WITHOUT_CLASSIFICATION	9.178947337627275E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990821052663	WITHOUT_CLASSIFICATION	9.178947337627275E-7	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998317864894	WITHOUT_CLASSIFICATION	1.6821351063510734E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999976495703424	WITHOUT_CLASSIFICATION	2.350429657646429E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999181685089	WITHOUT_CLASSIFICATION	8.18314911092812E-8	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999995056104366	WITHOUT_CLASSIFICATION	4.943895634545992E-7	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999999890428441	WITHOUT_CLASSIFICATION	1.0957155904211415E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999999906099232	WITHOUT_CLASSIFICATION	9.390076807183373E-8	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999862300830523	WITHOUT_CLASSIFICATION	1.3769916947635596E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998449447846	WITHOUT_CLASSIFICATION	1.5505521549701547E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998449447846	WITHOUT_CLASSIFICATION	1.5505521549701547E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999998839740807	WITHOUT_CLASSIFICATION	1.1602591929555276E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997647855671	WITHOUT_CLASSIFICATION	2.352144329146057E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999039506486	WITHOUT_CLASSIFICATION	9.604935129968616E-8	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999981649869677	WITHOUT_CLASSIFICATION	1.835013032190745E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999981649869677	WITHOUT_CLASSIFICATION	1.835013032190745E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999981649869677	WITHOUT_CLASSIFICATION	1.835013032190745E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999998366556124	WITHOUT_CLASSIFICATION	1.6334438755351513E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999995804138953	WITHOUT_CLASSIFICATION	4.195861047670704E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.99999802359754	WITHOUT_CLASSIFICATION	1.9764024600056525E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999835863421546	WITHOUT_CLASSIFICATION	1.641365784546578E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999368460089	WITHOUT_CLASSIFICATION	6.315399118083446E-8	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999937009503	WITHOUT_CLASSIFICATION	6.299049732899816E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999520296191	WITHOUT_CLASSIFICATION	4.7970380929628375E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999925878590907	WITHOUT_CLASSIFICATION	7.412140909266027E-6	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999998771650385	WITHOUT_CLASSIFICATION	1.228349614973042E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999008183901	WITHOUT_CLASSIFICATION	9.918160998966572E-8	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999990725554236	WITHOUT_CLASSIFICATION	9.274445762929773E-7	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999987241617737	WITHOUT_CLASSIFICATION	1.2758382261973596E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999988020548081	WITHOUT_CLASSIFICATION	1.1979451920079444E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999999850888133	WITHOUT_CLASSIFICATION	1.4911186698432106E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999583448996	WITHOUT_CLASSIFICATION	4.165510048201367E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999996875965564	WITHOUT_CLASSIFICATION	3.124034435583829E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999974866240016	WITHOUT_CLASSIFICATION	2.5133759985115587E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999416057833704	WITHOUT_CLASSIFICATION	5.8394216629600865E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999416057833704	WITHOUT_CLASSIFICATION	5.8394216629600865E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999621485108042	WITHOUT_CLASSIFICATION	3.785148919578581E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999621485108042	WITHOUT_CLASSIFICATION	3.785148919578581E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999638331065241	WITHOUT_CLASSIFICATION	3.616689347591572E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999694089763983	WITHOUT_CLASSIFICATION	3.0591023601612315E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999694089763983	WITHOUT_CLASSIFICATION	3.0591023601612315E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999798770486833	WITHOUT_CLASSIFICATION	2.012295131673816E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999547134708313	WITHOUT_CLASSIFICATION	4.5286529168750586E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995102277232	WITHOUT_CLASSIFICATION	4.897722767915893E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990821052663	WITHOUT_CLASSIFICATION	9.178947337627275E-7	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999432174691	WITHOUT_CLASSIFICATION	5.678253090345505E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999547134708313	WITHOUT_CLASSIFICATION	4.5286529168750586E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999912902032	WITHOUT_CLASSIFICATION	8.709796658818482E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999995215773031	WITHOUT_CLASSIFICATION	4.784226968326724E-7	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999508164068344	WITHOUT_CLASSIFICATION	4.918359316560723E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999813066553327	WITHOUT_CLASSIFICATION	1.869334466728205E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999975208207	WITHOUT_CLASSIFICATION	2.4791793578215253E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998531465705047	WITHOUT_CLASSIFICATION	1.4685342949523214E-4	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999994367815142	WITHOUT_CLASSIFICATION	5.632184859755117E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999985122624849	WITHOUT_CLASSIFICATION	1.4877375149728515E-6	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999988869186758	WITHOUT_CLASSIFICATION	1.1130813241318265E-6	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999920658890382	WITHOUT_CLASSIFICATION	7.934110961745037E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999782443403	WITHOUT_CLASSIFICATION	2.175565975386068E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999960400023772	WITHOUT_CLASSIFICATION	3.959997622798559E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999981618694609	WITHOUT_CLASSIFICATION	1.8381305391818073E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999970197091549	WITHOUT_CLASSIFICATION	2.9802908451663185E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999998858166838	WITHOUT_CLASSIFICATION	1.1418331620546275E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999067796842	WITHOUT_CLASSIFICATION	9.322031576150484E-8	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999588359297	WITHOUT_CLASSIFICATION	4.116407030684836E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999997900446092	WITHOUT_CLASSIFICATION	2.099553907964643E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999997900446092	WITHOUT_CLASSIFICATION	2.099553907964643E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999977640641279	WITHOUT_CLASSIFICATION	2.2359358720497252E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999987605716413	WITHOUT_CLASSIFICATION	1.2394283588211602E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999992205632486	WITHOUT_CLASSIFICATION	7.794367514039038E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999995333221408	WITHOUT_CLASSIFICATION	4.666778592010359E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999969318652192	WITHOUT_CLASSIFICATION	3.068134780733944E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999486627468	WITHOUT_CLASSIFICATION	5.133725312613389E-8	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999969932593	WITHOUT_CLASSIFICATION	3.006740748091888E-9	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999940529322824	WITHOUT_CLASSIFICATION	5.947067717672722E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999994756653243	WITHOUT_CLASSIFICATION	5.243346755889177E-7	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999811952468	WITHOUT_CLASSIFICATION	1.8804753210517746E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997733204395	WITHOUT_CLASSIFICATION	2.2667956035626373E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9998474010727356	WITHOUT_CLASSIFICATION	1.5259892726441403E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999502696433	WITHOUT_CLASSIFICATION	4.9730356698499927E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999992525039484	WITHOUT_CLASSIFICATION	7.474960515247146E-7	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999983316600167	WITHOUT_CLASSIFICATION	1.6683399832809516E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999999126192458	WITHOUT_CLASSIFICATION	8.73807542120201E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999577113672	WITHOUT_CLASSIFICATION	4.2288632717235734E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999577113672	WITHOUT_CLASSIFICATION	4.2288632717235734E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999925794994066	WITHOUT_CLASSIFICATION	7.420500593456616E-6	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999944946095	WITHOUT_CLASSIFICATION	5.505390491230289E-8	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999989257904636	WITHOUT_CLASSIFICATION	1.0742095364990984E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.999998164559527	WITHOUT_CLASSIFICATION	1.8354404730072095E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999988322676893	WITHOUT_CLASSIFICATION	1.167732310810328E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999982549745582	WITHOUT_CLASSIFICATION	1.745025441795162E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999113077397	WITHOUT_CLASSIFICATION	8.86922602919307E-8	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999208667274	WITHOUT_CLASSIFICATION	7.913327270525716E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999498758134	WITHOUT_CLASSIFICATION	5.012418660484561E-8	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999713176075	WITHOUT_CLASSIFICATION	2.868239239805061E-8	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999996315330638	WITHOUT_CLASSIFICATION	3.684669361860547E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999208667274	WITHOUT_CLASSIFICATION	7.913327270525716E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999802666952	WITHOUT_CLASSIFICATION	1.973330474923292E-8	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998381769637	WITHOUT_CLASSIFICATION	1.6182303640045426E-7	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999840115651	WITHOUT_CLASSIFICATION	1.5988434965986813E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999830364379327	WITHOUT_CLASSIFICATION	1.6963562067225198E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999709109091	WITHOUT_CLASSIFICATION	2.908909087875717E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999784921132	WITHOUT_CLASSIFICATION	2.1507886898185217E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999635551352	WITHOUT_CLASSIFICATION	3.644486471262916E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996962483357	WITHOUT_CLASSIFICATION	3.037516643037796E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999862127825	WITHOUT_CLASSIFICATION	1.3787217497269788E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999972317805638	WITHOUT_CLASSIFICATION	2.7682194361808155E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999982373292796	WITHOUT_CLASSIFICATION	1.7626707204553147E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997813868488	WITHOUT_CLASSIFICATION	2.1861315137458838E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999571028539	WITHOUT_CLASSIFICATION	4.289714599981755E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999989176795049	WITHOUT_CLASSIFICATION	1.0823204951621269E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999950789604625	WITHOUT_CLASSIFICATION	4.92103953753406E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999991337740455	WITHOUT_CLASSIFICATION	8.662259545270085E-7	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999991689735718	WITHOUT_CLASSIFICATION	8.310264281932766E-7	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999408170471055	WITHOUT_CLASSIFICATION	5.9182952894529264E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999084195299154	WITHOUT_CLASSIFICATION	9.15804700846422E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999760114289	WITHOUT_CLASSIFICATION	2.398857120435883E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997900511762	WITHOUT_CLASSIFICATION	2.0994882379103278E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999567416485	WITHOUT_CLASSIFICATION	4.3258351480372824E-8	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999949676573326	WITHOUT_CLASSIFICATION	5.03234266740548E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.999833075584431	WITHOUT_CLASSIFICATION	1.6692441556899208E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999560495263	WITHOUT_CLASSIFICATION	4.395047382353925E-8	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999841314673427	WITHOUT_CLASSIFICATION	1.586853265733829E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999501580966	WITHOUT_CLASSIFICATION	4.9841903461292425E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999919838007	WITHOUT_CLASSIFICATION	8.016199212577782E-9	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999401564735	WITHOUT_CLASSIFICATION	5.984352644472635E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999998010852666	WITHOUT_CLASSIFICATION	1.9891473331399367E-7	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999976476133	WITHOUT_CLASSIFICATION	2.3523868163055002E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999998422630373	WITHOUT_CLASSIFICATION	1.5773696275336211E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999978209909197	WITHOUT_CLASSIFICATION	2.1790090801638057E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999464045858	WITHOUT_CLASSIFICATION	5.359541430607178E-8	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996986178554	WITHOUT_CLASSIFICATION	3.013821445321965E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999995178011791	WITHOUT_CLASSIFICATION	4.821988209037511E-7	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999923875812	WITHOUT_CLASSIFICATION	7.612418807499181E-9	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999818404983	WITHOUT_CLASSIFICATION	1.8159501637310327E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999984602142069	WITHOUT_CLASSIFICATION	1.5397857930862899E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999423636733	WITHOUT_CLASSIFICATION	5.76363267600422E-8	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999988196602227	WITHOUT_CLASSIFICATION	1.1803397772047386E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999873463121	WITHOUT_CLASSIFICATION	1.2653687836576037E-8	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999904744594	WITHOUT_CLASSIFICATION	9.52554052564916E-9	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999849765064	WITHOUT_CLASSIFICATION	1.5023493564768343E-8	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999989389645672	WITHOUT_CLASSIFICATION	1.061035432945766E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999571002587	WITHOUT_CLASSIFICATION	4.2899741286029765E-8	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999993014161435	WITHOUT_CLASSIFICATION	6.985838564384505E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999846898269482	WITHOUT_CLASSIFICATION	1.5310173051706822E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999992323337176	WITHOUT_CLASSIFICATION	7.676662824523523E-7	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997487167748	WITHOUT_CLASSIFICATION	2.512832253028127E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950965537506	WITHOUT_CLASSIFICATION	4.90344624938584E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999992832392575	WITHOUT_CLASSIFICATION	7.16760742467417E-7	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998251604472	WITHOUT_CLASSIFICATION	1.7483955288647833E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999993994551496	WITHOUT_CLASSIFICATION	6.005448503911639E-7	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999896073296	WITHOUT_CLASSIFICATION	1.0392670525227627E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999995747407013	WITHOUT_CLASSIFICATION	4.2525929865043033E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997837528461	WITHOUT_CLASSIFICATION	2.1624715369417867E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997245272385	WITHOUT_CLASSIFICATION	2.7547276151588936E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999982624319174	WITHOUT_CLASSIFICATION	1.7375680825513345E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999935908201286	WITHOUT_CLASSIFICATION	6.409179871342494E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999996893152763	WITHOUT_CLASSIFICATION	3.1068472369787125E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993250626484	WITHOUT_CLASSIFICATION	6.749373516104825E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999998831898048	WITHOUT_CLASSIFICATION	1.1681019522998826E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998369628134776	WITHOUT_CLASSIFICATION	1.6303718652238626E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998499665567	WITHOUT_CLASSIFICATION	1.5003344324006896E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999928446176487	WITHOUT_CLASSIFICATION	7.155382351260504E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950965537506	WITHOUT_CLASSIFICATION	4.90344624938584E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998723627853	WITHOUT_CLASSIFICATION	1.276372146098358E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999988032381476	WITHOUT_CLASSIFICATION	1.1967618524630803E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998603094118	WITHOUT_CLASSIFICATION	1.3969058833745278E-7	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999129726965	WITHOUT_CLASSIFICATION	8.702730342251663E-8	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999835233513703	WITHOUT_CLASSIFICATION	1.6476648629728815E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999987669724159	WITHOUT_CLASSIFICATION	1.2330275841541877E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999498758134	WITHOUT_CLASSIFICATION	5.012418660484561E-8	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999724661694878	WITHOUT_CLASSIFICATION	2.7533830512252878E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996986178554	WITHOUT_CLASSIFICATION	3.013821445321965E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999994874054354	WITHOUT_CLASSIFICATION	5.125945645919199E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999793742018	WITHOUT_CLASSIFICATION	2.0625798161276798E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995206567689	WITHOUT_CLASSIFICATION	4.793432311152402E-7	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994408393461	WITHOUT_CLASSIFICATION	5.591606540143238E-7	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999995935715006	WITHOUT_CLASSIFICATION	4.0642849939371476E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998004289176	WITHOUT_CLASSIFICATION	1.995710825535817E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999903263749605	WITHOUT_CLASSIFICATION	9.673625039482666E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997434598058	WITHOUT_CLASSIFICATION	2.5654019412020325E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999753031114	WITHOUT_CLASSIFICATION	2.4696888617020952E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999899045323	WITHOUT_CLASSIFICATION	1.0095467701926494E-8	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998134573852	WITHOUT_CLASSIFICATION	1.8654261476811765E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998864716743	WITHOUT_CLASSIFICATION	1.1352832573828092E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998078360278	WITHOUT_CLASSIFICATION	1.9216397227290685E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998078360278	WITHOUT_CLASSIFICATION	1.9216397227290685E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999387429641	WITHOUT_CLASSIFICATION	6.125703584294894E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999994847274949	WITHOUT_CLASSIFICATION	5.152725050911791E-7	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999833646587	WITHOUT_CLASSIFICATION	1.663534129093482E-7	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999935447350816	WITHOUT_CLASSIFICATION	6.455264918406833E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999761048638	WITHOUT_CLASSIFICATION	2.3895136267214202E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997829311662	WITHOUT_CLASSIFICATION	2.1706883375029024E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999964465134	WITHOUT_CLASSIFICATION	3.553486633489017E-9	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999976102192698	WITHOUT_CLASSIFICATION	2.389780730176699E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999718850471	WITHOUT_CLASSIFICATION	2.811495295688911E-8	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999940685892229	WITHOUT_CLASSIFICATION	5.931410777121295E-6	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999992556776508	WITHOUT_CLASSIFICATION	7.443223492508541E-7	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999990340680859	WITHOUT_CLASSIFICATION	9.65931914119122E-7	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999615243362	WITHOUT_CLASSIFICATION	3.847566366339989E-8	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999998525615	WITHOUT_CLASSIFICATION	1.4743858681256654E-10	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999084636978	WITHOUT_CLASSIFICATION	9.153630226986008E-8	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999596372497	WITHOUT_CLASSIFICATION	4.0362750359809844E-8	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999995350614285	WITHOUT_CLASSIFICATION	4.6493857164715206E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999998389810055	WITHOUT_CLASSIFICATION	1.6101899450604416E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999635644369	WITHOUT_CLASSIFICATION	3.643556320761898E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999746776499	WITHOUT_CLASSIFICATION	2.5322350163184304E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999969553991069	WITHOUT_CLASSIFICATION	3.0446008930531875E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999494409307	WITHOUT_CLASSIFICATION	5.055906931532019E-8	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999997087103804	WITHOUT_CLASSIFICATION	2.912896196109478E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998906568053	WITHOUT_CLASSIFICATION	1.0934319468667315E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999703487891832	WITHOUT_CLASSIFICATION	2.9651210816704854E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992227850426	WITHOUT_CLASSIFICATION	7.772149573908782E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992751537234	WITHOUT_CLASSIFICATION	7.248462766316892E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992258295007	WITHOUT_CLASSIFICATION	7.741704991157817E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999863119162	WITHOUT_CLASSIFICATION	1.3688083855852026E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984879609546	WITHOUT_CLASSIFICATION	1.5120390454506643E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999699481728	WITHOUT_CLASSIFICATION	3.005182716126313E-8	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999996617791671	WITHOUT_CLASSIFICATION	3.382208329242157E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999998484268217	WITHOUT_CLASSIFICATION	1.51573178283125E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999615459039	WITHOUT_CLASSIFICATION	3.845409605181506E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999893155354	WITHOUT_CLASSIFICATION	1.0684464788335209E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999519750823	WITHOUT_CLASSIFICATION	4.8024917636203785E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995883009375	WITHOUT_CLASSIFICATION	4.1169906260868105E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999973732167874	WITHOUT_CLASSIFICATION	2.6267832125539312E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999630857986	WITHOUT_CLASSIFICATION	3.691420137463151E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997624515008	WITHOUT_CLASSIFICATION	2.3754849911620404E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999949062793931	WITHOUT_CLASSIFICATION	5.093720606919775E-6	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985546716263	WITHOUT_CLASSIFICATION	1.445328373609889E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999904826375	WITHOUT_CLASSIFICATION	9.517362521668064E-9	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999879385702105	WITHOUT_CLASSIFICATION	1.2061429789530314E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999987430856372	WITHOUT_CLASSIFICATION	1.2569143628863482E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999987969095575	WITHOUT_CLASSIFICATION	1.2030904424759207E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982096679321	WITHOUT_CLASSIFICATION	1.790332067981184E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9949504002444326	WITHOUT_CLASSIFICATION	0.005049599755567389	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998605441535	WITHOUT_CLASSIFICATION	1.39455846468646E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999995678546595	WITHOUT_CLASSIFICATION	4.32145340539619E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994661815181	WITHOUT_CLASSIFICATION	5.338184818742409E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992770435022	WITHOUT_CLASSIFICATION	7.229564977269793E-7	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999962208227	WITHOUT_CLASSIFICATION	3.779177269731889E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999992289975344	WITHOUT_CLASSIFICATION	7.710024656738795E-7	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999982037878681	WITHOUT_CLASSIFICATION	1.7962121319255083E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999987592575954	WITHOUT_CLASSIFICATION	1.2407424045311863E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999896312464	WITHOUT_CLASSIFICATION	1.0368753695245345E-8	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999856475370641	WITHOUT_CLASSIFICATION	1.435246293597101E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999994581664778	WITHOUT_CLASSIFICATION	5.418335220675495E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999997382596235	WITHOUT_CLASSIFICATION	2.617403764638812E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999995368668156	WITHOUT_CLASSIFICATION	4.63133184370402E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999977987468811	WITHOUT_CLASSIFICATION	2.201253119007141E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998134863302	WITHOUT_CLASSIFICATION	1.8651366993889895E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999984801508442	WITHOUT_CLASSIFICATION	1.5198491557899604E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999988700777734	WITHOUT_CLASSIFICATION	1.1299222265427007E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999993941551666	WITHOUT_CLASSIFICATION	6.058448334332959E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999633241229	WITHOUT_CLASSIFICATION	3.667587708443286E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999222904064596	WITHOUT_CLASSIFICATION	7.770959354033012E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999595873155	WITHOUT_CLASSIFICATION	4.041268458671823E-8	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999676623464	WITHOUT_CLASSIFICATION	3.233765362929202E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999998736263958	WITHOUT_CLASSIFICATION	1.2637360433241118E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999676623464	WITHOUT_CLASSIFICATION	3.233765362929202E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998483810584	WITHOUT_CLASSIFICATION	1.5161894164844456E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999928064721	WITHOUT_CLASSIFICATION	7.193527856988877E-9	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998400067082	WITHOUT_CLASSIFICATION	1.5999329173765915E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999676654112	WITHOUT_CLASSIFICATION	3.2334588701895664E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999819140377	WITHOUT_CLASSIFICATION	1.8085962304073057E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998874092172	WITHOUT_CLASSIFICATION	1.1259078272885078E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999987941075206	WITHOUT_CLASSIFICATION	1.2058924794681124E-6	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998261819854193	WITHOUT_CLASSIFICATION	1.7381801458071872E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999988166289958	WITHOUT_CLASSIFICATION	1.1833710041589807E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999935954602	WITHOUT_CLASSIFICATION	6.4045397785563045E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999946012736256	WITHOUT_CLASSIFICATION	5.3987263744729026E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999417668377	WITHOUT_CLASSIFICATION	5.82331623423843E-8	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996779525758	WITHOUT_CLASSIFICATION	3.220474242131574E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999934024762853	WITHOUT_CLASSIFICATION	6.597523714582625E-6	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999995474696833	WITHOUT_CLASSIFICATION	4.525303167645301E-7	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999940616057	WITHOUT_CLASSIFICATION	5.93839435080141E-9	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999863178987	WITHOUT_CLASSIFICATION	1.3682101324154508E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999995646824508	WITHOUT_CLASSIFICATION	4.35317549269889E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999927443912	WITHOUT_CLASSIFICATION	7.255608849814166E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999929627171857	WITHOUT_CLASSIFICATION	7.0372828142413486E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999995260649056	WITHOUT_CLASSIFICATION	4.7393509438334605E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999998123724018	WITHOUT_CLASSIFICATION	1.8762759815613733E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997605966713816	WITHOUT_CLASSIFICATION	2.3940332861831958E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999806000218	WITHOUT_CLASSIFICATION	1.9399978218327442E-8	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999975280537482	WITHOUT_CLASSIFICATION	2.4719462517986997E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999786840587366	WITHOUT_CLASSIFICATION	2.131594126350968E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999948530506626	WITHOUT_CLASSIFICATION	5.1469493374549214E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999989640750563	WITHOUT_CLASSIFICATION	1.0359249437017114E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999905708944	WITHOUT_CLASSIFICATION	9.4291055055652E-9	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999993198551482	WITHOUT_CLASSIFICATION	6.801448516590382E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999964150109046	WITHOUT_CLASSIFICATION	3.5849890954365484E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999991707142861	WITHOUT_CLASSIFICATION	8.292857138644882E-7	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.99999995092922	WITHOUT_CLASSIFICATION	4.9070780005572775E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999834582124397	WITHOUT_CLASSIFICATION	1.6541787560359518E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999989676207034	WITHOUT_CLASSIFICATION	1.0323792966670972E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999895395970867	WITHOUT_CLASSIFICATION	1.0460402913249454E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999970242981342	WITHOUT_CLASSIFICATION	2.9757018657918988E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999896113473	WITHOUT_CLASSIFICATION	1.0388652724535598E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999866313683106	WITHOUT_CLASSIFICATION	1.3368631689488372E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996976977632	WITHOUT_CLASSIFICATION	3.0230223685129496E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999606652739882	WITHOUT_CLASSIFICATION	3.933472601182112E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999998523429436	WITHOUT_CLASSIFICATION	1.4765705632705615E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997418348439181	WITHOUT_CLASSIFICATION	2.581651560819487E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999786840587366	WITHOUT_CLASSIFICATION	2.131594126350968E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999731381290926	WITHOUT_CLASSIFICATION	2.6861870907479335E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999996316108082	WITHOUT_CLASSIFICATION	3.683891917907726E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999908000624587	WITHOUT_CLASSIFICATION	9.19993754136239E-6	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999994709558981	WITHOUT_CLASSIFICATION	5.290441018650487E-7	TEST
special case	WITHOUT_CLASSIFICATION	0.9999996173376096	WITHOUT_CLASSIFICATION	3.826623904118856E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999977988266817	WITHOUT_CLASSIFICATION	2.2011733183302664E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999988516558	WITHOUT_CLASSIFICATION	1.1483442415760895E-9	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999969613003801	WITHOUT_CLASSIFICATION	3.0386996199025143E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999987744564961	WITHOUT_CLASSIFICATION	1.2255435039673679E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998695170107	WITHOUT_CLASSIFICATION	1.3048298929999067E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999966587474729	WITHOUT_CLASSIFICATION	3.341252527017898E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999992147508842	WITHOUT_CLASSIFICATION	7.852491159503402E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999971698316681	WITHOUT_CLASSIFICATION	2.8301683319304026E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999954483858089	WITHOUT_CLASSIFICATION	4.5516141911413386E-6	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999901028961	WITHOUT_CLASSIFICATION	9.897103868852991E-9	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999583480003	WITHOUT_CLASSIFICATION	4.165199978637386E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999619253516	WITHOUT_CLASSIFICATION	3.807464848941829E-8	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999784902057	WITHOUT_CLASSIFICATION	2.1509794304708062E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.99999998221818	WITHOUT_CLASSIFICATION	1.7781819985945337E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999731381290926	WITHOUT_CLASSIFICATION	2.6861870907479335E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999979176997044	WITHOUT_CLASSIFICATION	2.082300295730231E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999996270197886	WITHOUT_CLASSIFICATION	3.7298021133471266E-7	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999988036295466	WITHOUT_CLASSIFICATION	1.1963704534680644E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999565804463	WITHOUT_CLASSIFICATION	4.341955379189112E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997484676738	WITHOUT_CLASSIFICATION	2.515323261573128E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999949930046419	WITHOUT_CLASSIFICATION	5.006995358102972E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999949930046419	WITHOUT_CLASSIFICATION	5.006995358102972E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999390581321	WITHOUT_CLASSIFICATION	6.094186783679295E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999949930046419	WITHOUT_CLASSIFICATION	5.006995358102972E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999949930046419	WITHOUT_CLASSIFICATION	5.006995358102972E-6	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999995816687093	WITHOUT_CLASSIFICATION	4.1833129075462285E-7	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999987533781751	WITHOUT_CLASSIFICATION	1.2466218249003177E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998438275645	WITHOUT_CLASSIFICATION	1.5617243559005206E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998756951071	WITHOUT_CLASSIFICATION	1.243048928833913E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999537117413	WITHOUT_CLASSIFICATION	4.62882586761518E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999982275915881	WITHOUT_CLASSIFICATION	1.7724084119178266E-6	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999998299664321	WITHOUT_CLASSIFICATION	1.7003356792571182E-7	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999998175636061	WITHOUT_CLASSIFICATION	1.8243639390794538E-6	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999987072637843	WITHOUT_CLASSIFICATION	1.2927362157027958E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999814796699742	WITHOUT_CLASSIFICATION	1.8520330025771355E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999995386714863	WITHOUT_CLASSIFICATION	4.6132851366784643E-7	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994729504116	WITHOUT_CLASSIFICATION	5.270495883167627E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995207633755	WITHOUT_CLASSIFICATION	4.792366244605512E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999950689896998	WITHOUT_CLASSIFICATION	4.931010300204907E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999623774126	WITHOUT_CLASSIFICATION	3.762258744011592E-8	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999952174233765	WITHOUT_CLASSIFICATION	4.782576623490211E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995675022239	WITHOUT_CLASSIFICATION	4.3249777616030037E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999998043196611	WITHOUT_CLASSIFICATION	1.9568033889839567E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999962030107895	WITHOUT_CLASSIFICATION	3.7969892103690788E-6	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999939869392968	WITHOUT_CLASSIFICATION	6.013060703294673E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999991099764484	WITHOUT_CLASSIFICATION	8.900235517377116E-7	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.999998435340014	WITHOUT_CLASSIFICATION	1.5646599860430644E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995675022239	WITHOUT_CLASSIFICATION	4.3249777616030037E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999948530506626	WITHOUT_CLASSIFICATION	5.1469493374549214E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999993738433673	WITHOUT_CLASSIFICATION	6.261566327521653E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990070335663	WITHOUT_CLASSIFICATION	9.929664337454465E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994100394387	WITHOUT_CLASSIFICATION	5.899605612405877E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999987750172659	WITHOUT_CLASSIFICATION	1.224982734142575E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999142643572	WITHOUT_CLASSIFICATION	8.573564281551488E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999902684142727	WITHOUT_CLASSIFICATION	9.731585727272928E-6	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999984023325144	WITHOUT_CLASSIFICATION	1.5976674856556783E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999975455635425	WITHOUT_CLASSIFICATION	2.4544364574588582E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999388444162	WITHOUT_CLASSIFICATION	6.115558382622205E-8	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999998526057821	WITHOUT_CLASSIFICATION	1.4739421790887524E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997400480893	WITHOUT_CLASSIFICATION	2.5995191065443903E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999995698163138	WITHOUT_CLASSIFICATION	4.301836863540115E-7	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999414283844	WITHOUT_CLASSIFICATION	5.857161560613076E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999942673485809	WITHOUT_CLASSIFICATION	5.732651419052948E-6	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998829451323	WITHOUT_CLASSIFICATION	1.1705486769289219E-7	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.999999361545981	WITHOUT_CLASSIFICATION	6.38454018928603E-7	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999986682554132	WITHOUT_CLASSIFICATION	1.3317445868279974E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995872528473	WITHOUT_CLASSIFICATION	4.1274715257493503E-7	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999976671294801	WITHOUT_CLASSIFICATION	2.3328705198615448E-6	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999988277338037	WITHOUT_CLASSIFICATION	1.1722661963789149E-6	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999983303855453	WITHOUT_CLASSIFICATION	1.6696144546304263E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999988865965	WITHOUT_CLASSIFICATION	1.1134034557356563E-9	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999975455635425	WITHOUT_CLASSIFICATION	2.4544364574588582E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998650126154	WITHOUT_CLASSIFICATION	1.349873846064872E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.999999922832694	WITHOUT_CLASSIFICATION	7.716730593333446E-8	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998002410702	WITHOUT_CLASSIFICATION	1.9975892975090356E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999934010933734	WITHOUT_CLASSIFICATION	6.598906626558212E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949041941371	WITHOUT_CLASSIFICATION	5.0958058629173365E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999922539153113	WITHOUT_CLASSIFICATION	7.746084688548444E-6	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999982988201986	WITHOUT_CLASSIFICATION	1.7011798012697E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999997914953309	WITHOUT_CLASSIFICATION	2.0850466902714488E-7	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999993815360437	WITHOUT_CLASSIFICATION	6.184639561704547E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999899438848304	WITHOUT_CLASSIFICATION	1.0056115169586236E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998274475932	WITHOUT_CLASSIFICATION	1.725524067976175E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999990570439522	WITHOUT_CLASSIFICATION	9.42956047783568E-7	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995967596434	WITHOUT_CLASSIFICATION	4.032403566450143E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999994564355491	WITHOUT_CLASSIFICATION	5.43564450841174E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999963460262901	WITHOUT_CLASSIFICATION	3.6539737100336092E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999218346349	WITHOUT_CLASSIFICATION	7.816536510715618E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998274475932	WITHOUT_CLASSIFICATION	1.725524067976175E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999982851608807	WITHOUT_CLASSIFICATION	1.7148391192601473E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999996960222461	WITHOUT_CLASSIFICATION	3.0397775379641066E-7	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998895668109	WITHOUT_CLASSIFICATION	1.104331891041568E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999988561555318	WITHOUT_CLASSIFICATION	1.1438444682015946E-5	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999995228116252	WITHOUT_CLASSIFICATION	4.7718837476727E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999326685057	WITHOUT_CLASSIFICATION	6.733149426374275E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999436307686	WITHOUT_CLASSIFICATION	5.6369231373242214E-8	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998940902442	WITHOUT_CLASSIFICATION	1.0590975579313838E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998040188643	WITHOUT_CLASSIFICATION	1.9598113568172984E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985908088241	WITHOUT_CLASSIFICATION	1.4091911758123476E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996155190535	WITHOUT_CLASSIFICATION	3.844809465504203E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994536887803	WITHOUT_CLASSIFICATION	5.463112196961458E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999300863843	WITHOUT_CLASSIFICATION	6.991361577496413E-8	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999300863843	WITHOUT_CLASSIFICATION	6.991361577496413E-8	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999985689566514	WITHOUT_CLASSIFICATION	1.4310433485565746E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998481438178	WITHOUT_CLASSIFICATION	1.5185618225522408E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999992905983083	WITHOUT_CLASSIFICATION	7.09401691715818E-7	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.999999009577759	WITHOUT_CLASSIFICATION	9.90422241012997E-7	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999897716700222	WITHOUT_CLASSIFICATION	1.0228329977805784E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984503273386	WITHOUT_CLASSIFICATION	1.5496726614003203E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973414144202	WITHOUT_CLASSIFICATION	2.658585579793116E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912049128988	WITHOUT_CLASSIFICATION	8.795087101084644E-6	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999962314045273	WITHOUT_CLASSIFICATION	3.7685954726682945E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958522595054	WITHOUT_CLASSIFICATION	4.147740494601041E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984503273386	WITHOUT_CLASSIFICATION	1.5496726614003203E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973414144202	WITHOUT_CLASSIFICATION	2.658585579793116E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912049128988	WITHOUT_CLASSIFICATION	8.795087101084644E-6	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999923252869718	WITHOUT_CLASSIFICATION	7.674713028163143E-6	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999971556567125	WITHOUT_CLASSIFICATION	2.844343287570839E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998556985998	WITHOUT_CLASSIFICATION	1.4430140016773387E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999995337548649	WITHOUT_CLASSIFICATION	4.662451351055808E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999987146549901	WITHOUT_CLASSIFICATION	1.2853450097898225E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999892745038933	WITHOUT_CLASSIFICATION	1.0725496106713888E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995096090917	WITHOUT_CLASSIFICATION	4.903909083044425E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.99999712396131	WITHOUT_CLASSIFICATION	2.8760386901028633E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999747185327387	WITHOUT_CLASSIFICATION	2.5281467261435596E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999911325743697	WITHOUT_CLASSIFICATION	8.867425630241528E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999988362394656	WITHOUT_CLASSIFICATION	1.1637605344826794E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998246783567099	WITHOUT_CLASSIFICATION	1.7532164329022012E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999915183026119	WITHOUT_CLASSIFICATION	8.481697388118756E-6	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999994937371125	WITHOUT_CLASSIFICATION	5.062628874726407E-7	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999960694649	WITHOUT_CLASSIFICATION	3.930535094199508E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998672835172	WITHOUT_CLASSIFICATION	1.3271648290389314E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997312693869708	WITHOUT_CLASSIFICATION	2.687306130291676E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999811796378926	WITHOUT_CLASSIFICATION	1.882036210747538E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994719447128	WITHOUT_CLASSIFICATION	5.280552871144979E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999959245312338	WITHOUT_CLASSIFICATION	4.075468766222767E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999724733075	WITHOUT_CLASSIFICATION	2.75266925683154E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999331520273	WITHOUT_CLASSIFICATION	6.68479727029592E-8	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999997168527157	WITHOUT_CLASSIFICATION	2.831472842922253E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999605087079	WITHOUT_CLASSIFICATION	3.949129212405548E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999473805017	WITHOUT_CLASSIFICATION	5.26194983118804E-8	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999998814912836	WITHOUT_CLASSIFICATION	1.1850871639659553E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900056357615	WITHOUT_CLASSIFICATION	9.994364238532806E-6	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999949831366925	WITHOUT_CLASSIFICATION	5.016863307509975E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998732487436	WITHOUT_CLASSIFICATION	1.2675125636401206E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674543522095	WITHOUT_CLASSIFICATION	3.254564779048574E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999269050906738	WITHOUT_CLASSIFICATION	7.309490932613827E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993213966791	WITHOUT_CLASSIFICATION	6.786033209423546E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993213966791	WITHOUT_CLASSIFICATION	6.786033209423546E-7	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999929200011362	WITHOUT_CLASSIFICATION	7.079998863829679E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999902832375558	WITHOUT_CLASSIFICATION	9.716762444142555E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999999260548755	WITHOUT_CLASSIFICATION	7.394512450393574E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9998474010727356	WITHOUT_CLASSIFICATION	1.5259892726441403E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999988786712841	WITHOUT_CLASSIFICATION	1.1213287159739484E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999446530674	WITHOUT_CLASSIFICATION	5.534693257152643E-8	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999919936999867	WITHOUT_CLASSIFICATION	8.00630001326757E-6	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999996753697067	WITHOUT_CLASSIFICATION	3.24630293215825E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.999999844698754	WITHOUT_CLASSIFICATION	1.5530124597138039E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980217093843	WITHOUT_CLASSIFICATION	1.9782906156529876E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985621422257	WITHOUT_CLASSIFICATION	1.4378577743032342E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988264204472	WITHOUT_CLASSIFICATION	1.1735795528014846E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973324314516	WITHOUT_CLASSIFICATION	2.6675685483781015E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988347351623	WITHOUT_CLASSIFICATION	1.1652648376662055E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952390418433	WITHOUT_CLASSIFICATION	4.7609581567259835E-6	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998631397846	WITHOUT_CLASSIFICATION	1.3686021540558547E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991963738847	WITHOUT_CLASSIFICATION	8.036261152747789E-7	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990978538288	WITHOUT_CLASSIFICATION	9.021461711167308E-7	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964036759486	WITHOUT_CLASSIFICATION	3.596324051359983E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957445849503	WITHOUT_CLASSIFICATION	4.255415049626785E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999809649937	WITHOUT_CLASSIFICATION	1.9035006324557965E-8	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999563454782902	WITHOUT_CLASSIFICATION	4.365452170977967E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999783704527818	WITHOUT_CLASSIFICATION	2.1629547218161134E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999941024669	WITHOUT_CLASSIFICATION	5.897533125475764E-9	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999948625247	WITHOUT_CLASSIFICATION	5.137475299725335E-8	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999996646447664	WITHOUT_CLASSIFICATION	3.353552335414838E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999995371928312	WITHOUT_CLASSIFICATION	4.628071687797012E-7	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999525021834	WITHOUT_CLASSIFICATION	4.749781659737089E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999783704527818	WITHOUT_CLASSIFICATION	2.1629547218161134E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999783704527818	WITHOUT_CLASSIFICATION	2.1629547218161134E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999975143747482	WITHOUT_CLASSIFICATION	2.485625251888004E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999993902520367	WITHOUT_CLASSIFICATION	6.097479633399759E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999860453097015	WITHOUT_CLASSIFICATION	1.3954690298612353E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999983922535157	WITHOUT_CLASSIFICATION	1.6077464842173295E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999981618694609	WITHOUT_CLASSIFICATION	1.8381305391818073E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999959245312338	WITHOUT_CLASSIFICATION	4.075468766222767E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999977933259585	WITHOUT_CLASSIFICATION	2.206674041462435E-6	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999688010695	WITHOUT_CLASSIFICATION	3.1198930488138717E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995293764224	WITHOUT_CLASSIFICATION	4.7062357766826767E-7	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964950012139	WITHOUT_CLASSIFICATION	3.5049987861226694E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999989109515047	WITHOUT_CLASSIFICATION	1.0890484952557268E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980234409783	WITHOUT_CLASSIFICATION	1.9765590217094152E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997301170651	WITHOUT_CLASSIFICATION	2.698829348821387E-7	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997301170651	WITHOUT_CLASSIFICATION	2.698829348821387E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992550263621	WITHOUT_CLASSIFICATION	7.449736377736479E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992550263621	WITHOUT_CLASSIFICATION	7.449736377736479E-7	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996299292854	WITHOUT_CLASSIFICATION	3.7007071458525844E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969746788798	WITHOUT_CLASSIFICATION	3.025321120191955E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999991097866024	WITHOUT_CLASSIFICATION	8.902133976749989E-7	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590892106284	WITHOUT_CLASSIFICATION	4.091078937163329E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999995408013044	WITHOUT_CLASSIFICATION	4.5919869555146955E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999022902744	WITHOUT_CLASSIFICATION	9.770972564614626E-8	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982432320541	WITHOUT_CLASSIFICATION	1.756767945937121E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998615246434	WITHOUT_CLASSIFICATION	1.3847535665459312E-7	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999997257006652	WITHOUT_CLASSIFICATION	2.7429933478532674E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999376655292708	WITHOUT_CLASSIFICATION	6.233447072930752E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995625148804	WITHOUT_CLASSIFICATION	4.374851195537235E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999994754279261	WITHOUT_CLASSIFICATION	5.245720739002011E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998610420531	WITHOUT_CLASSIFICATION	1.3895794685410796E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998519636485	WITHOUT_CLASSIFICATION	1.480363515098992E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999993432532509	WITHOUT_CLASSIFICATION	6.567467490743851E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999993432532509	WITHOUT_CLASSIFICATION	6.567467490743851E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999993432532509	WITHOUT_CLASSIFICATION	6.567467490743851E-7	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999995103968451	WITHOUT_CLASSIFICATION	4.89603154950326E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999992166556927	WITHOUT_CLASSIFICATION	7.833443072334467E-7	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999784395273	WITHOUT_CLASSIFICATION	2.1560472723358845E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999978581822982	WITHOUT_CLASSIFICATION	2.1418177017949405E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970193515375	WITHOUT_CLASSIFICATION	2.9806484624657526E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999645320473711	WITHOUT_CLASSIFICATION	3.546795262892089E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999522103048	WITHOUT_CLASSIFICATION	4.7789695170240664E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999568983847	WITHOUT_CLASSIFICATION	4.3101615299754273E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999968923656	WITHOUT_CLASSIFICATION	3.10763439206836E-9	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999516369111	WITHOUT_CLASSIFICATION	4.836308880116082E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999984534843	WITHOUT_CLASSIFICATION	1.5465156755953897E-9	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999999739996311	WITHOUT_CLASSIFICATION	2.600036890347105E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993988942782	WITHOUT_CLASSIFICATION	6.011057217747973E-7	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999531474251	WITHOUT_CLASSIFICATION	4.6852574981244715E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999970062046661	WITHOUT_CLASSIFICATION	2.993795333878655E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999998246009272	WITHOUT_CLASSIFICATION	1.7539907286716575E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984352545399	WITHOUT_CLASSIFICATION	1.564745460145257E-6	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999986869803843	WITHOUT_CLASSIFICATION	1.3130196156280718E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999985717176135	WITHOUT_CLASSIFICATION	1.428282386476991E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999705348088	WITHOUT_CLASSIFICATION	2.9465191154142924E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999146466243	WITHOUT_CLASSIFICATION	8.535337571019159E-8	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999965623150999	WITHOUT_CLASSIFICATION	3.437684899980605E-6	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998637982508	WITHOUT_CLASSIFICATION	1.3620174922662396E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999986492856756	WITHOUT_CLASSIFICATION	1.3507143242977206E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999990344708577	WITHOUT_CLASSIFICATION	9.65529142317243E-7	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999991776593871	WITHOUT_CLASSIFICATION	8.223406129945886E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999998825985618	WITHOUT_CLASSIFICATION	1.174014382431656E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999987593740869	WITHOUT_CLASSIFICATION	1.2406259132072962E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999023032444	WITHOUT_CLASSIFICATION	9.769675557184869E-8	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999978050729117	WITHOUT_CLASSIFICATION	2.19492708838062E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999308462914	WITHOUT_CLASSIFICATION	6.915370863776319E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999999966092268	WITHOUT_CLASSIFICATION	3.390773204238429E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999990313905187	WITHOUT_CLASSIFICATION	9.686094813219088E-7	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999946357132	WITHOUT_CLASSIFICATION	5.364286697258344E-9	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999748718874578	WITHOUT_CLASSIFICATION	2.5128112542272865E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999998624494785	WITHOUT_CLASSIFICATION	1.3755052147787603E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999918531134	WITHOUT_CLASSIFICATION	8.14688655094356E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999996098050304	WITHOUT_CLASSIFICATION	3.9019496963311467E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999841418304	WITHOUT_CLASSIFICATION	1.5858169588817276E-8	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998587051111	WITHOUT_CLASSIFICATION	1.4129488885847275E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.99999998810828	WITHOUT_CLASSIFICATION	1.18917200842678E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999999683487864	WITHOUT_CLASSIFICATION	3.165121359249197E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999998836467532	WITHOUT_CLASSIFICATION	1.1635324675652402E-7	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999651381083	WITHOUT_CLASSIFICATION	3.486189176491631E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999994802967467	WITHOUT_CLASSIFICATION	5.197032532757553E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999998644669849	WITHOUT_CLASSIFICATION	1.3553301516279553E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999997068590226	WITHOUT_CLASSIFICATION	2.9314097736801706E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977234948209	WITHOUT_CLASSIFICATION	2.2765051790439784E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999999372114092	WITHOUT_CLASSIFICATION	6.278859079596392E-7	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997092926544306	WITHOUT_CLASSIFICATION	2.9070734556932545E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999519102617	WITHOUT_CLASSIFICATION	4.8089738293563896E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999766986858776	WITHOUT_CLASSIFICATION	2.330131412247432E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999986148086333	WITHOUT_CLASSIFICATION	1.3851913667299634E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999777097975546	WITHOUT_CLASSIFICATION	2.2290202445440327E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999996556920396	WITHOUT_CLASSIFICATION	3.443079604533161E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999972138131014	WITHOUT_CLASSIFICATION	2.786186898648369E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997936820908548	WITHOUT_CLASSIFICATION	2.0631790914519632E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999993767389009	WITHOUT_CLASSIFICATION	6.23261099038215E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999993414534792	WITHOUT_CLASSIFICATION	6.585465206728107E-7	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999816916817172	WITHOUT_CLASSIFICATION	1.830831828278485E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998764372529	WITHOUT_CLASSIFICATION	1.2356274709458218E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999907427694	WITHOUT_CLASSIFICATION	9.257230608928381E-9	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999987467655725	WITHOUT_CLASSIFICATION	1.253234427453034E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994675053324	WITHOUT_CLASSIFICATION	5.324946675974692E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997956350549	WITHOUT_CLASSIFICATION	2.0436494507011863E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999969024445	WITHOUT_CLASSIFICATION	3.097555434294507E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999982315447	WITHOUT_CLASSIFICATION	1.768455334988194E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998992679702	WITHOUT_CLASSIFICATION	1.007320298353739E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999980818193445	WITHOUT_CLASSIFICATION	1.918180655501846E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999980818193445	WITHOUT_CLASSIFICATION	1.918180655501846E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999994139411982	WITHOUT_CLASSIFICATION	5.86058801849018E-7	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999992198223344	WITHOUT_CLASSIFICATION	7.801776656338529E-7	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999997278252019	WITHOUT_CLASSIFICATION	2.7217479814349106E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999999897600033	WITHOUT_CLASSIFICATION	1.0239996695344689E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999829829659	WITHOUT_CLASSIFICATION	1.7017034090530637E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999977771935663	WITHOUT_CLASSIFICATION	2.2228064337806604E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999678914091	WITHOUT_CLASSIFICATION	3.2108590870394395E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999612218666	WITHOUT_CLASSIFICATION	3.8778133400226054E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999993218435854	WITHOUT_CLASSIFICATION	6.781564146387565E-7	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999989453815269	WITHOUT_CLASSIFICATION	1.054618473081079E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999900822749	WITHOUT_CLASSIFICATION	9.917725045912135E-9	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999944822746	WITHOUT_CLASSIFICATION	5.51772532733238E-9	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999997293962367	WITHOUT_CLASSIFICATION	2.706037632555387E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999938713243	WITHOUT_CLASSIFICATION	6.128675616477414E-9	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999997610129147	WITHOUT_CLASSIFICATION	2.3898708528481336E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999945653761076	WITHOUT_CLASSIFICATION	5.4346238923591245E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999999582240183	WITHOUT_CLASSIFICATION	4.177598159530779E-8	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999997911345562	WITHOUT_CLASSIFICATION	2.0886544372935098E-7	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999992476153692	WITHOUT_CLASSIFICATION	7.52384630811474E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999919145674879	WITHOUT_CLASSIFICATION	8.08543251204823E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999993467029201	WITHOUT_CLASSIFICATION	6.53297079811402E-7	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999629082114	WITHOUT_CLASSIFICATION	3.7091788585555105E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999940822338815	WITHOUT_CLASSIFICATION	5.917766118379154E-6	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999744765367334	WITHOUT_CLASSIFICATION	2.552346326658569E-5	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999935430219	WITHOUT_CLASSIFICATION	6.45697804251558E-9	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.999999365049092	WITHOUT_CLASSIFICATION	6.349509078894996E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998948404135	WITHOUT_CLASSIFICATION	1.0515958650715046E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999996773662546	WITHOUT_CLASSIFICATION	3.2263374531614637E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999970495676719	WITHOUT_CLASSIFICATION	2.9504323280392847E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999996416143674	WITHOUT_CLASSIFICATION	3.583856326400113E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990600972288	WITHOUT_CLASSIFICATION	9.399027712377952E-7	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999146163039	WITHOUT_CLASSIFICATION	8.538369616291641E-8	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999998794900044	WITHOUT_CLASSIFICATION	1.205099957214374E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999990261234736	WITHOUT_CLASSIFICATION	9.738765263559886E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999991653777869	WITHOUT_CLASSIFICATION	8.346222131428066E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999991653777869	WITHOUT_CLASSIFICATION	8.346222131428066E-7	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999997352284865	WITHOUT_CLASSIFICATION	2.647715134682462E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.99999735990067	WITHOUT_CLASSIFICATION	2.6400993300138518E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997395713472	WITHOUT_CLASSIFICATION	2.6042865278193083E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999958264211896	WITHOUT_CLASSIFICATION	4.173578810432562E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999998696775622	WITHOUT_CLASSIFICATION	1.3032243783777722E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999973077272246	WITHOUT_CLASSIFICATION	2.692272775423503E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999954644630904	WITHOUT_CLASSIFICATION	4.5355369095704724E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999999404190762	WITHOUT_CLASSIFICATION	5.958092383296346E-8	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999998650651317	WITHOUT_CLASSIFICATION	1.3493486816811498E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9997821392702209	WITHOUT_CLASSIFICATION	2.1786072977912039E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999383051221	WITHOUT_CLASSIFICATION	6.169487792836319E-8	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998519230028	WITHOUT_CLASSIFICATION	1.4807699720895742E-7	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999988922578009	WITHOUT_CLASSIFICATION	1.107742199005876E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999982137746776	WITHOUT_CLASSIFICATION	1.7862253225164679E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999995951452412	WITHOUT_CLASSIFICATION	4.048547588515054E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999974575476543	WITHOUT_CLASSIFICATION	2.5424523457480026E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999940371514525	WITHOUT_CLASSIFICATION	5.962848547517527E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999940371514525	WITHOUT_CLASSIFICATION	5.962848547517527E-6	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999984045814	WITHOUT_CLASSIFICATION	1.5954186025792787E-8	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999995868217955	WITHOUT_CLASSIFICATION	4.1317820459432776E-7	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999986889470962	WITHOUT_CLASSIFICATION	1.3110529038176936E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998127838199	WITHOUT_CLASSIFICATION	1.872161799815127E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998835996181	WITHOUT_CLASSIFICATION	1.1640038187314316E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999508335633951	WITHOUT_CLASSIFICATION	4.916643660488741E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999665750505	WITHOUT_CLASSIFICATION	3.342494950085942E-8	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999994926063719	WITHOUT_CLASSIFICATION	5.073936280785665E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998725380137	WITHOUT_CLASSIFICATION	1.274619863738795E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999966784769146	WITHOUT_CLASSIFICATION	3.321523085402905E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999966784769146	WITHOUT_CLASSIFICATION	3.321523085402905E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989112632974	WITHOUT_CLASSIFICATION	1.0887367025696574E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999935740773	WITHOUT_CLASSIFICATION	6.425922696190031E-9	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999767489207	WITHOUT_CLASSIFICATION	2.3251079293065045E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999990934168836	WITHOUT_CLASSIFICATION	9.065831163915153E-6	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999998060739835	WITHOUT_CLASSIFICATION	1.9392601647075742E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999956473611	WITHOUT_CLASSIFICATION	4.3526389213897525E-9	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999997940433908	WITHOUT_CLASSIFICATION	2.0595660920831155E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999995982403201	WITHOUT_CLASSIFICATION	4.017596798991271E-6	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999882257199	WITHOUT_CLASSIFICATION	1.1774280161305449E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995102277232	WITHOUT_CLASSIFICATION	4.897722767915893E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992545484744	WITHOUT_CLASSIFICATION	7.454515256492926E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999683495969901	WITHOUT_CLASSIFICATION	3.1650403009907635E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999972654582681	WITHOUT_CLASSIFICATION	2.7345417319262925E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.999975107777167	WITHOUT_CLASSIFICATION	2.489222283306551E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999941763257808	WITHOUT_CLASSIFICATION	5.823674219207651E-6	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999638331065241	WITHOUT_CLASSIFICATION	3.616689347591572E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984879609546	WITHOUT_CLASSIFICATION	1.5120390454506643E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999608875735	WITHOUT_CLASSIFICATION	3.9112426569165446E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997276515651	WITHOUT_CLASSIFICATION	2.7234843493890014E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.9999998107953273	WITHOUT_CLASSIFICATION	1.892046727123749E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999972632634889	WITHOUT_CLASSIFICATION	2.7367365110418417E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999996402932992	WITHOUT_CLASSIFICATION	3.597067008149807E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999982196523619	WITHOUT_CLASSIFICATION	1.7803476381844416E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999798770486833	WITHOUT_CLASSIFICATION	2.012295131673816E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999954121308421	WITHOUT_CLASSIFICATION	4.587869157835263E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999996015937872	WITHOUT_CLASSIFICATION	3.9840621279715256E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998354421251	WITHOUT_CLASSIFICATION	1.6455787492772155E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997637159989	WITHOUT_CLASSIFICATION	2.3628400102057817E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997189891859771	WITHOUT_CLASSIFICATION	2.810108140229006E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998822664817	WITHOUT_CLASSIFICATION	1.1773351823242417E-7	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999860885441	WITHOUT_CLASSIFICATION	1.3911455841100718E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999577113672	WITHOUT_CLASSIFICATION	4.2288632717235734E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999997968230131	WITHOUT_CLASSIFICATION	2.0317698689793257E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999951694809601	WITHOUT_CLASSIFICATION	4.830519039896956E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999974272231418	WITHOUT_CLASSIFICATION	2.572776858274887E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998421216547	WITHOUT_CLASSIFICATION	1.5787834522368823E-7	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999989404213482	WITHOUT_CLASSIFICATION	1.0595786518267856E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999943616436616	WITHOUT_CLASSIFICATION	5.638356338399097E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999991286356581	WITHOUT_CLASSIFICATION	8.713643418394308E-7	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999991286356581	WITHOUT_CLASSIFICATION	8.713643418394308E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999989136955886	WITHOUT_CLASSIFICATION	1.0863044113656301E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998444158389	WITHOUT_CLASSIFICATION	1.5558416115333687E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998915417779	WITHOUT_CLASSIFICATION	1.0845822205279456E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999992046687214	WITHOUT_CLASSIFICATION	7.953312786665115E-7	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999996856637529	WITHOUT_CLASSIFICATION	3.143362471823943E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999847504106	WITHOUT_CLASSIFICATION	1.5249589402724696E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999994096297	WITHOUT_CLASSIFICATION	5.903702477211433E-10	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999998220098042	WITHOUT_CLASSIFICATION	1.7799019570101753E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999989136955886	WITHOUT_CLASSIFICATION	1.0863044113656301E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998444158389	WITHOUT_CLASSIFICATION	1.5558416115333687E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999979596179874	WITHOUT_CLASSIFICATION	2.0403820125831635E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999999281663021	WITHOUT_CLASSIFICATION	7.183369791261714E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997897569666	WITHOUT_CLASSIFICATION	2.1024303343578514E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999981807334849	WITHOUT_CLASSIFICATION	1.819266515165537E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999990463352	WITHOUT_CLASSIFICATION	9.536648170367822E-10	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999995581216375	WITHOUT_CLASSIFICATION	4.4187836249059616E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999865343883	WITHOUT_CLASSIFICATION	1.3465611756336024E-8	TEST
}	WITHOUT_CLASSIFICATION	0.9999177816555257	WITHOUT_CLASSIFICATION	8.221834447435177E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999535916133	WITHOUT_CLASSIFICATION	4.640838666244762E-8	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999949166889219	WITHOUT_CLASSIFICATION	5.083311078030328E-6	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999990601107555	WITHOUT_CLASSIFICATION	9.398892445187752E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999949166889219	WITHOUT_CLASSIFICATION	5.083311078030328E-6	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999949378415438	WITHOUT_CLASSIFICATION	5.062158456130386E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999989023313146	WITHOUT_CLASSIFICATION	1.097668685361975E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999892980044106	WITHOUT_CLASSIFICATION	1.0701995589422972E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970736217032	WITHOUT_CLASSIFICATION	2.9263782967223316E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999985877743099	WITHOUT_CLASSIFICATION	1.412225690033022E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999177816555257	WITHOUT_CLASSIFICATION	8.221834447435177E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999177816555257	WITHOUT_CLASSIFICATION	8.221834447435177E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999996769344614	WITHOUT_CLASSIFICATION	3.23065538596773E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999994744646208	WITHOUT_CLASSIFICATION	5.255353792693276E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999989891606864	WITHOUT_CLASSIFICATION	1.010839313591744E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999214406329	WITHOUT_CLASSIFICATION	7.855936709172134E-8	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998115336696	WITHOUT_CLASSIFICATION	1.8846633037729152E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996398920538	WITHOUT_CLASSIFICATION	3.6010794619475625E-7	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999929020032072	WITHOUT_CLASSIFICATION	7.097996792865294E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999992880636965	WITHOUT_CLASSIFICATION	7.119363035461277E-7	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998091221912	WITHOUT_CLASSIFICATION	1.9087780882564369E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998863265346715	WITHOUT_CLASSIFICATION	1.1367346532855343E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.9999952165073702	WITHOUT_CLASSIFICATION	4.783492629780592E-6	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999987712017028	WITHOUT_CLASSIFICATION	1.2287982972302126E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999998186671734	WITHOUT_CLASSIFICATION	1.8133282670573023E-7	TEST
types	WITHOUT_CLASSIFICATION	0.9999875615026167	WITHOUT_CLASSIFICATION	1.243849738328623E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999990664894236	WITHOUT_CLASSIFICATION	9.335105764108692E-7	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999995442825166	WITHOUT_CLASSIFICATION	4.55717483474148E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999986673117	WITHOUT_CLASSIFICATION	1.3326883160645605E-8	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999995846065161	WITHOUT_CLASSIFICATION	4.1539348395844525E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996033982148	WITHOUT_CLASSIFICATION	3.966017852127643E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997974925313	WITHOUT_CLASSIFICATION	2.0250746880478393E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999040034139822	WITHOUT_CLASSIFICATION	9.599658601782019E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999371334951	WITHOUT_CLASSIFICATION	6.286650484326915E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999872003542826	WITHOUT_CLASSIFICATION	1.2799645717504103E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999995992480114	WITHOUT_CLASSIFICATION	4.007519885384373E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999997905429713	WITHOUT_CLASSIFICATION	2.0945702865694254E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998031258794	WITHOUT_CLASSIFICATION	1.9687412058313415E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999843497190384	WITHOUT_CLASSIFICATION	1.565028096163711E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999966920924	WITHOUT_CLASSIFICATION	3.307907628307752E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999977208236435	WITHOUT_CLASSIFICATION	2.2791763566361263E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999968896400183	WITHOUT_CLASSIFICATION	3.1103599817129306E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999962509288731	WITHOUT_CLASSIFICATION	3.7490711269022704E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999845633818575	WITHOUT_CLASSIFICATION	1.5436618142444382E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999984472628888	WITHOUT_CLASSIFICATION	1.5527371112360812E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999992880636965	WITHOUT_CLASSIFICATION	7.119363035461277E-7	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999996745980145	WITHOUT_CLASSIFICATION	3.2540198548986106E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999864816266798	WITHOUT_CLASSIFICATION	1.3518373320067358E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9988711272613032	WITHOUT_CLASSIFICATION	0.0011288727386967237	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999718237572094	WITHOUT_CLASSIFICATION	2.8176242790669763E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999992463847497	WITHOUT_CLASSIFICATION	7.536152503901592E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999990709278834	WITHOUT_CLASSIFICATION	9.290721166225694E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999214406329	WITHOUT_CLASSIFICATION	7.855936709172134E-8	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999214406329	WITHOUT_CLASSIFICATION	7.855936709172134E-8	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999997857284412	WITHOUT_CLASSIFICATION	2.1427155873776592E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999974303509909	WITHOUT_CLASSIFICATION	2.56964900908008E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.999999646449598	WITHOUT_CLASSIFICATION	3.535504019056039E-7	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998535159623	WITHOUT_CLASSIFICATION	1.4648403760830744E-7	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999998959785362	WITHOUT_CLASSIFICATION	1.0402146383511684E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999993521840633	WITHOUT_CLASSIFICATION	6.478159366245975E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999989165774248	WITHOUT_CLASSIFICATION	1.083422575166342E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997991401873	WITHOUT_CLASSIFICATION	2.0085981271019858E-7	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999925118341	WITHOUT_CLASSIFICATION	7.48816588451922E-9	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999694299199	WITHOUT_CLASSIFICATION	3.057008020692365E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999850972807	WITHOUT_CLASSIFICATION	1.490271929761699E-7	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999978683043436	WITHOUT_CLASSIFICATION	2.1316956564252527E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998685622528874	WITHOUT_CLASSIFICATION	1.3143774711256003E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999989136955886	WITHOUT_CLASSIFICATION	1.0863044113656301E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999850972807	WITHOUT_CLASSIFICATION	1.490271929761699E-7	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999980037206033	WITHOUT_CLASSIFICATION	1.996279396625411E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999999748708382	WITHOUT_CLASSIFICATION	2.512916178893768E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996098763511	WITHOUT_CLASSIFICATION	3.9012364895128375E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9990071500776133	WITHOUT_CLASSIFICATION	9.928499223866949E-4	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998685622528874	WITHOUT_CLASSIFICATION	1.3143774711256003E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999922256873733	WITHOUT_CLASSIFICATION	7.77431262654977E-6	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999753129073	WITHOUT_CLASSIFICATION	2.468709259581691E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999595526093	WITHOUT_CLASSIFICATION	4.04473905961356E-8	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999896721016	WITHOUT_CLASSIFICATION	1.03278984794466E-8	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998820697071673	WITHOUT_CLASSIFICATION	1.1793029283261367E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999984553385598	WITHOUT_CLASSIFICATION	1.5446614402976248E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996667086183	WITHOUT_CLASSIFICATION	3.332913817064562E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999717803068043	WITHOUT_CLASSIFICATION	2.8219693195685012E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988081466483	WITHOUT_CLASSIFICATION	1.191853351669223E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999997032708987	WITHOUT_CLASSIFICATION	2.9672910125648783E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999720001788	WITHOUT_CLASSIFICATION	2.7999821155977976E-8	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999657574818	WITHOUT_CLASSIFICATION	3.424251822037127E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999850972807	WITHOUT_CLASSIFICATION	1.490271929761699E-7	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999922256873733	WITHOUT_CLASSIFICATION	7.77431262654977E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999595526093	WITHOUT_CLASSIFICATION	4.04473905961356E-8	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998643936281	WITHOUT_CLASSIFICATION	1.3560637192347124E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999872764893409	WITHOUT_CLASSIFICATION	1.2723510659033499E-5	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999998185602933	WITHOUT_CLASSIFICATION	1.8143970665651463E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998685622528874	WITHOUT_CLASSIFICATION	1.3143774711256003E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999989614561695	WITHOUT_CLASSIFICATION	1.0385438304528332E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999966487268688	WITHOUT_CLASSIFICATION	3.3512731312060816E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997550817589591	WITHOUT_CLASSIFICATION	2.4491824104086614E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999958638837433	WITHOUT_CLASSIFICATION	4.136116256705813E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999717803068043	WITHOUT_CLASSIFICATION	2.8219693195685012E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999980037206033	WITHOUT_CLASSIFICATION	1.996279396625411E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999030744563073	WITHOUT_CLASSIFICATION	9.692554369264936E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999974810998661	WITHOUT_CLASSIFICATION	2.518900133923207E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999985171296722	WITHOUT_CLASSIFICATION	1.482870327740794E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999993265826692	WITHOUT_CLASSIFICATION	6.734173307675503E-7	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999992125781222	WITHOUT_CLASSIFICATION	7.874218777340053E-7	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999995793861652	WITHOUT_CLASSIFICATION	4.2061383472999024E-7	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999989194220837	WITHOUT_CLASSIFICATION	1.0805779161757987E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970736217032	WITHOUT_CLASSIFICATION	2.9263782967223316E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999425747663	WITHOUT_CLASSIFICATION	5.7425233684557865E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998903991542	WITHOUT_CLASSIFICATION	1.0960084583306616E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999586111969188	WITHOUT_CLASSIFICATION	4.138880308132668E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995869788103	WITHOUT_CLASSIFICATION	4.130211896191849E-7	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999366084392	WITHOUT_CLASSIFICATION	6.339156080024047E-8	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999827823194	WITHOUT_CLASSIFICATION	1.72176806621803E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999972940425287	WITHOUT_CLASSIFICATION	2.70595747131767E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998256011835	WITHOUT_CLASSIFICATION	1.7439881650764126E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999958638837433	WITHOUT_CLASSIFICATION	4.136116256705813E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999912064482218	WITHOUT_CLASSIFICATION	8.793551778206148E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999424998775291	WITHOUT_CLASSIFICATION	5.750012247082137E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999854432913485	WITHOUT_CLASSIFICATION	1.4556708651406205E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999600751905195	WITHOUT_CLASSIFICATION	3.992480948049754E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999981163065471	WITHOUT_CLASSIFICATION	1.8836934529361036E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999246294564	WITHOUT_CLASSIFICATION	7.537054358588557E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999995687566214	WITHOUT_CLASSIFICATION	4.3124337853960653E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.999995329936152	WITHOUT_CLASSIFICATION	4.6700638480627555E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998935565783	WITHOUT_CLASSIFICATION	1.0644342168149255E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998621562973257	WITHOUT_CLASSIFICATION	1.378437026743237E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999991549585798	WITHOUT_CLASSIFICATION	8.450414201270261E-7	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999972547980235	WITHOUT_CLASSIFICATION	2.7452019764379037E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999978587363397	WITHOUT_CLASSIFICATION	2.141263660268135E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999976034032582	WITHOUT_CLASSIFICATION	2.3965967418107134E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999492385142	WITHOUT_CLASSIFICATION	5.076148593586387E-8	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997737756168	WITHOUT_CLASSIFICATION	2.2622438328573769E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999740255774	WITHOUT_CLASSIFICATION	2.5974422592611987E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999741069718	WITHOUT_CLASSIFICATION	2.589302821547888E-8	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999977821698861	WITHOUT_CLASSIFICATION	2.217830113862038E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999997620549241	WITHOUT_CLASSIFICATION	2.379450758219683E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999609701789929	WITHOUT_CLASSIFICATION	3.9029821007158324E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999971527934257	WITHOUT_CLASSIFICATION	2.8472065743790667E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999989059402731	WITHOUT_CLASSIFICATION	1.0940597269066095E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999797124175	WITHOUT_CLASSIFICATION	2.028758255284785E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999993173130808	WITHOUT_CLASSIFICATION	6.826869192000749E-7	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9999039220548487	WITHOUT_CLASSIFICATION	9.607794515123235E-5	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999983669514781	WITHOUT_CLASSIFICATION	1.6330485217743228E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999987557424588	WITHOUT_CLASSIFICATION	1.2442575412508655E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999989508410934	WITHOUT_CLASSIFICATION	1.0491589065984003E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9995574200824658	WITHOUT_CLASSIFICATION	4.4257991753418206E-4	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999996341280788	WITHOUT_CLASSIFICATION	3.658719211296981E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999972317805638	WITHOUT_CLASSIFICATION	2.7682194361808155E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998825737756	WITHOUT_CLASSIFICATION	1.1742622441864479E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999724661694878	WITHOUT_CLASSIFICATION	2.7533830512252878E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999993015624251	WITHOUT_CLASSIFICATION	6.984375748946901E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999994709232114	WITHOUT_CLASSIFICATION	5.290767885863773E-7	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997826573594	WITHOUT_CLASSIFICATION	2.1734264063539973E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999976520809245	WITHOUT_CLASSIFICATION	2.347919075545427E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999994709232114	WITHOUT_CLASSIFICATION	5.290767885863773E-7	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999993015624251	WITHOUT_CLASSIFICATION	6.984375748946901E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997826573594	WITHOUT_CLASSIFICATION	2.1734264063539973E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999993234818899	WITHOUT_CLASSIFICATION	6.765181101466266E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999987873641241	WITHOUT_CLASSIFICATION	1.2126358758701708E-6	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999994493644531	WITHOUT_CLASSIFICATION	5.506355468961286E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999999515783493	WITHOUT_CLASSIFICATION	4.842165069124901E-7	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999820249352	WITHOUT_CLASSIFICATION	1.7975064724975166E-8	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998704093793553	WITHOUT_CLASSIFICATION	1.295906206446434E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999988779573719	WITHOUT_CLASSIFICATION	1.1220426281595656E-6	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999988950107311	WITHOUT_CLASSIFICATION	1.1049892688189022E-6	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999974894674	WITHOUT_CLASSIFICATION	2.5105325924905398E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999993316014353	WITHOUT_CLASSIFICATION	6.683985646639234E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999992458343172	WITHOUT_CLASSIFICATION	7.541656827339701E-7	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999990912977548	WITHOUT_CLASSIFICATION	9.087022451677474E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999995188632282	WITHOUT_CLASSIFICATION	4.811367717676191E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.999999515783493	WITHOUT_CLASSIFICATION	4.842165069124901E-7	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997779591111	WITHOUT_CLASSIFICATION	2.2204088893736746E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999987841110204	WITHOUT_CLASSIFICATION	1.2158889795749543E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998282226319	WITHOUT_CLASSIFICATION	1.7177736804729258E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999391405998	WITHOUT_CLASSIFICATION	6.08594002100858E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999996884216285	WITHOUT_CLASSIFICATION	3.1157837152763044E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997019711799	WITHOUT_CLASSIFICATION	2.9802882010918475E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999977372606976	WITHOUT_CLASSIFICATION	2.2627393022784265E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999969184569	WITHOUT_CLASSIFICATION	3.081543152427326E-9	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999944112266538	WITHOUT_CLASSIFICATION	5.5887733462057064E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999995207826208	WITHOUT_CLASSIFICATION	4.792173792556886E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999992793867049	WITHOUT_CLASSIFICATION	7.206132951935692E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999992793867049	WITHOUT_CLASSIFICATION	7.206132951935692E-7	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999989206384	WITHOUT_CLASSIFICATION	1.0793615987787398E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999989206384	WITHOUT_CLASSIFICATION	1.0793615987787398E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.99999809148624	WITHOUT_CLASSIFICATION	1.9085137599800816E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998282226319	WITHOUT_CLASSIFICATION	1.7177736804729258E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999991787830186	WITHOUT_CLASSIFICATION	8.212169815238742E-7	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999999990499256	WITHOUT_CLASSIFICATION	9.500743996161231E-9	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998444954014	WITHOUT_CLASSIFICATION	1.5550459874009531E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998444954014	WITHOUT_CLASSIFICATION	1.5550459874009531E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998744431177	WITHOUT_CLASSIFICATION	1.2555688239055452E-7	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996691088349	WITHOUT_CLASSIFICATION	3.3089116518039495E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999979717084	WITHOUT_CLASSIFICATION	2.028291719013184E-9	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999991104451597	WITHOUT_CLASSIFICATION	8.895548403319792E-7	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998848570303	WITHOUT_CLASSIFICATION	1.1514296979775826E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999778263174	WITHOUT_CLASSIFICATION	2.217368264036276E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999978323068905	WITHOUT_CLASSIFICATION	2.1676931094399776E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999993930967899	WITHOUT_CLASSIFICATION	6.069032101333546E-7	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999999092774462	WITHOUT_CLASSIFICATION	9.072255379610998E-8	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999465182412	WITHOUT_CLASSIFICATION	5.348175877762965E-8	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999999656619237	WITHOUT_CLASSIFICATION	3.433807637863211E-8	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999988027599719	WITHOUT_CLASSIFICATION	1.1972400281261174E-6	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998411492436	WITHOUT_CLASSIFICATION	1.5885075643326406E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999996876291075	WITHOUT_CLASSIFICATION	3.123708924098177E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999991120896782	WITHOUT_CLASSIFICATION	8.879103218384025E-7	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999974911405256	WITHOUT_CLASSIFICATION	2.5088594744928474E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967698399819	WITHOUT_CLASSIFICATION	3.2301600180839363E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999998112978694	WITHOUT_CLASSIFICATION	1.8870213061184484E-7	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999936339729	WITHOUT_CLASSIFICATION	6.366027238189292E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999720829927	WITHOUT_CLASSIFICATION	2.791700716842788E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999876250052	WITHOUT_CLASSIFICATION	1.2374994881778472E-8	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999962015002233	WITHOUT_CLASSIFICATION	3.7984997766990806E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999089261434	WITHOUT_CLASSIFICATION	9.10738566229962E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999884871992	WITHOUT_CLASSIFICATION	1.1512800941343163E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9998474010727356	WITHOUT_CLASSIFICATION	1.5259892726441403E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999991412384378	WITHOUT_CLASSIFICATION	8.587615622836868E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999972547980235	WITHOUT_CLASSIFICATION	2.7452019764379037E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998818367695	WITHOUT_CLASSIFICATION	1.181632305348479E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996719095368	WITHOUT_CLASSIFICATION	3.2809046323717077E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914834794376	WITHOUT_CLASSIFICATION	8.516520562506393E-6	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981606813334	WITHOUT_CLASSIFICATION	1.8393186665855071E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999993636107505	WITHOUT_CLASSIFICATION	6.363892495683987E-7	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999993636107505	WITHOUT_CLASSIFICATION	6.363892495683987E-7	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995180477669	WITHOUT_CLASSIFICATION	4.819522331559965E-7	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999991734156569	WITHOUT_CLASSIFICATION	8.265843430717975E-7	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999993619929754	WITHOUT_CLASSIFICATION	6.380070245951664E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999993619929754	WITHOUT_CLASSIFICATION	6.380070245951664E-6	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997837528461	WITHOUT_CLASSIFICATION	2.1624715369417867E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999990853549853	WITHOUT_CLASSIFICATION	9.146450146733501E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999931666647998	WITHOUT_CLASSIFICATION	6.833335200216639E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999981618694609	WITHOUT_CLASSIFICATION	1.8381305391818073E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999996323241374	WITHOUT_CLASSIFICATION	3.6767586269596567E-7	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999992961877712	WITHOUT_CLASSIFICATION	7.038122287746953E-7	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999988236802256	WITHOUT_CLASSIFICATION	1.176319774404843E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993566283002	WITHOUT_CLASSIFICATION	6.433716998439682E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996864788417	WITHOUT_CLASSIFICATION	3.1352115830886975E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996864788417	WITHOUT_CLASSIFICATION	3.1352115830886975E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999988320566	WITHOUT_CLASSIFICATION	1.1679434906281252E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999994728412633	WITHOUT_CLASSIFICATION	5.271587367448042E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999994728412633	WITHOUT_CLASSIFICATION	5.271587367448042E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998942691617	WITHOUT_CLASSIFICATION	1.0573083833884534E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999998739893041	WITHOUT_CLASSIFICATION	1.2601069596011792E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9968173942155443	WITHOUT_CLASSIFICATION	0.0031826057844556027	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999990146758322	WITHOUT_CLASSIFICATION	9.85324167780295E-7	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998450305037	WITHOUT_CLASSIFICATION	1.5496949627485792E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999938319235	WITHOUT_CLASSIFICATION	6.168076535400464E-9	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999995487392587	WITHOUT_CLASSIFICATION	4.512607412308586E-7	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999739333715993	WITHOUT_CLASSIFICATION	2.606662840060793E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999886400812	WITHOUT_CLASSIFICATION	1.1359918841375099E-8	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.99999267703845	WITHOUT_CLASSIFICATION	7.32296155004393E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999972901568	WITHOUT_CLASSIFICATION	2.709843150420687E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999756819396	WITHOUT_CLASSIFICATION	2.431806040016417E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984430979566	WITHOUT_CLASSIFICATION	1.5569020434458536E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984430979566	WITHOUT_CLASSIFICATION	1.5569020434458536E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984430979566	WITHOUT_CLASSIFICATION	1.5569020434458536E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984430979566	WITHOUT_CLASSIFICATION	1.5569020434458536E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999972968883459	WITHOUT_CLASSIFICATION	2.703111654039432E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999980978055159	WITHOUT_CLASSIFICATION	1.9021944841859632E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999984302340988	WITHOUT_CLASSIFICATION	1.5697659011476326E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999946643916322	WITHOUT_CLASSIFICATION	5.3356083677756295E-6	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993251713652	WITHOUT_CLASSIFICATION	6.748286347623143E-7	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999993944751928	WITHOUT_CLASSIFICATION	6.055248071952711E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999984181217109	WITHOUT_CLASSIFICATION	1.5818782890714794E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999992079462896	WITHOUT_CLASSIFICATION	7.920537103788769E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999144004593	WITHOUT_CLASSIFICATION	8.559954076471651E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999998955472876	WITHOUT_CLASSIFICATION	1.0445271243996055E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999996776403599	WITHOUT_CLASSIFICATION	3.2235964010274515E-7	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996348300627	WITHOUT_CLASSIFICATION	3.651699373294832E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9919816180764789	WITHOUT_CLASSIFICATION	0.008018381923521107	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999972011799343	WITHOUT_CLASSIFICATION	2.7988200657175488E-6	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999949774547636	WITHOUT_CLASSIFICATION	5.0225452363825E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996348300627	WITHOUT_CLASSIFICATION	3.651699373294832E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999990451994374	WITHOUT_CLASSIFICATION	9.548005626148236E-7	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999975624373	WITHOUT_CLASSIFICATION	2.4375626295729196E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999734399762	WITHOUT_CLASSIFICATION	2.656002384575063E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999932867627227	WITHOUT_CLASSIFICATION	6.7132372773826174E-6	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997931859497	WITHOUT_CLASSIFICATION	2.0681405029378963E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998392586446	WITHOUT_CLASSIFICATION	1.6074135552821847E-7	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999990055263	WITHOUT_CLASSIFICATION	9.944738063510087E-10	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999999443511243	WITHOUT_CLASSIFICATION	5.5648875684133894E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999587903853	WITHOUT_CLASSIFICATION	4.120961477948729E-8	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999195158721	WITHOUT_CLASSIFICATION	8.04841279275002E-8	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998937913899	WITHOUT_CLASSIFICATION	1.0620861012652749E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995904533029	WITHOUT_CLASSIFICATION	4.0954669719621496E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999960908791427	WITHOUT_CLASSIFICATION	3.909120857373836E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999462790471384	WITHOUT_CLASSIFICATION	5.3720952861562827E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997031137161	WITHOUT_CLASSIFICATION	2.9688628388915285E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999996030052931	WITHOUT_CLASSIFICATION	3.9699470689759666E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999987215186856	WITHOUT_CLASSIFICATION	1.2784813143956873E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995121583078	WITHOUT_CLASSIFICATION	4.878416922106437E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999945384689105	WITHOUT_CLASSIFICATION	5.461531089435555E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995121583078	WITHOUT_CLASSIFICATION	4.878416922106437E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999249566046	WITHOUT_CLASSIFICATION	7.504339546722774E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999986899189391	WITHOUT_CLASSIFICATION	1.3100810607899275E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999413105177	WITHOUT_CLASSIFICATION	5.868948227334845E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999995494123872	WITHOUT_CLASSIFICATION	4.505876127822503E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999458134058	WITHOUT_CLASSIFICATION	5.4186594219550944E-8	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999981597306893	WITHOUT_CLASSIFICATION	1.840269310744913E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999975322323951	WITHOUT_CLASSIFICATION	2.4677676048745494E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999987215186856	WITHOUT_CLASSIFICATION	1.2784813143956873E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999945384689105	WITHOUT_CLASSIFICATION	5.461531089435555E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999249566046	WITHOUT_CLASSIFICATION	7.504339546722774E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997115849593	WITHOUT_CLASSIFICATION	2.8841504073486487E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999999195080185	WITHOUT_CLASSIFICATION	8.049198158960239E-8	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999983552397999	WITHOUT_CLASSIFICATION	1.644760200263427E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.999999921290404	WITHOUT_CLASSIFICATION	7.870959597370139E-8	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999993722823638	WITHOUT_CLASSIFICATION	6.277176362045308E-7	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999996774549117	WITHOUT_CLASSIFICATION	3.225450884030363E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998830443896	WITHOUT_CLASSIFICATION	1.1695561048776372E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967698399819	WITHOUT_CLASSIFICATION	3.2301600180839363E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999986899189391	WITHOUT_CLASSIFICATION	1.3100810607899275E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997473390239	WITHOUT_CLASSIFICATION	2.526609761344151E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999687325082	WITHOUT_CLASSIFICATION	3.126749188581525E-8	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999140514989	WITHOUT_CLASSIFICATION	8.594850105718584E-8	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999220935509	WITHOUT_CLASSIFICATION	7.790644905406549E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967698399819	WITHOUT_CLASSIFICATION	3.2301600180839363E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998334626551	WITHOUT_CLASSIFICATION	1.6653734480307838E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967698399819	WITHOUT_CLASSIFICATION	3.2301600180839363E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999044249248	WITHOUT_CLASSIFICATION	9.557507525289098E-8	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999949062793931	WITHOUT_CLASSIFICATION	5.093720606919775E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999988966175567	WITHOUT_CLASSIFICATION	1.1033824432741522E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998235863959	WITHOUT_CLASSIFICATION	1.7641360407446502E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998605441535	WITHOUT_CLASSIFICATION	1.39455846468646E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999993200045707	WITHOUT_CLASSIFICATION	6.79995429299769E-7	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999989329979962	WITHOUT_CLASSIFICATION	1.0670020037736645E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998357445673	WITHOUT_CLASSIFICATION	1.6425543261553944E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999992408509301	WITHOUT_CLASSIFICATION	7.591490698430469E-7	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999959571727618	WITHOUT_CLASSIFICATION	4.042827238247644E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999980818193445	WITHOUT_CLASSIFICATION	1.918180655501846E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999223680367	WITHOUT_CLASSIFICATION	7.763196329299198E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9968173942155443	WITHOUT_CLASSIFICATION	0.0031826057844556027	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999909828492102	WITHOUT_CLASSIFICATION	9.017150789741252E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999869017283649	WITHOUT_CLASSIFICATION	1.3098271635060095E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999980618611499	WITHOUT_CLASSIFICATION	1.938138850041203E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999879385702105	WITHOUT_CLASSIFICATION	1.2061429789530314E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997423154323	WITHOUT_CLASSIFICATION	2.5768456766162406E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998952113185	WITHOUT_CLASSIFICATION	1.0478868158022376E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999854936692	WITHOUT_CLASSIFICATION	1.4506330737064313E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999999648132141	WITHOUT_CLASSIFICATION	3.5186785882690676E-8	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999983765087	WITHOUT_CLASSIFICATION	1.6234913881968887E-9	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999997536464185	WITHOUT_CLASSIFICATION	2.463535815677013E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9964476334784985	WITHOUT_CLASSIFICATION	0.003552366521501587	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999968995295904	WITHOUT_CLASSIFICATION	3.1004704096065094E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999993771674835	WITHOUT_CLASSIFICATION	6.228325165079114E-7	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999885691785718	WITHOUT_CLASSIFICATION	1.1430821428144494E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999913360180873	WITHOUT_CLASSIFICATION	8.663981912734764E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999722661789042	WITHOUT_CLASSIFICATION	2.7733821095797793E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999979439450272	WITHOUT_CLASSIFICATION	2.0560549728874985E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999979644775	WITHOUT_CLASSIFICATION	2.0355225643964445E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999943703838	WITHOUT_CLASSIFICATION	5.629616249427089E-9	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999953837571088	WITHOUT_CLASSIFICATION	4.616242891153514E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999972796795947	WITHOUT_CLASSIFICATION	2.7203204052393108E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9960996881994356	WITHOUT_CLASSIFICATION	0.003900311800564451	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999222904064596	WITHOUT_CLASSIFICATION	7.770959354033012E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999997345613241	WITHOUT_CLASSIFICATION	2.654386759180418E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999990524045963	WITHOUT_CLASSIFICATION	9.475954037664315E-7	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999705982915843	WITHOUT_CLASSIFICATION	2.940170841573824E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999998679845769	WITHOUT_CLASSIFICATION	1.3201542310466994E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9858924366414924	WITHOUT_CLASSIFICATION	0.014107563358507528	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999957835584	WITHOUT_CLASSIFICATION	4.216441589461586E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999077422213	WITHOUT_CLASSIFICATION	9.22577786851789E-8	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999841314673427	WITHOUT_CLASSIFICATION	1.586853265733829E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999841314673427	WITHOUT_CLASSIFICATION	1.586853265733829E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999286306978	WITHOUT_CLASSIFICATION	7.136930219718357E-8	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998357445673	WITHOUT_CLASSIFICATION	1.6425543261553944E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999991608307031	WITHOUT_CLASSIFICATION	8.391692969137407E-7	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999992577057558	WITHOUT_CLASSIFICATION	7.422942442000503E-7	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999820399628	WITHOUT_CLASSIFICATION	1.7960037227387906E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999352929749	WITHOUT_CLASSIFICATION	6.470702507935151E-8	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999954902545395	WITHOUT_CLASSIFICATION	4.5097454604935334E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999178258759799	WITHOUT_CLASSIFICATION	8.217412402021218E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999902694780524	WITHOUT_CLASSIFICATION	9.730521947669767E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999998265309468	WITHOUT_CLASSIFICATION	1.7346905320860945E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999997305138734	WITHOUT_CLASSIFICATION	2.6948612660069717E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999999472952077	WITHOUT_CLASSIFICATION	5.270479239279737E-8	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998128988836	WITHOUT_CLASSIFICATION	1.8710111634540913E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999924024883876	WITHOUT_CLASSIFICATION	7.597511612473993E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999984495431399	WITHOUT_CLASSIFICATION	1.5504568601420788E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999008552166	WITHOUT_CLASSIFICATION	9.914478345175645E-8	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999841137003	WITHOUT_CLASSIFICATION	1.58862997763731E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999756577934	WITHOUT_CLASSIFICATION	2.434220661719929E-8	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999275260314	WITHOUT_CLASSIFICATION	7.247396853691361E-8	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999836823941	WITHOUT_CLASSIFICATION	1.631760589031441E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999968218873	WITHOUT_CLASSIFICATION	3.178112675915091E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999996064205604	WITHOUT_CLASSIFICATION	3.935794396275511E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999994453007592	WITHOUT_CLASSIFICATION	5.546992407137125E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998735995135	WITHOUT_CLASSIFICATION	1.264004866408552E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9858924366414924	WITHOUT_CLASSIFICATION	0.014107563358507528	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999997228681852	WITHOUT_CLASSIFICATION	2.771318147549061E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999481447442	WITHOUT_CLASSIFICATION	5.1855255880084406E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999652276282	WITHOUT_CLASSIFICATION	3.4772371777454734E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999979781992725	WITHOUT_CLASSIFICATION	2.0218007275499646E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999997676182779	WITHOUT_CLASSIFICATION	2.3238172206783119E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999999312856107	WITHOUT_CLASSIFICATION	6.871438931022715E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999581001872896	WITHOUT_CLASSIFICATION	4.189981271041905E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999992560348752	WITHOUT_CLASSIFICATION	7.439651247994107E-7	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998716212496	WITHOUT_CLASSIFICATION	1.2837875037933897E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999999992712743	WITHOUT_CLASSIFICATION	7.287257075376162E-9	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995390333833	WITHOUT_CLASSIFICATION	4.609666165744886E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999994068096207	WITHOUT_CLASSIFICATION	5.931903792633844E-7	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9988928199409939	WITHOUT_CLASSIFICATION	0.0011071800590061831	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999999298530144	WITHOUT_CLASSIFICATION	7.014698560029821E-7	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995449075451	WITHOUT_CLASSIFICATION	4.5509245496286575E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999960773287	WITHOUT_CLASSIFICATION	3.9226713018224273E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999960773287	WITHOUT_CLASSIFICATION	3.9226713018224273E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999993581271078	WITHOUT_CLASSIFICATION	6.418728922120815E-7	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999988284759236	WITHOUT_CLASSIFICATION	1.171524076393482E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983128308874	WITHOUT_CLASSIFICATION	1.6871691125934386E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983128308874	WITHOUT_CLASSIFICATION	1.6871691125934386E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999940620141	WITHOUT_CLASSIFICATION	5.937985831387715E-9	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994729504116	WITHOUT_CLASSIFICATION	5.270495883167627E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999887817903	WITHOUT_CLASSIFICATION	1.1218209657227571E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999995743398521	WITHOUT_CLASSIFICATION	4.2566014780995754E-7	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999892994999288	WITHOUT_CLASSIFICATION	1.0700500071377175E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999976696273487	WITHOUT_CLASSIFICATION	2.3303726512671607E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999666248763	WITHOUT_CLASSIFICATION	3.3375123721607454E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999666248763	WITHOUT_CLASSIFICATION	3.3375123721607454E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999996726306255	WITHOUT_CLASSIFICATION	3.2736937449012E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999999601620321	WITHOUT_CLASSIFICATION	3.983796797156306E-8	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999984814720837	WITHOUT_CLASSIFICATION	1.518527916353471E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998577358982	WITHOUT_CLASSIFICATION	1.4226410181985924E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998577358982	WITHOUT_CLASSIFICATION	1.4226410181985924E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999997524590901	WITHOUT_CLASSIFICATION	2.4754090981811203E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998313971028	WITHOUT_CLASSIFICATION	1.6860289713872053E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999931536855357	WITHOUT_CLASSIFICATION	6.846314464323596E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999994478323964	WITHOUT_CLASSIFICATION	5.521676036360697E-7	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999997963689116	WITHOUT_CLASSIFICATION	2.0363108843232613E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999996505256357	WITHOUT_CLASSIFICATION	3.494743643543638E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999705225658	WITHOUT_CLASSIFICATION	2.9477434049557283E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999998848058838	WITHOUT_CLASSIFICATION	1.151941161474367E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.999999645391997	WITHOUT_CLASSIFICATION	3.5460800295793505E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999995130525272	WITHOUT_CLASSIFICATION	4.869474727701223E-7	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999997154785	WITHOUT_CLASSIFICATION	2.845215313177434E-10	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999963050563052	WITHOUT_CLASSIFICATION	3.6949436948118466E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.99997569136521	WITHOUT_CLASSIFICATION	2.430863479000038E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999992270306696	WITHOUT_CLASSIFICATION	7.729693304464339E-7	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999979482956146	WITHOUT_CLASSIFICATION	2.0517043854064614E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999975405472414	WITHOUT_CLASSIFICATION	2.459452758600519E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999919058847	WITHOUT_CLASSIFICATION	8.094115349870822E-9	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999982042926946	WITHOUT_CLASSIFICATION	1.7957073054928088E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999998335915584	WITHOUT_CLASSIFICATION	1.6640844149707393E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999966741299324	WITHOUT_CLASSIFICATION	3.325870067625715E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999993463920525	WITHOUT_CLASSIFICATION	6.536079475351725E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999981073372053	WITHOUT_CLASSIFICATION	1.8926627947537423E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999775949700317	WITHOUT_CLASSIFICATION	2.2405029968320048E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999938463103005	WITHOUT_CLASSIFICATION	6.1536896993661334E-6	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999956679371669	WITHOUT_CLASSIFICATION	4.332062833130827E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999997871734717	WITHOUT_CLASSIFICATION	2.1282652828528243E-7	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999980410666135	WITHOUT_CLASSIFICATION	1.9589333865105446E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999656336425123	WITHOUT_CLASSIFICATION	3.4366357487629596E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999952105576	WITHOUT_CLASSIFICATION	4.789442390989133E-9	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999960694649	WITHOUT_CLASSIFICATION	3.930535094199508E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999331520273	WITHOUT_CLASSIFICATION	6.68479727029592E-8	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999420839661	WITHOUT_CLASSIFICATION	5.7916033817447226E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999958449687	WITHOUT_CLASSIFICATION	4.155031292511008E-8	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999995611454447	WITHOUT_CLASSIFICATION	4.3885455527834513E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999413466569	WITHOUT_CLASSIFICATION	5.865334306375045E-8	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999813395826763	WITHOUT_CLASSIFICATION	1.8660417323666405E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999980897166354	WITHOUT_CLASSIFICATION	1.9102833645298944E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999816255542	WITHOUT_CLASSIFICATION	1.8374445803871E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999987509477285	WITHOUT_CLASSIFICATION	1.249052271481503E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996599408636	WITHOUT_CLASSIFICATION	3.400591364197683E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999444961108	WITHOUT_CLASSIFICATION	5.5503889208831235E-8	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999994605920178	WITHOUT_CLASSIFICATION	5.394079822087023E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999995575619556	WITHOUT_CLASSIFICATION	4.4243804439026676E-7	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999999052440594	WITHOUT_CLASSIFICATION	9.47559406670478E-8	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999998635047969	WITHOUT_CLASSIFICATION	1.364952031885342E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.999999556009976	WITHOUT_CLASSIFICATION	4.4399002386028576E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999992260736492	WITHOUT_CLASSIFICATION	7.739263508234635E-7	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999953314088029	WITHOUT_CLASSIFICATION	4.668591197088204E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999997430559158	WITHOUT_CLASSIFICATION	2.5694408424342987E-7	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999437593019803	WITHOUT_CLASSIFICATION	5.6240698019790226E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999995762088317	WITHOUT_CLASSIFICATION	4.237911682921165E-7	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999785844478	WITHOUT_CLASSIFICATION	2.141555224327316E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999865766093753	WITHOUT_CLASSIFICATION	1.3423390624578653E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999916259026	WITHOUT_CLASSIFICATION	8.374097440688186E-9	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999987623231191	WITHOUT_CLASSIFICATION	1.2376768808708212E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999998193743643	WITHOUT_CLASSIFICATION	1.8062563560292395E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998920953609	WITHOUT_CLASSIFICATION	1.0790463904442239E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996571377502	WITHOUT_CLASSIFICATION	3.428622498345523E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998820547153	WITHOUT_CLASSIFICATION	1.1794528471094781E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999727003005809	WITHOUT_CLASSIFICATION	2.729969941913483E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995163193404	WITHOUT_CLASSIFICATION	4.836806595860661E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995163193404	WITHOUT_CLASSIFICATION	4.836806595860661E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999867944966467	WITHOUT_CLASSIFICATION	1.3205503353213233E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999682560593749	WITHOUT_CLASSIFICATION	3.174394062515777E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999803179455	WITHOUT_CLASSIFICATION	1.9682054469741035E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999997553161661	WITHOUT_CLASSIFICATION	2.446838337898451E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999995512479273	WITHOUT_CLASSIFICATION	4.487520727640533E-7	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999926780853999	WITHOUT_CLASSIFICATION	7.32191460010554E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999995306992299	WITHOUT_CLASSIFICATION	4.693007700967208E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999991339358	WITHOUT_CLASSIFICATION	8.660641939267918E-10	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999996430760912	WITHOUT_CLASSIFICATION	3.569239088225188E-7	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999970562047036	WITHOUT_CLASSIFICATION	2.9437952964083804E-6	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999702609856	WITHOUT_CLASSIFICATION	2.9739014323669894E-8	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999989663602658	WITHOUT_CLASSIFICATION	1.033639734265669E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999294196699	WITHOUT_CLASSIFICATION	7.058033020455167E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999480699049	WITHOUT_CLASSIFICATION	5.193009510944467E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999218346349	WITHOUT_CLASSIFICATION	7.816536510715618E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999218346349	WITHOUT_CLASSIFICATION	7.816536510715618E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999967937445	WITHOUT_CLASSIFICATION	3.206255502642779E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999999330839912	WITHOUT_CLASSIFICATION	6.69160087963242E-7	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999542147597	WITHOUT_CLASSIFICATION	4.578524030928446E-8	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999992383911	WITHOUT_CLASSIFICATION	7.616087712006516E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998274475932	WITHOUT_CLASSIFICATION	1.725524067976175E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667737047855	WITHOUT_CLASSIFICATION	3.322629521461646E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996417404428	WITHOUT_CLASSIFICATION	3.582595573065455E-7	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999995739886495	WITHOUT_CLASSIFICATION	4.260113505956411E-7	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999955327495297	WITHOUT_CLASSIFICATION	4.4672504702161794E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999978827151	WITHOUT_CLASSIFICATION	2.1172850006743126E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999314979598952	WITHOUT_CLASSIFICATION	6.850204010469134E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999985817287	WITHOUT_CLASSIFICATION	1.4182712958973867E-9	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999893557543	WITHOUT_CLASSIFICATION	1.0644245697167146E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999968422024	WITHOUT_CLASSIFICATION	3.1577976508397485E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999594486589	WITHOUT_CLASSIFICATION	4.0551340994052886E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999999879977306	WITHOUT_CLASSIFICATION	1.200226939862318E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995586301014	WITHOUT_CLASSIFICATION	4.4136989856612685E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999925416413578	WITHOUT_CLASSIFICATION	7.458358642280479E-6	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999970616225482	WITHOUT_CLASSIFICATION	2.938377451763725E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999991913132269	WITHOUT_CLASSIFICATION	8.086867730624243E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999490377818	WITHOUT_CLASSIFICATION	5.0962218323555263E-8	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999992577792	WITHOUT_CLASSIFICATION	7.42220763810851E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999782465735	WITHOUT_CLASSIFICATION	2.1753426578192217E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999986299754	WITHOUT_CLASSIFICATION	1.3700246179384625E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998098992386	WITHOUT_CLASSIFICATION	1.901007614788978E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999900513941434	WITHOUT_CLASSIFICATION	9.948605856556554E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998246783567099	WITHOUT_CLASSIFICATION	1.7532164329022012E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999996067541168	WITHOUT_CLASSIFICATION	3.9324588317537007E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999695438541	WITHOUT_CLASSIFICATION	3.0456145976847676E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998959074006	WITHOUT_CLASSIFICATION	1.040925994777041E-7	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999981860705468	WITHOUT_CLASSIFICATION	1.8139294531618772E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996201917628	WITHOUT_CLASSIFICATION	3.7980823713066295E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999989530037629	WITHOUT_CLASSIFICATION	1.046996237096366E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999552672052	WITHOUT_CLASSIFICATION	4.4732794737751636E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999976978408	WITHOUT_CLASSIFICATION	2.302159177011029E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999811149344	WITHOUT_CLASSIFICATION	1.8885065562456887E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999999436013505	WITHOUT_CLASSIFICATION	5.639864954725073E-8	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999274243676	WITHOUT_CLASSIFICATION	7.257563242361725E-8	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999272508492	WITHOUT_CLASSIFICATION	7.274915078352808E-8	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999943380373963	WITHOUT_CLASSIFICATION	5.661962603610383E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999994536808261	WITHOUT_CLASSIFICATION	5.46319173853341E-7	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999849047886	WITHOUT_CLASSIFICATION	1.509521140111646E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999989822676957	WITHOUT_CLASSIFICATION	1.0177323043723695E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999989822676957	WITHOUT_CLASSIFICATION	1.0177323043723695E-6	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999996435325033	WITHOUT_CLASSIFICATION	3.5646749667388696E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999832089893	WITHOUT_CLASSIFICATION	1.6791010703475815E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999912706113	WITHOUT_CLASSIFICATION	8.72938863591538E-9	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999997225518575	WITHOUT_CLASSIFICATION	2.774481424625488E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999019176856	WITHOUT_CLASSIFICATION	9.808231434449618E-8	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999998949453	WITHOUT_CLASSIFICATION	1.0505470071430234E-9	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999414162918	WITHOUT_CLASSIFICATION	5.85837082474939E-8	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997484106498	WITHOUT_CLASSIFICATION	2.5158935022597115E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999979755444	WITHOUT_CLASSIFICATION	2.0244555404504117E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972231082396	WITHOUT_CLASSIFICATION	2.7768917604038685E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985545189086	WITHOUT_CLASSIFICATION	1.4454810914363434E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999783704527818	WITHOUT_CLASSIFICATION	2.1629547218161134E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999995061307219	WITHOUT_CLASSIFICATION	4.938692780943566E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997400316661	WITHOUT_CLASSIFICATION	2.599683338449238E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999631619544	WITHOUT_CLASSIFICATION	3.6838045559112135E-8	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999999011810417	WITHOUT_CLASSIFICATION	9.881895838133959E-8	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999611777353	WITHOUT_CLASSIFICATION	3.8822264788947167E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999990748003	WITHOUT_CLASSIFICATION	9.251995901196652E-10	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999627755088	WITHOUT_CLASSIFICATION	3.722449127909567E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999888928472082	WITHOUT_CLASSIFICATION	1.1107152791876159E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999964020430039	WITHOUT_CLASSIFICATION	3.597956996212135E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999019556093	WITHOUT_CLASSIFICATION	9.804439075132067E-8	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999926064324	WITHOUT_CLASSIFICATION	7.393567609258421E-9	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999976387852757	WITHOUT_CLASSIFICATION	2.3612147242235875E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999357852872	WITHOUT_CLASSIFICATION	6.421471279917527E-8	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999998527388746	WITHOUT_CLASSIFICATION	1.4726112540784927E-6	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999986461341344	WITHOUT_CLASSIFICATION	1.353865865650074E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999978099963	WITHOUT_CLASSIFICATION	2.1900037645761942E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999654744990963	WITHOUT_CLASSIFICATION	3.452550090361938E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999494048508	WITHOUT_CLASSIFICATION	5.0595149158947634E-8	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998853604484	WITHOUT_CLASSIFICATION	1.1463955157930215E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999830795518	WITHOUT_CLASSIFICATION	1.692044823237096E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999996944716392	WITHOUT_CLASSIFICATION	3.055283608790508E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999713802121	WITHOUT_CLASSIFICATION	2.8619787974642473E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999899045323	WITHOUT_CLASSIFICATION	1.0095467701926494E-8	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999607622739883	WITHOUT_CLASSIFICATION	3.923772601169125E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999806000218	WITHOUT_CLASSIFICATION	1.9399978218327442E-8	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998697661941	WITHOUT_CLASSIFICATION	1.3023380585370636E-7	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999993176205686	WITHOUT_CLASSIFICATION	6.823794314483509E-7	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999669321894	WITHOUT_CLASSIFICATION	3.30678105413948E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999980250639452	WITHOUT_CLASSIFICATION	1.9749360548414625E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999871630961196	WITHOUT_CLASSIFICATION	1.283690388046608E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998789459469	WITHOUT_CLASSIFICATION	1.210540531149441E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999698894302	WITHOUT_CLASSIFICATION	3.0110569862704283E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998869540669	WITHOUT_CLASSIFICATION	1.13045933060437E-7	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999716473541225	WITHOUT_CLASSIFICATION	2.835264587760223E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999855260092	WITHOUT_CLASSIFICATION	1.4473990741031096E-8	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999991703552699	WITHOUT_CLASSIFICATION	8.296447300079763E-7	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998789175698	WITHOUT_CLASSIFICATION	1.2108243021777394E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999294196699	WITHOUT_CLASSIFICATION	7.058033020455167E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999992561470399	WITHOUT_CLASSIFICATION	7.43852960142948E-7	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999721323916	WITHOUT_CLASSIFICATION	2.786760842550359E-8	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.999999993707781	WITHOUT_CLASSIFICATION	6.2922189099348326E-9	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999938933977	WITHOUT_CLASSIFICATION	6.1066023728930915E-9	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997737860249	WITHOUT_CLASSIFICATION	2.2621397507170015E-7	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999753648664	WITHOUT_CLASSIFICATION	2.4635133585601646E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999993109934514	WITHOUT_CLASSIFICATION	6.890065485977532E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999918086443735	WITHOUT_CLASSIFICATION	8.191355626338248E-6	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995625148804	WITHOUT_CLASSIFICATION	4.374851195537235E-7	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999991012411884	WITHOUT_CLASSIFICATION	8.987588115446786E-7	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999727212098	WITHOUT_CLASSIFICATION	2.7278790230547798E-8	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999722660764	WITHOUT_CLASSIFICATION	2.7733923606370773E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999565804463	WITHOUT_CLASSIFICATION	4.341955379189112E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999995059726638	WITHOUT_CLASSIFICATION	4.940273360939183E-7	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999258531301	WITHOUT_CLASSIFICATION	7.414686987400185E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995757256522	WITHOUT_CLASSIFICATION	4.2427434778480585E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999988164608461	WITHOUT_CLASSIFICATION	1.1835391539372231E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999982731562348	WITHOUT_CLASSIFICATION	1.7268437652455228E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999941814339	WITHOUT_CLASSIFICATION	5.818565998962173E-9	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996175801353	WITHOUT_CLASSIFICATION	3.8241986458892797E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995757256522	WITHOUT_CLASSIFICATION	4.2427434778480585E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997562400434917	WITHOUT_CLASSIFICATION	2.4375995650838977E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998252227263	WITHOUT_CLASSIFICATION	1.7477727351619592E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999011403031	WITHOUT_CLASSIFICATION	9.885969684596355E-8	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998933937622	WITHOUT_CLASSIFICATION	1.0660623776362088E-7	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999984176575835	WITHOUT_CLASSIFICATION	1.5823424165122025E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998985418818	WITHOUT_CLASSIFICATION	1.0145811815280012E-7	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999974344582	WITHOUT_CLASSIFICATION	2.565541745281245E-9	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999937667099886	WITHOUT_CLASSIFICATION	6.233290011340223E-6	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998390146951	WITHOUT_CLASSIFICATION	1.6098530489078755E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999995898402312	WITHOUT_CLASSIFICATION	4.1015976889315375E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999999941238268	WITHOUT_CLASSIFICATION	5.876173203556017E-8	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999236648524383	WITHOUT_CLASSIFICATION	7.63351475616846E-5	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999973493873	WITHOUT_CLASSIFICATION	2.6506127259281457E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999892393735	WITHOUT_CLASSIFICATION	1.0760626560425156E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999908108557	WITHOUT_CLASSIFICATION	9.189144331646291E-9	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999996631197852	WITHOUT_CLASSIFICATION	3.368802147376617E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998735995135	WITHOUT_CLASSIFICATION	1.264004866408552E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999800517713	WITHOUT_CLASSIFICATION	1.994822876564293E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999900295653	WITHOUT_CLASSIFICATION	9.970434810972813E-9	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999998285620471	WITHOUT_CLASSIFICATION	1.7143795290610582E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999894934835	WITHOUT_CLASSIFICATION	1.0506516587976618E-8	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999824234374	WITHOUT_CLASSIFICATION	1.757656256703389E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998375848219	WITHOUT_CLASSIFICATION	1.6241517808203316E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999999657565	WITHOUT_CLASSIFICATION	3.4243494084934374E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999977861634	WITHOUT_CLASSIFICATION	2.2138365768985685E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999964823838	WITHOUT_CLASSIFICATION	3.5176160822192536E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999998965088392	WITHOUT_CLASSIFICATION	1.0349116079125602E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999679970662231	WITHOUT_CLASSIFICATION	3.2002933777007245E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984352545399	WITHOUT_CLASSIFICATION	1.564745460145257E-6	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999995986148469	WITHOUT_CLASSIFICATION	4.0138515312179234E-7	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999998478190313	WITHOUT_CLASSIFICATION	1.5218096880476534E-7	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999998832418835	WITHOUT_CLASSIFICATION	1.1675811653013234E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999995640726033	WITHOUT_CLASSIFICATION	4.3592739678112335E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999999817221213	WITHOUT_CLASSIFICATION	1.8277878694430882E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999970170685	WITHOUT_CLASSIFICATION	2.98293153617937E-9	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999399743769	WITHOUT_CLASSIFICATION	6.002562316475079E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999145757306	WITHOUT_CLASSIFICATION	8.542426940090998E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999989165634517	WITHOUT_CLASSIFICATION	1.0834365482115241E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999997942935911	WITHOUT_CLASSIFICATION	2.0570640893856436E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999945784115	WITHOUT_CLASSIFICATION	5.42158846787588E-9	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999935430219	WITHOUT_CLASSIFICATION	6.45697804251558E-9	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999697663097	WITHOUT_CLASSIFICATION	3.023369031310493E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999697663097	WITHOUT_CLASSIFICATION	3.023369031310493E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999973077272246	WITHOUT_CLASSIFICATION	2.692272775423503E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999383051221	WITHOUT_CLASSIFICATION	6.169487792836319E-8	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998127838199	WITHOUT_CLASSIFICATION	1.872161799815127E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999276227427	WITHOUT_CLASSIFICATION	7.23772572591817E-8	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999981618694609	WITHOUT_CLASSIFICATION	1.8381305391818073E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999981618694609	WITHOUT_CLASSIFICATION	1.8381305391818073E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999177816555257	WITHOUT_CLASSIFICATION	8.221834447435177E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999144089267	WITHOUT_CLASSIFICATION	8.559107331535884E-8	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999038147664	WITHOUT_CLASSIFICATION	9.618523356390392E-8	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999608875735	WITHOUT_CLASSIFICATION	3.9112426569165446E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999999230153397	WITHOUT_CLASSIFICATION	7.698466030041213E-8	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999954121308421	WITHOUT_CLASSIFICATION	4.587869157835263E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998657275805	WITHOUT_CLASSIFICATION	1.3427241948277115E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999984984970004	WITHOUT_CLASSIFICATION	1.5015029995230241E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999997097755197	WITHOUT_CLASSIFICATION	2.9022448031646883E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997364288885	WITHOUT_CLASSIFICATION	2.6357111145434353E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.99739125224248	WITHOUT_CLASSIFICATION	0.002608747757520015	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969625780317	WITHOUT_CLASSIFICATION	3.0374219683140256E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969625780317	WITHOUT_CLASSIFICATION	3.0374219683140256E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999743175545	WITHOUT_CLASSIFICATION	2.568244546719412E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999717803068043	WITHOUT_CLASSIFICATION	2.8219693195685012E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999984553385598	WITHOUT_CLASSIFICATION	1.5446614402976248E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999991694864163	WITHOUT_CLASSIFICATION	8.305135836374049E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999999569546258	WITHOUT_CLASSIFICATION	4.304537419676926E-7	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999425747663	WITHOUT_CLASSIFICATION	5.7425233684557865E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974587513340889	WITHOUT_CLASSIFICATION	0.0025412486659111434	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997933414667	WITHOUT_CLASSIFICATION	2.0665853337075638E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996551006359	WITHOUT_CLASSIFICATION	3.4489936407605953E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999998692960651	WITHOUT_CLASSIFICATION	1.3070393487357767E-7	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999998447999897	WITHOUT_CLASSIFICATION	1.5520001028528416E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999995898402312	WITHOUT_CLASSIFICATION	4.1015976889315375E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999508164583	WITHOUT_CLASSIFICATION	4.918354164952497E-8	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999881158651811	WITHOUT_CLASSIFICATION	1.1884134818874443E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999822395551	WITHOUT_CLASSIFICATION	1.7760444847518553E-8	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998049483048	WITHOUT_CLASSIFICATION	1.9505169523168916E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992391571745	WITHOUT_CLASSIFICATION	7.608428254807034E-7	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999994934280341	WITHOUT_CLASSIFICATION	5.065719659013113E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999982548773176	WITHOUT_CLASSIFICATION	1.7451226823226934E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998207639222	WITHOUT_CLASSIFICATION	1.792360776551419E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999937265154	WITHOUT_CLASSIFICATION	6.273484639267037E-9	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999971414801658	WITHOUT_CLASSIFICATION	2.858519834177466E-6	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999971414801658	WITHOUT_CLASSIFICATION	2.858519834177466E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996348300627	WITHOUT_CLASSIFICATION	3.651699373294832E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999465307	WITHOUT_CLASSIFICATION	5.346923794345801E-11	TEST
package	WITHOUT_CLASSIFICATION	0.999993361153528	WITHOUT_CLASSIFICATION	6.638846472055832E-6	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999714797799	WITHOUT_CLASSIFICATION	2.852022006714876E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999999862380471	WITHOUT_CLASSIFICATION	1.3761952911687403E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999928200691	WITHOUT_CLASSIFICATION	7.179930876975848E-9	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997031137161	WITHOUT_CLASSIFICATION	2.9688628388915285E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999979462262	WITHOUT_CLASSIFICATION	2.0537737970941803E-9	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997115849593	WITHOUT_CLASSIFICATION	2.8841504073486487E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999986931828797	WITHOUT_CLASSIFICATION	1.3068171202489184E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967698399819	WITHOUT_CLASSIFICATION	3.2301600180839363E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999938064700826	WITHOUT_CLASSIFICATION	6.1935299173285625E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999560480027	WITHOUT_CLASSIFICATION	4.395199728965817E-8	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999447906914	WITHOUT_CLASSIFICATION	5.520930849349576E-8	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999999824306388	WITHOUT_CLASSIFICATION	1.756936120685912E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999765659965	WITHOUT_CLASSIFICATION	2.3434003492454034E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999875355101	WITHOUT_CLASSIFICATION	1.2464489892446469E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999995622036834	WITHOUT_CLASSIFICATION	4.377963165937947E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999988109178393	WITHOUT_CLASSIFICATION	1.1890821606656807E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999995024483365	WITHOUT_CLASSIFICATION	4.975516635744642E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999991072646914	WITHOUT_CLASSIFICATION	8.927353086742681E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997510526024	WITHOUT_CLASSIFICATION	2.4894739763409855E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999931536855357	WITHOUT_CLASSIFICATION	6.846314464323596E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999981210392033	WITHOUT_CLASSIFICATION	1.8789607967575922E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999677383709	WITHOUT_CLASSIFICATION	3.22616292259476E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999677383709	WITHOUT_CLASSIFICATION	3.22616292259476E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970234503118	WITHOUT_CLASSIFICATION	2.976549688130271E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999617249025	WITHOUT_CLASSIFICATION	3.827509749749832E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999739364233	WITHOUT_CLASSIFICATION	2.6063576758709223E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999997684845	WITHOUT_CLASSIFICATION	2.3151550339142353E-9	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999995079556738	WITHOUT_CLASSIFICATION	4.920443261866102E-7	TEST
