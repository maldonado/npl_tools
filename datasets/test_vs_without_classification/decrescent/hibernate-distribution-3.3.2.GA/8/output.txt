//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992938950649453	WITHOUT_CLASSIFICATION	7.061049350547146E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999861713510344	WITHOUT_CLASSIFICATION	1.3828648965520271E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999465788623	WITHOUT_CLASSIFICATION	5.3421137880099307E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999995230250079	WITHOUT_CLASSIFICATION	4.769749920605891E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998956559123	WITHOUT_CLASSIFICATION	1.0434408769192701E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998956559123	WITHOUT_CLASSIFICATION	1.0434408769192701E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999208709327	WITHOUT_CLASSIFICATION	7.912906727823739E-8	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998296955915	WITHOUT_CLASSIFICATION	1.703044083952821E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999978023073494	WITHOUT_CLASSIFICATION	2.197692650737613E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.99999997107851	WITHOUT_CLASSIFICATION	2.892148992596894E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999997534102057	WITHOUT_CLASSIFICATION	2.4658979418274384E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999997534102057	WITHOUT_CLASSIFICATION	2.4658979418274384E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.999998595349223	WITHOUT_CLASSIFICATION	1.4046507770943304E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999760687661	WITHOUT_CLASSIFICATION	2.3931233772184976E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999722175166	WITHOUT_CLASSIFICATION	2.7782483438588878E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999967085522843	WITHOUT_CLASSIFICATION	3.2914477156939295E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999433277718	WITHOUT_CLASSIFICATION	5.667222822295955E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999984509044043	WITHOUT_CLASSIFICATION	1.5490955957676722E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999962833044719	WITHOUT_CLASSIFICATION	3.7166955282347524E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999958333587257	WITHOUT_CLASSIFICATION	4.166641274384197E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999956521366822	WITHOUT_CLASSIFICATION	4.347863317868717E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997690783228861	WITHOUT_CLASSIFICATION	2.3092167711379728E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999983558018111	WITHOUT_CLASSIFICATION	1.6441981889473456E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999983267585467	WITHOUT_CLASSIFICATION	1.673241453180109E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999623314697	WITHOUT_CLASSIFICATION	3.766853029897428E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972390092634	WITHOUT_CLASSIFICATION	2.7609907365761694E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972390092634	WITHOUT_CLASSIFICATION	2.7609907365761694E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999254384745	WITHOUT_CLASSIFICATION	7.456152554576585E-8	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999960616747687	WITHOUT_CLASSIFICATION	3.938325231326968E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999703875232	WITHOUT_CLASSIFICATION	2.9612476838486825E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999807019684	WITHOUT_CLASSIFICATION	1.929803164657866E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999992517140331	WITHOUT_CLASSIFICATION	7.482859668514025E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.8889526890809368	TEST	0.11104731091906316	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.8889526890809368	TEST	0.11104731091906316	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998340314833	WITHOUT_CLASSIFICATION	1.6596851670100856E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999947656063001	WITHOUT_CLASSIFICATION	5.234393699981491E-6	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999807232532	WITHOUT_CLASSIFICATION	1.9276746718563906E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993884066978	WITHOUT_CLASSIFICATION	6.115933023045272E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999999646366203	WITHOUT_CLASSIFICATION	3.5363379652463665E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984089057216	WITHOUT_CLASSIFICATION	1.5910942784307348E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988781391178	WITHOUT_CLASSIFICATION	1.1218608821794676E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999663315364	WITHOUT_CLASSIFICATION	3.366846360051828E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999937041992255	WITHOUT_CLASSIFICATION	6.295800774460359E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999611706367	WITHOUT_CLASSIFICATION	3.8829363307332613E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995096182847	WITHOUT_CLASSIFICATION	4.903817154266741E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999937041992255	WITHOUT_CLASSIFICATION	6.295800774460359E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995096182847	WITHOUT_CLASSIFICATION	4.903817154266741E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999512851681	WITHOUT_CLASSIFICATION	4.87148318981426E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9966656935253007	WITHOUT_CLASSIFICATION	0.003334306474699201	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993145931022	WITHOUT_CLASSIFICATION	6.854068978906188E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993210976024	WITHOUT_CLASSIFICATION	6.789023976346159E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999974191222052	WITHOUT_CLASSIFICATION	2.580877794806605E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999578751145866	WITHOUT_CLASSIFICATION	4.212488541340862E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999292656782456	WITHOUT_CLASSIFICATION	7.073432175443827E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999994355990756	WITHOUT_CLASSIFICATION	5.644009244767571E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999996420882807	WITHOUT_CLASSIFICATION	3.5791171932801335E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999956525116399	WITHOUT_CLASSIFICATION	4.347488360069828E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994151565272	WITHOUT_CLASSIFICATION	5.848434727538311E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999999504133015	WITHOUT_CLASSIFICATION	4.958669863047511E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999521233367	WITHOUT_CLASSIFICATION	4.787666328837434E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999505558311	WITHOUT_CLASSIFICATION	4.94441688936687E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999824375032	WITHOUT_CLASSIFICATION	1.756249676529012E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999960605545933	WITHOUT_CLASSIFICATION	3.9394454066644276E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999869834265	WITHOUT_CLASSIFICATION	1.3016573571213822E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999722224477	WITHOUT_CLASSIFICATION	2.777755228299966E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998334088798	WITHOUT_CLASSIFICATION	1.6659112021730919E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999891641345	WITHOUT_CLASSIFICATION	1.0835865500785745E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995016219754	WITHOUT_CLASSIFICATION	4.983780247024571E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999530303111	WITHOUT_CLASSIFICATION	4.696968893156099E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999990776712	WITHOUT_CLASSIFICATION	9.22328804914216E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977030706945	WITHOUT_CLASSIFICATION	2.2969293055838804E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999967942582353	WITHOUT_CLASSIFICATION	3.205741764669348E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999980526763	WITHOUT_CLASSIFICATION	1.9473236960934766E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999956588264	WITHOUT_CLASSIFICATION	4.34117361980535E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999992938196846	WITHOUT_CLASSIFICATION	7.061803154955095E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999967812031124	WITHOUT_CLASSIFICATION	3.2187968876164048E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.99999847283159	WITHOUT_CLASSIFICATION	1.5271684099768524E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999993951250158	WITHOUT_CLASSIFICATION	6.048749842286339E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999876970286	WITHOUT_CLASSIFICATION	1.2302971458407313E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998940460969	WITHOUT_CLASSIFICATION	1.0595390306339822E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999943279628	WITHOUT_CLASSIFICATION	5.672037189210664E-9	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999319581062	WITHOUT_CLASSIFICATION	6.804189384684E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998686062324	WITHOUT_CLASSIFICATION	1.3139376758169466E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999943279628	WITHOUT_CLASSIFICATION	5.672037189210664E-9	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999441349399	WITHOUT_CLASSIFICATION	5.586506021033848E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999642635168	WITHOUT_CLASSIFICATION	3.573648321263612E-8	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999997856028138	WITHOUT_CLASSIFICATION	2.1439718623151583E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999123715306	WITHOUT_CLASSIFICATION	8.762846947135878E-8	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999493966705	WITHOUT_CLASSIFICATION	5.060332958095128E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999995270098	WITHOUT_CLASSIFICATION	4.729902045407872E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999995270098	WITHOUT_CLASSIFICATION	4.729902045407872E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999995761631124	WITHOUT_CLASSIFICATION	4.238368876356124E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999995254594962	WITHOUT_CLASSIFICATION	4.7454050379511315E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999963303559615	WITHOUT_CLASSIFICATION	3.6696440385369675E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999693748796	WITHOUT_CLASSIFICATION	3.062512043768318E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999483522208	WITHOUT_CLASSIFICATION	5.1647779136989745E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999684390107	WITHOUT_CLASSIFICATION	3.156098927338649E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999133269716	WITHOUT_CLASSIFICATION	8.667302848652551E-8	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999912486176	WITHOUT_CLASSIFICATION	8.751382374155441E-9	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999887634773	WITHOUT_CLASSIFICATION	1.1236522702449598E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999647822572	WITHOUT_CLASSIFICATION	3.5217742817677414E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999596405224	WITHOUT_CLASSIFICATION	4.0359477507460126E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999596405224	WITHOUT_CLASSIFICATION	4.0359477507460126E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999769589201	WITHOUT_CLASSIFICATION	2.3041079961146963E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999437403649	WITHOUT_CLASSIFICATION	5.625963514600917E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999993832464918	WITHOUT_CLASSIFICATION	6.167535080208856E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999596405224	WITHOUT_CLASSIFICATION	4.0359477507460126E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999769589201	WITHOUT_CLASSIFICATION	2.3041079961146963E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999769589201	WITHOUT_CLASSIFICATION	2.3041079961146963E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999939330668821	WITHOUT_CLASSIFICATION	6.0669331178064805E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999997673896006	WITHOUT_CLASSIFICATION	2.3261039929832184E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999529659561	WITHOUT_CLASSIFICATION	4.703404378950676E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999993717582113	WITHOUT_CLASSIFICATION	6.282417887557888E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999992713094084	WITHOUT_CLASSIFICATION	7.286905916414034E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999992713094084	WITHOUT_CLASSIFICATION	7.286905916414034E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999993336823229	WITHOUT_CLASSIFICATION	6.663176771587913E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999991112161956	WITHOUT_CLASSIFICATION	8.887838044273757E-7	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.999999693124856	WITHOUT_CLASSIFICATION	3.0687514403628617E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999584854633	WITHOUT_CLASSIFICATION	4.1514536754694215E-8	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999584854633	WITHOUT_CLASSIFICATION	4.1514536754694215E-8	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999993299337764	WITHOUT_CLASSIFICATION	6.700662236901623E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999976827994245	WITHOUT_CLASSIFICATION	2.3172005755004263E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999776066934187	WITHOUT_CLASSIFICATION	2.239330658135937E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998614939022	WITHOUT_CLASSIFICATION	1.3850609783920222E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999999391882872	WITHOUT_CLASSIFICATION	6.081171279878834E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999989378364033	WITHOUT_CLASSIFICATION	1.0621635968441095E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999981064244793	WITHOUT_CLASSIFICATION	1.893575520654218E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999996974288324	WITHOUT_CLASSIFICATION	3.025711676225508E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999952421150604	WITHOUT_CLASSIFICATION	4.7578849396445916E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999776066934187	WITHOUT_CLASSIFICATION	2.239330658135937E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999902319785963	WITHOUT_CLASSIFICATION	9.768021403816935E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999981006493702	WITHOUT_CLASSIFICATION	1.8993506297366435E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999981006493702	WITHOUT_CLASSIFICATION	1.8993506297366435E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998908529631	WITHOUT_CLASSIFICATION	1.091470368658644E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999879132002906	WITHOUT_CLASSIFICATION	1.2086799709435513E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996264963121	WITHOUT_CLASSIFICATION	3.735036878919442E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999925024339962	WITHOUT_CLASSIFICATION	7.497566003948062E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999974338295408	WITHOUT_CLASSIFICATION	2.5661704591354022E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999921065994857	WITHOUT_CLASSIFICATION	7.893400514329603E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999999425966285	WITHOUT_CLASSIFICATION	5.740337158077984E-8	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999885778812	WITHOUT_CLASSIFICATION	1.1422118778148813E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999920287436	WITHOUT_CLASSIFICATION	7.971256374809323E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999920287436	WITHOUT_CLASSIFICATION	7.971256374809323E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992938950649453	WITHOUT_CLASSIFICATION	7.061049350547146E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999998065999887	WITHOUT_CLASSIFICATION	1.9340001132907467E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998881312891	WITHOUT_CLASSIFICATION	1.1186871079804304E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999996437941278	WITHOUT_CLASSIFICATION	3.562058723304404E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999996608823206	WITHOUT_CLASSIFICATION	3.3911767942759195E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999988064020555	WITHOUT_CLASSIFICATION	1.1935979444427313E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999998131081008	WITHOUT_CLASSIFICATION	1.8689189923434165E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999997676405225	WITHOUT_CLASSIFICATION	2.323594776347606E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999985628873233	WITHOUT_CLASSIFICATION	1.4371126767762007E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999989693562341	WITHOUT_CLASSIFICATION	1.0306437658741689E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999455032939	WITHOUT_CLASSIFICATION	5.449670610720714E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999465788623	WITHOUT_CLASSIFICATION	5.3421137880099307E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999888917016	WITHOUT_CLASSIFICATION	1.1108298401372782E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999888917016	WITHOUT_CLASSIFICATION	1.1108298401372782E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995884607528	WITHOUT_CLASSIFICATION	4.1153924725212525E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999956500935792	WITHOUT_CLASSIFICATION	4.349906420829125E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999709193915	WITHOUT_CLASSIFICATION	2.9080608537252618E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999956762363056	WITHOUT_CLASSIFICATION	4.323763694409182E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999999734285127	WITHOUT_CLASSIFICATION	2.657148729778509E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999591130568	WITHOUT_CLASSIFICATION	4.088694319321495E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998956559123	WITHOUT_CLASSIFICATION	1.0434408769192701E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997235835261	WITHOUT_CLASSIFICATION	2.764164739223336E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996028114249	WITHOUT_CLASSIFICATION	3.9718857513327327E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997834109635	WITHOUT_CLASSIFICATION	2.1658903652933525E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999997892639972	WITHOUT_CLASSIFICATION	2.107360027984467E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999997741972576	WITHOUT_CLASSIFICATION	2.2580274232540848E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999993243894423	WITHOUT_CLASSIFICATION	6.756105576895801E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999997165820077	WITHOUT_CLASSIFICATION	2.834179923152962E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999210128689	WITHOUT_CLASSIFICATION	7.898713107805302E-8	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999778908056	WITHOUT_CLASSIFICATION	2.210919441673955E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999999019455695	WITHOUT_CLASSIFICATION	9.805443055454934E-8	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998080163538	WITHOUT_CLASSIFICATION	1.9198364609268483E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999320873716	WITHOUT_CLASSIFICATION	6.791262845102304E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995137915646	WITHOUT_CLASSIFICATION	4.862084354667255E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999989693562341	WITHOUT_CLASSIFICATION	1.0306437658741689E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999999888917016	WITHOUT_CLASSIFICATION	1.1108298401372782E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999997165820077	WITHOUT_CLASSIFICATION	2.834179923152962E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999208709327	WITHOUT_CLASSIFICATION	7.912906727823739E-8	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998915158941	WITHOUT_CLASSIFICATION	1.0848410600048352E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999999552515787	WITHOUT_CLASSIFICATION	4.474842130080514E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999249863449	WITHOUT_CLASSIFICATION	7.501365508300084E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.99999749256174	WITHOUT_CLASSIFICATION	2.507438259954436E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997738540702	WITHOUT_CLASSIFICATION	2.2614592986016715E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.999999361096343	WITHOUT_CLASSIFICATION	6.389036568919574E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999604930974	WITHOUT_CLASSIFICATION	3.950690263067957E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999858772725905	WITHOUT_CLASSIFICATION	1.412272740958218E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999961902596255	WITHOUT_CLASSIFICATION	3.809740374499507E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999949528825002	WITHOUT_CLASSIFICATION	5.047117499785775E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999949528825002	WITHOUT_CLASSIFICATION	5.047117499785775E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998441311914	WITHOUT_CLASSIFICATION	1.558688085987931E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999811756136	WITHOUT_CLASSIFICATION	1.8824386383786593E-8	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999959471518839	WITHOUT_CLASSIFICATION	4.052848116096204E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999996904822749	WITHOUT_CLASSIFICATION	3.0951772502125485E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998980167508	WITHOUT_CLASSIFICATION	1.0198324918012686E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999698580331	WITHOUT_CLASSIFICATION	3.0141966885045253E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999989004195012	WITHOUT_CLASSIFICATION	1.0995804987319047E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998296955915	WITHOUT_CLASSIFICATION	1.703044083952821E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999997847697163	WITHOUT_CLASSIFICATION	2.1523028375521185E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999805565482	WITHOUT_CLASSIFICATION	1.9443451780823034E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999805565482	WITHOUT_CLASSIFICATION	1.9443451780823034E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998171375092	WITHOUT_CLASSIFICATION	1.828624908591677E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999992608732645	WITHOUT_CLASSIFICATION	7.391267354051218E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999881311325	WITHOUT_CLASSIFICATION	1.1868867492030701E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999622266618	WITHOUT_CLASSIFICATION	3.7773338310310545E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999994920010661	WITHOUT_CLASSIFICATION	5.079989339346531E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999509395606	WITHOUT_CLASSIFICATION	4.906043931888305E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999989693562341	WITHOUT_CLASSIFICATION	1.0306437658741689E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999465788623	WITHOUT_CLASSIFICATION	5.3421137880099307E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999997165820077	WITHOUT_CLASSIFICATION	2.834179923152962E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999997165820077	WITHOUT_CLASSIFICATION	2.834179923152962E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999822831132	WITHOUT_CLASSIFICATION	1.7716886806467365E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999822831132	WITHOUT_CLASSIFICATION	1.7716886806467365E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999998734900174	WITHOUT_CLASSIFICATION	1.26509982708993E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999994566746828	WITHOUT_CLASSIFICATION	5.433253171352216E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999994566746828	WITHOUT_CLASSIFICATION	5.433253171352216E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999995659240689	WITHOUT_CLASSIFICATION	4.3407593110829617E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999999708788403	WITHOUT_CLASSIFICATION	2.91211597023751E-8	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999990218350916	WITHOUT_CLASSIFICATION	9.781649084164594E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999977323475261	WITHOUT_CLASSIFICATION	2.2676524738790035E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999511692675	WITHOUT_CLASSIFICATION	4.8830732442088316E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.99999997107851	WITHOUT_CLASSIFICATION	2.892148992596894E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.99999997107851	WITHOUT_CLASSIFICATION	2.892148992596894E-8	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999996760019662	WITHOUT_CLASSIFICATION	3.239980338454652E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999999588809219	WITHOUT_CLASSIFICATION	4.111907814770879E-8	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999995073571765	WITHOUT_CLASSIFICATION	4.926428235680556E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999989389301611	WITHOUT_CLASSIFICATION	1.061069838822875E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999996036440395	WITHOUT_CLASSIFICATION	3.9635596047398777E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999975316146661	WITHOUT_CLASSIFICATION	2.4683853337824607E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999997534102057	WITHOUT_CLASSIFICATION	2.4658979418274384E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992616836055	WITHOUT_CLASSIFICATION	7.383163944431775E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992616836055	WITHOUT_CLASSIFICATION	7.383163944431775E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.999998595349223	WITHOUT_CLASSIFICATION	1.4046507770943304E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.999998595349223	WITHOUT_CLASSIFICATION	1.4046507770943304E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997585117518	WITHOUT_CLASSIFICATION	2.4148824820362426E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997585117518	WITHOUT_CLASSIFICATION	2.4148824820362426E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998555888503	WITHOUT_CLASSIFICATION	1.4441114970600473E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998555888503	WITHOUT_CLASSIFICATION	1.4441114970600473E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.99999997107851	WITHOUT_CLASSIFICATION	2.892148992596894E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999997534102057	WITHOUT_CLASSIFICATION	2.4658979418274384E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992616836055	WITHOUT_CLASSIFICATION	7.383163944431775E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992616836055	WITHOUT_CLASSIFICATION	7.383163944431775E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.999998595349223	WITHOUT_CLASSIFICATION	1.4046507770943304E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997585117518	WITHOUT_CLASSIFICATION	2.4148824820362426E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997585117518	WITHOUT_CLASSIFICATION	2.4148824820362426E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998555888503	WITHOUT_CLASSIFICATION	1.4441114970600473E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999999911298684	WITHOUT_CLASSIFICATION	8.870131598895355E-8	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999989857103442	WITHOUT_CLASSIFICATION	1.0142896558655942E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999983558695081	WITHOUT_CLASSIFICATION	1.6441304918441097E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999984319676651	WITHOUT_CLASSIFICATION	1.568032334912162E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.999997981911297	WITHOUT_CLASSIFICATION	2.018088703087582E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999991968397621	WITHOUT_CLASSIFICATION	8.031602377908778E-7	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999997522202855	WITHOUT_CLASSIFICATION	2.4777971453585446E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999993040879596	WITHOUT_CLASSIFICATION	6.959120405350304E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999987385258199	WITHOUT_CLASSIFICATION	1.2614741801322306E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996881188713	WITHOUT_CLASSIFICATION	3.1188112863724E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999182589108	WITHOUT_CLASSIFICATION	8.174108926734644E-8	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998308474412	WITHOUT_CLASSIFICATION	1.6915255890002268E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999995761631124	WITHOUT_CLASSIFICATION	4.238368876356124E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999991968397621	WITHOUT_CLASSIFICATION	8.031602377908778E-7	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999819616919805	WITHOUT_CLASSIFICATION	1.8038308019515268E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999819616919805	WITHOUT_CLASSIFICATION	1.8038308019515268E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999996710960192	WITHOUT_CLASSIFICATION	3.2890398087774157E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998154086549	WITHOUT_CLASSIFICATION	1.8459134517290488E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998154086549	WITHOUT_CLASSIFICATION	1.8459134517290488E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999993869342487	WITHOUT_CLASSIFICATION	6.130657513929257E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999980286705399	WITHOUT_CLASSIFICATION	1.971329460108123E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999994950598284	WITHOUT_CLASSIFICATION	5.049401714810309E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999650204473	WITHOUT_CLASSIFICATION	3.4979552754254916E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999650204473	WITHOUT_CLASSIFICATION	3.4979552754254916E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999433277718	WITHOUT_CLASSIFICATION	5.667222822295955E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999847507179	WITHOUT_CLASSIFICATION	1.5249282130660156E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999847507179	WITHOUT_CLASSIFICATION	1.5249282130660156E-8	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999961763055902	WITHOUT_CLASSIFICATION	3.823694409683701E-6	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999998000025633	WITHOUT_CLASSIFICATION	1.9999743674394862E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999087813675	WITHOUT_CLASSIFICATION	9.121863264332914E-8	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999947876665929	WITHOUT_CLASSIFICATION	5.212333407081913E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999976083094566	WITHOUT_CLASSIFICATION	2.3916905432908965E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999982575822499	WITHOUT_CLASSIFICATION	1.742417750043081E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999984509044043	WITHOUT_CLASSIFICATION	1.5490955957676722E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999982155368083	WITHOUT_CLASSIFICATION	1.784463191708429E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9986174146258125	WITHOUT_CLASSIFICATION	0.0013825853741873879	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999957624058101	WITHOUT_CLASSIFICATION	4.237594189931952E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999917446538434	WITHOUT_CLASSIFICATION	8.255346156604404E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999956521366822	WITHOUT_CLASSIFICATION	4.347863317868717E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999518466575	WITHOUT_CLASSIFICATION	4.815334241335712E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999651893826711	WITHOUT_CLASSIFICATION	3.4810617328786364E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999879625488599	WITHOUT_CLASSIFICATION	1.2037451140117399E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999956521366822	WITHOUT_CLASSIFICATION	4.347863317868717E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999952005081	WITHOUT_CLASSIFICATION	4.799491893039866E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999933227718	WITHOUT_CLASSIFICATION	6.677228249277702E-9	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999985197922643	WITHOUT_CLASSIFICATION	1.480207735692358E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999963124519133	WITHOUT_CLASSIFICATION	3.687548086748145E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999991976524287	WITHOUT_CLASSIFICATION	8.023475713702074E-7	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999973044262335	WITHOUT_CLASSIFICATION	2.6955737665562194E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999900501036368	WITHOUT_CLASSIFICATION	9.949896363189605E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999983267585467	WITHOUT_CLASSIFICATION	1.673241453180109E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975213860703	WITHOUT_CLASSIFICATION	2.4786139297160235E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999623314697	WITHOUT_CLASSIFICATION	3.766853029897428E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996874529088	WITHOUT_CLASSIFICATION	3.1254709130657893E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999785247337	WITHOUT_CLASSIFICATION	2.1475266302185817E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999977177278975	WITHOUT_CLASSIFICATION	2.282272102441169E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999984509044043	WITHOUT_CLASSIFICATION	1.5490955957676722E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975213860703	WITHOUT_CLASSIFICATION	2.4786139297160235E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996874529088	WITHOUT_CLASSIFICATION	3.1254709130657893E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999977177278975	WITHOUT_CLASSIFICATION	2.282272102441169E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999828603517	WITHOUT_CLASSIFICATION	1.7139648281843497E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999947723769164	WITHOUT_CLASSIFICATION	5.2276230836679496E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999960993318	WITHOUT_CLASSIFICATION	3.900668146145507E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972390092634	WITHOUT_CLASSIFICATION	2.7609907365761694E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999997907674719	WITHOUT_CLASSIFICATION	2.0923252810194318E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999508188026	WITHOUT_CLASSIFICATION	4.918119750698693E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999975318507576	WITHOUT_CLASSIFICATION	2.4681492425559537E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993174281393	WITHOUT_CLASSIFICATION	6.825718606553418E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999989142487471	WITHOUT_CLASSIFICATION	1.0857512529141118E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999708499429	WITHOUT_CLASSIFICATION	2.9150057127385104E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984641591214	WITHOUT_CLASSIFICATION	1.5358408785678323E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999995594697977	WITHOUT_CLASSIFICATION	4.4053020238116565E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999994156402	WITHOUT_CLASSIFICATION	5.8435980438273576E-9	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992208411529	WITHOUT_CLASSIFICATION	7.79158847191671E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999971211367872	WITHOUT_CLASSIFICATION	2.8788632128711218E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999987402079406	WITHOUT_CLASSIFICATION	1.259792059526415E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999960616747687	WITHOUT_CLASSIFICATION	3.938325231326968E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999940629130701	WITHOUT_CLASSIFICATION	5.937086929870189E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999974951227212	WITHOUT_CLASSIFICATION	2.5048772787636403E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975213860703	WITHOUT_CLASSIFICATION	2.4786139297160235E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998538557264	WITHOUT_CLASSIFICATION	1.461442735721012E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999217417819	WITHOUT_CLASSIFICATION	7.825821813248928E-8	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999682017989	WITHOUT_CLASSIFICATION	3.17982010328458E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.998247014431932	WITHOUT_CLASSIFICATION	0.0017529855680680948	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999993082161948	WITHOUT_CLASSIFICATION	6.917838052405181E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999999569593206	WITHOUT_CLASSIFICATION	4.304067939413136E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999999310318	WITHOUT_CLASSIFICATION	6.896819418361061E-10	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999880545921	WITHOUT_CLASSIFICATION	1.1945407867159877E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999986941440505	WITHOUT_CLASSIFICATION	1.3058559494501377E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999968951645207	WITHOUT_CLASSIFICATION	3.1048354791960174E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999984780346713	WITHOUT_CLASSIFICATION	1.521965328686728E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999965643782289	WITHOUT_CLASSIFICATION	3.4356217711917916E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999519066399	WITHOUT_CLASSIFICATION	4.8093359959627255E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999807019684	WITHOUT_CLASSIFICATION	1.929803164657866E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999829204453	WITHOUT_CLASSIFICATION	1.7079554640815072E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999817766801	WITHOUT_CLASSIFICATION	1.8223319793793594E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999988064328836	WITHOUT_CLASSIFICATION	1.1935671164211063E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999999275384471	WITHOUT_CLASSIFICATION	7.246155291057032E-8	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999565072957	WITHOUT_CLASSIFICATION	4.3492704272568184E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999996336074567	WITHOUT_CLASSIFICATION	3.663925432244831E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999689818473	WITHOUT_CLASSIFICATION	3.101815266573625E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999997067367679	WITHOUT_CLASSIFICATION	2.9326323206069377E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999009897126	WITHOUT_CLASSIFICATION	9.901028739256545E-8	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999963556095797	WITHOUT_CLASSIFICATION	3.644390420316375E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999993198801365	WITHOUT_CLASSIFICATION	6.801198635953982E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999993198801365	WITHOUT_CLASSIFICATION	6.801198635953982E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999917115778251	WITHOUT_CLASSIFICATION	8.288422174942057E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999789193079	WITHOUT_CLASSIFICATION	2.1080692023233988E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999098323048	WITHOUT_CLASSIFICATION	9.016769512230042E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999999909958516	WITHOUT_CLASSIFICATION	9.004148406838257E-8	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999992446304583	WITHOUT_CLASSIFICATION	7.553695416107385E-7	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997437575305	WITHOUT_CLASSIFICATION	2.5624246954076593E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999424330807	WITHOUT_CLASSIFICATION	5.7566919345926E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999920684877818	WITHOUT_CLASSIFICATION	7.93151221819316E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999996659983771	WITHOUT_CLASSIFICATION	3.3400162290260663E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999998998767638	WITHOUT_CLASSIFICATION	1.001232361953573E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.999998709895675	WITHOUT_CLASSIFICATION	1.2901043250555241E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998630580907	WITHOUT_CLASSIFICATION	1.3694190925780363E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999991982765289	WITHOUT_CLASSIFICATION	8.017234711434589E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999998970734891	WITHOUT_CLASSIFICATION	1.0292651079569178E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999028946871	WITHOUT_CLASSIFICATION	9.710531288677898E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999306769	WITHOUT_CLASSIFICATION	6.932310010411598E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999999840734053	WITHOUT_CLASSIFICATION	1.5926594698024162E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998789914385	WITHOUT_CLASSIFICATION	1.2100856157296423E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998199292894	WITHOUT_CLASSIFICATION	1.8007071055045006E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999995177344194	WITHOUT_CLASSIFICATION	4.822655806285157E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995842750043	WITHOUT_CLASSIFICATION	4.1572499559642484E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995842750043	WITHOUT_CLASSIFICATION	4.1572499559642484E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999981135352038	WITHOUT_CLASSIFICATION	1.8864647961623155E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999981135352038	WITHOUT_CLASSIFICATION	1.8864647961623155E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999009897126	WITHOUT_CLASSIFICATION	9.901028739256545E-8	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999995596699431	WITHOUT_CLASSIFICATION	4.40330056968496E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999881713442837	WITHOUT_CLASSIFICATION	1.18286557161792E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999955281608478	WITHOUT_CLASSIFICATION	4.471839152122571E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999881713442837	WITHOUT_CLASSIFICATION	1.18286557161792E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999955281608478	WITHOUT_CLASSIFICATION	4.471839152122571E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999984547759082	WITHOUT_CLASSIFICATION	1.545224091752301E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999854774468919	WITHOUT_CLASSIFICATION	1.4522553108022226E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999884902837	WITHOUT_CLASSIFICATION	1.1509716196779449E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999997207105976	WITHOUT_CLASSIFICATION	2.7928940240730406E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999986503788281	WITHOUT_CLASSIFICATION	1.3496211718993845E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999992942607239	WITHOUT_CLASSIFICATION	7.057392760961427E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999960657987	WITHOUT_CLASSIFICATION	3.9342012994381045E-8	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995517283933	WITHOUT_CLASSIFICATION	4.4827160677744975E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999974673265883	WITHOUT_CLASSIFICATION	2.5326734117249955E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999559496722	WITHOUT_CLASSIFICATION	4.405032782390432E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999997058907821	WITHOUT_CLASSIFICATION	2.9410921780528057E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999991029912	WITHOUT_CLASSIFICATION	8.97008908984333E-10	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997042767023	WITHOUT_CLASSIFICATION	2.957232977608479E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999870634216835	WITHOUT_CLASSIFICATION	1.2936578316512815E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999893126232738	WITHOUT_CLASSIFICATION	1.0687376726266256E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998994476668166	WITHOUT_CLASSIFICATION	1.0055233318336358E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998994476668166	WITHOUT_CLASSIFICATION	1.0055233318336358E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999903909993	WITHOUT_CLASSIFICATION	9.609000766709275E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999984547759082	WITHOUT_CLASSIFICATION	1.545224091752301E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999999639737796	WITHOUT_CLASSIFICATION	3.6026220395882745E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999909091992065	WITHOUT_CLASSIFICATION	9.090800793480822E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999998549025296	WITHOUT_CLASSIFICATION	1.4509747034869075E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999408155997	WITHOUT_CLASSIFICATION	5.918440029908325E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999914606594563	WITHOUT_CLASSIFICATION	8.539340543703385E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999984547759082	WITHOUT_CLASSIFICATION	1.545224091752301E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999408155997	WITHOUT_CLASSIFICATION	5.918440029908325E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999914606594563	WITHOUT_CLASSIFICATION	8.539340543703385E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999847882632817	WITHOUT_CLASSIFICATION	1.5211736718281368E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999983258248102	WITHOUT_CLASSIFICATION	1.6741751898325405E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999344913592	WITHOUT_CLASSIFICATION	6.550864085037128E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999984547759082	WITHOUT_CLASSIFICATION	1.545224091752301E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999984547759082	WITHOUT_CLASSIFICATION	1.545224091752301E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999995442472404	WITHOUT_CLASSIFICATION	4.5575275963505595E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999996608953136	WITHOUT_CLASSIFICATION	3.3910468645176557E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999993894567514	WITHOUT_CLASSIFICATION	6.105432486118582E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999566254822	WITHOUT_CLASSIFICATION	4.3374517827040996E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999997556946004	WITHOUT_CLASSIFICATION	2.4430539950018834E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999495255828	WITHOUT_CLASSIFICATION	5.0474417303899794E-8	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999988103415284	WITHOUT_CLASSIFICATION	1.1896584716290076E-6	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999420400709	WITHOUT_CLASSIFICATION	5.795992901020247E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999848508813	WITHOUT_CLASSIFICATION	1.5149118674872684E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999989392952553	WITHOUT_CLASSIFICATION	1.0607047447416122E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999506917892	WITHOUT_CLASSIFICATION	4.930821097029016E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999998426840315	WITHOUT_CLASSIFICATION	1.5731596856951273E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998855941167	WITHOUT_CLASSIFICATION	1.1440588337724743E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999998399026732	WITHOUT_CLASSIFICATION	1.60097326839245E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219134237	WITHOUT_CLASSIFICATION	7.808657634033768E-8	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999984672226654	WITHOUT_CLASSIFICATION	1.5327773346055353E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993884066978	WITHOUT_CLASSIFICATION	6.115933023045272E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999799664441391	WITHOUT_CLASSIFICATION	2.003355586099168E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999944614688622	WITHOUT_CLASSIFICATION	5.53853113787326E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997898460593	WITHOUT_CLASSIFICATION	2.101539407438191E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999958443493168	WITHOUT_CLASSIFICATION	4.15565068317617E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999923032147455	WITHOUT_CLASSIFICATION	7.696785254547771E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999923032147455	WITHOUT_CLASSIFICATION	7.696785254547771E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993884066978	WITHOUT_CLASSIFICATION	6.115933023045272E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995856193819436	WITHOUT_CLASSIFICATION	4.1438061805647926E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999948441685608	WITHOUT_CLASSIFICATION	5.155831439251141E-6	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998966359840148	WITHOUT_CLASSIFICATION	1.0336401598523284E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999995895820916	WITHOUT_CLASSIFICATION	4.104179083963349E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928276779492	WITHOUT_CLASSIFICATION	7.172322050864315E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999019690659	WITHOUT_CLASSIFICATION	9.803093410348122E-8	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999259182012	WITHOUT_CLASSIFICATION	7.408179886106537E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999992935502457	WITHOUT_CLASSIFICATION	7.064497541283522E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999896027479	WITHOUT_CLASSIFICATION	1.0397252085620729E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999967872059	WITHOUT_CLASSIFICATION	3.212794100627026E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994849713446	WITHOUT_CLASSIFICATION	5.150286553935285E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999930652902274	WITHOUT_CLASSIFICATION	6.934709772715479E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999766092132857	WITHOUT_CLASSIFICATION	2.3390786714322144E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999999114147	WITHOUT_CLASSIFICATION	8.858529591674467E-10	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999948435375	WITHOUT_CLASSIFICATION	5.156462506505564E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999996693808494	WITHOUT_CLASSIFICATION	3.3061915068650725E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999985375318	WITHOUT_CLASSIFICATION	1.4624682147180226E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999996749956479	WITHOUT_CLASSIFICATION	3.250043520855692E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999820324166	WITHOUT_CLASSIFICATION	1.7967583501116952E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999901242478	WITHOUT_CLASSIFICATION	9.875752282023174E-9	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999704518218	WITHOUT_CLASSIFICATION	2.954817822158285E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999758366378	WITHOUT_CLASSIFICATION	2.416336209202978E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999298385887	WITHOUT_CLASSIFICATION	7.016141137144314E-8	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998749713448	WITHOUT_CLASSIFICATION	1.250286551982837E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997980735418	WITHOUT_CLASSIFICATION	2.0192645827603692E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997753668319	WITHOUT_CLASSIFICATION	2.246331681101783E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984030565031	WITHOUT_CLASSIFICATION	1.5969434969281752E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995149591949	WITHOUT_CLASSIFICATION	4.8504080507987E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996141464937	WITHOUT_CLASSIFICATION	3.858535062921654E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998864620523	WITHOUT_CLASSIFICATION	1.1353794774966888E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999390063649	WITHOUT_CLASSIFICATION	6.099363509134874E-8	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999974611544	WITHOUT_CLASSIFICATION	2.5388456027996668E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999834785939	WITHOUT_CLASSIFICATION	1.6521406099893093E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997779407547	WITHOUT_CLASSIFICATION	2.220592452021682E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999569798164	WITHOUT_CLASSIFICATION	4.302018361755641E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989183519712	WITHOUT_CLASSIFICATION	1.0816480288667717E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999125948555	WITHOUT_CLASSIFICATION	8.740514449364747E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998735065597	WITHOUT_CLASSIFICATION	1.2649344027818224E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999862384574	WITHOUT_CLASSIFICATION	1.376154260118356E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993042342711	WITHOUT_CLASSIFICATION	6.957657289820071E-7	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999991827021691	WITHOUT_CLASSIFICATION	8.172978308114498E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998713790712	WITHOUT_CLASSIFICATION	1.2862092878898065E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999980381031883	WITHOUT_CLASSIFICATION	1.961896811622698E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999486684954	WITHOUT_CLASSIFICATION	5.1331504659321705E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999793907405	WITHOUT_CLASSIFICATION	2.0609259501896425E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998527764243181	WITHOUT_CLASSIFICATION	1.4722357568182514E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999986002108605	WITHOUT_CLASSIFICATION	1.399789139479931E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.99999860400884	WITHOUT_CLASSIFICATION	1.3959911600830632E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999998383489012	WITHOUT_CLASSIFICATION	1.6165109880058574E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999998827966874	WITHOUT_CLASSIFICATION	1.1720331259579667E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999982309090373	WITHOUT_CLASSIFICATION	1.7690909627061986E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999948891870093	WITHOUT_CLASSIFICATION	5.110812990628207E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999935865765437	WITHOUT_CLASSIFICATION	6.413423456324296E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999988111428816	WITHOUT_CLASSIFICATION	1.1888571184813619E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999992502178959	WITHOUT_CLASSIFICATION	7.497821040411266E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999998138810634	WITHOUT_CLASSIFICATION	1.861189366095286E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997379508873	WITHOUT_CLASSIFICATION	2.6204911273558957E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999982153526918	WITHOUT_CLASSIFICATION	1.7846473081309419E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999981600931	WITHOUT_CLASSIFICATION	1.8399068756286272E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999242106504	WITHOUT_CLASSIFICATION	7.578934961294921E-8	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999176277683	WITHOUT_CLASSIFICATION	8.23722317217623E-8	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992502850371	WITHOUT_CLASSIFICATION	7.497149628911817E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997924643947	WITHOUT_CLASSIFICATION	2.0753560518788605E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999907841339242	WITHOUT_CLASSIFICATION	9.215866075745785E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999995110281	WITHOUT_CLASSIFICATION	4.889719062717823E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999569556627	WITHOUT_CLASSIFICATION	4.304433731016372E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998919063247	WITHOUT_CLASSIFICATION	1.0809367541350072E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992787573262	WITHOUT_CLASSIFICATION	7.212426737581367E-7	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999772014031	WITHOUT_CLASSIFICATION	2.279859694181958E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999980179833057	WITHOUT_CLASSIFICATION	1.9820166943744928E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999675045534	WITHOUT_CLASSIFICATION	3.249544651913173E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999988823152	WITHOUT_CLASSIFICATION	1.1176848825055816E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999914213197616	WITHOUT_CLASSIFICATION	8.57868023850545E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999483733403	WITHOUT_CLASSIFICATION	5.162665959394048E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999474767981	WITHOUT_CLASSIFICATION	5.252320187287584E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999999465700118	WITHOUT_CLASSIFICATION	5.342998819458979E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998527764243181	WITHOUT_CLASSIFICATION	1.4722357568182514E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998567566932	WITHOUT_CLASSIFICATION	1.4324330670558904E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999916567794	WITHOUT_CLASSIFICATION	8.343220521076984E-9	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999278879197	WITHOUT_CLASSIFICATION	7.211208025157756E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997849698303	WITHOUT_CLASSIFICATION	2.150301696738502E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999862255832	WITHOUT_CLASSIFICATION	1.3774416750133485E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999995389812856	WITHOUT_CLASSIFICATION	4.6101871436781704E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999428938305062	WITHOUT_CLASSIFICATION	5.7106169493800626E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998332446292	WITHOUT_CLASSIFICATION	1.6675537083685733E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999672226079	WITHOUT_CLASSIFICATION	3.2777392058210436E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999728550705	WITHOUT_CLASSIFICATION	2.7144929487532087E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999920064622	WITHOUT_CLASSIFICATION	7.993537839250045E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999853292825	WITHOUT_CLASSIFICATION	1.4670717459827074E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999695184117	WITHOUT_CLASSIFICATION	3.048158819842039E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999950495022	WITHOUT_CLASSIFICATION	4.9504977608731844E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999709958779808	WITHOUT_CLASSIFICATION	2.9004122019320458E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999998845942564	WITHOUT_CLASSIFICATION	1.1540574361719706E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.99999749542445	WITHOUT_CLASSIFICATION	2.5045755499998536E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996555524115	WITHOUT_CLASSIFICATION	3.444475884068408E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999935516388	WITHOUT_CLASSIFICATION	6.448361201197769E-8	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999989344572212	WITHOUT_CLASSIFICATION	1.0655427788730347E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999995359682	WITHOUT_CLASSIFICATION	4.64031805817904E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999986756047258	WITHOUT_CLASSIFICATION	1.3243952742555352E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999995098510612	WITHOUT_CLASSIFICATION	4.901489388152731E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998658585109	WITHOUT_CLASSIFICATION	1.3414148920914017E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.99999896531264	WITHOUT_CLASSIFICATION	1.0346873599897514E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997631000398	WITHOUT_CLASSIFICATION	2.368999602600945E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997690783228861	WITHOUT_CLASSIFICATION	2.3092167711379728E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998695151057	WITHOUT_CLASSIFICATION	1.3048489434423052E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996626159179	WITHOUT_CLASSIFICATION	3.373840821332891E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999751829015	WITHOUT_CLASSIFICATION	2.4817098564451683E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998527764243181	WITHOUT_CLASSIFICATION	1.4722357568182514E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999999770929684	WITHOUT_CLASSIFICATION	2.2907031597590205E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999777882803	WITHOUT_CLASSIFICATION	2.2211719666522537E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999287273423263	WITHOUT_CLASSIFICATION	7.127265767364248E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998527764243181	WITHOUT_CLASSIFICATION	1.4722357568182514E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996210458908	WITHOUT_CLASSIFICATION	3.7895410918670053E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999995359682	WITHOUT_CLASSIFICATION	4.64031805817904E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999975481176738	WITHOUT_CLASSIFICATION	2.4518823261865423E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9989565825079817	WITHOUT_CLASSIFICATION	0.001043417492018333	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999979610166726	WITHOUT_CLASSIFICATION	2.0389833274971517E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999728550705	WITHOUT_CLASSIFICATION	2.7144929487532087E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999920064622	WITHOUT_CLASSIFICATION	7.993537839250045E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999853292825	WITHOUT_CLASSIFICATION	1.4670717459827074E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999967962780728	WITHOUT_CLASSIFICATION	3.2037219272538523E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999997504239073	WITHOUT_CLASSIFICATION	2.4957609260371823E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999987234386065	WITHOUT_CLASSIFICATION	1.2765613934740522E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999996038769726	WITHOUT_CLASSIFICATION	3.961230273355406E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999999211027206	WITHOUT_CLASSIFICATION	7.889727939707378E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998527764243181	WITHOUT_CLASSIFICATION	1.4722357568182514E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999695184117	WITHOUT_CLASSIFICATION	3.048158819842039E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999950495022	WITHOUT_CLASSIFICATION	4.9504977608731844E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999978043028	WITHOUT_CLASSIFICATION	2.195697201545151E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999904428424	WITHOUT_CLASSIFICATION	9.557157665825703E-9	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998329848943	WITHOUT_CLASSIFICATION	1.670151057204446E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999969735868014	WITHOUT_CLASSIFICATION	3.0264131986379308E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999990996154173	WITHOUT_CLASSIFICATION	9.003845827707879E-7	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999743122905	WITHOUT_CLASSIFICATION	2.568770945097582E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993042342711	WITHOUT_CLASSIFICATION	6.957657289820071E-7	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999976965796273	WITHOUT_CLASSIFICATION	2.303420372714369E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999837707114091	WITHOUT_CLASSIFICATION	1.6229288590854332E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999988712855635	WITHOUT_CLASSIFICATION	1.1287144364710991E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999985923187	WITHOUT_CLASSIFICATION	1.4076812621316917E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999797189504	WITHOUT_CLASSIFICATION	2.028104962109061E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984030565031	WITHOUT_CLASSIFICATION	1.5969434969281752E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995149591949	WITHOUT_CLASSIFICATION	4.8504080507987E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997779407547	WITHOUT_CLASSIFICATION	2.220592452021682E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999797189504	WITHOUT_CLASSIFICATION	2.028104962109061E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999944381105	WITHOUT_CLASSIFICATION	5.561889507814281E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999620366583	WITHOUT_CLASSIFICATION	3.796334165447044E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998694640321	WITHOUT_CLASSIFICATION	1.305359678891999E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992624964551	WITHOUT_CLASSIFICATION	7.375035448456424E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998886323214	WITHOUT_CLASSIFICATION	1.1136767872417565E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999928191544595	WITHOUT_CLASSIFICATION	7.180845540608755E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999569798164	WITHOUT_CLASSIFICATION	4.302018361755641E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998735065597	WITHOUT_CLASSIFICATION	1.2649344027818224E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999988823152	WITHOUT_CLASSIFICATION	1.1176848825055816E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999997269387965	WITHOUT_CLASSIFICATION	2.73061203531304E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999823013858	WITHOUT_CLASSIFICATION	1.769861432409061E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999907294861	WITHOUT_CLASSIFICATION	9.27051398080541E-9	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999903975525505	WITHOUT_CLASSIFICATION	9.602447449619429E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999480945915	WITHOUT_CLASSIFICATION	5.190540847859183E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998581518394	WITHOUT_CLASSIFICATION	1.4184816053417652E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999974239793029	WITHOUT_CLASSIFICATION	2.576020697106927E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999896027479	WITHOUT_CLASSIFICATION	1.0397252085620729E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999748857101	WITHOUT_CLASSIFICATION	2.5114289890795452E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999860524013	WITHOUT_CLASSIFICATION	1.3947598764523914E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998333864961	WITHOUT_CLASSIFICATION	1.6661350382213993E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999990100949192	WITHOUT_CLASSIFICATION	9.89905080799075E-7	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999598717537	WITHOUT_CLASSIFICATION	4.012824626894175E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999987550414403	WITHOUT_CLASSIFICATION	1.2449585597360855E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999293514569	WITHOUT_CLASSIFICATION	7.064854313755637E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999866096419	WITHOUT_CLASSIFICATION	1.3390358089713854E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998339821885	WITHOUT_CLASSIFICATION	1.6601781160236618E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999998991468959	WITHOUT_CLASSIFICATION	1.0085310410939995E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999993334422344	WITHOUT_CLASSIFICATION	6.665577656060489E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997001909638	WITHOUT_CLASSIFICATION	2.998090361390033E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997894830803	WITHOUT_CLASSIFICATION	2.1051691961644634E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999520009556	WITHOUT_CLASSIFICATION	4.7999044533569366E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998047818623	WITHOUT_CLASSIFICATION	1.9521813768481408E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999999014444066	WITHOUT_CLASSIFICATION	9.855559342940915E-8	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996122113516	WITHOUT_CLASSIFICATION	3.877886483225986E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999934356978	WITHOUT_CLASSIFICATION	6.564302207132445E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999997188227655	WITHOUT_CLASSIFICATION	2.811772345536848E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997124681024	WITHOUT_CLASSIFICATION	2.875318975942532E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999261610361	WITHOUT_CLASSIFICATION	7.383896390905318E-8	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998778647208	WITHOUT_CLASSIFICATION	1.2213527923008206E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999989161527437	WITHOUT_CLASSIFICATION	1.0838472561926864E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999546305347	WITHOUT_CLASSIFICATION	4.536946529088488E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999999985477707	WITHOUT_CLASSIFICATION	1.4522292902563823E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999917184650242	WITHOUT_CLASSIFICATION	8.281534975792595E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998879894374821	WITHOUT_CLASSIFICATION	1.1201056251789146E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999975473146321	WITHOUT_CLASSIFICATION	2.4526853679045022E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999582286008	WITHOUT_CLASSIFICATION	4.177139925458133E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999988267502492	WITHOUT_CLASSIFICATION	1.1732497507694226E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999747851095	WITHOUT_CLASSIFICATION	2.521489052521245E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999999998175776	WITHOUT_CLASSIFICATION	1.8242240266532408E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999987017673552	WITHOUT_CLASSIFICATION	1.2982326448478187E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999867388852496	WITHOUT_CLASSIFICATION	1.3261114750421966E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999646979836	WITHOUT_CLASSIFICATION	3.53020163958874E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999879139259826	WITHOUT_CLASSIFICATION	1.2086074017315278E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998486100788	WITHOUT_CLASSIFICATION	1.513899211873973E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999992894484748	WITHOUT_CLASSIFICATION	7.105515252375792E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992047197576	WITHOUT_CLASSIFICATION	7.952802424846368E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998603951712076	WITHOUT_CLASSIFICATION	1.3960482879228547E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999654098094615	WITHOUT_CLASSIFICATION	3.4590190538540206E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999722697375	WITHOUT_CLASSIFICATION	2.773026249608019E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999976876500829	WITHOUT_CLASSIFICATION	2.3123499170908193E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999958323129	WITHOUT_CLASSIFICATION	4.1676870858141495E-9	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999994956277921	WITHOUT_CLASSIFICATION	5.043722079720991E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.99999970390241	WITHOUT_CLASSIFICATION	2.960975900397291E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999775496214	WITHOUT_CLASSIFICATION	2.245037854208409E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999813692443	WITHOUT_CLASSIFICATION	1.863075571867668E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995187419397	WITHOUT_CLASSIFICATION	4.812580602868351E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999999890173174	WITHOUT_CLASSIFICATION	1.098268259132928E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999846412396	WITHOUT_CLASSIFICATION	1.5358760407242342E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998178543603	WITHOUT_CLASSIFICATION	1.8214563976467753E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999931775433	WITHOUT_CLASSIFICATION	6.822456694405586E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999934505117	WITHOUT_CLASSIFICATION	6.549488224227493E-9	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998528990985	WITHOUT_CLASSIFICATION	1.4710090153553714E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999991999457691	WITHOUT_CLASSIFICATION	8.000542308787438E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999999202735108	WITHOUT_CLASSIFICATION	7.972648928663732E-8	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999999021708064	WITHOUT_CLASSIFICATION	9.782919362242381E-8	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999996081591168	WITHOUT_CLASSIFICATION	3.9184088320033184E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996972634368	WITHOUT_CLASSIFICATION	3.027365630961943E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999998987545304	WITHOUT_CLASSIFICATION	1.0124546958309544E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999967475637718	WITHOUT_CLASSIFICATION	3.252436228281183E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999998430685384	WITHOUT_CLASSIFICATION	1.5693146167028647E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999984727246489	WITHOUT_CLASSIFICATION	1.527275350972779E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999988663040936	WITHOUT_CLASSIFICATION	1.1336959063236733E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999957868328767	WITHOUT_CLASSIFICATION	4.2131671232633654E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998555150084	WITHOUT_CLASSIFICATION	1.4448499158122E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998558514138	WITHOUT_CLASSIFICATION	1.4414858626685337E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999987172442835	WITHOUT_CLASSIFICATION	1.2827557165065354E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999878202770741	WITHOUT_CLASSIFICATION	1.2179722925813469E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999982226961248	WITHOUT_CLASSIFICATION	1.7773038752330659E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999992792944827	WITHOUT_CLASSIFICATION	7.207055172413555E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999973327002796	WITHOUT_CLASSIFICATION	2.6672997203421066E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999297503323	WITHOUT_CLASSIFICATION	7.024966779241534E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999998284164091	WITHOUT_CLASSIFICATION	1.7158359079245682E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999945693318572	WITHOUT_CLASSIFICATION	5.430668142844374E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999980457722544	WITHOUT_CLASSIFICATION	1.954227745594461E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999623827230121	WITHOUT_CLASSIFICATION	3.761727698779883E-5	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999967666769903	WITHOUT_CLASSIFICATION	3.2333230096033225E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999986142711567	WITHOUT_CLASSIFICATION	1.385728843286012E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999984282304326	WITHOUT_CLASSIFICATION	1.5717695673091227E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146657681	WITHOUT_CLASSIFICATION	1.4853342319135904E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997030494343	WITHOUT_CLASSIFICATION	2.9695056569884E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999938602948577	WITHOUT_CLASSIFICATION	6.1397051422127705E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999958365588918	WITHOUT_CLASSIFICATION	4.163441108277435E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999984963138158	WITHOUT_CLASSIFICATION	1.5036861842140375E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999980244355033	WITHOUT_CLASSIFICATION	1.9755644966551247E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999945321591877	WITHOUT_CLASSIFICATION	5.467840812431343E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999261758962	WITHOUT_CLASSIFICATION	7.382410380383419E-8	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999994863861	WITHOUT_CLASSIFICATION	5.136140404133959E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999995628019686	WITHOUT_CLASSIFICATION	4.371980314519282E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999951881921493	WITHOUT_CLASSIFICATION	4.811807850783786E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999977870917908	WITHOUT_CLASSIFICATION	2.2129082092966128E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999995628019686	WITHOUT_CLASSIFICATION	4.371980314519282E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998518542221	WITHOUT_CLASSIFICATION	1.4814577795201995E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999996843012331	WITHOUT_CLASSIFICATION	3.15698766820931E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999999014575667	WITHOUT_CLASSIFICATION	9.854243330332996E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999972607902	WITHOUT_CLASSIFICATION	2.739209799979815E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999839974941	WITHOUT_CLASSIFICATION	1.6002505927807378E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999365916722	WITHOUT_CLASSIFICATION	6.340832781351317E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999652071188593	WITHOUT_CLASSIFICATION	3.479288114071582E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999994826678142	WITHOUT_CLASSIFICATION	5.173321858575896E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999798339771	WITHOUT_CLASSIFICATION	2.016602283029813E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999997560798502	WITHOUT_CLASSIFICATION	2.4392014979445503E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999878072419	WITHOUT_CLASSIFICATION	1.2192758135903031E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999061273797	WITHOUT_CLASSIFICATION	9.387262030248966E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999995318433554	WITHOUT_CLASSIFICATION	4.681566446150009E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999990676492	WITHOUT_CLASSIFICATION	9.323508000138458E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999959488395	WITHOUT_CLASSIFICATION	4.051160495693697E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999444524933183	WITHOUT_CLASSIFICATION	5.554750668181455E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999915409919731	WITHOUT_CLASSIFICATION	8.459008026857197E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999915409919731	WITHOUT_CLASSIFICATION	8.459008026857197E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999927429505	WITHOUT_CLASSIFICATION	7.257049444798576E-9	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999887782600484	WITHOUT_CLASSIFICATION	1.1221739951667616E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999925956538847	WITHOUT_CLASSIFICATION	7.404346115336954E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999893764864656	WITHOUT_CLASSIFICATION	1.062351353437563E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999598867022	WITHOUT_CLASSIFICATION	4.01132978226015E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995871237926459	WITHOUT_CLASSIFICATION	4.1287620735418076E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999977778275652	WITHOUT_CLASSIFICATION	2.222172434895663E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999973398005	WITHOUT_CLASSIFICATION	2.6601994050684485E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999997844787656	WITHOUT_CLASSIFICATION	2.1552123438282045E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999996705008128	WITHOUT_CLASSIFICATION	3.2949918713923273E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998341393215	WITHOUT_CLASSIFICATION	1.6586067848512973E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999977951374	WITHOUT_CLASSIFICATION	2.2048625631802415E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998218225602	WITHOUT_CLASSIFICATION	1.7817743979329432E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999984846103019	WITHOUT_CLASSIFICATION	1.515389698080028E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999913284855	WITHOUT_CLASSIFICATION	8.671514573294855E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999987550414403	WITHOUT_CLASSIFICATION	1.2449585597360855E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999878751173403	WITHOUT_CLASSIFICATION	1.2124882659626707E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999408182871	WITHOUT_CLASSIFICATION	5.9181712930340564E-8	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999966368474688	WITHOUT_CLASSIFICATION	3.3631525312720967E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9951161025196565	WITHOUT_CLASSIFICATION	0.00488389748034347	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999921827821	WITHOUT_CLASSIFICATION	7.817217840619807E-9	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999974517717349	WITHOUT_CLASSIFICATION	2.5482282651656406E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998644709791	WITHOUT_CLASSIFICATION	1.3552902085303276E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999919377208	WITHOUT_CLASSIFICATION	8.062279197597347E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999958648631	WITHOUT_CLASSIFICATION	4.135136884609815E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999912305615	WITHOUT_CLASSIFICATION	8.769438547362588E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997739389929	WITHOUT_CLASSIFICATION	2.2606100698444443E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999065883554	WITHOUT_CLASSIFICATION	9.341164464712401E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999954777104437	WITHOUT_CLASSIFICATION	4.522289556306452E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999992641799477	WITHOUT_CLASSIFICATION	7.358200524437068E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999983101655873	WITHOUT_CLASSIFICATION	1.6898344127065377E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997248290254	WITHOUT_CLASSIFICATION	2.751709745194078E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999938737381081	WITHOUT_CLASSIFICATION	6.126261891943492E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999955068289377	WITHOUT_CLASSIFICATION	4.4931710622490775E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999992007810964	WITHOUT_CLASSIFICATION	7.992189036074972E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998589788845	WITHOUT_CLASSIFICATION	1.410211155245677E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999959772501825	WITHOUT_CLASSIFICATION	4.0227498175447026E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999996310877961	WITHOUT_CLASSIFICATION	3.689122038600106E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999995236493503	WITHOUT_CLASSIFICATION	4.7635064962791105E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999988043314247	WITHOUT_CLASSIFICATION	1.195668575277916E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999987399005561	WITHOUT_CLASSIFICATION	1.2600994438613484E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999998016245314	WITHOUT_CLASSIFICATION	1.9837546864636426E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999935032311	WITHOUT_CLASSIFICATION	6.496768971695946E-9	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999835891821	WITHOUT_CLASSIFICATION	1.641081793659948E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999993048473637	WITHOUT_CLASSIFICATION	6.951526364011084E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998670766006	WITHOUT_CLASSIFICATION	1.329233994492821E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998362788654	WITHOUT_CLASSIFICATION	1.6372113472565535E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998360397045	WITHOUT_CLASSIFICATION	1.6396029539144543E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999791820864	WITHOUT_CLASSIFICATION	2.0817913598259833E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999896006898	WITHOUT_CLASSIFICATION	1.0399310194797643E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999835271106	WITHOUT_CLASSIFICATION	1.6472889362283644E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998374609481	WITHOUT_CLASSIFICATION	1.6253905179480754E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999992972171	WITHOUT_CLASSIFICATION	7.027829803668087E-10	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999297802894	WITHOUT_CLASSIFICATION	7.021971058001658E-8	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998684278341	WITHOUT_CLASSIFICATION	1.3157216596373736E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999297802894	WITHOUT_CLASSIFICATION	7.021971058001658E-8	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999968640306034	WITHOUT_CLASSIFICATION	3.1359693965108973E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998089037272	WITHOUT_CLASSIFICATION	1.9109627288868319E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999997594795818	WITHOUT_CLASSIFICATION	2.405204182827602E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999689463612	WITHOUT_CLASSIFICATION	3.105363884169145E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992647767371	WITHOUT_CLASSIFICATION	7.352232628917288E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999901372367268	WITHOUT_CLASSIFICATION	9.862763273159767E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999617111187	WITHOUT_CLASSIFICATION	3.828888124518635E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998632623996	WITHOUT_CLASSIFICATION	1.367376004375182E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999775657189	WITHOUT_CLASSIFICATION	2.2434281154551512E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999968634871564	WITHOUT_CLASSIFICATION	3.1365128435393546E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999671967725	WITHOUT_CLASSIFICATION	3.2803227551673176E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999976016697	WITHOUT_CLASSIFICATION	2.3983302992049074E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999842599267128	WITHOUT_CLASSIFICATION	1.5740073287224063E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999986630379165	WITHOUT_CLASSIFICATION	1.336962083534022E-6	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999694938433	WITHOUT_CLASSIFICATION	3.050615662221111E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999998626709	WITHOUT_CLASSIFICATION	1.3732910165453438E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999899095658185	WITHOUT_CLASSIFICATION	1.0090434181539714E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999899095658185	WITHOUT_CLASSIFICATION	1.0090434181539714E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999996666995034	WITHOUT_CLASSIFICATION	3.3330049654806674E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999940220648291	WITHOUT_CLASSIFICATION	5.977935170914492E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.99999999431662	WITHOUT_CLASSIFICATION	5.683379945106957E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999718170769	WITHOUT_CLASSIFICATION	2.8182923120772453E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999253147933	WITHOUT_CLASSIFICATION	7.468520671940874E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999992322345836	WITHOUT_CLASSIFICATION	7.67765416320546E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999977742274411	WITHOUT_CLASSIFICATION	2.2257725588412927E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999976248083152	WITHOUT_CLASSIFICATION	2.3751916847187016E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999997857996649	WITHOUT_CLASSIFICATION	2.1420033513817235E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999944773541	WITHOUT_CLASSIFICATION	5.522645891800658E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999944369788	WITHOUT_CLASSIFICATION	5.563021211889693E-8	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999348623404	WITHOUT_CLASSIFICATION	6.513765956246944E-8	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999682904789	WITHOUT_CLASSIFICATION	3.170952106699337E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999441676691	WITHOUT_CLASSIFICATION	5.583233091768649E-8	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999999231721752	WITHOUT_CLASSIFICATION	7.682782470946064E-8	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998870384389	WITHOUT_CLASSIFICATION	1.1296156114279025E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999269834947	WITHOUT_CLASSIFICATION	7.301650531512286E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999980595527337	WITHOUT_CLASSIFICATION	1.9404472663890276E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999442263251	WITHOUT_CLASSIFICATION	5.577367478926301E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999997237111	WITHOUT_CLASSIFICATION	2.7628893099738535E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997248013524	WITHOUT_CLASSIFICATION	2.751986476823994E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999328959532	WITHOUT_CLASSIFICATION	6.71040467934218E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999793586957	WITHOUT_CLASSIFICATION	2.0641304268134285E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999840379878	WITHOUT_CLASSIFICATION	1.596201211471192E-8	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999989537024707	WITHOUT_CLASSIFICATION	1.0462975292643724E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997942352109	WITHOUT_CLASSIFICATION	2.0576478908255402E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997336161612	WITHOUT_CLASSIFICATION	2.6638383879000077E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999980340136895	WITHOUT_CLASSIFICATION	1.9659863106075784E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999969240084584	WITHOUT_CLASSIFICATION	3.075991541648332E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999990807375808	WITHOUT_CLASSIFICATION	9.192624191387593E-7	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999927259599755	WITHOUT_CLASSIFICATION	7.274040024575563E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.99999970004303	WITHOUT_CLASSIFICATION	2.9995697003732897E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998850683239225	WITHOUT_CLASSIFICATION	1.149316760774064E-4	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999997319384135	WITHOUT_CLASSIFICATION	2.680615864950338E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999996313565341	WITHOUT_CLASSIFICATION	3.6864346584350317E-7	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999809135256	WITHOUT_CLASSIFICATION	1.908647438357445E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999837058706	WITHOUT_CLASSIFICATION	1.629412934994129E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999987623043411	WITHOUT_CLASSIFICATION	1.2376956588678369E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999848929579	WITHOUT_CLASSIFICATION	1.5107042108365125E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999722870658	WITHOUT_CLASSIFICATION	2.771293415905184E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999817988522	WITHOUT_CLASSIFICATION	1.8201147867543194E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994853019057	WITHOUT_CLASSIFICATION	5.14698094266449E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999973485362453	WITHOUT_CLASSIFICATION	2.6514637546258624E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999740627441	WITHOUT_CLASSIFICATION	2.593725593330972E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999974586334	WITHOUT_CLASSIFICATION	2.5413665459762813E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999532499909	WITHOUT_CLASSIFICATION	4.675000900012001E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999790462836	WITHOUT_CLASSIFICATION	2.0953716386552292E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999354307376	WITHOUT_CLASSIFICATION	6.456926229656616E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997217774691	WITHOUT_CLASSIFICATION	2.7822253090724416E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999978362271896	WITHOUT_CLASSIFICATION	2.1637728104611063E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989617294441	WITHOUT_CLASSIFICATION	1.0382705558406346E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999959537862537	WITHOUT_CLASSIFICATION	4.0462137463028405E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999990781002529	WITHOUT_CLASSIFICATION	9.218997470583085E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999990482645655	WITHOUT_CLASSIFICATION	9.517354344201855E-7	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999974836708615	WITHOUT_CLASSIFICATION	2.5163291385493563E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996210458908	WITHOUT_CLASSIFICATION	3.7895410918670053E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999996210458908	WITHOUT_CLASSIFICATION	3.7895410918670053E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999364498973484	WITHOUT_CLASSIFICATION	6.355010265156744E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999982163287647	WITHOUT_CLASSIFICATION	1.783671235291649E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998229611656	WITHOUT_CLASSIFICATION	1.7703883442733914E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999762319056	WITHOUT_CLASSIFICATION	2.3768094302320202E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999901560951	WITHOUT_CLASSIFICATION	9.843904853639784E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997743045252	WITHOUT_CLASSIFICATION	2.2569547469426662E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999287880237	WITHOUT_CLASSIFICATION	7.12119763065083E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999996967447696	WITHOUT_CLASSIFICATION	3.032552303334722E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997765492709726	WITHOUT_CLASSIFICATION	2.2345072902741942E-4	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999826254519	WITHOUT_CLASSIFICATION	1.737454810795789E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999922329748911	WITHOUT_CLASSIFICATION	7.767025108846521E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998786994719	WITHOUT_CLASSIFICATION	1.2130052811721042E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999848273179899	WITHOUT_CLASSIFICATION	1.5172682010118619E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999909806481	WITHOUT_CLASSIFICATION	9.019351971273714E-9	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999990112702415	WITHOUT_CLASSIFICATION	9.887297585616547E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999961350109092	WITHOUT_CLASSIFICATION	3.864989090799561E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999997416099	WITHOUT_CLASSIFICATION	2.58390100406625E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999964571569374	WITHOUT_CLASSIFICATION	3.5428430625527825E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999975743886337	WITHOUT_CLASSIFICATION	2.4256113663859117E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999999606904118	WITHOUT_CLASSIFICATION	3.9309588188460916E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999772717173	WITHOUT_CLASSIFICATION	2.2728282756205195E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999992693080252	WITHOUT_CLASSIFICATION	7.30691974782718E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999890967551175	WITHOUT_CLASSIFICATION	1.0903244882519462E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999866771582	WITHOUT_CLASSIFICATION	1.3322841904339433E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999999944421917	WITHOUT_CLASSIFICATION	5.557808314088211E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999997253062867	WITHOUT_CLASSIFICATION	2.74693713252164E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999992573852077	WITHOUT_CLASSIFICATION	7.426147922766841E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999603090052867	WITHOUT_CLASSIFICATION	3.969099471327887E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999999930526328	WITHOUT_CLASSIFICATION	6.947367206096727E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999890967551175	WITHOUT_CLASSIFICATION	1.0903244882519462E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999997655871745	WITHOUT_CLASSIFICATION	2.3441282547121832E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999997101214	WITHOUT_CLASSIFICATION	2.898785350117321E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997945340328792	WITHOUT_CLASSIFICATION	2.0546596712083182E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993303048583	WITHOUT_CLASSIFICATION	6.69695141609744E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999431220625	WITHOUT_CLASSIFICATION	5.687793741146299E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999550270280261	WITHOUT_CLASSIFICATION	4.4972971973977564E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999889506939	WITHOUT_CLASSIFICATION	1.1049306183916663E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999159961961	WITHOUT_CLASSIFICATION	8.400380395675409E-8	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999961537265609	WITHOUT_CLASSIFICATION	3.8462734391027195E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993303048583	WITHOUT_CLASSIFICATION	6.69695141609744E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999920847215612	WITHOUT_CLASSIFICATION	7.915278438799836E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999059432232	WITHOUT_CLASSIFICATION	9.40567767827401E-8	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999997275852855	WITHOUT_CLASSIFICATION	2.724147145274893E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999914469938126	WITHOUT_CLASSIFICATION	8.553006187426325E-6	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998437832536	WITHOUT_CLASSIFICATION	1.562167463088091E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999944369788	WITHOUT_CLASSIFICATION	5.563021211889693E-8	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999536072436	WITHOUT_CLASSIFICATION	4.639275627104657E-8	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999980502400647	WITHOUT_CLASSIFICATION	1.949759935388276E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999673785175	WITHOUT_CLASSIFICATION	3.262148249837928E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999994766357002	WITHOUT_CLASSIFICATION	5.233642997423015E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.99998469842124	WITHOUT_CLASSIFICATION	1.530157875991306E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999980167990014	WITHOUT_CLASSIFICATION	1.9832009986289067E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999745972559421	WITHOUT_CLASSIFICATION	2.5402744057967618E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999992187907931	WITHOUT_CLASSIFICATION	7.812092068812458E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999956017465983	WITHOUT_CLASSIFICATION	4.398253401727367E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997697101332	WITHOUT_CLASSIFICATION	2.3028986692080054E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999718215883722	WITHOUT_CLASSIFICATION	2.8178411627783505E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999773186582	WITHOUT_CLASSIFICATION	2.2681341789495156E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999309351477	WITHOUT_CLASSIFICATION	6.906485228143966E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999998440813317	WITHOUT_CLASSIFICATION	1.5591866835173257E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999967576013	WITHOUT_CLASSIFICATION	3.242398812110761E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999998053275027	WITHOUT_CLASSIFICATION	1.9467249735575885E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999982817864806	WITHOUT_CLASSIFICATION	1.7182135193416814E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997282805927	WITHOUT_CLASSIFICATION	2.7171940723279887E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999046601785	WITHOUT_CLASSIFICATION	9.53398214041924E-8	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999921324364323	WITHOUT_CLASSIFICATION	7.86756356766223E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999982860682417	WITHOUT_CLASSIFICATION	1.7139317582644863E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999828712943	WITHOUT_CLASSIFICATION	1.712870570079183E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999990658938315	WITHOUT_CLASSIFICATION	9.341061686323923E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999991778315174	WITHOUT_CLASSIFICATION	8.221684825851563E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999983785952448	WITHOUT_CLASSIFICATION	1.6214047552176502E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999887311350034	WITHOUT_CLASSIFICATION	1.1268864996505512E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998211628238	WITHOUT_CLASSIFICATION	1.7883717620591125E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998303682102	WITHOUT_CLASSIFICATION	1.6963178984376287E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998829831658	WITHOUT_CLASSIFICATION	1.1701683413621632E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999986536839578	WITHOUT_CLASSIFICATION	1.3463160420966948E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999997693572324	WITHOUT_CLASSIFICATION	2.3064276760888083E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999085791138	WITHOUT_CLASSIFICATION	9.142088622280337E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999996297041	WITHOUT_CLASSIFICATION	3.702958634144413E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999994981597344	WITHOUT_CLASSIFICATION	5.018402654846464E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999995812520415	WITHOUT_CLASSIFICATION	4.187479584604276E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999671283867	WITHOUT_CLASSIFICATION	3.287161331012852E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999538397547	WITHOUT_CLASSIFICATION	4.616024527821772E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999992169912272	WITHOUT_CLASSIFICATION	7.830087728842101E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999216141748	WITHOUT_CLASSIFICATION	7.838582509119697E-8	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999987411616074	WITHOUT_CLASSIFICATION	1.2588383926367035E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999336148255	WITHOUT_CLASSIFICATION	6.63851745606136E-8	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999933067578	WITHOUT_CLASSIFICATION	6.693242210744677E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999933147221645	WITHOUT_CLASSIFICATION	6.6852778355795725E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993248869339	WITHOUT_CLASSIFICATION	6.751130661322927E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999808064400884	WITHOUT_CLASSIFICATION	1.9193559911631962E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999987042007157	WITHOUT_CLASSIFICATION	1.2957992843691925E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999994602857442	WITHOUT_CLASSIFICATION	5.397142558525289E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999974845746098	WITHOUT_CLASSIFICATION	2.5154253901886068E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999993276283258	WITHOUT_CLASSIFICATION	6.723716743033351E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988359952774	WITHOUT_CLASSIFICATION	1.1640047226456413E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999923804482	WITHOUT_CLASSIFICATION	7.619551753717323E-9	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999996343606848	WITHOUT_CLASSIFICATION	3.6563931519354617E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999862343093	WITHOUT_CLASSIFICATION	1.3765690732942423E-8	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999901870217	WITHOUT_CLASSIFICATION	9.812978290043649E-8	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999628604286308	WITHOUT_CLASSIFICATION	3.713957136907358E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999916331210148	WITHOUT_CLASSIFICATION	8.366878985232913E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998303682102	WITHOUT_CLASSIFICATION	1.6963178984376287E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999927539962	WITHOUT_CLASSIFICATION	7.246003862677929E-9	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999997253952	WITHOUT_CLASSIFICATION	2.7460474717372095E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999995509748737	WITHOUT_CLASSIFICATION	4.4902512638424627E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999981068299407	WITHOUT_CLASSIFICATION	1.8931700592637197E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999169915482	WITHOUT_CLASSIFICATION	8.300845176198529E-8	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995654201355	WITHOUT_CLASSIFICATION	4.345798645902262E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996200675904	WITHOUT_CLASSIFICATION	3.799324097200844E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999984239532	WITHOUT_CLASSIFICATION	1.5760468001009095E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999827784971	WITHOUT_CLASSIFICATION	1.7221502883416192E-8	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999988435209982	WITHOUT_CLASSIFICATION	1.1564790017947185E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999970411366	WITHOUT_CLASSIFICATION	2.958863352906545E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999364965265756	WITHOUT_CLASSIFICATION	6.35034734243393E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999358981314	WITHOUT_CLASSIFICATION	6.410186864314953E-8	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999996286708065	WITHOUT_CLASSIFICATION	3.7132919347483927E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999968640306034	WITHOUT_CLASSIFICATION	3.1359693965108973E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999983000928	WITHOUT_CLASSIFICATION	1.6999072256201287E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999998232485	WITHOUT_CLASSIFICATION	1.7675159535461986E-10	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999701356576	WITHOUT_CLASSIFICATION	2.986434250159334E-8	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999998585351921	WITHOUT_CLASSIFICATION	1.4146480784708043E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999988014898	WITHOUT_CLASSIFICATION	1.1985101739239095E-9	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999968916587216	WITHOUT_CLASSIFICATION	3.1083412784723276E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999968916587216	WITHOUT_CLASSIFICATION	3.1083412784723276E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999999117403564	WITHOUT_CLASSIFICATION	8.825964357156668E-8	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999993075087686	WITHOUT_CLASSIFICATION	6.924912313042617E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999281978295	WITHOUT_CLASSIFICATION	7.180217055949266E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999997442613059	WITHOUT_CLASSIFICATION	2.557386941107961E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999999960167862	WITHOUT_CLASSIFICATION	3.983213809335756E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999805854353	WITHOUT_CLASSIFICATION	1.941456466748803E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999979815939414	WITHOUT_CLASSIFICATION	2.018406058686747E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998149155905	WITHOUT_CLASSIFICATION	1.8508440954489893E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998149155905	WITHOUT_CLASSIFICATION	1.8508440954489893E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999973098005758	WITHOUT_CLASSIFICATION	2.690199424290789E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999994178839811	WITHOUT_CLASSIFICATION	5.821160188253916E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999458430658	WITHOUT_CLASSIFICATION	5.4156934288983976E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994456623106	WITHOUT_CLASSIFICATION	5.543376895302688E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994456623106	WITHOUT_CLASSIFICATION	5.543376895302688E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994456623106	WITHOUT_CLASSIFICATION	5.543376895302688E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999999703354587	WITHOUT_CLASSIFICATION	2.966454129312203E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998305009664	WITHOUT_CLASSIFICATION	1.694990335530636E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999975843555235	WITHOUT_CLASSIFICATION	2.4156444764859934E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999951313405419	WITHOUT_CLASSIFICATION	4.868659458188046E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999899325109	WITHOUT_CLASSIFICATION	1.006748900486026E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999932419338	WITHOUT_CLASSIFICATION	6.75806618574508E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999446366119	WITHOUT_CLASSIFICATION	5.5363388054836406E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999858482586098	WITHOUT_CLASSIFICATION	1.415174139019387E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999190207076	WITHOUT_CLASSIFICATION	8.097929239581717E-8	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999997993293233	WITHOUT_CLASSIFICATION	2.0067067663260428E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997233669208	WITHOUT_CLASSIFICATION	2.7663307918142245E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997701462263	WITHOUT_CLASSIFICATION	2.2985377356895059E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999610797502	WITHOUT_CLASSIFICATION	3.892024973455899E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999742034449	WITHOUT_CLASSIFICATION	2.5796555073905897E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999548702745	WITHOUT_CLASSIFICATION	4.5129725458174285E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999999522506307	WITHOUT_CLASSIFICATION	4.774936930969645E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999968003745058	WITHOUT_CLASSIFICATION	3.1996254941614116E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999968003745058	WITHOUT_CLASSIFICATION	3.1996254941614116E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999976520398302	WITHOUT_CLASSIFICATION	2.347960169769493E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999976520398302	WITHOUT_CLASSIFICATION	2.347960169769493E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999976379945951	WITHOUT_CLASSIFICATION	2.362005404921905E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974420005376	WITHOUT_CLASSIFICATION	2.5579994624206157E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974420005376	WITHOUT_CLASSIFICATION	2.5579994624206157E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999984809529909	WITHOUT_CLASSIFICATION	1.5190470090116153E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999965686889378	WITHOUT_CLASSIFICATION	3.4313110621269044E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999003528074	WITHOUT_CLASSIFICATION	9.964719263274792E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999968916587216	WITHOUT_CLASSIFICATION	3.1083412784723276E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999479768481	WITHOUT_CLASSIFICATION	5.202315190778747E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999965686889378	WITHOUT_CLASSIFICATION	3.4313110621269044E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999981912988007	WITHOUT_CLASSIFICATION	1.8087011993028077E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999998537152591	WITHOUT_CLASSIFICATION	1.4628474077476235E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999989737344532	WITHOUT_CLASSIFICATION	1.0262655467004378E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994388378359	WITHOUT_CLASSIFICATION	5.611621640687164E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999974548053	WITHOUT_CLASSIFICATION	2.545194690963177E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999265159073334	WITHOUT_CLASSIFICATION	7.34840926666728E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999740599102	WITHOUT_CLASSIFICATION	2.594008980516245E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999990548386359	WITHOUT_CLASSIFICATION	9.451613641322118E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999995411787154	WITHOUT_CLASSIFICATION	4.5882128452246107E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999843051207732	WITHOUT_CLASSIFICATION	1.569487922675458E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999959601236	WITHOUT_CLASSIFICATION	4.039876352693866E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999989707694525	WITHOUT_CLASSIFICATION	1.0292305474744962E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998140459377	WITHOUT_CLASSIFICATION	1.8595406239812056E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999989616396063	WITHOUT_CLASSIFICATION	1.0383603936242223E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999994922796169	WITHOUT_CLASSIFICATION	5.077203831354257E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999967943126	WITHOUT_CLASSIFICATION	3.2056874046477724E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999791938143	WITHOUT_CLASSIFICATION	2.0806185661152537E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997411714284	WITHOUT_CLASSIFICATION	2.5882857159364526E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997411714284	WITHOUT_CLASSIFICATION	2.5882857159364526E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999998808490756	WITHOUT_CLASSIFICATION	1.191509244030567E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999992339471019	WITHOUT_CLASSIFICATION	7.660528981520261E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995749581347	WITHOUT_CLASSIFICATION	4.250418652760463E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999992566518703	WITHOUT_CLASSIFICATION	7.433481297935936E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995270077716	WITHOUT_CLASSIFICATION	4.7299222848883265E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999813284469	WITHOUT_CLASSIFICATION	1.8671553046129503E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999979797336	WITHOUT_CLASSIFICATION	2.0202663749192206E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999955700049067	WITHOUT_CLASSIFICATION	4.429995093274361E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999997733044702	WITHOUT_CLASSIFICATION	2.2669552983401563E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999992499685	WITHOUT_CLASSIFICATION	7.500314988242788E-9	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999112419081	WITHOUT_CLASSIFICATION	8.875809185893599E-8	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999364965265756	WITHOUT_CLASSIFICATION	6.35034734243393E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999948163137	WITHOUT_CLASSIFICATION	5.1836862276542985E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996161505614	WITHOUT_CLASSIFICATION	3.838494385971706E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999999556562599	WITHOUT_CLASSIFICATION	4.434374009914182E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999992501115075	WITHOUT_CLASSIFICATION	7.498884925483675E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999810683625	WITHOUT_CLASSIFICATION	1.893163743791088E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999810683625	WITHOUT_CLASSIFICATION	1.893163743791088E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999952508215032	WITHOUT_CLASSIFICATION	4.749178496709364E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998560918721	WITHOUT_CLASSIFICATION	1.439081279553487E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999994675852961	WITHOUT_CLASSIFICATION	5.32414703813001E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999988710519382	WITHOUT_CLASSIFICATION	1.1289480618778618E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999992076513441	WITHOUT_CLASSIFICATION	7.923486558969243E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999968613445589	WITHOUT_CLASSIFICATION	3.138655441036389E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996524892335	WITHOUT_CLASSIFICATION	3.475107664845247E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999189162317	WITHOUT_CLASSIFICATION	8.108376828686549E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999842513461	WITHOUT_CLASSIFICATION	1.57486539026172E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999989173286	WITHOUT_CLASSIFICATION	1.0826713972707968E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998882731681	WITHOUT_CLASSIFICATION	1.1172683185251492E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999189162317	WITHOUT_CLASSIFICATION	8.108376828686549E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999880571939	WITHOUT_CLASSIFICATION	1.1942806088538879E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999994137154165	WITHOUT_CLASSIFICATION	5.862845834708618E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999921281657	WITHOUT_CLASSIFICATION	7.871834350846277E-9	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999973730342258	WITHOUT_CLASSIFICATION	2.6269657742785427E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999977042052	WITHOUT_CLASSIFICATION	2.295794800904569E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999933496673	WITHOUT_CLASSIFICATION	6.650332757519295E-9	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999867844983	WITHOUT_CLASSIFICATION	1.3215501721662703E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999044217681	WITHOUT_CLASSIFICATION	9.557823195632384E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999710586434	WITHOUT_CLASSIFICATION	2.8941356694927805E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999981172473048	WITHOUT_CLASSIFICATION	1.8827526950828267E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999991441588363	WITHOUT_CLASSIFICATION	8.558411638653985E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999303162064	WITHOUT_CLASSIFICATION	6.968379362450013E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999998981551232	WITHOUT_CLASSIFICATION	1.0184487669732146E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994914781942	WITHOUT_CLASSIFICATION	5.085218057367447E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999981845356734	WITHOUT_CLASSIFICATION	1.815464326567332E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999999234614639	WITHOUT_CLASSIFICATION	7.653853609900304E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999992881872558	WITHOUT_CLASSIFICATION	7.118127440744301E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999876758481887	WITHOUT_CLASSIFICATION	1.2324151811165485E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999976949457204	WITHOUT_CLASSIFICATION	2.305054279614861E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999890623744	WITHOUT_CLASSIFICATION	1.0937625683994459E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998579247088	WITHOUT_CLASSIFICATION	1.4207529116127844E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999672216648	WITHOUT_CLASSIFICATION	3.2778335098154914E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999798139414962	WITHOUT_CLASSIFICATION	2.0186058503864144E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999974522142335	WITHOUT_CLASSIFICATION	2.547785766432108E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999890324976	WITHOUT_CLASSIFICATION	1.096750237565665E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999981006493702	WITHOUT_CLASSIFICATION	1.8993506297366435E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999816909189	WITHOUT_CLASSIFICATION	1.8309081072356007E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999983483545	WITHOUT_CLASSIFICATION	1.6516454932572068E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999956272152	WITHOUT_CLASSIFICATION	4.372784789454937E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999999528579625	WITHOUT_CLASSIFICATION	4.714203748408554E-8	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999995742691	WITHOUT_CLASSIFICATION	4.257307971930764E-10	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999195397821	WITHOUT_CLASSIFICATION	8.046021788675927E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999993970741484	WITHOUT_CLASSIFICATION	6.029258516168987E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999606401748	WITHOUT_CLASSIFICATION	3.935982518139981E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999596634295	WITHOUT_CLASSIFICATION	4.0336570510729356E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996275879119	WITHOUT_CLASSIFICATION	3.724120879743546E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999972262243	WITHOUT_CLASSIFICATION	2.7737756985411526E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999924410308	WITHOUT_CLASSIFICATION	7.558969132775646E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999996080998196	WITHOUT_CLASSIFICATION	3.9190018040387195E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999659389135	WITHOUT_CLASSIFICATION	3.4061086440615485E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999993542843044	WITHOUT_CLASSIFICATION	6.457156955271703E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999841654361	WITHOUT_CLASSIFICATION	1.5834563930641904E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999956671561	WITHOUT_CLASSIFICATION	4.332843906689866E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999860975964	WITHOUT_CLASSIFICATION	1.3902403572218715E-8	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.99999994884397	WITHOUT_CLASSIFICATION	5.115602990419922E-8	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999868229041	WITHOUT_CLASSIFICATION	1.3177095852544124E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999996951254188	WITHOUT_CLASSIFICATION	3.048745812110419E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999894218393234	WITHOUT_CLASSIFICATION	1.0578160676609836E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999979253289887	WITHOUT_CLASSIFICATION	2.0746710113279574E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997854928986	WITHOUT_CLASSIFICATION	2.1450710145295412E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984512361851	WITHOUT_CLASSIFICATION	1.548763814872807E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998769258941	WITHOUT_CLASSIFICATION	1.230741060059378E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999842673051	WITHOUT_CLASSIFICATION	1.573269495997601E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997632899059	WITHOUT_CLASSIFICATION	2.367100940693697E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999935813052	WITHOUT_CLASSIFICATION	6.418694864306724E-9	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998174340634	WITHOUT_CLASSIFICATION	1.8256593659498315E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997739914295	WITHOUT_CLASSIFICATION	2.260085705483813E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999395393402	WITHOUT_CLASSIFICATION	6.046065979171321E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999998489403921	WITHOUT_CLASSIFICATION	1.510596080060935E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999991157120742	WITHOUT_CLASSIFICATION	8.84287925772949E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998408389422	WITHOUT_CLASSIFICATION	1.5916105783358937E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993921680141	WITHOUT_CLASSIFICATION	6.078319859530249E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999621533883	WITHOUT_CLASSIFICATION	3.784661179377624E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999664893633987	WITHOUT_CLASSIFICATION	3.3510636601289915E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999996695231246	WITHOUT_CLASSIFICATION	3.304768754436805E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999994778469577	WITHOUT_CLASSIFICATION	5.221530423090291E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984512361851	WITHOUT_CLASSIFICATION	1.548763814872807E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999999234765293	WITHOUT_CLASSIFICATION	7.652347071154047E-8	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999996349386908	WITHOUT_CLASSIFICATION	3.6506130926380343E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999703219754	WITHOUT_CLASSIFICATION	2.9678024611170264E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999717951839	WITHOUT_CLASSIFICATION	2.8204816169983982E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999970340735386	WITHOUT_CLASSIFICATION	2.965926461424833E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999996665207609	WITHOUT_CLASSIFICATION	3.3347923914224297E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999842513461	WITHOUT_CLASSIFICATION	1.57486539026172E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999576722813006	WITHOUT_CLASSIFICATION	4.23277186993183E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999596634295	WITHOUT_CLASSIFICATION	4.0336570510729356E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999984157413992	WITHOUT_CLASSIFICATION	1.584258600713119E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999918302463	WITHOUT_CLASSIFICATION	8.169753680899449E-9	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995193169199	WITHOUT_CLASSIFICATION	4.806830801717798E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995367982438	WITHOUT_CLASSIFICATION	4.6320175619622697E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997642888859	WITHOUT_CLASSIFICATION	2.3571111414003766E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996558602082	WITHOUT_CLASSIFICATION	3.441397917064206E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998927362821	WITHOUT_CLASSIFICATION	1.072637178922671E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999003823308	WITHOUT_CLASSIFICATION	9.961766928222974E-8	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999884125039	WITHOUT_CLASSIFICATION	1.1587496092042108E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999991256463	WITHOUT_CLASSIFICATION	8.743537077424918E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999087748132	WITHOUT_CLASSIFICATION	9.122518688307377E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999524443823	WITHOUT_CLASSIFICATION	4.755561775453388E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999530578378	WITHOUT_CLASSIFICATION	4.6942162070041005E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999530578378	WITHOUT_CLASSIFICATION	4.6942162070041005E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999756356573	WITHOUT_CLASSIFICATION	2.4364342672365716E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996125881415	WITHOUT_CLASSIFICATION	3.8741185852786984E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999588544737	WITHOUT_CLASSIFICATION	4.1145526338337376E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999984090536511	WITHOUT_CLASSIFICATION	1.590946348873443E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999887381688	WITHOUT_CLASSIFICATION	1.1261831145055425E-8	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999396600426	WITHOUT_CLASSIFICATION	6.033995734015198E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999977516969	WITHOUT_CLASSIFICATION	2.248303202378487E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999971243078825	WITHOUT_CLASSIFICATION	2.875692117568418E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999854458173	WITHOUT_CLASSIFICATION	1.4554182681526059E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999989407053753	WITHOUT_CLASSIFICATION	1.0592946247708986E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999484002634	WITHOUT_CLASSIFICATION	5.159973665718411E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999145598514	WITHOUT_CLASSIFICATION	8.544014869864831E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999961049264	WITHOUT_CLASSIFICATION	3.895073681483278E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999996335363	WITHOUT_CLASSIFICATION	3.66463699329436E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999777666495	WITHOUT_CLASSIFICATION	2.223335052449291E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999460048761	WITHOUT_CLASSIFICATION	5.3995123978307706E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999988678431164	WITHOUT_CLASSIFICATION	1.1321568835627066E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999624849922	WITHOUT_CLASSIFICATION	3.751500785786103E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999981525232	WITHOUT_CLASSIFICATION	1.8474768048329576E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999956553248294	WITHOUT_CLASSIFICATION	4.344675170638737E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999204888628	WITHOUT_CLASSIFICATION	7.951113718481254E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999993924121318	WITHOUT_CLASSIFICATION	6.07587868244508E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999520854296	WITHOUT_CLASSIFICATION	4.791457046846281E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999570720117654	WITHOUT_CLASSIFICATION	4.292798823447791E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999993474637727	WITHOUT_CLASSIFICATION	6.525362273212684E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998364607996	WITHOUT_CLASSIFICATION	1.6353920050234793E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994849713446	WITHOUT_CLASSIFICATION	5.150286553935285E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999999994399857	WITHOUT_CLASSIFICATION	5.60014303209402E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999939637969177	WITHOUT_CLASSIFICATION	6.0362030822236335E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999492459776	WITHOUT_CLASSIFICATION	5.0754022512415373E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9997690783228861	WITHOUT_CLASSIFICATION	2.3092167711379728E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999567729021811	WITHOUT_CLASSIFICATION	4.322709781884168E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999719825539	WITHOUT_CLASSIFICATION	2.8017446169537084E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999989006513	WITHOUT_CLASSIFICATION	1.0993487329801027E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996906752886	WITHOUT_CLASSIFICATION	3.0932471150785275E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996644756913	WITHOUT_CLASSIFICATION	3.355243086296109E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999907943626667	WITHOUT_CLASSIFICATION	9.205637333268518E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999897692513	WITHOUT_CLASSIFICATION	1.0230748818489677E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999544619065	WITHOUT_CLASSIFICATION	4.553809338405637E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994894332103	WITHOUT_CLASSIFICATION	5.105667898367228E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998982549264	WITHOUT_CLASSIFICATION	1.0174507365516953E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999891724499	WITHOUT_CLASSIFICATION	1.082755001381519E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999605757250593	WITHOUT_CLASSIFICATION	3.942427494075132E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999947052430445	WITHOUT_CLASSIFICATION	5.2947569555639346E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999958528626093	WITHOUT_CLASSIFICATION	4.147137390742616E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998694640321	WITHOUT_CLASSIFICATION	1.305359678891999E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9959708418178082	WITHOUT_CLASSIFICATION	0.004029158182191914	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999659659565	WITHOUT_CLASSIFICATION	3.403404347003204E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999819299106	WITHOUT_CLASSIFICATION	1.80700893449363E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997907192433	WITHOUT_CLASSIFICATION	2.092807567085745E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998921225708	WITHOUT_CLASSIFICATION	1.0787742915664423E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999907322654	WITHOUT_CLASSIFICATION	9.267734544967578E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999981987486768	WITHOUT_CLASSIFICATION	1.8012513232991421E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999996504911618	WITHOUT_CLASSIFICATION	3.495088381116063E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998715674209	WITHOUT_CLASSIFICATION	1.2843257910399953E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999924813947	WITHOUT_CLASSIFICATION	7.51860531339092E-9	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999920482409146	WITHOUT_CLASSIFICATION	7.951759085453014E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999999069380318	WITHOUT_CLASSIFICATION	9.306196826945389E-8	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999652122373	WITHOUT_CLASSIFICATION	3.4787762678243895E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999919191997	WITHOUT_CLASSIFICATION	8.08080029792272E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999990907854275	WITHOUT_CLASSIFICATION	9.092145724674466E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996759062091	WITHOUT_CLASSIFICATION	3.240937908063583E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999997231354741	WITHOUT_CLASSIFICATION	2.76864525852659E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999997423441791	WITHOUT_CLASSIFICATION	2.5765582089051647E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999204166421	WITHOUT_CLASSIFICATION	7.958335789428327E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998681298438	WITHOUT_CLASSIFICATION	1.3187015619815516E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999982081496362	WITHOUT_CLASSIFICATION	1.7918503637969396E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999979370079	WITHOUT_CLASSIFICATION	2.062992101174085E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999552593642	WITHOUT_CLASSIFICATION	4.474063570749004E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999455299793	WITHOUT_CLASSIFICATION	5.447002066548752E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999552593642	WITHOUT_CLASSIFICATION	4.474063570749004E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998594343401	WITHOUT_CLASSIFICATION	1.4056565994050348E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999938657161	WITHOUT_CLASSIFICATION	6.134283963475871E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999999028095726	WITHOUT_CLASSIFICATION	9.719042743324921E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999414317476	WITHOUT_CLASSIFICATION	5.856825233961231E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999969260144	WITHOUT_CLASSIFICATION	3.073985603725255E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999024726547	WITHOUT_CLASSIFICATION	9.752734521413999E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993141199057	WITHOUT_CLASSIFICATION	6.858800943569577E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999988567410668	WITHOUT_CLASSIFICATION	1.1432589332006611E-5	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999996229284313	WITHOUT_CLASSIFICATION	3.7707156868168756E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999923905128	WITHOUT_CLASSIFICATION	7.609487249986295E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999984748732369	WITHOUT_CLASSIFICATION	1.5251267631463955E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999866708714	WITHOUT_CLASSIFICATION	1.3329128580822806E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997021756613	WITHOUT_CLASSIFICATION	2.9782433868458115E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999973441482418	WITHOUT_CLASSIFICATION	2.6558517582140427E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998991379763	WITHOUT_CLASSIFICATION	1.0086202363816092E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999950784972	WITHOUT_CLASSIFICATION	4.921502801519527E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999850582009	WITHOUT_CLASSIFICATION	1.4941799080707127E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998902717213	WITHOUT_CLASSIFICATION	1.097282786632211E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999774710218	WITHOUT_CLASSIFICATION	2.252897822843409E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999961544569865	WITHOUT_CLASSIFICATION	3.845543013491699E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999993866522419	WITHOUT_CLASSIFICATION	6.133477581235329E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999988089164897	WITHOUT_CLASSIFICATION	1.19108351031736E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998223952314619	WITHOUT_CLASSIFICATION	1.776047685380249E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999777146141	WITHOUT_CLASSIFICATION	2.2285385781400455E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999962730532781	WITHOUT_CLASSIFICATION	3.726946721952359E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999682922730264	WITHOUT_CLASSIFICATION	3.170772697360567E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999970417209343	WITHOUT_CLASSIFICATION	2.9582790656421186E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999989279974366	WITHOUT_CLASSIFICATION	1.0720025633901111E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999387494867	WITHOUT_CLASSIFICATION	6.125051335681402E-8	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999960553724899	WITHOUT_CLASSIFICATION	3.94462751009487E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999947582621703	WITHOUT_CLASSIFICATION	5.241737829607237E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999994627028179	WITHOUT_CLASSIFICATION	5.372971821443433E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999192668881	WITHOUT_CLASSIFICATION	8.073311188726949E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998016992384	WITHOUT_CLASSIFICATION	1.9830076165335106E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999997009579642	WITHOUT_CLASSIFICATION	2.990420358214843E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999946896466695	WITHOUT_CLASSIFICATION	5.310353330558404E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.999994221622886	WITHOUT_CLASSIFICATION	5.778377114042822E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999307945886	WITHOUT_CLASSIFICATION	6.920541134155533E-8	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999885157313874	WITHOUT_CLASSIFICATION	1.1484268612649482E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999998678921131	WITHOUT_CLASSIFICATION	1.3210788689392587E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999961537842905	WITHOUT_CLASSIFICATION	3.846215709432088E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.999999697558258	WITHOUT_CLASSIFICATION	3.02441742073776E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999287273423263	WITHOUT_CLASSIFICATION	7.127265767364248E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999682922730264	WITHOUT_CLASSIFICATION	3.170772697360567E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999831987431826	WITHOUT_CLASSIFICATION	1.6801256817368262E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999669542688	WITHOUT_CLASSIFICATION	3.30457312252906E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999912445261843	WITHOUT_CLASSIFICATION	8.755473815745084E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999978488959693	WITHOUT_CLASSIFICATION	2.1511040307333514E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999997176484445	WITHOUT_CLASSIFICATION	2.82351555382367E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998335289308	WITHOUT_CLASSIFICATION	1.664710691914063E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999958510892	WITHOUT_CLASSIFICATION	4.148910842821169E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999912015966459	WITHOUT_CLASSIFICATION	8.798403354148743E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999986129776383	WITHOUT_CLASSIFICATION	1.387022361703064E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999890187011	WITHOUT_CLASSIFICATION	1.0981298976154916E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999959749191567	WITHOUT_CLASSIFICATION	4.0250808433179E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996276116051	WITHOUT_CLASSIFICATION	3.723883949074414E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999958218250259	WITHOUT_CLASSIFICATION	4.17817497408071E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999977908102314	WITHOUT_CLASSIFICATION	2.209189768502888E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999753993307	WITHOUT_CLASSIFICATION	2.460066929402395E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999956529554	WITHOUT_CLASSIFICATION	4.347044636560006E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998759486287	WITHOUT_CLASSIFICATION	1.2405137132674563E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997311092432	WITHOUT_CLASSIFICATION	2.688907567490435E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999999994018844	WITHOUT_CLASSIFICATION	5.981156010274279E-9	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999831987431826	WITHOUT_CLASSIFICATION	1.6801256817368262E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999966482188998	WITHOUT_CLASSIFICATION	3.351781100086811E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999432633347	WITHOUT_CLASSIFICATION	5.673666520765874E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999997081673976	WITHOUT_CLASSIFICATION	2.918326024411568E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998367232263	WITHOUT_CLASSIFICATION	1.632767736858653E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998177465461	WITHOUT_CLASSIFICATION	1.822534539314088E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999871483227	WITHOUT_CLASSIFICATION	1.2851677300166163E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999871483227	WITHOUT_CLASSIFICATION	1.2851677300166163E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998908263815	WITHOUT_CLASSIFICATION	1.091736184152401E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999871483227	WITHOUT_CLASSIFICATION	1.2851677300166163E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999871483227	WITHOUT_CLASSIFICATION	1.2851677300166163E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999992282315444	WITHOUT_CLASSIFICATION	7.717684554689637E-7	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999953135993102	WITHOUT_CLASSIFICATION	4.686400689910221E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992093431391	WITHOUT_CLASSIFICATION	7.906568609224193E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999162073706	WITHOUT_CLASSIFICATION	8.379262940602684E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999470519914	WITHOUT_CLASSIFICATION	5.294800857450295E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999993105822033	WITHOUT_CLASSIFICATION	6.894177968075554E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999987787421142	WITHOUT_CLASSIFICATION	1.2212578858317934E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999892414493946	WITHOUT_CLASSIFICATION	1.0758550605435522E-5	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999986214017194	WITHOUT_CLASSIFICATION	1.3785982807345712E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999739544359506	WITHOUT_CLASSIFICATION	2.604556404937182E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999998521321816	WITHOUT_CLASSIFICATION	1.4786781840344401E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999991375085242	WITHOUT_CLASSIFICATION	8.624914757171592E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999998768035968	WITHOUT_CLASSIFICATION	1.2319640320334023E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999971372735242	WITHOUT_CLASSIFICATION	2.8627264758011002E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997246172337	WITHOUT_CLASSIFICATION	2.753827662170826E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997811562313026	WITHOUT_CLASSIFICATION	2.1884376869736588E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998374609481	WITHOUT_CLASSIFICATION	1.6253905179480754E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999988338153713	WITHOUT_CLASSIFICATION	1.1661846286972782E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999787524387743	WITHOUT_CLASSIFICATION	2.1247561225710133E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999647922218542	WITHOUT_CLASSIFICATION	3.5207778145828125E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999996051711657	WITHOUT_CLASSIFICATION	3.948288343024794E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999998788900436	WITHOUT_CLASSIFICATION	1.2110995649277174E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998374609481	WITHOUT_CLASSIFICATION	1.6253905179480754E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999970417209343	WITHOUT_CLASSIFICATION	2.9582790656421186E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999964856625315	WITHOUT_CLASSIFICATION	3.514337468488318E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998047818623	WITHOUT_CLASSIFICATION	1.9521813768481408E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999934356978	WITHOUT_CLASSIFICATION	6.564302207132445E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.999997175386982	WITHOUT_CLASSIFICATION	2.8246130181481215E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999394538732	WITHOUT_CLASSIFICATION	6.054612674728939E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.999997191707997	WITHOUT_CLASSIFICATION	2.8082920030600967E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999989647317113	WITHOUT_CLASSIFICATION	1.0352682886171897E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999738770038	WITHOUT_CLASSIFICATION	2.612299619153692E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998621573388	WITHOUT_CLASSIFICATION	1.3784266125755714E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999995169824811	WITHOUT_CLASSIFICATION	4.83017518873812E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998979608375	WITHOUT_CLASSIFICATION	1.0203916243912333E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999872446282	WITHOUT_CLASSIFICATION	1.2755371808283364E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997557382851	WITHOUT_CLASSIFICATION	2.442617149468061E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999971687470116	WITHOUT_CLASSIFICATION	2.8312529883831334E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999715269053	WITHOUT_CLASSIFICATION	2.8473094728973667E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999010232922	WITHOUT_CLASSIFICATION	9.897670775574143E-8	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999993693020488	WITHOUT_CLASSIFICATION	6.306979512732412E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999900373492	WITHOUT_CLASSIFICATION	9.962650814370259E-8	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999988835503397	WITHOUT_CLASSIFICATION	1.1164496602454146E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999970956000818	WITHOUT_CLASSIFICATION	2.9043999182978587E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999948357910067	WITHOUT_CLASSIFICATION	5.164208993276471E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999935761074	WITHOUT_CLASSIFICATION	6.423892719648926E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999738770038	WITHOUT_CLASSIFICATION	2.612299619153692E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999991579948129	WITHOUT_CLASSIFICATION	8.42005187163735E-7	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999997684886454	WITHOUT_CLASSIFICATION	2.3151135469503138E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999996174978154	WITHOUT_CLASSIFICATION	3.8250218450820883E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999973811591485	WITHOUT_CLASSIFICATION	2.618840851471296E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974417811167	WITHOUT_CLASSIFICATION	2.5582188832930763E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999938095294995	WITHOUT_CLASSIFICATION	6.19047050053131E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999986720254165	WITHOUT_CLASSIFICATION	1.3279745835147606E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999999556078848	WITHOUT_CLASSIFICATION	4.4392115244304305E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999986999572928	WITHOUT_CLASSIFICATION	1.3000427071401707E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999957923669164	WITHOUT_CLASSIFICATION	4.207633083620673E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999448006038	WITHOUT_CLASSIFICATION	5.519939614072014E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996929474142	WITHOUT_CLASSIFICATION	3.0705258583293185E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999980302875843	WITHOUT_CLASSIFICATION	1.969712415801745E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999989168683564	WITHOUT_CLASSIFICATION	1.0831316435488746E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999937005866466	WITHOUT_CLASSIFICATION	6.299413353453364E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994106430579	WITHOUT_CLASSIFICATION	5.893569422217823E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999448006038	WITHOUT_CLASSIFICATION	5.519939614072014E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999224258344	WITHOUT_CLASSIFICATION	7.757416560578774E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999998506041553	WITHOUT_CLASSIFICATION	1.49395844695652E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999999963642802	WITHOUT_CLASSIFICATION	3.635719806724114E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999932478613631	WITHOUT_CLASSIFICATION	6.752138636961198E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999999047380727	WITHOUT_CLASSIFICATION	9.526192725718165E-8	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999895996988	WITHOUT_CLASSIFICATION	1.0400301201954637E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999856502486	WITHOUT_CLASSIFICATION	1.4349751343863966E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996304930078	WITHOUT_CLASSIFICATION	3.695069923340488E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999561140082	WITHOUT_CLASSIFICATION	4.388599190122465E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996916924245	WITHOUT_CLASSIFICATION	3.0830757553661245E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999165380992	WITHOUT_CLASSIFICATION	8.346190075171013E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997414526947	WITHOUT_CLASSIFICATION	2.5854730531354927E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999605435171	WITHOUT_CLASSIFICATION	3.945648280015261E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999605435171	WITHOUT_CLASSIFICATION	3.945648280015261E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999962900377077	WITHOUT_CLASSIFICATION	3.709962292258871E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999496775093	WITHOUT_CLASSIFICATION	5.032249076384779E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999999066422289	WITHOUT_CLASSIFICATION	9.335777098087975E-8	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.99999993008114	WITHOUT_CLASSIFICATION	6.991886002103016E-8	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999946771197591	WITHOUT_CLASSIFICATION	5.322880240891982E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998231018292	WITHOUT_CLASSIFICATION	1.7689817080378377E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988104992876	WITHOUT_CLASSIFICATION	1.1895007123229898E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990241566558	WITHOUT_CLASSIFICATION	9.75843344172566E-7	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999970334955702	WITHOUT_CLASSIFICATION	2.9665044297751895E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995653779242	WITHOUT_CLASSIFICATION	4.346220757632353E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998231018292	WITHOUT_CLASSIFICATION	1.7689817080378377E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988104992876	WITHOUT_CLASSIFICATION	1.1895007123229898E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990241566558	WITHOUT_CLASSIFICATION	9.75843344172566E-7	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999994624500684	WITHOUT_CLASSIFICATION	5.375499315488488E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999955777755343	WITHOUT_CLASSIFICATION	4.4222244657218295E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999304216032	WITHOUT_CLASSIFICATION	6.957839676585894E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999986362815104	WITHOUT_CLASSIFICATION	1.3637184895451703E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999999732377176	WITHOUT_CLASSIFICATION	2.6762282394252213E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999869074911469	WITHOUT_CLASSIFICATION	1.3092508853086574E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999988448195526	WITHOUT_CLASSIFICATION	1.1551804473259254E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999944035939187	WITHOUT_CLASSIFICATION	5.5964060814236925E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999589985973759	WITHOUT_CLASSIFICATION	4.1001402624083713E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999998709562562	WITHOUT_CLASSIFICATION	1.2904374380223134E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998236401022	WITHOUT_CLASSIFICATION	1.7635989783616612E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999472803346451	WITHOUT_CLASSIFICATION	5.271966535496797E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999850379809502	WITHOUT_CLASSIFICATION	1.496201904981975E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999778151304	WITHOUT_CLASSIFICATION	2.218486961636308E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999780323916	WITHOUT_CLASSIFICATION	2.1967608335312123E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999995766142594	WITHOUT_CLASSIFICATION	4.2338574051041436E-7	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9985151992139386	WITHOUT_CLASSIFICATION	0.0014848007860613782	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999778954770739	WITHOUT_CLASSIFICATION	2.2104522926107185E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999999468751065	WITHOUT_CLASSIFICATION	5.312489351500824E-8	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999520321266	WITHOUT_CLASSIFICATION	4.796787339495453E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996725715972	WITHOUT_CLASSIFICATION	3.274284027620511E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999063120494	WITHOUT_CLASSIFICATION	9.368795066804625E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999240735539	WITHOUT_CLASSIFICATION	7.592644610395134E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999865383135	WITHOUT_CLASSIFICATION	1.3461686503582929E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999876030439	WITHOUT_CLASSIFICATION	1.239695622303301E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999914113803114	WITHOUT_CLASSIFICATION	8.588619688460924E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991739305621	WITHOUT_CLASSIFICATION	8.260694378873764E-7	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955600581837	WITHOUT_CLASSIFICATION	4.439941816224971E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999423833977	WITHOUT_CLASSIFICATION	5.7616602310275995E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942524304816	WITHOUT_CLASSIFICATION	5.74756951842061E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979502077717	WITHOUT_CLASSIFICATION	2.0497922282861997E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146657681	WITHOUT_CLASSIFICATION	1.4853342319135904E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985146657681	WITHOUT_CLASSIFICATION	1.4853342319135904E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999978681815199	WITHOUT_CLASSIFICATION	2.131818480048373E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999929541715394	WITHOUT_CLASSIFICATION	7.04582846060497E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999998224812614	WITHOUT_CLASSIFICATION	1.7751873853871784E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999364965265756	WITHOUT_CLASSIFICATION	6.35034734243393E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999999600595012	WITHOUT_CLASSIFICATION	3.9940498801704975E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998911065869	WITHOUT_CLASSIFICATION	1.0889341306385272E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999830421031436	WITHOUT_CLASSIFICATION	1.6957896856345212E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999999370299348	WITHOUT_CLASSIFICATION	6.297006513392414E-8	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999261758962	WITHOUT_CLASSIFICATION	7.382410380383419E-8	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994057181474	WITHOUT_CLASSIFICATION	5.942818526569355E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996223517266	WITHOUT_CLASSIFICATION	3.7764827350228056E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999803754892	WITHOUT_CLASSIFICATION	1.962451080545944E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995629036057	WITHOUT_CLASSIFICATION	4.3709639435357856E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995515459101	WITHOUT_CLASSIFICATION	4.4845408981691116E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994102763846	WITHOUT_CLASSIFICATION	5.897236154272492E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999475639779	WITHOUT_CLASSIFICATION	5.243602210054283E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998238150739	WITHOUT_CLASSIFICATION	1.7618492607155664E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998423298836	WITHOUT_CLASSIFICATION	1.576701164000105E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992938112036	WITHOUT_CLASSIFICATION	7.061887963979066E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994814596198	WITHOUT_CLASSIFICATION	5.18540380261494E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999942599509	WITHOUT_CLASSIFICATION	5.740049147463441E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999894353199886	WITHOUT_CLASSIFICATION	1.05646800112776E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999295666408838	WITHOUT_CLASSIFICATION	7.043335911611958E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999841571683	WITHOUT_CLASSIFICATION	1.584283167757521E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998399004708	WITHOUT_CLASSIFICATION	1.6009952925115178E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999288843342	WITHOUT_CLASSIFICATION	7.11156658036857E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999994045549204	WITHOUT_CLASSIFICATION	5.95445079528731E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999180975654	WITHOUT_CLASSIFICATION	8.19024345851703E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999295666408838	WITHOUT_CLASSIFICATION	7.043335911611958E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999295666408838	WITHOUT_CLASSIFICATION	7.043335911611958E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999618284091598	WITHOUT_CLASSIFICATION	3.8171590840084734E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999568214797	WITHOUT_CLASSIFICATION	4.3178520375520905E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999943871938372	WITHOUT_CLASSIFICATION	5.612806162836514E-6	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999994054552267	WITHOUT_CLASSIFICATION	5.94544773388136E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998140459377	WITHOUT_CLASSIFICATION	1.8595406239812056E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999520321266	WITHOUT_CLASSIFICATION	4.796787339495453E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999995363777954	WITHOUT_CLASSIFICATION	4.63622204681593E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999825785671	WITHOUT_CLASSIFICATION	1.7421432894038895E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999998954124872	WITHOUT_CLASSIFICATION	1.0458751280402816E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993299317079	WITHOUT_CLASSIFICATION	6.700682920169476E-7	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999997011412651	WITHOUT_CLASSIFICATION	2.988587348498305E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996235160314	WITHOUT_CLASSIFICATION	3.764839685453565E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999146987439	WITHOUT_CLASSIFICATION	8.530125595676894E-8	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999146987439	WITHOUT_CLASSIFICATION	8.530125595676894E-8	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997836809427	WITHOUT_CLASSIFICATION	2.1631905741281296E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997836809427	WITHOUT_CLASSIFICATION	2.1631905741281296E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987251926407	WITHOUT_CLASSIFICATION	1.274807359405395E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997792020893	WITHOUT_CLASSIFICATION	2.2079791069624825E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999958741989672	WITHOUT_CLASSIFICATION	4.125801032813438E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929288916221	WITHOUT_CLASSIFICATION	7.071108377954361E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999888980174	WITHOUT_CLASSIFICATION	1.1101982642523158E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999434889473	WITHOUT_CLASSIFICATION	5.6511052791723256E-8	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993902600482	WITHOUT_CLASSIFICATION	6.097399517047961E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999995977854	WITHOUT_CLASSIFICATION	4.022145994758373E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999022706427	WITHOUT_CLASSIFICATION	9.772935735573961E-8	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999545691565971	WITHOUT_CLASSIFICATION	4.5430843402933244E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997815868932	WITHOUT_CLASSIFICATION	2.1841310690195223E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998520995197	WITHOUT_CLASSIFICATION	1.4790048039723713E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999999405805582	WITHOUT_CLASSIFICATION	5.941944179027345E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999214064602	WITHOUT_CLASSIFICATION	7.859353983539878E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999994532549239	WITHOUT_CLASSIFICATION	5.467450761744086E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999241538826	WITHOUT_CLASSIFICATION	7.584611737453321E-8	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999241538826	WITHOUT_CLASSIFICATION	7.584611737453321E-8	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999999475252447	WITHOUT_CLASSIFICATION	5.247475529491152E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999997983860178	WITHOUT_CLASSIFICATION	2.0161398221562866E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999313374632	WITHOUT_CLASSIFICATION	6.86625367106354E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999982163459047	WITHOUT_CLASSIFICATION	1.7836540953052815E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991255305256	WITHOUT_CLASSIFICATION	8.744694744281182E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897621429878	WITHOUT_CLASSIFICATION	1.0237857012059406E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999990513965	WITHOUT_CLASSIFICATION	9.486034948177435E-9	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998850746781	WITHOUT_CLASSIFICATION	1.1492532201617253E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999969582373	WITHOUT_CLASSIFICATION	3.0417627435000537E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999530028802	WITHOUT_CLASSIFICATION	4.699711971524373E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999999457948	WITHOUT_CLASSIFICATION	5.420518779464621E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999631263713	WITHOUT_CLASSIFICATION	3.6873628821186985E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219134237	WITHOUT_CLASSIFICATION	7.808657634033768E-8	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998754497067	WITHOUT_CLASSIFICATION	1.2455029325738575E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999994143034812	WITHOUT_CLASSIFICATION	5.856965188426992E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999991705948174	WITHOUT_CLASSIFICATION	8.294051827612715E-7	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999665704071	WITHOUT_CLASSIFICATION	3.34295929078174E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999996186960693	WITHOUT_CLASSIFICATION	3.8130393073192405E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999999607737492	WITHOUT_CLASSIFICATION	3.9226250797236845E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999999990938296	WITHOUT_CLASSIFICATION	9.061704020897734E-9	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999224255368	WITHOUT_CLASSIFICATION	7.75744631687592E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999980203524623	WITHOUT_CLASSIFICATION	1.979647537771404E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998258214333	WITHOUT_CLASSIFICATION	1.7417856666692976E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995736587604	WITHOUT_CLASSIFICATION	4.263412396700434E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998007341826	WITHOUT_CLASSIFICATION	1.9926581733972067E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999993893466999	WITHOUT_CLASSIFICATION	6.106533001371542E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999999801336165	WITHOUT_CLASSIFICATION	1.9866383509953327E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999989996910311	WITHOUT_CLASSIFICATION	1.0003089687766167E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999562732624	WITHOUT_CLASSIFICATION	4.372673757342899E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999955068289377	WITHOUT_CLASSIFICATION	4.4931710622490775E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999968624935	WITHOUT_CLASSIFICATION	3.137506501799671E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998493945272	WITHOUT_CLASSIFICATION	1.5060547272009038E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999986787718463	WITHOUT_CLASSIFICATION	1.321228153612062E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999813893264	WITHOUT_CLASSIFICATION	1.86106735569182E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999765866391734	WITHOUT_CLASSIFICATION	2.3413360826609972E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999999713024833	WITHOUT_CLASSIFICATION	2.869751669898964E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999997416099	WITHOUT_CLASSIFICATION	2.58390100406625E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999338553918	WITHOUT_CLASSIFICATION	6.614460832487685E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999997023923	WITHOUT_CLASSIFICATION	2.976077193070505E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999997538245815	WITHOUT_CLASSIFICATION	2.461754185634246E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999851379971	WITHOUT_CLASSIFICATION	1.4862002820583966E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999742036694	WITHOUT_CLASSIFICATION	2.5796330605413667E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999994745308227	WITHOUT_CLASSIFICATION	5.254691773608332E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999804273569	WITHOUT_CLASSIFICATION	1.957264301295529E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999991824963863	WITHOUT_CLASSIFICATION	8.175036138165369E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999994978007497	WITHOUT_CLASSIFICATION	5.02199250298221E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999985159440654	WITHOUT_CLASSIFICATION	1.484055934526319E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999899095658185	WITHOUT_CLASSIFICATION	1.0090434181539714E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999999146679437	WITHOUT_CLASSIFICATION	8.533205629351049E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9938627942671291	WITHOUT_CLASSIFICATION	0.0061372057328708774	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999998447292854	WITHOUT_CLASSIFICATION	1.5527071470978088E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999433654723944	WITHOUT_CLASSIFICATION	5.663452760557945E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999996232636797	WITHOUT_CLASSIFICATION	3.7673632033443425E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999934457557883	WITHOUT_CLASSIFICATION	6.554244211689392E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999985302220765	WITHOUT_CLASSIFICATION	1.4697779234653817E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.99999987665957	WITHOUT_CLASSIFICATION	1.2334042996086132E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9969640446538288	WITHOUT_CLASSIFICATION	0.0030359553461711025	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999979674522699	WITHOUT_CLASSIFICATION	2.032547730048235E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999197855302	WITHOUT_CLASSIFICATION	8.021446979128218E-8	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998731830633698	WITHOUT_CLASSIFICATION	1.268169366302148E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999921610622	WITHOUT_CLASSIFICATION	7.838937860207903E-9	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998569990293	WITHOUT_CLASSIFICATION	1.4300097080903962E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999993082980043	WITHOUT_CLASSIFICATION	6.917019958188181E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999990291239846	WITHOUT_CLASSIFICATION	9.708760152881543E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999302939544	WITHOUT_CLASSIFICATION	6.970604560030478E-8	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999955876624	WITHOUT_CLASSIFICATION	4.412337641326435E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999942535188	WITHOUT_CLASSIFICATION	5.746481265294395E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997389830746	WITHOUT_CLASSIFICATION	2.610169254918006E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999890967551175	WITHOUT_CLASSIFICATION	1.0903244882519462E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999890967551175	WITHOUT_CLASSIFICATION	1.0903244882519462E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999993672367044	WITHOUT_CLASSIFICATION	6.327632955946556E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999990323793323	WITHOUT_CLASSIFICATION	9.676206676913114E-7	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999688813574	WITHOUT_CLASSIFICATION	3.111864261074249E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996608038343	WITHOUT_CLASSIFICATION	3.3919616567998887E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999911931204	WITHOUT_CLASSIFICATION	8.806879604428383E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999980664106789	WITHOUT_CLASSIFICATION	1.9335893210436354E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999962024566	WITHOUT_CLASSIFICATION	3.797543404503967E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999998823199144	WITHOUT_CLASSIFICATION	1.176800855350948E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999991125747856	WITHOUT_CLASSIFICATION	8.874252143961761E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999996100867041	WITHOUT_CLASSIFICATION	3.8991329590220615E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999834100112	WITHOUT_CLASSIFICATION	1.658998883449152E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999946719271	WITHOUT_CLASSIFICATION	5.328072934725249E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999991450945526	WITHOUT_CLASSIFICATION	8.549054474081709E-7	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999956277537	WITHOUT_CLASSIFICATION	4.372246419136209E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999999552494069	WITHOUT_CLASSIFICATION	4.4750593085643255E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.99999883414533	WITHOUT_CLASSIFICATION	1.1658546700337177E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999998390161022	WITHOUT_CLASSIFICATION	1.6098389783158958E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999998228564316	WITHOUT_CLASSIFICATION	1.771435684749279E-7	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994856448168	WITHOUT_CLASSIFICATION	5.143551833027205E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999975260422568	WITHOUT_CLASSIFICATION	2.4739577432755107E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998900007737	WITHOUT_CLASSIFICATION	1.0999922627672221E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997876370202	WITHOUT_CLASSIFICATION	2.1236297983801206E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999991480004239	WITHOUT_CLASSIFICATION	8.519995761021525E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999414666574571	WITHOUT_CLASSIFICATION	5.8533342542948206E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999810144254	WITHOUT_CLASSIFICATION	1.8985574550293584E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999986440345355	WITHOUT_CLASSIFICATION	1.3559654645307808E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998471719342	WITHOUT_CLASSIFICATION	1.5282806570713023E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999983340309941	WITHOUT_CLASSIFICATION	1.6659690058194965E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999995206799043	WITHOUT_CLASSIFICATION	4.793200958265118E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999999929041098	WITHOUT_CLASSIFICATION	7.095890193588365E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997716020808	WITHOUT_CLASSIFICATION	2.283979191572432E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999543037867	WITHOUT_CLASSIFICATION	4.5696213150969607E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998840694563	WITHOUT_CLASSIFICATION	1.1593054365438452E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999997664159087	WITHOUT_CLASSIFICATION	2.3358409123971275E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999987927476822	WITHOUT_CLASSIFICATION	1.2072523178349138E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999987927476822	WITHOUT_CLASSIFICATION	1.2072523178349138E-6	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998561413814	WITHOUT_CLASSIFICATION	1.438586185744635E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999955859529513	WITHOUT_CLASSIFICATION	4.414047048673229E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999998899714472	WITHOUT_CLASSIFICATION	1.100285528174615E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999990346603204	WITHOUT_CLASSIFICATION	9.653396796480701E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998398594195	WITHOUT_CLASSIFICATION	1.601405804330244E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999914250944394	WITHOUT_CLASSIFICATION	8.57490556061541E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999992386211389	WITHOUT_CLASSIFICATION	7.613788610317294E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999999994630434	WITHOUT_CLASSIFICATION	5.369566027499136E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998303416732434	WITHOUT_CLASSIFICATION	1.6965832675658275E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999859240184	WITHOUT_CLASSIFICATION	1.4075981740045622E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999531783716	WITHOUT_CLASSIFICATION	4.682162838601759E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999997240089685	WITHOUT_CLASSIFICATION	2.7599103137893947E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999999069602333	WITHOUT_CLASSIFICATION	9.303976670648757E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999999903242642	WITHOUT_CLASSIFICATION	9.675735797184619E-8	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999995318168174	WITHOUT_CLASSIFICATION	4.6818318253915013E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999982967177575	WITHOUT_CLASSIFICATION	1.7032822425068861E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999982967177575	WITHOUT_CLASSIFICATION	1.7032822425068861E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999921032808	WITHOUT_CLASSIFICATION	7.896719249795859E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999999891331143	WITHOUT_CLASSIFICATION	1.0866885690939002E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999990004125809	WITHOUT_CLASSIFICATION	9.9958741913533E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999102108424	WITHOUT_CLASSIFICATION	8.978915751845599E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999603090052867	WITHOUT_CLASSIFICATION	3.969099471327887E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999429878663	WITHOUT_CLASSIFICATION	5.701213363757578E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996716923526	WITHOUT_CLASSIFICATION	3.2830764740537556E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996716923526	WITHOUT_CLASSIFICATION	3.2830764740537556E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999995173224402	WITHOUT_CLASSIFICATION	4.826775597561525E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999973507832	WITHOUT_CLASSIFICATION	2.6492168301258996E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999987799583109	WITHOUT_CLASSIFICATION	1.220041689128625E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999994887581	WITHOUT_CLASSIFICATION	5.112419818021105E-10	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999995967747581	WITHOUT_CLASSIFICATION	4.032252418620033E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999914469938126	WITHOUT_CLASSIFICATION	8.553006187426325E-6	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999917610551	WITHOUT_CLASSIFICATION	8.238944855261838E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999003528074	WITHOUT_CLASSIFICATION	9.964719263274792E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998782271838	WITHOUT_CLASSIFICATION	1.2177281619743616E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999764821434016	WITHOUT_CLASSIFICATION	2.351785659844281E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999974845746098	WITHOUT_CLASSIFICATION	2.5154253901886068E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999981068299407	WITHOUT_CLASSIFICATION	1.8931700592637197E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999990076563124	WITHOUT_CLASSIFICATION	9.923436875899608E-7	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999976379945951	WITHOUT_CLASSIFICATION	2.362005404921905E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999939637969177	WITHOUT_CLASSIFICATION	6.0362030822236335E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998753641584	WITHOUT_CLASSIFICATION	1.2463584157295462E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999543479109	WITHOUT_CLASSIFICATION	4.565208908951493E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999992334006008	WITHOUT_CLASSIFICATION	7.66599399300741E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999992572119307	WITHOUT_CLASSIFICATION	7.427880693994791E-7	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998969930965	WITHOUT_CLASSIFICATION	1.0300690335222727E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999996681683047	WITHOUT_CLASSIFICATION	3.3183169525450744E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999984809529909	WITHOUT_CLASSIFICATION	1.5190470090116153E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999252422227254	WITHOUT_CLASSIFICATION	7.475777727462245E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999999370460866	WITHOUT_CLASSIFICATION	6.29539133721765E-8	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999372714181	WITHOUT_CLASSIFICATION	6.272858189791612E-8	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999998993591677	WITHOUT_CLASSIFICATION	1.0064083240759757E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999543397979682	WITHOUT_CLASSIFICATION	4.5660202031775925E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998453610108	WITHOUT_CLASSIFICATION	1.5463898906997178E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999999996980068	WITHOUT_CLASSIFICATION	3.0199319043621946E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999810683625	WITHOUT_CLASSIFICATION	1.893163743791088E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999995980509592	WITHOUT_CLASSIFICATION	4.019490407927887E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999975765964568	WITHOUT_CLASSIFICATION	2.423403543104741E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999994716919988	WITHOUT_CLASSIFICATION	5.283080012534994E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997970226865	WITHOUT_CLASSIFICATION	2.0297731355317554E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999984475775177	WITHOUT_CLASSIFICATION	1.5524224823397737E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999967060412952	WITHOUT_CLASSIFICATION	3.293958704728057E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999993155851944	WITHOUT_CLASSIFICATION	6.844148055159433E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999999398969313	WITHOUT_CLASSIFICATION	6.01030687076677E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996381938087	WITHOUT_CLASSIFICATION	3.618061913365995E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997316123584	WITHOUT_CLASSIFICATION	2.6838764153928105E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999373386211	WITHOUT_CLASSIFICATION	6.266137885087637E-8	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999998402814199	WITHOUT_CLASSIFICATION	1.597185801463643E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999989783175136	WITHOUT_CLASSIFICATION	1.0216824863956087E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997895184464	WITHOUT_CLASSIFICATION	2.1048155369088177E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999997781269	WITHOUT_CLASSIFICATION	2.2187309664643404E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999992780095737	WITHOUT_CLASSIFICATION	7.219904262552578E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996381938087	WITHOUT_CLASSIFICATION	3.618061913365995E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997316123584	WITHOUT_CLASSIFICATION	2.6838764153928105E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999971907895675	WITHOUT_CLASSIFICATION	2.8092104324293774E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999986115561461	WITHOUT_CLASSIFICATION	1.3884438539382993E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999608214117	WITHOUT_CLASSIFICATION	3.917858820030442E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999991074373559	WITHOUT_CLASSIFICATION	8.925626441996976E-7	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999954989292	WITHOUT_CLASSIFICATION	4.501070899007266E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999997153931426	WITHOUT_CLASSIFICATION	2.8460685737105696E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999927253735945	WITHOUT_CLASSIFICATION	7.2746264055614886E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999984022018551	WITHOUT_CLASSIFICATION	1.5977981449850896E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999861253477	WITHOUT_CLASSIFICATION	1.3874652277727891E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999955224453001	WITHOUT_CLASSIFICATION	4.477554699857116E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999995868599477	WITHOUT_CLASSIFICATION	4.1314005226207965E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999955224453001	WITHOUT_CLASSIFICATION	4.477554699857116E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999974891877228	WITHOUT_CLASSIFICATION	2.510812277214456E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999951489388649	WITHOUT_CLASSIFICATION	4.8510611351053075E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999975105315408	WITHOUT_CLASSIFICATION	2.4894684592295846E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983205471576	WITHOUT_CLASSIFICATION	1.6794528423238235E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999992891544977	WITHOUT_CLASSIFICATION	7.10845502402523E-7	TEST
//}	WITHOUT_CLASSIFICATION	0.9999733018807546	WITHOUT_CLASSIFICATION	2.669811924534413E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999733018807546	WITHOUT_CLASSIFICATION	2.669811924534413E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999944244333419	WITHOUT_CLASSIFICATION	5.575566658100726E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999991376145727	WITHOUT_CLASSIFICATION	8.62385427341264E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990178036319	WITHOUT_CLASSIFICATION	9.821963680738423E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999993341704226	WITHOUT_CLASSIFICATION	6.658295773261386E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999993032099577	WITHOUT_CLASSIFICATION	6.967900423803188E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999960318661871	WITHOUT_CLASSIFICATION	3.9681338128579686E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999982524526585	WITHOUT_CLASSIFICATION	1.7475473415366482E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994731554676	WITHOUT_CLASSIFICATION	5.268445324210768E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999977177278975	WITHOUT_CLASSIFICATION	2.282272102441169E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999939935761711	WITHOUT_CLASSIFICATION	6.006423828876069E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999978126438145	WITHOUT_CLASSIFICATION	2.187356185453968E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999994236563228	WITHOUT_CLASSIFICATION	5.763436772940605E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999769615865773	WITHOUT_CLASSIFICATION	2.3038413422649856E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999997868334213	WITHOUT_CLASSIFICATION	2.131665787787674E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999981817656473	WITHOUT_CLASSIFICATION	1.8182343527716332E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999980489047	WITHOUT_CLASSIFICATION	1.9510951829837294E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998918644969	WITHOUT_CLASSIFICATION	1.0813550310710716E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999182966399	WITHOUT_CLASSIFICATION	8.17033600756776E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999998254817608	WITHOUT_CLASSIFICATION	1.7451823920563443E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998645905951303	WITHOUT_CLASSIFICATION	1.3540940486970302E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999846019992	WITHOUT_CLASSIFICATION	1.539800075882383E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999966273788639	WITHOUT_CLASSIFICATION	3.3726211360840665E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999187972907	WITHOUT_CLASSIFICATION	8.120270934811382E-8	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999986136388868	WITHOUT_CLASSIFICATION	1.3863611133137525E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999990549649855	WITHOUT_CLASSIFICATION	9.450350145083593E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999907061377101	WITHOUT_CLASSIFICATION	9.293862289824605E-6	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999956097922	WITHOUT_CLASSIFICATION	4.390207794854788E-9	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999970508432554	WITHOUT_CLASSIFICATION	2.9491567446010705E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999994975436659	WITHOUT_CLASSIFICATION	5.024563340881903E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999990050001737	WITHOUT_CLASSIFICATION	9.94999826304952E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999966915605963	WITHOUT_CLASSIFICATION	3.3084394037133004E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999941693624035	WITHOUT_CLASSIFICATION	5.830637596613336E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999982524526585	WITHOUT_CLASSIFICATION	1.7475473415366482E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999999775767576	WITHOUT_CLASSIFICATION	2.2423242315222328E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999911269516267	WITHOUT_CLASSIFICATION	8.873048373198687E-6	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9983315779170107	WITHOUT_CLASSIFICATION	0.0016684220829894058	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999718673310942	WITHOUT_CLASSIFICATION	2.8132668905740426E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999996907916334	WITHOUT_CLASSIFICATION	3.092083665592834E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999979926376228	WITHOUT_CLASSIFICATION	2.0073623771458636E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999993341704226	WITHOUT_CLASSIFICATION	6.658295773261386E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999993341704226	WITHOUT_CLASSIFICATION	6.658295773261386E-7	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999993164580667	WITHOUT_CLASSIFICATION	6.835419333334395E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999965187566182	WITHOUT_CLASSIFICATION	3.4812433816873346E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999993090853343	WITHOUT_CLASSIFICATION	6.909146656397494E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999994203625633	WITHOUT_CLASSIFICATION	5.796374368333253E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999997058500303	WITHOUT_CLASSIFICATION	2.94149969748279E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995521500747	WITHOUT_CLASSIFICATION	4.4784992520514796E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999997335323307	WITHOUT_CLASSIFICATION	2.6646766933200324E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999534985113	WITHOUT_CLASSIFICATION	4.650148875205132E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999366732664	WITHOUT_CLASSIFICATION	6.332673363472595E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999214155857	WITHOUT_CLASSIFICATION	7.858441426806842E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999946713982756	WITHOUT_CLASSIFICATION	5.328601724477441E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241357422926	WITHOUT_CLASSIFICATION	7.586425770745439E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999963433780126	WITHOUT_CLASSIFICATION	3.6566219873016946E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999214155857	WITHOUT_CLASSIFICATION	7.858441426806842E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996292770954	WITHOUT_CLASSIFICATION	3.707229046132226E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999998702289454	WITHOUT_CLASSIFICATION	1.2977105459214818E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999988710688511	WITHOUT_CLASSIFICATION	1.1289311490067641E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9983684630034884	WITHOUT_CLASSIFICATION	0.0016315369965116885	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241357422926	WITHOUT_CLASSIFICATION	7.586425770745439E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986558994954	WITHOUT_CLASSIFICATION	1.3441005045204891E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999906062224	WITHOUT_CLASSIFICATION	9.393777704750386E-9	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999870115435	WITHOUT_CLASSIFICATION	1.2988456590342597E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999951848024	WITHOUT_CLASSIFICATION	4.815197583686641E-9	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999632746066772	WITHOUT_CLASSIFICATION	3.6725393322714233E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999995566619604	WITHOUT_CLASSIFICATION	4.433380396187115E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999521590011	WITHOUT_CLASSIFICATION	4.784099900075211E-8	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999993445761027	WITHOUT_CLASSIFICATION	6.554238971480988E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999968734065598	WITHOUT_CLASSIFICATION	3.1265934401355204E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999986696400527	WITHOUT_CLASSIFICATION	1.3303599473075186E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999964144274	WITHOUT_CLASSIFICATION	3.5855726077800047E-9	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999925631583	WITHOUT_CLASSIFICATION	7.436841697756504E-9	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999214155857	WITHOUT_CLASSIFICATION	7.858441426806842E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986558994954	WITHOUT_CLASSIFICATION	1.3441005045204891E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999870115435	WITHOUT_CLASSIFICATION	1.2988456590342597E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999995706765177	WITHOUT_CLASSIFICATION	4.293234822539193E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999885948489617	WITHOUT_CLASSIFICATION	1.1405151038312086E-5	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999507892732	WITHOUT_CLASSIFICATION	4.9210726774159297E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241357422926	WITHOUT_CLASSIFICATION	7.586425770745439E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999904939808733	WITHOUT_CLASSIFICATION	9.50601912677427E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999984718194731	WITHOUT_CLASSIFICATION	1.5281805268422003E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999956521366822	WITHOUT_CLASSIFICATION	4.347863317868717E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972390092634	WITHOUT_CLASSIFICATION	2.7609907365761694E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999993445761027	WITHOUT_CLASSIFICATION	6.554238971480988E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996292770954	WITHOUT_CLASSIFICATION	3.707229046132226E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999964846768904	WITHOUT_CLASSIFICATION	3.5153231096181468E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999902220103337	WITHOUT_CLASSIFICATION	9.777989666255222E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999974947512608	WITHOUT_CLASSIFICATION	2.505248739144318E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999961244513392	WITHOUT_CLASSIFICATION	3.875548660729997E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999959986527512	WITHOUT_CLASSIFICATION	4.001347248784191E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999962756733721	WITHOUT_CLASSIFICATION	3.7243266279188734E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999984965766363	WITHOUT_CLASSIFICATION	1.5034233636764077E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983205471576	WITHOUT_CLASSIFICATION	1.6794528423238235E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999650461465	WITHOUT_CLASSIFICATION	3.4953853502276065E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999923893832	WITHOUT_CLASSIFICATION	7.610616806775133E-8	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999936359859576	WITHOUT_CLASSIFICATION	6.364014042402063E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999986083253655	WITHOUT_CLASSIFICATION	1.39167463444193E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998311672237	WITHOUT_CLASSIFICATION	1.6883277630518448E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999847093762	WITHOUT_CLASSIFICATION	1.5290623738331965E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999997898096895	WITHOUT_CLASSIFICATION	2.1019031050269128E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999369624635	WITHOUT_CLASSIFICATION	6.303753647682237E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972390092634	WITHOUT_CLASSIFICATION	2.7609907365761694E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999953042132927	WITHOUT_CLASSIFICATION	4.695786707220837E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999963205476418	WITHOUT_CLASSIFICATION	3.679452358132794E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.999991633890634	WITHOUT_CLASSIFICATION	8.36610936596869E-6	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999978811028398	WITHOUT_CLASSIFICATION	2.1188971601346156E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999977840667279	WITHOUT_CLASSIFICATION	2.215933272060669E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999621374382	WITHOUT_CLASSIFICATION	3.786256178833456E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997119143901	WITHOUT_CLASSIFICATION	2.880856099050947E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999882219237582	WITHOUT_CLASSIFICATION	1.177807624185052E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999022223122	WITHOUT_CLASSIFICATION	9.777768778244622E-8	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997631448318803	WITHOUT_CLASSIFICATION	2.3685516811965276E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999981963977695	WITHOUT_CLASSIFICATION	1.8036022304803793E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999941661811216	WITHOUT_CLASSIFICATION	5.833818878335037E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999969529529086	WITHOUT_CLASSIFICATION	3.0470470915032062E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999985615935084	WITHOUT_CLASSIFICATION	1.438406491608319E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999847582787	WITHOUT_CLASSIFICATION	1.524172131400597E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998291495952	WITHOUT_CLASSIFICATION	1.7085040484387908E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999772184847	WITHOUT_CLASSIFICATION	2.278151537247864E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999820553506	WITHOUT_CLASSIFICATION	1.7944649436517976E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999993734810148	WITHOUT_CLASSIFICATION	6.265189852846667E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999987858513736	WITHOUT_CLASSIFICATION	1.2141486263708443E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999989635817398	WITHOUT_CLASSIFICATION	1.0364182601630527E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999997924347258	WITHOUT_CLASSIFICATION	2.0756527426190982E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998288259048	WITHOUT_CLASSIFICATION	1.711740952256363E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999790989578	WITHOUT_CLASSIFICATION	2.0901042149675195E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999471362006	WITHOUT_CLASSIFICATION	5.2863799412625445E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998163253665454	WITHOUT_CLASSIFICATION	1.8367463345465233E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999965744305974	WITHOUT_CLASSIFICATION	3.4255694025957585E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999937995161545	WITHOUT_CLASSIFICATION	6.200483845592374E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996945833205	WITHOUT_CLASSIFICATION	3.0541667948356387E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9995527899367492	WITHOUT_CLASSIFICATION	4.4721006325071355E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.99999984077033	WITHOUT_CLASSIFICATION	1.5922967002123882E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999981172473048	WITHOUT_CLASSIFICATION	1.8827526950828267E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999626725226	WITHOUT_CLASSIFICATION	3.732747751237771E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999576722813006	WITHOUT_CLASSIFICATION	4.23277186993183E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999965967857456	WITHOUT_CLASSIFICATION	3.403214254501034E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999923257658	WITHOUT_CLASSIFICATION	7.674234202356222E-8	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999498321828	WITHOUT_CLASSIFICATION	5.0167817287622055E-8	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999999093811939	WITHOUT_CLASSIFICATION	9.061880610075519E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999923257658	WITHOUT_CLASSIFICATION	7.674234202356222E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999965967857456	WITHOUT_CLASSIFICATION	3.403214254501034E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999498321828	WITHOUT_CLASSIFICATION	5.0167817287622055E-8	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.999999682571961	WITHOUT_CLASSIFICATION	3.174280390612112E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996535641719	WITHOUT_CLASSIFICATION	3.46435828165662E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999067250013	WITHOUT_CLASSIFICATION	9.327499870813486E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999998287845978	WITHOUT_CLASSIFICATION	1.7121540222133375E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999220167898	WITHOUT_CLASSIFICATION	7.798321022294428E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9995110773791378	WITHOUT_CLASSIFICATION	4.889226208622526E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999918260395116	WITHOUT_CLASSIFICATION	8.173960488276114E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999939337005036	WITHOUT_CLASSIFICATION	6.066299496391035E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999997617021329	WITHOUT_CLASSIFICATION	2.382978671486618E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999980229415096	WITHOUT_CLASSIFICATION	1.9770584903671457E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999998319984136	WITHOUT_CLASSIFICATION	1.6800158636904964E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999955797863298	WITHOUT_CLASSIFICATION	4.420213670188142E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999999289375965	WITHOUT_CLASSIFICATION	7.106240355461404E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999983186746522	WITHOUT_CLASSIFICATION	1.681325347828427E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996496510923	WITHOUT_CLASSIFICATION	3.5034890764265837E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998093797009	WITHOUT_CLASSIFICATION	1.9062029899511526E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998037391218	WITHOUT_CLASSIFICATION	1.9626087822328272E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999659654637	WITHOUT_CLASSIFICATION	3.403453631958724E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999994783514742	WITHOUT_CLASSIFICATION	5.216485258847308E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999981984474628	WITHOUT_CLASSIFICATION	1.8015525371015098E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999988393309175	WITHOUT_CLASSIFICATION	1.1606690825027088E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999947678216	WITHOUT_CLASSIFICATION	5.232178305985131E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999987076948972	WITHOUT_CLASSIFICATION	1.29230510282545E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999882350577	WITHOUT_CLASSIFICATION	1.176494230074485E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999960751411451	WITHOUT_CLASSIFICATION	3.92485885494858E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999960751411451	WITHOUT_CLASSIFICATION	3.92485885494858E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999905363626	WITHOUT_CLASSIFICATION	9.463637367869355E-9	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999905363626	WITHOUT_CLASSIFICATION	9.463637367869355E-9	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999994615627246	WITHOUT_CLASSIFICATION	5.384372754044924E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998037391218	WITHOUT_CLASSIFICATION	1.9626087822328272E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999735853602	WITHOUT_CLASSIFICATION	2.641463979374797E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999966090206	WITHOUT_CLASSIFICATION	3.3909793609072842E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997297089857	WITHOUT_CLASSIFICATION	2.7029101445326384E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997297089857	WITHOUT_CLASSIFICATION	2.7029101445326384E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997162551858	WITHOUT_CLASSIFICATION	2.837448142576652E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999993888643376	WITHOUT_CLASSIFICATION	6.111356624429595E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999877235752	WITHOUT_CLASSIFICATION	1.227642485884665E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999983820284882	WITHOUT_CLASSIFICATION	1.6179715117430598E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999992764464515	WITHOUT_CLASSIFICATION	7.235535485313947E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999707331094	WITHOUT_CLASSIFICATION	2.9266890580771222E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999951819434316	WITHOUT_CLASSIFICATION	4.81805656838559E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999999336644801	WITHOUT_CLASSIFICATION	6.633551990680359E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999996836516364	WITHOUT_CLASSIFICATION	3.16348363594922E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999999922715066	WITHOUT_CLASSIFICATION	7.728493396777244E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999999520926584	WITHOUT_CLASSIFICATION	4.7907341652546354E-8	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999991123597544	WITHOUT_CLASSIFICATION	8.876402456092948E-7	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999995687319463	WITHOUT_CLASSIFICATION	4.3126805374782956E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999989306527466	WITHOUT_CLASSIFICATION	1.0693472533910572E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999972387586785	WITHOUT_CLASSIFICATION	2.7612413214108476E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999990798480328	WITHOUT_CLASSIFICATION	9.201519671433113E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842182025	WITHOUT_CLASSIFICATION	7.157817975351805E-7	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999136417292	WITHOUT_CLASSIFICATION	8.635827082805767E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999904277197	WITHOUT_CLASSIFICATION	9.572280309514158E-9	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999714167828	WITHOUT_CLASSIFICATION	2.8583217298721543E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999953859245	WITHOUT_CLASSIFICATION	4.614075418433335E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999990310920386	WITHOUT_CLASSIFICATION	9.68907961422013E-7	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999747634944	WITHOUT_CLASSIFICATION	2.523650556605357E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999926892433	WITHOUT_CLASSIFICATION	7.310756561368709E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999364965265756	WITHOUT_CLASSIFICATION	6.35034734243393E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995971568514	WITHOUT_CLASSIFICATION	4.0284314851197764E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999941661811216	WITHOUT_CLASSIFICATION	5.833818878335037E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999994097139138	WITHOUT_CLASSIFICATION	5.902860861872649E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996635849194	WITHOUT_CLASSIFICATION	3.364150805609642E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992194689262	WITHOUT_CLASSIFICATION	7.805310738133922E-7	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998281532423	WITHOUT_CLASSIFICATION	1.7184675764480958E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999992018540262	WITHOUT_CLASSIFICATION	7.981459737745169E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999992018540262	WITHOUT_CLASSIFICATION	7.981459737745169E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999999027571204	WITHOUT_CLASSIFICATION	9.724287965063102E-8	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999997942500772	WITHOUT_CLASSIFICATION	2.057499226692858E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999989426559579	WITHOUT_CLASSIFICATION	1.0573440421272749E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999989426559579	WITHOUT_CLASSIFICATION	1.0573440421272749E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997739914295	WITHOUT_CLASSIFICATION	2.260085705483813E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999991961653188	WITHOUT_CLASSIFICATION	8.038346811024057E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999980907639707	WITHOUT_CLASSIFICATION	1.9092360292715977E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998140459377	WITHOUT_CLASSIFICATION	1.8595406239812056E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999993515596085	WITHOUT_CLASSIFICATION	6.48440391495E-7	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999986937293153	WITHOUT_CLASSIFICATION	1.306270684760797E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999998071960936	WITHOUT_CLASSIFICATION	1.9280390629816278E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999999911298684	WITHOUT_CLASSIFICATION	8.870131598895355E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999522614035	WITHOUT_CLASSIFICATION	4.773859643969184E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999522614035	WITHOUT_CLASSIFICATION	4.773859643969184E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999995457871	WITHOUT_CLASSIFICATION	4.542129989408368E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998745120439	WITHOUT_CLASSIFICATION	1.2548795624907273E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998745120439	WITHOUT_CLASSIFICATION	1.2548795624907273E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999823084549	WITHOUT_CLASSIFICATION	1.7691545116359365E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999075187701	WITHOUT_CLASSIFICATION	9.248122991952914E-8	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9938451775046891	WITHOUT_CLASSIFICATION	0.00615482249531084	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999290324073	WITHOUT_CLASSIFICATION	7.096759267006411E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999812802591	WITHOUT_CLASSIFICATION	1.8719740843140293E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999129644859	WITHOUT_CLASSIFICATION	8.703551412334581E-8	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999995536430096	WITHOUT_CLASSIFICATION	4.463569903054875E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998811892129443	WITHOUT_CLASSIFICATION	1.18810787055729E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999502306658	WITHOUT_CLASSIFICATION	4.976933419766985E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999927806068524	WITHOUT_CLASSIFICATION	7.219393147673416E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999865765765	WITHOUT_CLASSIFICATION	1.3423423542185609E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999929855695	WITHOUT_CLASSIFICATION	7.014430498079523E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928276779492	WITHOUT_CLASSIFICATION	7.172322050864315E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928276779492	WITHOUT_CLASSIFICATION	7.172322050864315E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928276779492	WITHOUT_CLASSIFICATION	7.172322050864315E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928276779492	WITHOUT_CLASSIFICATION	7.172322050864315E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999994846262239	WITHOUT_CLASSIFICATION	5.153737760905668E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999992645425783	WITHOUT_CLASSIFICATION	7.354574218205202E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999997319639746	WITHOUT_CLASSIFICATION	2.680360254006776E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999917517335528	WITHOUT_CLASSIFICATION	8.248266447198072E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983667998875	WITHOUT_CLASSIFICATION	1.633200112472226E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999996335646066	WITHOUT_CLASSIFICATION	3.6643539330224704E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999958453692295	WITHOUT_CLASSIFICATION	4.154630770447691E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999990573440616	WITHOUT_CLASSIFICATION	9.426559383686545E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999596967353	WITHOUT_CLASSIFICATION	4.030326470045963E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999735934941	WITHOUT_CLASSIFICATION	2.6406505889617122E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.99999982675198	WITHOUT_CLASSIFICATION	1.732480200123766E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996413160483	WITHOUT_CLASSIFICATION	3.5868395160504523E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9566101048153722	WITHOUT_CLASSIFICATION	0.04338989518462788	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999949036740999	WITHOUT_CLASSIFICATION	5.096325900080297E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999891895817464	WITHOUT_CLASSIFICATION	1.0810418253608498E-5	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996413160483	WITHOUT_CLASSIFICATION	3.5868395160504523E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999940414445091	WITHOUT_CLASSIFICATION	5.958555490887831E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999996254042	WITHOUT_CLASSIFICATION	3.745957296452308E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999790322812	WITHOUT_CLASSIFICATION	2.0967718737869544E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999968450496372	WITHOUT_CLASSIFICATION	3.1549503627682394E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998928996192	WITHOUT_CLASSIFICATION	1.0710038087319414E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998978094976	WITHOUT_CLASSIFICATION	1.021905023071448E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999995847901	WITHOUT_CLASSIFICATION	4.1520986205950566E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999997005503193	WITHOUT_CLASSIFICATION	2.9944968065219997E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999859477914	WITHOUT_CLASSIFICATION	1.405220864672468E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999702709347	WITHOUT_CLASSIFICATION	2.972906524412844E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999706026438	WITHOUT_CLASSIFICATION	2.9397356191624525E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998632111676	WITHOUT_CLASSIFICATION	1.3678883234769783E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999980681359636	WITHOUT_CLASSIFICATION	1.931864036322043E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998369901950586	WITHOUT_CLASSIFICATION	1.6300980494142448E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998747837107	WITHOUT_CLASSIFICATION	1.2521628928413838E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999989469602848	WITHOUT_CLASSIFICATION	1.053039715189149E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996955430284	WITHOUT_CLASSIFICATION	3.044569715771787E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997896999355	WITHOUT_CLASSIFICATION	2.103000644875427E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990802809278	WITHOUT_CLASSIFICATION	9.197190722795643E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997896999355	WITHOUT_CLASSIFICATION	2.103000644875427E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999462385311	WITHOUT_CLASSIFICATION	5.376146901366826E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995830069413	WITHOUT_CLASSIFICATION	4.1699305867201816E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999999589822609	WITHOUT_CLASSIFICATION	4.1017739021187705E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999946714413503	WITHOUT_CLASSIFICATION	5.328558649680628E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996955430284	WITHOUT_CLASSIFICATION	3.044569715771787E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990802809278	WITHOUT_CLASSIFICATION	9.197190722795643E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999462385311	WITHOUT_CLASSIFICATION	5.376146901366826E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998885344447	WITHOUT_CLASSIFICATION	1.1146555533463927E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999999381564975	WITHOUT_CLASSIFICATION	6.184350259130892E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999957493196103	WITHOUT_CLASSIFICATION	4.250680389734661E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999985989574334	WITHOUT_CLASSIFICATION	1.4010425667126417E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998308573689	WITHOUT_CLASSIFICATION	1.6914263120975432E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999783068158	WITHOUT_CLASSIFICATION	2.1693184142643475E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842182025	WITHOUT_CLASSIFICATION	7.157817975351805E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995830069413	WITHOUT_CLASSIFICATION	4.1699305867201816E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999559493534	WITHOUT_CLASSIFICATION	4.4050646451839067E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999023022107	WITHOUT_CLASSIFICATION	9.769778938937474E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999796243204	WITHOUT_CLASSIFICATION	2.037567964459514E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842182025	WITHOUT_CLASSIFICATION	7.157817975351805E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999995592138393	WITHOUT_CLASSIFICATION	4.407861606899334E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842182025	WITHOUT_CLASSIFICATION	7.157817975351805E-7	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999272822067	WITHOUT_CLASSIFICATION	7.271779332743822E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994894332103	WITHOUT_CLASSIFICATION	5.105667898367228E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999998597215953	WITHOUT_CLASSIFICATION	1.4027840470164093E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999198302985	WITHOUT_CLASSIFICATION	8.01697014334189E-8	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999659659565	WITHOUT_CLASSIFICATION	3.403404347003204E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999998033365375	WITHOUT_CLASSIFICATION	1.966634624259198E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999151294885	WITHOUT_CLASSIFICATION	8.487051148198164E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999994498470329	WITHOUT_CLASSIFICATION	5.501529669852678E-7	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999989518048373	WITHOUT_CLASSIFICATION	1.048195162707836E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999942952461008	WITHOUT_CLASSIFICATION	5.704753899196846E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999890967551175	WITHOUT_CLASSIFICATION	1.0903244882519462E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999993549934406	WITHOUT_CLASSIFICATION	6.450065595031264E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9938451775046891	WITHOUT_CLASSIFICATION	0.00615482249531084	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999898952862065	WITHOUT_CLASSIFICATION	1.0104713793490767E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999925383143282	WITHOUT_CLASSIFICATION	7.461685671800035E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999994251746768	WITHOUT_CLASSIFICATION	5.748253231966828E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999605757250593	WITHOUT_CLASSIFICATION	3.942427494075132E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999404977258	WITHOUT_CLASSIFICATION	5.950227417030783E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999281069073	WITHOUT_CLASSIFICATION	7.189309261571455E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999939051158	WITHOUT_CLASSIFICATION	6.0948841090036116E-9	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999989924204911	WITHOUT_CLASSIFICATION	1.007579508985299E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999983893301	WITHOUT_CLASSIFICATION	1.6106698868712294E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999998909609902	WITHOUT_CLASSIFICATION	1.0903900981459697E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.992465415706382	WITHOUT_CLASSIFICATION	0.007534584293617952	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999835821875894	WITHOUT_CLASSIFICATION	1.6417812410580475E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999964273967268	WITHOUT_CLASSIFICATION	3.572603273200562E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999925284624559	WITHOUT_CLASSIFICATION	7.4715375440742985E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999963797567785	WITHOUT_CLASSIFICATION	3.6202432215080182E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999819616919805	WITHOUT_CLASSIFICATION	1.8038308019515268E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984317276742	WITHOUT_CLASSIFICATION	1.5682723258005738E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999958702688	WITHOUT_CLASSIFICATION	4.129731177297224E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999988351607	WITHOUT_CLASSIFICATION	1.1648393290725506E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999902389055989	WITHOUT_CLASSIFICATION	9.761094401183116E-6	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999887822827159	WITHOUT_CLASSIFICATION	1.1217717284055214E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9972260442874933	WITHOUT_CLASSIFICATION	0.0027739557125067357	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999982081496362	WITHOUT_CLASSIFICATION	1.7918503637969396E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.99999880392487	WITHOUT_CLASSIFICATION	1.1960751300328535E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999960539296536	WITHOUT_CLASSIFICATION	3.94607034642703E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999652561789381	WITHOUT_CLASSIFICATION	3.4743821062035224E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.99999800600049	WITHOUT_CLASSIFICATION	1.9939995099910185E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.993980213034377	WITHOUT_CLASSIFICATION	0.006019786965622933	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999444260887	WITHOUT_CLASSIFICATION	5.557391130825501E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993102028923	WITHOUT_CLASSIFICATION	6.897971076160609E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999879956294889	WITHOUT_CLASSIFICATION	1.2004370511072446E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999879956294889	WITHOUT_CLASSIFICATION	1.2004370511072446E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999460935753	WITHOUT_CLASSIFICATION	5.390642477835294E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999994498470329	WITHOUT_CLASSIFICATION	5.501529669852678E-7	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999986937637937	WITHOUT_CLASSIFICATION	1.3062362062931443E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999987253649412	WITHOUT_CLASSIFICATION	1.2746350588440084E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999971737502	WITHOUT_CLASSIFICATION	2.826249876288839E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999999963783073	WITHOUT_CLASSIFICATION	3.621692699762598E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999968026885998	WITHOUT_CLASSIFICATION	3.1973114001520845E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998687937567392	WITHOUT_CLASSIFICATION	1.3120624326072702E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999615308888374	WITHOUT_CLASSIFICATION	3.846911116263466E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999993507500496	WITHOUT_CLASSIFICATION	6.492499503355292E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999550657671	WITHOUT_CLASSIFICATION	4.493423279744627E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999936327699	WITHOUT_CLASSIFICATION	6.3672301377019375E-9	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999345241531	WITHOUT_CLASSIFICATION	6.547584683912541E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999595197494993	WITHOUT_CLASSIFICATION	4.048025050064701E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999993957986292	WITHOUT_CLASSIFICATION	6.042013707141359E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999448037094	WITHOUT_CLASSIFICATION	5.519629071159762E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999663971162	WITHOUT_CLASSIFICATION	3.3602883866572435E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999945629545	WITHOUT_CLASSIFICATION	5.437045542497095E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999608110942	WITHOUT_CLASSIFICATION	3.918890584270354E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999892032191	WITHOUT_CLASSIFICATION	1.0796780887377433E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999986194823	WITHOUT_CLASSIFICATION	1.3805175995084102E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999998945898507	WITHOUT_CLASSIFICATION	1.0541014929757459E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.99999963270163	WITHOUT_CLASSIFICATION	3.6729837001130347E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999960941367	WITHOUT_CLASSIFICATION	3.90586330822118E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.993980213034377	WITHOUT_CLASSIFICATION	0.006019786965622933	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999728142412	WITHOUT_CLASSIFICATION	2.7185758718426335E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999936529359	WITHOUT_CLASSIFICATION	6.347064089671481E-9	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999924662374	WITHOUT_CLASSIFICATION	7.533762580820622E-9	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999886586526181	WITHOUT_CLASSIFICATION	1.134134738192367E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999999898396607	WITHOUT_CLASSIFICATION	1.0160339300287915E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999996863277446	WITHOUT_CLASSIFICATION	3.1367225541652856E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999070261541079	WITHOUT_CLASSIFICATION	9.29738458921112E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999859381717	WITHOUT_CLASSIFICATION	1.4061828299851408E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999628675754	WITHOUT_CLASSIFICATION	3.713242460438059E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998841400134	WITHOUT_CLASSIFICATION	1.1585998657963654E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998135162453	WITHOUT_CLASSIFICATION	1.8648375465181284E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9997419837937569	WITHOUT_CLASSIFICATION	2.580162062430959E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999966165421591	WITHOUT_CLASSIFICATION	3.3834578408483224E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999575645637	WITHOUT_CLASSIFICATION	4.243543630251413E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999826093138	WITHOUT_CLASSIFICATION	1.7390686180775475E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999826093138	WITHOUT_CLASSIFICATION	1.7390686180775475E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999592918932	WITHOUT_CLASSIFICATION	4.070810682219377E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999999811253994	WITHOUT_CLASSIFICATION	1.8874600608774714E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999966853000252	WITHOUT_CLASSIFICATION	3.3146999748119953E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999966853000252	WITHOUT_CLASSIFICATION	3.3146999748119953E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999953538471	WITHOUT_CLASSIFICATION	4.646152878400585E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999991375085242	WITHOUT_CLASSIFICATION	8.624914757171592E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999811905473	WITHOUT_CLASSIFICATION	1.8809452580242363E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996212162576	WITHOUT_CLASSIFICATION	3.787837423673842E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999985000471987	WITHOUT_CLASSIFICATION	1.4999528012329455E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996885856242	WITHOUT_CLASSIFICATION	3.1141437586506336E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999852514335	WITHOUT_CLASSIFICATION	1.4748566469171544E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999852514335	WITHOUT_CLASSIFICATION	1.4748566469171544E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990607159397	WITHOUT_CLASSIFICATION	9.392840603119785E-7	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999782033229	WITHOUT_CLASSIFICATION	2.1796677191575317E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999938145160966	WITHOUT_CLASSIFICATION	6.185483903459137E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999897636406	WITHOUT_CLASSIFICATION	1.0236359469077294E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999897636406	WITHOUT_CLASSIFICATION	1.0236359469077294E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999309212994	WITHOUT_CLASSIFICATION	6.907870074552566E-8	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999768003753	WITHOUT_CLASSIFICATION	2.319962456085039E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999959148063254	WITHOUT_CLASSIFICATION	4.0851936745691824E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998462502234	WITHOUT_CLASSIFICATION	1.5374977662811913E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999652267016	WITHOUT_CLASSIFICATION	3.477329833321316E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999999903965089	WITHOUT_CLASSIFICATION	9.603491105658577E-8	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999804308561	WITHOUT_CLASSIFICATION	1.9569143868755756E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998904397013	WITHOUT_CLASSIFICATION	1.0956029881775746E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998813682395	WITHOUT_CLASSIFICATION	1.1863176061240652E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999989292952327	WITHOUT_CLASSIFICATION	1.0707047673554707E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998366550477	WITHOUT_CLASSIFICATION	1.6334495235226692E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999960252778953	WITHOUT_CLASSIFICATION	3.974722104653274E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999642850391354	WITHOUT_CLASSIFICATION	3.571496086467439E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999994213949213	WITHOUT_CLASSIFICATION	5.786050787990562E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999992834247666	WITHOUT_CLASSIFICATION	7.16575233279647E-7	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999991914300954	WITHOUT_CLASSIFICATION	8.085699046980776E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999910958483	WITHOUT_CLASSIFICATION	8.904151728462627E-9	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999993534741806	WITHOUT_CLASSIFICATION	6.465258193796071E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999999790485629	WITHOUT_CLASSIFICATION	2.095143709094881E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999994959457447	WITHOUT_CLASSIFICATION	5.040542552944337E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999999877529297	WITHOUT_CLASSIFICATION	1.2247070291865375E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999999836229294	WITHOUT_CLASSIFICATION	1.6377070603151424E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999926651031692	WITHOUT_CLASSIFICATION	7.33489683081983E-6	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999700848616122	WITHOUT_CLASSIFICATION	2.991513838770006E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999813018606908	WITHOUT_CLASSIFICATION	1.86981393091577E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999161291829	WITHOUT_CLASSIFICATION	8.387081712773578E-8	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999995888290452	WITHOUT_CLASSIFICATION	4.1117095486872855E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999859120327543	WITHOUT_CLASSIFICATION	1.4087967245721044E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999979129389	WITHOUT_CLASSIFICATION	2.087060998792368E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999780323916	WITHOUT_CLASSIFICATION	2.1967608335312123E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999063120494	WITHOUT_CLASSIFICATION	9.368795066804625E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999999989618678	WITHOUT_CLASSIFICATION	1.0381321954171756E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999813856845	WITHOUT_CLASSIFICATION	1.8614315537166555E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999977709066274	WITHOUT_CLASSIFICATION	2.2290933724904453E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999856298701	WITHOUT_CLASSIFICATION	1.4370129927797447E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999845595633128	WITHOUT_CLASSIFICATION	1.5440436687162215E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999945590925817	WITHOUT_CLASSIFICATION	5.440907418300934E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999993951905041	WITHOUT_CLASSIFICATION	6.048094959318821E-7	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999999913483503	WITHOUT_CLASSIFICATION	8.65164969886666E-8	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998629616911	WITHOUT_CLASSIFICATION	1.3703830900905388E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999959272388	WITHOUT_CLASSIFICATION	4.072761200831252E-8	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997544581715	WITHOUT_CLASSIFICATION	2.455418286167813E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999998549312985	WITHOUT_CLASSIFICATION	1.450687015709507E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999854899511	WITHOUT_CLASSIFICATION	1.4510049003539524E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999998626659375	WITHOUT_CLASSIFICATION	1.3733406247143796E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.99999990967106	WITHOUT_CLASSIFICATION	9.032893994827159E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.999999779224127	WITHOUT_CLASSIFICATION	2.207758731076901E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999977894171586	WITHOUT_CLASSIFICATION	2.2105828415201493E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999387807236	WITHOUT_CLASSIFICATION	6.121927648430376E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999990676832027	WITHOUT_CLASSIFICATION	9.32316797302336E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999998841227998	WITHOUT_CLASSIFICATION	1.1587720018602367E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999789717453	WITHOUT_CLASSIFICATION	2.102825475208071E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999982149473416	WITHOUT_CLASSIFICATION	1.7850526584234767E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999972094006	WITHOUT_CLASSIFICATION	2.7905995279670635E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999996771975173	WITHOUT_CLASSIFICATION	3.228024827202478E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999492126301	WITHOUT_CLASSIFICATION	5.0787369918492146E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999723534703	WITHOUT_CLASSIFICATION	2.764652977283264E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999560847453	WITHOUT_CLASSIFICATION	4.3915254628896984E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999999011798146	WITHOUT_CLASSIFICATION	9.882018540312796E-8	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999663981188561	WITHOUT_CLASSIFICATION	3.3601881143929616E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999996516830583	WITHOUT_CLASSIFICATION	3.4831694167706547E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999996516830583	WITHOUT_CLASSIFICATION	3.4831694167706547E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999991927894552	WITHOUT_CLASSIFICATION	8.07210544792264E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999991894804201	WITHOUT_CLASSIFICATION	8.105195798963383E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999628482568	WITHOUT_CLASSIFICATION	3.71517431729067E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999778722418	WITHOUT_CLASSIFICATION	2.212775807085507E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998421722197	WITHOUT_CLASSIFICATION	1.5782778028964868E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999974875537007	WITHOUT_CLASSIFICATION	2.5124462994479036E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999464703849	WITHOUT_CLASSIFICATION	5.352961498708411E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999982649687	WITHOUT_CLASSIFICATION	1.7350313176131042E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999993917652732	WITHOUT_CLASSIFICATION	6.082347267849094E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999998780460507	WITHOUT_CLASSIFICATION	1.219539492966319E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999800730301	WITHOUT_CLASSIFICATION	1.9926969769561988E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999997468879026	WITHOUT_CLASSIFICATION	2.5311209739761914E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999825116209	WITHOUT_CLASSIFICATION	1.7488379095789225E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999999991235737	WITHOUT_CLASSIFICATION	8.764262989141912E-9	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994106430579	WITHOUT_CLASSIFICATION	5.893569422217823E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994106430579	WITHOUT_CLASSIFICATION	5.893569422217823E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999811011927	WITHOUT_CLASSIFICATION	1.889880731179279E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999997480698274	WITHOUT_CLASSIFICATION	2.5193017253519115E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998576232424	WITHOUT_CLASSIFICATION	1.4237675759680679E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999932854469	WITHOUT_CLASSIFICATION	6.714553122655342E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999448006038	WITHOUT_CLASSIFICATION	5.519939614072014E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970243216596	WITHOUT_CLASSIFICATION	2.9756783403456406E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999980996732692	WITHOUT_CLASSIFICATION	1.9003267307339714E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999969245754049	WITHOUT_CLASSIFICATION	3.075424595054071E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999981177391	WITHOUT_CLASSIFICATION	1.882261004137801E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999627663455788	WITHOUT_CLASSIFICATION	3.723365442127328E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999992453024	WITHOUT_CLASSIFICATION	7.546977070775253E-10	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991518060161	WITHOUT_CLASSIFICATION	8.481939839030959E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999944821514	WITHOUT_CLASSIFICATION	5.517848622916656E-9	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994678235752	WITHOUT_CLASSIFICATION	5.32176424764076E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999998832207936	WITHOUT_CLASSIFICATION	1.1677920639695778E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998567566932	WITHOUT_CLASSIFICATION	1.4324330670558904E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999979610166726	WITHOUT_CLASSIFICATION	2.0389833274971517E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999990132985408	WITHOUT_CLASSIFICATION	9.86701459210467E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999769031955	WITHOUT_CLASSIFICATION	2.3096804417353653E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999638261706	WITHOUT_CLASSIFICATION	3.617382933411751E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999850448673	WITHOUT_CLASSIFICATION	1.495513268146981E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999860137087	WITHOUT_CLASSIFICATION	1.398629136771813E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999995963500016	WITHOUT_CLASSIFICATION	4.036499984779015E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.999982998428397	WITHOUT_CLASSIFICATION	1.7001571603026307E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999472803346451	WITHOUT_CLASSIFICATION	5.271966535496797E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999997618516556	WITHOUT_CLASSIFICATION	2.381483444678797E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999916465805	WITHOUT_CLASSIFICATION	8.353419505622231E-9	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999564239962	WITHOUT_CLASSIFICATION	4.357600373735711E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999982335038082	WITHOUT_CLASSIFICATION	1.7664961917030733E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998253999796	WITHOUT_CLASSIFICATION	1.7460002057003465E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999626762852712	WITHOUT_CLASSIFICATION	3.732371472872252E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998686784977	WITHOUT_CLASSIFICATION	1.3132150237528153E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999980836584	WITHOUT_CLASSIFICATION	1.916341646988565E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999944388089	WITHOUT_CLASSIFICATION	5.561191088079916E-9	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999997404486709	WITHOUT_CLASSIFICATION	2.5955132909559505E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999687280966	WITHOUT_CLASSIFICATION	3.127190339318806E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999863945503	WITHOUT_CLASSIFICATION	1.3605449627921503E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988147138296	WITHOUT_CLASSIFICATION	1.185286170446337E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999993962940026	WITHOUT_CLASSIFICATION	6.037059974655749E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999550941031	WITHOUT_CLASSIFICATION	4.490589694291059E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999988748190815	WITHOUT_CLASSIFICATION	1.1251809186148577E-6	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999988748190815	WITHOUT_CLASSIFICATION	1.1251809186148577E-6	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998629107408	WITHOUT_CLASSIFICATION	1.370892592113947E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999985359752873	WITHOUT_CLASSIFICATION	1.4640247127372813E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999967479183	WITHOUT_CLASSIFICATION	3.2520818203021315E-9	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999999911062875	WITHOUT_CLASSIFICATION	8.893712507478793E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999659818208	WITHOUT_CLASSIFICATION	3.40181791793403E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999942787962	WITHOUT_CLASSIFICATION	5.72120393665698E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999760241489	WITHOUT_CLASSIFICATION	2.3975851112263667E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999981240771388	WITHOUT_CLASSIFICATION	1.875922861167973E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999821733793	WITHOUT_CLASSIFICATION	1.7826620723588036E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996103859868	WITHOUT_CLASSIFICATION	3.8961401317221927E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999979562027	WITHOUT_CLASSIFICATION	2.043797300762646E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999295666408838	WITHOUT_CLASSIFICATION	7.043335911611958E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999822914639995	WITHOUT_CLASSIFICATION	1.7708536000374944E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998390675179	WITHOUT_CLASSIFICATION	1.609324822500534E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999528552496	WITHOUT_CLASSIFICATION	4.7144750441669656E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999997784084552	WITHOUT_CLASSIFICATION	2.2159154474713042E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999815500157	WITHOUT_CLASSIFICATION	1.8449984338590814E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999992607945	WITHOUT_CLASSIFICATION	7.392055774922078E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999953187346692	WITHOUT_CLASSIFICATION	4.681265330730775E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999973967757403	WITHOUT_CLASSIFICATION	2.6032242597984437E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996399961765	WITHOUT_CLASSIFICATION	3.6000382353014505E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999739285929	WITHOUT_CLASSIFICATION	2.60714071741578E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999921713628845	WITHOUT_CLASSIFICATION	7.82863711545231E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999949785015146	WITHOUT_CLASSIFICATION	5.021498485397903E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999924101177389	WITHOUT_CLASSIFICATION	7.589882261155249E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999961964106302	WITHOUT_CLASSIFICATION	3.803589369844292E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999961904352	WITHOUT_CLASSIFICATION	3.809564715148535E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999822513889911	WITHOUT_CLASSIFICATION	1.774861100892687E-5	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999680185768	WITHOUT_CLASSIFICATION	3.19814232056365E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999543596336	WITHOUT_CLASSIFICATION	4.5640366372518567E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999846597583	WITHOUT_CLASSIFICATION	1.5340241709025172E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999996666649167	WITHOUT_CLASSIFICATION	3.333350832813017E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999590737085	WITHOUT_CLASSIFICATION	4.092629155959903E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999991256463	WITHOUT_CLASSIFICATION	8.743537077424918E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999993275754194	WITHOUT_CLASSIFICATION	6.724245805959409E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999777146141	WITHOUT_CLASSIFICATION	2.2285385781400455E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999994406001097	WITHOUT_CLASSIFICATION	5.593998903039837E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999812336086	WITHOUT_CLASSIFICATION	1.8766391425647102E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999961822648318	WITHOUT_CLASSIFICATION	3.817735168168308E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999985325263472	WITHOUT_CLASSIFICATION	1.4674736527502847E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993027013367	WITHOUT_CLASSIFICATION	6.972986632709902E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999771207821	WITHOUT_CLASSIFICATION	2.287921791112271E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999479725803	WITHOUT_CLASSIFICATION	5.202741959013372E-8	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998997945424032	WITHOUT_CLASSIFICATION	1.0020545759678267E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999956569437	WITHOUT_CLASSIFICATION	4.343056311113312E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999998942419478	WITHOUT_CLASSIFICATION	1.0575805221444569E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997576035438	WITHOUT_CLASSIFICATION	2.4239645621936566E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999825116209	WITHOUT_CLASSIFICATION	1.7488379095789225E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999997005896099	WITHOUT_CLASSIFICATION	2.9941039012263713E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999840096805	WITHOUT_CLASSIFICATION	1.5990319468502498E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999590050536	WITHOUT_CLASSIFICATION	4.09949464500967E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999688727219	WITHOUT_CLASSIFICATION	3.112727806909245E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999263244392	WITHOUT_CLASSIFICATION	7.367556084873314E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999638683705	WITHOUT_CLASSIFICATION	3.613162940532197E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999991630734303	WITHOUT_CLASSIFICATION	8.369265695899081E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999968022118706	WITHOUT_CLASSIFICATION	3.197788129425582E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997815868932	WITHOUT_CLASSIFICATION	2.1841310690195223E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998018717026	WITHOUT_CLASSIFICATION	1.9812829736769894E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999109517869	WITHOUT_CLASSIFICATION	8.904821304010867E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998367232263	WITHOUT_CLASSIFICATION	1.632767736858653E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999997129087951	WITHOUT_CLASSIFICATION	2.8709120489113487E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999492656589	WITHOUT_CLASSIFICATION	5.0734341038804196E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994993725768	WITHOUT_CLASSIFICATION	5.006274231902633E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999970198264418	WITHOUT_CLASSIFICATION	2.9801735581116443E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999980813340942	WITHOUT_CLASSIFICATION	1.9186659058004896E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999853037406	WITHOUT_CLASSIFICATION	1.4696259377457753E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999998571677055	WITHOUT_CLASSIFICATION	1.4283229449805441E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994993725768	WITHOUT_CLASSIFICATION	5.006274231902633E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994705870686621	WITHOUT_CLASSIFICATION	5.294129313379801E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999702735003	WITHOUT_CLASSIFICATION	2.9726499632765135E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999821659811	WITHOUT_CLASSIFICATION	1.78340190029897E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999192853262	WITHOUT_CLASSIFICATION	8.071467375735373E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999932548335029	WITHOUT_CLASSIFICATION	6.7451664971884125E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999880289317	WITHOUT_CLASSIFICATION	1.1971068309447196E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999961389022	WITHOUT_CLASSIFICATION	3.861097745918212E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999984838911584	WITHOUT_CLASSIFICATION	1.5161088415946976E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999140489596	WITHOUT_CLASSIFICATION	8.595104041978517E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998979074204	WITHOUT_CLASSIFICATION	1.0209257963242685E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999997119143101	WITHOUT_CLASSIFICATION	2.880856898767029E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998214142468181	WITHOUT_CLASSIFICATION	1.7858575318183752E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999911215635	WITHOUT_CLASSIFICATION	8.878436534216814E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999970242905	WITHOUT_CLASSIFICATION	2.975709470560393E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999290935133	WITHOUT_CLASSIFICATION	7.09064866810738E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999960941367	WITHOUT_CLASSIFICATION	3.90586330822118E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999894033894	WITHOUT_CLASSIFICATION	1.0596610587641616E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999968782188	WITHOUT_CLASSIFICATION	3.1217810919777384E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999826023783412	WITHOUT_CLASSIFICATION	1.7397621658741103E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999834283418	WITHOUT_CLASSIFICATION	1.6571658168580337E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999528223464	WITHOUT_CLASSIFICATION	4.717765359660247E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999807083566	WITHOUT_CLASSIFICATION	1.9291643467743955E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999977111076	WITHOUT_CLASSIFICATION	2.288892440082474E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999994357177	WITHOUT_CLASSIFICATION	5.642821822845422E-10	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999993065459	WITHOUT_CLASSIFICATION	6.934540293863849E-10	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999993468225112	WITHOUT_CLASSIFICATION	6.531774887442346E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999846463514082	WITHOUT_CLASSIFICATION	1.5353648591763624E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999665704071	WITHOUT_CLASSIFICATION	3.34295929078174E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999999397316274	WITHOUT_CLASSIFICATION	6.026837259220793E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999998384029543	WITHOUT_CLASSIFICATION	1.6159704566500103E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999325306835	WITHOUT_CLASSIFICATION	6.746931649768911E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999992933516442	WITHOUT_CLASSIFICATION	7.066483558476764E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999999804795274	WITHOUT_CLASSIFICATION	1.952047259363122E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999982094686	WITHOUT_CLASSIFICATION	1.7905314190438732E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999527459518	WITHOUT_CLASSIFICATION	4.725404812514019E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997637487035	WITHOUT_CLASSIFICATION	2.362512964902628E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999953147677018	WITHOUT_CLASSIFICATION	4.685232298233534E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999998454494816	WITHOUT_CLASSIFICATION	1.5455051843726595E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999948588625	WITHOUT_CLASSIFICATION	5.141137538856834E-9	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999810144254	WITHOUT_CLASSIFICATION	1.8985574550293584E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999972250911	WITHOUT_CLASSIFICATION	2.7749089006946776E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999972250911	WITHOUT_CLASSIFICATION	2.7749089006946776E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999914250944394	WITHOUT_CLASSIFICATION	8.57490556061541E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999859240184	WITHOUT_CLASSIFICATION	1.4075981740045622E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999102108424	WITHOUT_CLASSIFICATION	8.978915751845599E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.8889526890809368	TEST	0.11104731091906316	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999998140459377	WITHOUT_CLASSIFICATION	1.8595406239812056E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998140459377	WITHOUT_CLASSIFICATION	1.8595406239812056E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999985781452162	WITHOUT_CLASSIFICATION	1.4218547838288443E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998753641584	WITHOUT_CLASSIFICATION	1.2463584157295462E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999618801060971	WITHOUT_CLASSIFICATION	3.811989390282606E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999252422227254	WITHOUT_CLASSIFICATION	7.475777727462245E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999923478659	WITHOUT_CLASSIFICATION	7.652134099830471E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999991984475857	WITHOUT_CLASSIFICATION	8.015524143462913E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997955764232	WITHOUT_CLASSIFICATION	2.0442357686122623E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999360711016	WITHOUT_CLASSIFICATION	6.392889838503181E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9997818846968183	WITHOUT_CLASSIFICATION	2.1811530318171672E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970976010932	WITHOUT_CLASSIFICATION	2.9023989067905778E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970976010932	WITHOUT_CLASSIFICATION	2.9023989067905778E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999778531107919	WITHOUT_CLASSIFICATION	2.21468892080824E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999993445761027	WITHOUT_CLASSIFICATION	6.554238971480988E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999995566619604	WITHOUT_CLASSIFICATION	4.433380396187115E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999054368101848	WITHOUT_CLASSIFICATION	9.456318981518012E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999975312500708	WITHOUT_CLASSIFICATION	2.4687499291418394E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999650461465	WITHOUT_CLASSIFICATION	3.4953853502276065E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945938934809	WITHOUT_CLASSIFICATION	5.4061065191475746E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999425875966	WITHOUT_CLASSIFICATION	5.7412403420532215E-8	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999982143810741	WITHOUT_CLASSIFICATION	1.7856189259880417E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999994538049747	WITHOUT_CLASSIFICATION	5.461950253486415E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999944806281	WITHOUT_CLASSIFICATION	5.519371895668099E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998979074204	WITHOUT_CLASSIFICATION	1.0209257963242685E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999832167722	WITHOUT_CLASSIFICATION	1.6783227749023723E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999661787999906	WITHOUT_CLASSIFICATION	3.382120000928175E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.99999999508757	WITHOUT_CLASSIFICATION	4.912430001702085E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999998006514808	WITHOUT_CLASSIFICATION	1.9934851919857933E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999967378170931	WITHOUT_CLASSIFICATION	3.262182906909167E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999979365627464	WITHOUT_CLASSIFICATION	2.063437253597726E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999891423704853	WITHOUT_CLASSIFICATION	1.0857629514658647E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998898779914	WITHOUT_CLASSIFICATION	1.1012200853836911E-7	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999727713238	WITHOUT_CLASSIFICATION	2.722867616829272E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999996813110176	WITHOUT_CLASSIFICATION	3.186889824114845E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999996813110176	WITHOUT_CLASSIFICATION	3.186889824114845E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996413160483	WITHOUT_CLASSIFICATION	3.5868395160504523E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999998361709	WITHOUT_CLASSIFICATION	1.6382905698840705E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999913105347525	WITHOUT_CLASSIFICATION	8.68946524737488E-6	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998817874596	WITHOUT_CLASSIFICATION	1.182125404751561E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999123715306	WITHOUT_CLASSIFICATION	8.762846947135878E-8	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999872224297	WITHOUT_CLASSIFICATION	1.2777570297878165E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998747837107	WITHOUT_CLASSIFICATION	1.2521628928413838E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999998811319	WITHOUT_CLASSIFICATION	1.1886809943445388E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998885344447	WITHOUT_CLASSIFICATION	1.1146555533463927E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999993210976024	WITHOUT_CLASSIFICATION	6.789023976346159E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992842182025	WITHOUT_CLASSIFICATION	7.157817975351805E-7	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999953868049981	WITHOUT_CLASSIFICATION	4.61319500187453E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999655131593	WITHOUT_CLASSIFICATION	3.448684073672501E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999521233367	WITHOUT_CLASSIFICATION	4.787666328837434E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999610181574	WITHOUT_CLASSIFICATION	3.898184261174379E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999999990776712	WITHOUT_CLASSIFICATION	9.22328804914216E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999748815837	WITHOUT_CLASSIFICATION	2.511841643283605E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977030706945	WITHOUT_CLASSIFICATION	2.2969293055838804E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999996874546134	WITHOUT_CLASSIFICATION	3.1254538649997255E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999996532485413	WITHOUT_CLASSIFICATION	3.4675145867303385E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999996702100645	WITHOUT_CLASSIFICATION	3.2978993547992275E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999463120816	WITHOUT_CLASSIFICATION	5.368791839612692E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999959148063254	WITHOUT_CLASSIFICATION	4.0851936745691824E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998601166611	WITHOUT_CLASSIFICATION	1.3988333890875806E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999995270098	WITHOUT_CLASSIFICATION	4.729902045407872E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999995270098	WITHOUT_CLASSIFICATION	4.729902045407872E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999976827994245	WITHOUT_CLASSIFICATION	2.3172005755004263E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996264963121	WITHOUT_CLASSIFICATION	3.735036878919442E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999780758646	WITHOUT_CLASSIFICATION	2.1924135466409E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999878340443	WITHOUT_CLASSIFICATION	1.216595571360922E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997438704965	WITHOUT_CLASSIFICATION	2.5612950350945E-7	TEST
