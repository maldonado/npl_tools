test out the optimizer:	WITHOUT_CLASSIFICATION	0.999540740457144	WITHOUT_CLASSIFICATION	4.592595428559972E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9997643856821877	WITHOUT_CLASSIFICATION	2.356143178124159E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999933680756071	WITHOUT_CLASSIFICATION	6.631924392983661E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999927317566949	WITHOUT_CLASSIFICATION	7.268243305066107E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999927317566949	WITHOUT_CLASSIFICATION	7.268243305066107E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999682085363351	WITHOUT_CLASSIFICATION	3.179146366481962E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999277067589312	WITHOUT_CLASSIFICATION	7.22932410687806E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999586642064887	WITHOUT_CLASSIFICATION	4.133579351139876E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999770513524172	WITHOUT_CLASSIFICATION	2.294864758286452E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999628328249986	WITHOUT_CLASSIFICATION	3.71671750013215E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999628328249986	WITHOUT_CLASSIFICATION	3.71671750013215E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999390133683677	WITHOUT_CLASSIFICATION	6.098663163226891E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999745844497904	WITHOUT_CLASSIFICATION	2.5415550209640896E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999697634245819	WITHOUT_CLASSIFICATION	3.023657541814721E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999654091753654	WITHOUT_CLASSIFICATION	3.4590824634665877E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999948279110887	WITHOUT_CLASSIFICATION	5.172088911350721E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999524817642058	WITHOUT_CLASSIFICATION	4.751823579431864E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999345945834894	WITHOUT_CLASSIFICATION	6.540541651053433E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999863410847053	WITHOUT_CLASSIFICATION	1.3658915294748055E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999523472818906	WITHOUT_CLASSIFICATION	4.7652718109330786E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999523472818906	WITHOUT_CLASSIFICATION	4.7652718109330786E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999116241255249	WITHOUT_CLASSIFICATION	8.837587447506978E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999440057081778	WITHOUT_CLASSIFICATION	5.599429182226927E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999123023698012	WITHOUT_CLASSIFICATION	8.76976301987967E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9998099744288229	WITHOUT_CLASSIFICATION	1.9002557117705712E-4	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999971337438068	WITHOUT_CLASSIFICATION	2.8662561931256567E-6	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999356704880203	WITHOUT_CLASSIFICATION	6.432951197964736E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999856821551738	WITHOUT_CLASSIFICATION	1.4317844826240452E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999883754562631	WITHOUT_CLASSIFICATION	1.1624543736862082E-5	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999721623187711	WITHOUT_CLASSIFICATION	2.783768122889466E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999524129176779	WITHOUT_CLASSIFICATION	4.7587082322167255E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9993226124789846	WITHOUT_CLASSIFICATION	6.773875210154612E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999953478307232	WITHOUT_CLASSIFICATION	4.652169276892646E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999786756139425	WITHOUT_CLASSIFICATION	2.132438605746196E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999730546179669	WITHOUT_CLASSIFICATION	2.6945382033127606E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999278191039999	WITHOUT_CLASSIFICATION	7.218089600022892E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999744711353984	WITHOUT_CLASSIFICATION	2.552886460152576E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999713872494507	WITHOUT_CLASSIFICATION	2.8612750549272875E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999532425598606	WITHOUT_CLASSIFICATION	4.675744013933375E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999532425598606	WITHOUT_CLASSIFICATION	4.675744013933375E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999744711353984	WITHOUT_CLASSIFICATION	2.552886460152576E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9973416520761212	WITHOUT_CLASSIFICATION	0.002658347923878725	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999324581170591	WITHOUT_CLASSIFICATION	6.754188294090707E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999540556874338	WITHOUT_CLASSIFICATION	4.594431256625192E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999813366632171	WITHOUT_CLASSIFICATION	1.8663336782921948E-5	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999998444833342	WITHOUT_CLASSIFICATION	1.5551666580635157E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9977121521113864	WITHOUT_CLASSIFICATION	0.0022878478886136045	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9997259997715103	WITHOUT_CLASSIFICATION	2.740002284896318E-4	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999800786501432	WITHOUT_CLASSIFICATION	1.9921349856844695E-5	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998914313774052	WITHOUT_CLASSIFICATION	1.0856862259487285E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999839659724155	WITHOUT_CLASSIFICATION	1.6034027584564474E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999532425598606	WITHOUT_CLASSIFICATION	4.675744013933375E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999924286110581	WITHOUT_CLASSIFICATION	7.571388942038904E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998109105959311	WITHOUT_CLASSIFICATION	1.8908940406882883E-4	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999506794389443	WITHOUT_CLASSIFICATION	4.9320561055752966E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999976114683586	WITHOUT_CLASSIFICATION	2.3885316414023532E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999901796490622	WITHOUT_CLASSIFICATION	9.820350937777447E-6	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999785312276596	WITHOUT_CLASSIFICATION	2.1468772340439354E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999614147743748	WITHOUT_CLASSIFICATION	3.8585225625203664E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999851116464893	WITHOUT_CLASSIFICATION	1.488835351069125E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999000347290325	WITHOUT_CLASSIFICATION	9.996527096744406E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999854911504	WITHOUT_CLASSIFICATION	1.4508849599862416E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999995734457482	WITHOUT_CLASSIFICATION	4.2655425179870645E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998893267512283	WITHOUT_CLASSIFICATION	1.106732487717053E-4	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999651398844837	WITHOUT_CLASSIFICATION	3.486011551634483E-5	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999710687822478	WITHOUT_CLASSIFICATION	2.89312177521852E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999961273104753	WITHOUT_CLASSIFICATION	3.8726895247488134E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999981858835569	WITHOUT_CLASSIFICATION	1.8141164429463173E-6	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999798843679448	WITHOUT_CLASSIFICATION	2.0115632055209365E-5	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999862741640672	WITHOUT_CLASSIFICATION	1.3725835932937998E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999936557455498	WITHOUT_CLASSIFICATION	6.3442544501967455E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999862395328903	WITHOUT_CLASSIFICATION	1.3760467109683705E-5	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998995954870457	WITHOUT_CLASSIFICATION	1.0040451295439712E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999197665248339	WITHOUT_CLASSIFICATION	8.023347516614439E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999686614267124	WITHOUT_CLASSIFICATION	3.133857328761106E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999864743416342	WITHOUT_CLASSIFICATION	1.3525658365827465E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999197665248339	WITHOUT_CLASSIFICATION	8.023347516614439E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996357767673	WITHOUT_CLASSIFICATION	3.6422323268470436E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998240076261897	WITHOUT_CLASSIFICATION	1.7599237381018724E-4	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999112850771962	WITHOUT_CLASSIFICATION	8.871492280385425E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999863561128408	WITHOUT_CLASSIFICATION	1.364388715919043E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999528544703478	WITHOUT_CLASSIFICATION	4.714552965217517E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999528544703478	WITHOUT_CLASSIFICATION	4.714552965217517E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999634986904279	WITHOUT_CLASSIFICATION	3.650130957208754E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999158867115028	WITHOUT_CLASSIFICATION	8.41132884971554E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999964767981458	WITHOUT_CLASSIFICATION	3.5232018542118894E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999577466042302	WITHOUT_CLASSIFICATION	4.2253395769893214E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999990227488436	WITHOUT_CLASSIFICATION	9.772511564030383E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999768596869428	WITHOUT_CLASSIFICATION	2.314031305709599E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999787515443347	WITHOUT_CLASSIFICATION	2.1248455665297822E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999953086212583	WITHOUT_CLASSIFICATION	4.691378741751039E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999819012880511	WITHOUT_CLASSIFICATION	1.809871194890989E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999765824848742	WITHOUT_CLASSIFICATION	2.341751512569783E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999732355541485	WITHOUT_CLASSIFICATION	2.6764445851454118E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999732355541485	WITHOUT_CLASSIFICATION	2.6764445851454118E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999893018131563	WITHOUT_CLASSIFICATION	1.0698186843754058E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999947806308421	WITHOUT_CLASSIFICATION	5.2193691577906775E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999691066921639	WITHOUT_CLASSIFICATION	3.0893307836149E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999732355541485	WITHOUT_CLASSIFICATION	2.6764445851454118E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999893018131563	WITHOUT_CLASSIFICATION	1.0698186843754058E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999893018131563	WITHOUT_CLASSIFICATION	1.0698186843754058E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999698330729675	WITHOUT_CLASSIFICATION	3.0166927032521706E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999726498671316	WITHOUT_CLASSIFICATION	2.7350132868338657E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999716666769692	WITHOUT_CLASSIFICATION	2.833332303072676E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999313612990994	WITHOUT_CLASSIFICATION	6.863870090051955E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999280217528661	WITHOUT_CLASSIFICATION	7.197824713391973E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999280217528661	WITHOUT_CLASSIFICATION	7.197824713391973E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999778424776204	WITHOUT_CLASSIFICATION	2.215752237958737E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999516822735405	WITHOUT_CLASSIFICATION	4.831772645950949E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999654174427638	WITHOUT_CLASSIFICATION	3.4582557236145744E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999771039453305	WITHOUT_CLASSIFICATION	2.2896054669528774E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999771039453305	WITHOUT_CLASSIFICATION	2.2896054669528774E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999720732744666	WITHOUT_CLASSIFICATION	2.7926725533407343E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999437950694764	WITHOUT_CLASSIFICATION	5.6204930523538424E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995639502416785	WITHOUT_CLASSIFICATION	4.360497583213886E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999786466847931	WITHOUT_CLASSIFICATION	2.1353315206972774E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.997310959787301	WITHOUT_CLASSIFICATION	0.0026890402126989676	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999926122473628	WITHOUT_CLASSIFICATION	7.3877526371566145E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999894212791947	WITHOUT_CLASSIFICATION	1.0578720805289708E-4	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.999965839514556	WITHOUT_CLASSIFICATION	3.416048544409361E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995639502416785	WITHOUT_CLASSIFICATION	4.360497583213886E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999784588468816	WITHOUT_CLASSIFICATION	2.154115311835521E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999803591221946	WITHOUT_CLASSIFICATION	1.9640877805434963E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999803591221946	WITHOUT_CLASSIFICATION	1.9640877805434963E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999235129864066	WITHOUT_CLASSIFICATION	7.648701359333884E-5	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999853927083169	WITHOUT_CLASSIFICATION	1.4607291683096758E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999665965541675	WITHOUT_CLASSIFICATION	3.340344583237249E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999207548612749	WITHOUT_CLASSIFICATION	7.924513872517079E-5	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998758578029102	WITHOUT_CLASSIFICATION	1.2414219708983194E-4	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999669280441101	WITHOUT_CLASSIFICATION	3.307195588984672E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.999978849690895	WITHOUT_CLASSIFICATION	2.115030910496718E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999862441235027	WITHOUT_CLASSIFICATION	1.375587649737795E-5	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999325352540811	WITHOUT_CLASSIFICATION	6.746474591888275E-5	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999946334339269	WITHOUT_CLASSIFICATION	5.366566073052926E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999946334339269	WITHOUT_CLASSIFICATION	5.366566073052926E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999540740457144	WITHOUT_CLASSIFICATION	4.592595428559972E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999904275676155	WITHOUT_CLASSIFICATION	9.572432384507014E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999557794924508	WITHOUT_CLASSIFICATION	4.422050754916333E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999683539370875	WITHOUT_CLASSIFICATION	3.164606291243065E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999752408821868	WITHOUT_CLASSIFICATION	2.4759117813242795E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999633079539799	WITHOUT_CLASSIFICATION	3.66920460199739E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999515012108823	WITHOUT_CLASSIFICATION	4.849878911769141E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999068828207434	WITHOUT_CLASSIFICATION	9.311717925663868E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999860473709762	WITHOUT_CLASSIFICATION	1.3952629023843627E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999633079539799	WITHOUT_CLASSIFICATION	3.66920460199739E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997723565470075	WITHOUT_CLASSIFICATION	2.2764345299244691E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999809359027255	WITHOUT_CLASSIFICATION	1.9064097274507577E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999712594338769	WITHOUT_CLASSIFICATION	2.874056612306843E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.99998583975239	WITHOUT_CLASSIFICATION	1.4160247609962958E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999978355266049	WITHOUT_CLASSIFICATION	2.1644733951099357E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999927317566949	WITHOUT_CLASSIFICATION	7.268243305066107E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999786371215137	WITHOUT_CLASSIFICATION	2.136287848626377E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999562410363655	WITHOUT_CLASSIFICATION	4.37589636346444E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999881550205594	WITHOUT_CLASSIFICATION	1.184497944059691E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999836190227666	WITHOUT_CLASSIFICATION	1.638097723336723E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999445193646828	WITHOUT_CLASSIFICATION	5.548063531732673E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999459769558579	WITHOUT_CLASSIFICATION	5.402304414218802E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999929319328905	WITHOUT_CLASSIFICATION	7.068067109550894E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999803164628381	WITHOUT_CLASSIFICATION	1.9683537161900034E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999857440945128	WITHOUT_CLASSIFICATION	1.4255905487252171E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999682085363351	WITHOUT_CLASSIFICATION	3.179146366481962E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999781386717519	WITHOUT_CLASSIFICATION	2.186132824804974E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999398654376456	WITHOUT_CLASSIFICATION	6.013456235436893E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999609549403125	WITHOUT_CLASSIFICATION	3.9045059687534113E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999528364948337	WITHOUT_CLASSIFICATION	4.716350516636309E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999963971091828	WITHOUT_CLASSIFICATION	3.602890817197923E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999530636771575	WITHOUT_CLASSIFICATION	4.6936322842364725E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9998246077521735	WITHOUT_CLASSIFICATION	1.7539224782644469E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997928043579813	WITHOUT_CLASSIFICATION	2.0719564201856838E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997928043579813	WITHOUT_CLASSIFICATION	2.0719564201856838E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999633034596478	WITHOUT_CLASSIFICATION	3.669654035224051E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999906971516334	WITHOUT_CLASSIFICATION	9.302848366680922E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997692799716759	WITHOUT_CLASSIFICATION	2.3072002832405934E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999570676055018	WITHOUT_CLASSIFICATION	4.293239449824267E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999414382333549	WITHOUT_CLASSIFICATION	5.856176664520831E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999595440852952	WITHOUT_CLASSIFICATION	4.0455914704868474E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999871896630825	WITHOUT_CLASSIFICATION	1.2810336917367084E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999277067589312	WITHOUT_CLASSIFICATION	7.22932410687806E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999918953410085	WITHOUT_CLASSIFICATION	8.10465899155084E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999918953410085	WITHOUT_CLASSIFICATION	8.10465899155084E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999815590621087	WITHOUT_CLASSIFICATION	1.844093789126658E-5	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999852828581802	WITHOUT_CLASSIFICATION	1.4717141819824879E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999815590621087	WITHOUT_CLASSIFICATION	1.844093789126658E-5	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999641860242401	WITHOUT_CLASSIFICATION	3.581397575987545E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999548461370145	WITHOUT_CLASSIFICATION	4.515386298542518E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999790426241032	WITHOUT_CLASSIFICATION	2.0957375896768108E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999791012715374	WITHOUT_CLASSIFICATION	2.089872846261633E-5	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999430673554459	WITHOUT_CLASSIFICATION	5.6932644554013464E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999820464066073	WITHOUT_CLASSIFICATION	1.7953593392791148E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999770513524172	WITHOUT_CLASSIFICATION	2.294864758286452E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999770513524172	WITHOUT_CLASSIFICATION	2.294864758286452E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9999038140172414	WITHOUT_CLASSIFICATION	9.618598275858399E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999850334571454	WITHOUT_CLASSIFICATION	1.4966542854627297E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999533352403075	WITHOUT_CLASSIFICATION	4.6664759692462975E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.999954374611631	WITHOUT_CLASSIFICATION	4.562538836899201E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999533144397885	WITHOUT_CLASSIFICATION	4.6685560211619706E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999526241788054	WITHOUT_CLASSIFICATION	4.737582119465304E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999628328249986	WITHOUT_CLASSIFICATION	3.71671750013215E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999390133683677	WITHOUT_CLASSIFICATION	6.098663163226891E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999390133683677	WITHOUT_CLASSIFICATION	6.098663163226891E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999713154969758	WITHOUT_CLASSIFICATION	2.8684503024128643E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999713154969758	WITHOUT_CLASSIFICATION	2.8684503024128643E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999295446558163	WITHOUT_CLASSIFICATION	7.045534418362082E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999295446558163	WITHOUT_CLASSIFICATION	7.045534418362082E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999770513524172	WITHOUT_CLASSIFICATION	2.294864758286452E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999628328249986	WITHOUT_CLASSIFICATION	3.71671750013215E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999390133683677	WITHOUT_CLASSIFICATION	6.098663163226891E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999713154969758	WITHOUT_CLASSIFICATION	2.8684503024128643E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999713154969758	WITHOUT_CLASSIFICATION	2.8684503024128643E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999295446558163	WITHOUT_CLASSIFICATION	7.045534418362082E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999786534453943	WITHOUT_CLASSIFICATION	2.1346554605720932E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999768219411802	WITHOUT_CLASSIFICATION	2.3178058819883518E-5	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999858810607559	WITHOUT_CLASSIFICATION	1.4118939244124765E-5	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998120250729031	WITHOUT_CLASSIFICATION	1.8797492709694835E-4	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999910550363805	WITHOUT_CLASSIFICATION	8.944963619407361E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999523527998303	WITHOUT_CLASSIFICATION	4.764720016969574E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999872223118551	WITHOUT_CLASSIFICATION	1.2777688144911549E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999429261299154	WITHOUT_CLASSIFICATION	5.70738700845249E-5	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999455616129442	WITHOUT_CLASSIFICATION	5.443838705583938E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999639679183454	WITHOUT_CLASSIFICATION	3.603208165466118E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999411161822689	WITHOUT_CLASSIFICATION	5.888381773104314E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999762605355286	WITHOUT_CLASSIFICATION	2.373946447138778E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999634986904279	WITHOUT_CLASSIFICATION	3.650130957208754E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999523527998303	WITHOUT_CLASSIFICATION	4.764720016969574E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999523527998303	WITHOUT_CLASSIFICATION	4.764720016969574E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999523527998303	WITHOUT_CLASSIFICATION	4.764720016969574E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998957875451127	WITHOUT_CLASSIFICATION	1.0421245488734067E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999444102247618	WITHOUT_CLASSIFICATION	5.558977523812455E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999444102247618	WITHOUT_CLASSIFICATION	5.558977523812455E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999329712206617	WITHOUT_CLASSIFICATION	6.702877933821385E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999581306297877	WITHOUT_CLASSIFICATION	4.1869370212416646E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9993287400192098	WITHOUT_CLASSIFICATION	6.712599807902141E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999389086459581	WITHOUT_CLASSIFICATION	6.109135404184014E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999389086459581	WITHOUT_CLASSIFICATION	6.109135404184014E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999948279110887	WITHOUT_CLASSIFICATION	5.172088911350721E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999905123492054	WITHOUT_CLASSIFICATION	9.487650794532536E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999905123492054	WITHOUT_CLASSIFICATION	9.487650794532536E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998614259149096	WITHOUT_CLASSIFICATION	1.385740850903836E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999967848319109	WITHOUT_CLASSIFICATION	3.2151680891011004E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999863410847053	WITHOUT_CLASSIFICATION	1.3658915294748055E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9928630734023365	WITHOUT_CLASSIFICATION	0.007136926597663492	TEST
ID	WITHOUT_CLASSIFICATION	0.9999524817642058	WITHOUT_CLASSIFICATION	4.751823579431864E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999714159741724	WITHOUT_CLASSIFICATION	2.8584025827631608E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999713051594425	WITHOUT_CLASSIFICATION	2.8694840557457713E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9985501404878493	WITHOUT_CLASSIFICATION	0.0014498595121506604	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999357885823772	WITHOUT_CLASSIFICATION	6.421141762281281E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999123023698012	WITHOUT_CLASSIFICATION	8.76976301987967E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975998041127	WITHOUT_CLASSIFICATION	2.4001958873102816E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999627771508411	WITHOUT_CLASSIFICATION	3.72228491588857E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999627996917311	WITHOUT_CLASSIFICATION	3.7200308268819064E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999523422085147	WITHOUT_CLASSIFICATION	4.765779148535283E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999863410847053	WITHOUT_CLASSIFICATION	1.3658915294748055E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999636465508384	WITHOUT_CLASSIFICATION	3.635344916155446E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999644635441872	WITHOUT_CLASSIFICATION	3.5536455812836016E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999523427458519	WITHOUT_CLASSIFICATION	4.765725414810294E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999523422085147	WITHOUT_CLASSIFICATION	4.765779148535283E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999636465508384	WITHOUT_CLASSIFICATION	3.635344916155446E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999523427458519	WITHOUT_CLASSIFICATION	4.765725414810294E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998219433005845	WITHOUT_CLASSIFICATION	1.7805669941552854E-4	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998219433005845	WITHOUT_CLASSIFICATION	1.7805669941552854E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999523472818906	WITHOUT_CLASSIFICATION	4.7652718109330786E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999648620792629	WITHOUT_CLASSIFICATION	3.513792073707745E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999644984658229	WITHOUT_CLASSIFICATION	3.5501534177157075E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997823596929776	WITHOUT_CLASSIFICATION	2.1764030702237284E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9998994389267986	WITHOUT_CLASSIFICATION	1.0056107320138785E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999075583672349	WITHOUT_CLASSIFICATION	9.244163276500011E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999759883636218	WITHOUT_CLASSIFICATION	2.4011636378124887E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998771873896519	WITHOUT_CLASSIFICATION	1.228126103480503E-4	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999630127238509	WITHOUT_CLASSIFICATION	3.698727614900049E-5	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999759883636218	WITHOUT_CLASSIFICATION	2.4011636378124887E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999714138857534	WITHOUT_CLASSIFICATION	2.858611424660344E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999523422085147	WITHOUT_CLASSIFICATION	4.765779148535283E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999389703541105	WITHOUT_CLASSIFICATION	6.10296458894331E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999880254281411	WITHOUT_CLASSIFICATION	1.197457185898176E-5	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9994910708771052	WITHOUT_CLASSIFICATION	5.089291228947211E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999846626404044	WITHOUT_CLASSIFICATION	1.5337359595569863E-5	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999858733166055	WITHOUT_CLASSIFICATION	1.4126683394573492E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999971763916436	WITHOUT_CLASSIFICATION	2.8236083563487846E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999327494374989	WITHOUT_CLASSIFICATION	6.7250562501112E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999819762852283	WITHOUT_CLASSIFICATION	1.802371477173921E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999629047672554	WITHOUT_CLASSIFICATION	3.709523274456859E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.999782899710636	WITHOUT_CLASSIFICATION	2.17100289363908E-4	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999123023698012	WITHOUT_CLASSIFICATION	8.76976301987967E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999641480548817	WITHOUT_CLASSIFICATION	3.5851945118306655E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9983001107900421	WITHOUT_CLASSIFICATION	0.0016998892099577853	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999583109568345	WITHOUT_CLASSIFICATION	4.1689043165494006E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999855903618007	WITHOUT_CLASSIFICATION	1.4409638199272965E-5	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999856707054964	WITHOUT_CLASSIFICATION	1.4329294503705766E-5	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999475460162043	WITHOUT_CLASSIFICATION	5.245398379566571E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999892388440055	WITHOUT_CLASSIFICATION	1.076115599454037E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999197182593144	WITHOUT_CLASSIFICATION	8.028174068564823E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998824074422283	WITHOUT_CLASSIFICATION	1.1759255777167789E-4	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999630464282006	WITHOUT_CLASSIFICATION	3.695357179944018E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999943124988917	WITHOUT_CLASSIFICATION	5.68750110831714E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999943124988917	WITHOUT_CLASSIFICATION	5.68750110831714E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999692350270117	WITHOUT_CLASSIFICATION	3.076497298826414E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999792285329547	WITHOUT_CLASSIFICATION	2.077146704527411E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.999994294570082	WITHOUT_CLASSIFICATION	5.705429917947344E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999692815406065	WITHOUT_CLASSIFICATION	3.071845939352452E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999692330996508	WITHOUT_CLASSIFICATION	3.07669003492121E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999706420521743	WITHOUT_CLASSIFICATION	2.935794782559172E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999777627151412	WITHOUT_CLASSIFICATION	2.223728485883439E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9997068578569588	WITHOUT_CLASSIFICATION	2.9314214304119454E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999536610612247	WITHOUT_CLASSIFICATION	4.633893877526912E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999936410102952	WITHOUT_CLASSIFICATION	6.358989704731046E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.999962775906945	WITHOUT_CLASSIFICATION	3.722409305494606E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999959867048426	WITHOUT_CLASSIFICATION	4.013295157397728E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999725369603455	WITHOUT_CLASSIFICATION	2.7463039654625976E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999299792798583	WITHOUT_CLASSIFICATION	7.002072014171632E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999952881048995	WITHOUT_CLASSIFICATION	4.711895100495359E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999871642653728	WITHOUT_CLASSIFICATION	1.2835734627188134E-5	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999504670823753	WITHOUT_CLASSIFICATION	4.953291762467434E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999853692372584	WITHOUT_CLASSIFICATION	1.463076274151267E-5	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999444096985562	WITHOUT_CLASSIFICATION	5.5590301443711404E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999765237331127	WITHOUT_CLASSIFICATION	2.347626688716733E-5	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999929403194776	WITHOUT_CLASSIFICATION	7.059680522359201E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9996462416724278	WITHOUT_CLASSIFICATION	3.537583275721954E-4	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999871642653728	WITHOUT_CLASSIFICATION	1.2835734627188134E-5	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999722396341645	WITHOUT_CLASSIFICATION	2.776036583553114E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999311862362301	WITHOUT_CLASSIFICATION	6.881376376980598E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999311862362301	WITHOUT_CLASSIFICATION	6.881376376980598E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999900563891672	WITHOUT_CLASSIFICATION	9.94361083277219E-6	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9996703839267504	WITHOUT_CLASSIFICATION	3.296160732496364E-4	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999853692372584	WITHOUT_CLASSIFICATION	1.463076274151267E-5	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999827522407257	WITHOUT_CLASSIFICATION	1.7247759274172418E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999652233466344	WITHOUT_CLASSIFICATION	3.477665336562827E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999647954438575	WITHOUT_CLASSIFICATION	3.5204556142492854E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999577166838073	WITHOUT_CLASSIFICATION	4.228331619263176E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999577166838073	WITHOUT_CLASSIFICATION	4.228331619263176E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999405751333073	WITHOUT_CLASSIFICATION	5.942486669270101E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.99996277747002	WITHOUT_CLASSIFICATION	3.722252998001796E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.99996277747002	WITHOUT_CLASSIFICATION	3.722252998001796E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998824074422283	WITHOUT_CLASSIFICATION	1.1759255777167789E-4	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999842415284043	WITHOUT_CLASSIFICATION	1.5758471595805668E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996255530047546	WITHOUT_CLASSIFICATION	3.744469952453329E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999979429721563	WITHOUT_CLASSIFICATION	2.0570278437029402E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996255530047546	WITHOUT_CLASSIFICATION	3.744469952453329E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999979429721563	WITHOUT_CLASSIFICATION	2.0570278437029402E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998474916047394	WITHOUT_CLASSIFICATION	1.5250839526052799E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999612804991274	WITHOUT_CLASSIFICATION	3.871950087264932E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999942512971278	WITHOUT_CLASSIFICATION	5.748702872202202E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999888023090127	WITHOUT_CLASSIFICATION	1.1197690987399434E-5	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998759256711522	WITHOUT_CLASSIFICATION	1.2407432884771688E-4	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9988233007101734	WITHOUT_CLASSIFICATION	0.0011766992898266007	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998602787363019	WITHOUT_CLASSIFICATION	1.397212636980757E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998602787363019	WITHOUT_CLASSIFICATION	1.397212636980757E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999070260298398	WITHOUT_CLASSIFICATION	9.297397016025089E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999478643579748	WITHOUT_CLASSIFICATION	5.2135642025174345E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999729289336908	WITHOUT_CLASSIFICATION	2.7071066309232203E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999988245384868	WITHOUT_CLASSIFICATION	1.175461513200952E-5	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999925784928807	WITHOUT_CLASSIFICATION	7.421507119407834E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999561048326282	WITHOUT_CLASSIFICATION	4.389516737186333E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999561048326282	WITHOUT_CLASSIFICATION	4.389516737186333E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998150376194441	WITHOUT_CLASSIFICATION	1.8496238055574487E-4	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998150376194441	WITHOUT_CLASSIFICATION	1.8496238055574487E-4	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999945016234367	WITHOUT_CLASSIFICATION	5.498376563280673E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998474916047394	WITHOUT_CLASSIFICATION	1.5250839526052799E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999439613510342	WITHOUT_CLASSIFICATION	5.603864896571305E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996591593160621	WITHOUT_CLASSIFICATION	3.408406839379806E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999309228638424	WITHOUT_CLASSIFICATION	6.907713615762332E-5	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999519295177398	WITHOUT_CLASSIFICATION	4.807048226021807E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9973286212380467	WITHOUT_CLASSIFICATION	0.0026713787619532677	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998474916047394	WITHOUT_CLASSIFICATION	1.5250839526052799E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999519295177398	WITHOUT_CLASSIFICATION	4.807048226021807E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9973286212380467	WITHOUT_CLASSIFICATION	0.0026713787619532677	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999540397633166	WITHOUT_CLASSIFICATION	4.596023668344313E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999639863928195	WITHOUT_CLASSIFICATION	3.6013607180471085E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999860232268994	WITHOUT_CLASSIFICATION	1.3976773100510589E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998474916047394	WITHOUT_CLASSIFICATION	1.5250839526052799E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998474916047394	WITHOUT_CLASSIFICATION	1.5250839526052799E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999653783217243	WITHOUT_CLASSIFICATION	3.462167827572181E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999727967627624	WITHOUT_CLASSIFICATION	2.7203237237627255E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999930805206128	WITHOUT_CLASSIFICATION	6.919479387276904E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999786756139425	WITHOUT_CLASSIFICATION	2.132438605746196E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999847574921881	WITHOUT_CLASSIFICATION	1.524250781199413E-5	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999996329619072	WITHOUT_CLASSIFICATION	3.67038092794418E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999951135666581	WITHOUT_CLASSIFICATION	4.8864333419025365E-5	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999764871976403	WITHOUT_CLASSIFICATION	2.3512802359610896E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999875537623875	WITHOUT_CLASSIFICATION	1.2446237612508739E-5	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999564713027109	WITHOUT_CLASSIFICATION	4.352869728900665E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999733483709365	WITHOUT_CLASSIFICATION	2.665162906351575E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999925217184802	WITHOUT_CLASSIFICATION	7.478281519840408E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999791978132245	WITHOUT_CLASSIFICATION	2.080218677544916E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999644351104344	WITHOUT_CLASSIFICATION	3.556488956556437E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9996650776153467	WITHOUT_CLASSIFICATION	3.349223846533375E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999786756139425	WITHOUT_CLASSIFICATION	2.132438605746196E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999740413032115	WITHOUT_CLASSIFICATION	2.5958696788346336E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999504031195937	WITHOUT_CLASSIFICATION	4.9596880406183386E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999653004608597	WITHOUT_CLASSIFICATION	3.4699539140215654E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999322146816587	WITHOUT_CLASSIFICATION	6.778531834137786E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999786756139425	WITHOUT_CLASSIFICATION	2.132438605746196E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999964710923952	WITHOUT_CLASSIFICATION	3.52890760480007E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9988846967420535	WITHOUT_CLASSIFICATION	0.0011153032579465903	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9977128109054378	WITHOUT_CLASSIFICATION	0.002287189094562214	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999918351120048	WITHOUT_CLASSIFICATION	8.164887995112897E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999524099195738	WITHOUT_CLASSIFICATION	4.7590080426312606E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999961905462117	WITHOUT_CLASSIFICATION	3.809453788347663E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999929766236803	WITHOUT_CLASSIFICATION	7.023376319758822E-6	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999994499611147	WITHOUT_CLASSIFICATION	5.500388853043036E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998656411397631	WITHOUT_CLASSIFICATION	1.3435886023701658E-4	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999335673776144	WITHOUT_CLASSIFICATION	6.643262238563399E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999493663526642	WITHOUT_CLASSIFICATION	5.063364733574628E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999699784019416	WITHOUT_CLASSIFICATION	3.0021598058360613E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999889756433289	WITHOUT_CLASSIFICATION	1.1024356671162208E-5	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808923541444	WITHOUT_CLASSIFICATION	1.910764585558138E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999279424594535	WITHOUT_CLASSIFICATION	7.205754054645054E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999442037818893	WITHOUT_CLASSIFICATION	5.579621811073713E-5	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999861045076532	WITHOUT_CLASSIFICATION	1.389549234685978E-5	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789701961423	WITHOUT_CLASSIFICATION	2.1029803857713987E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999377482006645	WITHOUT_CLASSIFICATION	6.225179933543597E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999593792540882	WITHOUT_CLASSIFICATION	4.0620745911740625E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999908882235297	WITHOUT_CLASSIFICATION	9.111776470226935E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651051850313	WITHOUT_CLASSIFICATION	3.48948149685875E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650072529278	WITHOUT_CLASSIFICATION	3.499274707216708E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999949455439144	WITHOUT_CLASSIFICATION	5.054456085599655E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276000627656	WITHOUT_CLASSIFICATION	7.239993723439769E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999714689512359	WITHOUT_CLASSIFICATION	2.8531048764105674E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999560368646884	WITHOUT_CLASSIFICATION	4.396313531159213E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503775338751	WITHOUT_CLASSIFICATION	4.962246612486327E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532984848352	WITHOUT_CLASSIFICATION	4.670151516478028E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492551258976	WITHOUT_CLASSIFICATION	5.074487410239648E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968659943403	WITHOUT_CLASSIFICATION	3.1340056597051625E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471398630515	WITHOUT_CLASSIFICATION	5.2860136948539964E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472141888188	WITHOUT_CLASSIFICATION	5.27858111811815E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.99991168674833	WITHOUT_CLASSIFICATION	8.831325167007694E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999428225858047	WITHOUT_CLASSIFICATION	5.7177414195335505E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558762337495	WITHOUT_CLASSIFICATION	4.412376625044275E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999974172681702	WITHOUT_CLASSIFICATION	2.5827318298413193E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998528355324081	WITHOUT_CLASSIFICATION	1.47164467591923E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.99996420887324	WITHOUT_CLASSIFICATION	3.579112675993468E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999739330887732	WITHOUT_CLASSIFICATION	2.606691122683073E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999941823956521	WITHOUT_CLASSIFICATION	5.817604347950737E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999692237029278	WITHOUT_CLASSIFICATION	3.0776297072128586E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999584751276022	WITHOUT_CLASSIFICATION	4.152487239785031E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999528889422933	WITHOUT_CLASSIFICATION	4.7111057706823075E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999889733414662	WITHOUT_CLASSIFICATION	1.1026658533755117E-5	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999918021266754	WITHOUT_CLASSIFICATION	8.197873324654192E-6	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999892086484418	WITHOUT_CLASSIFICATION	1.0791351558215836E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999798064803653	WITHOUT_CLASSIFICATION	2.0193519634648632E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999423250998659	WITHOUT_CLASSIFICATION	5.767490013405709E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463894045931	WITHOUT_CLASSIFICATION	5.361059540694105E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881173749706	WITHOUT_CLASSIFICATION	1.188262502944838E-5	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999423525839901	WITHOUT_CLASSIFICATION	5.7647416009946E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999077048890463	WITHOUT_CLASSIFICATION	9.229511095362314E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999447722853078	WITHOUT_CLASSIFICATION	5.522771469212139E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999886093319644	WITHOUT_CLASSIFICATION	1.1390668035577586E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999493428107088	WITHOUT_CLASSIFICATION	5.065718929119831E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999556698553348	WITHOUT_CLASSIFICATION	4.433014466517058E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998996099260962	WITHOUT_CLASSIFICATION	1.0039007390384751E-4	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999629570238944	WITHOUT_CLASSIFICATION	3.70429761055513E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999371421074018	WITHOUT_CLASSIFICATION	6.285789259823946E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999732222912695	WITHOUT_CLASSIFICATION	2.6777708730508242E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998433211415043	WITHOUT_CLASSIFICATION	1.566788584956898E-4	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999981231202545	WITHOUT_CLASSIFICATION	1.8768797455022085E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998578316487695	WITHOUT_CLASSIFICATION	1.421683512303867E-4	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999985722504061	WITHOUT_CLASSIFICATION	1.4277495938922296E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998528355324081	WITHOUT_CLASSIFICATION	1.47164467591923E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999835821866487	WITHOUT_CLASSIFICATION	1.641781335126623E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999872173877021	WITHOUT_CLASSIFICATION	1.2782612297918164E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999734479041756	WITHOUT_CLASSIFICATION	2.6552095824266978E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558762337495	WITHOUT_CLASSIFICATION	4.412376625044275E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999700442087985	WITHOUT_CLASSIFICATION	2.9955791201415484E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999077048890463	WITHOUT_CLASSIFICATION	9.229511095362314E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999567691582828	WITHOUT_CLASSIFICATION	4.323084171723473E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999922434074127	WITHOUT_CLASSIFICATION	7.756592587302634E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997988154422727	WITHOUT_CLASSIFICATION	2.0118455772741542E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999277062801167	WITHOUT_CLASSIFICATION	7.229371988327183E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999291681709307	WITHOUT_CLASSIFICATION	7.08318290692923E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999972610832458	WITHOUT_CLASSIFICATION	2.7389167542016747E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999601557921711	WITHOUT_CLASSIFICATION	3.9844207828903304E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999853836573804	WITHOUT_CLASSIFICATION	1.4616342619507098E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9989939327502138	WITHOUT_CLASSIFICATION	0.0010060672497862666	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999766457172934	WITHOUT_CLASSIFICATION	2.3354282706652244E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999514638449727	WITHOUT_CLASSIFICATION	4.853615502722769E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558762337495	WITHOUT_CLASSIFICATION	4.412376625044275E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999856186623444	WITHOUT_CLASSIFICATION	1.4381337655699616E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.999762913757056	WITHOUT_CLASSIFICATION	2.3708624294401705E-4	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999865334358238	WITHOUT_CLASSIFICATION	1.3466564176125879E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999730790605162	WITHOUT_CLASSIFICATION	2.692093948367289E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999767195270006	WITHOUT_CLASSIFICATION	2.3280472999416446E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999853391339755	WITHOUT_CLASSIFICATION	1.4660866024536584E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999409103699533	WITHOUT_CLASSIFICATION	5.908963004663698E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999764153202368	WITHOUT_CLASSIFICATION	2.358467976319381E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999900539324097	WITHOUT_CLASSIFICATION	9.94606759037924E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9998897116721456	WITHOUT_CLASSIFICATION	1.1028832785437971E-4	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999337051259946	WITHOUT_CLASSIFICATION	6.629487400543777E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999979468836165	WITHOUT_CLASSIFICATION	2.0531163835089162E-5	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999979468836165	WITHOUT_CLASSIFICATION	2.0531163835089162E-5	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558762337495	WITHOUT_CLASSIFICATION	4.412376625044275E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998528355324081	WITHOUT_CLASSIFICATION	1.47164467591923E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9996101201795417	WITHOUT_CLASSIFICATION	3.8987982045841896E-4	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999939688114966	WITHOUT_CLASSIFICATION	6.031188503488915E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993555729330108	WITHOUT_CLASSIFICATION	6.444270669892112E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998528355324081	WITHOUT_CLASSIFICATION	1.47164467591923E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999629366396849	WITHOUT_CLASSIFICATION	3.706336031492432E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999730790605162	WITHOUT_CLASSIFICATION	2.692093948367289E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999235754848108	WITHOUT_CLASSIFICATION	7.64245151892182E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999865334358238	WITHOUT_CLASSIFICATION	1.3466564176125879E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831264010285	WITHOUT_CLASSIFICATION	1.6873598971418724E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9992898288114866	WITHOUT_CLASSIFICATION	7.101711885133549E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999923914447259	WITHOUT_CLASSIFICATION	7.608555274094197E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997988154422727	WITHOUT_CLASSIFICATION	2.0118455772741542E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999277062801167	WITHOUT_CLASSIFICATION	7.229371988327183E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999291681709307	WITHOUT_CLASSIFICATION	7.08318290692923E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999724823924813	WITHOUT_CLASSIFICATION	2.7517607518731574E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999586878967219	WITHOUT_CLASSIFICATION	4.1312103277993064E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999673277049941	WITHOUT_CLASSIFICATION	3.2672295005937716E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999865334358238	WITHOUT_CLASSIFICATION	1.3466564176125879E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831264010285	WITHOUT_CLASSIFICATION	1.6873598971418724E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998528355324081	WITHOUT_CLASSIFICATION	1.47164467591923E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999972610832458	WITHOUT_CLASSIFICATION	2.7389167542016747E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999601557921711	WITHOUT_CLASSIFICATION	3.9844207828903304E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999853836573804	WITHOUT_CLASSIFICATION	1.4616342619507098E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985105127945	WITHOUT_CLASSIFICATION	1.4894872055024673E-5	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892428352394	WITHOUT_CLASSIFICATION	1.0757164760661876E-5	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999415788938169	WITHOUT_CLASSIFICATION	5.8421106183097954E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999620085635339	WITHOUT_CLASSIFICATION	3.799143646602591E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9998762291780245	WITHOUT_CLASSIFICATION	1.2377082197554258E-4	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999227034537991	WITHOUT_CLASSIFICATION	7.729654620096023E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999815130138882	WITHOUT_CLASSIFICATION	1.8486986111791904E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999350438577231	WITHOUT_CLASSIFICATION	6.495614227692407E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999168836299367	WITHOUT_CLASSIFICATION	8.311637006333299E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532984848352	WITHOUT_CLASSIFICATION	4.670151516478028E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999148693973492	WITHOUT_CLASSIFICATION	8.513060265090427E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999351972898824	WITHOUT_CLASSIFICATION	6.480271011759418E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999481779504024	WITHOUT_CLASSIFICATION	5.182204959766623E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999625068898659	WITHOUT_CLASSIFICATION	3.749311013417999E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999523568945973	WITHOUT_CLASSIFICATION	4.764310540271246E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492551258976	WITHOUT_CLASSIFICATION	5.074487410239648E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471301329154	WITHOUT_CLASSIFICATION	5.286986708465148E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999732222912695	WITHOUT_CLASSIFICATION	2.6777708730508242E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999271310978266	WITHOUT_CLASSIFICATION	7.286890217339627E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999629866044797	WITHOUT_CLASSIFICATION	3.7013395520314816E-5	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999466701553543	WITHOUT_CLASSIFICATION	5.332984464561594E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995025808106464	WITHOUT_CLASSIFICATION	4.974191893536672E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999985542971644	WITHOUT_CLASSIFICATION	1.4457028355963889E-5	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998219433005845	WITHOUT_CLASSIFICATION	1.7805669941552854E-4	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999986801092663	WITHOUT_CLASSIFICATION	1.31989073369372E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999994499611147	WITHOUT_CLASSIFICATION	5.500388853043036E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999758629439783	WITHOUT_CLASSIFICATION	2.413705602169488E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999461182716356	WITHOUT_CLASSIFICATION	5.3881728364328914E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999763866996656	WITHOUT_CLASSIFICATION	2.3613300334382156E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999514441662767	WITHOUT_CLASSIFICATION	4.855583372336666E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999808756302014	WITHOUT_CLASSIFICATION	1.9124369798550514E-5	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999861858351557	WITHOUT_CLASSIFICATION	1.3814164844213348E-5	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719746003417	WITHOUT_CLASSIFICATION	2.802539965836333E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999722855149772	WITHOUT_CLASSIFICATION	2.7714485022710894E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999354241334387	WITHOUT_CLASSIFICATION	6.457586656124743E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998814286063754	WITHOUT_CLASSIFICATION	1.185713936245526E-4	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999763295887457	WITHOUT_CLASSIFICATION	2.3670411254266988E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999152243089654	WITHOUT_CLASSIFICATION	8.477569103462786E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999163712557817	WITHOUT_CLASSIFICATION	8.362874421831284E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999627798808043	WITHOUT_CLASSIFICATION	3.722011919577531E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999735151694524	WITHOUT_CLASSIFICATION	2.6484830547561826E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998601313932595	WITHOUT_CLASSIFICATION	1.3986860674060535E-4	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998979085317762	WITHOUT_CLASSIFICATION	1.0209146822374905E-4	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999627798808043	WITHOUT_CLASSIFICATION	3.722011919577531E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999780650746526	WITHOUT_CLASSIFICATION	2.1934925347445933E-5	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999238245936266	WITHOUT_CLASSIFICATION	7.617540637338504E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999577817707321	WITHOUT_CLASSIFICATION	4.221822926785851E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999865587581568	WITHOUT_CLASSIFICATION	1.3441241843212017E-5	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999887900654392	WITHOUT_CLASSIFICATION	1.1209934560906641E-5	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999601239587733	WITHOUT_CLASSIFICATION	3.987604122671977E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999736610652138	WITHOUT_CLASSIFICATION	2.6338934786130475E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999877696323787	WITHOUT_CLASSIFICATION	1.2230367621410259E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999877696323787	WITHOUT_CLASSIFICATION	1.2230367621410259E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999989520963125	WITHOUT_CLASSIFICATION	1.0479036875075605E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999936876776404	WITHOUT_CLASSIFICATION	6.312322359577131E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999915922968431	WITHOUT_CLASSIFICATION	8.40770315695449E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999678958422722	WITHOUT_CLASSIFICATION	3.2104157727909106E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999952495849422	WITHOUT_CLASSIFICATION	4.750415057741929E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999198767469356	WITHOUT_CLASSIFICATION	8.012325306445866E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999461259589817	WITHOUT_CLASSIFICATION	5.3874041018236455E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999428477396181	WITHOUT_CLASSIFICATION	5.715226038202341E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997951412004639	WITHOUT_CLASSIFICATION	2.0485879953602537E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999923069648873	WITHOUT_CLASSIFICATION	7.693035112786159E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999087792405899	WITHOUT_CLASSIFICATION	9.122075941024511E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9996822827333399	WITHOUT_CLASSIFICATION	3.177172666600814E-4	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999927653975344	WITHOUT_CLASSIFICATION	7.234602465608009E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997887827623275	WITHOUT_CLASSIFICATION	2.1121723767253135E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999925143491178	WITHOUT_CLASSIFICATION	7.485650882107461E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9997871165920503	WITHOUT_CLASSIFICATION	2.1288340794972148E-4	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999913106059488	WITHOUT_CLASSIFICATION	8.689394051134844E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999716560048124	WITHOUT_CLASSIFICATION	2.8343995187591924E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999721600147096	WITHOUT_CLASSIFICATION	2.783998529041548E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999279809598387	WITHOUT_CLASSIFICATION	7.201904016131686E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999826639899494	WITHOUT_CLASSIFICATION	1.7336010050596167E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999682494655178	WITHOUT_CLASSIFICATION	3.175053448216945E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999628359418791	WITHOUT_CLASSIFICATION	3.716405812102063E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999835520760529	WITHOUT_CLASSIFICATION	1.6447923947052422E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999789964986018	WITHOUT_CLASSIFICATION	2.1003501398309636E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999966729685982	WITHOUT_CLASSIFICATION	3.3270314017970086E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999998774608355	WITHOUT_CLASSIFICATION	1.2253916450615232E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999983955106751	WITHOUT_CLASSIFICATION	1.6044893248995083E-5	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9991757604658763	WITHOUT_CLASSIFICATION	8.242395341235524E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.999962829621325	WITHOUT_CLASSIFICATION	3.717037867492125E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999391348354586	WITHOUT_CLASSIFICATION	6.086516454137031E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999841012268922	WITHOUT_CLASSIFICATION	1.5898773107842958E-5	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999913105845147	WITHOUT_CLASSIFICATION	8.689415485301679E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999942546834252	WITHOUT_CLASSIFICATION	5.7453165747865235E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999778259455796	WITHOUT_CLASSIFICATION	2.2174054420501534E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999630556817504	WITHOUT_CLASSIFICATION	3.694431824966453E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994967327648848	WITHOUT_CLASSIFICATION	5.03267235115182E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998303246909187	WITHOUT_CLASSIFICATION	1.6967530908122363E-4	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999633701186046	WITHOUT_CLASSIFICATION	3.662988139538254E-5	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999957374781704	WITHOUT_CLASSIFICATION	4.262521829610984E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999947873032582	WITHOUT_CLASSIFICATION	5.212696741803017E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999514638449727	WITHOUT_CLASSIFICATION	4.853615502722769E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999514638449727	WITHOUT_CLASSIFICATION	4.853615502722769E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999928347132164	WITHOUT_CLASSIFICATION	7.165286783595106E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999643864142775	WITHOUT_CLASSIFICATION	3.5613585722583864E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999642113164247	WITHOUT_CLASSIFICATION	3.5788683575242E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.99997596846416	WITHOUT_CLASSIFICATION	2.4031535840054257E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999433517218298	WITHOUT_CLASSIFICATION	5.664827817016943E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999571392125253	WITHOUT_CLASSIFICATION	4.2860787474789925E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999681427935923	WITHOUT_CLASSIFICATION	3.1857206407772666E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9991965860978872	WITHOUT_CLASSIFICATION	8.034139021127712E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999886432114844	WITHOUT_CLASSIFICATION	1.1356788515576351E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999752637446307	WITHOUT_CLASSIFICATION	2.4736255369241824E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999337185249442	WITHOUT_CLASSIFICATION	6.628147505584786E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999935475873446	WITHOUT_CLASSIFICATION	6.452412655396851E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999927540628579	WITHOUT_CLASSIFICATION	7.245937142103898E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999685541347904	WITHOUT_CLASSIFICATION	3.1445865209605676E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999424486054874	WITHOUT_CLASSIFICATION	5.75513945126324E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999792218004346	WITHOUT_CLASSIFICATION	2.0778199565380283E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999724883987046	WITHOUT_CLASSIFICATION	2.751160129552955E-5	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999496068877	WITHOUT_CLASSIFICATION	5.039311229395383E-8	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999912793077587	WITHOUT_CLASSIFICATION	8.72069224129369E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999817369202102	WITHOUT_CLASSIFICATION	1.8263079789845698E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999771502425402	WITHOUT_CLASSIFICATION	2.2849757459791518E-4	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999912793077587	WITHOUT_CLASSIFICATION	8.72069224129369E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999634363035139	WITHOUT_CLASSIFICATION	3.6563696486206974E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999836093817092	WITHOUT_CLASSIFICATION	1.6390618290815015E-5	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999755975503645	WITHOUT_CLASSIFICATION	2.4402449635493927E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999713588863393	WITHOUT_CLASSIFICATION	2.8641113660699967E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999629525022584	WITHOUT_CLASSIFICATION	3.704749774152811E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999914217337589	WITHOUT_CLASSIFICATION	8.578266241132248E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999277345926422	WITHOUT_CLASSIFICATION	7.226540735782297E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999431784760989	WITHOUT_CLASSIFICATION	5.68215239010223E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999919056231779	WITHOUT_CLASSIFICATION	8.094376822223384E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999281583589338	WITHOUT_CLASSIFICATION	7.184164106620069E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999865057149117	WITHOUT_CLASSIFICATION	1.3494285088410148E-5	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998712444600037	WITHOUT_CLASSIFICATION	1.2875553999627248E-4	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999869100604287	WITHOUT_CLASSIFICATION	1.3089939571181746E-5	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999600765255798	WITHOUT_CLASSIFICATION	3.992347442017006E-5	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999570108669411	WITHOUT_CLASSIFICATION	4.298913305887679E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999286365657118	WITHOUT_CLASSIFICATION	7.136343428807303E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999779304638479	WITHOUT_CLASSIFICATION	2.2069536152166817E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998840712874144	WITHOUT_CLASSIFICATION	1.1592871258555882E-4	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.999513538053878	WITHOUT_CLASSIFICATION	4.8646194612201726E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.999959559190199	WITHOUT_CLASSIFICATION	4.044080980098254E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999977344807599	WITHOUT_CLASSIFICATION	2.265519240073205E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999675048265929	WITHOUT_CLASSIFICATION	3.249517340705382E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993837065670453	WITHOUT_CLASSIFICATION	6.162934329546119E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999376418642357	WITHOUT_CLASSIFICATION	6.235813576432063E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999959508562893	WITHOUT_CLASSIFICATION	4.049143710622024E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999760990670943	WITHOUT_CLASSIFICATION	2.39009329057176E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999828279796539	WITHOUT_CLASSIFICATION	1.7172020346140765E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999973592312141	WITHOUT_CLASSIFICATION	2.6407687858854695E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999861858351557	WITHOUT_CLASSIFICATION	1.3814164844213348E-5	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999687602686709	WITHOUT_CLASSIFICATION	3.1239731329217044E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999945842287581	WITHOUT_CLASSIFICATION	5.415771241996703E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999754602959313	WITHOUT_CLASSIFICATION	2.45397040687173E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.9994099269684775	WITHOUT_CLASSIFICATION	5.900730315225324E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998604816125234	WITHOUT_CLASSIFICATION	1.3951838747661708E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9998727484582877	WITHOUT_CLASSIFICATION	1.2725154171234294E-4	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999248363736034	WITHOUT_CLASSIFICATION	7.516362639656003E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999962384465495	WITHOUT_CLASSIFICATION	3.761553450544313E-6	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999915015730533	WITHOUT_CLASSIFICATION	8.498426946688599E-6	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999915041284863	WITHOUT_CLASSIFICATION	8.495871513727295E-6	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999989387763924	WITHOUT_CLASSIFICATION	1.0612236076117704E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999696518020457	WITHOUT_CLASSIFICATION	3.0348197954395634E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9952268277693944	WITHOUT_CLASSIFICATION	0.004773172230605572	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999692591187725	WITHOUT_CLASSIFICATION	3.0740881227448584E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999887716032784	WITHOUT_CLASSIFICATION	1.1228396721618042E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999822227468499	WITHOUT_CLASSIFICATION	1.7777253150053247E-5	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999772566578409	WITHOUT_CLASSIFICATION	2.2743342159136157E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999993111443925	WITHOUT_CLASSIFICATION	6.888556075086504E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999715695469787	WITHOUT_CLASSIFICATION	2.843045302129219E-5	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999882012735847	WITHOUT_CLASSIFICATION	1.1798726415288786E-5	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999930603062914	WITHOUT_CLASSIFICATION	6.93969370859331E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999873442001096	WITHOUT_CLASSIFICATION	1.2655799890361338E-5	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999508949453915	WITHOUT_CLASSIFICATION	4.910505460856094E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998878125299238	WITHOUT_CLASSIFICATION	1.1218747007630477E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9999714399611411	WITHOUT_CLASSIFICATION	2.8560038858932132E-5	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999719836824718	WITHOUT_CLASSIFICATION	2.8016317528216368E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999961756862968	WITHOUT_CLASSIFICATION	3.824313703093252E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998297911599756	WITHOUT_CLASSIFICATION	1.702088400244206E-4	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9991554040760661	WITHOUT_CLASSIFICATION	8.445959239340291E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237934517027	WITHOUT_CLASSIFICATION	7.620654829730482E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998942102632593	WITHOUT_CLASSIFICATION	1.0578973674079107E-4	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999274370316034	WITHOUT_CLASSIFICATION	7.256296839670362E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9997414697783245	WITHOUT_CLASSIFICATION	2.585302216755186E-4	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99996180117024	WITHOUT_CLASSIFICATION	3.8198829759862175E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999659103893773	WITHOUT_CLASSIFICATION	3.408961062270767E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999739630758626	WITHOUT_CLASSIFICATION	2.603692413730368E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999514418191234	WITHOUT_CLASSIFICATION	4.855818087661673E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236421550027	WITHOUT_CLASSIFICATION	7.635784499729127E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999514418191234	WITHOUT_CLASSIFICATION	4.855818087661673E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999413505204189	WITHOUT_CLASSIFICATION	5.864947958117542E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999918958294636	WITHOUT_CLASSIFICATION	8.104170536444484E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999680727743805	WITHOUT_CLASSIFICATION	3.1927225619421496E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999002275828552	WITHOUT_CLASSIFICATION	9.97724171447364E-5	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999134011196551	WITHOUT_CLASSIFICATION	8.659888034491377E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9962925711344695	WITHOUT_CLASSIFICATION	0.0037074288655304945	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999994445274663	WITHOUT_CLASSIFICATION	5.554725336943683E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999894486786173	WITHOUT_CLASSIFICATION	1.0551321382865635E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999956223462428	WITHOUT_CLASSIFICATION	4.377653757218916E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9994507018516859	WITHOUT_CLASSIFICATION	5.492981483140468E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999895148279319	WITHOUT_CLASSIFICATION	1.0485172068126092E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999714819797595	WITHOUT_CLASSIFICATION	2.851802024052841E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998585172265759	WITHOUT_CLASSIFICATION	1.4148277342403468E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9981728271890157	WITHOUT_CLASSIFICATION	0.0018271728109844193	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999397793297804	WITHOUT_CLASSIFICATION	6.022067021968442E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999904496040203	WITHOUT_CLASSIFICATION	9.550395979657206E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999935894561626	WITHOUT_CLASSIFICATION	6.41054383740492E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999935894561626	WITHOUT_CLASSIFICATION	6.41054383740492E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999735010813099	WITHOUT_CLASSIFICATION	2.6498918690216134E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998470904635693	WITHOUT_CLASSIFICATION	1.5290953643059865E-4	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9998708582201923	WITHOUT_CLASSIFICATION	1.29141779807753E-4	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998789479325201	WITHOUT_CLASSIFICATION	1.2105206747993919E-4	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998882536452008	WITHOUT_CLASSIFICATION	1.1174635479911977E-4	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999440754832791	WITHOUT_CLASSIFICATION	5.592451672087328E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996240619015667	WITHOUT_CLASSIFICATION	3.7593809843317614E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999633031499631	WITHOUT_CLASSIFICATION	3.66968500368753E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999908316228312	WITHOUT_CLASSIFICATION	9.168377168770414E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999809080446002	WITHOUT_CLASSIFICATION	1.9091955399882506E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999506791587311	WITHOUT_CLASSIFICATION	4.932084126894492E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999519826522321	WITHOUT_CLASSIFICATION	4.801734776805641E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999826948163616	WITHOUT_CLASSIFICATION	1.730518363847656E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998165403077047	WITHOUT_CLASSIFICATION	1.8345969229522987E-4	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999727059592044	WITHOUT_CLASSIFICATION	2.7294040795639697E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999140357056806	WITHOUT_CLASSIFICATION	8.596429431933219E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999941878252919	WITHOUT_CLASSIFICATION	5.812174708067945E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998547226163788	WITHOUT_CLASSIFICATION	1.4527738362124398E-4	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999965867848994	WITHOUT_CLASSIFICATION	3.4132151005340944E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999778490885843	WITHOUT_CLASSIFICATION	2.215091141562748E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999686694710441	WITHOUT_CLASSIFICATION	3.1330528955973505E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999832669430956	WITHOUT_CLASSIFICATION	1.673305690439708E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999724515937286	WITHOUT_CLASSIFICATION	2.7548406271376426E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999800703554025	WITHOUT_CLASSIFICATION	1.9929644597522594E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999453780862768	WITHOUT_CLASSIFICATION	5.462191372309969E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999942685890781	WITHOUT_CLASSIFICATION	5.731410921875111E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999295317368122	WITHOUT_CLASSIFICATION	7.046826318776764E-5	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998846684667595	WITHOUT_CLASSIFICATION	1.1533153324056973E-4	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999633843589293	WITHOUT_CLASSIFICATION	3.661564107066311E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999938636872086	WITHOUT_CLASSIFICATION	6.13631279145252E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998645290577259	WITHOUT_CLASSIFICATION	1.3547094227411006E-4	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999793154239642	WITHOUT_CLASSIFICATION	2.068457603574983E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995254325433682	WITHOUT_CLASSIFICATION	4.7456745663178475E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999925536664205	WITHOUT_CLASSIFICATION	7.446333579493581E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999865463939939	WITHOUT_CLASSIFICATION	1.3453606006068604E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999971899323116	WITHOUT_CLASSIFICATION	2.810067688401687E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999760877424655	WITHOUT_CLASSIFICATION	2.3912257534473094E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999355387854107	WITHOUT_CLASSIFICATION	6.446121458922825E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999787230848218	WITHOUT_CLASSIFICATION	2.127691517820236E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9994851594038239	WITHOUT_CLASSIFICATION	5.148405961761118E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999466538671612	WITHOUT_CLASSIFICATION	5.3346132838709956E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999280667186721	WITHOUT_CLASSIFICATION	7.193328132786183E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9998840341163834	WITHOUT_CLASSIFICATION	1.159658836164997E-4	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999012002579533	WITHOUT_CLASSIFICATION	9.879974204683719E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999693909857095	WITHOUT_CLASSIFICATION	3.0609014290532846E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999867047597161	WITHOUT_CLASSIFICATION	1.3295240284033573E-5	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9998428769532054	WITHOUT_CLASSIFICATION	1.5712304679462366E-4	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999940872808316	WITHOUT_CLASSIFICATION	5.9127191684516E-6	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999971567750011	WITHOUT_CLASSIFICATION	2.8432249989070008E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999928106367064	WITHOUT_CLASSIFICATION	7.189363293602316E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999280667186721	WITHOUT_CLASSIFICATION	7.193328132786183E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998367084073533	WITHOUT_CLASSIFICATION	1.6329159264677812E-4	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998226885316288	WITHOUT_CLASSIFICATION	1.7731146837106503E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999972654626946	WITHOUT_CLASSIFICATION	2.7345373054469564E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999799265703618	WITHOUT_CLASSIFICATION	2.0073429638187446E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999629366396849	WITHOUT_CLASSIFICATION	3.706336031492432E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999629366396849	WITHOUT_CLASSIFICATION	3.706336031492432E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9995403352050899	WITHOUT_CLASSIFICATION	4.596647949101745E-4	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999896208458334	WITHOUT_CLASSIFICATION	1.03791541666446E-5	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997275106038357	WITHOUT_CLASSIFICATION	2.7248939616425705E-4	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999274144094259	WITHOUT_CLASSIFICATION	7.258559057404093E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999307274814864	WITHOUT_CLASSIFICATION	6.927251851366528E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999981237115974	WITHOUT_CLASSIFICATION	1.8762884026102187E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999950127891385	WITHOUT_CLASSIFICATION	4.987210861444849E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999220729148462	WITHOUT_CLASSIFICATION	7.792708515380627E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999904087229821	WITHOUT_CLASSIFICATION	9.591277017989516E-6	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994635589688127	WITHOUT_CLASSIFICATION	5.36441031187284E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999857147285122	WITHOUT_CLASSIFICATION	1.4285271487859942E-5	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.999991457201074	WITHOUT_CLASSIFICATION	8.542798926021966E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999637085491538	WITHOUT_CLASSIFICATION	3.629145084611078E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999956660383423	WITHOUT_CLASSIFICATION	4.333961657578626E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9993003068004036	WITHOUT_CLASSIFICATION	6.996931995963785E-4	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9985090842707882	WITHOUT_CLASSIFICATION	0.0014909157292117327	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999976074242604	WITHOUT_CLASSIFICATION	2.39257573965288E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999600620384503	WITHOUT_CLASSIFICATION	3.9937961549629735E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999726390927537	WITHOUT_CLASSIFICATION	2.7360907246342694E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999961099461165	WITHOUT_CLASSIFICATION	3.890053883418746E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999901893065096	WITHOUT_CLASSIFICATION	9.810693490468357E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999976983083779	WITHOUT_CLASSIFICATION	2.3016916221411024E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999955282233949	WITHOUT_CLASSIFICATION	4.471776605126429E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999461226893218	WITHOUT_CLASSIFICATION	5.38773106781969E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999680098604318	WITHOUT_CLASSIFICATION	3.199013956813248E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999404197938865	WITHOUT_CLASSIFICATION	5.95802061135478E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999401304442385	WITHOUT_CLASSIFICATION	5.986955576154235E-5	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999576981510171	WITHOUT_CLASSIFICATION	4.230184898295563E-5	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999622986877212	WITHOUT_CLASSIFICATION	3.770131227865748E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999514551305798	WITHOUT_CLASSIFICATION	4.854486942028245E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9988176088605845	WITHOUT_CLASSIFICATION	0.0011823911394155937	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998197639650688	WITHOUT_CLASSIFICATION	1.8023603493125061E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999514551305798	WITHOUT_CLASSIFICATION	4.854486942028245E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999725499428215	WITHOUT_CLASSIFICATION	2.7450057178410755E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999622986877212	WITHOUT_CLASSIFICATION	3.770131227865748E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9997068282034157	WITHOUT_CLASSIFICATION	2.931717965842371E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999514551305798	WITHOUT_CLASSIFICATION	4.854486942028245E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999648731268099	WITHOUT_CLASSIFICATION	3.512687319017274E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999840368414717	WITHOUT_CLASSIFICATION	1.5963158528221596E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999506791587311	WITHOUT_CLASSIFICATION	4.932084126894492E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999878484799799	WITHOUT_CLASSIFICATION	1.2151520020100415E-4	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998219433005845	WITHOUT_CLASSIFICATION	1.7805669941552854E-4	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999848270288386	WITHOUT_CLASSIFICATION	1.5172971161328544E-5	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999845136595967	WITHOUT_CLASSIFICATION	1.5486340403243527E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999697249678018	WITHOUT_CLASSIFICATION	3.0275032198143946E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.999974312726593	WITHOUT_CLASSIFICATION	2.568727340695358E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998715340409837	WITHOUT_CLASSIFICATION	1.284659590162031E-4	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998584286500262	WITHOUT_CLASSIFICATION	1.415713499738248E-4	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999412805332509	WITHOUT_CLASSIFICATION	5.871946674910033E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999629334225273	WITHOUT_CLASSIFICATION	3.7066577472836755E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999472903478477	WITHOUT_CLASSIFICATION	5.270965215230818E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999777865626891	WITHOUT_CLASSIFICATION	2.2213437310973497E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999850262686449	WITHOUT_CLASSIFICATION	1.4973731355129598E-5	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999935879367958	WITHOUT_CLASSIFICATION	6.412063204185054E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998812246893691	WITHOUT_CLASSIFICATION	1.1877531063085987E-4	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999409919134757	WITHOUT_CLASSIFICATION	5.900808652437009E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999362527747475	WITHOUT_CLASSIFICATION	6.374722525247287E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999890642429837	WITHOUT_CLASSIFICATION	1.0935757016239094E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999276231516504	WITHOUT_CLASSIFICATION	7.237684834968522E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999752641208484	WITHOUT_CLASSIFICATION	2.4735879151595927E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999519563428033	WITHOUT_CLASSIFICATION	4.804365719680731E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998873150844844	WITHOUT_CLASSIFICATION	1.126849155156528E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999164845501214	WITHOUT_CLASSIFICATION	8.351544987860146E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999696001403604	WITHOUT_CLASSIFICATION	3.0399859639564107E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999742248046769	WITHOUT_CLASSIFICATION	2.577519532302447E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374082763481	WITHOUT_CLASSIFICATION	6.259172365184922E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440468211414	WITHOUT_CLASSIFICATION	5.5953178858632716E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999544970849049	WITHOUT_CLASSIFICATION	4.550291509496336E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999892437425678	WITHOUT_CLASSIFICATION	1.0756257432221768E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999689456129319	WITHOUT_CLASSIFICATION	3.1054387068045426E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999987411528789	WITHOUT_CLASSIFICATION	1.2588471211088086E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999721560023699	WITHOUT_CLASSIFICATION	2.7843997630026902E-5	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999809320849022	WITHOUT_CLASSIFICATION	1.9067915097789712E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999647815661177	WITHOUT_CLASSIFICATION	3.521843388229419E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999938252371868	WITHOUT_CLASSIFICATION	6.1747628132008055E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999590130360805	WITHOUT_CLASSIFICATION	4.098696391959308E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999805111223456	WITHOUT_CLASSIFICATION	1.948887765426356E-5	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999305164631895	WITHOUT_CLASSIFICATION	6.948353681054605E-5	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999264072212263	WITHOUT_CLASSIFICATION	7.359277877368772E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999952800556396	WITHOUT_CLASSIFICATION	4.71994436030859E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999956015101831	WITHOUT_CLASSIFICATION	4.3984898169079E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999760647745966	WITHOUT_CLASSIFICATION	2.393522540348102E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9993243747843747	WITHOUT_CLASSIFICATION	6.756252156252739E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998205934446951	WITHOUT_CLASSIFICATION	1.7940655530497855E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999543876524326	WITHOUT_CLASSIFICATION	4.561234756741163E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999839814490398	WITHOUT_CLASSIFICATION	1.6018550960169572E-5	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999042051582594	WITHOUT_CLASSIFICATION	9.579484174067343E-5	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999049365345793	WITHOUT_CLASSIFICATION	9.506346542060255E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999276488131811	WITHOUT_CLASSIFICATION	7.235118681891041E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9991893012152002	WITHOUT_CLASSIFICATION	8.106987847997952E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999973738534091	WITHOUT_CLASSIFICATION	2.6261465908476347E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999217864174085	WITHOUT_CLASSIFICATION	7.821358259154566E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9991345276190764	WITHOUT_CLASSIFICATION	8.654723809236725E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998843621225105	WITHOUT_CLASSIFICATION	1.15637877489481E-4	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374082763481	WITHOUT_CLASSIFICATION	6.259172365184922E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999204751205276	WITHOUT_CLASSIFICATION	7.952487947237915E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999979597180091	WITHOUT_CLASSIFICATION	2.0402819910099787E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999523878647544	WITHOUT_CLASSIFICATION	4.7612135245516464E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998796604324924	WITHOUT_CLASSIFICATION	1.2033956750750269E-4	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999786815191504	WITHOUT_CLASSIFICATION	2.131848084965168E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999540667842949	WITHOUT_CLASSIFICATION	4.593321570506176E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999433181902767	WITHOUT_CLASSIFICATION	5.6681809723418126E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999988766712792	WITHOUT_CLASSIFICATION	1.123328720808468E-5	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999855665929304	WITHOUT_CLASSIFICATION	1.4433407069565317E-5	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999629272281623	WITHOUT_CLASSIFICATION	3.707277183761492E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999782047067698	WITHOUT_CLASSIFICATION	2.179529323017234E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999633843589293	WITHOUT_CLASSIFICATION	3.661564107066311E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999124168363072	WITHOUT_CLASSIFICATION	8.758316369284715E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999882806231994	WITHOUT_CLASSIFICATION	1.1719376800603072E-4	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999413505204189	WITHOUT_CLASSIFICATION	5.864947958117542E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999984590684171	WITHOUT_CLASSIFICATION	1.5409315828139613E-6	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999977230432602	WITHOUT_CLASSIFICATION	2.2769567397626925E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999594825811423	WITHOUT_CLASSIFICATION	4.0517418857766185E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999710485218728	WITHOUT_CLASSIFICATION	2.895147812716923E-5	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999969426618907	WITHOUT_CLASSIFICATION	3.057338109325357E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999986653829732	WITHOUT_CLASSIFICATION	1.3346170268067829E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999986653829732	WITHOUT_CLASSIFICATION	1.3346170268067829E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.99994594467957	WITHOUT_CLASSIFICATION	5.4055320429918435E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999778984866959	WITHOUT_CLASSIFICATION	2.2101513304097622E-5	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999798993466597	WITHOUT_CLASSIFICATION	2.010065334036131E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999644132924371	WITHOUT_CLASSIFICATION	3.5586707562894114E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999657164836327	WITHOUT_CLASSIFICATION	3.428351636728397E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999948091728326	WITHOUT_CLASSIFICATION	5.190827167399157E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999563267739039	WITHOUT_CLASSIFICATION	4.367322609599331E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998305906274831	WITHOUT_CLASSIFICATION	1.694093725167354E-4	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998305906274831	WITHOUT_CLASSIFICATION	1.694093725167354E-4	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997679232556791	WITHOUT_CLASSIFICATION	2.3207674432093828E-4	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999856268651188	WITHOUT_CLASSIFICATION	1.437313488107852E-5	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999005204812258	WITHOUT_CLASSIFICATION	9.947951877416122E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999953227864089	WITHOUT_CLASSIFICATION	4.677213591187354E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999953227864089	WITHOUT_CLASSIFICATION	4.677213591187354E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999953227864089	WITHOUT_CLASSIFICATION	4.677213591187354E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999347819592905	WITHOUT_CLASSIFICATION	6.521804070940333E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999538941269608	WITHOUT_CLASSIFICATION	4.6105873039143156E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999978713592601	WITHOUT_CLASSIFICATION	2.128640739896857E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998406520738946	WITHOUT_CLASSIFICATION	1.593479261052971E-4	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999784026645987	WITHOUT_CLASSIFICATION	2.1597335401366335E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999987386649611	WITHOUT_CLASSIFICATION	1.2613350388603588E-6	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999510924452022	WITHOUT_CLASSIFICATION	4.890755479791102E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.997932462931088	WITHOUT_CLASSIFICATION	0.002067537068912143	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999313448091955	WITHOUT_CLASSIFICATION	6.86551908044017E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999600165180936	WITHOUT_CLASSIFICATION	3.998348190637045E-5	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999632423001895	WITHOUT_CLASSIFICATION	3.67576998105364E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999202233188291	WITHOUT_CLASSIFICATION	7.977668117089652E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999506468450566	WITHOUT_CLASSIFICATION	4.9353154943325294E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999788412603214	WITHOUT_CLASSIFICATION	2.1158739678636012E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999979444280911	WITHOUT_CLASSIFICATION	2.0555719089182557E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999993939060814	WITHOUT_CLASSIFICATION	6.060939185990652E-6	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999943047202415	WITHOUT_CLASSIFICATION	5.695279758501707E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999858615270251	WITHOUT_CLASSIFICATION	1.413847297486299E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999986653829732	WITHOUT_CLASSIFICATION	1.3346170268067829E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999821609996312	WITHOUT_CLASSIFICATION	1.7839000368742295E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999938050816388	WITHOUT_CLASSIFICATION	6.194918361250837E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999157660437921	WITHOUT_CLASSIFICATION	8.423395620792585E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999972660467836	WITHOUT_CLASSIFICATION	2.7339532164067753E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999975703639017	WITHOUT_CLASSIFICATION	2.4296360982978988E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999908200484909	WITHOUT_CLASSIFICATION	9.179951509038171E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999523579743109	WITHOUT_CLASSIFICATION	4.764202568916803E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999834256113296	WITHOUT_CLASSIFICATION	1.6574388670341606E-5	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997098099926676	WITHOUT_CLASSIFICATION	2.9019000733240173E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999822640678674	WITHOUT_CLASSIFICATION	1.7735932132622224E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998978173623536	WITHOUT_CLASSIFICATION	1.0218263764639619E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999821179844641	WITHOUT_CLASSIFICATION	1.788201553586684E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.999968355769895	WITHOUT_CLASSIFICATION	3.164423010501384E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999667780270685	WITHOUT_CLASSIFICATION	3.3221972931521995E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999602541483037	WITHOUT_CLASSIFICATION	3.974585169640502E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999984261632331	WITHOUT_CLASSIFICATION	1.5738367668334697E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999900537217036	WITHOUT_CLASSIFICATION	9.94627829654689E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999972979904261	WITHOUT_CLASSIFICATION	2.7020095738833614E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999748534941395	WITHOUT_CLASSIFICATION	2.5146505860530232E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999748534941395	WITHOUT_CLASSIFICATION	2.5146505860530232E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999883448791789	WITHOUT_CLASSIFICATION	1.1655120821253467E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999872807027756	WITHOUT_CLASSIFICATION	1.271929722448529E-5	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999883383254955	WITHOUT_CLASSIFICATION	1.1661674504570657E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999732790886213	WITHOUT_CLASSIFICATION	2.672091137861912E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999986737264277	WITHOUT_CLASSIFICATION	1.3262735722935622E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999967709407063	WITHOUT_CLASSIFICATION	3.2290592936881734E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999360811167348	WITHOUT_CLASSIFICATION	6.391888326510608E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999073317819217	WITHOUT_CLASSIFICATION	9.266821807823654E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999794323481771	WITHOUT_CLASSIFICATION	2.0567651822884714E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999278658428443	WITHOUT_CLASSIFICATION	7.213415715565866E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999472262353984	WITHOUT_CLASSIFICATION	5.277376460151045E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999633843589293	WITHOUT_CLASSIFICATION	3.661564107066311E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999988576375197	WITHOUT_CLASSIFICATION	1.142362480239394E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999879369834653	WITHOUT_CLASSIFICATION	1.2063016534694174E-5	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999997701769395	WITHOUT_CLASSIFICATION	2.298230605101663E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998797063921032	WITHOUT_CLASSIFICATION	1.2029360789681089E-4	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988181928613	WITHOUT_CLASSIFICATION	1.1818071386841857E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988181928613	WITHOUT_CLASSIFICATION	1.1818071386841857E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998636637133074	WITHOUT_CLASSIFICATION	1.363362866926504E-4	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999992220233269	WITHOUT_CLASSIFICATION	7.779766729947855E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998174482068295	WITHOUT_CLASSIFICATION	1.8255179317063234E-4	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999224402850622	WITHOUT_CLASSIFICATION	7.755971493788482E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998299119643503	WITHOUT_CLASSIFICATION	1.7008803564968046E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9995408391728191	WITHOUT_CLASSIFICATION	4.5916082718095157E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999182488832511	WITHOUT_CLASSIFICATION	8.175111674889848E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999906693109694	WITHOUT_CLASSIFICATION	9.330689030642886E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999126842759664	WITHOUT_CLASSIFICATION	8.731572403365854E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9996878712940467	WITHOUT_CLASSIFICATION	3.1212870595323766E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998621055736091	WITHOUT_CLASSIFICATION	1.3789442639094312E-4	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999906693109694	WITHOUT_CLASSIFICATION	9.330689030642886E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999285620473229	WITHOUT_CLASSIFICATION	7.14379526771183E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999628375748785	WITHOUT_CLASSIFICATION	3.716242512142877E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999739218304343	WITHOUT_CLASSIFICATION	2.6078169565714328E-5	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999811675802537	WITHOUT_CLASSIFICATION	1.8832419746362914E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999994007460554	WITHOUT_CLASSIFICATION	5.992539445977003E-6	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999815355701422	WITHOUT_CLASSIFICATION	1.846442985779256E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999503245150205	WITHOUT_CLASSIFICATION	4.967548497938499E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999759724624194	WITHOUT_CLASSIFICATION	2.4027537580585355E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999912995096022	WITHOUT_CLASSIFICATION	8.700490397763111E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999408882282856	WITHOUT_CLASSIFICATION	5.91117717143945E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997974701641884	WITHOUT_CLASSIFICATION	2.0252983581159776E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999877524196329	WITHOUT_CLASSIFICATION	1.2247580367125013E-5	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999892921977351	WITHOUT_CLASSIFICATION	1.070780226486691E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999866277839669	WITHOUT_CLASSIFICATION	1.3372216033136416E-5	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999932009820806	WITHOUT_CLASSIFICATION	6.799017919507379E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999757852397372	WITHOUT_CLASSIFICATION	2.421476026278316E-5	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9983735945955718	WITHOUT_CLASSIFICATION	0.0016264054044281507	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999616099127324	WITHOUT_CLASSIFICATION	3.8390087267600376E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999616099127324	WITHOUT_CLASSIFICATION	3.8390087267600376E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999503245150205	WITHOUT_CLASSIFICATION	4.967548497938499E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999302051164493	WITHOUT_CLASSIFICATION	6.979488355076103E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999932969274438	WITHOUT_CLASSIFICATION	6.703072556217827E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999617290393998	WITHOUT_CLASSIFICATION	3.827096060020184E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999523217579538	WITHOUT_CLASSIFICATION	4.767824204622518E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999639284279319	WITHOUT_CLASSIFICATION	3.6071572068030155E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999803591221946	WITHOUT_CLASSIFICATION	1.9640877805434963E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999843403582339	WITHOUT_CLASSIFICATION	1.565964176602179E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999953377921218	WITHOUT_CLASSIFICATION	4.6622078781945955E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999966740768347	WITHOUT_CLASSIFICATION	3.325923165309446E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999032868549098	WITHOUT_CLASSIFICATION	9.67131450901292E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999958162237315	WITHOUT_CLASSIFICATION	4.183776268624662E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999778746569177	WITHOUT_CLASSIFICATION	2.2125343082330387E-5	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999448840963041	WITHOUT_CLASSIFICATION	5.51159036958527E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999371283414555	WITHOUT_CLASSIFICATION	6.287165854447194E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999710704836577	WITHOUT_CLASSIFICATION	2.8929516342301256E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999979495348673	WITHOUT_CLASSIFICATION	2.050465132696704E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999952926254455	WITHOUT_CLASSIFICATION	4.7073745544900296E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999939170140126	WITHOUT_CLASSIFICATION	6.082985987323544E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998759741155259	WITHOUT_CLASSIFICATION	1.240258844741664E-4	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999907157092899	WITHOUT_CLASSIFICATION	9.284290710063589E-6	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998426624447292	WITHOUT_CLASSIFICATION	1.5733755527087208E-4	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999178631837538	WITHOUT_CLASSIFICATION	8.213681624621613E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998935488692434	WITHOUT_CLASSIFICATION	1.0645113075665423E-4	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999774863176745	WITHOUT_CLASSIFICATION	2.2513682325600605E-5	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999894285924915	WITHOUT_CLASSIFICATION	1.0571407508551891E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999552968749452	WITHOUT_CLASSIFICATION	4.470312505469999E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9992798595596869	WITHOUT_CLASSIFICATION	7.201404403130859E-4	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998452855673506	WITHOUT_CLASSIFICATION	1.547144326493286E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999713700469979	WITHOUT_CLASSIFICATION	2.8629953002097823E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999754832692239	WITHOUT_CLASSIFICATION	2.4516730776065702E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999709905203267	WITHOUT_CLASSIFICATION	2.9009479673297206E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999735463690252	WITHOUT_CLASSIFICATION	2.6453630974723553E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999787050652805	WITHOUT_CLASSIFICATION	2.129493471951399E-5	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999986541172231	WITHOUT_CLASSIFICATION	1.3458827768980152E-5	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999828198538032	WITHOUT_CLASSIFICATION	1.7180146196730626E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998919983898765	WITHOUT_CLASSIFICATION	1.0800161012347689E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999918991125778	WITHOUT_CLASSIFICATION	8.100887422207953E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999820860741668	WITHOUT_CLASSIFICATION	1.791392583314768E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997262633571421	WITHOUT_CLASSIFICATION	2.737366428578293E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999819489782019	WITHOUT_CLASSIFICATION	1.805102179807808E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999590234311959	WITHOUT_CLASSIFICATION	4.097656880402388E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999702045231058	WITHOUT_CLASSIFICATION	2.979547689417108E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9996391239474814	WITHOUT_CLASSIFICATION	3.608760525185783E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999836517523721	WITHOUT_CLASSIFICATION	1.6348247627850764E-5	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998864241307978	WITHOUT_CLASSIFICATION	1.1357586920226126E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997530016229823	WITHOUT_CLASSIFICATION	2.4699837701765983E-4	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999984260017405	WITHOUT_CLASSIFICATION	1.5739982594956975E-5	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997621776613961	WITHOUT_CLASSIFICATION	2.378223386039001E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999997612060896	WITHOUT_CLASSIFICATION	2.387939104081053E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999686573773089	WITHOUT_CLASSIFICATION	3.1342622691091004E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997978609571431	WITHOUT_CLASSIFICATION	2.0213904285680477E-4	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999126842759664	WITHOUT_CLASSIFICATION	8.731572403365854E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999530673335317	WITHOUT_CLASSIFICATION	4.6932666468169834E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999710704836577	WITHOUT_CLASSIFICATION	2.8929516342301256E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999844156804488	WITHOUT_CLASSIFICATION	1.5584319551186532E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999143632494977	WITHOUT_CLASSIFICATION	8.563675050222283E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999844691875013	WITHOUT_CLASSIFICATION	1.5530812498804882E-5	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999844691875013	WITHOUT_CLASSIFICATION	1.5530812498804882E-5	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999940080426479	WITHOUT_CLASSIFICATION	5.991957352111579E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999957944998867	WITHOUT_CLASSIFICATION	4.205500113246343E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997413228218025	WITHOUT_CLASSIFICATION	2.586771781974721E-4	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999339911197096	WITHOUT_CLASSIFICATION	6.600888029044066E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999164437482464	WITHOUT_CLASSIFICATION	8.355625175357313E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999937120900854	WITHOUT_CLASSIFICATION	6.287909914654795E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995977347443967	WITHOUT_CLASSIFICATION	4.0226525560336444E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999975316170485	WITHOUT_CLASSIFICATION	2.468382951474309E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999665810295433	WITHOUT_CLASSIFICATION	3.341897045675515E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999665810295433	WITHOUT_CLASSIFICATION	3.341897045675515E-5	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998669661986092	WITHOUT_CLASSIFICATION	1.3303380139093512E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9986831144291201	WITHOUT_CLASSIFICATION	0.0013168855708799417	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999977329986547	WITHOUT_CLASSIFICATION	2.2670013452951502E-5	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9994894781137716	WITHOUT_CLASSIFICATION	5.105218862283636E-4	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999852741282911	WITHOUT_CLASSIFICATION	1.4725871709064377E-5	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999943630017352	WITHOUT_CLASSIFICATION	5.636998264840053E-6	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999953946411969	WITHOUT_CLASSIFICATION	4.6053588031403006E-6	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999630067940339	WITHOUT_CLASSIFICATION	3.699320596604055E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999744999615212	WITHOUT_CLASSIFICATION	2.5500038478779282E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999719547113625	WITHOUT_CLASSIFICATION	2.8045288637463448E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999719547113625	WITHOUT_CLASSIFICATION	2.8045288637463448E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999339855626646	WITHOUT_CLASSIFICATION	6.601443733537838E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999719398799	WITHOUT_CLASSIFICATION	2.8060120098297E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999220779686279	WITHOUT_CLASSIFICATION	7.792203137204449E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999868415763264	WITHOUT_CLASSIFICATION	1.3158423673530839E-5	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999105952909397	WITHOUT_CLASSIFICATION	8.940470906038014E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9993522106337936	WITHOUT_CLASSIFICATION	6.477893662063748E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999956935082552	WITHOUT_CLASSIFICATION	4.306491744723245E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999781724172521	WITHOUT_CLASSIFICATION	2.1827582747877507E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999173576325537	WITHOUT_CLASSIFICATION	8.264236744631517E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999988897764542	WITHOUT_CLASSIFICATION	1.110223545796782E-5	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999786414479847	WITHOUT_CLASSIFICATION	2.135855201538009E-5	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999289162645493	WITHOUT_CLASSIFICATION	7.108373545067319E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999388935652512	WITHOUT_CLASSIFICATION	6.110643474874228E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277912742555	WITHOUT_CLASSIFICATION	7.220872574450862E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999335673776144	WITHOUT_CLASSIFICATION	6.643262238563399E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999845251299144	WITHOUT_CLASSIFICATION	1.5474870085601158E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999720732744666	WITHOUT_CLASSIFICATION	2.7926725533407343E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558762337495	WITHOUT_CLASSIFICATION	4.412376625044275E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999901943420558	WITHOUT_CLASSIFICATION	9.805657944172277E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999504031195937	WITHOUT_CLASSIFICATION	4.9596880406183386E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999931368724884	WITHOUT_CLASSIFICATION	6.863127511601724E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999972261456996	WITHOUT_CLASSIFICATION	2.7738543003266727E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999930553198549	WITHOUT_CLASSIFICATION	6.944680145051211E-6	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999794853375791	WITHOUT_CLASSIFICATION	2.0514662420883934E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999897453607509	WITHOUT_CLASSIFICATION	1.0254639249169617E-5	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999600678312045	WITHOUT_CLASSIFICATION	3.9932168795485466E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999808150207902	WITHOUT_CLASSIFICATION	1.9184979209902157E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570682583904	WITHOUT_CLASSIFICATION	4.293174160966347E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999908544664915	WITHOUT_CLASSIFICATION	9.14553350854436E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999692077164596	WITHOUT_CLASSIFICATION	3.079228354043364E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998952627267039	WITHOUT_CLASSIFICATION	1.0473727329614942E-4	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999481779504024	WITHOUT_CLASSIFICATION	5.182204959766623E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9928630734023365	WITHOUT_CLASSIFICATION	0.007136926597663492	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999944910681672	WITHOUT_CLASSIFICATION	5.508931832784875E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.999913358368674	WITHOUT_CLASSIFICATION	8.664163132597929E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999974551964341	WITHOUT_CLASSIFICATION	2.5448035659042194E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999485750052487	WITHOUT_CLASSIFICATION	5.142499475132907E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999979104162099	WITHOUT_CLASSIFICATION	2.089583790084858E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999436979675544	WITHOUT_CLASSIFICATION	5.630203244569199E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999693804010422	WITHOUT_CLASSIFICATION	3.061959895774203E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999870606775851	WITHOUT_CLASSIFICATION	1.2939322414936074E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999276761304775	WITHOUT_CLASSIFICATION	7.23238695225645E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998215791537202	WITHOUT_CLASSIFICATION	1.7842084627984846E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.99997080459889	WITHOUT_CLASSIFICATION	2.9195401109962506E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999697723168025	WITHOUT_CLASSIFICATION	3.0227683197577955E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999776449316323	WITHOUT_CLASSIFICATION	2.2355068367668435E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998589167640538	WITHOUT_CLASSIFICATION	1.4108323594617519E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999819151671417	WITHOUT_CLASSIFICATION	1.808483285822766E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999842796847104	WITHOUT_CLASSIFICATION	1.572031528967171E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999771020029291	WITHOUT_CLASSIFICATION	2.2897997070875975E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999855627915857	WITHOUT_CLASSIFICATION	1.4437208414266301E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999914079845809	WITHOUT_CLASSIFICATION	8.592015419177184E-6	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991856652322	WITHOUT_CLASSIFICATION	8.143347677840429E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999825192229219	WITHOUT_CLASSIFICATION	1.7480777078036187E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999761052910402	WITHOUT_CLASSIFICATION	2.3894708959752506E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999120883741575	WITHOUT_CLASSIFICATION	8.791162584254437E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999761052910402	WITHOUT_CLASSIFICATION	2.3894708959752506E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999826199716779	WITHOUT_CLASSIFICATION	1.738002832206614E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999953539531499	WITHOUT_CLASSIFICATION	4.646046850211776E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999806642155158	WITHOUT_CLASSIFICATION	1.9335784484193094E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999882773617977	WITHOUT_CLASSIFICATION	1.1722638202206874E-5	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999791376721892	WITHOUT_CLASSIFICATION	2.086232781083371E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999806642155158	WITHOUT_CLASSIFICATION	1.9335784484193094E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999918793421128	WITHOUT_CLASSIFICATION	8.120657887359416E-6	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9994538996965062	WITHOUT_CLASSIFICATION	5.461003034937975E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999867689896534	WITHOUT_CLASSIFICATION	1.323101034663935E-5	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999847846468087	WITHOUT_CLASSIFICATION	1.5215353191389163E-5	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999685985312071	WITHOUT_CLASSIFICATION	3.140146879290885E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999903145039363	WITHOUT_CLASSIFICATION	9.685496063710359E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999979873935985	WITHOUT_CLASSIFICATION	2.012606401606978E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9995821562122335	WITHOUT_CLASSIFICATION	4.1784378776644224E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999887346360958	WITHOUT_CLASSIFICATION	1.1265363904237742E-5	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999846175801381	WITHOUT_CLASSIFICATION	1.538241986196755E-5	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999295225208171	WITHOUT_CLASSIFICATION	7.047747918278875E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999963964487288	WITHOUT_CLASSIFICATION	3.603551271133291E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999998882779071	WITHOUT_CLASSIFICATION	1.117220929029809E-6	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9995732366830469	WITHOUT_CLASSIFICATION	4.2676331695317495E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999963519797269	WITHOUT_CLASSIFICATION	3.6480202731134815E-6	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999096156703439	WITHOUT_CLASSIFICATION	9.038432965607356E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9967133285646045	WITHOUT_CLASSIFICATION	0.003286671435395361	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999701940355498	WITHOUT_CLASSIFICATION	2.9805964450244565E-5	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999288920957309	WITHOUT_CLASSIFICATION	7.110790426909928E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9987836574313999	WITHOUT_CLASSIFICATION	0.0012163425686001826	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999751618144282	WITHOUT_CLASSIFICATION	2.4838185571719827E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999834125825127	WITHOUT_CLASSIFICATION	1.6587417487339708E-5	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999558173347114	WITHOUT_CLASSIFICATION	4.418266528847959E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.999967822785516	WITHOUT_CLASSIFICATION	3.217721448387926E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999792016889012	WITHOUT_CLASSIFICATION	2.0798311098893943E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999990842813277	WITHOUT_CLASSIFICATION	9.157186723033937E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999894573940065	WITHOUT_CLASSIFICATION	1.0542605993475167E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999698670852488	WITHOUT_CLASSIFICATION	3.0132914751251152E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999856683507565	WITHOUT_CLASSIFICATION	1.4331649243365684E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999652203125704	WITHOUT_CLASSIFICATION	3.477968742962312E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999587466166487	WITHOUT_CLASSIFICATION	4.1253383351206606E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999759601668102	WITHOUT_CLASSIFICATION	2.403983318965164E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993555729330108	WITHOUT_CLASSIFICATION	6.444270669892112E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9987836574313999	WITHOUT_CLASSIFICATION	0.0012163425686001826	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999841222497354	WITHOUT_CLASSIFICATION	1.5877750264580508E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999107417325261	WITHOUT_CLASSIFICATION	8.925826747385817E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999771154597919	WITHOUT_CLASSIFICATION	2.2884540208108285E-4	TEST
special case	WITHOUT_CLASSIFICATION	0.999960391562089	WITHOUT_CLASSIFICATION	3.960843791089279E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999829460220455	WITHOUT_CLASSIFICATION	1.7053977954460452E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999904750508339	WITHOUT_CLASSIFICATION	9.52494916607902E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9997456064933402	WITHOUT_CLASSIFICATION	2.543935066597925E-4	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999288120636171	WITHOUT_CLASSIFICATION	7.118793638291861E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999357439436446	WITHOUT_CLASSIFICATION	6.425605635533513E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999678018701078	WITHOUT_CLASSIFICATION	3.219812989213401E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999128965022406	WITHOUT_CLASSIFICATION	8.710349775942823E-5	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999917296751969	WITHOUT_CLASSIFICATION	8.270324802993536E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999872128140231	WITHOUT_CLASSIFICATION	1.2787185976883043E-5	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999809536889465	WITHOUT_CLASSIFICATION	1.9046311053458276E-5	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999768476460587	WITHOUT_CLASSIFICATION	2.3152353941392394E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999899060869479	WITHOUT_CLASSIFICATION	1.0093913052146051E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9997232286546034	WITHOUT_CLASSIFICATION	2.767713453966358E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996819177001679	WITHOUT_CLASSIFICATION	3.180822998321163E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.99929147512657	WITHOUT_CLASSIFICATION	7.085248734299989E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999506682630861	WITHOUT_CLASSIFICATION	4.9331736913978954E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.99990151131877	WITHOUT_CLASSIFICATION	9.848868123008032E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.99990151131877	WITHOUT_CLASSIFICATION	9.848868123008032E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999961905462117	WITHOUT_CLASSIFICATION	3.8094537883476666E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.99990151131877	WITHOUT_CLASSIFICATION	9.848868123008032E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.99990151131877	WITHOUT_CLASSIFICATION	9.848868123008032E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999905510248577	WITHOUT_CLASSIFICATION	9.44897514230164E-6	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996167807210771	WITHOUT_CLASSIFICATION	3.832192789229241E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999927873355835	WITHOUT_CLASSIFICATION	7.212664416507288E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999927873355835	WITHOUT_CLASSIFICATION	7.212664416507288E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999929766236803	WITHOUT_CLASSIFICATION	7.023376319758822E-6	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999081305483286	WITHOUT_CLASSIFICATION	9.186945167146942E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999504819798077	WITHOUT_CLASSIFICATION	4.951802019223566E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998721642793146	WITHOUT_CLASSIFICATION	1.278357206853323E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999669248928627	WITHOUT_CLASSIFICATION	3.307510713738429E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.999813596465405	WITHOUT_CLASSIFICATION	1.8640353459502273E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999743974073287	WITHOUT_CLASSIFICATION	2.5602592671303737E-4	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999860465081102	WITHOUT_CLASSIFICATION	1.3953491889711895E-5	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998629856814789	WITHOUT_CLASSIFICATION	1.370143185210729E-4	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998491003108824	WITHOUT_CLASSIFICATION	1.508996891177727E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999728418959511	WITHOUT_CLASSIFICATION	2.7158104048886565E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997634059034862	WITHOUT_CLASSIFICATION	2.3659409651381516E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999659103893773	WITHOUT_CLASSIFICATION	3.408961062270767E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999646187389297	WITHOUT_CLASSIFICATION	3.538126107028533E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999433442169343	WITHOUT_CLASSIFICATION	5.665578306569184E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9997995623262214	WITHOUT_CLASSIFICATION	2.0043767377849543E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999975215777684	WITHOUT_CLASSIFICATION	2.4784222315315718E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999515754222587	WITHOUT_CLASSIFICATION	4.842457774133182E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999659103893773	WITHOUT_CLASSIFICATION	3.408961062270767E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999751618144282	WITHOUT_CLASSIFICATION	2.4838185571719827E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999704461973997	WITHOUT_CLASSIFICATION	2.955380260030204E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999735151694524	WITHOUT_CLASSIFICATION	2.6484830547561826E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999627798808043	WITHOUT_CLASSIFICATION	3.722011919577531E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.999980015384346	WITHOUT_CLASSIFICATION	1.998461565403902E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999828954599579	WITHOUT_CLASSIFICATION	1.710454004206428E-5	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.999815127790641	WITHOUT_CLASSIFICATION	1.8487220935890788E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999737733581496	WITHOUT_CLASSIFICATION	2.6226641850358347E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999988325633979	WITHOUT_CLASSIFICATION	1.1674366021033119E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999837709179967	WITHOUT_CLASSIFICATION	1.6229082003330863E-5	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.999975349160787	WITHOUT_CLASSIFICATION	2.4650839212954303E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999079075525436	WITHOUT_CLASSIFICATION	9.20924474563648E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999919758990937	WITHOUT_CLASSIFICATION	8.024100906211043E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999743805965007	WITHOUT_CLASSIFICATION	2.5619403499211887E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9995774207186212	WITHOUT_CLASSIFICATION	4.225792813787924E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999874953221896	WITHOUT_CLASSIFICATION	1.2504677810395477E-4	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.999979529170173	WITHOUT_CLASSIFICATION	2.0470829827119823E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999836292344785	WITHOUT_CLASSIFICATION	1.6370765521431094E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999885750060841	WITHOUT_CLASSIFICATION	1.142499391590797E-4	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997542032219002	WITHOUT_CLASSIFICATION	2.457967780997616E-4	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999700121648211	WITHOUT_CLASSIFICATION	2.99878351789167E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999727695113549	WITHOUT_CLASSIFICATION	2.7230488645076288E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999481056049	WITHOUT_CLASSIFICATION	5.1894395065118945E-8	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999988325633979	WITHOUT_CLASSIFICATION	1.1674366021033119E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999743642815333	WITHOUT_CLASSIFICATION	2.5635718466748502E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999556160497367	WITHOUT_CLASSIFICATION	4.438395026327525E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999697930867826	WITHOUT_CLASSIFICATION	3.0206913217472493E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999946265668441	WITHOUT_CLASSIFICATION	5.37343315591224E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999628142964433	WITHOUT_CLASSIFICATION	3.718570355678711E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999819031251457	WITHOUT_CLASSIFICATION	1.8096874854348783E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999640407537761	WITHOUT_CLASSIFICATION	3.595924622392599E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999819031251457	WITHOUT_CLASSIFICATION	1.8096874854348783E-5	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999663311804509	WITHOUT_CLASSIFICATION	3.366881954907825E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999576929421287	WITHOUT_CLASSIFICATION	4.230705787138871E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999775106788485	WITHOUT_CLASSIFICATION	2.2489321151497646E-5	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999669551123139	WITHOUT_CLASSIFICATION	3.304488768604139E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999815612935761	WITHOUT_CLASSIFICATION	1.84387064238899E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999572992217535	WITHOUT_CLASSIFICATION	4.270077824650785E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999488775335063	WITHOUT_CLASSIFICATION	5.112246649365314E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999576929421287	WITHOUT_CLASSIFICATION	4.230705787138871E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999404369687851	WITHOUT_CLASSIFICATION	5.956303121501229E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998936238322537	WITHOUT_CLASSIFICATION	1.0637616774635412E-4	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999279809598387	WITHOUT_CLASSIFICATION	7.201904016131686E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999909273901052	WITHOUT_CLASSIFICATION	9.072609894792937E-5	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999855903618007	WITHOUT_CLASSIFICATION	1.4409638199272965E-5	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999464767015667	WITHOUT_CLASSIFICATION	5.352329843342291E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999778593931924	WITHOUT_CLASSIFICATION	2.214060680760733E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332687436973	WITHOUT_CLASSIFICATION	6.673125630271504E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999411161822689	WITHOUT_CLASSIFICATION	5.888381773104314E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431846602116	WITHOUT_CLASSIFICATION	5.681533978828892E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431846602116	WITHOUT_CLASSIFICATION	5.681533978828892E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431846602116	WITHOUT_CLASSIFICATION	5.681533978828892E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975810443259	WITHOUT_CLASSIFICATION	2.4189556741652557E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975810443259	WITHOUT_CLASSIFICATION	2.4189556741652557E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9996566392439394	WITHOUT_CLASSIFICATION	3.433607560605274E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999954954655559	WITHOUT_CLASSIFICATION	4.5045344440754315E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999629564405796	WITHOUT_CLASSIFICATION	3.7043559420272365E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999681994033771	WITHOUT_CLASSIFICATION	3.180059662277526E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999477026012761	WITHOUT_CLASSIFICATION	5.2297398723768315E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279996050424	WITHOUT_CLASSIFICATION	7.20003949575628E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315751475646	WITHOUT_CLASSIFICATION	6.842485243540755E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999760886547522	WITHOUT_CLASSIFICATION	2.3911345247755127E-5	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490312514099	WITHOUT_CLASSIFICATION	5.096874859008937E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279996050424	WITHOUT_CLASSIFICATION	7.20003949575628E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315751475646	WITHOUT_CLASSIFICATION	6.842485243540755E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999699374095459	WITHOUT_CLASSIFICATION	3.006259045417853E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999709486568498	WITHOUT_CLASSIFICATION	2.9051343150208112E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999937247687393	WITHOUT_CLASSIFICATION	6.275231260835793E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999749156757012	WITHOUT_CLASSIFICATION	2.5084324298825013E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999756311575176	WITHOUT_CLASSIFICATION	2.4368842482292477E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999550299926938	WITHOUT_CLASSIFICATION	4.497000730626735E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999523864573553	WITHOUT_CLASSIFICATION	4.76135426447736E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999735584048535	WITHOUT_CLASSIFICATION	2.6441595146501288E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998461848774155	WITHOUT_CLASSIFICATION	1.5381512258455448E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999269818150498	WITHOUT_CLASSIFICATION	7.301818495020147E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999470297950772	WITHOUT_CLASSIFICATION	5.2970204922725716E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999876580126789	WITHOUT_CLASSIFICATION	1.234198732121784E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999478869092049	WITHOUT_CLASSIFICATION	5.2113090795037234E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9942588407563817	WITHOUT_CLASSIFICATION	0.005741159243618307	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999629334225273	WITHOUT_CLASSIFICATION	3.7066577472836755E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999514810337918	WITHOUT_CLASSIFICATION	4.851896620813525E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998688286408259	WITHOUT_CLASSIFICATION	1.3117135917407196E-4	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999995552855971	WITHOUT_CLASSIFICATION	4.447144028972004E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998604360811665	WITHOUT_CLASSIFICATION	1.3956391883362823E-4	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999308382005287	WITHOUT_CLASSIFICATION	6.916179947122404E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999801873037107	WITHOUT_CLASSIFICATION	1.981269628919595E-5	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999373560529238	WITHOUT_CLASSIFICATION	6.26439470761941E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999315107882013	WITHOUT_CLASSIFICATION	6.848921179870031E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999966980931909	WITHOUT_CLASSIFICATION	3.3019068090925026E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275566255756	WITHOUT_CLASSIFICATION	7.244337442433737E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999903204070733	WITHOUT_CLASSIFICATION	9.679592926697417E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999337185249442	WITHOUT_CLASSIFICATION	6.628147505584786E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999337185249442	WITHOUT_CLASSIFICATION	6.628147505584786E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999035709505252	WITHOUT_CLASSIFICATION	9.642904947475935E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999873462996494	WITHOUT_CLASSIFICATION	1.2653700350618491E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998380557405003	WITHOUT_CLASSIFICATION	1.619442594996816E-4	TEST
/	WITHOUT_CLASSIFICATION	0.9999633843589293	WITHOUT_CLASSIFICATION	3.661564107066311E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999942413082258	WITHOUT_CLASSIFICATION	5.758691774252158E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999753460371439	WITHOUT_CLASSIFICATION	2.4653962856134358E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999248688627257	WITHOUT_CLASSIFICATION	7.513113727433133E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999865640929385	WITHOUT_CLASSIFICATION	1.3435907061589323E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999724883987046	WITHOUT_CLASSIFICATION	2.751160129552955E-5	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9998546787259801	WITHOUT_CLASSIFICATION	1.4532127401986348E-4	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9990853406597485	WITHOUT_CLASSIFICATION	9.146593402515022E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998274435877371	WITHOUT_CLASSIFICATION	1.7255641226288275E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999951432479979	WITHOUT_CLASSIFICATION	4.856752002114428E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999712190455362	WITHOUT_CLASSIFICATION	2.8780954463823785E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999110101067538	WITHOUT_CLASSIFICATION	8.898989324626458E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999910619926763	WITHOUT_CLASSIFICATION	8.93800732369604E-5	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999859981701187	WITHOUT_CLASSIFICATION	1.4001829881246876E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998274435877371	WITHOUT_CLASSIFICATION	1.7255641226288275E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998274435877371	WITHOUT_CLASSIFICATION	1.7255641226288275E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9998938156250206	WITHOUT_CLASSIFICATION	1.0618437497941511E-4	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999966461079905	WITHOUT_CLASSIFICATION	3.3538920094967924E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9973250765670206	WITHOUT_CLASSIFICATION	0.0026749234329794527	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999829006696129	WITHOUT_CLASSIFICATION	1.709933038703588E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999667780270685	WITHOUT_CLASSIFICATION	3.3221972931521995E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998688286408259	WITHOUT_CLASSIFICATION	1.3117135917407196E-4	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9987865268689413	WITHOUT_CLASSIFICATION	0.0012134731310586683	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999880798722385	WITHOUT_CLASSIFICATION	1.1920127761472013E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999723032970471	WITHOUT_CLASSIFICATION	2.7696702952880415E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298874521575	WITHOUT_CLASSIFICATION	7.011254784241796E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999982780809089	WITHOUT_CLASSIFICATION	1.7219190910988887E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464123204335	WITHOUT_CLASSIFICATION	5.3587679566582145E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999711033485875	WITHOUT_CLASSIFICATION	2.8896651412469223E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999711033485875	WITHOUT_CLASSIFICATION	2.8896651412469223E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999711033485875	WITHOUT_CLASSIFICATION	2.8896651412469223E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999711033485875	WITHOUT_CLASSIFICATION	2.8896651412469223E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295490121273	WITHOUT_CLASSIFICATION	7.045098787275882E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998391554597812	WITHOUT_CLASSIFICATION	1.6084454021878767E-4	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997825512220649	WITHOUT_CLASSIFICATION	2.1744877793504228E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999467548148369	WITHOUT_CLASSIFICATION	5.324518516324582E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276621325547	WITHOUT_CLASSIFICATION	7.233786744538787E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332141497833	WITHOUT_CLASSIFICATION	6.678585021670702E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999606959824725	WITHOUT_CLASSIFICATION	3.930401752747564E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999745016872416	WITHOUT_CLASSIFICATION	2.549831275844923E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999729348826045	WITHOUT_CLASSIFICATION	2.7065117395387396E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999303272655371	WITHOUT_CLASSIFICATION	6.967273446294507E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999922915540537	WITHOUT_CLASSIFICATION	7.708445946214778E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999665495143029	WITHOUT_CLASSIFICATION	3.34504856971425E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999651684937937	WITHOUT_CLASSIFICATION	3.4831506206202836E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999651684937937	WITHOUT_CLASSIFICATION	3.4831506206202836E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999651684937937	WITHOUT_CLASSIFICATION	3.4831506206202836E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999859081080338	WITHOUT_CLASSIFICATION	1.4091891966083201E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999784602541134	WITHOUT_CLASSIFICATION	2.153974588656078E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999993415006454	WITHOUT_CLASSIFICATION	6.584993546097923E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275598625942	WITHOUT_CLASSIFICATION	7.244013740580733E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999887858496097	WITHOUT_CLASSIFICATION	1.1214150390223312E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431846602116	WITHOUT_CLASSIFICATION	5.681533978828892E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999905261709499	WITHOUT_CLASSIFICATION	9.473829050161688E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999519174542897	WITHOUT_CLASSIFICATION	4.808254571033834E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999827838135253	WITHOUT_CLASSIFICATION	1.7216186474690963E-5	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998984272777643	WITHOUT_CLASSIFICATION	1.01572722235669E-4	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999781327355408	WITHOUT_CLASSIFICATION	2.1867264459150694E-5	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999840234832628	WITHOUT_CLASSIFICATION	1.597651673718196E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999172745321936	WITHOUT_CLASSIFICATION	8.272546780637437E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998723184863766	WITHOUT_CLASSIFICATION	1.2768151362344424E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999414754808277	WITHOUT_CLASSIFICATION	5.852451917217692E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999940580313458	WITHOUT_CLASSIFICATION	5.941968654210258E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999918563615009	WITHOUT_CLASSIFICATION	8.143638499115731E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999943471365869	WITHOUT_CLASSIFICATION	5.6528634130355515E-6	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999703129915557	WITHOUT_CLASSIFICATION	2.968700844428048E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999984521919215	WITHOUT_CLASSIFICATION	1.547808078537829E-6	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998926856872745	WITHOUT_CLASSIFICATION	1.0731431272549492E-4	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999925394838832	WITHOUT_CLASSIFICATION	7.460516116779516E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999313313020829	WITHOUT_CLASSIFICATION	6.86686979171406E-5	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999976019214742	WITHOUT_CLASSIFICATION	2.3980785257927046E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999732536022099	WITHOUT_CLASSIFICATION	2.674639779010168E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9996157104355505	WITHOUT_CLASSIFICATION	3.842895644494837E-4	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999772566578409	WITHOUT_CLASSIFICATION	2.2743342159136157E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999227653646	WITHOUT_CLASSIFICATION	7.723463535024963E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999560640690597	WITHOUT_CLASSIFICATION	4.393593094029271E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999101972194139	WITHOUT_CLASSIFICATION	8.98027805861094E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999759684870508	WITHOUT_CLASSIFICATION	2.4031512949208883E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995846605844082	WITHOUT_CLASSIFICATION	4.1533941559173174E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999976074242604	WITHOUT_CLASSIFICATION	2.39257573965288E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999815329537458	WITHOUT_CLASSIFICATION	1.8467046254126785E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999550081410588	WITHOUT_CLASSIFICATION	4.499185894137839E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999830488281599	WITHOUT_CLASSIFICATION	1.695117184003374E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999347519906959	WITHOUT_CLASSIFICATION	6.524800930402334E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999460390019241	WITHOUT_CLASSIFICATION	5.396099807592705E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9993191037085523	WITHOUT_CLASSIFICATION	6.808962914478689E-4	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999600012292194	WITHOUT_CLASSIFICATION	3.9998770780676744E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999889181405657	WITHOUT_CLASSIFICATION	1.1081859434392588E-5	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998857967370113	WITHOUT_CLASSIFICATION	1.1420326298876018E-4	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999965658625771	WITHOUT_CLASSIFICATION	3.4341374229387817E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999935894561626	WITHOUT_CLASSIFICATION	6.41054383740492E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999470520090059	WITHOUT_CLASSIFICATION	5.2947990994151235E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999190770874774	WITHOUT_CLASSIFICATION	8.092291252256651E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999933055002337	WITHOUT_CLASSIFICATION	6.6944997662481885E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999364151582902	WITHOUT_CLASSIFICATION	6.358484170979293E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999591251898572	WITHOUT_CLASSIFICATION	4.087481014270059E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998414316968637	WITHOUT_CLASSIFICATION	1.5856830313640675E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999872834827148	WITHOUT_CLASSIFICATION	1.2716517285184478E-5	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999617356785893	WITHOUT_CLASSIFICATION	3.8264321410759524E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999123063443641	WITHOUT_CLASSIFICATION	8.769365563580433E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999932162549747	WITHOUT_CLASSIFICATION	6.7837450252506185E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999622844223625	WITHOUT_CLASSIFICATION	3.771557763758964E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9992964627126578	WITHOUT_CLASSIFICATION	7.035372873422355E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999881654609231	WITHOUT_CLASSIFICATION	1.1834539076964016E-5	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999855546165621	WITHOUT_CLASSIFICATION	1.4445383437861362E-5	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998874784948664	WITHOUT_CLASSIFICATION	1.1252150513355856E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999814524940687	WITHOUT_CLASSIFICATION	1.8547505931342516E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999638935229248	WITHOUT_CLASSIFICATION	3.610647707513855E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9997935228426189	WITHOUT_CLASSIFICATION	2.0647715738102406E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993692230796	WITHOUT_CLASSIFICATION	6.307769204714042E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999283416129067	WITHOUT_CLASSIFICATION	7.165838709331889E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996841000337742	WITHOUT_CLASSIFICATION	3.158999662258679E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999802334357398	WITHOUT_CLASSIFICATION	1.9766564260161494E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999697999424363	WITHOUT_CLASSIFICATION	3.0200057563737575E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999983157646312	WITHOUT_CLASSIFICATION	1.6842353688097255E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999101642993786	WITHOUT_CLASSIFICATION	8.98357006213432E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999997332887004	WITHOUT_CLASSIFICATION	2.6671129960837254E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999725981796805	WITHOUT_CLASSIFICATION	2.7401820319390212E-5	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999880297706567	WITHOUT_CLASSIFICATION	1.1970229343326225E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999786159377899	WITHOUT_CLASSIFICATION	2.1384062210136714E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999991276174451	WITHOUT_CLASSIFICATION	8.723825549024479E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999863636456039	WITHOUT_CLASSIFICATION	1.3636354396093871E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999696771906209	WITHOUT_CLASSIFICATION	3.0322809379148625E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999983818736036	WITHOUT_CLASSIFICATION	1.6181263964867533E-6	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999478412364898	WITHOUT_CLASSIFICATION	5.2158763510115616E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9994971216841723	WITHOUT_CLASSIFICATION	5.028783158277279E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999283181209762	WITHOUT_CLASSIFICATION	7.168187902384398E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999133264133317	WITHOUT_CLASSIFICATION	8.667358666829371E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9970881701188747	WITHOUT_CLASSIFICATION	0.0029118298811253718	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.999962557189482	WITHOUT_CLASSIFICATION	3.744281051802961E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999149374882452	WITHOUT_CLASSIFICATION	8.506251175482881E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999913959618144	WITHOUT_CLASSIFICATION	8.604038185510898E-6	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999506949269341	WITHOUT_CLASSIFICATION	4.930507306594667E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996766843508608	WITHOUT_CLASSIFICATION	3.233156491392685E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999951318495514	WITHOUT_CLASSIFICATION	4.868150448594535E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999784540194745	WITHOUT_CLASSIFICATION	2.1545980525456898E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999778720167511	WITHOUT_CLASSIFICATION	2.212798324881191E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999839662717631	WITHOUT_CLASSIFICATION	1.6033728236890553E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.999851132150796	WITHOUT_CLASSIFICATION	1.4886784920399763E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999543618299459	WITHOUT_CLASSIFICATION	4.563817005417265E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999692623220727	WITHOUT_CLASSIFICATION	3.0737677927204656E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999629598473476	WITHOUT_CLASSIFICATION	3.7040152652444685E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999906430612665	WITHOUT_CLASSIFICATION	9.356938733539786E-6	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999770124025831	WITHOUT_CLASSIFICATION	2.2987597416921084E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999868745770699	WITHOUT_CLASSIFICATION	1.312542293009887E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999868745770699	WITHOUT_CLASSIFICATION	1.312542293009887E-5	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999928813628091	WITHOUT_CLASSIFICATION	7.118637190894272E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999487574222304	WITHOUT_CLASSIFICATION	5.124257776955716E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999695908203493	WITHOUT_CLASSIFICATION	3.040917965067691E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9995506257102579	WITHOUT_CLASSIFICATION	4.4937428974222663E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999761012067446	WITHOUT_CLASSIFICATION	2.3898793255459113E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994043729320852	WITHOUT_CLASSIFICATION	5.956270679148636E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9993089805397024	WITHOUT_CLASSIFICATION	6.910194602976791E-4	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999735258747025	WITHOUT_CLASSIFICATION	2.647412529749975E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999939376007918	WITHOUT_CLASSIFICATION	6.062399208188195E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9967102163773949	WITHOUT_CLASSIFICATION	0.003289783622605159	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999875008253585	WITHOUT_CLASSIFICATION	1.2499174641535667E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999633197750729	WITHOUT_CLASSIFICATION	3.668022492704357E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9996701043621102	WITHOUT_CLASSIFICATION	3.2989563788972636E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999765175812183	WITHOUT_CLASSIFICATION	2.3482418781722214E-5	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999917686664328	WITHOUT_CLASSIFICATION	8.2313335673091E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9997213694809983	WITHOUT_CLASSIFICATION	2.7863051900164134E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999963616429566	WITHOUT_CLASSIFICATION	3.638357043402851E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999963616429566	WITHOUT_CLASSIFICATION	3.638357043402851E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999839717617074	WITHOUT_CLASSIFICATION	1.6028238292609724E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996271552477848	WITHOUT_CLASSIFICATION	3.7284475221524777E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999811290563924	WITHOUT_CLASSIFICATION	1.887094360760999E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999141001324151	WITHOUT_CLASSIFICATION	8.589986758477443E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999943584239241	WITHOUT_CLASSIFICATION	5.641576075891286E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999680098604318	WITHOUT_CLASSIFICATION	3.199013956813248E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999943584239241	WITHOUT_CLASSIFICATION	5.641576075891286E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999817951054663	WITHOUT_CLASSIFICATION	1.8204894533739766E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999396242417333	WITHOUT_CLASSIFICATION	6.037575826655361E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999844331288041	WITHOUT_CLASSIFICATION	1.5566871195860268E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999844331288041	WITHOUT_CLASSIFICATION	1.5566871195860268E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999288545790644	WITHOUT_CLASSIFICATION	7.114542093555667E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999573596169374	WITHOUT_CLASSIFICATION	4.2640383062628464E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997462609384439	WITHOUT_CLASSIFICATION	2.537390615560733E-4	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999987392206949	WITHOUT_CLASSIFICATION	1.260779305089462E-6	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999239593604223	WITHOUT_CLASSIFICATION	7.604063957765193E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999939281565081	WITHOUT_CLASSIFICATION	6.071843491879797E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999858615270251	WITHOUT_CLASSIFICATION	1.413847297486299E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999912396041026	WITHOUT_CLASSIFICATION	8.760395897365264E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999042153880432	WITHOUT_CLASSIFICATION	9.578461195685111E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999839814490398	WITHOUT_CLASSIFICATION	1.6018550960169572E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998796604324924	WITHOUT_CLASSIFICATION	1.2033956750750269E-4	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9754388177019493	WITHOUT_CLASSIFICATION	0.024561182298050665	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999693680019354	WITHOUT_CLASSIFICATION	3.0631998064655674E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999720732744666	WITHOUT_CLASSIFICATION	2.7926725533407343E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999839435428156	WITHOUT_CLASSIFICATION	1.605645718439117E-5	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999765992247389	WITHOUT_CLASSIFICATION	2.3400775261134677E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997279576717734	WITHOUT_CLASSIFICATION	2.7204232822660064E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999604315061501	WITHOUT_CLASSIFICATION	3.95684938499016E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999949893708007	WITHOUT_CLASSIFICATION	5.0106291992980255E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999927897085994	WITHOUT_CLASSIFICATION	7.210291400595323E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999770296853517	WITHOUT_CLASSIFICATION	2.297031464826951E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999748335217968	WITHOUT_CLASSIFICATION	2.516647820314154E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999466130555924	WITHOUT_CLASSIFICATION	5.338694440763663E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999206489146109	WITHOUT_CLASSIFICATION	7.935108538913102E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9992357972334701	WITHOUT_CLASSIFICATION	7.64202766529832E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999828983396892	WITHOUT_CLASSIFICATION	1.710166031075592E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999949370141693	WITHOUT_CLASSIFICATION	5.062985830691586E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988181928613	WITHOUT_CLASSIFICATION	1.1818071386841857E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999240382744683	WITHOUT_CLASSIFICATION	7.596172553165301E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999636362501413	WITHOUT_CLASSIFICATION	3.636374985862675E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999392906677794	WITHOUT_CLASSIFICATION	6.070933222066415E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9996895129307202	WITHOUT_CLASSIFICATION	3.104870692797807E-4	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999903744185971	WITHOUT_CLASSIFICATION	9.625581402891858E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999423248876502	WITHOUT_CLASSIFICATION	5.767511234972005E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999703804552531	WITHOUT_CLASSIFICATION	2.9619544746866057E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999703804552531	WITHOUT_CLASSIFICATION	2.9619544746866057E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999523474024987	WITHOUT_CLASSIFICATION	4.765259750133771E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999713051594425	WITHOUT_CLASSIFICATION	2.8694840557457713E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999899429000981	WITHOUT_CLASSIFICATION	1.0057099901869496E-5	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999743909030462	WITHOUT_CLASSIFICATION	2.560909695379294E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999697107284088	WITHOUT_CLASSIFICATION	3.0289271591149937E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999954069678886	WITHOUT_CLASSIFICATION	4.593032111371816E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999093413318	WITHOUT_CLASSIFICATION	9.065866833345814E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999404424397393	WITHOUT_CLASSIFICATION	5.955756026065871E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999523474024987	WITHOUT_CLASSIFICATION	4.765259750133771E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999713051594425	WITHOUT_CLASSIFICATION	2.8694840557457713E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997748091572779	WITHOUT_CLASSIFICATION	2.2519084272211852E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999617130365578	WITHOUT_CLASSIFICATION	3.828696344223716E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999926517298929	WITHOUT_CLASSIFICATION	7.348270106976593E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998720098824423	WITHOUT_CLASSIFICATION	1.279901175577031E-4	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999743368761633	WITHOUT_CLASSIFICATION	2.5663123836752618E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9994842619353612	WITHOUT_CLASSIFICATION	5.157380646388263E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999391724236051	WITHOUT_CLASSIFICATION	6.0827576394894046E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999608513523008	WITHOUT_CLASSIFICATION	3.9148647699143565E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999752993402402	WITHOUT_CLASSIFICATION	2.470065975982081E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9986544278189559	WITHOUT_CLASSIFICATION	0.001345572181044208	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999883070143265	WITHOUT_CLASSIFICATION	1.1692985673488841E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9986544278189559	WITHOUT_CLASSIFICATION	0.001345572181044208	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998321346213406	WITHOUT_CLASSIFICATION	1.6786537865948474E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999283416129067	WITHOUT_CLASSIFICATION	7.165838709331889E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998321346213406	WITHOUT_CLASSIFICATION	1.6786537865948474E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997912271019583	WITHOUT_CLASSIFICATION	2.0877289804169537E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999919574171551	WITHOUT_CLASSIFICATION	8.042582844902027E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999608513523008	WITHOUT_CLASSIFICATION	3.9148647699143565E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999608513523008	WITHOUT_CLASSIFICATION	3.9148647699143565E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999681427935923	WITHOUT_CLASSIFICATION	3.1857206407772666E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999681810112229	WITHOUT_CLASSIFICATION	3.181898877708592E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999681427935923	WITHOUT_CLASSIFICATION	3.1857206407772666E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999631869101944	WITHOUT_CLASSIFICATION	3.6813089805613664E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999864661878295	WITHOUT_CLASSIFICATION	1.3533812170609903E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999693808080601	WITHOUT_CLASSIFICATION	3.0619191939876474E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9996373273384961	WITHOUT_CLASSIFICATION	3.6267266150392295E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999640817576613	WITHOUT_CLASSIFICATION	3.591824233867156E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999514638449727	WITHOUT_CLASSIFICATION	4.853615502722769E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999523427458519	WITHOUT_CLASSIFICATION	4.765725414810294E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.999953250852719	WITHOUT_CLASSIFICATION	4.6749147281089874E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999628815103128	WITHOUT_CLASSIFICATION	3.711848968728305E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999921799229209	WITHOUT_CLASSIFICATION	7.820077079186566E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999527231696698	WITHOUT_CLASSIFICATION	4.72768303301256E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999526814789313	WITHOUT_CLASSIFICATION	4.7318521068576386E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999429046162902	WITHOUT_CLASSIFICATION	5.7095383709701336E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999648003985191	WITHOUT_CLASSIFICATION	3.5199601480917244E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999952156275575	WITHOUT_CLASSIFICATION	4.784372442503698E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999867087565645	WITHOUT_CLASSIFICATION	1.3291243435555753E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999916774730915	WITHOUT_CLASSIFICATION	8.322526908496966E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999629287927273	WITHOUT_CLASSIFICATION	3.707120727274563E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999859212505972	WITHOUT_CLASSIFICATION	1.407874940286587E-5	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999649229305496	WITHOUT_CLASSIFICATION	3.5077069450402965E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999628815850629	WITHOUT_CLASSIFICATION	3.711841493714943E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998788295704084	WITHOUT_CLASSIFICATION	1.2117042959149487E-4	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999299407732501	WITHOUT_CLASSIFICATION	7.005922674984152E-5	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998862244122256	WITHOUT_CLASSIFICATION	1.1377558777435489E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998207436759804	WITHOUT_CLASSIFICATION	1.792563240195845E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9854516844612624	WITHOUT_CLASSIFICATION	0.014548315538737665	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999855427827311	WITHOUT_CLASSIFICATION	1.4457217268797072E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999640817576613	WITHOUT_CLASSIFICATION	3.591824233867156E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999735107683525	WITHOUT_CLASSIFICATION	2.648923164750114E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9998812957022056	WITHOUT_CLASSIFICATION	1.1870429779438646E-4	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9370111762120306	WITHOUT_CLASSIFICATION	0.06298882378796938	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999522754883722	WITHOUT_CLASSIFICATION	4.7724511627734535E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999941327756727	WITHOUT_CLASSIFICATION	5.867224327250139E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.999987350161519	WITHOUT_CLASSIFICATION	1.2649838481013769E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999631869101944	WITHOUT_CLASSIFICATION	3.6813089805613664E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999631869101944	WITHOUT_CLASSIFICATION	3.6813089805613664E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999994735795472	WITHOUT_CLASSIFICATION	5.264204527939726E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999857162620086	WITHOUT_CLASSIFICATION	1.4283737991322624E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999743687847751	WITHOUT_CLASSIFICATION	2.5631215224837422E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999864720866677	WITHOUT_CLASSIFICATION	1.352791333234311E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995570567363328	WITHOUT_CLASSIFICATION	4.4294326366718157E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999905159543898	WITHOUT_CLASSIFICATION	9.484045610263914E-6	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999812729218396	WITHOUT_CLASSIFICATION	1.8727078160469008E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999555006583417	WITHOUT_CLASSIFICATION	4.449934165831868E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9998477066506655	WITHOUT_CLASSIFICATION	1.522933493345027E-4	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999787109563608	WITHOUT_CLASSIFICATION	2.1289043639241945E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915874943752	WITHOUT_CLASSIFICATION	8.412505624779254E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999429046162902	WITHOUT_CLASSIFICATION	5.7095383709701336E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999523474024987	WITHOUT_CLASSIFICATION	4.765259750133771E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915874943752	WITHOUT_CLASSIFICATION	8.412505624779254E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999861277486621	WITHOUT_CLASSIFICATION	1.387225133796716E-5	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999961130085963	WITHOUT_CLASSIFICATION	3.886991403749817E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999908227013323	WITHOUT_CLASSIFICATION	9.17729866773942E-6	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9969587551237478	WITHOUT_CLASSIFICATION	0.00304124487625228	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999869424874547	WITHOUT_CLASSIFICATION	1.3057512545300857E-4	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999967422737591	WITHOUT_CLASSIFICATION	3.257726241035898E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999922921155858	WITHOUT_CLASSIFICATION	7.707884414204353E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999975861691169	WITHOUT_CLASSIFICATION	2.4138308831843012E-6	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999952346420738	WITHOUT_CLASSIFICATION	4.765357926195645E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999771791060572	WITHOUT_CLASSIFICATION	2.282089394270917E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999123023698012	WITHOUT_CLASSIFICATION	8.76976301987967E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999123023698012	WITHOUT_CLASSIFICATION	8.76976301987967E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998157734629519	WITHOUT_CLASSIFICATION	1.8422653704819518E-4	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9995020175664054	WITHOUT_CLASSIFICATION	4.979824335944702E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915874943752	WITHOUT_CLASSIFICATION	8.412505624779254E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999869424874547	WITHOUT_CLASSIFICATION	1.3057512545300857E-4	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999922921155858	WITHOUT_CLASSIFICATION	7.707884414204353E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999893503726823	WITHOUT_CLASSIFICATION	1.064962731773866E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999969961979893	WITHOUT_CLASSIFICATION	3.0038020107897674E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999645399854862	WITHOUT_CLASSIFICATION	3.546001451383411E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999420633264164	WITHOUT_CLASSIFICATION	5.7936673583542034E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999705418182107	WITHOUT_CLASSIFICATION	2.9458181789328753E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999523472818906	WITHOUT_CLASSIFICATION	4.7652718109330786E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999861277486621	WITHOUT_CLASSIFICATION	1.387225133796716E-5	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999276829233026	WITHOUT_CLASSIFICATION	7.231707669739188E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999633483521152	WITHOUT_CLASSIFICATION	3.665164788489652E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997452066134034	WITHOUT_CLASSIFICATION	2.5479338659659107E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998095661484097	WITHOUT_CLASSIFICATION	1.9043385159034875E-4	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998057561613697	WITHOUT_CLASSIFICATION	1.9424383863041834E-4	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999856615666917	WITHOUT_CLASSIFICATION	1.4338433308357205E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997912271019583	WITHOUT_CLASSIFICATION	2.0877289804169537E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683939118033	WITHOUT_CLASSIFICATION	3.1606088196784317E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9997535170428159	WITHOUT_CLASSIFICATION	2.464829571840655E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999028964587169	WITHOUT_CLASSIFICATION	9.710354128316728E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999895702522216	WITHOUT_CLASSIFICATION	1.0429747778392592E-5	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999863192553765	WITHOUT_CLASSIFICATION	1.3680744623611402E-5	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999989217565849	WITHOUT_CLASSIFICATION	1.078243415093783E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999633552793896	WITHOUT_CLASSIFICATION	3.6644720610328946E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999135231258166	WITHOUT_CLASSIFICATION	8.64768741834237E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999523472818906	WITHOUT_CLASSIFICATION	4.7652718109330786E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999692453351574	WITHOUT_CLASSIFICATION	3.0754664842522626E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9998738155165771	WITHOUT_CLASSIFICATION	1.2618448342295206E-4	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999935462459697	WITHOUT_CLASSIFICATION	6.453754030345349E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998351290088764	WITHOUT_CLASSIFICATION	1.6487099112367753E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999714339381578	WITHOUT_CLASSIFICATION	2.8566061842153757E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999890909592793	WITHOUT_CLASSIFICATION	1.0909040720695113E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999824488665206	WITHOUT_CLASSIFICATION	1.7551133479387393E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999656089523135	WITHOUT_CLASSIFICATION	3.439104768663663E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999753041171701	WITHOUT_CLASSIFICATION	2.4695882829867715E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999864315818702	WITHOUT_CLASSIFICATION	1.3568418129769301E-5	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999784386095169	WITHOUT_CLASSIFICATION	2.1561390483125993E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.99999575251122	WITHOUT_CLASSIFICATION	4.247488779976225E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999259219297285	WITHOUT_CLASSIFICATION	7.407807027145206E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999878053758673	WITHOUT_CLASSIFICATION	1.2194624132712362E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999911709893402	WITHOUT_CLASSIFICATION	8.829010659682272E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999237870525545	WITHOUT_CLASSIFICATION	7.621294744561829E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998761735755484	WITHOUT_CLASSIFICATION	1.2382642445162248E-4	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998955757686985	WITHOUT_CLASSIFICATION	1.0442423130155789E-4	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999517008717188	WITHOUT_CLASSIFICATION	4.8299128281267444E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999804190234279	WITHOUT_CLASSIFICATION	1.9580976572039536E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999892582184246	WITHOUT_CLASSIFICATION	1.074178157539471E-4	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9947659198174535	WITHOUT_CLASSIFICATION	0.0052340801825465555	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9995655433568194	WITHOUT_CLASSIFICATION	4.3445664318075725E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998357901901441	WITHOUT_CLASSIFICATION	1.6420980985592818E-4	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999613050956833	WITHOUT_CLASSIFICATION	3.869490431661407E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9953794829856594	WITHOUT_CLASSIFICATION	0.004620517014340685	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998599705323604	WITHOUT_CLASSIFICATION	1.4002946763954017E-4	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999408882282856	WITHOUT_CLASSIFICATION	5.91117717143945E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999385667008966	WITHOUT_CLASSIFICATION	6.143329910332373E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999530673335317	WITHOUT_CLASSIFICATION	4.6932666468169834E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999696586502803	WITHOUT_CLASSIFICATION	3.0341349719702104E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999228688533367	WITHOUT_CLASSIFICATION	7.713114666332079E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.999960111727819	WITHOUT_CLASSIFICATION	3.988827218104746E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998258461378343	WITHOUT_CLASSIFICATION	1.741538621656901E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999228688533367	WITHOUT_CLASSIFICATION	7.713114666332079E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999696586502803	WITHOUT_CLASSIFICATION	3.0341349719702104E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.999960111727819	WITHOUT_CLASSIFICATION	3.988827218104746E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999574950310984	WITHOUT_CLASSIFICATION	4.250496890163441E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999451749823574	WITHOUT_CLASSIFICATION	5.482501764278199E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9994453766664001	WITHOUT_CLASSIFICATION	5.546233335998025E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999864489372459	WITHOUT_CLASSIFICATION	1.3551062754197588E-5	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999979453503496	WITHOUT_CLASSIFICATION	2.0546496504483816E-6	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9873300217678568	WITHOUT_CLASSIFICATION	0.012669978232143298	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998907670568391	WITHOUT_CLASSIFICATION	1.0923294316087843E-4	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999158942788915	WITHOUT_CLASSIFICATION	8.410572110847942E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999928683955698	WITHOUT_CLASSIFICATION	7.131604430174632E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999789441122562	WITHOUT_CLASSIFICATION	2.105588774386609E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999646025242397	WITHOUT_CLASSIFICATION	3.539747576035965E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999819053897495	WITHOUT_CLASSIFICATION	1.809461025046035E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999946087522662	WITHOUT_CLASSIFICATION	5.391247733807766E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999864489372459	WITHOUT_CLASSIFICATION	1.3551062754197588E-5	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999974086768472	WITHOUT_CLASSIFICATION	2.5913231527986257E-5	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999447082445257	WITHOUT_CLASSIFICATION	5.52917554742689E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999176897701729	WITHOUT_CLASSIFICATION	8.231022982696535E-5	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999996104135438	WITHOUT_CLASSIFICATION	3.8958645620826337E-7	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999354000042585	WITHOUT_CLASSIFICATION	6.459999574150408E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998214057106009	WITHOUT_CLASSIFICATION	1.7859428939923932E-4	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998340528059257	WITHOUT_CLASSIFICATION	1.6594719407423826E-4	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999859763065919	WITHOUT_CLASSIFICATION	1.4023693407992394E-5	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999671429646607	WITHOUT_CLASSIFICATION	3.28570353391873E-5	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999353687586616	WITHOUT_CLASSIFICATION	6.463124133842445E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998214057106009	WITHOUT_CLASSIFICATION	1.7859428939923932E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998214057106009	WITHOUT_CLASSIFICATION	1.7859428939923932E-4	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999729741660462	WITHOUT_CLASSIFICATION	2.7025833953737084E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999729741660462	WITHOUT_CLASSIFICATION	2.7025833953737084E-5	TEST
not supported	WITHOUT_CLASSIFICATION	0.9998559995209139	WITHOUT_CLASSIFICATION	1.4400047908624236E-4	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999176897701729	WITHOUT_CLASSIFICATION	8.231022982696535E-5	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997866792799732	WITHOUT_CLASSIFICATION	2.1332072002672883E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999805440053174	WITHOUT_CLASSIFICATION	1.9455994682553462E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999863072612716	WITHOUT_CLASSIFICATION	1.3692738728448993E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999863072612716	WITHOUT_CLASSIFICATION	1.3692738728448993E-5	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999936758388261	WITHOUT_CLASSIFICATION	6.324161173824667E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998488822335999	WITHOUT_CLASSIFICATION	1.511177664000877E-4	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999951195512043	WITHOUT_CLASSIFICATION	4.880448795632059E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999879387372362	WITHOUT_CLASSIFICATION	1.206126276368774E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999795989421151	WITHOUT_CLASSIFICATION	2.0401057884946405E-5	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998054719581	WITHOUT_CLASSIFICATION	1.9452804202909328E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999880180960822	WITHOUT_CLASSIFICATION	1.1981903917749452E-5	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999146300229249	WITHOUT_CLASSIFICATION	8.536997707502991E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.999974647159332	WITHOUT_CLASSIFICATION	2.5352840667866558E-5	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999869593904837	WITHOUT_CLASSIFICATION	1.304060951622609E-5	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999805440429075	WITHOUT_CLASSIFICATION	1.945595709252926E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999045645693021	WITHOUT_CLASSIFICATION	9.54354306978828E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999692066846962	WITHOUT_CLASSIFICATION	3.0793315303818246E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.999955610546953	WITHOUT_CLASSIFICATION	4.438945304701107E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998954844208721	WITHOUT_CLASSIFICATION	1.0451557912799206E-4	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999775595971685	WITHOUT_CLASSIFICATION	2.2440402831452178E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317824679401	WITHOUT_CLASSIFICATION	6.821753205988724E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999914347916584	WITHOUT_CLASSIFICATION	8.565208341638284E-6	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999481300779481	WITHOUT_CLASSIFICATION	5.186992205191777E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999881850127772	WITHOUT_CLASSIFICATION	1.18149872228534E-5	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999825323067177	WITHOUT_CLASSIFICATION	1.7467693282296643E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9994597149401273	WITHOUT_CLASSIFICATION	5.402850598727815E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999936374678882	WITHOUT_CLASSIFICATION	6.362532111837849E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999858863655431	WITHOUT_CLASSIFICATION	1.4113634457025176E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999633843589293	WITHOUT_CLASSIFICATION	3.661564107066311E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999699922055305	WITHOUT_CLASSIFICATION	3.000779446948505E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999753041171701	WITHOUT_CLASSIFICATION	2.4695882829867715E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999776074666148	WITHOUT_CLASSIFICATION	2.2392533385162964E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999968577427154	WITHOUT_CLASSIFICATION	3.1422572846535757E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272832146203	WITHOUT_CLASSIFICATION	7.27167853797275E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999734461958858	WITHOUT_CLASSIFICATION	2.6553804114196854E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999734461958858	WITHOUT_CLASSIFICATION	2.6553804114196854E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999603184187523	WITHOUT_CLASSIFICATION	3.968158124761289E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999562310325497	WITHOUT_CLASSIFICATION	4.376896745033965E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999555369650251	WITHOUT_CLASSIFICATION	4.446303497485265E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999555369650251	WITHOUT_CLASSIFICATION	4.446303497485265E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998919983898765	WITHOUT_CLASSIFICATION	1.0800161012347689E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9997589634260313	WITHOUT_CLASSIFICATION	2.4103657396856053E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999416034133931	WITHOUT_CLASSIFICATION	5.839658660681193E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999667780270685	WITHOUT_CLASSIFICATION	3.3221972931521995E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999665396681913	WITHOUT_CLASSIFICATION	3.34603318088011E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996580809443584	WITHOUT_CLASSIFICATION	3.4191905564162606E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999786534453943	WITHOUT_CLASSIFICATION	2.1346554605720932E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.99996104807202	WITHOUT_CLASSIFICATION	3.8951927979971464E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.99996104807202	WITHOUT_CLASSIFICATION	3.8951927979971464E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999706567675117	WITHOUT_CLASSIFICATION	2.9343232488201857E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.999948599867806	WITHOUT_CLASSIFICATION	5.140013219394626E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.999948599867806	WITHOUT_CLASSIFICATION	5.140013219394626E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999647110696531	WITHOUT_CLASSIFICATION	3.528893034688037E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999650161924645	WITHOUT_CLASSIFICATION	3.498380753554756E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999884354722517	WITHOUT_CLASSIFICATION	1.1564527748322861E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999904334461008	WITHOUT_CLASSIFICATION	9.566553899168912E-6	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999525297925235	WITHOUT_CLASSIFICATION	4.7470207476407844E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999883028455038	WITHOUT_CLASSIFICATION	1.1697154496210915E-4	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999860161786282	WITHOUT_CLASSIFICATION	1.3983821371795212E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999913733452434	WITHOUT_CLASSIFICATION	8.626654756691004E-6	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998289050438052	WITHOUT_CLASSIFICATION	1.7109495619482178E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919663412172	WITHOUT_CLASSIFICATION	8.033658782735504E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999647617339327	WITHOUT_CLASSIFICATION	3.523826606725883E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999524099195738	WITHOUT_CLASSIFICATION	4.7590080426312606E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999524099195738	WITHOUT_CLASSIFICATION	4.7590080426312606E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999524099195738	WITHOUT_CLASSIFICATION	4.7590080426312606E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999524099195738	WITHOUT_CLASSIFICATION	4.7590080426312606E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999372636146906	WITHOUT_CLASSIFICATION	6.273638530943544E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998858086219188	WITHOUT_CLASSIFICATION	1.1419137808125724E-4	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999248688627257	WITHOUT_CLASSIFICATION	7.513113727433133E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999328919833825	WITHOUT_CLASSIFICATION	6.710801661751002E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999439636210041	WITHOUT_CLASSIFICATION	5.603637899572879E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9988127572519353	WITHOUT_CLASSIFICATION	0.0011872427480647079	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.999917376619526	WITHOUT_CLASSIFICATION	8.262338047402589E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999992416352682	WITHOUT_CLASSIFICATION	7.583647317620756E-7	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999800920990372	WITHOUT_CLASSIFICATION	1.9907900962837675E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999667230708551	WITHOUT_CLASSIFICATION	3.3276929144949434E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999966618539632	WITHOUT_CLASSIFICATION	3.338146036805231E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9960814341365151	WITHOUT_CLASSIFICATION	0.00391856586348491	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9900007880241487	WITHOUT_CLASSIFICATION	0.009999211975851357	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999608144955808	WITHOUT_CLASSIFICATION	3.918550441913924E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999966618539632	WITHOUT_CLASSIFICATION	3.338146036805231E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.96057945095953	WITHOUT_CLASSIFICATION	0.03942054904046991	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999995074007779	WITHOUT_CLASSIFICATION	4.925992220996371E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999295097911677	WITHOUT_CLASSIFICATION	7.049020883232698E-5	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996381966283502	WITHOUT_CLASSIFICATION	3.6180337164988383E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997970479956448	WITHOUT_CLASSIFICATION	2.0295200435519557E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9997403751869043	WITHOUT_CLASSIFICATION	2.596248130957199E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999938673126512	WITHOUT_CLASSIFICATION	6.132687348833635E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999833683275597	WITHOUT_CLASSIFICATION	1.66316724402782E-5	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666384084764	WITHOUT_CLASSIFICATION	3.3361591523643084E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999767192290753	WITHOUT_CLASSIFICATION	2.328077092466955E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666384084764	WITHOUT_CLASSIFICATION	3.3361591523643084E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999983024930196	WITHOUT_CLASSIFICATION	1.6975069804105942E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995073303485239	WITHOUT_CLASSIFICATION	4.926696514761476E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9988558320283634	WITHOUT_CLASSIFICATION	0.0011441679716366344	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999884190672649	WITHOUT_CLASSIFICATION	1.1580932735015363E-5	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999877340535892	WITHOUT_CLASSIFICATION	1.2265946410825994E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999845755683126	WITHOUT_CLASSIFICATION	1.542443168749032E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999722790323876	WITHOUT_CLASSIFICATION	2.7720967612396073E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999344618899532	WITHOUT_CLASSIFICATION	6.55381100469014E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999722790323876	WITHOUT_CLASSIFICATION	2.7720967612396073E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999818797541523	WITHOUT_CLASSIFICATION	1.812024584766194E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998740540687282	WITHOUT_CLASSIFICATION	1.2594593127177584E-4	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999385761404332	WITHOUT_CLASSIFICATION	6.14238595667368E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999518603109494	WITHOUT_CLASSIFICATION	4.8139689050539616E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999596314234167	WITHOUT_CLASSIFICATION	4.036857658332352E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998415143692574	WITHOUT_CLASSIFICATION	1.5848563074264243E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999845755683126	WITHOUT_CLASSIFICATION	1.542443168749032E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999344618899532	WITHOUT_CLASSIFICATION	6.55381100469014E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999818797541523	WITHOUT_CLASSIFICATION	1.812024584766194E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999719199695235	WITHOUT_CLASSIFICATION	2.808003047655936E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999836396660328	WITHOUT_CLASSIFICATION	1.636033396729542E-5	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999872762373448	WITHOUT_CLASSIFICATION	1.272376265515673E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999982131543924	WITHOUT_CLASSIFICATION	1.7868456076055595E-6	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999879992252092	WITHOUT_CLASSIFICATION	1.2000774790837623E-5	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999754552443212	WITHOUT_CLASSIFICATION	2.4544755678793762E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999859278694413	WITHOUT_CLASSIFICATION	1.4072130558628822E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317824679401	WITHOUT_CLASSIFICATION	6.821753205988724E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998740540687282	WITHOUT_CLASSIFICATION	1.2594593127177584E-4	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999948094657912	WITHOUT_CLASSIFICATION	5.190534208834284E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999681427935923	WITHOUT_CLASSIFICATION	3.1857206407772666E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998090725960853	WITHOUT_CLASSIFICATION	1.9092740391463383E-4	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999709663553396	WITHOUT_CLASSIFICATION	2.9033644660423227E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317824679401	WITHOUT_CLASSIFICATION	6.821753205988724E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999760170044892	WITHOUT_CLASSIFICATION	2.398299551077767E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317824679401	WITHOUT_CLASSIFICATION	6.821753205988724E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999927297401291	WITHOUT_CLASSIFICATION	7.270259870900849E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999808150207902	WITHOUT_CLASSIFICATION	1.9184979209902157E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999512209879963	WITHOUT_CLASSIFICATION	4.8779012003846297E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999987789610289	WITHOUT_CLASSIFICATION	1.2210389710900054E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999944910681672	WITHOUT_CLASSIFICATION	5.508931832784875E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999729761499614	WITHOUT_CLASSIFICATION	2.702385003860615E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999842580764652	WITHOUT_CLASSIFICATION	1.57419235348285E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999787071698015	WITHOUT_CLASSIFICATION	2.1292830198443268E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999762797837932	WITHOUT_CLASSIFICATION	2.3720216206782078E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999624504876407	WITHOUT_CLASSIFICATION	3.754951235922197E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999969598477363	WITHOUT_CLASSIFICATION	3.0401522636771133E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999593748242493	WITHOUT_CLASSIFICATION	4.0625175750658355E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999245021188597	WITHOUT_CLASSIFICATION	7.549788114030535E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999658793071095	WITHOUT_CLASSIFICATION	3.412069289058403E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999985556838502	WITHOUT_CLASSIFICATION	1.4443161496811694E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999854955332345	WITHOUT_CLASSIFICATION	1.4504466765493668E-5	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9996364491534631	WITHOUT_CLASSIFICATION	3.635508465369583E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999895672559553	WITHOUT_CLASSIFICATION	1.0432744044681084E-5	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999638850974281	WITHOUT_CLASSIFICATION	3.611490257198453E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998036978793097	WITHOUT_CLASSIFICATION	1.9630212069031322E-4	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998036978793097	WITHOUT_CLASSIFICATION	1.9630212069031322E-4	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999744588474858	WITHOUT_CLASSIFICATION	2.5541152514252304E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999173169837182	WITHOUT_CLASSIFICATION	8.268301628188481E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999523527998303	WITHOUT_CLASSIFICATION	4.764720016969574E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999857306238946	WITHOUT_CLASSIFICATION	1.4269376105264693E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999993154183306	WITHOUT_CLASSIFICATION	6.84581669294362E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999796454857139	WITHOUT_CLASSIFICATION	2.035451428609579E-5	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999699784019416	WITHOUT_CLASSIFICATION	3.0021598058360613E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998570450911378	WITHOUT_CLASSIFICATION	1.4295490886223676E-4	TEST
TODO	WITHOUT_CLASSIFICATION	0.990933075627137	WITHOUT_CLASSIFICATION	0.009066924372863041	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999991856652322	WITHOUT_CLASSIFICATION	8.143347677840429E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999197113764371	WITHOUT_CLASSIFICATION	8.028862356295587E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9998174909573768	WITHOUT_CLASSIFICATION	1.825090426232655E-4	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9991094500287906	WITHOUT_CLASSIFICATION	8.905499712092584E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999583951982071	WITHOUT_CLASSIFICATION	4.160480179298495E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999882773617977	WITHOUT_CLASSIFICATION	1.1722638202206874E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999526070606624	WITHOUT_CLASSIFICATION	4.7392939337749067E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999803591221946	WITHOUT_CLASSIFICATION	1.9640877805434963E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999803591221946	WITHOUT_CLASSIFICATION	1.9640877805434963E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999889922646573	WITHOUT_CLASSIFICATION	1.1007735342712907E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999787071698015	WITHOUT_CLASSIFICATION	2.1292830198443268E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999290420682877	WITHOUT_CLASSIFICATION	7.095793171235891E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999435155438069	WITHOUT_CLASSIFICATION	5.6484456193044905E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999893469472345	WITHOUT_CLASSIFICATION	1.0653052765554995E-5	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999786388149886	WITHOUT_CLASSIFICATION	2.1361185011424933E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999879688192304	WITHOUT_CLASSIFICATION	1.2031180769658149E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.999954271326174	WITHOUT_CLASSIFICATION	4.572867382604777E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999973741624526	WITHOUT_CLASSIFICATION	2.6258375473953122E-5	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999004480107452	WITHOUT_CLASSIFICATION	9.955198925475615E-5	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999839286179533	WITHOUT_CLASSIFICATION	1.6071382046705987E-5	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999990992567281	WITHOUT_CLASSIFICATION	9.007432719036401E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.99998946499209	WITHOUT_CLASSIFICATION	1.0535007909977145E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999684164332159	WITHOUT_CLASSIFICATION	3.1583566784184045E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999977613378465	WITHOUT_CLASSIFICATION	2.238662153513635E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999785691517218	WITHOUT_CLASSIFICATION	2.1430848278130864E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999892461776453	WITHOUT_CLASSIFICATION	1.0753822354664972E-5	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999992762963154	WITHOUT_CLASSIFICATION	7.2370368460392265E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999970665904364	WITHOUT_CLASSIFICATION	2.933409563698743E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999976479272055	WITHOUT_CLASSIFICATION	2.352072794483835E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999365116367798	WITHOUT_CLASSIFICATION	6.348836322029234E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9996722131977349	WITHOUT_CLASSIFICATION	3.277868022651651E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9998993630402595	WITHOUT_CLASSIFICATION	1.0063695974056979E-4	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999620112490106	WITHOUT_CLASSIFICATION	3.798875098944056E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999843831606801	WITHOUT_CLASSIFICATION	1.5616839319867247E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999817759901098	WITHOUT_CLASSIFICATION	1.8224009890143992E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999213183392348	WITHOUT_CLASSIFICATION	7.868166076510123E-5	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997927292824679	WITHOUT_CLASSIFICATION	2.0727071753207175E-4	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997616762099251	WITHOUT_CLASSIFICATION	2.3832379007500493E-4	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999291966664422	WITHOUT_CLASSIFICATION	7.080333355781511E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999281422738349	WITHOUT_CLASSIFICATION	7.18577261651672E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999289572042234	WITHOUT_CLASSIFICATION	7.104279577660359E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999777378114568	WITHOUT_CLASSIFICATION	2.226218854325848E-5	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999326411276681	WITHOUT_CLASSIFICATION	6.735887233196551E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999517599623426	WITHOUT_CLASSIFICATION	4.824003765741268E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9947861646237679	WITHOUT_CLASSIFICATION	0.005213835376232082	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998115715272833	WITHOUT_CLASSIFICATION	1.8842847271678098E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999914569577638	WITHOUT_CLASSIFICATION	8.543042236183617E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997429950221097	WITHOUT_CLASSIFICATION	2.5700497789029117E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997429950221097	WITHOUT_CLASSIFICATION	2.5700497789029117E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999703571659396	WITHOUT_CLASSIFICATION	2.9642834060440693E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999575383577716	WITHOUT_CLASSIFICATION	4.246164222853504E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999580594475954	WITHOUT_CLASSIFICATION	4.194055240451136E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999580594475954	WITHOUT_CLASSIFICATION	4.194055240451136E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999909902556554	WITHOUT_CLASSIFICATION	9.009744344561715E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999860465081102	WITHOUT_CLASSIFICATION	1.3953491889711895E-5	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999647096207155	WITHOUT_CLASSIFICATION	3.5290379284567725E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999927422476268	WITHOUT_CLASSIFICATION	7.257752373111096E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999282469250543	WITHOUT_CLASSIFICATION	7.175307494567273E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999276704741409	WITHOUT_CLASSIFICATION	7.232952585909678E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999939834074387	WITHOUT_CLASSIFICATION	6.016592561315815E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999939834074387	WITHOUT_CLASSIFICATION	6.016592561315815E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999276704741409	WITHOUT_CLASSIFICATION	7.232952585909678E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999486067972612	WITHOUT_CLASSIFICATION	5.139320273885568E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999631869101944	WITHOUT_CLASSIFICATION	3.6813089805613664E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999724562500988	WITHOUT_CLASSIFICATION	2.754374990123234E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999913135947819	WITHOUT_CLASSIFICATION	8.686405218215351E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999915420615029	WITHOUT_CLASSIFICATION	8.457938497169625E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999778111521841	WITHOUT_CLASSIFICATION	2.2188847815857068E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999656890261301	WITHOUT_CLASSIFICATION	3.431097386982511E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.999962868802331	WITHOUT_CLASSIFICATION	3.7131197669016464E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999931377933522	WITHOUT_CLASSIFICATION	6.862206647832975E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999913808924706	WITHOUT_CLASSIFICATION	8.619107529392691E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999914866768517	WITHOUT_CLASSIFICATION	8.513323148205919E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999560043190309	WITHOUT_CLASSIFICATION	4.399568096922486E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999860465540534	WITHOUT_CLASSIFICATION	1.3953445946613265E-5	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9996310055228623	WITHOUT_CLASSIFICATION	3.689944771376626E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9998485975921262	WITHOUT_CLASSIFICATION	1.5140240787376409E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999990476375521	WITHOUT_CLASSIFICATION	9.523624479046426E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999525187992007	WITHOUT_CLASSIFICATION	4.748120079925037E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997780027768282	WITHOUT_CLASSIFICATION	2.2199722317181082E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999925175937558	WITHOUT_CLASSIFICATION	7.482406244144844E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998550543898482	WITHOUT_CLASSIFICATION	1.4494561015183577E-4	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999820063191195	WITHOUT_CLASSIFICATION	1.799368088062233E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999210371845192	WITHOUT_CLASSIFICATION	7.896281548089464E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999707514962575	WITHOUT_CLASSIFICATION	2.9248503742607972E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999297605329563	WITHOUT_CLASSIFICATION	7.023946704367885E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9961853515391812	WITHOUT_CLASSIFICATION	0.0038146484608188296	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997571349999902	WITHOUT_CLASSIFICATION	2.4286500000972132E-4	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999877932257089	WITHOUT_CLASSIFICATION	1.2206774291122546E-5	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999884876854443	WITHOUT_CLASSIFICATION	1.1512314555785305E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999759601668102	WITHOUT_CLASSIFICATION	2.403983318965164E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999969376685444	WITHOUT_CLASSIFICATION	3.062331455625209E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999876580126789	WITHOUT_CLASSIFICATION	1.234198732121784E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998604360811665	WITHOUT_CLASSIFICATION	1.3956391883362823E-4	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.99996467717051	WITHOUT_CLASSIFICATION	3.5322829490039425E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999473903801436	WITHOUT_CLASSIFICATION	5.260961985648358E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.999962776387489	WITHOUT_CLASSIFICATION	3.7223612510979395E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999810286913804	WITHOUT_CLASSIFICATION	1.8971308619587356E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999692060502676	WITHOUT_CLASSIFICATION	3.079394973248719E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999778061358697	WITHOUT_CLASSIFICATION	2.2193864130340277E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999830275940711	WITHOUT_CLASSIFICATION	1.697240592887498E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999800841862756	WITHOUT_CLASSIFICATION	1.9915813724318513E-5	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999943524028237	WITHOUT_CLASSIFICATION	5.647597176276313E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999679793863382	WITHOUT_CLASSIFICATION	3.2020613661789375E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999651533034267	WITHOUT_CLASSIFICATION	3.4846696573340964E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999535951757714	WITHOUT_CLASSIFICATION	4.640482422851931E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999634459323451	WITHOUT_CLASSIFICATION	3.6554067654968205E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999944380758132	WITHOUT_CLASSIFICATION	5.56192418685703E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999496979977862	WITHOUT_CLASSIFICATION	5.0302002213800887E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999976104361171	WITHOUT_CLASSIFICATION	2.3895638828962275E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999993368067229	WITHOUT_CLASSIFICATION	6.631932770945846E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998971821928783	WITHOUT_CLASSIFICATION	1.0281780712167076E-4	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999718143961158	WITHOUT_CLASSIFICATION	2.8185603884230634E-5	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.986717335395583	WITHOUT_CLASSIFICATION	0.01328266460441704	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999848723706349	WITHOUT_CLASSIFICATION	1.5127629365110118E-5	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999969828195175	WITHOUT_CLASSIFICATION	3.0171804824976406E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999494142718606	WITHOUT_CLASSIFICATION	5.0585728139323654E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999957770113505	WITHOUT_CLASSIFICATION	4.222988649576741E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999751413415239	WITHOUT_CLASSIFICATION	2.4858658476135866E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999714456665989	WITHOUT_CLASSIFICATION	2.8554333401032013E-5	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9993830539526452	WITHOUT_CLASSIFICATION	6.169460473548177E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999979551184242	WITHOUT_CLASSIFICATION	2.0448815757572753E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999979551184242	WITHOUT_CLASSIFICATION	2.0448815757572753E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9997991684750916	WITHOUT_CLASSIFICATION	2.008315249083354E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999656339265748	WITHOUT_CLASSIFICATION	3.4366073425219344E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999846541728857	WITHOUT_CLASSIFICATION	1.534582711428253E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999444272819474	WITHOUT_CLASSIFICATION	5.557271805247098E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999981052610028	WITHOUT_CLASSIFICATION	1.8947389971927336E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9991088909677786	WITHOUT_CLASSIFICATION	8.911090322213869E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9998913357289552	WITHOUT_CLASSIFICATION	1.0866427104481696E-4	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999993307620083	WITHOUT_CLASSIFICATION	6.692379916371289E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999204075077416	WITHOUT_CLASSIFICATION	7.959249225845624E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999513604732272	WITHOUT_CLASSIFICATION	4.8639526772831945E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999797198376341	WITHOUT_CLASSIFICATION	2.0280162365923318E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998701150570936	WITHOUT_CLASSIFICATION	1.298849429065487E-4	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999843019174952	WITHOUT_CLASSIFICATION	1.5698082504846685E-5	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999065032427209	WITHOUT_CLASSIFICATION	9.349675727900032E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999488775335063	WITHOUT_CLASSIFICATION	5.112246649365314E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999488775335063	WITHOUT_CLASSIFICATION	5.112246649365314E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999967848319109	WITHOUT_CLASSIFICATION	3.2151680891011004E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999390374626783	WITHOUT_CLASSIFICATION	6.0962537321585314E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999657585537736	WITHOUT_CLASSIFICATION	3.42414462265278E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999986304539341	WITHOUT_CLASSIFICATION	1.369546065934713E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999576929421287	WITHOUT_CLASSIFICATION	4.230705787138871E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431739442265	WITHOUT_CLASSIFICATION	5.6826055773541995E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999765237331127	WITHOUT_CLASSIFICATION	2.347626688716733E-5	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999852653666652	WITHOUT_CLASSIFICATION	1.4734633334783042E-5	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999542502251251	WITHOUT_CLASSIFICATION	4.5749774874925176E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999962167119598	WITHOUT_CLASSIFICATION	3.783288040262831E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999814472651792	WITHOUT_CLASSIFICATION	1.8552734820727068E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999882292103695	WITHOUT_CLASSIFICATION	1.1770789630581115E-5	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998950491460648	WITHOUT_CLASSIFICATION	1.0495085393531984E-4	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999491148317052	WITHOUT_CLASSIFICATION	5.0885168294752434E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999767535684447	WITHOUT_CLASSIFICATION	2.3246431555267153E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997682004240896	WITHOUT_CLASSIFICATION	2.317995759104218E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999835821866487	WITHOUT_CLASSIFICATION	1.641781335126623E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999923914447259	WITHOUT_CLASSIFICATION	7.608555274094197E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999973690960902	WITHOUT_CLASSIFICATION	2.630903909791708E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831264010285	WITHOUT_CLASSIFICATION	1.6873598971418724E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999056230099892	WITHOUT_CLASSIFICATION	9.437699001076845E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999942315834439	WITHOUT_CLASSIFICATION	5.768416556080766E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999756321200338	WITHOUT_CLASSIFICATION	2.4367879966163513E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999992977121841	WITHOUT_CLASSIFICATION	7.022878159230071E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999706163139501	WITHOUT_CLASSIFICATION	2.9383686049832547E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999627749019011	WITHOUT_CLASSIFICATION	3.722509809879444E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998461848774155	WITHOUT_CLASSIFICATION	1.5381512258455448E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999278573870973	WITHOUT_CLASSIFICATION	7.214261290265268E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999703663186541	WITHOUT_CLASSIFICATION	2.9633681345925225E-5	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999555842747844	WITHOUT_CLASSIFICATION	4.441572521561021E-5	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999174386544484	WITHOUT_CLASSIFICATION	8.256134555156533E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998673895970721	WITHOUT_CLASSIFICATION	1.3261040292796169E-4	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999518311069695	WITHOUT_CLASSIFICATION	4.816889303040789E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999951235662491	WITHOUT_CLASSIFICATION	4.876433750963053E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999763320349957	WITHOUT_CLASSIFICATION	2.3667965004295086E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999759604702845	WITHOUT_CLASSIFICATION	2.4039529715509414E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999786061864006	WITHOUT_CLASSIFICATION	2.1393813599476104E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999986249000001	WITHOUT_CLASSIFICATION	1.3750999998918231E-5	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999932507109601	WITHOUT_CLASSIFICATION	6.749289039948399E-6	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999148771404872	WITHOUT_CLASSIFICATION	8.512285951276907E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.999530916787454	WITHOUT_CLASSIFICATION	4.690832125461221E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998865326446792	WITHOUT_CLASSIFICATION	1.134673553207665E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999047965443113	WITHOUT_CLASSIFICATION	9.520345568870089E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999047965443113	WITHOUT_CLASSIFICATION	9.520345568870089E-5	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999775527366732	WITHOUT_CLASSIFICATION	2.2447263326715407E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999685066895385	WITHOUT_CLASSIFICATION	3.149331046137432E-5	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9993034817990797	WITHOUT_CLASSIFICATION	6.965182009202214E-4	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999647234729657	WITHOUT_CLASSIFICATION	3.527652703420066E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999573502719188	WITHOUT_CLASSIFICATION	4.2649728081307956E-5	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.99999828160859	WITHOUT_CLASSIFICATION	1.7183914101102874E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999219181853979	WITHOUT_CLASSIFICATION	7.80818146020763E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998518902242602	WITHOUT_CLASSIFICATION	1.4810977573988154E-4	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999845343083551	WITHOUT_CLASSIFICATION	1.546569164482683E-5	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292703625637	WITHOUT_CLASSIFICATION	7.072963743628035E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998274435877371	WITHOUT_CLASSIFICATION	1.7255641226288275E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9992407674929757	WITHOUT_CLASSIFICATION	7.59232507024286E-4	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999986469590301	WITHOUT_CLASSIFICATION	1.3530409699362658E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999925738741906	WITHOUT_CLASSIFICATION	7.426125809327762E-6	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9996757798708605	WITHOUT_CLASSIFICATION	3.242201291394807E-4	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999956145952742	WITHOUT_CLASSIFICATION	4.385404725861606E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999953447949981	WITHOUT_CLASSIFICATION	4.655205001948162E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999677487783093	WITHOUT_CLASSIFICATION	3.225122169065006E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999502126209069	WITHOUT_CLASSIFICATION	4.9787379093114243E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999786206335615	WITHOUT_CLASSIFICATION	2.1379366438590385E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999989304780434	WITHOUT_CLASSIFICATION	1.0695219565876182E-6	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999059835665398	WITHOUT_CLASSIFICATION	9.401643346015822E-5	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997032684242136	WITHOUT_CLASSIFICATION	2.9673157578626627E-4	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999548514301326	WITHOUT_CLASSIFICATION	4.514856986732167E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999760253608532	WITHOUT_CLASSIFICATION	2.3974639146808654E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999921775583056	WITHOUT_CLASSIFICATION	7.822441694408183E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999728787899571	WITHOUT_CLASSIFICATION	2.7121210042967418E-5	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998084209103584	WITHOUT_CLASSIFICATION	1.915790896416145E-4	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998479619907891	WITHOUT_CLASSIFICATION	1.5203800921085664E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999802863336023	WITHOUT_CLASSIFICATION	1.971366639774356E-5	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999950513652204	WITHOUT_CLASSIFICATION	4.948634779639838E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999992748609289	WITHOUT_CLASSIFICATION	7.251390711012143E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999982728555664	WITHOUT_CLASSIFICATION	1.7271444335716385E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999937120900854	WITHOUT_CLASSIFICATION	6.287909914654795E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999259557372632	WITHOUT_CLASSIFICATION	7.404426273676976E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999701940355498	WITHOUT_CLASSIFICATION	2.9805964450244565E-5	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999925360832372	WITHOUT_CLASSIFICATION	7.463916762766378E-6	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999661905796	WITHOUT_CLASSIFICATION	3.3809420399929516E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9995882920178754	WITHOUT_CLASSIFICATION	4.11707982124708E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999911837231974	WITHOUT_CLASSIFICATION	8.816276802620623E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998928870417326	WITHOUT_CLASSIFICATION	1.0711295826735048E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999983046769456	WITHOUT_CLASSIFICATION	1.6953230543963814E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999986228308149	WITHOUT_CLASSIFICATION	1.377169185209506E-6	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999981203799024	WITHOUT_CLASSIFICATION	1.879620097560997E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999277710680954	WITHOUT_CLASSIFICATION	7.222893190460116E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9990532762770347	WITHOUT_CLASSIFICATION	9.467237229654852E-4	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9997446139465417	WITHOUT_CLASSIFICATION	2.553860534583908E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999960625956857	WITHOUT_CLASSIFICATION	3.937404314176329E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999843019174952	WITHOUT_CLASSIFICATION	1.5698082504846685E-5	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999763769596836	WITHOUT_CLASSIFICATION	2.3623040316446678E-5	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999970630144016	WITHOUT_CLASSIFICATION	2.936985598421211E-6	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999748593254133	WITHOUT_CLASSIFICATION	2.514067458671065E-5	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999924346567568	WITHOUT_CLASSIFICATION	7.565343243238674E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999938214419236	WITHOUT_CLASSIFICATION	6.1785580763384316E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999930067763472	WITHOUT_CLASSIFICATION	6.993223652765249E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9996786953873176	WITHOUT_CLASSIFICATION	3.21304612682362E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.994427557106149	WITHOUT_CLASSIFICATION	0.00557244289385094	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999729348826045	WITHOUT_CLASSIFICATION	2.7065117395387396E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999688709495623	WITHOUT_CLASSIFICATION	3.112905043763334E-5	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999944546803435	WITHOUT_CLASSIFICATION	5.545319656531152E-6	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9957521927152809	WITHOUT_CLASSIFICATION	0.004247807284719114	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.99929147512657	WITHOUT_CLASSIFICATION	7.085248734299989E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9998340577579983	WITHOUT_CLASSIFICATION	1.6594224200175775E-4	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9994854498611637	WITHOUT_CLASSIFICATION	5.145501388363706E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921517643468	WITHOUT_CLASSIFICATION	2.0784823565327625E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999976385478949	WITHOUT_CLASSIFICATION	2.3614521051131394E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997015985345	WITHOUT_CLASSIFICATION	2.984014656267997E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999992782991497	WITHOUT_CLASSIFICATION	7.217008503894975E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921517643468	WITHOUT_CLASSIFICATION	2.0784823565327625E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999654988598181	WITHOUT_CLASSIFICATION	3.450114018189983E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999928190394806	WITHOUT_CLASSIFICATION	7.180960519375281E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999966563247314	WITHOUT_CLASSIFICATION	3.3436752684867093E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9998729508736495	WITHOUT_CLASSIFICATION	1.2704912635056262E-4	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999857719519613	WITHOUT_CLASSIFICATION	1.4228048038703077E-4	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999124369010004	WITHOUT_CLASSIFICATION	8.756309899960951E-5	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999937793835351	WITHOUT_CLASSIFICATION	6.22061646490331E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9919570118957958	WITHOUT_CLASSIFICATION	0.00804298810420429	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998206916102826	WITHOUT_CLASSIFICATION	1.793083897172652E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999980954187397	WITHOUT_CLASSIFICATION	1.9045812603006824E-5	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997041596700235	WITHOUT_CLASSIFICATION	2.958403299765599E-4	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9981247651407187	WITHOUT_CLASSIFICATION	0.0018752348592812943	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999855114066482	WITHOUT_CLASSIFICATION	1.448859335178135E-5	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999683127817747	WITHOUT_CLASSIFICATION	3.168721822528571E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999963804340797	WITHOUT_CLASSIFICATION	3.6195659202417378E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999648426262433	WITHOUT_CLASSIFICATION	3.5157373756784354E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9998993630402595	WITHOUT_CLASSIFICATION	1.0063695974056979E-4	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999806457571896	WITHOUT_CLASSIFICATION	1.935424281032398E-5	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999924390288163	WITHOUT_CLASSIFICATION	7.5609711837437494E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990321522857855	WITHOUT_CLASSIFICATION	9.678477142146064E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999385041060347	WITHOUT_CLASSIFICATION	6.149589396532107E-5	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999954857481346	WITHOUT_CLASSIFICATION	4.514251865392094E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999936286281886	WITHOUT_CLASSIFICATION	6.371371811370838E-6	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999923440853513	WITHOUT_CLASSIFICATION	7.655914648658502E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999995323518049	WITHOUT_CLASSIFICATION	4.676481950550222E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999981004983318	WITHOUT_CLASSIFICATION	1.8995016682052383E-6	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999944570963644	WITHOUT_CLASSIFICATION	5.5429036355991975E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9993598874414162	WITHOUT_CLASSIFICATION	6.401125585837833E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998723184863766	WITHOUT_CLASSIFICATION	1.2768151362344424E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999951926271721	WITHOUT_CLASSIFICATION	4.807372827931338E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9998796307745955	WITHOUT_CLASSIFICATION	1.2036922540450703E-4	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999958800975862	WITHOUT_CLASSIFICATION	4.119902413760098E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999699605235717	WITHOUT_CLASSIFICATION	3.0039476428247875E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999846501053606	WITHOUT_CLASSIFICATION	1.5349894639366497E-5	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999969248523747	WITHOUT_CLASSIFICATION	3.075147625388349E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999602288787973	WITHOUT_CLASSIFICATION	3.977112120266323E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999967761941096	WITHOUT_CLASSIFICATION	3.223805890493588E-6	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999765827416986	WITHOUT_CLASSIFICATION	2.3417258301282323E-5	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999954448945909	WITHOUT_CLASSIFICATION	4.555105409053361E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999961324000829	WITHOUT_CLASSIFICATION	3.867599917066168E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999951318495514	WITHOUT_CLASSIFICATION	4.868150448594535E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999805954332327	WITHOUT_CLASSIFICATION	1.9404566767283116E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999805954332327	WITHOUT_CLASSIFICATION	1.9404566767283116E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994043729320852	WITHOUT_CLASSIFICATION	5.956270679148636E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999875008253585	WITHOUT_CLASSIFICATION	1.2499174641535667E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999141001324151	WITHOUT_CLASSIFICATION	8.589986758477443E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999943180025765	WITHOUT_CLASSIFICATION	5.6819974233628745E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999667780270685	WITHOUT_CLASSIFICATION	3.3221972931521995E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999667780270685	WITHOUT_CLASSIFICATION	3.3221972931521995E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999608513523008	WITHOUT_CLASSIFICATION	3.9148647699143565E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999862376641138	WITHOUT_CLASSIFICATION	1.3762335886227082E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999343873900706	WITHOUT_CLASSIFICATION	6.561260992946121E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999839435428156	WITHOUT_CLASSIFICATION	1.605645718439117E-5	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999647614204941	WITHOUT_CLASSIFICATION	3.523857950600672E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999770296853517	WITHOUT_CLASSIFICATION	2.297031464826951E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998496574686417	WITHOUT_CLASSIFICATION	1.5034253135822603E-4	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999709857683896	WITHOUT_CLASSIFICATION	2.901423161040727E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999997269696037	WITHOUT_CLASSIFICATION	2.7303039631246036E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999954506315328	WITHOUT_CLASSIFICATION	4.549368467209725E-5	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999360723666783	WITHOUT_CLASSIFICATION	6.392763332171054E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997621537395504	WITHOUT_CLASSIFICATION	2.378462604497124E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997621537395504	WITHOUT_CLASSIFICATION	2.378462604497124E-4	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999648426262433	WITHOUT_CLASSIFICATION	3.5157373756784354E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999523154110783	WITHOUT_CLASSIFICATION	4.7684588921645675E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999952346420738	WITHOUT_CLASSIFICATION	4.765357926195645E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999408413255074	WITHOUT_CLASSIFICATION	5.915867449269344E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997780346147498	WITHOUT_CLASSIFICATION	2.219653852502756E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683939118033	WITHOUT_CLASSIFICATION	3.1606088196784317E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999376253027406	WITHOUT_CLASSIFICATION	6.237469725934299E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999921794441465	WITHOUT_CLASSIFICATION	7.820555853543118E-6	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999704978759628	WITHOUT_CLASSIFICATION	2.9502124037147652E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999012769180424	WITHOUT_CLASSIFICATION	9.872308195755324E-5	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999980954187397	WITHOUT_CLASSIFICATION	1.9045812603006824E-5	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9997374845019944	WITHOUT_CLASSIFICATION	2.625154980056511E-4	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999347795212468	WITHOUT_CLASSIFICATION	6.522047875325933E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999426845426447	WITHOUT_CLASSIFICATION	5.7315457355260884E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999943478405257	WITHOUT_CLASSIFICATION	5.6521594744110575E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999398977991873	WITHOUT_CLASSIFICATION	6.0102200812647796E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999275158930886	WITHOUT_CLASSIFICATION	7.24841069113383E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999419630474897	WITHOUT_CLASSIFICATION	5.803695251016155E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999399153002755	WITHOUT_CLASSIFICATION	6.008469972440009E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999535834905515	WITHOUT_CLASSIFICATION	4.6416509448415275E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998221740802078	WITHOUT_CLASSIFICATION	1.7782591979224386E-4	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998221740802078	WITHOUT_CLASSIFICATION	1.7782591979224386E-4	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999966618539632	WITHOUT_CLASSIFICATION	3.338146036805231E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999112734451	WITHOUT_CLASSIFICATION	8.872655479322372E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999606516384824	WITHOUT_CLASSIFICATION	3.934836151769832E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999826008538976	WITHOUT_CLASSIFICATION	1.73991461024085E-4	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999112850771962	WITHOUT_CLASSIFICATION	8.871492280385425E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999205023547845	WITHOUT_CLASSIFICATION	7.949764521548154E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999884190672649	WITHOUT_CLASSIFICATION	1.1580932735015363E-5	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999985016124706	WITHOUT_CLASSIFICATION	1.4983875293973168E-6	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999719199695235	WITHOUT_CLASSIFICATION	2.808003047655936E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999540556874338	WITHOUT_CLASSIFICATION	4.594431256625192E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317824679401	WITHOUT_CLASSIFICATION	6.821753205988724E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999793565405067	WITHOUT_CLASSIFICATION	2.0643459493301173E-4	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999899270950878	WITHOUT_CLASSIFICATION	1.0072904912203485E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999924286110581	WITHOUT_CLASSIFICATION	7.571388942038904E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998570240077496	WITHOUT_CLASSIFICATION	1.429759922504815E-4	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999995734457482	WITHOUT_CLASSIFICATION	4.2655425179870645E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995775217743	WITHOUT_CLASSIFICATION	4.2247822575486224E-7	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998893267512283	WITHOUT_CLASSIFICATION	1.106732487717053E-4	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998374161977657	WITHOUT_CLASSIFICATION	1.6258380223435718E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999359064606373	WITHOUT_CLASSIFICATION	6.409353936260865E-5	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999847246192232	WITHOUT_CLASSIFICATION	1.527538077681484E-5	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999907840330738	WITHOUT_CLASSIFICATION	9.215966926213079E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999915420615029	WITHOUT_CLASSIFICATION	8.457938497169625E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9998076855438989	WITHOUT_CLASSIFICATION	1.923144561012201E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999528544703478	WITHOUT_CLASSIFICATION	4.714552965217517E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999528544703478	WITHOUT_CLASSIFICATION	4.714552965217517E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999437950694764	WITHOUT_CLASSIFICATION	5.6204930523538424E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999207548612749	WITHOUT_CLASSIFICATION	7.924513872517079E-5	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999131439988925	WITHOUT_CLASSIFICATION	8.685600110745031E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999980748183888	WITHOUT_CLASSIFICATION	1.9251816111931018E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999774068793633	WITHOUT_CLASSIFICATION	2.2593120636618983E-5	TEST
