test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999130258426056	WITHOUT_CLASSIFICATION	8.69741573945189E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998666081375234	WITHOUT_CLASSIFICATION	1.3339186247656766E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999995351014451	WITHOUT_CLASSIFICATION	4.648985548884205E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999943896967223	WITHOUT_CLASSIFICATION	5.610303277716747E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997966574812	WITHOUT_CLASSIFICATION	2.0334251873207607E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997966574812	WITHOUT_CLASSIFICATION	2.0334251873207607E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999994053706928	WITHOUT_CLASSIFICATION	5.946293072232221E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998427115858	WITHOUT_CLASSIFICATION	1.5728841416125206E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999983973049265	WITHOUT_CLASSIFICATION	1.6026950735478666E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999956923651535	WITHOUT_CLASSIFICATION	4.30763484645013E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999758511374575	WITHOUT_CLASSIFICATION	2.4148862542551685E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999758511374575	WITHOUT_CLASSIFICATION	2.4148862542551685E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9997391788282308	WITHOUT_CLASSIFICATION	2.6082117176920645E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998712536842	WITHOUT_CLASSIFICATION	1.2874631580801203E-7	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999981796437343	WITHOUT_CLASSIFICATION	1.8203562657140793E-6	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999983983313294	WITHOUT_CLASSIFICATION	1.601668670524981E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996641271768	WITHOUT_CLASSIFICATION	3.3587282325730397E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999551228184996	WITHOUT_CLASSIFICATION	4.4877181500403354E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999389491656098	WITHOUT_CLASSIFICATION	6.105083439020128E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995418899359491	WITHOUT_CLASSIFICATION	4.5811006405099076E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999310196187803	WITHOUT_CLASSIFICATION	6.898038121970708E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999994214252912	WITHOUT_CLASSIFICATION	5.785747087609995E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999228880799916	WITHOUT_CLASSIFICATION	7.71119200083919E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.999802366959079	WITHOUT_CLASSIFICATION	1.976330409209824E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994913309972	WITHOUT_CLASSIFICATION	5.086690027619052E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998571550043784	WITHOUT_CLASSIFICATION	1.4284499562159015E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998571550043784	WITHOUT_CLASSIFICATION	1.4284499562159015E-4	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999953600378565	WITHOUT_CLASSIFICATION	4.639962143581276E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9996778265344957	WITHOUT_CLASSIFICATION	3.2217346550443104E-4	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999399145912	WITHOUT_CLASSIFICATION	6.008540876298646E-8	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999648803904	WITHOUT_CLASSIFICATION	3.511960956909118E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999954678468221	WITHOUT_CLASSIFICATION	4.532153177891399E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999995868026186	WITHOUT_CLASSIFICATION	4.1319738136914167E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999979800515199	WITHOUT_CLASSIFICATION	2.0199484801928E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999997746461445	WITHOUT_CLASSIFICATION	2.2535385552690738E-7	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.999999935677061	WITHOUT_CLASSIFICATION	6.432293906670447E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999990108150597	WITHOUT_CLASSIFICATION	9.891849402719973E-7	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999547632074	WITHOUT_CLASSIFICATION	4.523679260627076E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999992319233449	WITHOUT_CLASSIFICATION	7.680766549119373E-7	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999906397244	WITHOUT_CLASSIFICATION	9.360275595741E-9	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995735427564	WITHOUT_CLASSIFICATION	4.2645724364149206E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999991740643513	WITHOUT_CLASSIFICATION	8.259356486090141E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971297401264	WITHOUT_CLASSIFICATION	2.8702598735407804E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874227828125	WITHOUT_CLASSIFICATION	1.2577217187394913E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999996487451818	WITHOUT_CLASSIFICATION	3.5125481817737805E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999998298528863	WITHOUT_CLASSIFICATION	1.7014711369435045E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999881669917635	WITHOUT_CLASSIFICATION	1.1833008236408287E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999872816301	WITHOUT_CLASSIFICATION	1.2718369862564642E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999974945902762	WITHOUT_CLASSIFICATION	2.5054097237310195E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999881669917635	WITHOUT_CLASSIFICATION	1.1833008236408287E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999974945902762	WITHOUT_CLASSIFICATION	2.5054097237310195E-6	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999976122229192	WITHOUT_CLASSIFICATION	2.387777080953321E-6	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9972222058765502	WITHOUT_CLASSIFICATION	0.0027777941234498494	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999992060001202	WITHOUT_CLASSIFICATION	7.939998798003405E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999946287377732	WITHOUT_CLASSIFICATION	5.371262226785994E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998626960953572	WITHOUT_CLASSIFICATION	1.373039046427705E-4	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999994059317856	WITHOUT_CLASSIFICATION	5.940682144913102E-7	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998844937895012	WITHOUT_CLASSIFICATION	1.1550621049889195E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999909363959887	WITHOUT_CLASSIFICATION	9.063604011340208E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999979078757695	WITHOUT_CLASSIFICATION	2.092124230492261E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998837331961904	WITHOUT_CLASSIFICATION	1.1626680380961381E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999996029049925	WITHOUT_CLASSIFICATION	3.970950075913105E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999974945902762	WITHOUT_CLASSIFICATION	2.5054097237310195E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998724150644	WITHOUT_CLASSIFICATION	1.2758493565072514E-7	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999992129886618	WITHOUT_CLASSIFICATION	7.870113381078913E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999996639378084	WITHOUT_CLASSIFICATION	3.360621915981116E-7	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999752460356779	WITHOUT_CLASSIFICATION	2.475396432210564E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999997643456707	WITHOUT_CLASSIFICATION	2.3565432931933074E-7	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998160240271	WITHOUT_CLASSIFICATION	1.8397597279575718E-7	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984649990984	WITHOUT_CLASSIFICATION	1.5350009015977773E-6	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999992569062605	WITHOUT_CLASSIFICATION	7.430937394621352E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999945911870806	WITHOUT_CLASSIFICATION	5.4088129194048374E-6	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998789447743	WITHOUT_CLASSIFICATION	1.2105522580735545E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998323167243	WITHOUT_CLASSIFICATION	1.676832757320613E-7	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999912496566304	WITHOUT_CLASSIFICATION	8.750343369568433E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999994293770096	WITHOUT_CLASSIFICATION	5.706229903212186E-7	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998478287142	WITHOUT_CLASSIFICATION	1.5217128582112E-7	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999992394773	WITHOUT_CLASSIFICATION	7.605226976524903E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999812449849	WITHOUT_CLASSIFICATION	1.875501513686695E-8	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999974673091687	WITHOUT_CLASSIFICATION	2.5326908312233065E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999982678392737	WITHOUT_CLASSIFICATION	1.732160726266664E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999979170039023	WITHOUT_CLASSIFICATION	2.0829960978187572E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999998918549905	WITHOUT_CLASSIFICATION	1.081450095675718E-7	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999999700434078	WITHOUT_CLASSIFICATION	2.995659219147656E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999905446427	WITHOUT_CLASSIFICATION	9.45535729723774E-8	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999991303939071	WITHOUT_CLASSIFICATION	8.696060929825458E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997986164504	WITHOUT_CLASSIFICATION	2.013835495608848E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999905446427	WITHOUT_CLASSIFICATION	9.45535729723774E-8	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999186270289	WITHOUT_CLASSIFICATION	8.137297107347852E-8	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997150661957	WITHOUT_CLASSIFICATION	2.849338043277242E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999881669917635	WITHOUT_CLASSIFICATION	1.1833008236408287E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999990925850734	WITHOUT_CLASSIFICATION	9.074149267531554E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999997091112722	WITHOUT_CLASSIFICATION	2.908887277870291E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999852451448	WITHOUT_CLASSIFICATION	1.4754855204981068E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999852451448	WITHOUT_CLASSIFICATION	1.4754855204981068E-7	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999924455055811	WITHOUT_CLASSIFICATION	7.554494418940256E-6	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999995094669051	WITHOUT_CLASSIFICATION	4.905330948977817E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999996503633317	WITHOUT_CLASSIFICATION	3.4963666830263654E-7	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999702532675	WITHOUT_CLASSIFICATION	2.9746732580424568E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999994177799598	WITHOUT_CLASSIFICATION	5.822200401816447E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999996110690579	WITHOUT_CLASSIFICATION	3.889309420701383E-7	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999387654972	WITHOUT_CLASSIFICATION	6.123450280711153E-7	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999995578680461	WITHOUT_CLASSIFICATION	4.4213195385476863E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999985780526036	WITHOUT_CLASSIFICATION	1.4219473964289424E-6	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999995477598955	WITHOUT_CLASSIFICATION	4.522401045529178E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991884284584	WITHOUT_CLASSIFICATION	8.115715416474103E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991884284584	WITHOUT_CLASSIFICATION	8.115715416474103E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999321067035	WITHOUT_CLASSIFICATION	6.789329648322152E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999087383162	WITHOUT_CLASSIFICATION	9.126168372234415E-8	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999912777184561	WITHOUT_CLASSIFICATION	8.722281543789073E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999991884284584	WITHOUT_CLASSIFICATION	8.115715416474103E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999321067035	WITHOUT_CLASSIFICATION	6.789329648322152E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999321067035	WITHOUT_CLASSIFICATION	6.789329648322152E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999645797613935	WITHOUT_CLASSIFICATION	3.542023860639018E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999977747724904	WITHOUT_CLASSIFICATION	2.2252275095985178E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999506373329	WITHOUT_CLASSIFICATION	4.93626670985509E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999997240381371	WITHOUT_CLASSIFICATION	2.759618628994735E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999963248208832	WITHOUT_CLASSIFICATION	3.6751791168217177E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999963248208832	WITHOUT_CLASSIFICATION	3.6751791168217177E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999973565812295	WITHOUT_CLASSIFICATION	2.64341877064296E-6	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999979477755802	WITHOUT_CLASSIFICATION	2.0522244198235627E-6	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999974969147931	WITHOUT_CLASSIFICATION	2.503085206893944E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999979804209183	WITHOUT_CLASSIFICATION	2.01957908165352E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999979804209183	WITHOUT_CLASSIFICATION	2.01957908165352E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999988930031163	WITHOUT_CLASSIFICATION	1.1069968837261876E-6	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999988993728204	WITHOUT_CLASSIFICATION	1.1006271795724125E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998454678235	WITHOUT_CLASSIFICATION	1.5453217655123356E-7	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999998973693347	WITHOUT_CLASSIFICATION	1.0263066530386073E-6	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999728240396502	WITHOUT_CLASSIFICATION	2.717596034979568E-5	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999473694148	WITHOUT_CLASSIFICATION	5.263058519057906E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999972528548583	WITHOUT_CLASSIFICATION	2.7471451417689383E-6	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998601301632	WITHOUT_CLASSIFICATION	1.3986983682859265E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.999998478468447	WITHOUT_CLASSIFICATION	1.5215315528852914E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998454678235	WITHOUT_CLASSIFICATION	1.5453217655123356E-7	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999975869084056	WITHOUT_CLASSIFICATION	2.4130915943595486E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999552855466869	WITHOUT_CLASSIFICATION	4.471445331301327E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999552855466869	WITHOUT_CLASSIFICATION	4.471445331301327E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997950359711	WITHOUT_CLASSIFICATION	2.0496402892749968E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999896617320224	WITHOUT_CLASSIFICATION	1.0338267977498173E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999430516447	WITHOUT_CLASSIFICATION	5.694835517674817E-8	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999992546645593	WITHOUT_CLASSIFICATION	7.453354408000604E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.99999039808589	WITHOUT_CLASSIFICATION	9.601914110034103E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999989681127474	WITHOUT_CLASSIFICATION	1.0318872526310973E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999978895478854	WITHOUT_CLASSIFICATION	2.1104521145829527E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999980626080038	WITHOUT_CLASSIFICATION	1.937391996246174E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999551225653	WITHOUT_CLASSIFICATION	4.48774345939041E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998428950967	WITHOUT_CLASSIFICATION	1.5710490325847353E-7	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998428950967	WITHOUT_CLASSIFICATION	1.5710490325847353E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999130258426056	WITHOUT_CLASSIFICATION	8.69741573945189E-5	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994513168893	WITHOUT_CLASSIFICATION	5.486831107002178E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999939494009389	WITHOUT_CLASSIFICATION	6.0505990611380105E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999988465680329	WITHOUT_CLASSIFICATION	1.1534319671016175E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999962282482697	WITHOUT_CLASSIFICATION	3.771751730338563E-6	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999952689604568	WITHOUT_CLASSIFICATION	4.731039543310893E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.999987445442624	WITHOUT_CLASSIFICATION	1.2554557376145066E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999980667081654	WITHOUT_CLASSIFICATION	1.933291834573605E-6	TEST
new	WITHOUT_CLASSIFICATION	0.9997591724785189	WITHOUT_CLASSIFICATION	2.408275214811463E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.9997865582679141	WITHOUT_CLASSIFICATION	2.1344173208606932E-4	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999952894893023	WITHOUT_CLASSIFICATION	4.710510697729489E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999995351014451	WITHOUT_CLASSIFICATION	4.648985548884205E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952408084967	WITHOUT_CLASSIFICATION	4.7591915033719104E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952408084967	WITHOUT_CLASSIFICATION	4.7591915033719104E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999952676717518	WITHOUT_CLASSIFICATION	4.73232824822175E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999238536638708	WITHOUT_CLASSIFICATION	7.614633612921444E-5	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999996197905446	WITHOUT_CLASSIFICATION	3.8020945536423123E-7	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999897253702765	WITHOUT_CLASSIFICATION	1.027462972346031E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999975498530397	WITHOUT_CLASSIFICATION	2.450146960412813E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999993459879527	WITHOUT_CLASSIFICATION	6.540120472315373E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997966574812	WITHOUT_CLASSIFICATION	2.0334251873207607E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996373094159	WITHOUT_CLASSIFICATION	3.626905841063973E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999843918023619	WITHOUT_CLASSIFICATION	1.5608197638234416E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999974398108902	WITHOUT_CLASSIFICATION	2.5601891097727984E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999983428132653	WITHOUT_CLASSIFICATION	1.6571867348217426E-6	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999827301345698	WITHOUT_CLASSIFICATION	1.726986543013366E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.999930080187884	WITHOUT_CLASSIFICATION	6.991981211604174E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999933450491468	WITHOUT_CLASSIFICATION	6.6549508531656095E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999995032506963	WITHOUT_CLASSIFICATION	4.967493036515982E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999992961102598	WITHOUT_CLASSIFICATION	7.038897401742299E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998371175186	WITHOUT_CLASSIFICATION	1.6288248135093744E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997558657132	WITHOUT_CLASSIFICATION	2.4413428678726327E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999986839066989	WITHOUT_CLASSIFICATION	1.316093301206264E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999225349828933	WITHOUT_CLASSIFICATION	7.746501710677664E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9997865582679141	WITHOUT_CLASSIFICATION	2.1344173208606932E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952408084967	WITHOUT_CLASSIFICATION	4.7591915033719104E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999933450491468	WITHOUT_CLASSIFICATION	6.6549508531656095E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999994053706928	WITHOUT_CLASSIFICATION	5.946293072232221E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999979841149278	WITHOUT_CLASSIFICATION	2.0158850721881354E-6	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999974116071528	WITHOUT_CLASSIFICATION	2.5883928471273375E-6	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999962532759415	WITHOUT_CLASSIFICATION	3.746724058440349E-6	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999823012686874	WITHOUT_CLASSIFICATION	1.769873131270889E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999999430724632	WITHOUT_CLASSIFICATION	5.69275367997198E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.999945933437951	WITHOUT_CLASSIFICATION	5.406656204886075E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999994559350838	WITHOUT_CLASSIFICATION	5.44064916237609E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999701637189305	WITHOUT_CLASSIFICATION	2.9836281069443805E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999099558062342	WITHOUT_CLASSIFICATION	9.004419376583281E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.999905841705453	WITHOUT_CLASSIFICATION	9.415829454687483E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.999905841705453	WITHOUT_CLASSIFICATION	9.415829454687483E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996578483118	WITHOUT_CLASSIFICATION	3.4215168820602437E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999999520981429	WITHOUT_CLASSIFICATION	4.7901857172190157E-8	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.999934190295374	WITHOUT_CLASSIFICATION	6.580970462596945E-5	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999783079738062	WITHOUT_CLASSIFICATION	2.16920261937591E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998618265417	WITHOUT_CLASSIFICATION	1.3817345834529277E-7	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.999999747762902	WITHOUT_CLASSIFICATION	2.5223709797158596E-7	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999979014867938	WITHOUT_CLASSIFICATION	2.098513206292527E-6	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998427115858	WITHOUT_CLASSIFICATION	1.5728841416125206E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999853953683622	WITHOUT_CLASSIFICATION	1.4604631637857467E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999994677762571	WITHOUT_CLASSIFICATION	5.322237428695405E-7	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999994677762571	WITHOUT_CLASSIFICATION	5.322237428695405E-7	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.999998523349146	WITHOUT_CLASSIFICATION	1.4766508540006156E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999986518755284	WITHOUT_CLASSIFICATION	1.3481244716422634E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999973986941976	WITHOUT_CLASSIFICATION	2.6013058024458918E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999812868095	WITHOUT_CLASSIFICATION	1.8713190491373455E-7	TEST
int	WITHOUT_CLASSIFICATION	0.9999396521466195	WITHOUT_CLASSIFICATION	6.0347853380460396E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999943664056242	WITHOUT_CLASSIFICATION	5.633594375816321E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9997865582679141	WITHOUT_CLASSIFICATION	2.1344173208606932E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999995351014451	WITHOUT_CLASSIFICATION	4.648985548884205E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999933450491468	WITHOUT_CLASSIFICATION	6.6549508531656095E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999933450491468	WITHOUT_CLASSIFICATION	6.6549508531656095E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109743949	WITHOUT_CLASSIFICATION	3.8902560510280034E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109743949	WITHOUT_CLASSIFICATION	3.8902560510280034E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999984530015831	WITHOUT_CLASSIFICATION	1.54699841700436E-6	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999309432891663	WITHOUT_CLASSIFICATION	6.90567108337024E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999309432891663	WITHOUT_CLASSIFICATION	6.90567108337024E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999955986037705	WITHOUT_CLASSIFICATION	4.401396229432863E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999992041052225	WITHOUT_CLASSIFICATION	7.958947775557958E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999912203984413	WITHOUT_CLASSIFICATION	8.779601558648126E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999988204448198	WITHOUT_CLASSIFICATION	1.17955518012919E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999994519972647	WITHOUT_CLASSIFICATION	5.480027352692952E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999956923651535	WITHOUT_CLASSIFICATION	4.30763484645013E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999956923651535	WITHOUT_CLASSIFICATION	4.30763484645013E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999939310170075	WITHOUT_CLASSIFICATION	6.06898299251909E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999947192741987	WITHOUT_CLASSIFICATION	5.2807258012711505E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999810583796013	WITHOUT_CLASSIFICATION	1.8941620398716792E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9998890422855259	WITHOUT_CLASSIFICATION	1.1095771447413819E-4	TEST
char	WITHOUT_CLASSIFICATION	0.9999107715108512	WITHOUT_CLASSIFICATION	8.922848914878393E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999221330783032	WITHOUT_CLASSIFICATION	7.786692169675049E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999758511374575	WITHOUT_CLASSIFICATION	2.4148862542551685E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999574430072191	WITHOUT_CLASSIFICATION	4.255699278092272E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999574430072191	WITHOUT_CLASSIFICATION	4.255699278092272E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9997391788282308	WITHOUT_CLASSIFICATION	2.6082117176920645E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9997391788282308	WITHOUT_CLASSIFICATION	2.6082117176920645E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999930057525498	WITHOUT_CLASSIFICATION	6.994247450270624E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999930057525498	WITHOUT_CLASSIFICATION	6.994247450270624E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999988436722115	WITHOUT_CLASSIFICATION	1.1563277885976589E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999988436722115	WITHOUT_CLASSIFICATION	1.1563277885976589E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999956923651535	WITHOUT_CLASSIFICATION	4.30763484645013E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999758511374575	WITHOUT_CLASSIFICATION	2.4148862542551685E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999574430072191	WITHOUT_CLASSIFICATION	4.255699278092272E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999574430072191	WITHOUT_CLASSIFICATION	4.255699278092272E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9997391788282308	WITHOUT_CLASSIFICATION	2.6082117176920645E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999930057525498	WITHOUT_CLASSIFICATION	6.994247450270624E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999930057525498	WITHOUT_CLASSIFICATION	6.994247450270624E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999988436722115	WITHOUT_CLASSIFICATION	1.1563277885976589E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998157921258	WITHOUT_CLASSIFICATION	1.8420787414548976E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999991511514843	WITHOUT_CLASSIFICATION	8.488485155706466E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999993547482012	WITHOUT_CLASSIFICATION	6.452517988358423E-7	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999962910387856	WITHOUT_CLASSIFICATION	3.7089612143583077E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999978850332799	WITHOUT_CLASSIFICATION	2.1149667200161614E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9998552835949757	WITHOUT_CLASSIFICATION	1.447164050243922E-4	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999466643241	WITHOUT_CLASSIFICATION	5.3335675758674495E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999998567766485	WITHOUT_CLASSIFICATION	1.4322335149847796E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999999894400066	WITHOUT_CLASSIFICATION	1.0559993402965399E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999954753932022	WITHOUT_CLASSIFICATION	4.524606797768773E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999990383215206	WITHOUT_CLASSIFICATION	9.616784794437845E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999972022588952	WITHOUT_CLASSIFICATION	2.7977411048090295E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999924455055811	WITHOUT_CLASSIFICATION	7.554494418940256E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9998552835949757	WITHOUT_CLASSIFICATION	1.447164050243922E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998552835949757	WITHOUT_CLASSIFICATION	1.447164050243922E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.9998552835949757	WITHOUT_CLASSIFICATION	1.447164050243922E-4	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999998746670204	WITHOUT_CLASSIFICATION	1.2533297951197962E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999969405422925	WITHOUT_CLASSIFICATION	3.0594577075445457E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999969405422925	WITHOUT_CLASSIFICATION	3.0594577075445457E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999923248385653	WITHOUT_CLASSIFICATION	7.675161434779797E-6	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999993078675189	WITHOUT_CLASSIFICATION	6.921324811614046E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.99999944980367	WITHOUT_CLASSIFICATION	5.501963300332039E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999994205172602	WITHOUT_CLASSIFICATION	5.794827398711504E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999994205172602	WITHOUT_CLASSIFICATION	5.794827398711504E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996641271768	WITHOUT_CLASSIFICATION	3.3587282325730397E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999509927702	WITHOUT_CLASSIFICATION	4.90072298021962E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999509927702	WITHOUT_CLASSIFICATION	4.90072298021962E-7	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998648588204805	WITHOUT_CLASSIFICATION	1.3514117951950077E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999991319024524	WITHOUT_CLASSIFICATION	8.680975476381536E-7	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999987443427244	WITHOUT_CLASSIFICATION	1.255657275530307E-6	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995207619596767	WITHOUT_CLASSIFICATION	4.7923804032337105E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9997741901181039	WITHOUT_CLASSIFICATION	2.2580988189600454E-4	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9996043617256651	WITHOUT_CLASSIFICATION	3.956382743347979E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999551228184996	WITHOUT_CLASSIFICATION	4.4877181500403354E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995204709445062	WITHOUT_CLASSIFICATION	4.7952905549366004E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9930012065870073	WITHOUT_CLASSIFICATION	0.006998793412992729	TEST
ID	WITHOUT_CLASSIFICATION	0.9993033483953794	WITHOUT_CLASSIFICATION	6.966516046206074E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999333622888474	WITHOUT_CLASSIFICATION	6.663771115256576E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999310196187803	WITHOUT_CLASSIFICATION	6.898038121970708E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991860810908	WITHOUT_CLASSIFICATION	8.139189092820914E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998942038830173	WITHOUT_CLASSIFICATION	1.0579611698266967E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999742562202427	WITHOUT_CLASSIFICATION	2.5743779757312512E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999310196187803	WITHOUT_CLASSIFICATION	6.898038121970708E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999310447825	WITHOUT_CLASSIFICATION	6.895521755848711E-8	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999387841229	WITHOUT_CLASSIFICATION	6.121587722198088E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999232751747045	WITHOUT_CLASSIFICATION	7.672482529557716E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9997836361779642	WITHOUT_CLASSIFICATION	2.1636382203576293E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999599434960221	WITHOUT_CLASSIFICATION	4.005650397788E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999385905932204	WITHOUT_CLASSIFICATION	6.140940677956975E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998632034637085	WITHOUT_CLASSIFICATION	1.3679653629160816E-4	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.999802366959079	WITHOUT_CLASSIFICATION	1.976330409209824E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999462511805003	WITHOUT_CLASSIFICATION	5.374881949962035E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994913309972	WITHOUT_CLASSIFICATION	5.086690027619052E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999832687969477	WITHOUT_CLASSIFICATION	1.6731203052364286E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999987036013634	WITHOUT_CLASSIFICATION	1.296398636524436E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9994653499085505	WITHOUT_CLASSIFICATION	5.346500914493604E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999551228184996	WITHOUT_CLASSIFICATION	4.4877181500403354E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999462511805003	WITHOUT_CLASSIFICATION	5.374881949962035E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999832687969477	WITHOUT_CLASSIFICATION	1.6731203052364286E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9994653499085505	WITHOUT_CLASSIFICATION	5.346500914493604E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999990563923584	WITHOUT_CLASSIFICATION	9.436076416413331E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9998004646326569	WITHOUT_CLASSIFICATION	1.9953536734306168E-4	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998608294718	WITHOUT_CLASSIFICATION	1.391705282074486E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998571550043784	WITHOUT_CLASSIFICATION	1.4284499562159015E-4	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998375310062307	WITHOUT_CLASSIFICATION	1.6246899376913545E-4	TEST
column index	WITHOUT_CLASSIFICATION	0.9999963357851217	WITHOUT_CLASSIFICATION	3.664214878277429E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999977131146345	WITHOUT_CLASSIFICATION	2.286885365530058E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999992183656431	WITHOUT_CLASSIFICATION	7.816343568514716E-7	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999882829311659	WITHOUT_CLASSIFICATION	1.1717068834056254E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999997340138475	WITHOUT_CLASSIFICATION	2.659861524460515E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998687821473	WITHOUT_CLASSIFICATION	1.312178527656324E-7	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999947977828652	WITHOUT_CLASSIFICATION	5.202217134951689E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998279524459	WITHOUT_CLASSIFICATION	1.7204755399080546E-7	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999540762566	WITHOUT_CLASSIFICATION	4.592374326584712E-8	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.999823046612428	WITHOUT_CLASSIFICATION	1.7695338757209075E-4	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998856316112212	WITHOUT_CLASSIFICATION	1.1436838877878156E-4	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9996778265344957	WITHOUT_CLASSIFICATION	3.2217346550443104E-4	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999969304813733	WITHOUT_CLASSIFICATION	3.0695186267003214E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9996793663693999	WITHOUT_CLASSIFICATION	3.206336306000235E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999462511805003	WITHOUT_CLASSIFICATION	5.374881949962035E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999966763167725	WITHOUT_CLASSIFICATION	3.323683227471313E-6	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998036373926	WITHOUT_CLASSIFICATION	1.9636260749937296E-7	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999997376070224	WITHOUT_CLASSIFICATION	2.6239297758574113E-7	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9972956773151617	WITHOUT_CLASSIFICATION	0.002704322684838399	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.999997144498952	WITHOUT_CLASSIFICATION	2.8555010478824373E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999996267491859	WITHOUT_CLASSIFICATION	3.7325081412274066E-7	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999990358234	WITHOUT_CLASSIFICATION	9.641765649747486E-10	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999349042387	WITHOUT_CLASSIFICATION	6.509576130953171E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999865691751587	WITHOUT_CLASSIFICATION	1.343082484122957E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.999745134061088	WITHOUT_CLASSIFICATION	2.5486593891195286E-4	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999401155228697	WITHOUT_CLASSIFICATION	5.9884477130462226E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999453505154404	WITHOUT_CLASSIFICATION	5.464948455948525E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999982375577977	WITHOUT_CLASSIFICATION	1.7624422023136627E-6	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999648803904	WITHOUT_CLASSIFICATION	3.511960956909118E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999997685270452	WITHOUT_CLASSIFICATION	2.3147295481046308E-7	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999995671338175	WITHOUT_CLASSIFICATION	4.3286618242534056E-7	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999856826292305	WITHOUT_CLASSIFICATION	1.431737076953041E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999992009245242	WITHOUT_CLASSIFICATION	7.990754758266674E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999997714245091	WITHOUT_CLASSIFICATION	2.285754907592052E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999903704953595	WITHOUT_CLASSIFICATION	9.629504640463803E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999780645878	WITHOUT_CLASSIFICATION	2.1935412198792273E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999994713214169	WITHOUT_CLASSIFICATION	5.286785831815768E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998561516532	WITHOUT_CLASSIFICATION	1.438483466839724E-7	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999975985069067	WITHOUT_CLASSIFICATION	2.401493093250456E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999987810565443	WITHOUT_CLASSIFICATION	1.218943455653701E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999987810565443	WITHOUT_CLASSIFICATION	1.218943455653701E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999966847791081	WITHOUT_CLASSIFICATION	3.3152208920270826E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999993262618696	WITHOUT_CLASSIFICATION	6.737381303114498E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998973303669	WITHOUT_CLASSIFICATION	1.0266963310214933E-7	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999988111619158	WITHOUT_CLASSIFICATION	1.1888380842298386E-6	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999997090667196	WITHOUT_CLASSIFICATION	2.9093328038893396E-6	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999995365229581	WITHOUT_CLASSIFICATION	4.6347704179612836E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999993925567388	WITHOUT_CLASSIFICATION	6.074432612844958E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999925109704833	WITHOUT_CLASSIFICATION	7.489029516753374E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999972740789187	WITHOUT_CLASSIFICATION	2.7259210812975947E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999976775127652	WITHOUT_CLASSIFICATION	2.3224872346635756E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999708774282189	WITHOUT_CLASSIFICATION	2.9122571781115253E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999874704224995	WITHOUT_CLASSIFICATION	1.252957750050842E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999979789436669	WITHOUT_CLASSIFICATION	2.021056333094222E-6	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999998469699115	WITHOUT_CLASSIFICATION	1.53030088494531E-6	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999990672913694	WITHOUT_CLASSIFICATION	9.327086305809446E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999963638258459	WITHOUT_CLASSIFICATION	3.636174154136097E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999998435386327	WITHOUT_CLASSIFICATION	1.564613672674962E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999989968542182	WITHOUT_CLASSIFICATION	1.0031457818206417E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972341999761	WITHOUT_CLASSIFICATION	2.765800023913717E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999997420288604	WITHOUT_CLASSIFICATION	2.579711395248517E-7	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975359041544	WITHOUT_CLASSIFICATION	2.4640958454948755E-6	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999979201418465	WITHOUT_CLASSIFICATION	2.0798581534136052E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999923797991378	WITHOUT_CLASSIFICATION	7.620200862286568E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999954715543296	WITHOUT_CLASSIFICATION	4.528445670450054E-6	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999994112786709	WITHOUT_CLASSIFICATION	5.887213291770982E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999984588207096	WITHOUT_CLASSIFICATION	1.5411792904947983E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999957810452275	WITHOUT_CLASSIFICATION	4.218954772491894E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999991243905667	WITHOUT_CLASSIFICATION	8.756094332450478E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998716404759	WITHOUT_CLASSIFICATION	1.283595241231663E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999765178083225	WITHOUT_CLASSIFICATION	2.348219167753636E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999997420288604	WITHOUT_CLASSIFICATION	2.579711395248517E-7	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999972721715241	WITHOUT_CLASSIFICATION	2.7278284758561364E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999996819279579	WITHOUT_CLASSIFICATION	3.180720421801905E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999996889409257	WITHOUT_CLASSIFICATION	3.1105907421242904E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999512420459632	WITHOUT_CLASSIFICATION	4.8757954036851914E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999512420459632	WITHOUT_CLASSIFICATION	4.8757954036851914E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.999995705949243	WITHOUT_CLASSIFICATION	4.294050757051468E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999994527192593	WITHOUT_CLASSIFICATION	5.472807407612928E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999776280332064	WITHOUT_CLASSIFICATION	2.2371966793607027E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999776280332064	WITHOUT_CLASSIFICATION	2.2371966793607027E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998561516532	WITHOUT_CLASSIFICATION	1.438483466839724E-7	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999730739907	WITHOUT_CLASSIFICATION	2.6926009275714437E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999986578924491	WITHOUT_CLASSIFICATION	1.3421075508521993E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996969860877	WITHOUT_CLASSIFICATION	3.030139122863177E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999986578924491	WITHOUT_CLASSIFICATION	1.3421075508521993E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996969860877	WITHOUT_CLASSIFICATION	3.030139122863177E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977331716304	WITHOUT_CLASSIFICATION	2.2668283695415877E-6	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999938942865747	WITHOUT_CLASSIFICATION	6.105713425298612E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999251467846	WITHOUT_CLASSIFICATION	7.485321539553552E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999996595003767	WITHOUT_CLASSIFICATION	3.4049962322729655E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999991053644754	WITHOUT_CLASSIFICATION	8.946355244682504E-7	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999653756803957	WITHOUT_CLASSIFICATION	3.462431960421346E-5	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999973781813948	WITHOUT_CLASSIFICATION	2.621818605198494E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999973781813948	WITHOUT_CLASSIFICATION	2.621818605198494E-6	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999997420426557	WITHOUT_CLASSIFICATION	2.579573442418417E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999905674889	WITHOUT_CLASSIFICATION	9.432511113236437E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999974603013108	WITHOUT_CLASSIFICATION	2.539698689207081E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999973216877	WITHOUT_CLASSIFICATION	2.6783124194714726E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.999996644501126	WITHOUT_CLASSIFICATION	3.355498874115264E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999921325325287	WITHOUT_CLASSIFICATION	7.867467471386466E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999945048364496	WITHOUT_CLASSIFICATION	5.49516355046576E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999363195456656	WITHOUT_CLASSIFICATION	6.36804543343579E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999363195456656	WITHOUT_CLASSIFICATION	6.36804543343579E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999609531656	WITHOUT_CLASSIFICATION	3.9046834414298445E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977331716304	WITHOUT_CLASSIFICATION	2.2668283695415877E-6	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999994863455026	WITHOUT_CLASSIFICATION	5.136544974116996E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999504219580897	WITHOUT_CLASSIFICATION	4.95780419102295E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999999919804161	WITHOUT_CLASSIFICATION	8.019583893365265E-8	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999956062834797	WITHOUT_CLASSIFICATION	4.393716520224726E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998818937218498	WITHOUT_CLASSIFICATION	1.1810627815031913E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977331716304	WITHOUT_CLASSIFICATION	2.2668283695415877E-6	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999956062834797	WITHOUT_CLASSIFICATION	4.393716520224726E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998818937218498	WITHOUT_CLASSIFICATION	1.1810627815031913E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999463067434	WITHOUT_CLASSIFICATION	5.369325666476315E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999925344364338	WITHOUT_CLASSIFICATION	7.465563566202033E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999904289447	WITHOUT_CLASSIFICATION	9.571055256086473E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977331716304	WITHOUT_CLASSIFICATION	2.2668283695415877E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977331716304	WITHOUT_CLASSIFICATION	2.2668283695415877E-6	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999893887531115	WITHOUT_CLASSIFICATION	1.0611246888519278E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999933196786626	WITHOUT_CLASSIFICATION	6.680321337359099E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999991563041823	WITHOUT_CLASSIFICATION	8.436958176973915E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995735427564	WITHOUT_CLASSIFICATION	4.2645724364149206E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999997345079907	WITHOUT_CLASSIFICATION	2.654920092641796E-7	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999987583355581	WITHOUT_CLASSIFICATION	1.2416644420404288E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999986113840243	WITHOUT_CLASSIFICATION	1.3886159756124581E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999473197848	WITHOUT_CLASSIFICATION	5.268021521271599E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999998205818689	WITHOUT_CLASSIFICATION	1.794181311104118E-7	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999844341594266	WITHOUT_CLASSIFICATION	1.556584057335318E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999996000379565	WITHOUT_CLASSIFICATION	3.9996204339397645E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999997316666496	WITHOUT_CLASSIFICATION	2.68333350392514E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999982805289186	WITHOUT_CLASSIFICATION	1.7194710813520775E-6	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999990350745194	WITHOUT_CLASSIFICATION	9.649254806145793E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977920775714	WITHOUT_CLASSIFICATION	2.2079224285546E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9998203440919604	WITHOUT_CLASSIFICATION	1.796559080395706E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995735427564	WITHOUT_CLASSIFICATION	4.2645724364149206E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999721043709421	WITHOUT_CLASSIFICATION	2.7895629057872778E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999985410083209	WITHOUT_CLASSIFICATION	1.45899167911816E-6	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998647214766	WITHOUT_CLASSIFICATION	1.3527852339079365E-7	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999849274218853	WITHOUT_CLASSIFICATION	1.5072578114791911E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999831596371938	WITHOUT_CLASSIFICATION	1.6840362806311582E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999831596371938	WITHOUT_CLASSIFICATION	1.6840362806311582E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995735427564	WITHOUT_CLASSIFICATION	4.2645724364149206E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995154568581445	WITHOUT_CLASSIFICATION	4.8454314185548335E-4	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999953146076938	WITHOUT_CLASSIFICATION	4.685392306277792E-6	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9997582506569981	WITHOUT_CLASSIFICATION	2.4174934300187403E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999986814636006	WITHOUT_CLASSIFICATION	1.3185363994098555E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999974720068983	WITHOUT_CLASSIFICATION	2.5279931017435565E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998058638229	WITHOUT_CLASSIFICATION	1.9413617725715904E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999764991037	WITHOUT_CLASSIFICATION	2.3500896330558657E-8	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999997282047906	WITHOUT_CLASSIFICATION	2.717952093977248E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999971252578	WITHOUT_CLASSIFICATION	2.874742241102538E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999765477501	WITHOUT_CLASSIFICATION	2.3452249903439618E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996379383385	WITHOUT_CLASSIFICATION	3.620616616367656E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999665940844489	WITHOUT_CLASSIFICATION	3.340591555110941E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998649277317571	WITHOUT_CLASSIFICATION	1.3507226824288613E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999576724622	WITHOUT_CLASSIFICATION	4.2327537843174396E-8	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999566415785	WITHOUT_CLASSIFICATION	4.3358421511461564E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999982239237881	WITHOUT_CLASSIFICATION	1.7760762118006884E-6	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999119990682	WITHOUT_CLASSIFICATION	8.800093176268879E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999975093891805	WITHOUT_CLASSIFICATION	2.4906108195410083E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997459665694	WITHOUT_CLASSIFICATION	2.54033430602587E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998657504526	WITHOUT_CLASSIFICATION	1.342495473072386E-7	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999766823102	WITHOUT_CLASSIFICATION	2.33176897662192E-8	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999999684891132	WITHOUT_CLASSIFICATION	3.151088679040042E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971925041715	WITHOUT_CLASSIFICATION	2.8074958285524505E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998842943615	WITHOUT_CLASSIFICATION	1.1570563850043859E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918105435518	WITHOUT_CLASSIFICATION	8.189456448223034E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944256683404	WITHOUT_CLASSIFICATION	5.5743316595586766E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718376978267	WITHOUT_CLASSIFICATION	2.8162302173193825E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731644360836	WITHOUT_CLASSIFICATION	2.6835563916395144E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654454087993	WITHOUT_CLASSIFICATION	3.4554591200649296E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951715125464	WITHOUT_CLASSIFICATION	4.828487453614639E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999981162380152	WITHOUT_CLASSIFICATION	1.8837619848690008E-6	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999393794332	WITHOUT_CLASSIFICATION	6.062056683334365E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916443916933	WITHOUT_CLASSIFICATION	8.35560830677112E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990928519982	WITHOUT_CLASSIFICATION	9.071480018031849E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991043122215	WITHOUT_CLASSIFICATION	8.956877784602515E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939586684673	WITHOUT_CLASSIFICATION	6.041331532688701E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894263180911	WITHOUT_CLASSIFICATION	1.0573681908857126E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974531706878	WITHOUT_CLASSIFICATION	2.54682931216285E-6	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977021472528	WITHOUT_CLASSIFICATION	2.297852747059095E-6	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999363506827106	WITHOUT_CLASSIFICATION	6.364931728939109E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999591147659986	WITHOUT_CLASSIFICATION	4.088523400141059E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997046054822	WITHOUT_CLASSIFICATION	2.953945177992438E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999121156421344	WITHOUT_CLASSIFICATION	8.788435786557619E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999964985119788	WITHOUT_CLASSIFICATION	3.501488021268743E-6	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999613614786	WITHOUT_CLASSIFICATION	3.863852134786847E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999566552238962	WITHOUT_CLASSIFICATION	4.334477610371929E-5	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999722157137402	WITHOUT_CLASSIFICATION	2.778428625983427E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999994656147959	WITHOUT_CLASSIFICATION	5.343852041399072E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999919538228	WITHOUT_CLASSIFICATION	8.046177137872517E-9	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999522702247334	WITHOUT_CLASSIFICATION	4.772977526647407E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999287366510055	WITHOUT_CLASSIFICATION	7.126334899449831E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999289409614773	WITHOUT_CLASSIFICATION	7.105903852267446E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999407206312952	WITHOUT_CLASSIFICATION	5.927936870467215E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999730176733593	WITHOUT_CLASSIFICATION	2.6982326640666067E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999973296138049	WITHOUT_CLASSIFICATION	2.6703861951158257E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999834283447	WITHOUT_CLASSIFICATION	1.6571655254103082E-8	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999993292416947	WITHOUT_CLASSIFICATION	6.707583054187383E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9991854994162124	WITHOUT_CLASSIFICATION	8.1450058378769E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999532374318	WITHOUT_CLASSIFICATION	4.676256822963618E-8	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972885848374	WITHOUT_CLASSIFICATION	2.711415162577749E-6	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902497278833	WITHOUT_CLASSIFICATION	9.750272116782798E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990500628926	WITHOUT_CLASSIFICATION	9.499371074834303E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964615737429	WITHOUT_CLASSIFICATION	3.5384262572353436E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999942583291699	WITHOUT_CLASSIFICATION	5.74167083010546E-6	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999881999326	WITHOUT_CLASSIFICATION	1.1800067399467999E-7	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999998244936688	WITHOUT_CLASSIFICATION	1.7550633130374236E-7	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999996832863509	WITHOUT_CLASSIFICATION	3.167136490527688E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999383364784	WITHOUT_CLASSIFICATION	6.166352159995362E-6	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998910425971	WITHOUT_CLASSIFICATION	1.0895740280103679E-7	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999677145978179	WITHOUT_CLASSIFICATION	3.2285402182064006E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999996672228092	WITHOUT_CLASSIFICATION	3.3277719087790954E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999951228346	WITHOUT_CLASSIFICATION	4.877165538274205E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999880298941419	WITHOUT_CLASSIFICATION	1.197010585801411E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999569120757	WITHOUT_CLASSIFICATION	4.308792438929621E-8	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999988138781366	WITHOUT_CLASSIFICATION	1.1861218633869862E-6	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999944989709914	WITHOUT_CLASSIFICATION	5.501029008668058E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999566552238962	WITHOUT_CLASSIFICATION	4.334477610371929E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999998253938029	WITHOUT_CLASSIFICATION	1.7460619700691705E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999919363737	WITHOUT_CLASSIFICATION	8.063626220072802E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997450106537	WITHOUT_CLASSIFICATION	2.549893463620462E-7	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999931597401194	WITHOUT_CLASSIFICATION	6.8402598805829515E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999375827896	WITHOUT_CLASSIFICATION	6.241721038006365E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999993748263097	WITHOUT_CLASSIFICATION	6.251736901868195E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999942583291699	WITHOUT_CLASSIFICATION	5.74167083010546E-6	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999995405617849	WITHOUT_CLASSIFICATION	4.594382150577464E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999994773096407	WITHOUT_CLASSIFICATION	5.226903594089645E-7	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997511954329	WITHOUT_CLASSIFICATION	2.488045671065683E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999076720978	WITHOUT_CLASSIFICATION	9.232790220516995E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999651803414	WITHOUT_CLASSIFICATION	3.481965849711636E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997291592673	WITHOUT_CLASSIFICATION	2.708407327511823E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999168855549	WITHOUT_CLASSIFICATION	8.311444508506607E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999683039157	WITHOUT_CLASSIFICATION	3.1696084305551834E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999305467973303	WITHOUT_CLASSIFICATION	6.945320266978189E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.999999541046479	WITHOUT_CLASSIFICATION	4.5895352102421834E-7	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999816385203	WITHOUT_CLASSIFICATION	1.8361479673756898E-8	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999926711828775	WITHOUT_CLASSIFICATION	7.328817122528878E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999996735190516	WITHOUT_CLASSIFICATION	3.264809483656107E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999247372013006	WITHOUT_CLASSIFICATION	7.526279869938106E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999987666318276	WITHOUT_CLASSIFICATION	1.2333681723367497E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998307706298	WITHOUT_CLASSIFICATION	1.6922937009597567E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999435008413	WITHOUT_CLASSIFICATION	5.6499158623238345E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.999999970804521	WITHOUT_CLASSIFICATION	2.9195479017947276E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998106675052	WITHOUT_CLASSIFICATION	1.8933249479504313E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999905240048452	WITHOUT_CLASSIFICATION	9.475995154709111E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999996318269008	WITHOUT_CLASSIFICATION	3.681730992448065E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999996527001098	WITHOUT_CLASSIFICATION	3.4729989022269827E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999972328782465	WITHOUT_CLASSIFICATION	2.7671217535915515E-6	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999961977782353	WITHOUT_CLASSIFICATION	3.8022217647442078E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996278224138	WITHOUT_CLASSIFICATION	3.7217758621578685E-7	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996852816369	WITHOUT_CLASSIFICATION	3.147183631121432E-7	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999977368433194	WITHOUT_CLASSIFICATION	2.2631566806685552E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999566552238962	WITHOUT_CLASSIFICATION	4.334477610371929E-5	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999983471806398	WITHOUT_CLASSIFICATION	1.6528193601176302E-6	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999985715296548	WITHOUT_CLASSIFICATION	1.428470345128514E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9981883866788243	WITHOUT_CLASSIFICATION	0.0018116133211758137	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999974106927312	WITHOUT_CLASSIFICATION	2.589307268773844E-6	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999981093911549	WITHOUT_CLASSIFICATION	1.8906088450366077E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999981475142458	WITHOUT_CLASSIFICATION	1.8524857542627783E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999566552238962	WITHOUT_CLASSIFICATION	4.334477610371929E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999915245199019	WITHOUT_CLASSIFICATION	8.475480098127116E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999435008413	WITHOUT_CLASSIFICATION	5.6499158623238345E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999859813907706	WITHOUT_CLASSIFICATION	1.401860922937986E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998307706298	WITHOUT_CLASSIFICATION	1.6922937009597567E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999451425625	WITHOUT_CLASSIFICATION	5.485743749985263E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999513822561464	WITHOUT_CLASSIFICATION	4.8617743853489545E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999485699053023	WITHOUT_CLASSIFICATION	5.143009469766656E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997511954329	WITHOUT_CLASSIFICATION	2.488045671065683E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999076720978	WITHOUT_CLASSIFICATION	9.232790220516995E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999651803414	WITHOUT_CLASSIFICATION	3.481965849711636E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999973374192086	WITHOUT_CLASSIFICATION	2.662580791390662E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999988318180194	WITHOUT_CLASSIFICATION	1.1681819805662684E-6	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999995990831868	WITHOUT_CLASSIFICATION	4.009168131473104E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998307706298	WITHOUT_CLASSIFICATION	1.6922937009597567E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999451425625	WITHOUT_CLASSIFICATION	5.485743749985263E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999566552238962	WITHOUT_CLASSIFICATION	4.334477610371929E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997291592673	WITHOUT_CLASSIFICATION	2.708407327511823E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999168855549	WITHOUT_CLASSIFICATION	8.311444508506607E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999683039157	WITHOUT_CLASSIFICATION	3.1696084305551834E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995950015503	WITHOUT_CLASSIFICATION	4.049984496080041E-7	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997957540866	WITHOUT_CLASSIFICATION	2.042459134751029E-7	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999932488607757	WITHOUT_CLASSIFICATION	6.751139224364393E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998033496121	WITHOUT_CLASSIFICATION	1.9665038784064045E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999969091611849	WITHOUT_CLASSIFICATION	3.0908388151029518E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999999962969509	WITHOUT_CLASSIFICATION	3.703049112235005E-8	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999363506827106	WITHOUT_CLASSIFICATION	6.364931728939109E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.99998545562338	WITHOUT_CLASSIFICATION	1.4544376619905074E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998964779760208	WITHOUT_CLASSIFICATION	1.0352202397926477E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999960983563151	WITHOUT_CLASSIFICATION	3.90164368490635E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.99999998834294	WITHOUT_CLASSIFICATION	1.165705997742834E-8	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998084207545	WITHOUT_CLASSIFICATION	1.915792455108705E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718376978267	WITHOUT_CLASSIFICATION	2.8162302173193825E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731644360836	WITHOUT_CLASSIFICATION	2.6835563916395144E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990928519982	WITHOUT_CLASSIFICATION	9.071480018031849E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998084207545	WITHOUT_CLASSIFICATION	1.915792455108705E-7	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999205626502	WITHOUT_CLASSIFICATION	7.94373498317808E-8	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997738145905	WITHOUT_CLASSIFICATION	2.2618540961767126E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999446634551	WITHOUT_CLASSIFICATION	5.533654489938075E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939476551407	WITHOUT_CLASSIFICATION	6.052344859311443E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999995634141474	WITHOUT_CLASSIFICATION	4.3658585253001806E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999643963218385	WITHOUT_CLASSIFICATION	3.5603678161599215E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991043122215	WITHOUT_CLASSIFICATION	8.956877784602515E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974531706878	WITHOUT_CLASSIFICATION	2.54682931216285E-6	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999951228346	WITHOUT_CLASSIFICATION	4.877165538274205E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999981482239623	WITHOUT_CLASSIFICATION	1.8517760378304095E-6	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999587336178	WITHOUT_CLASSIFICATION	4.126638211058265E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999870890015	WITHOUT_CLASSIFICATION	1.2910998501792292E-7	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999933543342606	WITHOUT_CLASSIFICATION	6.645665739349422E-6	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999262899131	WITHOUT_CLASSIFICATION	7.371008690303222E-8	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999268476036	WITHOUT_CLASSIFICATION	7.315239634230726E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999995672237019	WITHOUT_CLASSIFICATION	4.3277629804151627E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999971252578	WITHOUT_CLASSIFICATION	2.874742241102538E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999111604676	WITHOUT_CLASSIFICATION	8.883953240106507E-8	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999981798598424	WITHOUT_CLASSIFICATION	1.8201401574764154E-6	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999994870672881	WITHOUT_CLASSIFICATION	5.129327119641674E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999916565052525	WITHOUT_CLASSIFICATION	8.343494747436986E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998850672257	WITHOUT_CLASSIFICATION	1.1493277434282978E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999965569214633	WITHOUT_CLASSIFICATION	3.4430785367659933E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988697665071	WITHOUT_CLASSIFICATION	1.130233492826848E-6	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998730196754	WITHOUT_CLASSIFICATION	1.2698032466048892E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993189058967	WITHOUT_CLASSIFICATION	6.810941032744886E-7	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999953647784678	WITHOUT_CLASSIFICATION	4.635221532117952E-6	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999982499162194	WITHOUT_CLASSIFICATION	1.7500837806360476E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988829192773	WITHOUT_CLASSIFICATION	1.1170807227925681E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991830416494	WITHOUT_CLASSIFICATION	8.169583505665984E-7	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994724042739	WITHOUT_CLASSIFICATION	5.275957260284626E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997688216079	WITHOUT_CLASSIFICATION	2.3117839211263286E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999978993746804	WITHOUT_CLASSIFICATION	2.1006253196992417E-6	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999945310755426	WITHOUT_CLASSIFICATION	5.4689244574136786E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995864794711	WITHOUT_CLASSIFICATION	4.1352052890163764E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999995300255433	WITHOUT_CLASSIFICATION	4.6997445663790314E-7	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988583200452	WITHOUT_CLASSIFICATION	1.141679954824327E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993270982122	WITHOUT_CLASSIFICATION	6.729017877838353E-7	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999998970202629	WITHOUT_CLASSIFICATION	1.0297973710923416E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999974175145893	WITHOUT_CLASSIFICATION	2.5824854107288313E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990989345504	WITHOUT_CLASSIFICATION	9.01065449452997E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999992369055843	WITHOUT_CLASSIFICATION	7.630944156111202E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999980252032908	WITHOUT_CLASSIFICATION	1.9747967092264894E-6	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999968314879295	WITHOUT_CLASSIFICATION	3.168512070568601E-6	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999964525317157	WITHOUT_CLASSIFICATION	3.5474682842848606E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999386476353	WITHOUT_CLASSIFICATION	6.135236471162494E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999998773447374	WITHOUT_CLASSIFICATION	1.2265526260451356E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999994906933539	WITHOUT_CLASSIFICATION	5.093066461852056E-7	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999807443077	WITHOUT_CLASSIFICATION	1.9255692350257367E-8	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999956185619673	WITHOUT_CLASSIFICATION	4.3814380327565885E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999949912917845	WITHOUT_CLASSIFICATION	5.008708215539864E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997877941122	WITHOUT_CLASSIFICATION	2.1220588775881775E-7	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999969708298592	WITHOUT_CLASSIFICATION	3.029170140794713E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999990561196898	WITHOUT_CLASSIFICATION	9.438803101908787E-7	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999965187214119	WITHOUT_CLASSIFICATION	3.4812785880544882E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999811323598521	WITHOUT_CLASSIFICATION	1.8867640147917345E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999491710428766	WITHOUT_CLASSIFICATION	5.082895712335165E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998908156867586	WITHOUT_CLASSIFICATION	1.0918431324133873E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999614563675	WITHOUT_CLASSIFICATION	3.854363252001355E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999998240008487	WITHOUT_CLASSIFICATION	1.7599915129206073E-6	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998505539462	WITHOUT_CLASSIFICATION	1.4944605372624383E-7	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999994534340987	WITHOUT_CLASSIFICATION	5.465659013343447E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999994667725531	WITHOUT_CLASSIFICATION	5.332274468654575E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997171729016	WITHOUT_CLASSIFICATION	2.828270983957652E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999331539595	WITHOUT_CLASSIFICATION	6.684604048402147E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999979551108628	WITHOUT_CLASSIFICATION	2.0448891373470747E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999993044335259	WITHOUT_CLASSIFICATION	6.955664740430273E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999307345789	WITHOUT_CLASSIFICATION	6.926542112055018E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995372124869	WITHOUT_CLASSIFICATION	4.6278751308286784E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999998207689524	WITHOUT_CLASSIFICATION	1.7923104760665836E-6	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999979669003	WITHOUT_CLASSIFICATION	2.0330996914904848E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999997305999596	WITHOUT_CLASSIFICATION	2.694000404171717E-7	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999992678914791	WITHOUT_CLASSIFICATION	7.3210852089067045E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999978234375702	WITHOUT_CLASSIFICATION	2.1765624297862E-6	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999993434924931	WITHOUT_CLASSIFICATION	6.565075068725615E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999994992488881	WITHOUT_CLASSIFICATION	5.007511118954502E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999650191975	WITHOUT_CLASSIFICATION	3.498080257001539E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999998311385642	WITHOUT_CLASSIFICATION	1.6886143590079594E-7	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999949673348008	WITHOUT_CLASSIFICATION	5.032665199286732E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999948820228174	WITHOUT_CLASSIFICATION	5.117977182603367E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999748455052887	WITHOUT_CLASSIFICATION	2.5154494711262556E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999969282568696	WITHOUT_CLASSIFICATION	3.0717431304378925E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999949834269332	WITHOUT_CLASSIFICATION	5.016573066826167E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999987675744667	WITHOUT_CLASSIFICATION	1.2324255332718963E-6	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999320587771	WITHOUT_CLASSIFICATION	6.794122278330991E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999522193024	WITHOUT_CLASSIFICATION	4.77806976335107E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999003156995	WITHOUT_CLASSIFICATION	9.968430044352367E-8	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999977755918145	WITHOUT_CLASSIFICATION	2.2244081856104437E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999990051291028	WITHOUT_CLASSIFICATION	9.948708971513747E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999994306321921	WITHOUT_CLASSIFICATION	5.693678079303774E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999987517067798	WITHOUT_CLASSIFICATION	1.2482932201446054E-6	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999984723999779	WITHOUT_CLASSIFICATION	1.5276000222138352E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999886913272892	WITHOUT_CLASSIFICATION	1.13086727107357E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992454332403	WITHOUT_CLASSIFICATION	7.545667597476115E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998435245393668	WITHOUT_CLASSIFICATION	1.564754606331515E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999973375143195	WITHOUT_CLASSIFICATION	2.662485680512405E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999992631163275	WITHOUT_CLASSIFICATION	7.368836726518834E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999984164533569	WITHOUT_CLASSIFICATION	1.5835466431635403E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993584810387	WITHOUT_CLASSIFICATION	6.415189613667073E-7	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999991222446103	WITHOUT_CLASSIFICATION	8.777553898547362E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999978525786328	WITHOUT_CLASSIFICATION	2.1474213672065577E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998374205968458	WITHOUT_CLASSIFICATION	1.6257940315421115E-4	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999984048898916	WITHOUT_CLASSIFICATION	1.595110108374591E-6	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999994378229445	WITHOUT_CLASSIFICATION	5.621770554109849E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999973528416785	WITHOUT_CLASSIFICATION	2.6471583216406455E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999981507827286	WITHOUT_CLASSIFICATION	1.849217271473008E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999999050311	WITHOUT_CLASSIFICATION	9.496901443039158E-11	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999889048306722	WITHOUT_CLASSIFICATION	1.1095169327812898E-5	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999628243400939	WITHOUT_CLASSIFICATION	3.717565990621222E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999887956948608	WITHOUT_CLASSIFICATION	1.1204305139251807E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999889048306722	WITHOUT_CLASSIFICATION	1.1095169327812898E-5	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999993575013423	WITHOUT_CLASSIFICATION	6.424986577900983E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.999999593892036	WITHOUT_CLASSIFICATION	4.0610796410842917E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999823834057997	WITHOUT_CLASSIFICATION	1.7616594200320057E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999680656214541	WITHOUT_CLASSIFICATION	3.193437854584619E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999999139734523	WITHOUT_CLASSIFICATION	8.602654762457535E-8	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997893979852	WITHOUT_CLASSIFICATION	2.1060201486523676E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998734318045313	WITHOUT_CLASSIFICATION	1.2656819546879756E-4	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999988051871372	WITHOUT_CLASSIFICATION	1.1948128627939984E-6	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999439420041	WITHOUT_CLASSIFICATION	5.6057995841309684E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999346223682561	WITHOUT_CLASSIFICATION	6.537763174385583E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999997717410025	WITHOUT_CLASSIFICATION	2.28258997447673E-7	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999964581253471	WITHOUT_CLASSIFICATION	3.5418746527726443E-6	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999971900269545	WITHOUT_CLASSIFICATION	2.8099730455790916E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999945816187702	WITHOUT_CLASSIFICATION	5.418381229786181E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983627338062	WITHOUT_CLASSIFICATION	1.6372661938011285E-6	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999997254252246	WITHOUT_CLASSIFICATION	2.7457477536069475E-7	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999858737469498	WITHOUT_CLASSIFICATION	1.4126253050075582E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999858737469498	WITHOUT_CLASSIFICATION	1.4126253050075582E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999669221751	WITHOUT_CLASSIFICATION	3.3077824898740616E-7	TEST
optimization	WITHOUT_CLASSIFICATION	0.9998629877729838	WITHOUT_CLASSIFICATION	1.3701222701619224E-4	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999478874365132	WITHOUT_CLASSIFICATION	5.211256348691897E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999909189820949	WITHOUT_CLASSIFICATION	9.081017905006997E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999994300818098	WITHOUT_CLASSIFICATION	5.699181901264302E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999859505839354	WITHOUT_CLASSIFICATION	1.4049416064767709E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999936779507644	WITHOUT_CLASSIFICATION	6.322049235539704E-6	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999395587296	WITHOUT_CLASSIFICATION	6.044127044323396E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999964134716822	WITHOUT_CLASSIFICATION	3.5865283178634014E-6	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999858533333508	WITHOUT_CLASSIFICATION	1.414666664934958E-5	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999995889503982	WITHOUT_CLASSIFICATION	4.1104960173815157E-7	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999930109367	WITHOUT_CLASSIFICATION	6.989063285281147E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998358986283	WITHOUT_CLASSIFICATION	1.6410137172237063E-7	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999997815669162	WITHOUT_CLASSIFICATION	2.1843308377773455E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999870702745	WITHOUT_CLASSIFICATION	1.2929725545924339E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999965569214633	WITHOUT_CLASSIFICATION	3.4430785367659933E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999921794784591	WITHOUT_CLASSIFICATION	7.82052154079563E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999461713335	WITHOUT_CLASSIFICATION	5.38286665862819E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999998129305462	WITHOUT_CLASSIFICATION	1.8706945380008434E-7	TEST
do the test	WITHOUT_CLASSIFICATION	0.998670544694097	WITHOUT_CLASSIFICATION	0.0013294553059030243	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999603087175	WITHOUT_CLASSIFICATION	3.969128260337674E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999971297684764	WITHOUT_CLASSIFICATION	2.870231523532543E-6	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999084871674	WITHOUT_CLASSIFICATION	9.151283267263995E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999441538068	WITHOUT_CLASSIFICATION	5.5846193306717904E-8	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999811348944	WITHOUT_CLASSIFICATION	1.8865105536063972E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999752298776	WITHOUT_CLASSIFICATION	2.4770122357410878E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999990228503339	WITHOUT_CLASSIFICATION	9.771496660383495E-7	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999991110112645	WITHOUT_CLASSIFICATION	8.889887355278506E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999998182818456	WITHOUT_CLASSIFICATION	1.8171815439953222E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999910609913675	WITHOUT_CLASSIFICATION	8.939008632509203E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998457200746	WITHOUT_CLASSIFICATION	1.5427992548901949E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998338125642	WITHOUT_CLASSIFICATION	1.6618743575660508E-7	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999798224295225	WITHOUT_CLASSIFICATION	2.0177570477487024E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997968121338	WITHOUT_CLASSIFICATION	2.031878661914638E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999998702412926	WITHOUT_CLASSIFICATION	1.2975870742817104E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999301452561	WITHOUT_CLASSIFICATION	6.985474388772147E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999990982799648	WITHOUT_CLASSIFICATION	9.017200351470881E-7	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999999315342621	WITHOUT_CLASSIFICATION	6.846573784487803E-8	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999984828776802	WITHOUT_CLASSIFICATION	1.5171223197919921E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999924551799768	WITHOUT_CLASSIFICATION	7.544820023285865E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.999986360629016	WITHOUT_CLASSIFICATION	1.3639370984001468E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999979629593575	WITHOUT_CLASSIFICATION	2.037040642436381E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999997656508142	WITHOUT_CLASSIFICATION	2.3434918578669213E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999996322543385	WITHOUT_CLASSIFICATION	3.6774566152117967E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999936522973667	WITHOUT_CLASSIFICATION	6.3477026332840965E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999996780015205	WITHOUT_CLASSIFICATION	3.2199847950118624E-6	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896371918924	WITHOUT_CLASSIFICATION	1.03628081076477E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957070280209	WITHOUT_CLASSIFICATION	4.292971979182593E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933771290581	WITHOUT_CLASSIFICATION	6.622870941810679E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998650546021	WITHOUT_CLASSIFICATION	1.34945397953354E-7	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999996568543935	WITHOUT_CLASSIFICATION	3.43145606481411E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992760334991	WITHOUT_CLASSIFICATION	7.239665008346666E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999990933217568	WITHOUT_CLASSIFICATION	9.066782431475397E-7	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999973491016654	WITHOUT_CLASSIFICATION	2.6508983347039043E-6	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876083450283	WITHOUT_CLASSIFICATION	1.2391654971735578E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999973491016654	WITHOUT_CLASSIFICATION	2.6508983347039043E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999990750077186	WITHOUT_CLASSIFICATION	9.24992281284889E-7	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999987036387058	WITHOUT_CLASSIFICATION	1.296361294119506E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.999985596096315	WITHOUT_CLASSIFICATION	1.440390368500791E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992857518645	WITHOUT_CLASSIFICATION	7.142481355580388E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999922375385918	WITHOUT_CLASSIFICATION	7.762461408225978E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998654504589187	WITHOUT_CLASSIFICATION	1.3454954108128948E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997137608492	WITHOUT_CLASSIFICATION	2.862391507642251E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999990350086279	WITHOUT_CLASSIFICATION	9.649913721614846E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999322508061	WITHOUT_CLASSIFICATION	6.774919398655095E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999889567572756	WITHOUT_CLASSIFICATION	1.1043242724332908E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999998221821499	WITHOUT_CLASSIFICATION	1.7781785000343188E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999998547778318	WITHOUT_CLASSIFICATION	1.4522216815464032E-7	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999927382706265	WITHOUT_CLASSIFICATION	7.261729373387481E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999636854520314	WITHOUT_CLASSIFICATION	3.631454796861358E-5	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999998545485724	WITHOUT_CLASSIFICATION	1.4545142759137155E-7	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999613267393	WITHOUT_CLASSIFICATION	3.8673260653614153E-8	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999868270339987	WITHOUT_CLASSIFICATION	1.3172966001238013E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999868270339987	WITHOUT_CLASSIFICATION	1.3172966001238013E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999988562753354	WITHOUT_CLASSIFICATION	1.143724664673057E-6	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999985470198968	WITHOUT_CLASSIFICATION	1.4529801031925518E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999065279127	WITHOUT_CLASSIFICATION	9.347208730970315E-8	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999990239748403	WITHOUT_CLASSIFICATION	9.760251597049152E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999982299866755	WITHOUT_CLASSIFICATION	1.7700133245527289E-6	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999978062413628	WITHOUT_CLASSIFICATION	2.1937586372533237E-6	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999983596855354	WITHOUT_CLASSIFICATION	1.6403144646801638E-6	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999930294112503	WITHOUT_CLASSIFICATION	6.970588749713223E-6	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999958542577052	WITHOUT_CLASSIFICATION	4.145742294751308E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999810730555	WITHOUT_CLASSIFICATION	1.8926944394176996E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997056337764	WITHOUT_CLASSIFICATION	2.943662235858663E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997829262228	WITHOUT_CLASSIFICATION	2.1707377710974793E-7	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999994836291016	WITHOUT_CLASSIFICATION	5.163708984449689E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999971712021319	WITHOUT_CLASSIFICATION	2.8287978680179633E-6	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999995666111432	WITHOUT_CLASSIFICATION	4.3338885675228503E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999652793498	WITHOUT_CLASSIFICATION	3.472065019518813E-7	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999195953276	WITHOUT_CLASSIFICATION	8.040467230257974E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999988519897155	WITHOUT_CLASSIFICATION	1.1480102845363464E-6	TEST
use the current version	WITHOUT_CLASSIFICATION	0.999999808480649	WITHOUT_CLASSIFICATION	1.9151935113039573E-7	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999969994641	WITHOUT_CLASSIFICATION	3.000535841761221E-9	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999979228939991	WITHOUT_CLASSIFICATION	2.077106000801066E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998446430512	WITHOUT_CLASSIFICATION	1.5535694876949304E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999931227314	WITHOUT_CLASSIFICATION	6.877268607125075E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999746125413	WITHOUT_CLASSIFICATION	2.5387458703961603E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999975581824868	WITHOUT_CLASSIFICATION	2.4418175131313815E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999987857149396	WITHOUT_CLASSIFICATION	1.2142850604195824E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997510768323	WITHOUT_CLASSIFICATION	2.489231676569491E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999983383829443	WITHOUT_CLASSIFICATION	1.661617055644204E-6	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999013794251101	WITHOUT_CLASSIFICATION	9.862057488977382E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998460160456	WITHOUT_CLASSIFICATION	1.539839543826384E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999906138450269	WITHOUT_CLASSIFICATION	9.386154973181922E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999966703721964	WITHOUT_CLASSIFICATION	3.3296278037143453E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999844014945528	WITHOUT_CLASSIFICATION	1.5598505447195016E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999964613293341	WITHOUT_CLASSIFICATION	3.5386706659245342E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999998973018878	WITHOUT_CLASSIFICATION	1.0269811220515934E-6	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999544339518	WITHOUT_CLASSIFICATION	4.55660481757688E-8	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999446993068	WITHOUT_CLASSIFICATION	5.5300693356821686E-8	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999927292238524	WITHOUT_CLASSIFICATION	7.270776147658804E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999069727767	WITHOUT_CLASSIFICATION	9.302722327246178E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999999796198836	WITHOUT_CLASSIFICATION	2.0380116383609015E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999933773677	WITHOUT_CLASSIFICATION	6.62263230015757E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966891113896	WITHOUT_CLASSIFICATION	3.3108886104353134E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999893905981359	WITHOUT_CLASSIFICATION	1.0609401864078167E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999937835687	WITHOUT_CLASSIFICATION	6.216431287931583E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999975478926	WITHOUT_CLASSIFICATION	2.4521073726770027E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999995963677384	WITHOUT_CLASSIFICATION	4.03632261552798E-7	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999997661899307	WITHOUT_CLASSIFICATION	2.3381006932014842E-7	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999521119708	WITHOUT_CLASSIFICATION	4.7888029162456675E-8	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997523530951	WITHOUT_CLASSIFICATION	2.4764690483174195E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999984202498298	WITHOUT_CLASSIFICATION	1.579750170234446E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935581238085	WITHOUT_CLASSIFICATION	6.441876191462171E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999959036676856	WITHOUT_CLASSIFICATION	4.096332314350536E-6	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999979271161319	WITHOUT_CLASSIFICATION	2.0728838680668597E-6	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999989315574951	WITHOUT_CLASSIFICATION	1.0684425048057403E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999965411989328	WITHOUT_CLASSIFICATION	3.4588010671643087E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999915245199019	WITHOUT_CLASSIFICATION	8.475480098127116E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999915245199019	WITHOUT_CLASSIFICATION	8.475480098127116E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999534369764445	WITHOUT_CLASSIFICATION	4.656302355561866E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998670592293435	WITHOUT_CLASSIFICATION	1.3294077065651778E-4	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999431029679	WITHOUT_CLASSIFICATION	5.689703207918004E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999992988614992	WITHOUT_CLASSIFICATION	7.011385007872749E-7	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998652169743	WITHOUT_CLASSIFICATION	1.347830257357184E-7	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999997400343894	WITHOUT_CLASSIFICATION	2.599656105741558E-7	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998404870046	WITHOUT_CLASSIFICATION	1.595129954017399E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999583551075	WITHOUT_CLASSIFICATION	4.164489259089149E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999999196093982	WITHOUT_CLASSIFICATION	8.039060187373625E-8	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999976496608928	WITHOUT_CLASSIFICATION	2.350339107201453E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999559268858	WITHOUT_CLASSIFICATION	4.407311422810234E-8	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999990798456955	WITHOUT_CLASSIFICATION	9.201543045244885E-7	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998131343053	WITHOUT_CLASSIFICATION	1.8686569467905382E-7	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999726194125671	WITHOUT_CLASSIFICATION	2.7380587432870405E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999214411172	WITHOUT_CLASSIFICATION	7.855888283474261E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999791880764383	WITHOUT_CLASSIFICATION	2.0811923561750278E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999544221369793	WITHOUT_CLASSIFICATION	4.557786302076393E-5	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.99999997960112	WITHOUT_CLASSIFICATION	2.039888000104901E-8	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999806531465427	WITHOUT_CLASSIFICATION	1.9346853457187017E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999987658466882	WITHOUT_CLASSIFICATION	1.234153311790885E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999986980395728	WITHOUT_CLASSIFICATION	1.301960427268501E-6	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999669348679	WITHOUT_CLASSIFICATION	3.30651321677416E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999943693743227	WITHOUT_CLASSIFICATION	5.630625677285183E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999885488933542	WITHOUT_CLASSIFICATION	1.1451106645787898E-4	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999998733931588	WITHOUT_CLASSIFICATION	1.2660684125891436E-7	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999997520584667	WITHOUT_CLASSIFICATION	2.479415333169586E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999973174307779	WITHOUT_CLASSIFICATION	2.6825692220129917E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999989192288554	WITHOUT_CLASSIFICATION	1.0807711445833787E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999138326354773	WITHOUT_CLASSIFICATION	8.616736452277074E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999996973668495	WITHOUT_CLASSIFICATION	3.026331505789746E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999885488933542	WITHOUT_CLASSIFICATION	1.1451106645787898E-4	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999995098612392	WITHOUT_CLASSIFICATION	4.901387608376842E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999932992569	WITHOUT_CLASSIFICATION	6.700743111436454E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9995679002628113	WITHOUT_CLASSIFICATION	4.3209973718873895E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999931528209075	WITHOUT_CLASSIFICATION	6.847179092425188E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999212855618	WITHOUT_CLASSIFICATION	7.871443820819882E-8	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999907709943124	WITHOUT_CLASSIFICATION	9.229005687498005E-6	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997290980456	WITHOUT_CLASSIFICATION	2.709019544629831E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996023264341	WITHOUT_CLASSIFICATION	3.9767356582131555E-7	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999954479304728	WITHOUT_CLASSIFICATION	4.552069527184686E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999931528209075	WITHOUT_CLASSIFICATION	6.847179092425188E-6	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999935214513745	WITHOUT_CLASSIFICATION	6.478548625434561E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996023264341	WITHOUT_CLASSIFICATION	3.9767356582131555E-7	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999586252166	WITHOUT_CLASSIFICATION	4.13747832501863E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999762492904262	WITHOUT_CLASSIFICATION	2.375070957387451E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999375297798	WITHOUT_CLASSIFICATION	6.247022023859844E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997056337764	WITHOUT_CLASSIFICATION	2.943662235858663E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999818641594	WITHOUT_CLASSIFICATION	1.8135840597393517E-7	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999969548666323	WITHOUT_CLASSIFICATION	3.0451333676287008E-6	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999991303197286	WITHOUT_CLASSIFICATION	8.696802714666835E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999996599417533	WITHOUT_CLASSIFICATION	3.400582466261222E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999971532632845	WITHOUT_CLASSIFICATION	2.8467367154165755E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999950951941837	WITHOUT_CLASSIFICATION	4.904805816242842E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999747172615927	WITHOUT_CLASSIFICATION	2.5282738407266104E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999953171043948	WITHOUT_CLASSIFICATION	4.6828956052054E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999942622387786	WITHOUT_CLASSIFICATION	5.737761221432903E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999999129304988	WITHOUT_CLASSIFICATION	8.70695011991799E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99995200854446	WITHOUT_CLASSIFICATION	4.799145554005607E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999606440328	WITHOUT_CLASSIFICATION	3.93559672055798E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999909591127	WITHOUT_CLASSIFICATION	9.040887312071522E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999972384534688	WITHOUT_CLASSIFICATION	2.761546531319704E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999686857389	WITHOUT_CLASSIFICATION	3.13142611027411E-8	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999947458367796	WITHOUT_CLASSIFICATION	5.254163220445011E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999911469013308	WITHOUT_CLASSIFICATION	8.85309866916712E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999991396478973	WITHOUT_CLASSIFICATION	8.603521025660184E-7	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995965008228	WITHOUT_CLASSIFICATION	4.0349917726242765E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999988086231965	WITHOUT_CLASSIFICATION	1.1913768034741463E-6	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999990628998664	WITHOUT_CLASSIFICATION	9.371001335385744E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999553921097	WITHOUT_CLASSIFICATION	4.460789038924092E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999404836394	WITHOUT_CLASSIFICATION	5.951636075699109E-8	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999982054296343	WITHOUT_CLASSIFICATION	1.7945703656967497E-5	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999996458999252	WITHOUT_CLASSIFICATION	3.5410007485865655E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9997244326729767	WITHOUT_CLASSIFICATION	2.7556732702335653E-4	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999937625464198	WITHOUT_CLASSIFICATION	6.237453580245121E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977410398209	WITHOUT_CLASSIFICATION	2.258960179117482E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974534041356	WITHOUT_CLASSIFICATION	2.5465958643989603E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999999218604672	WITHOUT_CLASSIFICATION	7.813953292632456E-8	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999961244550467	WITHOUT_CLASSIFICATION	3.8755449533659575E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999988910552804	WITHOUT_CLASSIFICATION	1.108944719612593E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999977585042	WITHOUT_CLASSIFICATION	2.2414956743205423E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999989428975771	WITHOUT_CLASSIFICATION	1.0571024229433197E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999984990942616	WITHOUT_CLASSIFICATION	1.5009057382920775E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999445126092	WITHOUT_CLASSIFICATION	5.548739082860482E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999998789020512	WITHOUT_CLASSIFICATION	1.2109794880260023E-7	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999969292063733	WITHOUT_CLASSIFICATION	3.0707936267617213E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999958360541364	WITHOUT_CLASSIFICATION	4.16394586352065E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999982813559144	WITHOUT_CLASSIFICATION	1.718644085588348E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999991843071273	WITHOUT_CLASSIFICATION	8.156928726254781E-7	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999655925996	WITHOUT_CLASSIFICATION	3.440740042635427E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999989675876627	WITHOUT_CLASSIFICATION	1.032412337300393E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997329458667	WITHOUT_CLASSIFICATION	2.6705413332350746E-7	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999398760525531	WITHOUT_CLASSIFICATION	6.012394744695741E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999900429556053	WITHOUT_CLASSIFICATION	9.957044394559407E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999960090747553	WITHOUT_CLASSIFICATION	3.990925244760954E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999999517020913	WITHOUT_CLASSIFICATION	4.829790868833254E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999981612987382	WITHOUT_CLASSIFICATION	1.8387012616882895E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999987428848439	WITHOUT_CLASSIFICATION	1.2571151560011216E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999596346235	WITHOUT_CLASSIFICATION	4.036537654490847E-8	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999997314737403	WITHOUT_CLASSIFICATION	2.685262597038594E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999938756454	WITHOUT_CLASSIFICATION	6.1243545768640425E-9	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999979000891784	WITHOUT_CLASSIFICATION	2.0999108216885562E-6	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999874227037489	WITHOUT_CLASSIFICATION	1.257729625111217E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999995441548465	WITHOUT_CLASSIFICATION	4.558451535036476E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977410398209	WITHOUT_CLASSIFICATION	2.258960179117482E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999422360774	WITHOUT_CLASSIFICATION	5.776392265667763E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999926244849	WITHOUT_CLASSIFICATION	7.375515011074284E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999628122825438	WITHOUT_CLASSIFICATION	3.7187717456290736E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999408877622352	WITHOUT_CLASSIFICATION	5.911223776463568E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996548935656	WITHOUT_CLASSIFICATION	3.451064344870157E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999999055413221	WITHOUT_CLASSIFICATION	9.445867788223663E-8	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821677560813	WITHOUT_CLASSIFICATION	1.7832243918741767E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999595704026	WITHOUT_CLASSIFICATION	4.0429597402660106E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999182224766	WITHOUT_CLASSIFICATION	8.17775234111203E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999963557001064	WITHOUT_CLASSIFICATION	3.6442998935379467E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999823261396	WITHOUT_CLASSIFICATION	1.7673860425067975E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9992655651112232	WITHOUT_CLASSIFICATION	7.344348887766754E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999988825350147	WITHOUT_CLASSIFICATION	1.1174649852257212E-6	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999924989158767	WITHOUT_CLASSIFICATION	7.501084123284493E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999990750077186	WITHOUT_CLASSIFICATION	9.24992281284889E-7	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999875150766	WITHOUT_CLASSIFICATION	1.2484923425821097E-8	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999992446926	WITHOUT_CLASSIFICATION	7.55307302297778E-10	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999988284093715	WITHOUT_CLASSIFICATION	1.171590628422006E-6	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999965226912084	WITHOUT_CLASSIFICATION	3.4773087915631926E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999896975741	WITHOUT_CLASSIFICATION	1.0302425852493769E-8	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986148562386	WITHOUT_CLASSIFICATION	1.3851437613502438E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986148562386	WITHOUT_CLASSIFICATION	1.3851437613502438E-6	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999998626324113	WITHOUT_CLASSIFICATION	1.3736758869881688E-6	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999992969573045	WITHOUT_CLASSIFICATION	7.030426955753498E-7	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998034547957	WITHOUT_CLASSIFICATION	1.9654520426115835E-7	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999931203930346	WITHOUT_CLASSIFICATION	6.879606965393522E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999997946044927	WITHOUT_CLASSIFICATION	2.0539550724667858E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999252328934	WITHOUT_CLASSIFICATION	7.476710668214795E-8	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999959204758519	WITHOUT_CLASSIFICATION	4.0795241481009286E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999994720666472	WITHOUT_CLASSIFICATION	5.279333527621493E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999994720666472	WITHOUT_CLASSIFICATION	5.279333527621493E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999801472512196	WITHOUT_CLASSIFICATION	1.9852748780342765E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999993176181909	WITHOUT_CLASSIFICATION	6.823818090926331E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999996502624686	WITHOUT_CLASSIFICATION	3.497375313821475E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994647054681	WITHOUT_CLASSIFICATION	5.352945318994912E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994647054681	WITHOUT_CLASSIFICATION	5.352945318994912E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994647054681	WITHOUT_CLASSIFICATION	5.352945318994912E-7	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999999669317401	WITHOUT_CLASSIFICATION	3.3068259902037135E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999997500695837	WITHOUT_CLASSIFICATION	2.4993041627432013E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999982180245147	WITHOUT_CLASSIFICATION	1.7819754852104487E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999765417399027	WITHOUT_CLASSIFICATION	2.3458260097274442E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999997589008831	WITHOUT_CLASSIFICATION	2.41099116971189E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999870964553	WITHOUT_CLASSIFICATION	1.2903544828276315E-8	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999740692672	WITHOUT_CLASSIFICATION	2.5930732817005083E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999850998276674	WITHOUT_CLASSIFICATION	1.4900172332728618E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999990650002174	WITHOUT_CLASSIFICATION	9.349997825555427E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999994160456327	WITHOUT_CLASSIFICATION	5.839543672266196E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999933191381416	WITHOUT_CLASSIFICATION	6.680861858336584E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999917838097218	WITHOUT_CLASSIFICATION	8.216190278211572E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999985962733503	WITHOUT_CLASSIFICATION	1.4037266496342636E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998998204292	WITHOUT_CLASSIFICATION	1.001795707667694E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999817771114	WITHOUT_CLASSIFICATION	1.8222888543356546E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999350489256	WITHOUT_CLASSIFICATION	6.495107433499732E-8	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999987607215157	WITHOUT_CLASSIFICATION	1.239278484274368E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999109151153139	WITHOUT_CLASSIFICATION	8.90848846860239E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999109151153139	WITHOUT_CLASSIFICATION	8.90848846860239E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999355297335604	WITHOUT_CLASSIFICATION	6.447026643955985E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999355297335604	WITHOUT_CLASSIFICATION	6.447026643955985E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999936348370485	WITHOUT_CLASSIFICATION	6.365162951505664E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999296732066354	WITHOUT_CLASSIFICATION	7.032679336460778E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999296732066354	WITHOUT_CLASSIFICATION	7.032679336460778E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999471101036747	WITHOUT_CLASSIFICATION	5.2889896325359665E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998703466410156	WITHOUT_CLASSIFICATION	1.2965335898443623E-4	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999043340908	WITHOUT_CLASSIFICATION	9.566590927822973E-8	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986148562386	WITHOUT_CLASSIFICATION	1.3851437613502438E-6	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999999966853771	WITHOUT_CLASSIFICATION	3.314622900222027E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998703466410156	WITHOUT_CLASSIFICATION	1.2965335898443623E-4	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999661288872	WITHOUT_CLASSIFICATION	3.387111273470563E-8	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999978488954259	WITHOUT_CLASSIFICATION	2.151104574105991E-6	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998721049189366	WITHOUT_CLASSIFICATION	1.2789508106337018E-4	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999379218054567	WITHOUT_CLASSIFICATION	6.207819454332825E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999935181296	WITHOUT_CLASSIFICATION	6.481870296369353E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999886637698411	WITHOUT_CLASSIFICATION	1.1336230158956885E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999994596301486	WITHOUT_CLASSIFICATION	5.403698513450005E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999995929216198	WITHOUT_CLASSIFICATION	4.0707838017165087E-7	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999075463964	WITHOUT_CLASSIFICATION	9.24536036201018E-8	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999979957165283	WITHOUT_CLASSIFICATION	2.0042834716717987E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999803722692	WITHOUT_CLASSIFICATION	1.962773076394208E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999783784015355	WITHOUT_CLASSIFICATION	2.1621598464430253E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.999991508933961	WITHOUT_CLASSIFICATION	8.49106603905018E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999816075863364	WITHOUT_CLASSIFICATION	1.8392413663679895E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999995808728598	WITHOUT_CLASSIFICATION	4.191271403400058E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999997880575517	WITHOUT_CLASSIFICATION	2.119424482241548E-7	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999652157292	WITHOUT_CLASSIFICATION	3.4784270847698314E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999850826490265	WITHOUT_CLASSIFICATION	1.4917350973494231E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999850826490265	WITHOUT_CLASSIFICATION	1.4917350973494231E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999987256516891	WITHOUT_CLASSIFICATION	1.2743483108818292E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999977335091479	WITHOUT_CLASSIFICATION	2.2664908520713694E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999990055558226	WITHOUT_CLASSIFICATION	9.944441774595944E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999939477201533	WITHOUT_CLASSIFICATION	6.052279846676304E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999975413761726	WITHOUT_CLASSIFICATION	2.4586238273701972E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999238058981	WITHOUT_CLASSIFICATION	7.61941018184896E-8	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999508970552	WITHOUT_CLASSIFICATION	4.910294470865655E-8	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999956973758276	WITHOUT_CLASSIFICATION	4.302624172389805E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.99999896655766	WITHOUT_CLASSIFICATION	1.0334423400274701E-6	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999754638188	WITHOUT_CLASSIFICATION	2.4536181207681385E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999547570321	WITHOUT_CLASSIFICATION	4.524296790703591E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9992655651112232	WITHOUT_CLASSIFICATION	7.344348887766754E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999732246142	WITHOUT_CLASSIFICATION	2.6775385736551284E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999987667870756	WITHOUT_CLASSIFICATION	1.2332129243686378E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999968998607219	WITHOUT_CLASSIFICATION	3.1001392780824635E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999998097384606	WITHOUT_CLASSIFICATION	1.9026153949508148E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999462301455	WITHOUT_CLASSIFICATION	5.37698544963578E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999462301455	WITHOUT_CLASSIFICATION	5.37698544963578E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999804443955383	WITHOUT_CLASSIFICATION	1.9555604461659577E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999983920752908	WITHOUT_CLASSIFICATION	1.607924709234827E-6	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999973852943935	WITHOUT_CLASSIFICATION	2.614705606394862E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999958815167099	WITHOUT_CLASSIFICATION	4.1184832900509285E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999979119220984	WITHOUT_CLASSIFICATION	2.0880779017105473E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999135357619807	WITHOUT_CLASSIFICATION	8.64642380192341E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999958880261	WITHOUT_CLASSIFICATION	4.111973906371993E-8	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999502443495	WITHOUT_CLASSIFICATION	4.9755650520233514E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999999663469918	WITHOUT_CLASSIFICATION	3.365300820600158E-7	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996560906577	WITHOUT_CLASSIFICATION	3.4390934233916534E-7	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999985314274811	WITHOUT_CLASSIFICATION	1.468572519019738E-6	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999502443495	WITHOUT_CLASSIFICATION	4.9755650520233514E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999091481523	WITHOUT_CLASSIFICATION	9.08518477752022E-8	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999112773615	WITHOUT_CLASSIFICATION	8.872263841454228E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999997673830102	WITHOUT_CLASSIFICATION	2.3261698986758026E-7	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999893737107781	WITHOUT_CLASSIFICATION	1.0626289221940652E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999945783306	WITHOUT_CLASSIFICATION	5.421669486532295E-9	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997930695456	WITHOUT_CLASSIFICATION	2.0693045437180444E-7	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998414460316	WITHOUT_CLASSIFICATION	1.5855396837062111E-7	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999994931950271	WITHOUT_CLASSIFICATION	5.068049729074118E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998751289387	WITHOUT_CLASSIFICATION	1.2487106125286357E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999987578693813	WITHOUT_CLASSIFICATION	1.242130618692811E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999973296542847	WITHOUT_CLASSIFICATION	2.6703457153484524E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999606375675	WITHOUT_CLASSIFICATION	3.9362432497115574E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999752515977	WITHOUT_CLASSIFICATION	2.474840228019268E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999998683832198	WITHOUT_CLASSIFICATION	1.3161678019227981E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999943635120292	WITHOUT_CLASSIFICATION	5.6364879708888725E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999929115979728	WITHOUT_CLASSIFICATION	7.088402027184938E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999895545325427	WITHOUT_CLASSIFICATION	1.044546745728064E-5	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999791738314153	WITHOUT_CLASSIFICATION	2.0826168584733E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999724267706748	WITHOUT_CLASSIFICATION	2.7573229325191525E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998763283158	WITHOUT_CLASSIFICATION	1.236716842308432E-7	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999990957899066	WITHOUT_CLASSIFICATION	9.042100934175113E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999997441865014	WITHOUT_CLASSIFICATION	2.5581349866138444E-7	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999361357254744	WITHOUT_CLASSIFICATION	6.38642745256554E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.999122836542314	WITHOUT_CLASSIFICATION	8.771634576859303E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999996860249782	WITHOUT_CLASSIFICATION	3.1397502169302875E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999552855466869	WITHOUT_CLASSIFICATION	4.471445331301327E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998910503962	WITHOUT_CLASSIFICATION	1.0894960384346887E-7	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999762552563	WITHOUT_CLASSIFICATION	2.374474378787061E-8	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999939718013	WITHOUT_CLASSIFICATION	6.028198694762768E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999930646480749	WITHOUT_CLASSIFICATION	6.935351925095037E-6	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999899485748	WITHOUT_CLASSIFICATION	1.0051425212992944E-8	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999080516002	WITHOUT_CLASSIFICATION	9.194839972542191E-8	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999957017432421	WITHOUT_CLASSIFICATION	4.298256757908301E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999714277494	WITHOUT_CLASSIFICATION	2.857225063148153E-8	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996808655967	WITHOUT_CLASSIFICATION	3.1913440335232516E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999944707758924	WITHOUT_CLASSIFICATION	5.529224107592247E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999992149304	WITHOUT_CLASSIFICATION	7.850695948883189E-9	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999811122898	WITHOUT_CLASSIFICATION	1.8887710210689182E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999968112847388	WITHOUT_CLASSIFICATION	3.18871526109627E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999998949884829	WITHOUT_CLASSIFICATION	1.0501151713053071E-7	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999942514643747	WITHOUT_CLASSIFICATION	5.748535625309601E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999764623383	WITHOUT_CLASSIFICATION	2.3537661698262668E-8	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999318536238	WITHOUT_CLASSIFICATION	6.814637619799105E-8	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998487087988	WITHOUT_CLASSIFICATION	1.5129120126304679E-7	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999989948637094	WITHOUT_CLASSIFICATION	1.0051362906603152E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994934823612	WITHOUT_CLASSIFICATION	5.06517638899498E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999994169969709	WITHOUT_CLASSIFICATION	5.83003029059242E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999749831286449	WITHOUT_CLASSIFICATION	2.501687135516279E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999984910419851	WITHOUT_CLASSIFICATION	1.5089580148562034E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999996259354612	WITHOUT_CLASSIFICATION	3.74064538738481E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942385894058	WITHOUT_CLASSIFICATION	5.761410594076567E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999994206054377	WITHOUT_CLASSIFICATION	5.79394562258847E-7	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999991865388086	WITHOUT_CLASSIFICATION	8.134611914750568E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999965969489756	WITHOUT_CLASSIFICATION	3.4030510243684363E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999132609928	WITHOUT_CLASSIFICATION	8.67390071423284E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999991752589313	WITHOUT_CLASSIFICATION	8.247410686669791E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999996575524205	WITHOUT_CLASSIFICATION	3.424475795897846E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997305818552	WITHOUT_CLASSIFICATION	2.694181448246213E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999914256805674	WITHOUT_CLASSIFICATION	8.574319432651155E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999951143085187	WITHOUT_CLASSIFICATION	4.885691481202241E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998401747024	WITHOUT_CLASSIFICATION	1.5982529750633778E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996160446397	WITHOUT_CLASSIFICATION	3.839553602916896E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999999026518476	WITHOUT_CLASSIFICATION	9.734815243456369E-8	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999358346392035	WITHOUT_CLASSIFICATION	6.416536079640947E-5	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999992605329647	WITHOUT_CLASSIFICATION	7.394670352792867E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999993669721268	WITHOUT_CLASSIFICATION	6.330278733206389E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942385894058	WITHOUT_CLASSIFICATION	5.761410594076567E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999988160654447	WITHOUT_CLASSIFICATION	1.1839345552758484E-6	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999995590648478	WITHOUT_CLASSIFICATION	4.409351521966571E-7	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999481647456	WITHOUT_CLASSIFICATION	5.183525439814901E-8	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999293099485	WITHOUT_CLASSIFICATION	7.069005146322793E-8	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999970359735942	WITHOUT_CLASSIFICATION	2.9640264058400804E-6	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999919119894777	WITHOUT_CLASSIFICATION	8.088010522297258E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999999663469918	WITHOUT_CLASSIFICATION	3.365300820600158E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999446870915518	WITHOUT_CLASSIFICATION	5.531290844807719E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996808655967	WITHOUT_CLASSIFICATION	3.1913440335232516E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999987364973358	WITHOUT_CLASSIFICATION	1.2635026641990752E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999084520185	WITHOUT_CLASSIFICATION	9.154798159123513E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999979494570451	WITHOUT_CLASSIFICATION	2.050542954828543E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999976563596895	WITHOUT_CLASSIFICATION	2.3436403105480144E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997320834536	WITHOUT_CLASSIFICATION	2.6791654633870497E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998168407458	WITHOUT_CLASSIFICATION	1.831592541336536E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99996442915809	WITHOUT_CLASSIFICATION	3.5570841909949234E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999326493922	WITHOUT_CLASSIFICATION	6.735060778896825E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999999983150743	WITHOUT_CLASSIFICATION	1.6849256960586842E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999703197969	WITHOUT_CLASSIFICATION	2.9680203119011928E-8	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999982149666798	WITHOUT_CLASSIFICATION	1.7850333201541166E-6	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999997232447138	WITHOUT_CLASSIFICATION	2.7675528629049307E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986805821497	WITHOUT_CLASSIFICATION	1.3194178503472022E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986805821497	WITHOUT_CLASSIFICATION	1.3194178503472022E-6	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999611717525	WITHOUT_CLASSIFICATION	3.8828247491907196E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999965100905622	WITHOUT_CLASSIFICATION	3.4899094377900828E-6	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.99999771555871	WITHOUT_CLASSIFICATION	2.2844412901146562E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999987150523982	WITHOUT_CLASSIFICATION	1.284947601796189E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999739487981	WITHOUT_CLASSIFICATION	2.6051201836947386E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999753788972	WITHOUT_CLASSIFICATION	2.462110279490527E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999739736881	WITHOUT_CLASSIFICATION	2.602631188426355E-8	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999995262491143	WITHOUT_CLASSIFICATION	4.7375088572311324E-7	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999574139872	WITHOUT_CLASSIFICATION	4.258601279484533E-8	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999751275032358	WITHOUT_CLASSIFICATION	2.487249676416031E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999971782028969	WITHOUT_CLASSIFICATION	2.821797103062435E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999940803684292	WITHOUT_CLASSIFICATION	5.91963157083691E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999996895577089	WITHOUT_CLASSIFICATION	3.1044229117178873E-7	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999985751598	WITHOUT_CLASSIFICATION	1.4248402736741524E-9	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998481204767	WITHOUT_CLASSIFICATION	1.518795233150495E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998945909816	WITHOUT_CLASSIFICATION	1.0540901840009141E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999999218445831	WITHOUT_CLASSIFICATION	7.815541690008257E-8	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999991010813597	WITHOUT_CLASSIFICATION	8.989186402978215E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999998815494555	WITHOUT_CLASSIFICATION	1.1845054444283799E-7	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999962324002	WITHOUT_CLASSIFICATION	3.767599733509216E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999527125232	WITHOUT_CLASSIFICATION	4.728747680536034E-7	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997682620086	WITHOUT_CLASSIFICATION	2.3173799122459055E-7	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999954426239667	WITHOUT_CLASSIFICATION	4.5573760333464555E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999997702879113	WITHOUT_CLASSIFICATION	2.2971208867853074E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999667038470196	WITHOUT_CLASSIFICATION	3.329615298040046E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999998284751015	WITHOUT_CLASSIFICATION	1.71524898535395E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958258817788	WITHOUT_CLASSIFICATION	4.174118221133971E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996379383385	WITHOUT_CLASSIFICATION	3.620616616367656E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999376553876	WITHOUT_CLASSIFICATION	6.234461241592956E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999948560346114	WITHOUT_CLASSIFICATION	5.143965388749887E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999964133172276	WITHOUT_CLASSIFICATION	3.586682772365366E-6	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999991902762783	WITHOUT_CLASSIFICATION	8.097237217795117E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999986207912483	WITHOUT_CLASSIFICATION	1.3792087516711802E-6	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998125053814	WITHOUT_CLASSIFICATION	1.8749461870298853E-7	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999673679268	WITHOUT_CLASSIFICATION	3.263207312211326E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996649806138	WITHOUT_CLASSIFICATION	3.3501938623215637E-7	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993294113368	WITHOUT_CLASSIFICATION	6.705886631021037E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999936761225167	WITHOUT_CLASSIFICATION	6.32387748333045E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999999921410593	WITHOUT_CLASSIFICATION	7.858940689142869E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994491796962	WITHOUT_CLASSIFICATION	5.508203038240825E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999906908361378	WITHOUT_CLASSIFICATION	9.30916386219791E-6	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926760799084	WITHOUT_CLASSIFICATION	7.323920091606278E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999756905771	WITHOUT_CLASSIFICATION	2.430942298229848E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999594316547755	WITHOUT_CLASSIFICATION	4.056834522460088E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999962285015321	WITHOUT_CLASSIFICATION	3.7714984679435298E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999992399980701	WITHOUT_CLASSIFICATION	7.600019299060134E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999446634551	WITHOUT_CLASSIFICATION	5.533654489938075E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9930012065870073	WITHOUT_CLASSIFICATION	0.006998793412992729	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996553564507	WITHOUT_CLASSIFICATION	3.4464354928465935E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999994991287812	WITHOUT_CLASSIFICATION	5.008712188533801E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999970707978956	WITHOUT_CLASSIFICATION	2.9292021044746915E-6	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956883127064	WITHOUT_CLASSIFICATION	4.311687293614549E-6	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999956135133	WITHOUT_CLASSIFICATION	4.3864868242769635E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999987542518944	WITHOUT_CLASSIFICATION	1.245748105546184E-6	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999978248196857	WITHOUT_CLASSIFICATION	2.1751803143949205E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999990053715495	WITHOUT_CLASSIFICATION	9.946284504533876E-7	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994599630694	WITHOUT_CLASSIFICATION	5.400369306966575E-7	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999860608793397	WITHOUT_CLASSIFICATION	1.3939120660386725E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999989076458853	WITHOUT_CLASSIFICATION	1.0923541146995077E-6	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999996885895235	WITHOUT_CLASSIFICATION	3.114104765347083E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999993894315187	WITHOUT_CLASSIFICATION	6.10568481295852E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999964387583837	WITHOUT_CLASSIFICATION	3.5612416162030114E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997858702383	WITHOUT_CLASSIFICATION	2.1412976164952075E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999999098974657	WITHOUT_CLASSIFICATION	9.010253430391924E-7	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999985192514963	WITHOUT_CLASSIFICATION	1.480748503751441E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999994404426684	WITHOUT_CLASSIFICATION	5.595573316376378E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999604403031	WITHOUT_CLASSIFICATION	3.9559696794470894E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999333271012524	WITHOUT_CLASSIFICATION	6.667289874758834E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999992792579884	WITHOUT_CLASSIFICATION	7.207420116605874E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999997464334336	WITHOUT_CLASSIFICATION	2.5356656641397253E-7	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999989607905295	WITHOUT_CLASSIFICATION	1.0392094705678382E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999997464334336	WITHOUT_CLASSIFICATION	2.5356656641397253E-7	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999996794360322	WITHOUT_CLASSIFICATION	3.2056396783496685E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999639292662	WITHOUT_CLASSIFICATION	3.6070733806986484E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998660632744	WITHOUT_CLASSIFICATION	1.339367255446703E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999576483949	WITHOUT_CLASSIFICATION	4.2351605114409075E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999683768476	WITHOUT_CLASSIFICATION	3.16231523414579E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999157194684	WITHOUT_CLASSIFICATION	8.428053156160912E-8	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999995314830524	WITHOUT_CLASSIFICATION	4.6851694752319717E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999669911940958	WITHOUT_CLASSIFICATION	3.3008805904199604E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999993066168003	WITHOUT_CLASSIFICATION	6.933831996930422E-7	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999964725733	WITHOUT_CLASSIFICATION	3.5274267699356623E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999971338922709	WITHOUT_CLASSIFICATION	2.8661077290842463E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997686565066	WITHOUT_CLASSIFICATION	2.3134349329839454E-7	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998756300615	WITHOUT_CLASSIFICATION	1.243699384242114E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999567797102	WITHOUT_CLASSIFICATION	4.32202897999272E-5	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999984141239909	WITHOUT_CLASSIFICATION	1.5858760090056106E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999691130892	WITHOUT_CLASSIFICATION	3.0886910914070875E-8	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999098973935	WITHOUT_CLASSIFICATION	9.010260649724095E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997579761071	WITHOUT_CLASSIFICATION	2.420238928507075E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999953131258	WITHOUT_CLASSIFICATION	4.6868742476402056E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999894027696545	WITHOUT_CLASSIFICATION	1.0597230345373549E-5	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999946464821	WITHOUT_CLASSIFICATION	5.353517900543911E-8	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999999119187897	WITHOUT_CLASSIFICATION	8.80812103037583E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998471592497654	WITHOUT_CLASSIFICATION	1.5284075023463194E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999997512126725	WITHOUT_CLASSIFICATION	2.4878732748770573E-7	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999981771602551	WITHOUT_CLASSIFICATION	1.8228397450107758E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999669291489756	WITHOUT_CLASSIFICATION	3.30708510243973E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999986423421501	WITHOUT_CLASSIFICATION	1.3576578498992455E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999956432958174	WITHOUT_CLASSIFICATION	4.356704182659306E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999724693273	WITHOUT_CLASSIFICATION	2.7530672721919747E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999999248395735	WITHOUT_CLASSIFICATION	7.516042650906189E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999927264296906	WITHOUT_CLASSIFICATION	7.273570309462198E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999985533861327	WITHOUT_CLASSIFICATION	1.4466138672657497E-6	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999822656259	WITHOUT_CLASSIFICATION	1.7734374101301378E-7	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999367223016656	WITHOUT_CLASSIFICATION	6.32776983344617E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999972005829402	WITHOUT_CLASSIFICATION	2.7994170596901997E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999453815789624	WITHOUT_CLASSIFICATION	5.461842103759942E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999973719712418	WITHOUT_CLASSIFICATION	2.6280287581481046E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999950018697	WITHOUT_CLASSIFICATION	4.998130297550832E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999501648715997	WITHOUT_CLASSIFICATION	4.98351284003265E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999993950059272	WITHOUT_CLASSIFICATION	6.049940728873591E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999575396334367	WITHOUT_CLASSIFICATION	4.246036656324444E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999997797232493	WITHOUT_CLASSIFICATION	2.2027675076034164E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9981883866788243	WITHOUT_CLASSIFICATION	0.0018116133211758137	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999669291489756	WITHOUT_CLASSIFICATION	3.30708510243973E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999453163074891	WITHOUT_CLASSIFICATION	5.4683692510894615E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999990265152019	WITHOUT_CLASSIFICATION	9.734847980963741E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999088531314209	WITHOUT_CLASSIFICATION	9.114686857915825E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999994575940064	WITHOUT_CLASSIFICATION	5.424059935921986E-6	TEST
special case	WITHOUT_CLASSIFICATION	0.9999972456049854	WITHOUT_CLASSIFICATION	2.754395014756058E-6	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999999051778174	WITHOUT_CLASSIFICATION	9.48221825918504E-7	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999814174303	WITHOUT_CLASSIFICATION	1.8582569634371016E-8	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999860238803793	WITHOUT_CLASSIFICATION	1.3976119620746395E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989100442946	WITHOUT_CLASSIFICATION	1.0899557053499638E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999991327384484	WITHOUT_CLASSIFICATION	8.672615516512365E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999948956112895	WITHOUT_CLASSIFICATION	5.10438871053239E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999995784161262	WITHOUT_CLASSIFICATION	4.215838738285674E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999951937562588	WITHOUT_CLASSIFICATION	4.8062437411722255E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999810571886538	WITHOUT_CLASSIFICATION	1.8942811346263523E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999280015854	WITHOUT_CLASSIFICATION	7.19984145343973E-8	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999607866698	WITHOUT_CLASSIFICATION	3.92133302106504E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999996347913177	WITHOUT_CLASSIFICATION	3.6520868240081547E-7	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999984003368195	WITHOUT_CLASSIFICATION	1.599663180461983E-6	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999998594132621	WITHOUT_CLASSIFICATION	1.4058673789127286E-7	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999453163074891	WITHOUT_CLASSIFICATION	5.4683692510894615E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999935337097586	WITHOUT_CLASSIFICATION	6.466290241318528E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999939186617804	WITHOUT_CLASSIFICATION	6.0813382195802E-6	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999806877239771	WITHOUT_CLASSIFICATION	1.931227602288735E-5	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999986152404045	WITHOUT_CLASSIFICATION	1.38475959556414E-6	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999996395051414	WITHOUT_CLASSIFICATION	3.604948586952555E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999741395761393	WITHOUT_CLASSIFICATION	2.58604238606391E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999741395761393	WITHOUT_CLASSIFICATION	2.58604238606391E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999442377406	WITHOUT_CLASSIFICATION	5.5762259473275933E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999741395761393	WITHOUT_CLASSIFICATION	2.58604238606391E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999741395761393	WITHOUT_CLASSIFICATION	2.58604238606391E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999969887384904	WITHOUT_CLASSIFICATION	3.011261509596288E-6	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999970972075806	WITHOUT_CLASSIFICATION	2.9027924194072345E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999991623062428	WITHOUT_CLASSIFICATION	8.37693757219454E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999990959230061	WITHOUT_CLASSIFICATION	9.040769938771323E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999928722245	WITHOUT_CLASSIFICATION	7.127775477106584E-9	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999810180710694	WITHOUT_CLASSIFICATION	1.8981928930660502E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999979867296133	WITHOUT_CLASSIFICATION	2.013270386756095E-6	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999996017796361	WITHOUT_CLASSIFICATION	3.982203639455418E-7	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999964742242088	WITHOUT_CLASSIFICATION	3.525775791240746E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998911375983179	WITHOUT_CLASSIFICATION	1.0886240168197054E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999884198876529	WITHOUT_CLASSIFICATION	1.158011234711769E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995623642384	WITHOUT_CLASSIFICATION	4.3763576156168874E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999960243784985	WITHOUT_CLASSIFICATION	3.975621501480559E-6	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999943393034245	WITHOUT_CLASSIFICATION	5.660696575572634E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999996611877671	WITHOUT_CLASSIFICATION	3.3881223295638786E-7	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999641281113518	WITHOUT_CLASSIFICATION	3.5871888648160065E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992760334991	WITHOUT_CLASSIFICATION	7.239665008346666E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999960030505233	WITHOUT_CLASSIFICATION	3.996949476725781E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999939989304625	WITHOUT_CLASSIFICATION	6.001069537446279E-6	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999932437874766	WITHOUT_CLASSIFICATION	6.756212523449737E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985555446247	WITHOUT_CLASSIFICATION	1.4444553754170474E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999917720765286	WITHOUT_CLASSIFICATION	8.227923471373951E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992760334991	WITHOUT_CLASSIFICATION	7.239665008346666E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999986423421501	WITHOUT_CLASSIFICATION	1.3576578498992455E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999967135831636	WITHOUT_CLASSIFICATION	3.286416836538034E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997688216079	WITHOUT_CLASSIFICATION	2.3117839211263286E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995864794711	WITHOUT_CLASSIFICATION	4.1352052890163764E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999949482074852	WITHOUT_CLASSIFICATION	5.05179251474075E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999997183606268	WITHOUT_CLASSIFICATION	2.8163937310333344E-7	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999417948605304	WITHOUT_CLASSIFICATION	5.820513946955764E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999962392505024	WITHOUT_CLASSIFICATION	3.760749497689129E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999962118722889	WITHOUT_CLASSIFICATION	3.788127711110507E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998492574371	WITHOUT_CLASSIFICATION	1.507425628168718E-7	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999990953643371	WITHOUT_CLASSIFICATION	9.046356630509792E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999995553185279	WITHOUT_CLASSIFICATION	4.4468147217796133E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999976925485066	WITHOUT_CLASSIFICATION	2.307451493450212E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999695313803	WITHOUT_CLASSIFICATION	3.0468619712323983E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999587775662775	WITHOUT_CLASSIFICATION	4.122243372249234E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999996622749225	WITHOUT_CLASSIFICATION	3.3772507748972383E-7	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999935222597442	WITHOUT_CLASSIFICATION	6.477740255730638E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999888244699404	WITHOUT_CLASSIFICATION	1.1175530059691139E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999956855979185	WITHOUT_CLASSIFICATION	4.314402081506799E-6	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999765158433859	WITHOUT_CLASSIFICATION	2.348415661422436E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999990699779061	WITHOUT_CLASSIFICATION	9.300220939153026E-7	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999987741272385	WITHOUT_CLASSIFICATION	1.2258727614888606E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999995192306	WITHOUT_CLASSIFICATION	4.807693604792744E-10	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999962118722889	WITHOUT_CLASSIFICATION	3.788127711110507E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999992120148818	WITHOUT_CLASSIFICATION	7.879851181008346E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999994069680258	WITHOUT_CLASSIFICATION	5.930319743141804E-7	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999997615908135	WITHOUT_CLASSIFICATION	2.384091866063225E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999952786528975	WITHOUT_CLASSIFICATION	4.721347102497598E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943407976832	WITHOUT_CLASSIFICATION	5.659202316756552E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999682472602249	WITHOUT_CLASSIFICATION	3.175273977508921E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999877624767547	WITHOUT_CLASSIFICATION	1.223752324521668E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.999998631236689	WITHOUT_CLASSIFICATION	1.3687633109647077E-6	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999983573754687	WITHOUT_CLASSIFICATION	1.6426245313470257E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999374445869547	WITHOUT_CLASSIFICATION	6.255541304535629E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992236313145	WITHOUT_CLASSIFICATION	7.763686854432114E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999461837599	WITHOUT_CLASSIFICATION	5.3816240081078074E-8	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999979972121403	WITHOUT_CLASSIFICATION	2.002787859568303E-6	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999927646986541	WITHOUT_CLASSIFICATION	7.235301346034855E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999902428215	WITHOUT_CLASSIFICATION	9.75717850001425E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999043661635	WITHOUT_CLASSIFICATION	9.563383649198953E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992236313145	WITHOUT_CLASSIFICATION	7.763686854432114E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999950019176318	WITHOUT_CLASSIFICATION	4.9980823682444554E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999986633029779	WITHOUT_CLASSIFICATION	1.3366970220483593E-6	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999994602304224	WITHOUT_CLASSIFICATION	5.397695777005186E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999979186614589	WITHOUT_CLASSIFICATION	2.0813385410391857E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999987339517763	WITHOUT_CLASSIFICATION	1.2660482237982387E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998123889035	WITHOUT_CLASSIFICATION	1.876110964387228E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998589489232	WITHOUT_CLASSIFICATION	1.4105107684009042E-7	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974046632455	WITHOUT_CLASSIFICATION	2.595336754557377E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987055833858	WITHOUT_CLASSIFICATION	1.2944166143121466E-6	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987148524714	WITHOUT_CLASSIFICATION	1.2851475286915325E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998572284499	WITHOUT_CLASSIFICATION	1.4277155018323322E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998468864486	WITHOUT_CLASSIFICATION	1.5311355129250013E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998381731486	WITHOUT_CLASSIFICATION	1.6182685141663314E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998381731486	WITHOUT_CLASSIFICATION	1.6182685141663314E-7	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999816813828096	WITHOUT_CLASSIFICATION	1.8318617190416443E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998278398269	WITHOUT_CLASSIFICATION	1.7216017302522847E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999977785564444	WITHOUT_CLASSIFICATION	2.2214435555472495E-6	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999957543705641	WITHOUT_CLASSIFICATION	4.24562943591761E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999916780307063	WITHOUT_CLASSIFICATION	8.32196929369154E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925704165319	WITHOUT_CLASSIFICATION	7.429583468076266E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095652824012	WITHOUT_CLASSIFICATION	9.043471759880772E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855244794859	WITHOUT_CLASSIFICATION	1.4475520514171568E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999975494487858	WITHOUT_CLASSIFICATION	2.450551214187076E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817183706712	WITHOUT_CLASSIFICATION	1.82816293288774E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925704165319	WITHOUT_CLASSIFICATION	7.429583468076266E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095652824012	WITHOUT_CLASSIFICATION	9.043471759880772E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855244794859	WITHOUT_CLASSIFICATION	1.4475520514171568E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999647661744518	WITHOUT_CLASSIFICATION	3.5233825548169464E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999908170460784	WITHOUT_CLASSIFICATION	9.18295392158164E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999996032149657	WITHOUT_CLASSIFICATION	3.96785034370307E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999988981561688	WITHOUT_CLASSIFICATION	1.1018438312281543E-6	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999985510098848	WITHOUT_CLASSIFICATION	1.448990115224656E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999977008036163	WITHOUT_CLASSIFICATION	2.299196383750244E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999991332789205	WITHOUT_CLASSIFICATION	8.667210795538717E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999947919139373	WITHOUT_CLASSIFICATION	5.208086062715003E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.999882487525198	WITHOUT_CLASSIFICATION	1.1751247480201209E-4	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999945713974518	WITHOUT_CLASSIFICATION	5.428602548189857E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999997146675806	WITHOUT_CLASSIFICATION	2.8533241939372846E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998999510383451	WITHOUT_CLASSIFICATION	1.0004896165504307E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999672998781627	WITHOUT_CLASSIFICATION	3.270012183736475E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999967221455554	WITHOUT_CLASSIFICATION	3.2778544446164777E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999865051102	WITHOUT_CLASSIFICATION	1.3494889848438194E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999990299386844	WITHOUT_CLASSIFICATION	9.700613156878115E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995521621311737	WITHOUT_CLASSIFICATION	4.4783786882635816E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999963958908875	WITHOUT_CLASSIFICATION	3.604109112502705E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.999998944347961	WITHOUT_CLASSIFICATION	1.055652038975265E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999766236259772	WITHOUT_CLASSIFICATION	2.3376374022806065E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999095697338	WITHOUT_CLASSIFICATION	9.043026609040996E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999999927308988	WITHOUT_CLASSIFICATION	7.269101193722851E-8	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995727757802	WITHOUT_CLASSIFICATION	4.2722421978824954E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998201908279	WITHOUT_CLASSIFICATION	1.7980917202405058E-7	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999994042766136	WITHOUT_CLASSIFICATION	5.957233864494423E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999990508971247	WITHOUT_CLASSIFICATION	9.49102875282954E-7	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625831797494	WITHOUT_CLASSIFICATION	3.741682025055123E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999031017638023	WITHOUT_CLASSIFICATION	9.689823619782486E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999995570584803	WITHOUT_CLASSIFICATION	4.429415196494237E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631562404739	WITHOUT_CLASSIFICATION	3.6843759525993666E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998196878074144	WITHOUT_CLASSIFICATION	1.8031219258559156E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993584810387	WITHOUT_CLASSIFICATION	6.415189613667073E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993584810387	WITHOUT_CLASSIFICATION	6.415189613667073E-7	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999919522169599	WITHOUT_CLASSIFICATION	8.047783040115997E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999922187486181	WITHOUT_CLASSIFICATION	7.78125138189709E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999996413126464	WITHOUT_CLASSIFICATION	3.586873535858122E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9992655651112232	WITHOUT_CLASSIFICATION	7.344348887766754E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999986398087276	WITHOUT_CLASSIFICATION	1.3601912723220451E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998375572967	WITHOUT_CLASSIFICATION	1.6244270323424286E-7	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999530082259146	WITHOUT_CLASSIFICATION	4.699177408548333E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999991394980154	WITHOUT_CLASSIFICATION	8.605019845856613E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999981507827286	WITHOUT_CLASSIFICATION	1.849217271473008E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947214740873	WITHOUT_CLASSIFICATION	5.27852591264817E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995489470944	WITHOUT_CLASSIFICATION	4.510529055962425E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946358682432	WITHOUT_CLASSIFICATION	5.364131756835249E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795231881861	WITHOUT_CLASSIFICATION	2.0476811813903558E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954009185621	WITHOUT_CLASSIFICATION	4.5990814379189605E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970722016321	WITHOUT_CLASSIFICATION	2.9277983678992998E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948344358632	WITHOUT_CLASSIFICATION	5.165564136669355E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962082111178	WITHOUT_CLASSIFICATION	3.79178888217981E-6	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948245784047	WITHOUT_CLASSIFICATION	5.1754215951696845E-6	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861722045837	WITHOUT_CLASSIFICATION	1.382779541614707E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789697076081	WITHOUT_CLASSIFICATION	2.1030292391869302E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999996804098236	WITHOUT_CLASSIFICATION	3.195901765208802E-7	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999817150463992	WITHOUT_CLASSIFICATION	1.8284953600796797E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999880098624834	WITHOUT_CLASSIFICATION	1.1990137516608334E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999999925845396	WITHOUT_CLASSIFICATION	7.415460404109597E-8	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997903770059	WITHOUT_CLASSIFICATION	2.096229940021613E-7	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999997739122051	WITHOUT_CLASSIFICATION	2.260877949581078E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999990516897582	WITHOUT_CLASSIFICATION	9.483102416737525E-7	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999400567142	WITHOUT_CLASSIFICATION	5.994328579910773E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999880098624834	WITHOUT_CLASSIFICATION	1.1990137516608334E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999880098624834	WITHOUT_CLASSIFICATION	1.1990137516608334E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999978757359701	WITHOUT_CLASSIFICATION	2.1242640298938446E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999869635482	WITHOUT_CLASSIFICATION	1.303645179719202E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995147348589	WITHOUT_CLASSIFICATION	4.852651410515104E-7	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999951504618769	WITHOUT_CLASSIFICATION	4.849538123046938E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999991508933961	WITHOUT_CLASSIFICATION	8.49106603905018E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999766236259772	WITHOUT_CLASSIFICATION	2.3376374022806065E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999905455924302	WITHOUT_CLASSIFICATION	9.45440756978265E-6	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999774208757	WITHOUT_CLASSIFICATION	2.2579124315073308E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999981636575069	WITHOUT_CLASSIFICATION	1.8363424930926177E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928704478994	WITHOUT_CLASSIFICATION	7.1295521006215915E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999939346671721	WITHOUT_CLASSIFICATION	6.0653328278238394E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941512757866	WITHOUT_CLASSIFICATION	5.848724213432745E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999987661206572	WITHOUT_CLASSIFICATION	1.2338793428145365E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999987661206572	WITHOUT_CLASSIFICATION	1.2338793428145365E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999978328474713	WITHOUT_CLASSIFICATION	2.1671525286645583E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999978328474713	WITHOUT_CLASSIFICATION	2.1671525286645583E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985919288326	WITHOUT_CLASSIFICATION	1.4080711674049464E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878815874365	WITHOUT_CLASSIFICATION	1.2118412563582216E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999996822906117	WITHOUT_CLASSIFICATION	3.1770938830832815E-6	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944501406008	WITHOUT_CLASSIFICATION	5.5498593990652095E-6	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999995134402871	WITHOUT_CLASSIFICATION	4.865597128392611E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999003242456	WITHOUT_CLASSIFICATION	9.96757543956966E-8	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936686930118	WITHOUT_CLASSIFICATION	6.331306988218445E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979320216348	WITHOUT_CLASSIFICATION	2.0679783652980825E-6	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999989558208838	WITHOUT_CLASSIFICATION	1.044179116136506E-6	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999030888901463	WITHOUT_CLASSIFICATION	9.691110985368752E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999581990973	WITHOUT_CLASSIFICATION	4.1800902685964244E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999974078590653	WITHOUT_CLASSIFICATION	2.5921409345661985E-6	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998729531812	WITHOUT_CLASSIFICATION	1.270468188051867E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999995878697688	WITHOUT_CLASSIFICATION	4.121302312209886E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999960012919109	WITHOUT_CLASSIFICATION	3.998708089161337E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999960012919109	WITHOUT_CLASSIFICATION	3.998708089161337E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999960012919109	WITHOUT_CLASSIFICATION	3.998708089161337E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998379994978	WITHOUT_CLASSIFICATION	1.6200050226170924E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999938406447477	WITHOUT_CLASSIFICATION	6.15935525227813E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999056663958	WITHOUT_CLASSIFICATION	9.433360404430972E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998670592293435	WITHOUT_CLASSIFICATION	1.3294077065651778E-4	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964756872141	WITHOUT_CLASSIFICATION	3.5243127859689036E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912125568451	WITHOUT_CLASSIFICATION	8.787443154967589E-6	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999281607068	WITHOUT_CLASSIFICATION	7.183929314793507E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998627125769	WITHOUT_CLASSIFICATION	1.3728742306202958E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999227573365	WITHOUT_CLASSIFICATION	7.724266345619458E-8	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999929483832	WITHOUT_CLASSIFICATION	7.051616799776445E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999771854936	WITHOUT_CLASSIFICATION	2.2814506405702538E-8	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997547197442	WITHOUT_CLASSIFICATION	2.4528025582860517E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977920775714	WITHOUT_CLASSIFICATION	2.2079224285546E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999955125969	WITHOUT_CLASSIFICATION	4.4874031103427986E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999992460592806	WITHOUT_CLASSIFICATION	7.539407194871582E-7	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999995867566598	WITHOUT_CLASSIFICATION	4.132433400943695E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997568447885	WITHOUT_CLASSIFICATION	2.431552114397417E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.99999885491749	WITHOUT_CLASSIFICATION	1.1450825100399468E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999987778413008	WITHOUT_CLASSIFICATION	1.222158699228909E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999148872577	WITHOUT_CLASSIFICATION	8.511274219075907E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999730684115	WITHOUT_CLASSIFICATION	2.6931588500347054E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999990163519313	WITHOUT_CLASSIFICATION	9.836480685575716E-7	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999464219714	WITHOUT_CLASSIFICATION	5.357802869715765E-8	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999987059650134	WITHOUT_CLASSIFICATION	1.294034986541808E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999976422220151	WITHOUT_CLASSIFICATION	2.3577779847536686E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999997129344438	WITHOUT_CLASSIFICATION	2.8706555614588323E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999981804223202	WITHOUT_CLASSIFICATION	1.8195776798283723E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999976875582516	WITHOUT_CLASSIFICATION	2.31244174838976E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999985568068053	WITHOUT_CLASSIFICATION	1.4431931946937512E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997968121338	WITHOUT_CLASSIFICATION	2.031878661914638E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999903894773	WITHOUT_CLASSIFICATION	9.610522758150214E-9	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999997879934451	WITHOUT_CLASSIFICATION	2.1200655482849761E-7	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999955956527924	WITHOUT_CLASSIFICATION	4.404347207621934E-6	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999126460187	WITHOUT_CLASSIFICATION	8.735398130779393E-8	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999265945196243	WITHOUT_CLASSIFICATION	7.340548037565101E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999989788304763	WITHOUT_CLASSIFICATION	1.0211695237138475E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.99999997960112	WITHOUT_CLASSIFICATION	2.039888000104901E-8	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999995846939043	WITHOUT_CLASSIFICATION	4.1530609580539477E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998108982814	WITHOUT_CLASSIFICATION	1.8910171855860947E-7	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998133223539	WITHOUT_CLASSIFICATION	1.866776461383504E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999714712122	WITHOUT_CLASSIFICATION	2.8528787891696957E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999989843089934	WITHOUT_CLASSIFICATION	1.0156910065439915E-6	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999946976214539	WITHOUT_CLASSIFICATION	5.302378546138998E-6	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996988566401	WITHOUT_CLASSIFICATION	3.01143360008236E-7	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999973697596644	WITHOUT_CLASSIFICATION	2.6302403357049094E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999994486623932	WITHOUT_CLASSIFICATION	5.51337606748195E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999992906200024	WITHOUT_CLASSIFICATION	7.093799975451713E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999868270339987	WITHOUT_CLASSIFICATION	1.3172966001238013E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999964310355485	WITHOUT_CLASSIFICATION	3.568964451681654E-6	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998413137782737	WITHOUT_CLASSIFICATION	1.586862217262688E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999999898911702	WITHOUT_CLASSIFICATION	1.0108829796849688E-7	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999356429913387	WITHOUT_CLASSIFICATION	6.4357008661278E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999964632031616	WITHOUT_CLASSIFICATION	3.5367968383329385E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999990619820205	WITHOUT_CLASSIFICATION	9.38017979492871E-6	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999991873087399	WITHOUT_CLASSIFICATION	8.126912601165236E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999826910062524	WITHOUT_CLASSIFICATION	1.7308993747642278E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999149353653095	WITHOUT_CLASSIFICATION	8.506463469046025E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999984460818201	WITHOUT_CLASSIFICATION	1.5539181799543883E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999955372708872	WITHOUT_CLASSIFICATION	4.4627291128135195E-6	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999771721397209	WITHOUT_CLASSIFICATION	2.2827860279090278E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999994358934516	WITHOUT_CLASSIFICATION	5.641065484265432E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999545616202	WITHOUT_CLASSIFICATION	4.543837987257792E-8	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999727739194317	WITHOUT_CLASSIFICATION	2.7226080568170977E-5	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999995106499591	WITHOUT_CLASSIFICATION	4.893500409261518E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999995657370778	WITHOUT_CLASSIFICATION	4.342629221462115E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999757461482	WITHOUT_CLASSIFICATION	2.425385187155069E-8	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999994289732	WITHOUT_CLASSIFICATION	5.710268037615557E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999123315008	WITHOUT_CLASSIFICATION	8.766849927700533E-8	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999885488933542	WITHOUT_CLASSIFICATION	1.1451106645787898E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999885488933542	WITHOUT_CLASSIFICATION	1.1451106645787898E-4	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999961766765568	WITHOUT_CLASSIFICATION	3.823323443170969E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999943077302574	WITHOUT_CLASSIFICATION	5.692269742622593E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999731754431	WITHOUT_CLASSIFICATION	2.68245568951716E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999995344483017	WITHOUT_CLASSIFICATION	4.655516983705839E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999387678146	WITHOUT_CLASSIFICATION	6.123218541529615E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999908756099267	WITHOUT_CLASSIFICATION	9.124390073252712E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999764172774	WITHOUT_CLASSIFICATION	2.3582722527478294E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999942351072748	WITHOUT_CLASSIFICATION	5.76489272521208E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999976232632443	WITHOUT_CLASSIFICATION	2.3767367557274476E-6	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999995648387884	WITHOUT_CLASSIFICATION	4.351612115468467E-7	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998893611833	WITHOUT_CLASSIFICATION	1.1063881660839881E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999924310443	WITHOUT_CLASSIFICATION	7.56895562067657E-9	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999988860862501	WITHOUT_CLASSIFICATION	1.1139137498917303E-6	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999951556437	WITHOUT_CLASSIFICATION	4.8443562950868274E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999992757818431	WITHOUT_CLASSIFICATION	7.242181569637688E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999918839346343	WITHOUT_CLASSIFICATION	8.116065365612796E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998043941777	WITHOUT_CLASSIFICATION	1.9560582234315205E-7	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999965101366375	WITHOUT_CLASSIFICATION	3.489863362579932E-6	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999990803589889	WITHOUT_CLASSIFICATION	9.196410111278423E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999829425136376	WITHOUT_CLASSIFICATION	1.7057486362277163E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999969126817582	WITHOUT_CLASSIFICATION	3.08731824172777E-6	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999555141739	WITHOUT_CLASSIFICATION	4.4485826126997803E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999793743890784	WITHOUT_CLASSIFICATION	2.0625610921604747E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999988346092513	WITHOUT_CLASSIFICATION	1.1653907486226986E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999359901814	WITHOUT_CLASSIFICATION	6.40098186478425E-8	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999987932748411	WITHOUT_CLASSIFICATION	1.2067251589171103E-6	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999995699242983	WITHOUT_CLASSIFICATION	4.300757018080585E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999993019552236	WITHOUT_CLASSIFICATION	6.98044776481009E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.999988770297371	WITHOUT_CLASSIFICATION	1.1229702629030057E-5	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999990576801701	WITHOUT_CLASSIFICATION	9.423198298404348E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999949194148252	WITHOUT_CLASSIFICATION	5.08058517476034E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999995874083372	WITHOUT_CLASSIFICATION	4.1259166281010195E-7	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999996285188447	WITHOUT_CLASSIFICATION	3.7148115533384723E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999974443287282	WITHOUT_CLASSIFICATION	2.5556712718672495E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999989174493921	WITHOUT_CLASSIFICATION	1.0825506078636686E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999989174493921	WITHOUT_CLASSIFICATION	1.0825506078636686E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999996982709445	WITHOUT_CLASSIFICATION	3.017290555500872E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999897507259204	WITHOUT_CLASSIFICATION	1.0249274079488293E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999996108255113	WITHOUT_CLASSIFICATION	3.8917448881524715E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999913149469329	WITHOUT_CLASSIFICATION	8.68505306711351E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999992774259906	WITHOUT_CLASSIFICATION	7.225740094100883E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999944378923442	WITHOUT_CLASSIFICATION	5.562107655852436E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999982721490946	WITHOUT_CLASSIFICATION	1.7278509052583142E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999998355658934	WITHOUT_CLASSIFICATION	1.6443410659577102E-7	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999990353488302	WITHOUT_CLASSIFICATION	9.646511698290336E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9995174271711952	WITHOUT_CLASSIFICATION	4.825728288048361E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997372679471	WITHOUT_CLASSIFICATION	2.627320528404447E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999437564321	WITHOUT_CLASSIFICATION	5.624356796019888E-8	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999933032422001	WITHOUT_CLASSIFICATION	6.69675779982601E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999993437896827	WITHOUT_CLASSIFICATION	6.5621031729394725E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999993008163923	WITHOUT_CLASSIFICATION	6.991836078095325E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999993488590109	WITHOUT_CLASSIFICATION	6.511409891045713E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999375553081961	WITHOUT_CLASSIFICATION	6.244469180390283E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999375553081961	WITHOUT_CLASSIFICATION	6.244469180390283E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999930279975	WITHOUT_CLASSIFICATION	6.9720025216887E-9	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999947763809589	WITHOUT_CLASSIFICATION	5.223619041172458E-6	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999995018825902	WITHOUT_CLASSIFICATION	4.98117409703803E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992441756859	WITHOUT_CLASSIFICATION	7.558243141365153E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999983579185102	WITHOUT_CLASSIFICATION	1.6420814898183319E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999138326354773	WITHOUT_CLASSIFICATION	8.616736452277074E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994558625587	WITHOUT_CLASSIFICATION	5.441374413035788E-7	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993162949996	WITHOUT_CLASSIFICATION	6.837050004495116E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999982900270123	WITHOUT_CLASSIFICATION	1.7099729876656903E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999968649247943	WITHOUT_CLASSIFICATION	3.135075205542697E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999968649247943	WITHOUT_CLASSIFICATION	3.135075205542697E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999991144002225	WITHOUT_CLASSIFICATION	8.855997773997614E-7	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999935783355	WITHOUT_CLASSIFICATION	6.421664547327821E-9	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999998285702614	WITHOUT_CLASSIFICATION	1.7142973853639886E-7	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999561125246111	WITHOUT_CLASSIFICATION	4.388747538884596E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999990605217288	WITHOUT_CLASSIFICATION	9.394782711742094E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999917456429074	WITHOUT_CLASSIFICATION	8.254357092688475E-6	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999968798030445	WITHOUT_CLASSIFICATION	3.1201969556169698E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999762492904262	WITHOUT_CLASSIFICATION	2.375070957387451E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999357204	WITHOUT_CLASSIFICATION	6.427960000446841E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999043340908	WITHOUT_CLASSIFICATION	9.566590927822973E-8	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983603564191	WITHOUT_CLASSIFICATION	1.639643580857865E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999907272345274	WITHOUT_CLASSIFICATION	9.272765472497212E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999999517020913	WITHOUT_CLASSIFICATION	4.829790868833254E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999408877622352	WITHOUT_CLASSIFICATION	5.911223776463568E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999545341088941	WITHOUT_CLASSIFICATION	4.546589110591507E-5	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999936348370485	WITHOUT_CLASSIFICATION	6.365162951505664E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999948560346114	WITHOUT_CLASSIFICATION	5.143965388749887E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999580111761	WITHOUT_CLASSIFICATION	4.1988823773952526E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999973039403209	WITHOUT_CLASSIFICATION	2.696059679061411E-6	TEST
by default	WITHOUT_CLASSIFICATION	0.9999991318734563	WITHOUT_CLASSIFICATION	8.681265436277599E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999974667151734	WITHOUT_CLASSIFICATION	2.5332848265490156E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998610782949	WITHOUT_CLASSIFICATION	1.389217051997464E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999947282516747	WITHOUT_CLASSIFICATION	5.2717483253882356E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999471101036747	WITHOUT_CLASSIFICATION	5.2889896325359665E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999961538249016	WITHOUT_CLASSIFICATION	3.84617509838515E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999996514067389	WITHOUT_CLASSIFICATION	3.485932611264548E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997945633857	WITHOUT_CLASSIFICATION	2.0543661426548884E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999998777052479	WITHOUT_CLASSIFICATION	1.2229475215111184E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996911513185506	WITHOUT_CLASSIFICATION	3.0884868144940474E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999333986413	WITHOUT_CLASSIFICATION	6.660135868766231E-8	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999569628217	WITHOUT_CLASSIFICATION	4.3037178315435064E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999462301455	WITHOUT_CLASSIFICATION	5.37698544963578E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.99998161609017	WITHOUT_CLASSIFICATION	1.8383909829964745E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999977588407314	WITHOUT_CLASSIFICATION	2.241159268709968E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999948420043994	WITHOUT_CLASSIFICATION	5.157995600630775E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999966023570823	WITHOUT_CLASSIFICATION	3.397642917655626E-6	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999923608667395	WITHOUT_CLASSIFICATION	7.639133260607457E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999802268336974	WITHOUT_CLASSIFICATION	1.977316630273478E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999951471741761	WITHOUT_CLASSIFICATION	4.852825823881296E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999951471741761	WITHOUT_CLASSIFICATION	4.852825823881296E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999963916077579	WITHOUT_CLASSIFICATION	3.6083922421557377E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991860810908	WITHOUT_CLASSIFICATION	8.139189092820914E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999995525305627	WITHOUT_CLASSIFICATION	4.4746943727490824E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999951506409541	WITHOUT_CLASSIFICATION	4.849359045803605E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999992463812679	WITHOUT_CLASSIFICATION	7.536187320422169E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999931053372	WITHOUT_CLASSIFICATION	6.8946628593030356E-9	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999427163	WITHOUT_CLASSIFICATION	5.728370153020289E-10	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995707992262	WITHOUT_CLASSIFICATION	4.292007738422714E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999963916077579	WITHOUT_CLASSIFICATION	3.6083922421557377E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991860810908	WITHOUT_CLASSIFICATION	8.139189092820914E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999975959915786	WITHOUT_CLASSIFICATION	2.4040084214763516E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999993971049502	WITHOUT_CLASSIFICATION	6.028950497436714E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999983487834229	WITHOUT_CLASSIFICATION	1.6512165771635318E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999852054098363	WITHOUT_CLASSIFICATION	1.4794590163729344E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999896832543	WITHOUT_CLASSIFICATION	1.0316745700064845E-8	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999990585770137	WITHOUT_CLASSIFICATION	9.414229863498952E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999995030284483	WITHOUT_CLASSIFICATION	4.969715516949556E-7	TEST
}	WITHOUT_CLASSIFICATION	0.9992390263251093	WITHOUT_CLASSIFICATION	7.609736748906508E-4	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999067366825	WITHOUT_CLASSIFICATION	9.326331754771652E-8	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999883097410616	WITHOUT_CLASSIFICATION	1.1690258938436309E-5	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999978908167414	WITHOUT_CLASSIFICATION	2.1091832586796026E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999883097410616	WITHOUT_CLASSIFICATION	1.1690258938436309E-5	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999963132089184	WITHOUT_CLASSIFICATION	3.68679108178368E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999980147180116	WITHOUT_CLASSIFICATION	1.985281988406409E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999883871225979	WITHOUT_CLASSIFICATION	1.1612877402221753E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973774953281	WITHOUT_CLASSIFICATION	2.6225046718184803E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999977819299983	WITHOUT_CLASSIFICATION	2.218070001697798E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9992390263251093	WITHOUT_CLASSIFICATION	7.609736748906508E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9992390263251093	WITHOUT_CLASSIFICATION	7.609736748906508E-4	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999950042395939	WITHOUT_CLASSIFICATION	4.995760406050957E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999994093896327	WITHOUT_CLASSIFICATION	5.906103673517636E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999963364606455	WITHOUT_CLASSIFICATION	3.6635393545886637E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993421903333	WITHOUT_CLASSIFICATION	6.578096666906907E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999997825329118	WITHOUT_CLASSIFICATION	2.1746708830245453E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999979988538612	WITHOUT_CLASSIFICATION	2.001146138795379E-6	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999567211404123	WITHOUT_CLASSIFICATION	4.327885958762965E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999985143361463	WITHOUT_CLASSIFICATION	1.4856638537978473E-6	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997164700423	WITHOUT_CLASSIFICATION	2.835299578009809E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9994653499085505	WITHOUT_CLASSIFICATION	5.346500914493604E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.9999793921572087	WITHOUT_CLASSIFICATION	2.0607842791302392E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999931980896181	WITHOUT_CLASSIFICATION	6.801910381895461E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999992740487911	WITHOUT_CLASSIFICATION	7.259512089832939E-7	TEST
types	WITHOUT_CLASSIFICATION	0.9999378701580052	WITHOUT_CLASSIFICATION	6.212984199481327E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999966219159451	WITHOUT_CLASSIFICATION	3.378084054941209E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999995477200034	WITHOUT_CLASSIFICATION	4.5227999659368667E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999863477568	WITHOUT_CLASSIFICATION	1.3652243121060811E-8	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999994105927162	WITHOUT_CLASSIFICATION	5.894072837293839E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999109250324	WITHOUT_CLASSIFICATION	8.907496762139586E-8	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999996203697153	WITHOUT_CLASSIFICATION	3.7963028471387025E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9997282711154926	WITHOUT_CLASSIFICATION	2.717288845073994E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999811428241	WITHOUT_CLASSIFICATION	1.8857175901043895E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999472520693183	WITHOUT_CLASSIFICATION	5.274793068164322E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997207673579	WITHOUT_CLASSIFICATION	2.7923264212239133E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999996797668884	WITHOUT_CLASSIFICATION	3.202331116506417E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999996701388376	WITHOUT_CLASSIFICATION	3.298611624205016E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999056834717924	WITHOUT_CLASSIFICATION	9.431652820754543E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999855510541	WITHOUT_CLASSIFICATION	1.4448945939001561E-8	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999996734965161	WITHOUT_CLASSIFICATION	3.265034838023273E-7	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999990827621495	WITHOUT_CLASSIFICATION	9.172378505198723E-7	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999990411363365	WITHOUT_CLASSIFICATION	9.588636635152227E-7	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999939376391335	WITHOUT_CLASSIFICATION	6.062360866476694E-6	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999981212886226	WITHOUT_CLASSIFICATION	1.878711377463698E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999985143361463	WITHOUT_CLASSIFICATION	1.4856638537978473E-6	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999984788725607	WITHOUT_CLASSIFICATION	1.5211274393783855E-6	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999110563525034	WITHOUT_CLASSIFICATION	8.894364749659373E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.998673780651895	WITHOUT_CLASSIFICATION	0.0013262193481049709	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999894805080685	WITHOUT_CLASSIFICATION	1.051949193146391E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994556420873	WITHOUT_CLASSIFICATION	5.443579126277382E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999984540286465	WITHOUT_CLASSIFICATION	1.5459713535051076E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993421903333	WITHOUT_CLASSIFICATION	6.578096666906907E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993421903333	WITHOUT_CLASSIFICATION	6.578096666906907E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998041694828	WITHOUT_CLASSIFICATION	1.9583051728836593E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999982329103426	WITHOUT_CLASSIFICATION	1.7670896572894583E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999986866690294	WITHOUT_CLASSIFICATION	1.3133309705933746E-6	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999309573633	WITHOUT_CLASSIFICATION	6.904263663846288E-8	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.99999943474697	WITHOUT_CLASSIFICATION	5.652530300499229E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995300640591	WITHOUT_CLASSIFICATION	4.6993594089242923E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999979984952665	WITHOUT_CLASSIFICATION	2.0015047335964784E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997768674538	WITHOUT_CLASSIFICATION	2.2313254609741187E-7	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999999859564692	WITHOUT_CLASSIFICATION	1.4043530801064798E-7	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999996489452152	WITHOUT_CLASSIFICATION	3.5105478473083067E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995772472584	WITHOUT_CLASSIFICATION	4.22752741587758E-7	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999940154245381	WITHOUT_CLASSIFICATION	5.984575461790721E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995963819124596	WITHOUT_CLASSIFICATION	4.03618087540442E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999963916077579	WITHOUT_CLASSIFICATION	3.6083922421557377E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995772472584	WITHOUT_CLASSIFICATION	4.22752741587758E-7	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999904455194999	WITHOUT_CLASSIFICATION	9.554480500108139E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999992782330707	WITHOUT_CLASSIFICATION	7.217669293297352E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999997633924735	WITHOUT_CLASSIFICATION	2.3660752641505562E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.997249508296197	WITHOUT_CLASSIFICATION	0.002750491703802976	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995963819124596	WITHOUT_CLASSIFICATION	4.03618087540442E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999592786745309	WITHOUT_CLASSIFICATION	4.072132546909612E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998916666395	WITHOUT_CLASSIFICATION	1.0833336049490652E-7	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998395374111	WITHOUT_CLASSIFICATION	1.6046258886854193E-7	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999908638358	WITHOUT_CLASSIFICATION	9.136164231659771E-9	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9994484225454638	WITHOUT_CLASSIFICATION	5.515774545360752E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999950542951759	WITHOUT_CLASSIFICATION	4.945704824098363E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999986156445788	WITHOUT_CLASSIFICATION	1.384355421114532E-6	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997729738903276	WITHOUT_CLASSIFICATION	2.270261096724422E-4	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988397128861	WITHOUT_CLASSIFICATION	1.1602871138499722E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.99999967974188	WITHOUT_CLASSIFICATION	3.202581201128971E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999991167740665	WITHOUT_CLASSIFICATION	8.832259334938139E-7	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999997115158826	WITHOUT_CLASSIFICATION	2.8848411737632515E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995772472584	WITHOUT_CLASSIFICATION	4.22752741587758E-7	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999592786745309	WITHOUT_CLASSIFICATION	4.072132546909612E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998395374111	WITHOUT_CLASSIFICATION	1.6046258886854193E-7	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999997003286768	WITHOUT_CLASSIFICATION	2.996713231934837E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999972720246215	WITHOUT_CLASSIFICATION	2.727975378406747E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999994660412739	WITHOUT_CLASSIFICATION	5.339587260791758E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995963819124596	WITHOUT_CLASSIFICATION	4.03618087540442E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999978991231503	WITHOUT_CLASSIFICATION	2.1008768496601985E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999762121663337	WITHOUT_CLASSIFICATION	2.378783366630742E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999310196187803	WITHOUT_CLASSIFICATION	6.898038121970708E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998571550043784	WITHOUT_CLASSIFICATION	1.4284499562159015E-4	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997729738903276	WITHOUT_CLASSIFICATION	2.270261096724422E-4	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999904455194999	WITHOUT_CLASSIFICATION	9.554480500108139E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9997110284526447	WITHOUT_CLASSIFICATION	2.889715473552924E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999998332718308	WITHOUT_CLASSIFICATION	1.6672816920725132E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999928610008962	WITHOUT_CLASSIFICATION	7.138999103805699E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999955783656325	WITHOUT_CLASSIFICATION	4.421634367485668E-6	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999903380695211	WITHOUT_CLASSIFICATION	9.661930478987669E-6	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999924074938402	WITHOUT_CLASSIFICATION	7.5925061597010686E-6	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999929335652716	WITHOUT_CLASSIFICATION	7.06643472837754E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973774953281	WITHOUT_CLASSIFICATION	2.6225046718184803E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995307829638	WITHOUT_CLASSIFICATION	4.6921703613543057E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999986555779182	WITHOUT_CLASSIFICATION	1.3444220817115718E-6	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996849337766153	WITHOUT_CLASSIFICATION	3.150662233847201E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999972333406467	WITHOUT_CLASSIFICATION	2.766659353365647E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999999558467329	WITHOUT_CLASSIFICATION	4.415326710618248E-7	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999883190941	WITHOUT_CLASSIFICATION	1.1680905938350183E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999796015477603	WITHOUT_CLASSIFICATION	2.039845223975932E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999994544579572	WITHOUT_CLASSIFICATION	5.455420427762573E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998571550043784	WITHOUT_CLASSIFICATION	1.4284499562159015E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997213397850573	WITHOUT_CLASSIFICATION	2.7866021494280023E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9998138097138659	WITHOUT_CLASSIFICATION	1.8619028613405984E-4	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999245311034168	WITHOUT_CLASSIFICATION	7.546889658315283E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998915177257239	WITHOUT_CLASSIFICATION	1.0848227427609935E-4	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999876558151405	WITHOUT_CLASSIFICATION	1.2344184859518414E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999915595591	WITHOUT_CLASSIFICATION	8.44044084536295E-9	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996763831093	WITHOUT_CLASSIFICATION	3.2361689073279936E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999990252963389	WITHOUT_CLASSIFICATION	9.747036610935707E-7	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999995883473188	WITHOUT_CLASSIFICATION	4.1165268122214667E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999941528425332	WITHOUT_CLASSIFICATION	5.847157466821631E-6	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999982626653264	WITHOUT_CLASSIFICATION	1.7373346735939877E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999952042997339	WITHOUT_CLASSIFICATION	4.795700266114872E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999920466598845	WITHOUT_CLASSIFICATION	7.953340115548543E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999975138133204	WITHOUT_CLASSIFICATION	2.4861866795354274E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998692669062	WITHOUT_CLASSIFICATION	1.3073309375965017E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999980766672453	WITHOUT_CLASSIFICATION	1.9233327547502466E-6	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999578900504	WITHOUT_CLASSIFICATION	4.2109949698252184E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998457840807	WITHOUT_CLASSIFICATION	1.5421591921341327E-7	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999973322418041	WITHOUT_CLASSIFICATION	2.6677581960048587E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999985570364691	WITHOUT_CLASSIFICATION	1.4429635309638187E-6	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9997608127371926	WITHOUT_CLASSIFICATION	2.3918726280728697E-4	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999945998901881	WITHOUT_CLASSIFICATION	5.40010981191825E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999984133946945	WITHOUT_CLASSIFICATION	1.5866053054378377E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998624938472	WITHOUT_CLASSIFICATION	1.375061528539936E-7	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999975844499345	WITHOUT_CLASSIFICATION	2.4155500654992868E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998031550829249	WITHOUT_CLASSIFICATION	1.968449170751226E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999913697027867	WITHOUT_CLASSIFICATION	8.63029721329866E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999945811683245	WITHOUT_CLASSIFICATION	5.418831675483442E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999963043019553	WITHOUT_CLASSIFICATION	3.695698044649807E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999256657532234	WITHOUT_CLASSIFICATION	7.433424677657615E-5	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999984210056774	WITHOUT_CLASSIFICATION	1.578994322654997E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999987578693813	WITHOUT_CLASSIFICATION	1.242130618692811E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999999494324742	WITHOUT_CLASSIFICATION	5.056752580169221E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999446870915518	WITHOUT_CLASSIFICATION	5.531290844807719E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976436455141	WITHOUT_CLASSIFICATION	2.35635448586048E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.999997852973403	WITHOUT_CLASSIFICATION	2.1470265969219143E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995441653527	WITHOUT_CLASSIFICATION	4.5583464729764663E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999989560084125	WITHOUT_CLASSIFICATION	1.0439915874660131E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.999997852973403	WITHOUT_CLASSIFICATION	2.1470265969219143E-6	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976436455141	WITHOUT_CLASSIFICATION	2.35635448586048E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995441653527	WITHOUT_CLASSIFICATION	4.5583464729764663E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999985761593578	WITHOUT_CLASSIFICATION	1.4238406422510297E-6	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999995068387062	WITHOUT_CLASSIFICATION	4.931612939157003E-7	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999937399610241	WITHOUT_CLASSIFICATION	6.260038975845155E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999966392230459	WITHOUT_CLASSIFICATION	3.360776954025142E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999850365336	WITHOUT_CLASSIFICATION	1.496346634452461E-8	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997276122808497	WITHOUT_CLASSIFICATION	2.723877191502174E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999988850114183	WITHOUT_CLASSIFICATION	1.1149885816505392E-6	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999994435058707	WITHOUT_CLASSIFICATION	5.564941293827984E-7	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999413994091	WITHOUT_CLASSIFICATION	5.86005908902567E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999998124665311	WITHOUT_CLASSIFICATION	1.8753346883597826E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.999993513321334	WITHOUT_CLASSIFICATION	6.486678665993021E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999994100359785	WITHOUT_CLASSIFICATION	5.899640216513537E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.99999728893235	WITHOUT_CLASSIFICATION	2.7110676500965985E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999966392230459	WITHOUT_CLASSIFICATION	3.360776954025142E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999994100786669	WITHOUT_CLASSIFICATION	5.899213330180167E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999992659392358	WITHOUT_CLASSIFICATION	7.340607641690772E-7	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998970864132	WITHOUT_CLASSIFICATION	1.0291358671491785E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999861537399	WITHOUT_CLASSIFICATION	1.3846260228943191E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999998201010732	WITHOUT_CLASSIFICATION	1.7989892679609517E-6	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999439487566	WITHOUT_CLASSIFICATION	5.605124339238202E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999998604392581	WITHOUT_CLASSIFICATION	1.3956074190258364E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999711660673	WITHOUT_CLASSIFICATION	2.8833932710777514E-8	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999969898699855	WITHOUT_CLASSIFICATION	3.010130014506496E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999980326440661	WITHOUT_CLASSIFICATION	1.9673559340579926E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999990423768674	WITHOUT_CLASSIFICATION	9.576231325191107E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999990423768674	WITHOUT_CLASSIFICATION	9.576231325191107E-7	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999398979557	WITHOUT_CLASSIFICATION	6.010204430431307E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999398979557	WITHOUT_CLASSIFICATION	6.010204430431307E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999913449366071	WITHOUT_CLASSIFICATION	8.655063392900522E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998970864132	WITHOUT_CLASSIFICATION	1.0291358671491785E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999050489768	WITHOUT_CLASSIFICATION	9.495102321430078E-7	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999752853087	WITHOUT_CLASSIFICATION	2.4714691321669782E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992387765454	WITHOUT_CLASSIFICATION	7.61223454558636E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992387765454	WITHOUT_CLASSIFICATION	7.61223454558636E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999223559008	WITHOUT_CLASSIFICATION	7.764409917194615E-8	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999977635494316	WITHOUT_CLASSIFICATION	2.236450568441216E-6	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999820299338	WITHOUT_CLASSIFICATION	1.7970066182440348E-8	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.999998139509741	WITHOUT_CLASSIFICATION	1.8604902589584754E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998460310048	WITHOUT_CLASSIFICATION	1.5396899526443183E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999155738313	WITHOUT_CLASSIFICATION	8.442616866083832E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999918482273528	WITHOUT_CLASSIFICATION	8.151772647193762E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999899091261565	WITHOUT_CLASSIFICATION	1.0090873843582873E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999991233867139	WITHOUT_CLASSIFICATION	8.766132861667588E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999247055817	WITHOUT_CLASSIFICATION	7.529441832503683E-8	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999997296572517	WITHOUT_CLASSIFICATION	2.7034274835860907E-7	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999993347026139	WITHOUT_CLASSIFICATION	6.652973860159083E-7	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998492982796	WITHOUT_CLASSIFICATION	1.5070172036732562E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999982582686211	WITHOUT_CLASSIFICATION	1.7417313789460694E-6	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999993225226042	WITHOUT_CLASSIFICATION	6.77477395858477E-7	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998513884929	WITHOUT_CLASSIFICATION	1.4861150708366054E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811401474215	WITHOUT_CLASSIFICATION	1.885985257851453E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999792364072	WITHOUT_CLASSIFICATION	2.0763592854608637E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999527670776	WITHOUT_CLASSIFICATION	4.723292222955211E-8	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999944287612	WITHOUT_CLASSIFICATION	5.571238791827443E-9	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999794301363	WITHOUT_CLASSIFICATION	2.056986361468216E-8	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999936750992425	WITHOUT_CLASSIFICATION	6.324900757444134E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999538023634	WITHOUT_CLASSIFICATION	4.619763665075513E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999818098811	WITHOUT_CLASSIFICATION	1.819011883328687E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9992655651112232	WITHOUT_CLASSIFICATION	7.344348887766754E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999062804586	WITHOUT_CLASSIFICATION	9.371954139950099E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999952042997339	WITHOUT_CLASSIFICATION	4.795700266114872E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997842808178	WITHOUT_CLASSIFICATION	2.1571918230730448E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997139000377	WITHOUT_CLASSIFICATION	2.860999622632613E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746439379402	WITHOUT_CLASSIFICATION	2.535606205978683E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923929555041	WITHOUT_CLASSIFICATION	7.607044495973673E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999975961085816	WITHOUT_CLASSIFICATION	2.4038914184262947E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999975961085816	WITHOUT_CLASSIFICATION	2.4038914184262947E-6	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999979443098667	WITHOUT_CLASSIFICATION	2.055690133291482E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999956832123726	WITHOUT_CLASSIFICATION	4.316787627429297E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999621333970143	WITHOUT_CLASSIFICATION	3.7866602985612104E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999621333970143	WITHOUT_CLASSIFICATION	3.7866602985612104E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999996575524205	WITHOUT_CLASSIFICATION	3.424475795897846E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999993520089049	WITHOUT_CLASSIFICATION	6.479910950589905E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999732795887845	WITHOUT_CLASSIFICATION	2.6720411215464608E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.999991508933961	WITHOUT_CLASSIFICATION	8.49106603905018E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999979225568134	WITHOUT_CLASSIFICATION	2.0774431865659374E-6	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999996347406481	WITHOUT_CLASSIFICATION	3.652593519009465E-6	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999961247611046	WITHOUT_CLASSIFICATION	3.875238895453239E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998157921258	WITHOUT_CLASSIFICATION	1.8420787414548976E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993976601239	WITHOUT_CLASSIFICATION	6.023398761187429E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993976601239	WITHOUT_CLASSIFICATION	6.023398761187429E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999981322135	WITHOUT_CLASSIFICATION	1.867786443544412E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999992209781637	WITHOUT_CLASSIFICATION	7.790218361367634E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999992209781637	WITHOUT_CLASSIFICATION	7.790218361367634E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997600194728	WITHOUT_CLASSIFICATION	2.3998052725319E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999988064594351	WITHOUT_CLASSIFICATION	1.1935405649866844E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9922426080679928	WITHOUT_CLASSIFICATION	0.007757391932007172	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.999999092001339	WITHOUT_CLASSIFICATION	9.079986610335471E-7	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999076232864	WITHOUT_CLASSIFICATION	9.237671361049639E-8	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999999921183366	WITHOUT_CLASSIFICATION	7.881663403149304E-8	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999899196194256	WITHOUT_CLASSIFICATION	1.0080380574448466E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999853766575562	WITHOUT_CLASSIFICATION	1.4623342443700823E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999963238347	WITHOUT_CLASSIFICATION	3.6761653123855067E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999926718364017	WITHOUT_CLASSIFICATION	7.328163598335266E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999963068013	WITHOUT_CLASSIFICATION	3.6931987394877037E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999995469279552	WITHOUT_CLASSIFICATION	4.530720447580313E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999974720068983	WITHOUT_CLASSIFICATION	2.5279931017435565E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999974720068983	WITHOUT_CLASSIFICATION	2.5279931017435565E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999974720068983	WITHOUT_CLASSIFICATION	2.5279931017435565E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999974720068983	WITHOUT_CLASSIFICATION	2.5279931017435565E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999990746322479	WITHOUT_CLASSIFICATION	9.253677520592283E-7	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999954597337509	WITHOUT_CLASSIFICATION	4.540266249097638E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999896936294664	WITHOUT_CLASSIFICATION	1.0306370533597932E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999776799119252	WITHOUT_CLASSIFICATION	2.232008807478461E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999963460637933	WITHOUT_CLASSIFICATION	3.6539362065996245E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999977985334086	WITHOUT_CLASSIFICATION	2.2014665913802226E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999973672754671	WITHOUT_CLASSIFICATION	2.6327245329020517E-5	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999968037035897	WITHOUT_CLASSIFICATION	3.1962964102229654E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999837645054	WITHOUT_CLASSIFICATION	1.623549464826674E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999992087293627	WITHOUT_CLASSIFICATION	7.912706372109817E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999955227361725	WITHOUT_CLASSIFICATION	4.477263827495641E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997928177535	WITHOUT_CLASSIFICATION	2.0718224652092193E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9992785506524261	WITHOUT_CLASSIFICATION	7.214493475739683E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999467606019828	WITHOUT_CLASSIFICATION	5.323939801704804E-5	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999980642859984	WITHOUT_CLASSIFICATION	1.9357140015624856E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997928177535	WITHOUT_CLASSIFICATION	2.0718224652092193E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999908758851498	WITHOUT_CLASSIFICATION	9.124114850307957E-6	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999906083665	WITHOUT_CLASSIFICATION	9.391633513584157E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999897003259	WITHOUT_CLASSIFICATION	1.0299674100006061E-7	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999678703539195	WITHOUT_CLASSIFICATION	3.212964608047024E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997758435253	WITHOUT_CLASSIFICATION	2.2415647475045426E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999975806336624	WITHOUT_CLASSIFICATION	2.41936633756762E-6	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999875085713	WITHOUT_CLASSIFICATION	1.2491428732872111E-8	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999998780081262	WITHOUT_CLASSIFICATION	1.2199187378498973E-7	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995278863603	WITHOUT_CLASSIFICATION	4.721136397683484E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999141520227	WITHOUT_CLASSIFICATION	8.584797729261108E-8	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999826262954	WITHOUT_CLASSIFICATION	1.7373704600236475E-6	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998381770299	WITHOUT_CLASSIFICATION	1.618229702144165E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999888116722203	WITHOUT_CLASSIFICATION	1.1188327779671215E-5	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998163640369214	WITHOUT_CLASSIFICATION	1.8363596307849743E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999036006454	WITHOUT_CLASSIFICATION	9.639935461616798E-8	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999559664243763	WITHOUT_CLASSIFICATION	4.403357562353524E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999991134157333	WITHOUT_CLASSIFICATION	8.86584266728945E-7	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998012019714	WITHOUT_CLASSIFICATION	1.9879802872153985E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999921971999103	WITHOUT_CLASSIFICATION	7.802800089764716E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998012019714	WITHOUT_CLASSIFICATION	1.9879802872153985E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999829143877	WITHOUT_CLASSIFICATION	1.7085612257797926E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999878569258492	WITHOUT_CLASSIFICATION	1.2143074150751991E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999185530918	WITHOUT_CLASSIFICATION	8.144690821507339E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999988023778098	WITHOUT_CLASSIFICATION	1.1976221901304903E-6	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999998586923352	WITHOUT_CLASSIFICATION	1.4130766471365483E-7	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999743978144858	WITHOUT_CLASSIFICATION	2.5602185514192583E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999962380221938	WITHOUT_CLASSIFICATION	3.761977806268585E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999991134157333	WITHOUT_CLASSIFICATION	8.86584266728945E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999921971999103	WITHOUT_CLASSIFICATION	7.802800089764716E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999829143877	WITHOUT_CLASSIFICATION	1.7085612257797926E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999205074377	WITHOUT_CLASSIFICATION	7.949256230095976E-8	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999995616584855	WITHOUT_CLASSIFICATION	4.383415145851737E-7	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999969972775374	WITHOUT_CLASSIFICATION	3.002722462580328E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.999999424603779	WITHOUT_CLASSIFICATION	5.753962210727924E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.999998068344764	WITHOUT_CLASSIFICATION	1.931655235960126E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998760561587	WITHOUT_CLASSIFICATION	1.23943841202911E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999992723644804	WITHOUT_CLASSIFICATION	7.276355196602675E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811401474215	WITHOUT_CLASSIFICATION	1.885985257851453E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999878569258492	WITHOUT_CLASSIFICATION	1.2143074150751991E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997033194131	WITHOUT_CLASSIFICATION	2.9668058683931313E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999997543477257	WITHOUT_CLASSIFICATION	2.4565227424846115E-7	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999990087549179	WITHOUT_CLASSIFICATION	9.912450820922203E-7	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.999999812768933	WITHOUT_CLASSIFICATION	1.8723106689739754E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811401474215	WITHOUT_CLASSIFICATION	1.885985257851453E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998894844712	WITHOUT_CLASSIFICATION	1.1051552877094406E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811401474215	WITHOUT_CLASSIFICATION	1.885985257851453E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999994015278261	WITHOUT_CLASSIFICATION	5.984721739328585E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999906908361378	WITHOUT_CLASSIFICATION	9.30916386219791E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999962904557439	WITHOUT_CLASSIFICATION	3.7095442560410187E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999999805237716	WITHOUT_CLASSIFICATION	1.947622839674062E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996553564507	WITHOUT_CLASSIFICATION	3.4464354928465935E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999978536772883	WITHOUT_CLASSIFICATION	2.146322711688557E-6	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999936886727308	WITHOUT_CLASSIFICATION	6.311327269292987E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999987877263748	WITHOUT_CLASSIFICATION	1.2122736251154133E-6	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999984492678049	WITHOUT_CLASSIFICATION	1.550732195016491E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999981844399232	WITHOUT_CLASSIFICATION	1.815560076859682E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999885488933542	WITHOUT_CLASSIFICATION	1.1451106645787898E-4	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999996179043036	WITHOUT_CLASSIFICATION	3.8209569644986933E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9922426080679928	WITHOUT_CLASSIFICATION	0.007757391932007172	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999912237977695	WITHOUT_CLASSIFICATION	8.776202230525058E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999748304687203	WITHOUT_CLASSIFICATION	2.5169531279767774E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999976570173228	WITHOUT_CLASSIFICATION	2.34298267725386E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999594316547755	WITHOUT_CLASSIFICATION	4.056834522460088E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998635240143	WITHOUT_CLASSIFICATION	1.3647598567213405E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999996944539381	WITHOUT_CLASSIFICATION	3.055460619217803E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999830242978	WITHOUT_CLASSIFICATION	1.697570216618832E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999994236826981	WITHOUT_CLASSIFICATION	5.76317301966582E-7	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998862525983	WITHOUT_CLASSIFICATION	1.137474016581112E-7	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999979366099122	WITHOUT_CLASSIFICATION	2.0633900877723515E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9910051790304408	WITHOUT_CLASSIFICATION	0.008994820969559255	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999913379201936	WITHOUT_CLASSIFICATION	8.662079806455948E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999967840907692	WITHOUT_CLASSIFICATION	3.215909230692914E-6	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999783402691774	WITHOUT_CLASSIFICATION	2.165973082253792E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999917538420071	WITHOUT_CLASSIFICATION	8.246157992985594E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9998552835949757	WITHOUT_CLASSIFICATION	1.447164050243922E-4	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999992771999366	WITHOUT_CLASSIFICATION	7.228000634129795E-7	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999904610609	WITHOUT_CLASSIFICATION	9.538939058225113E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999284684017	WITHOUT_CLASSIFICATION	7.153159834851043E-8	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999885968373027	WITHOUT_CLASSIFICATION	1.1403162697345885E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999932857115453	WITHOUT_CLASSIFICATION	6.714288454772628E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9916824296162624	WITHOUT_CLASSIFICATION	0.008317570383737592	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999333271012524	WITHOUT_CLASSIFICATION	6.667289874758834E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999996891023818	WITHOUT_CLASSIFICATION	3.108976182595221E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999908177683186	WITHOUT_CLASSIFICATION	9.18223168155551E-6	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998141593994077	WITHOUT_CLASSIFICATION	1.8584060059228814E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999993401114597	WITHOUT_CLASSIFICATION	6.598885402203197E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.968179174326602	WITHOUT_CLASSIFICATION	0.031820825673398	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999359945165	WITHOUT_CLASSIFICATION	6.400548338201692E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999996823883506	WITHOUT_CLASSIFICATION	3.1761164937139753E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999552855466869	WITHOUT_CLASSIFICATION	4.471445331301327E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999552855466869	WITHOUT_CLASSIFICATION	4.471445331301327E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999995550663939	WITHOUT_CLASSIFICATION	4.4493360602522375E-7	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999987877263748	WITHOUT_CLASSIFICATION	1.2122736251154133E-6	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999992327538202	WITHOUT_CLASSIFICATION	7.672461797622414E-7	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999957921072802	WITHOUT_CLASSIFICATION	4.20789271986762E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999626340047	WITHOUT_CLASSIFICATION	3.7365995342632325E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999995146907866	WITHOUT_CLASSIFICATION	4.85309213431752E-7	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999927867311879	WITHOUT_CLASSIFICATION	7.213268812160955E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9998506974073508	WITHOUT_CLASSIFICATION	1.4930259264911807E-4	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999911182532327	WITHOUT_CLASSIFICATION	8.881746767289741E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999993635696551	WITHOUT_CLASSIFICATION	6.364303449176342E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999674841232	WITHOUT_CLASSIFICATION	3.251587680599827E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999997641516639	WITHOUT_CLASSIFICATION	2.358483360879974E-7	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997030552851	WITHOUT_CLASSIFICATION	2.96944714972889E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999990790523331	WITHOUT_CLASSIFICATION	9.209476669291704E-7	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999988233159484	WITHOUT_CLASSIFICATION	1.176684051630303E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999996418553049	WITHOUT_CLASSIFICATION	3.5814469501377846E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999999960475501	WITHOUT_CLASSIFICATION	3.9524499120998035E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998878765081	WITHOUT_CLASSIFICATION	1.1212349189621018E-7	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998563777361	WITHOUT_CLASSIFICATION	1.4362226392039327E-7	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999886676639	WITHOUT_CLASSIFICATION	1.1332335997890376E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999982383049	WITHOUT_CLASSIFICATION	1.7616951172927133E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999994759911697	WITHOUT_CLASSIFICATION	5.24008830277432E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997078678007	WITHOUT_CLASSIFICATION	2.92132199317828E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998609793209	WITHOUT_CLASSIFICATION	1.3902067907187062E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.968179174326602	WITHOUT_CLASSIFICATION	0.031820825673398	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999995104401113	WITHOUT_CLASSIFICATION	4.89559888812676E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999312432417	WITHOUT_CLASSIFICATION	6.875675833609205E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998916688018	WITHOUT_CLASSIFICATION	1.083311982160686E-7	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999985952616988	WITHOUT_CLASSIFICATION	1.4047383012779397E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999994153990995	WITHOUT_CLASSIFICATION	5.846009003859497E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999993521486843	WITHOUT_CLASSIFICATION	6.478513157539371E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999587085550258	WITHOUT_CLASSIFICATION	4.129144497423849E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999996694891317	WITHOUT_CLASSIFICATION	3.3051086830703107E-6	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999991503658845	WITHOUT_CLASSIFICATION	8.496341154875852E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999996346877649	WITHOUT_CLASSIFICATION	3.653122351807305E-7	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999991045372014	WITHOUT_CLASSIFICATION	8.954627985608728E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999965985604273	WITHOUT_CLASSIFICATION	3.4014395726245044E-6	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9988419872612131	WITHOUT_CLASSIFICATION	0.0011580127387868957	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999899949276372	WITHOUT_CLASSIFICATION	1.0005072362945419E-5	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999993988336711	WITHOUT_CLASSIFICATION	6.011663289212006E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997322112809	WITHOUT_CLASSIFICATION	2.67788719120453E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997322112809	WITHOUT_CLASSIFICATION	2.67788719120453E-7	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999997979403026	WITHOUT_CLASSIFICATION	2.0205969738361402E-6	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999988656833052	WITHOUT_CLASSIFICATION	1.1343166948334902E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999982767853567	WITHOUT_CLASSIFICATION	1.723214643298336E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999982767853567	WITHOUT_CLASSIFICATION	1.723214643298336E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999433637811	WITHOUT_CLASSIFICATION	5.663621891364247E-8	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995623642384	WITHOUT_CLASSIFICATION	4.3763576156168874E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999713733541	WITHOUT_CLASSIFICATION	2.8626645952241032E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999971193097853	WITHOUT_CLASSIFICATION	2.880690214739835E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999590229812166	WITHOUT_CLASSIFICATION	4.09770187834242E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999959332723233	WITHOUT_CLASSIFICATION	4.066727676674424E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999726592403	WITHOUT_CLASSIFICATION	2.7340759679375857E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999726592403	WITHOUT_CLASSIFICATION	2.7340759679375857E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999954793711785	WITHOUT_CLASSIFICATION	4.520628821529126E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999997673704301	WITHOUT_CLASSIFICATION	2.326295700026622E-7	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999849068490941	WITHOUT_CLASSIFICATION	1.5093150905834308E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999994445341686	WITHOUT_CLASSIFICATION	5.554658313571758E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999994445341686	WITHOUT_CLASSIFICATION	5.554658313571758E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999992416455952	WITHOUT_CLASSIFICATION	7.583544046968791E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999995632526644	WITHOUT_CLASSIFICATION	4.367473356435652E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999979555661836	WITHOUT_CLASSIFICATION	2.044433816343253E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999984874441789	WITHOUT_CLASSIFICATION	1.5125558210534853E-6	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999980995578602	WITHOUT_CLASSIFICATION	1.9004421398176296E-6	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999982388731625	WITHOUT_CLASSIFICATION	1.7611268373720895E-6	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999999886955767	WITHOUT_CLASSIFICATION	1.1304423286774029E-7	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999998462196331	WITHOUT_CLASSIFICATION	1.5378036690957473E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999996786980075	WITHOUT_CLASSIFICATION	3.2130199239772E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999990245199734	WITHOUT_CLASSIFICATION	9.754800266491516E-7	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999960031641	WITHOUT_CLASSIFICATION	3.996835926865143E-9	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999995411762614	WITHOUT_CLASSIFICATION	4.588237386457545E-7	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999000832160311	WITHOUT_CLASSIFICATION	9.991678396888301E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999971404443646	WITHOUT_CLASSIFICATION	2.8595556353414574E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999922386739545	WITHOUT_CLASSIFICATION	7.761326045516033E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999966259216475	WITHOUT_CLASSIFICATION	3.3740783525176712E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999974938271	WITHOUT_CLASSIFICATION	2.506172903542456E-8	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999988546222862	WITHOUT_CLASSIFICATION	1.1453777137502004E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999997102346109	WITHOUT_CLASSIFICATION	2.897653890647988E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999946441566395	WITHOUT_CLASSIFICATION	5.355843360435283E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999992066764032	WITHOUT_CLASSIFICATION	7.933235969080575E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999940629920653	WITHOUT_CLASSIFICATION	5.937007934654368E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998787089459648	WITHOUT_CLASSIFICATION	1.2129105403533945E-4	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999350312670648	WITHOUT_CLASSIFICATION	6.496873293518029E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999849333056531	WITHOUT_CLASSIFICATION	1.5066694346766144E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999985837683472	WITHOUT_CLASSIFICATION	1.4162316527855391E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.999996987697537	WITHOUT_CLASSIFICATION	3.012302463030826E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999182783546826	WITHOUT_CLASSIFICATION	8.1721645317405E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999894469439	WITHOUT_CLASSIFICATION	1.0553056144867213E-8	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999865051102	WITHOUT_CLASSIFICATION	1.3494889848438194E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999999927308988	WITHOUT_CLASSIFICATION	7.269101193722851E-8	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998108375664	WITHOUT_CLASSIFICATION	1.8916243365080775E-7	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999994102035842	WITHOUT_CLASSIFICATION	5.897964158654698E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999983490131413	WITHOUT_CLASSIFICATION	1.6509868586854884E-6	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998166152139	WITHOUT_CLASSIFICATION	1.8338478622714347E-7	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999679032415117	WITHOUT_CLASSIFICATION	3.209675848832681E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.999989923054794	WITHOUT_CLASSIFICATION	1.0076945206059831E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999993583659422	WITHOUT_CLASSIFICATION	6.416340576696856E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999978372179348	WITHOUT_CLASSIFICATION	2.162782065268327E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999989797027592	WITHOUT_CLASSIFICATION	1.0202972407998864E-6	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999836224498	WITHOUT_CLASSIFICATION	1.637755021475958E-7	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999990313966006	WITHOUT_CLASSIFICATION	9.6860339937653E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999988248745023	WITHOUT_CLASSIFICATION	1.1751254977558761E-6	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999996703005442	WITHOUT_CLASSIFICATION	3.29699455888159E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999990567465143	WITHOUT_CLASSIFICATION	9.432534855860745E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999986217233612	WITHOUT_CLASSIFICATION	1.3782766388129047E-6	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999982069390225	WITHOUT_CLASSIFICATION	1.7930609774190918E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999740511261167	WITHOUT_CLASSIFICATION	2.594887388334577E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999995928908154	WITHOUT_CLASSIFICATION	4.071091846365847E-7	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999719918917775	WITHOUT_CLASSIFICATION	2.8008108222463987E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999996772496467	WITHOUT_CLASSIFICATION	3.2275035330011126E-6	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998983858533	WITHOUT_CLASSIFICATION	1.0161414662374244E-7	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999817571655197	WITHOUT_CLASSIFICATION	1.8242834480203267E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998544395882	WITHOUT_CLASSIFICATION	1.4556041189803293E-7	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.999999055179964	WITHOUT_CLASSIFICATION	9.448200359549892E-7	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999992091234714	WITHOUT_CLASSIFICATION	7.908765286390275E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999997200931013	WITHOUT_CLASSIFICATION	2.799068986703324E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999990575800457	WITHOUT_CLASSIFICATION	9.424199543921083E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999996432970999	WITHOUT_CLASSIFICATION	3.567029001331379E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9997502665783271	WITHOUT_CLASSIFICATION	2.4973342167290496E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997856732743	WITHOUT_CLASSIFICATION	2.1432672565491128E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997856732743	WITHOUT_CLASSIFICATION	2.1432672565491128E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9994697694190322	WITHOUT_CLASSIFICATION	5.302305809677115E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9996319968856906	WITHOUT_CLASSIFICATION	3.68003114309436E-4	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999462412532	WITHOUT_CLASSIFICATION	5.3758746799028086E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999994536477028	WITHOUT_CLASSIFICATION	5.463522971506716E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999968848206635	WITHOUT_CLASSIFICATION	3.1151793365833476E-6	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999809251183569	WITHOUT_CLASSIFICATION	1.907488164314126E-5	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.99999529308506	WITHOUT_CLASSIFICATION	4.706914939985099E-6	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999957232403	WITHOUT_CLASSIFICATION	4.27675980004583E-9	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999981395224581	WITHOUT_CLASSIFICATION	1.8604775418817246E-6	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999521970569225	WITHOUT_CLASSIFICATION	4.780294307739606E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999847001667	WITHOUT_CLASSIFICATION	1.5299833295707533E-7	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999960748043719	WITHOUT_CLASSIFICATION	3.9251956280788265E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998860507193	WITHOUT_CLASSIFICATION	1.1394928072201666E-7	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999331370695	WITHOUT_CLASSIFICATION	6.686293055246555E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999043661635	WITHOUT_CLASSIFICATION	9.563383649198953E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999043661635	WITHOUT_CLASSIFICATION	9.563383649198953E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999125426284	WITHOUT_CLASSIFICATION	8.745737149319515E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999959026035986	WITHOUT_CLASSIFICATION	4.097396401366936E-6	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997689534545	WITHOUT_CLASSIFICATION	2.3104654537547905E-7	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999992833682	WITHOUT_CLASSIFICATION	7.16631685858541E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992236313145	WITHOUT_CLASSIFICATION	7.763686854432114E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999076967175722	WITHOUT_CLASSIFICATION	9.2303282427797E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999922632429856	WITHOUT_CLASSIFICATION	7.736757014279115E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999989824816491	WITHOUT_CLASSIFICATION	1.0175183509099902E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999905449701715	WITHOUT_CLASSIFICATION	9.455029828560108E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999854049857	WITHOUT_CLASSIFICATION	1.4595014352356824E-8	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999980558465199	WITHOUT_CLASSIFICATION	1.9441534801112423E-6	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999961737407	WITHOUT_CLASSIFICATION	3.826259334835069E-9	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999992960233193	WITHOUT_CLASSIFICATION	7.039766808036838E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999953346543	WITHOUT_CLASSIFICATION	4.665345765664752E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998708227188	WITHOUT_CLASSIFICATION	1.2917728112671322E-7	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999993026777337	WITHOUT_CLASSIFICATION	6.973222662136868E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999998253938029	WITHOUT_CLASSIFICATION	1.7460619700691705E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999485699053023	WITHOUT_CLASSIFICATION	5.143009469766656E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999960751084952	WITHOUT_CLASSIFICATION	3.924891504727206E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999999451425625	WITHOUT_CLASSIFICATION	5.485743749985263E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999994559269492	WITHOUT_CLASSIFICATION	5.440730508515188E-7	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998112191	WITHOUT_CLASSIFICATION	1.8878082649181548E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999660397494	WITHOUT_CLASSIFICATION	3.396025048673721E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999996661138	WITHOUT_CLASSIFICATION	3.3388619965353433E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996919256262	WITHOUT_CLASSIFICATION	3.0807437377975557E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999813837233054	WITHOUT_CLASSIFICATION	1.861627669457103E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998999510383451	WITHOUT_CLASSIFICATION	1.0004896165504307E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999976055213067	WITHOUT_CLASSIFICATION	2.39447869329863E-6	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998889016772	WITHOUT_CLASSIFICATION	1.1109832272155453E-7	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999994753223844	WITHOUT_CLASSIFICATION	5.246776154821859E-7	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999874939919191	WITHOUT_CLASSIFICATION	1.2506008080911581E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999972591374824	WITHOUT_CLASSIFICATION	2.7408625176527504E-6	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999871499858971	WITHOUT_CLASSIFICATION	1.2850014102821435E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999999848706529	WITHOUT_CLASSIFICATION	1.5129347102419747E-7	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999961386837	WITHOUT_CLASSIFICATION	3.861316201576259E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996527514724	WITHOUT_CLASSIFICATION	3.472485276421286E-7	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999998788776504	WITHOUT_CLASSIFICATION	1.21122349619769E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992510124162	WITHOUT_CLASSIFICATION	7.489875837503492E-7	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999904135797	WITHOUT_CLASSIFICATION	9.586420283270207E-9	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999978345623946	WITHOUT_CLASSIFICATION	2.165437605392065E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999986364618323	WITHOUT_CLASSIFICATION	1.3635381677510101E-6	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999996732789268	WITHOUT_CLASSIFICATION	3.26721073222596E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999407373059	WITHOUT_CLASSIFICATION	5.926269413090237E-8	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999407373059	WITHOUT_CLASSIFICATION	5.926269413090237E-8	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999990932789447	WITHOUT_CLASSIFICATION	9.067210553926211E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997853618651	WITHOUT_CLASSIFICATION	2.1463813491501248E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999294255266	WITHOUT_CLASSIFICATION	7.057447340418752E-8	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999996442067337	WITHOUT_CLASSIFICATION	3.5579326629431475E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999942430893	WITHOUT_CLASSIFICATION	5.7569106920153085E-8	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999982288698	WITHOUT_CLASSIFICATION	1.771130225775877E-9	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999995932577498	WITHOUT_CLASSIFICATION	4.0674225018643736E-7	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999996692422564	WITHOUT_CLASSIFICATION	3.307577436624641E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999986397342	WITHOUT_CLASSIFICATION	1.3602657249384098E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818490809024	WITHOUT_CLASSIFICATION	1.8150919097576892E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812950568987	WITHOUT_CLASSIFICATION	1.8704943101192277E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999880098624834	WITHOUT_CLASSIFICATION	1.1990137516608334E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999948932254419	WITHOUT_CLASSIFICATION	5.1067745581205E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999698751936	WITHOUT_CLASSIFICATION	3.012480645380024E-8	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999994435806967	WITHOUT_CLASSIFICATION	5.564193033461326E-7	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999998016485411	WITHOUT_CLASSIFICATION	1.9835145890122063E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999507910575	WITHOUT_CLASSIFICATION	4.920894235857274E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999973163324	WITHOUT_CLASSIFICATION	2.6836676300517266E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.99999990742115	WITHOUT_CLASSIFICATION	9.257885006592609E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999996700303276	WITHOUT_CLASSIFICATION	3.2996967236559674E-7	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999779988664	WITHOUT_CLASSIFICATION	2.200113360882848E-7	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996856319923	WITHOUT_CLASSIFICATION	3.1436800776434014E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999433689765	WITHOUT_CLASSIFICATION	5.663102350898725E-8	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999948320348393	WITHOUT_CLASSIFICATION	5.167965160731464E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999995280358204	WITHOUT_CLASSIFICATION	4.719641796984923E-7	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999998944231271	WITHOUT_CLASSIFICATION	1.0557687292001585E-7	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999970703398581	WITHOUT_CLASSIFICATION	2.9296601419644773E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999735361091	WITHOUT_CLASSIFICATION	2.6463890902899316E-8	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999955396886513	WITHOUT_CLASSIFICATION	4.460311348791791E-6	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999993976340271	WITHOUT_CLASSIFICATION	6.023659728566085E-7	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999997299398592	WITHOUT_CLASSIFICATION	2.7006014082030943E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999778273629	WITHOUT_CLASSIFICATION	2.21726371660069E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998771786265	WITHOUT_CLASSIFICATION	1.2282137354005485E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999231248827	WITHOUT_CLASSIFICATION	7.687511735577E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999703197969	WITHOUT_CLASSIFICATION	2.9680203119011928E-8	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999942614571803	WITHOUT_CLASSIFICATION	5.73854281964628E-6	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999997512126725	WITHOUT_CLASSIFICATION	2.4878732748770573E-7	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999903921994	WITHOUT_CLASSIFICATION	9.60780063341534E-9	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999953259362483	WITHOUT_CLASSIFICATION	4.674063751696082E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999800117474	WITHOUT_CLASSIFICATION	1.9988252699805463E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999979435982779	WITHOUT_CLASSIFICATION	2.0564017221662675E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999898863127037	WITHOUT_CLASSIFICATION	1.0113687296268132E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999988528175052	WITHOUT_CLASSIFICATION	1.147182494712283E-6	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.99999989464641	WITHOUT_CLASSIFICATION	1.0535358996529971E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999890164958	WITHOUT_CLASSIFICATION	1.0983504324364069E-8	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999930108773565	WITHOUT_CLASSIFICATION	6.989122643538504E-6	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999804546984	WITHOUT_CLASSIFICATION	1.9545301594617834E-8	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999956568570135	WITHOUT_CLASSIFICATION	4.343142986500428E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999944608243024	WITHOUT_CLASSIFICATION	5.539175697529577E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998860507193	WITHOUT_CLASSIFICATION	1.1394928072201666E-7	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999987894751183	WITHOUT_CLASSIFICATION	1.2105248816978096E-5	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999986032141019	WITHOUT_CLASSIFICATION	1.3967858980401072E-6	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999434604095	WITHOUT_CLASSIFICATION	5.653959045419092E-8	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999997066303948	WITHOUT_CLASSIFICATION	2.933696052489034E-7	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999152760195	WITHOUT_CLASSIFICATION	8.472398046767155E-8	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999999993557187	WITHOUT_CLASSIFICATION	6.442812920947854E-9	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999991113599346	WITHOUT_CLASSIFICATION	8.886400653858954E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996374714299874	WITHOUT_CLASSIFICATION	3.6252857001266184E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999581990973	WITHOUT_CLASSIFICATION	4.1800902685964244E-7	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999982149989795	WITHOUT_CLASSIFICATION	1.785001020577348E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999951171293	WITHOUT_CLASSIFICATION	4.882870706877843E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999986442976466	WITHOUT_CLASSIFICATION	1.3557023534376775E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999986152404045	WITHOUT_CLASSIFICATION	1.38475959556414E-6	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999888573570601	WITHOUT_CLASSIFICATION	1.1142642939917375E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998027536767	WITHOUT_CLASSIFICATION	1.9724632325172297E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999637966036	WITHOUT_CLASSIFICATION	3.620339640221302E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999904310016086	WITHOUT_CLASSIFICATION	9.568998391432606E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999892038582899	WITHOUT_CLASSIFICATION	1.0796141710041076E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999847529623	WITHOUT_CLASSIFICATION	1.5247037812495526E-8	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999907191975266	WITHOUT_CLASSIFICATION	9.280802473410715E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999637966036	WITHOUT_CLASSIFICATION	3.620339640221302E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994008033117087	WITHOUT_CLASSIFICATION	5.991966882913503E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999925804224991	WITHOUT_CLASSIFICATION	7.419577500999987E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999996053983351	WITHOUT_CLASSIFICATION	3.9460166487648465E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999964616481746	WITHOUT_CLASSIFICATION	3.538351825506169E-6	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999948299889355	WITHOUT_CLASSIFICATION	5.170011064460899E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999288697072	WITHOUT_CLASSIFICATION	7.113029274858072E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999760845939	WITHOUT_CLASSIFICATION	2.391540617754559E-8	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9997393435852228	WITHOUT_CLASSIFICATION	2.6065641477722527E-4	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998665234614	WITHOUT_CLASSIFICATION	1.3347653847503692E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998447099919	WITHOUT_CLASSIFICATION	1.5529000813935228E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999998404858031	WITHOUT_CLASSIFICATION	1.5951419691825087E-7	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998658210678978	WITHOUT_CLASSIFICATION	1.3417893210223366E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999999979173745	WITHOUT_CLASSIFICATION	2.0826255160092293E-8	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999525159456	WITHOUT_CLASSIFICATION	4.74840544172997E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999890756076	WITHOUT_CLASSIFICATION	1.0924392496771329E-8	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999979745283277	WITHOUT_CLASSIFICATION	2.02547167235439E-6	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998609793209	WITHOUT_CLASSIFICATION	1.3902067907187062E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999345064544	WITHOUT_CLASSIFICATION	6.549354556340253E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998835211229	WITHOUT_CLASSIFICATION	1.1647887704981975E-7	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999996276915992	WITHOUT_CLASSIFICATION	3.723084007017627E-7	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999998796741325	WITHOUT_CLASSIFICATION	1.203258675349964E-7	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999663736053	WITHOUT_CLASSIFICATION	3.362639467760314E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999997934053095	WITHOUT_CLASSIFICATION	2.0659469057938157E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999970069426	WITHOUT_CLASSIFICATION	2.9930572162750407E-9	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999964092811	WITHOUT_CLASSIFICATION	3.5907190711841876E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999959723503	WITHOUT_CLASSIFICATION	4.027649692292674E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999946077037571	WITHOUT_CLASSIFICATION	5.392296242829101E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999986345687172	WITHOUT_CLASSIFICATION	1.3654312827849323E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997568447885	WITHOUT_CLASSIFICATION	2.431552114397417E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999982975343624	WITHOUT_CLASSIFICATION	1.7024656375011172E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.999999410373443	WITHOUT_CLASSIFICATION	5.896265570031385E-7	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999997383549135	WITHOUT_CLASSIFICATION	2.616450864431817E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999983902229967	WITHOUT_CLASSIFICATION	1.60977700325393E-6	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999997636294206	WITHOUT_CLASSIFICATION	2.3637057945393557E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999875181547	WITHOUT_CLASSIFICATION	1.248184530353998E-8	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999076376951	WITHOUT_CLASSIFICATION	9.236230492259596E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999879018374	WITHOUT_CLASSIFICATION	1.209816257556334E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999975136067976	WITHOUT_CLASSIFICATION	2.4863932024321326E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999998676299489	WITHOUT_CLASSIFICATION	1.323700511381651E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999643763648	WITHOUT_CLASSIFICATION	3.5623635168058564E-8	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999359901814	WITHOUT_CLASSIFICATION	6.40098186478425E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999012967613	WITHOUT_CLASSIFICATION	9.870323867665375E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999012967613	WITHOUT_CLASSIFICATION	9.870323867665375E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999944378923442	WITHOUT_CLASSIFICATION	5.562107655852436E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997372679471	WITHOUT_CLASSIFICATION	2.627320528404447E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992441756859	WITHOUT_CLASSIFICATION	7.558243141365153E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999794222566	WITHOUT_CLASSIFICATION	2.0577743413723914E-8	TEST
ignore	WITHOUT_CLASSIFICATION	0.999991508933961	WITHOUT_CLASSIFICATION	8.49106603905018E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999991508933961	WITHOUT_CLASSIFICATION	8.49106603905018E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9992390263251093	WITHOUT_CLASSIFICATION	7.609736748906508E-4	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999030837076	WITHOUT_CLASSIFICATION	9.691629242820682E-8	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999993954324033	WITHOUT_CLASSIFICATION	6.045675966499766E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999580111761	WITHOUT_CLASSIFICATION	4.1988823773952526E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999997731886486	WITHOUT_CLASSIFICATION	2.268113513024903E-7	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999961538249016	WITHOUT_CLASSIFICATION	3.84617509838515E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999990614030528	WITHOUT_CLASSIFICATION	9.38596947179356E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999983042006082	WITHOUT_CLASSIFICATION	1.6957993917813586E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999999584430503	WITHOUT_CLASSIFICATION	4.155694970995755E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998073729713	WITHOUT_CLASSIFICATION	1.9262702873763048E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998734446864364	WITHOUT_CLASSIFICATION	1.2655531356359762E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957582113016	WITHOUT_CLASSIFICATION	4.24178869846985E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957582113016	WITHOUT_CLASSIFICATION	4.24178869846985E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999835214037	WITHOUT_CLASSIFICATION	1.647859623101502E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997729738903276	WITHOUT_CLASSIFICATION	2.270261096724422E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999950542951759	WITHOUT_CLASSIFICATION	4.945704824098363E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999910103724446	WITHOUT_CLASSIFICATION	8.989627555296435E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999931640764425	WITHOUT_CLASSIFICATION	6.835923557517411E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995307829638	WITHOUT_CLASSIFICATION	4.6921703613543057E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9902800228010439	WITHOUT_CLASSIFICATION	0.00971997719895611	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990923195964	WITHOUT_CLASSIFICATION	9.076804035156097E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996221360334	WITHOUT_CLASSIFICATION	3.7786396647347676E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999995453780877	WITHOUT_CLASSIFICATION	4.546219123019311E-7	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999990985367867	WITHOUT_CLASSIFICATION	9.014632133389046E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998447099919	WITHOUT_CLASSIFICATION	1.5529000813935228E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999950271686752	WITHOUT_CLASSIFICATION	4.9728313248023585E-6	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999823045761513	WITHOUT_CLASSIFICATION	1.7695423848683462E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999994997128587	WITHOUT_CLASSIFICATION	5.002871412529161E-7	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.999999760574066	WITHOUT_CLASSIFICATION	2.3942593396924893E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999896074352816	WITHOUT_CLASSIFICATION	1.0392564718457885E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999998575066282	WITHOUT_CLASSIFICATION	1.4249337180171427E-6	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999967184815225	WITHOUT_CLASSIFICATION	3.281518477513606E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999310235156	WITHOUT_CLASSIFICATION	6.89764843999794E-8	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999413550426	WITHOUT_CLASSIFICATION	5.864495740139524E-8	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999815419904418	WITHOUT_CLASSIFICATION	1.8458009558239496E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999815419904418	WITHOUT_CLASSIFICATION	1.8458009558239496E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997928177535	WITHOUT_CLASSIFICATION	2.0718224652092193E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999997972131	WITHOUT_CLASSIFICATION	2.0278686806073187E-10	TEST
package	WITHOUT_CLASSIFICATION	0.9999641563752801	WITHOUT_CLASSIFICATION	3.584362471977543E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.99999997712504	WITHOUT_CLASSIFICATION	2.2874959980958155E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999990925850734	WITHOUT_CLASSIFICATION	9.074149267531554E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999159605416	WITHOUT_CLASSIFICATION	8.403945829934721E-8	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999036006454	WITHOUT_CLASSIFICATION	9.639935461616798E-8	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998924572435	WITHOUT_CLASSIFICATION	1.0754275651531892E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999205074377	WITHOUT_CLASSIFICATION	7.949256230095976E-8	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999946287377732	WITHOUT_CLASSIFICATION	5.371262226785994E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811401474215	WITHOUT_CLASSIFICATION	1.885985257851453E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999960029868212	WITHOUT_CLASSIFICATION	3.9970131787267265E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998655554356	WITHOUT_CLASSIFICATION	1.3444456435611623E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998724150644	WITHOUT_CLASSIFICATION	1.2758493565072514E-7	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999985285184039	WITHOUT_CLASSIFICATION	1.4714815961393784E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998323167243	WITHOUT_CLASSIFICATION	1.676832757320613E-7	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999596793405	WITHOUT_CLASSIFICATION	4.032065945302645E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999912496566304	WITHOUT_CLASSIFICATION	8.750343369568433E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999954741621507	WITHOUT_CLASSIFICATION	4.525837849213645E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999948662807527	WITHOUT_CLASSIFICATION	5.1337192472519505E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999063199023	WITHOUT_CLASSIFICATION	9.368009768948507E-8	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999978125106228	WITHOUT_CLASSIFICATION	2.1874893772178862E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999979555661836	WITHOUT_CLASSIFICATION	2.044433816343253E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999991778483274	WITHOUT_CLASSIFICATION	8.22151672525734E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999852451448	WITHOUT_CLASSIFICATION	1.4754855204981068E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999852451448	WITHOUT_CLASSIFICATION	1.4754855204981068E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999988993728204	WITHOUT_CLASSIFICATION	1.1006271795724125E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999992546645593	WITHOUT_CLASSIFICATION	7.453354408000604E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999903639875	WITHOUT_CLASSIFICATION	9.636012493479484E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999391211362	WITHOUT_CLASSIFICATION	6.087886376764263E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999992326606489	WITHOUT_CLASSIFICATION	7.673393510522542E-7	TEST
