test out the optimizer:	WITHOUT_CLASSIFICATION	0.999363950036514	WITHOUT_CLASSIFICATION	6.360499634860038E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999701944698214	WITHOUT_CLASSIFICATION	2.980553017859747E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999928902785064	WITHOUT_CLASSIFICATION	7.109721493625627E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999951737126264	WITHOUT_CLASSIFICATION	4.8262873736774244E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999951737126264	WITHOUT_CLASSIFICATION	4.8262873736774244E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999643099875429	WITHOUT_CLASSIFICATION	3.5690012457044164E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999514515793406	WITHOUT_CLASSIFICATION	4.8548420659443886E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999699110862909	WITHOUT_CLASSIFICATION	3.008891370925239E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999886796235603	WITHOUT_CLASSIFICATION	1.1320376439820483E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999831226305945	WITHOUT_CLASSIFICATION	1.687736940545845E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999831226305945	WITHOUT_CLASSIFICATION	1.687736940545845E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999758410298242	WITHOUT_CLASSIFICATION	2.415897017585861E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999897593589384	WITHOUT_CLASSIFICATION	1.024064106161265E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999766664035318	WITHOUT_CLASSIFICATION	2.3333596468224243E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999553476066214	WITHOUT_CLASSIFICATION	4.465239337852286E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999962935665405	WITHOUT_CLASSIFICATION	3.7064334595424426E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999780947127661	WITHOUT_CLASSIFICATION	2.190528723392608E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999652197684415	WITHOUT_CLASSIFICATION	3.478023155845229E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999984009546311	WITHOUT_CLASSIFICATION	1.599045368912809E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999779024268766	WITHOUT_CLASSIFICATION	2.209757312342823E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999779024268766	WITHOUT_CLASSIFICATION	2.209757312342823E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999623889179079	WITHOUT_CLASSIFICATION	3.761108209214425E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999779025692178	WITHOUT_CLASSIFICATION	2.2097430782195006E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999439953675479	WITHOUT_CLASSIFICATION	5.600463245203302E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999347898276791	WITHOUT_CLASSIFICATION	6.521017232094357E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999362207037402	WITHOUT_CLASSIFICATION	6.377929625973612E-5	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999998708464371	WITHOUT_CLASSIFICATION	1.2915356290453815E-6	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.999918975736616	WITHOUT_CLASSIFICATION	8.102426338384908E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999831331364689	WITHOUT_CLASSIFICATION	1.686686353103631E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999923916588648	WITHOUT_CLASSIFICATION	7.60834113522524E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999781370803403	WITHOUT_CLASSIFICATION	2.186291965961851E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999971196491117	WITHOUT_CLASSIFICATION	2.880350888303421E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9991717373030565	WITHOUT_CLASSIFICATION	8.282626969435647E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999880429928845	WITHOUT_CLASSIFICATION	1.1957007115496002E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999870616465746	WITHOUT_CLASSIFICATION	1.2938353425383254E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999790366440984	WITHOUT_CLASSIFICATION	2.096335590157833E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502207049162	WITHOUT_CLASSIFICATION	4.977929508377412E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999860814723757	WITHOUT_CLASSIFICATION	1.3918527624402658E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999380252643965	WITHOUT_CLASSIFICATION	6.197473560359689E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999783944619491	WITHOUT_CLASSIFICATION	2.1605538050880282E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999783944619491	WITHOUT_CLASSIFICATION	2.1605538050880282E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999860814723757	WITHOUT_CLASSIFICATION	1.3918527624402658E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996396255026069	WITHOUT_CLASSIFICATION	3.603744973931674E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999954542876806	WITHOUT_CLASSIFICATION	4.5457123194079004E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999805783612271	WITHOUT_CLASSIFICATION	1.9421638772846567E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999997971097487	WITHOUT_CLASSIFICATION	2.0289025131024904E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999986823615591	WITHOUT_CLASSIFICATION	1.3176384408892438E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9986141294655443	WITHOUT_CLASSIFICATION	0.0013858705344557407	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999100611282928	WITHOUT_CLASSIFICATION	8.993887170718357E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999899167284089	WITHOUT_CLASSIFICATION	1.008327159109073E-5	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999394437790905	WITHOUT_CLASSIFICATION	6.055622090957011E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999855672545551	WITHOUT_CLASSIFICATION	1.4432745444922739E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999783944619491	WITHOUT_CLASSIFICATION	2.1605538050880282E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999946593183772	WITHOUT_CLASSIFICATION	5.3406816228690465E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999011074610519	WITHOUT_CLASSIFICATION	9.8892538948094E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999816587555058	WITHOUT_CLASSIFICATION	1.8341244494115494E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999882255530408	WITHOUT_CLASSIFICATION	1.177444695924688E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999925157884312	WITHOUT_CLASSIFICATION	7.484211568804836E-6	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999824793050742	WITHOUT_CLASSIFICATION	1.752069492581031E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999453450314295	WITHOUT_CLASSIFICATION	5.4654968570402277E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999760414882685	WITHOUT_CLASSIFICATION	2.3958511731540274E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999934308774827	WITHOUT_CLASSIFICATION	6.569122517300453E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999969962469414	WITHOUT_CLASSIFICATION	3.003753058665495E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999954932105722	WITHOUT_CLASSIFICATION	4.506789427740833E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999377595228498	WITHOUT_CLASSIFICATION	6.224047715022311E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999819054221096	WITHOUT_CLASSIFICATION	1.8094577890339287E-5	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999846920430858	WITHOUT_CLASSIFICATION	1.530795691422276E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999988586726593	WITHOUT_CLASSIFICATION	1.1413273407550077E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999609184686444	WITHOUT_CLASSIFICATION	3.908153135556666E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999908617589444	WITHOUT_CLASSIFICATION	9.138241055594122E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999873441844292	WITHOUT_CLASSIFICATION	1.2655815570794933E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999983641093023	WITHOUT_CLASSIFICATION	1.6358906976535858E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999909208862491	WITHOUT_CLASSIFICATION	9.079113750951376E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9996719625564203	WITHOUT_CLASSIFICATION	3.2803744357970865E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999651006013656	WITHOUT_CLASSIFICATION	3.489939863447102E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999807757079267	WITHOUT_CLASSIFICATION	1.9224292073412904E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999763386199901	WITHOUT_CLASSIFICATION	2.3661380009847773E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999651006013656	WITHOUT_CLASSIFICATION	3.489939863447102E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999992305104273	WITHOUT_CLASSIFICATION	7.694895727774158E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999198730389358	WITHOUT_CLASSIFICATION	8.012696106418452E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999970264859389	WITHOUT_CLASSIFICATION	2.9735140610876806E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999913565256469	WITHOUT_CLASSIFICATION	8.643474353192868E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999726070602146	WITHOUT_CLASSIFICATION	2.739293978542981E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999726070602146	WITHOUT_CLASSIFICATION	2.739293978542981E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999790571886936	WITHOUT_CLASSIFICATION	2.0942811306362993E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999574999397821	WITHOUT_CLASSIFICATION	4.250006021793966E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999801466698681	WITHOUT_CLASSIFICATION	1.9853330131860442E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999594974121196	WITHOUT_CLASSIFICATION	4.050258788038341E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999921104032419	WITHOUT_CLASSIFICATION	7.889596758165263E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999708281106016	WITHOUT_CLASSIFICATION	2.9171889398414274E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999963224504914	WITHOUT_CLASSIFICATION	3.677549508592515E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999960422657961	WITHOUT_CLASSIFICATION	3.957734203925787E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999859140095154	WITHOUT_CLASSIFICATION	1.4085990484545416E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999819269280171	WITHOUT_CLASSIFICATION	1.8073071982878393E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999473974836915	WITHOUT_CLASSIFICATION	5.260251630844681E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999473974836915	WITHOUT_CLASSIFICATION	5.260251630844681E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999851000493087	WITHOUT_CLASSIFICATION	1.48999506911586E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999930405154919	WITHOUT_CLASSIFICATION	6.959484508073314E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999772647989572	WITHOUT_CLASSIFICATION	2.2735201042780478E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999473974836915	WITHOUT_CLASSIFICATION	5.260251630844681E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999851000493087	WITHOUT_CLASSIFICATION	1.48999506911586E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999851000493087	WITHOUT_CLASSIFICATION	1.48999506911586E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999786318836895	WITHOUT_CLASSIFICATION	2.1368116310455824E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999779773101173	WITHOUT_CLASSIFICATION	2.202268988278436E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999681450192501	WITHOUT_CLASSIFICATION	3.1854980749840495E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999388152080851	WITHOUT_CLASSIFICATION	6.118479191488534E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999745473088923	WITHOUT_CLASSIFICATION	2.5452691107573055E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999745473088923	WITHOUT_CLASSIFICATION	2.5452691107573055E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999829225913395	WITHOUT_CLASSIFICATION	1.7077408660432492E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.99996793106146	WITHOUT_CLASSIFICATION	3.20689385399301E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999826947054701	WITHOUT_CLASSIFICATION	1.73052945299171E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999869292227932	WITHOUT_CLASSIFICATION	1.3070777206836981E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999869292227932	WITHOUT_CLASSIFICATION	1.3070777206836981E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999781486866383	WITHOUT_CLASSIFICATION	2.1851313361762416E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999416964825549	WITHOUT_CLASSIFICATION	5.830351744513719E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996393185765247	WITHOUT_CLASSIFICATION	3.6068142347533657E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999974726721408	WITHOUT_CLASSIFICATION	2.5273278591977236E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9986979427056124	WITHOUT_CLASSIFICATION	0.0013020572943876398	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999932530564308	WITHOUT_CLASSIFICATION	6.746943569089676E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999179251422778	WITHOUT_CLASSIFICATION	8.207485772213239E-5	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999457366513852	WITHOUT_CLASSIFICATION	5.4263348614692234E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996393185765247	WITHOUT_CLASSIFICATION	3.6068142347533657E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999306408982832	WITHOUT_CLASSIFICATION	6.93591017167332E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999834286600576	WITHOUT_CLASSIFICATION	1.6571339942385E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999834286600576	WITHOUT_CLASSIFICATION	1.6571339942385E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9997714006556729	WITHOUT_CLASSIFICATION	2.2859934432696626E-4	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999275094128356	WITHOUT_CLASSIFICATION	7.249058716440427E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999655930626772	WITHOUT_CLASSIFICATION	3.440693732275618E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998566337315665	WITHOUT_CLASSIFICATION	1.433662684335185E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999909372100685	WITHOUT_CLASSIFICATION	9.062789931498237E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999486826364742	WITHOUT_CLASSIFICATION	5.1317363525797535E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999151289043489	WITHOUT_CLASSIFICATION	8.487109565112548E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999896276487018	WITHOUT_CLASSIFICATION	1.0372351298151552E-5	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999842361409945	WITHOUT_CLASSIFICATION	1.5763859005410417E-5	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999958801644054	WITHOUT_CLASSIFICATION	4.119835594526729E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999958801644054	WITHOUT_CLASSIFICATION	4.119835594526729E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999363950036514	WITHOUT_CLASSIFICATION	6.360499634860038E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999991463709168	WITHOUT_CLASSIFICATION	8.536290832021913E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999782886426364	WITHOUT_CLASSIFICATION	2.171135736362216E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999808943132162	WITHOUT_CLASSIFICATION	1.9105686783666152E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999837930925907	WITHOUT_CLASSIFICATION	1.620690740938143E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999804671402819	WITHOUT_CLASSIFICATION	1.9532859718039762E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999448469245902	WITHOUT_CLASSIFICATION	5.515307540981518E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999605011720736	WITHOUT_CLASSIFICATION	3.949882792634876E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999780048365606	WITHOUT_CLASSIFICATION	2.1995163439393853E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999892738094621	WITHOUT_CLASSIFICATION	1.0726190537881583E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999804671402819	WITHOUT_CLASSIFICATION	1.9532859718039762E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997492902043131	WITHOUT_CLASSIFICATION	2.507097956867855E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999816447909716	WITHOUT_CLASSIFICATION	1.835520902842948E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999821797008869	WITHOUT_CLASSIFICATION	1.7820299113112536E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999890405536473	WITHOUT_CLASSIFICATION	1.0959446352616873E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999851539498189	WITHOUT_CLASSIFICATION	1.484605018111868E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999951737126264	WITHOUT_CLASSIFICATION	4.8262873736774244E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999799374549039	WITHOUT_CLASSIFICATION	2.0062545096196735E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999802410078292	WITHOUT_CLASSIFICATION	1.9758992170816814E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999904755313799	WITHOUT_CLASSIFICATION	9.524468620097016E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999889334133274	WITHOUT_CLASSIFICATION	1.1066586672648372E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999779007926456	WITHOUT_CLASSIFICATION	2.2099207354340905E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999646843715085	WITHOUT_CLASSIFICATION	3.53156284915108E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999656282229741	WITHOUT_CLASSIFICATION	3.4371777025922954E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999953067569327	WITHOUT_CLASSIFICATION	4.693243067369119E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999796102747404	WITHOUT_CLASSIFICATION	2.038972525962652E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999876289386521	WITHOUT_CLASSIFICATION	1.2371061347972249E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999780048365606	WITHOUT_CLASSIFICATION	2.1995163439393853E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999779007926456	WITHOUT_CLASSIFICATION	2.2099207354340905E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999643099875429	WITHOUT_CLASSIFICATION	3.5690012457044164E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999843165090928	WITHOUT_CLASSIFICATION	1.5683490907197703E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999569361836291	WITHOUT_CLASSIFICATION	4.3063816370822645E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999789898265148	WITHOUT_CLASSIFICATION	2.101017348516432E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999780575257844	WITHOUT_CLASSIFICATION	2.19424742155372E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999763972028916	WITHOUT_CLASSIFICATION	2.36027971084616E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999781298738543	WITHOUT_CLASSIFICATION	2.1870126145678598E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9997915513710011	WITHOUT_CLASSIFICATION	2.0844862899900546E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999248373594584	WITHOUT_CLASSIFICATION	7.516264054163923E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999248373594584	WITHOUT_CLASSIFICATION	7.516264054163923E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999647633923626	WITHOUT_CLASSIFICATION	3.523660763740573E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999928877007588	WITHOUT_CLASSIFICATION	7.112299241168813E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.999735187798281	WITHOUT_CLASSIFICATION	2.648122017190319E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999729681769601	WITHOUT_CLASSIFICATION	2.7031823039878495E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999632222314199	WITHOUT_CLASSIFICATION	3.677776858017383E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999811701615586	WITHOUT_CLASSIFICATION	1.8829838441337208E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999874130330776	WITHOUT_CLASSIFICATION	1.2586966922347307E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999514515793406	WITHOUT_CLASSIFICATION	4.8548420659443886E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999967064366246	WITHOUT_CLASSIFICATION	3.293563375335105E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999967064366246	WITHOUT_CLASSIFICATION	3.293563375335105E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999922018560023	WITHOUT_CLASSIFICATION	7.798143997643566E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999865042213475	WITHOUT_CLASSIFICATION	1.3495778652424275E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999922018560023	WITHOUT_CLASSIFICATION	7.798143997643566E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999823318340062	WITHOUT_CLASSIFICATION	1.7668165993822906E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999796570704903	WITHOUT_CLASSIFICATION	2.034292950962504E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999906633551041	WITHOUT_CLASSIFICATION	9.33664489585854E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999780048365606	WITHOUT_CLASSIFICATION	2.1995163439393853E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999779007926456	WITHOUT_CLASSIFICATION	2.2099207354340905E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999779007926456	WITHOUT_CLASSIFICATION	2.2099207354340905E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999907018931282	WITHOUT_CLASSIFICATION	9.298106871646545E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999661700473252	WITHOUT_CLASSIFICATION	3.382995267483539E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999986090822088	WITHOUT_CLASSIFICATION	1.3909177911965737E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999886796235603	WITHOUT_CLASSIFICATION	1.1320376439820483E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999886796235603	WITHOUT_CLASSIFICATION	1.1320376439820483E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9999667899096999	WITHOUT_CLASSIFICATION	3.321009030017267E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999913739413696	WITHOUT_CLASSIFICATION	8.626058630460394E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999604825037092	WITHOUT_CLASSIFICATION	3.9517496290851034E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999790564151886	WITHOUT_CLASSIFICATION	2.0943584811421964E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999827948377465	WITHOUT_CLASSIFICATION	1.7205162253494564E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999781179146242	WITHOUT_CLASSIFICATION	2.188208537578213E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999831226305945	WITHOUT_CLASSIFICATION	1.687736940545845E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999779372001488	WITHOUT_CLASSIFICATION	2.2062799851166348E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999779372001488	WITHOUT_CLASSIFICATION	2.2062799851166348E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999758410298242	WITHOUT_CLASSIFICATION	2.415897017585861E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999758410298242	WITHOUT_CLASSIFICATION	2.415897017585861E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999870285384989	WITHOUT_CLASSIFICATION	1.2971461501188698E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999870285384989	WITHOUT_CLASSIFICATION	1.2971461501188698E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999517444298275	WITHOUT_CLASSIFICATION	4.825557017251396E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999517444298275	WITHOUT_CLASSIFICATION	4.825557017251396E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999886796235603	WITHOUT_CLASSIFICATION	1.1320376439820483E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999831226305945	WITHOUT_CLASSIFICATION	1.687736940545845E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999779372001488	WITHOUT_CLASSIFICATION	2.2062799851166348E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999779372001488	WITHOUT_CLASSIFICATION	2.2062799851166348E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999758410298242	WITHOUT_CLASSIFICATION	2.415897017585861E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999870285384989	WITHOUT_CLASSIFICATION	1.2971461501188698E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999870285384989	WITHOUT_CLASSIFICATION	1.2971461501188698E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999517444298275	WITHOUT_CLASSIFICATION	4.825557017251396E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999814143386704	WITHOUT_CLASSIFICATION	1.8585661329630743E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999989506670605	WITHOUT_CLASSIFICATION	1.0493329394892146E-5	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999907064824076	WITHOUT_CLASSIFICATION	9.29351759239316E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999324339435869	WITHOUT_CLASSIFICATION	6.756605641305539E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999925873322263	WITHOUT_CLASSIFICATION	7.4126677736748685E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999779062873418	WITHOUT_CLASSIFICATION	2.2093712658124367E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999986004026061	WITHOUT_CLASSIFICATION	1.3995973939037345E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999835934220533	WITHOUT_CLASSIFICATION	1.640657794665305E-5	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998077378305245	WITHOUT_CLASSIFICATION	1.9226216947549203E-4	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999722527186424	WITHOUT_CLASSIFICATION	2.774728135750924E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999600665547266	WITHOUT_CLASSIFICATION	3.9933445273467625E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999836132678583	WITHOUT_CLASSIFICATION	1.6386732141682318E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999790571886936	WITHOUT_CLASSIFICATION	2.0942811306362993E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999779062873418	WITHOUT_CLASSIFICATION	2.2093712658124367E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999779062873418	WITHOUT_CLASSIFICATION	2.2093712658124367E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999779062873418	WITHOUT_CLASSIFICATION	2.2093712658124367E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999909187076782	WITHOUT_CLASSIFICATION	9.081292321797493E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999616053141338	WITHOUT_CLASSIFICATION	3.8394685866188346E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999616053141338	WITHOUT_CLASSIFICATION	3.8394685866188346E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999517785341268	WITHOUT_CLASSIFICATION	4.822146587319205E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999711111535924	WITHOUT_CLASSIFICATION	2.8888846407649286E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9997703280201439	WITHOUT_CLASSIFICATION	2.2967197985611335E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999676521972494	WITHOUT_CLASSIFICATION	3.234780275063609E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999676521972494	WITHOUT_CLASSIFICATION	3.234780275063609E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999962935665405	WITHOUT_CLASSIFICATION	3.7064334595424426E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999950857351412	WITHOUT_CLASSIFICATION	4.914264858802528E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999950857351412	WITHOUT_CLASSIFICATION	4.914264858802528E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999288857199142	WITHOUT_CLASSIFICATION	7.111428008574099E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999668310238548	WITHOUT_CLASSIFICATION	3.316897614522519E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999984009546311	WITHOUT_CLASSIFICATION	1.599045368912809E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9946471177770357	WITHOUT_CLASSIFICATION	0.005352882222964255	TEST
ID	WITHOUT_CLASSIFICATION	0.9999780947127661	WITHOUT_CLASSIFICATION	2.190528723392608E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999839523634294	WITHOUT_CLASSIFICATION	1.6047636570627737E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673965356578	WITHOUT_CLASSIFICATION	3.2603464342169796E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996370229417108	WITHOUT_CLASSIFICATION	3.6297705828930037E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999142618522685	WITHOUT_CLASSIFICATION	8.573814773143338E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999347898276791	WITHOUT_CLASSIFICATION	6.521017232094357E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999982774458838	WITHOUT_CLASSIFICATION	1.7225541161616501E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999785733508194	WITHOUT_CLASSIFICATION	2.1426649180537798E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999785802240583	WITHOUT_CLASSIFICATION	2.1419775941733714E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999977907823727	WITHOUT_CLASSIFICATION	2.2092176272991505E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999984009546311	WITHOUT_CLASSIFICATION	1.599045368912809E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999832550690059	WITHOUT_CLASSIFICATION	1.6744930994205086E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999791840691081	WITHOUT_CLASSIFICATION	2.0815930891945223E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999779048339045	WITHOUT_CLASSIFICATION	2.209516609551866E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999977907823727	WITHOUT_CLASSIFICATION	2.2092176272991505E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999832550690059	WITHOUT_CLASSIFICATION	1.6744930994205086E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999779048339045	WITHOUT_CLASSIFICATION	2.209516609551866E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998906272060988	WITHOUT_CLASSIFICATION	1.093727939011464E-4	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998906272060988	WITHOUT_CLASSIFICATION	1.093727939011464E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999779024268766	WITHOUT_CLASSIFICATION	2.209757312342823E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999808134973637	WITHOUT_CLASSIFICATION	1.9186502636392423E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.999979983316424	WITHOUT_CLASSIFICATION	2.0016683576029344E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997206371770067	WITHOUT_CLASSIFICATION	2.7936282299337214E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.999860779026899	WITHOUT_CLASSIFICATION	1.3922097310116116E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999804626292829	WITHOUT_CLASSIFICATION	1.9537370717142964E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999540065178776	WITHOUT_CLASSIFICATION	4.599348212240389E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999592263529019	WITHOUT_CLASSIFICATION	4.077364709804174E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999921829300698	WITHOUT_CLASSIFICATION	7.817069930150671E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999540065178776	WITHOUT_CLASSIFICATION	4.599348212240389E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999779025692178	WITHOUT_CLASSIFICATION	2.2097430782195006E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999985356787251	WITHOUT_CLASSIFICATION	1.4643212749142929E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999977907823727	WITHOUT_CLASSIFICATION	2.2092176272991505E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999711081625879	WITHOUT_CLASSIFICATION	2.889183741194728E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.999993673854321	WITHOUT_CLASSIFICATION	6.326145679043024E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9995037510997385	WITHOUT_CLASSIFICATION	4.962489002613859E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999915889549222	WITHOUT_CLASSIFICATION	8.411045077785913E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998977769232642	WITHOUT_CLASSIFICATION	1.0222307673587976E-4	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999976482864641	WITHOUT_CLASSIFICATION	2.351713536007039E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999377723736707	WITHOUT_CLASSIFICATION	6.222762632932655E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.999991502793853	WITHOUT_CLASSIFICATION	8.49720614707129E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999787666338006	WITHOUT_CLASSIFICATION	2.1233366199424146E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999238320199768	WITHOUT_CLASSIFICATION	7.616798002320266E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999347898276791	WITHOUT_CLASSIFICATION	6.521017232094357E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999796196155609	WITHOUT_CLASSIFICATION	2.0380384439054854E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.99955376095155	WITHOUT_CLASSIFICATION	4.4623904844992156E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999709451226723	WITHOUT_CLASSIFICATION	2.9054877327765937E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999903878342012	WITHOUT_CLASSIFICATION	9.612165798836822E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999904334900149	WITHOUT_CLASSIFICATION	9.56650998502869E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999636675878266	WITHOUT_CLASSIFICATION	3.633241217325227E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999702718224167	WITHOUT_CLASSIFICATION	2.9728177583351054E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999164913661426	WITHOUT_CLASSIFICATION	8.350863385744982E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999542015271848	WITHOUT_CLASSIFICATION	4.579847281527598E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999792821454486	WITHOUT_CLASSIFICATION	2.0717854551411555E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999958330621239	WITHOUT_CLASSIFICATION	4.16693787603508E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999958330621239	WITHOUT_CLASSIFICATION	4.16693787603508E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999759549748783	WITHOUT_CLASSIFICATION	2.404502512161512E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999839409861976	WITHOUT_CLASSIFICATION	1.6059013802418677E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999964050378246	WITHOUT_CLASSIFICATION	3.594962175493789E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999759501500579	WITHOUT_CLASSIFICATION	2.4049849942022876E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999759225155704	WITHOUT_CLASSIFICATION	2.407748442961248E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999772206039714	WITHOUT_CLASSIFICATION	2.2779396028595334E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999825716556581	WITHOUT_CLASSIFICATION	1.742834434187848E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9993871856054178	WITHOUT_CLASSIFICATION	6.128143945821406E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999642300264177	WITHOUT_CLASSIFICATION	3.576997358240411E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999951852820489	WITHOUT_CLASSIFICATION	4.814717951055291E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999785728097741	WITHOUT_CLASSIFICATION	2.142719022589609E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999848546704633	WITHOUT_CLASSIFICATION	1.5145329536768956E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999797858796515	WITHOUT_CLASSIFICATION	2.021412034838139E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999780271622235	WITHOUT_CLASSIFICATION	2.1972837776438184E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999605774546049	WITHOUT_CLASSIFICATION	3.9422545395114E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999928048817063	WITHOUT_CLASSIFICATION	7.195118293645783E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659799039071	WITHOUT_CLASSIFICATION	3.4020096092955285E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999056475779	WITHOUT_CLASSIFICATION	9.435242210039452E-6	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999626913611592	WITHOUT_CLASSIFICATION	3.730863884076168E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999883526357659	WITHOUT_CLASSIFICATION	1.1647364234050858E-5	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999966494313498	WITHOUT_CLASSIFICATION	3.3505686502161066E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999406545178545	WITHOUT_CLASSIFICATION	5.93454821454972E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999928048817063	WITHOUT_CLASSIFICATION	7.195118293645783E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.999978604610555	WITHOUT_CLASSIFICATION	2.1395389445040704E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999645244468955	WITHOUT_CLASSIFICATION	3.547555310451032E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999645244468955	WITHOUT_CLASSIFICATION	3.547555310451032E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999672482932828	WITHOUT_CLASSIFICATION	3.275170671722328E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999060306149491	WITHOUT_CLASSIFICATION	9.396938505081957E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999056475779	WITHOUT_CLASSIFICATION	9.435242210039452E-6	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999767514229684	WITHOUT_CLASSIFICATION	2.3248577031630545E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999804816745514	WITHOUT_CLASSIFICATION	1.9518325448536164E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999801827134391	WITHOUT_CLASSIFICATION	1.9817286560895344E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999815612319747	WITHOUT_CLASSIFICATION	1.843876802529977E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999815612319747	WITHOUT_CLASSIFICATION	1.843876802529977E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.999958883736568	WITHOUT_CLASSIFICATION	4.111626343207268E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999785843171922	WITHOUT_CLASSIFICATION	2.1415682807733786E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999785843171922	WITHOUT_CLASSIFICATION	2.1415682807733786E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999542015271848	WITHOUT_CLASSIFICATION	4.579847281527598E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999460207055964	WITHOUT_CLASSIFICATION	5.39792944037636E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998227399832978	WITHOUT_CLASSIFICATION	1.7726001670218685E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999890802157595	WITHOUT_CLASSIFICATION	1.091978424053842E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998227399832978	WITHOUT_CLASSIFICATION	1.7726001670218685E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999890802157595	WITHOUT_CLASSIFICATION	1.091978424053842E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999089921301343	WITHOUT_CLASSIFICATION	9.100786986570336E-5	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999646154109251	WITHOUT_CLASSIFICATION	3.538458907489605E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999960177309242	WITHOUT_CLASSIFICATION	3.9822690758054476E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999926661417085	WITHOUT_CLASSIFICATION	7.333858291592013E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999422266360802	WITHOUT_CLASSIFICATION	5.7773363919730414E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9994832568592356	WITHOUT_CLASSIFICATION	5.16743140764422E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.999909412113018	WITHOUT_CLASSIFICATION	9.058788698197213E-5	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.999909412113018	WITHOUT_CLASSIFICATION	9.058788698197213E-5	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999660931938382	WITHOUT_CLASSIFICATION	3.390680616174657E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999774108334504	WITHOUT_CLASSIFICATION	2.2589166549632823E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999823889005616	WITHOUT_CLASSIFICATION	1.7611099438457774E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999954697302644	WITHOUT_CLASSIFICATION	4.530269735574881E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999941996775968	WITHOUT_CLASSIFICATION	5.8003224032163765E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999793297730203	WITHOUT_CLASSIFICATION	2.0670226979632945E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999793297730203	WITHOUT_CLASSIFICATION	2.0670226979632945E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999104832632308	WITHOUT_CLASSIFICATION	8.951673676916537E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999104832632308	WITHOUT_CLASSIFICATION	8.951673676916537E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999963240681545	WITHOUT_CLASSIFICATION	3.675931845428242E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999089921301343	WITHOUT_CLASSIFICATION	9.100786986570336E-5	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999742333106496	WITHOUT_CLASSIFICATION	2.5766689350389702E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997313184094203	WITHOUT_CLASSIFICATION	2.6868159057961055E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996329011368874	WITHOUT_CLASSIFICATION	3.670988631125487E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999388978170236	WITHOUT_CLASSIFICATION	6.11021829763376E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995851643341209	WITHOUT_CLASSIFICATION	4.148356658790295E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999089921301343	WITHOUT_CLASSIFICATION	9.100786986570336E-5	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999388978170236	WITHOUT_CLASSIFICATION	6.11021829763376E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995851643341209	WITHOUT_CLASSIFICATION	4.148356658790295E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999440097492153	WITHOUT_CLASSIFICATION	5.599025078463357E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999790796407694	WITHOUT_CLASSIFICATION	2.092035923064605E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999854654423161	WITHOUT_CLASSIFICATION	1.453455768394084E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999089921301343	WITHOUT_CLASSIFICATION	9.100786986570336E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999089921301343	WITHOUT_CLASSIFICATION	9.100786986570336E-5	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999844264322489	WITHOUT_CLASSIFICATION	1.557356775107457E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999846932978183	WITHOUT_CLASSIFICATION	1.530670218180073E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999949500766694	WITHOUT_CLASSIFICATION	5.0499233306562314E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999870616465746	WITHOUT_CLASSIFICATION	1.2938353425383254E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999924396249429	WITHOUT_CLASSIFICATION	7.560375057090751E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999965464411443	WITHOUT_CLASSIFICATION	3.4535588555483782E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998453740338945	WITHOUT_CLASSIFICATION	1.5462596610548194E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999876204649198	WITHOUT_CLASSIFICATION	1.2379535080093817E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999866244582796	WITHOUT_CLASSIFICATION	1.3375541720490677E-5	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999386988150805	WITHOUT_CLASSIFICATION	6.130118491955531E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999785626613349	WITHOUT_CLASSIFICATION	2.143733866514912E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999798538263114	WITHOUT_CLASSIFICATION	2.0146173688660615E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999723210816296	WITHOUT_CLASSIFICATION	2.7678918370404495E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999627056842881	WITHOUT_CLASSIFICATION	3.729431571182997E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500223489647	WITHOUT_CLASSIFICATION	4.9977651035330015E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997321617432078	WITHOUT_CLASSIFICATION	2.6783825679214447E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999870616465746	WITHOUT_CLASSIFICATION	1.2938353425383254E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999798817639022	WITHOUT_CLASSIFICATION	2.0118236097759124E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999659848366871	WITHOUT_CLASSIFICATION	3.401516331280279E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999814135749886	WITHOUT_CLASSIFICATION	1.8586425011389175E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999539019524764	WITHOUT_CLASSIFICATION	4.609804752369636E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999785923716817	WITHOUT_CLASSIFICATION	2.1407628318235846E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999785923716817	WITHOUT_CLASSIFICATION	2.1407628318235846E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999870616465746	WITHOUT_CLASSIFICATION	1.2938353425383254E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999876145300763	WITHOUT_CLASSIFICATION	1.2385469923694183E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9992918033679196	WITHOUT_CLASSIFICATION	7.081966320804259E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9986055861291768	WITHOUT_CLASSIFICATION	0.001394413870823178	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999992912216811	WITHOUT_CLASSIFICATION	7.087783189046043E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999779169750719	WITHOUT_CLASSIFICATION	2.2083024928144928E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999929925140403	WITHOUT_CLASSIFICATION	7.007485959704956E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999788075855884	WITHOUT_CLASSIFICATION	2.1192414411594416E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999997081894275	WITHOUT_CLASSIFICATION	2.918105725032525E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999955294299218	WITHOUT_CLASSIFICATION	4.47057007820288E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999469519121734	WITHOUT_CLASSIFICATION	5.3048087826671904E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999526772914179	WITHOUT_CLASSIFICATION	4.7322708582168654E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999778349441776	WITHOUT_CLASSIFICATION	2.2165055822452135E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999939794554201	WITHOUT_CLASSIFICATION	6.020544579924527E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844246696395	WITHOUT_CLASSIFICATION	1.557533036055313E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999523698891658	WITHOUT_CLASSIFICATION	4.7630110834284346E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999872466197135	WITHOUT_CLASSIFICATION	1.275338028645713E-5	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999929139998843	WITHOUT_CLASSIFICATION	7.086000115685235E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838180955177	WITHOUT_CLASSIFICATION	1.6181904482234233E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999453330536209	WITHOUT_CLASSIFICATION	5.4666946379035164E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999600942288759	WITHOUT_CLASSIFICATION	3.990577112420303E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999953900255965	WITHOUT_CLASSIFICATION	4.609974403531553E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784903174761	WITHOUT_CLASSIFICATION	2.1509682523982915E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782573040898	WITHOUT_CLASSIFICATION	2.1742695910118034E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652822093797	WITHOUT_CLASSIFICATION	3.471779062030494E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514957750362	WITHOUT_CLASSIFICATION	4.850422496383158E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999673056278657	WITHOUT_CLASSIFICATION	3.269437213427199E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999578752816399	WITHOUT_CLASSIFICATION	4.212471836010917E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667264606857	WITHOUT_CLASSIFICATION	3.3273539314199234E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695673200699	WITHOUT_CLASSIFICATION	3.0432679930114496E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965927287467	WITHOUT_CLASSIFICATION	3.407271253306661E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999771803881481	WITHOUT_CLASSIFICATION	2.2819611851979018E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640266350257	WITHOUT_CLASSIFICATION	3.597336497431402E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640618851129	WITHOUT_CLASSIFICATION	3.5938114887103466E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999498072599935	WITHOUT_CLASSIFICATION	5.019274000650972E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500812012427	WITHOUT_CLASSIFICATION	4.9918798757296605E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999791192595311	WITHOUT_CLASSIFICATION	2.0880740468990482E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999807146722872	WITHOUT_CLASSIFICATION	1.9285327712736338E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999991608230842	WITHOUT_CLASSIFICATION	8.391769158966371E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999051272331503	WITHOUT_CLASSIFICATION	9.48727668496668E-5	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999806154580364	WITHOUT_CLASSIFICATION	1.9384541963600594E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999792871601879	WITHOUT_CLASSIFICATION	2.0712839812138025E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999925858899936	WITHOUT_CLASSIFICATION	7.414110006385303E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999759105846924	WITHOUT_CLASSIFICATION	2.408941530755405E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999777275278682	WITHOUT_CLASSIFICATION	2.2272472131801566E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999780745421806	WITHOUT_CLASSIFICATION	2.1925457819504415E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999932733326515	WITHOUT_CLASSIFICATION	6.726667348360414E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999851356099954	WITHOUT_CLASSIFICATION	1.4864390004743988E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999675094756394	WITHOUT_CLASSIFICATION	3.24905243605965E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999797212963067	WITHOUT_CLASSIFICATION	2.027870369317259E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594588537792	WITHOUT_CLASSIFICATION	4.0541146220842275E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999626742087816	WITHOUT_CLASSIFICATION	3.732579121835431E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999204195377	WITHOUT_CLASSIFICATION	7.958046230024961E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999595267845456	WITHOUT_CLASSIFICATION	4.047321545435192E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999093476533746	WITHOUT_CLASSIFICATION	9.065234662543941E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999487002118039	WITHOUT_CLASSIFICATION	5.129978819621518E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999989414056984	WITHOUT_CLASSIFICATION	1.0585943015878997E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999717002620312	WITHOUT_CLASSIFICATION	2.8299737968879467E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200891398252	WITHOUT_CLASSIFICATION	7.991086017468566E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999453070734952	WITHOUT_CLASSIFICATION	5.4692926504950564E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999402970162243	WITHOUT_CLASSIFICATION	5.970298377554522E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999579146406046	WITHOUT_CLASSIFICATION	4.208535939545659E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999802993827117	WITHOUT_CLASSIFICATION	1.970061728822323E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999180562384137	WITHOUT_CLASSIFICATION	8.194376158636862E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999608718411851	WITHOUT_CLASSIFICATION	3.912815881484079E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998814781832605	WITHOUT_CLASSIFICATION	1.1852181673954022E-4	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999873918549809	WITHOUT_CLASSIFICATION	1.2608145019255124E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999051272331503	WITHOUT_CLASSIFICATION	9.48727668496668E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999980255375947	WITHOUT_CLASSIFICATION	1.9744624052860514E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999979877110769	WITHOUT_CLASSIFICATION	2.012288923104266E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999786276200897	WITHOUT_CLASSIFICATION	2.1372379910265124E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999807146722872	WITHOUT_CLASSIFICATION	1.9285327712736338E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999828826352526	WITHOUT_CLASSIFICATION	1.71173647473465E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999093476533746	WITHOUT_CLASSIFICATION	9.065234662543941E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999786404592289	WITHOUT_CLASSIFICATION	2.1359540771179643E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999573055573293	WITHOUT_CLASSIFICATION	4.26944426705783E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999021979248139	WITHOUT_CLASSIFICATION	9.780207518608392E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999501334518356	WITHOUT_CLASSIFICATION	4.98665481644127E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999522341132719	WITHOUT_CLASSIFICATION	4.776588672801552E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999793478679614	WITHOUT_CLASSIFICATION	2.0652132038687016E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999941792598133	WITHOUT_CLASSIFICATION	5.820740186705358E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999705366539822	WITHOUT_CLASSIFICATION	2.946334601777806E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995131513784832	WITHOUT_CLASSIFICATION	4.868486215168818E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999723988735263	WITHOUT_CLASSIFICATION	2.760112647372386E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999939194140714	WITHOUT_CLASSIFICATION	6.0805859285998426E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999807146722872	WITHOUT_CLASSIFICATION	1.9285327712736338E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999670080715675	WITHOUT_CLASSIFICATION	3.299192843252964E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999049271993562	WITHOUT_CLASSIFICATION	9.507280064391888E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999862217045666	WITHOUT_CLASSIFICATION	1.3778295433388796E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999826006648055	WITHOUT_CLASSIFICATION	1.7399335194552027E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999849167983658	WITHOUT_CLASSIFICATION	1.508320163414994E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999883877415565	WITHOUT_CLASSIFICATION	1.1612258443440983E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999359926299262	WITHOUT_CLASSIFICATION	6.400737007382751E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999866786195759	WITHOUT_CLASSIFICATION	1.3321380424068642E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999904646160065	WITHOUT_CLASSIFICATION	9.535383993509728E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999421664555391	WITHOUT_CLASSIFICATION	5.783354446083596E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999799891367533	WITHOUT_CLASSIFICATION	2.0010863246667802E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999889920565475	WITHOUT_CLASSIFICATION	1.100794345252036E-5	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999889920565475	WITHOUT_CLASSIFICATION	1.100794345252036E-5	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999807146722872	WITHOUT_CLASSIFICATION	1.9285327712736338E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999051272331503	WITHOUT_CLASSIFICATION	9.48727668496668E-5	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999052875611215	WITHOUT_CLASSIFICATION	9.471243887848082E-5	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999996255223294	WITHOUT_CLASSIFICATION	3.7447767059872506E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9990823315123125	WITHOUT_CLASSIFICATION	9.176684876874168E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999528242211625	WITHOUT_CLASSIFICATION	4.717577883749362E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999528242211625	WITHOUT_CLASSIFICATION	4.717577883749362E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999051272331503	WITHOUT_CLASSIFICATION	9.48727668496668E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999786236717415	WITHOUT_CLASSIFICATION	2.1376328258483543E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999826006648055	WITHOUT_CLASSIFICATION	1.7399335194552027E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999636914693913	WITHOUT_CLASSIFICATION	3.630853060856063E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999862217045666	WITHOUT_CLASSIFICATION	1.3778295433388796E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999964330133593	WITHOUT_CLASSIFICATION	3.566986640694668E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999262905992373	WITHOUT_CLASSIFICATION	7.370940076270216E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998975034879942	WITHOUT_CLASSIFICATION	1.0249651200579254E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999021979248139	WITHOUT_CLASSIFICATION	9.780207518608392E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999501334518356	WITHOUT_CLASSIFICATION	4.98665481644127E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999522341132719	WITHOUT_CLASSIFICATION	4.776588672801552E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999833138089649	WITHOUT_CLASSIFICATION	1.6686191035113536E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999792684257809	WITHOUT_CLASSIFICATION	2.07315742191288E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999663077916404	WITHOUT_CLASSIFICATION	3.3692208359620365E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999862217045666	WITHOUT_CLASSIFICATION	1.3778295433388796E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999964330133593	WITHOUT_CLASSIFICATION	3.566986640694668E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999051272331503	WITHOUT_CLASSIFICATION	9.48727668496668E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999793478679614	WITHOUT_CLASSIFICATION	2.0652132038687016E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999941792598133	WITHOUT_CLASSIFICATION	5.820740186705358E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999705366539822	WITHOUT_CLASSIFICATION	2.946334601777806E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943768115603	WITHOUT_CLASSIFICATION	5.623188439639631E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951466568539	WITHOUT_CLASSIFICATION	4.853343146160479E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999631601599316	WITHOUT_CLASSIFICATION	3.6839840068529684E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999651155850555	WITHOUT_CLASSIFICATION	3.488441494448049E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999499414330787	WITHOUT_CLASSIFICATION	5.005856692116409E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999277378440518	WITHOUT_CLASSIFICATION	7.226215594830574E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999048769583915	WITHOUT_CLASSIFICATION	9.51230416085564E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999637831207756	WITHOUT_CLASSIFICATION	3.621687922430494E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999317646675798	WITHOUT_CLASSIFICATION	6.823533242023946E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695673200699	WITHOUT_CLASSIFICATION	3.0432679930114496E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999540190419318	WITHOUT_CLASSIFICATION	4.598095806820922E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999956051293805	WITHOUT_CLASSIFICATION	4.394870619509351E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651637680089	WITHOUT_CLASSIFICATION	3.483623199111962E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999715474340996	WITHOUT_CLASSIFICATION	2.8452565900452276E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999779030581515	WITHOUT_CLASSIFICATION	2.2096941848585034E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965927287467	WITHOUT_CLASSIFICATION	3.407271253306661E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999640201734619	WITHOUT_CLASSIFICATION	3.5979826538036394E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999802993827117	WITHOUT_CLASSIFICATION	1.970061728822323E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999636634670052	WITHOUT_CLASSIFICATION	3.633653299494836E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999982289484533	WITHOUT_CLASSIFICATION	1.7710515466875006E-5	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999691184791806	WITHOUT_CLASSIFICATION	3.088152081944187E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9991870345896561	WITHOUT_CLASSIFICATION	8.12965410343972E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999906693576255	WITHOUT_CLASSIFICATION	9.330642374413404E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998906272060988	WITHOUT_CLASSIFICATION	1.093727939011464E-4	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999870117515823	WITHOUT_CLASSIFICATION	1.2988248417793067E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999997081894275	WITHOUT_CLASSIFICATION	2.918105725032525E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999806231324344	WITHOUT_CLASSIFICATION	1.9376867565565888E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999682629008658	WITHOUT_CLASSIFICATION	3.173709913427564E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999813762420181	WITHOUT_CLASSIFICATION	1.8623757981883627E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999697139393553	WITHOUT_CLASSIFICATION	3.0286060644726814E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999905347987995	WITHOUT_CLASSIFICATION	9.465201200554002E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999912074681591	WITHOUT_CLASSIFICATION	8.792531840989017E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775845498193	WITHOUT_CLASSIFICATION	2.2415450180599502E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777811455468	WITHOUT_CLASSIFICATION	2.2218854453263E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999302285628928	WITHOUT_CLASSIFICATION	6.977143710715174E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999592992981221	WITHOUT_CLASSIFICATION	4.07007018778361E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999854204774252	WITHOUT_CLASSIFICATION	1.4579522574767308E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999104726744388	WITHOUT_CLASSIFICATION	8.95273255611548E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999091332636952	WITHOUT_CLASSIFICATION	9.086673630481422E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999640955463096	WITHOUT_CLASSIFICATION	3.590445369033535E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999756322395791	WITHOUT_CLASSIFICATION	2.4367760420904483E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999547237201997	WITHOUT_CLASSIFICATION	4.527627980043055E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999406419115615	WITHOUT_CLASSIFICATION	5.935808843845449E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999640955463096	WITHOUT_CLASSIFICATION	3.590445369033535E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999947927574632	WITHOUT_CLASSIFICATION	5.207242536799329E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999223851029982	WITHOUT_CLASSIFICATION	7.761489700166322E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999649988977943	WITHOUT_CLASSIFICATION	3.500110220556857E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999911802021342	WITHOUT_CLASSIFICATION	8.819797865932373E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999976149934053	WITHOUT_CLASSIFICATION	2.3850065946432123E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999640717350246	WITHOUT_CLASSIFICATION	3.592826497542386E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.999984961188414	WITHOUT_CLASSIFICATION	1.5038811586009095E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999798039441304	WITHOUT_CLASSIFICATION	2.019605586957502E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999798039441304	WITHOUT_CLASSIFICATION	2.019605586957502E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999895445618521	WITHOUT_CLASSIFICATION	1.0455438147909045E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999925305780841	WITHOUT_CLASSIFICATION	7.469421915945965E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999923485037271	WITHOUT_CLASSIFICATION	7.65149627289519E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999854626889594	WITHOUT_CLASSIFICATION	1.4537311040672385E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999973762059167	WITHOUT_CLASSIFICATION	2.6237940833608996E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999460164805705	WITHOUT_CLASSIFICATION	5.398351942954162E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999858500180468	WITHOUT_CLASSIFICATION	1.4149981953202236E-4	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999981479469463	WITHOUT_CLASSIFICATION	1.8520530537004288E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998921981806995	WITHOUT_CLASSIFICATION	1.0780181930057123E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999957457792725	WITHOUT_CLASSIFICATION	4.2542207274785035E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999908454790053	WITHOUT_CLASSIFICATION	9.154520994698572E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999135975278118	WITHOUT_CLASSIFICATION	8.640247218814274E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999172192653816	WITHOUT_CLASSIFICATION	8.278073461843657E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999635036367855	WITHOUT_CLASSIFICATION	3.649636321448615E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999899750674628	WITHOUT_CLASSIFICATION	1.002493253711516E-5	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998988598275063	WITHOUT_CLASSIFICATION	1.011401724937012E-4	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999888978669096	WITHOUT_CLASSIFICATION	1.1102133090553543E-5	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999665441997717	WITHOUT_CLASSIFICATION	3.3455800228168625E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999783193334073	WITHOUT_CLASSIFICATION	2.1680666592706786E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999082393313439	WITHOUT_CLASSIFICATION	9.176066865615386E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999977169213192	WITHOUT_CLASSIFICATION	2.283078680802757E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999529858629465	WITHOUT_CLASSIFICATION	4.701413705352504E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999657788057327	WITHOUT_CLASSIFICATION	3.4221194267350826E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999802333298569	WITHOUT_CLASSIFICATION	1.9766670143188446E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999686864731536	WITHOUT_CLASSIFICATION	3.131352684639629E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.99997753061901	WITHOUT_CLASSIFICATION	2.2469380990009575E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999965279519843	WITHOUT_CLASSIFICATION	3.4720480156077395E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999888707690519	WITHOUT_CLASSIFICATION	1.1129230948239729E-5	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996687874217063	WITHOUT_CLASSIFICATION	3.312125782938129E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999788371437057	WITHOUT_CLASSIFICATION	2.11628562942644E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999573687466344	WITHOUT_CLASSIFICATION	4.2631253365455385E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999907888347677	WITHOUT_CLASSIFICATION	9.211165232225806E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999940503366527	WITHOUT_CLASSIFICATION	5.94966334735324E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999956163492902	WITHOUT_CLASSIFICATION	4.383650709765144E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999866971742871	WITHOUT_CLASSIFICATION	1.3302825712816649E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999789401078384	WITHOUT_CLASSIFICATION	2.1059892161634967E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995504838053071	WITHOUT_CLASSIFICATION	4.495161946929418E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999062802794171	WITHOUT_CLASSIFICATION	9.371972058291468E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999870449202016	WITHOUT_CLASSIFICATION	1.2955079798438582E-5	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999984018457784	WITHOUT_CLASSIFICATION	1.598154221610632E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999400224560228	WITHOUT_CLASSIFICATION	5.9977543977308374E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999939194140714	WITHOUT_CLASSIFICATION	6.0805859285998426E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999939194140714	WITHOUT_CLASSIFICATION	6.0805859285998426E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999582341955439	WITHOUT_CLASSIFICATION	4.1765804456024314E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999767215554266	WITHOUT_CLASSIFICATION	2.3278444573365226E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999681557568901	WITHOUT_CLASSIFICATION	3.184424310989613E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999845302412878	WITHOUT_CLASSIFICATION	1.5469758712280882E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999779422583672	WITHOUT_CLASSIFICATION	2.20577416328359E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999788894238784	WITHOUT_CLASSIFICATION	2.1110576121716393E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.99997888484269	WITHOUT_CLASSIFICATION	2.111515731004732E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997414071206064	WITHOUT_CLASSIFICATION	2.5859287939354424E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999852036826986	WITHOUT_CLASSIFICATION	1.4796317301432374E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.999986637381233	WITHOUT_CLASSIFICATION	1.3362618767144873E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999169655529431	WITHOUT_CLASSIFICATION	8.30344470569158E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999617722181893	WITHOUT_CLASSIFICATION	3.822778181070864E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999500187335704	WITHOUT_CLASSIFICATION	4.998126642972245E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999791164683937	WITHOUT_CLASSIFICATION	2.0883531606292752E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999679893336033	WITHOUT_CLASSIFICATION	3.201066639674662E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999928273538322	WITHOUT_CLASSIFICATION	7.172646167743E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999938350392169	WITHOUT_CLASSIFICATION	6.164960783071987E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999998703120325	WITHOUT_CLASSIFICATION	1.2968796752495714E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.999995422822472	WITHOUT_CLASSIFICATION	4.577177527973654E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999646008218667	WITHOUT_CLASSIFICATION	3.539917813335736E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999188914684557	WITHOUT_CLASSIFICATION	8.110853154435238E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.999995422822472	WITHOUT_CLASSIFICATION	4.577177527973654E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.999957746981964	WITHOUT_CLASSIFICATION	4.2253018035919916E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999910913697606	WITHOUT_CLASSIFICATION	8.90863023941881E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999824816871278	WITHOUT_CLASSIFICATION	1.7518312872200683E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997450156252533	WITHOUT_CLASSIFICATION	2.549843747466869E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.999978878303697	WITHOUT_CLASSIFICATION	2.1121696303022775E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999936425481185	WITHOUT_CLASSIFICATION	6.357451881518439E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999500855188835	WITHOUT_CLASSIFICATION	4.991448111638735E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999646679007824	WITHOUT_CLASSIFICATION	3.533209921749844E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999915064996794	WITHOUT_CLASSIFICATION	8.493500320577038E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999502854705165	WITHOUT_CLASSIFICATION	4.971452948357185E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999930473421369	WITHOUT_CLASSIFICATION	6.952657863050401E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999330298223649	WITHOUT_CLASSIFICATION	6.697017763507746E-5	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999918608120185	WITHOUT_CLASSIFICATION	8.139187981438618E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999780808186933	WITHOUT_CLASSIFICATION	2.1919181306673916E-5	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999753555176735	WITHOUT_CLASSIFICATION	2.464448232642091E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999516032591146	WITHOUT_CLASSIFICATION	4.83967408854717E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999866300154457	WITHOUT_CLASSIFICATION	1.3369984554335703E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999786856168411	WITHOUT_CLASSIFICATION	2.1314383158903646E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999760264768585	WITHOUT_CLASSIFICATION	2.3973523141516E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998888306706769	WITHOUT_CLASSIFICATION	1.1116932932308096E-4	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998316256140733	WITHOUT_CLASSIFICATION	1.683743859266396E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999783306049868	WITHOUT_CLASSIFICATION	2.1669395013275916E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999986730652266	WITHOUT_CLASSIFICATION	1.3269347733919558E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999803803753575	WITHOUT_CLASSIFICATION	1.9619624642482517E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998623050700697	WITHOUT_CLASSIFICATION	1.3769492993027913E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999600088896138	WITHOUT_CLASSIFICATION	3.999111038632348E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999973529770352	WITHOUT_CLASSIFICATION	2.6470229647831735E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999862216878275	WITHOUT_CLASSIFICATION	1.377831217257089E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999889272298492	WITHOUT_CLASSIFICATION	1.107277015076135E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999986867625591	WITHOUT_CLASSIFICATION	1.3132374408184554E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999912074681591	WITHOUT_CLASSIFICATION	8.792531840989017E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999455499565321	WITHOUT_CLASSIFICATION	5.445004346796705E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999958659717707	WITHOUT_CLASSIFICATION	4.134028229231961E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999875129406541	WITHOUT_CLASSIFICATION	1.2487059345889892E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.9994519754544196	WITHOUT_CLASSIFICATION	5.480245455803844E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997434434060604	WITHOUT_CLASSIFICATION	2.565565939395937E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999608757758325	WITHOUT_CLASSIFICATION	3.9124224167566786E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999947310856675	WITHOUT_CLASSIFICATION	5.268914332509052E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999796623636673	WITHOUT_CLASSIFICATION	2.033763633265032E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999896822503226	WITHOUT_CLASSIFICATION	1.0317749677376714E-5	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999896844995053	WITHOUT_CLASSIFICATION	1.0315500494551885E-5	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999831582825326	WITHOUT_CLASSIFICATION	1.6841717467476018E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999888283959125	WITHOUT_CLASSIFICATION	1.1171604087486266E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9914878638716618	WITHOUT_CLASSIFICATION	0.008512136128338203	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999870996253682	WITHOUT_CLASSIFICATION	1.290037463186131E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999903738467076	WITHOUT_CLASSIFICATION	9.626153292487862E-6	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999991925062362	WITHOUT_CLASSIFICATION	8.074937637943326E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999859683422525	WITHOUT_CLASSIFICATION	1.4031657747418267E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999917205924846	WITHOUT_CLASSIFICATION	8.279407515406687E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999894774757335	WITHOUT_CLASSIFICATION	1.0522524266524425E-5	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999913147759694	WITHOUT_CLASSIFICATION	8.685224030728531E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999991694393117	WITHOUT_CLASSIFICATION	8.305606882987274E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999899074365854	WITHOUT_CLASSIFICATION	1.009256341452471E-5	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999691252478291	WITHOUT_CLASSIFICATION	3.0874752170885204E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999319413611866	WITHOUT_CLASSIFICATION	6.805863881344963E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.999989806276671	WITHOUT_CLASSIFICATION	1.0193723328923424E-5	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999872477088733	WITHOUT_CLASSIFICATION	1.275229112676782E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999984305617007	WITHOUT_CLASSIFICATION	1.5694382993210414E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999525105478091	WITHOUT_CLASSIFICATION	4.7489452190923044E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9996163679598555	WITHOUT_CLASSIFICATION	3.8363204014456233E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501058920388	WITHOUT_CLASSIFICATION	4.989410796118713E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999242746459633	WITHOUT_CLASSIFICATION	7.572535403663199E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602374237935	WITHOUT_CLASSIFICATION	3.976257620657291E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999775368643858	WITHOUT_CLASSIFICATION	2.24631356142479E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999749527105519	WITHOUT_CLASSIFICATION	2.5047289448015153E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864869981199	WITHOUT_CLASSIFICATION	1.3513001880049296E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999974790439525	WITHOUT_CLASSIFICATION	2.5209560474780133E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999977793407581	WITHOUT_CLASSIFICATION	2.2206592419066078E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999498121355056	WITHOUT_CLASSIFICATION	5.018786449436772E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999977793407581	WITHOUT_CLASSIFICATION	2.2206592419066078E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999626647471089	WITHOUT_CLASSIFICATION	3.733525289103238E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999931889881095	WITHOUT_CLASSIFICATION	6.811011890599095E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999837831510078	WITHOUT_CLASSIFICATION	1.6216848992193488E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999816595064724	WITHOUT_CLASSIFICATION	1.8340493527600865E-4	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998826893644972	WITHOUT_CLASSIFICATION	1.1731063550278936E-4	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9932086889997457	WITHOUT_CLASSIFICATION	0.006791311000254216	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999959019619442	WITHOUT_CLASSIFICATION	4.098038055764816E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999917759119711	WITHOUT_CLASSIFICATION	8.224088028864464E-6	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999951342637965	WITHOUT_CLASSIFICATION	4.865736203418367E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9995770845920723	WITHOUT_CLASSIFICATION	4.2291540792766723E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999918581157994	WITHOUT_CLASSIFICATION	8.141884200605734E-6	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999791544234129	WITHOUT_CLASSIFICATION	2.0845576587009205E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999905081068714	WITHOUT_CLASSIFICATION	9.491893128589264E-5	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9983184006427813	WITHOUT_CLASSIFICATION	0.0016815993572186513	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999978116824364	WITHOUT_CLASSIFICATION	2.1883175636100516E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999928538068174	WITHOUT_CLASSIFICATION	7.14619318262509E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999747643465571	WITHOUT_CLASSIFICATION	2.5235653442911395E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999747643465571	WITHOUT_CLASSIFICATION	2.5235653442911395E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999855401538723	WITHOUT_CLASSIFICATION	1.4459846127729186E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999532778231695	WITHOUT_CLASSIFICATION	4.6722176830597946E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999694189942857	WITHOUT_CLASSIFICATION	3.058100571430261E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999923893594949	WITHOUT_CLASSIFICATION	7.610640505101383E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999428960039365	WITHOUT_CLASSIFICATION	5.710399606348855E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999617188159513	WITHOUT_CLASSIFICATION	3.8281184048605066E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9989289632598416	WITHOUT_CLASSIFICATION	0.0010710367401583667	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999843515088053	WITHOUT_CLASSIFICATION	1.5648491194743476E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999936799213403	WITHOUT_CLASSIFICATION	6.320078659833422E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999887475739601	WITHOUT_CLASSIFICATION	1.125242603999869E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999217629035269	WITHOUT_CLASSIFICATION	7.82370964731613E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999906588348885	WITHOUT_CLASSIFICATION	9.341165111496608E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999831762351638	WITHOUT_CLASSIFICATION	1.6823764836205597E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998780940429919	WITHOUT_CLASSIFICATION	1.2190595700820187E-4	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999792858083096	WITHOUT_CLASSIFICATION	2.071419169045859E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999716488118146	WITHOUT_CLASSIFICATION	2.8351188185360222E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999939851213357	WITHOUT_CLASSIFICATION	6.014878664269109E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999919454667319	WITHOUT_CLASSIFICATION	8.054533268090326E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999970888734744	WITHOUT_CLASSIFICATION	2.9111265255140257E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999786076862824	WITHOUT_CLASSIFICATION	2.1392313717493865E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999587935241445	WITHOUT_CLASSIFICATION	4.1206475855612494E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999884895296123	WITHOUT_CLASSIFICATION	1.1510470387674004E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999697082071587	WITHOUT_CLASSIFICATION	3.0291792841341707E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999828660070076	WITHOUT_CLASSIFICATION	1.7133992992470195E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999554281927876	WITHOUT_CLASSIFICATION	4.457180721235311E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999915367456629	WITHOUT_CLASSIFICATION	8.463254337175264E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.99984357424739	WITHOUT_CLASSIFICATION	1.5642575261010777E-4	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999400694155547	WITHOUT_CLASSIFICATION	5.9930584445270165E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999834445399335	WITHOUT_CLASSIFICATION	1.6555460066518993E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999995534494921	WITHOUT_CLASSIFICATION	4.465505079003623E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999278055756956	WITHOUT_CLASSIFICATION	7.219442430441137E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999625323731469	WITHOUT_CLASSIFICATION	3.746762685306527E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992101850505976	WITHOUT_CLASSIFICATION	7.898149494025187E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999830006072438	WITHOUT_CLASSIFICATION	1.699939275620143E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999892085702768	WITHOUT_CLASSIFICATION	1.0791429723156165E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999857763233858	WITHOUT_CLASSIFICATION	1.4223676614082698E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999834087761186	WITHOUT_CLASSIFICATION	1.659122388147969E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999743334846428	WITHOUT_CLASSIFICATION	2.5666515357177155E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999842893036268	WITHOUT_CLASSIFICATION	1.571069637314594E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995273215606193	WITHOUT_CLASSIFICATION	4.726784393807906E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999279021835915	WITHOUT_CLASSIFICATION	7.209781640853875E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999507197236771	WITHOUT_CLASSIFICATION	4.928027632301826E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999330482819716	WITHOUT_CLASSIFICATION	6.69517180284166E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999721425575099	WITHOUT_CLASSIFICATION	2.7857442490089594E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999858611763017	WITHOUT_CLASSIFICATION	1.4138823698362363E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999952717154441	WITHOUT_CLASSIFICATION	4.728284555904206E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999404867802971	WITHOUT_CLASSIFICATION	5.951321970280914E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999798010791777	WITHOUT_CLASSIFICATION	2.0198920822271727E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999665237241753	WITHOUT_CLASSIFICATION	3.347627582469663E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999268334386016	WITHOUT_CLASSIFICATION	7.316656139851018E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999507197236771	WITHOUT_CLASSIFICATION	4.928027632301826E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998937177753354	WITHOUT_CLASSIFICATION	1.0628222466450469E-4	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997641606969871	WITHOUT_CLASSIFICATION	2.3583930301275037E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999971491312216	WITHOUT_CLASSIFICATION	2.8508687783179136E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999877381939508	WITHOUT_CLASSIFICATION	1.2261806049257364E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999786236717415	WITHOUT_CLASSIFICATION	2.1376328258483543E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999786236717415	WITHOUT_CLASSIFICATION	2.1376328258483543E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9977311757971257	WITHOUT_CLASSIFICATION	0.0022688242028742946	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999893749588655	WITHOUT_CLASSIFICATION	1.0625041134457473E-5	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998890159113242	WITHOUT_CLASSIFICATION	1.1098408867588377E-4	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999533678906717	WITHOUT_CLASSIFICATION	4.6632109328295654E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999546244091907	WITHOUT_CLASSIFICATION	4.537559080930016E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999738074284471	WITHOUT_CLASSIFICATION	2.619257155288736E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999940943865756	WITHOUT_CLASSIFICATION	5.9056134244446544E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9985746218054385	WITHOUT_CLASSIFICATION	0.0014253781945615198	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999824416962952	WITHOUT_CLASSIFICATION	1.7558303704770094E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9993551215192095	WITHOUT_CLASSIFICATION	6.448784807905605E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999890371454535	WITHOUT_CLASSIFICATION	1.0962854546401792E-5	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999894509203053	WITHOUT_CLASSIFICATION	1.0549079694636995E-5	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999802934931599	WITHOUT_CLASSIFICATION	1.9706506840034268E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999939834986961	WITHOUT_CLASSIFICATION	6.016501303966361E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999313259376246	WITHOUT_CLASSIFICATION	6.867406237545761E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993207790168284	WITHOUT_CLASSIFICATION	6.79220983171649E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998109177853	WITHOUT_CLASSIFICATION	1.8908221469390678E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999640143371298	WITHOUT_CLASSIFICATION	3.598566287028322E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999851454049684	WITHOUT_CLASSIFICATION	1.4854595031573224E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999950133782131	WITHOUT_CLASSIFICATION	4.986621786900098E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999900013491446	WITHOUT_CLASSIFICATION	9.998650855410733E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999958992338207	WITHOUT_CLASSIFICATION	4.100766179261932E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999980134211678	WITHOUT_CLASSIFICATION	1.9865788321770824E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9996799069801738	WITHOUT_CLASSIFICATION	3.2009301982618006E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824338650718	WITHOUT_CLASSIFICATION	1.756613492828833E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999785057567234	WITHOUT_CLASSIFICATION	2.1494243276680462E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998535879381161	WITHOUT_CLASSIFICATION	1.4641206188388897E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999190412676334	WITHOUT_CLASSIFICATION	8.095873236663325E-5	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999773297872047	WITHOUT_CLASSIFICATION	2.267021279538131E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999631532881414	WITHOUT_CLASSIFICATION	3.6846711858564505E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999694436755599	WITHOUT_CLASSIFICATION	3.055632444010233E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999116253989986	WITHOUT_CLASSIFICATION	8.837460100136828E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999631532881414	WITHOUT_CLASSIFICATION	3.6846711858564505E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999859183033295	WITHOUT_CLASSIFICATION	1.408169667035878E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999773297872047	WITHOUT_CLASSIFICATION	2.267021279538131E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992857520425554	WITHOUT_CLASSIFICATION	7.142479574445521E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999631532881414	WITHOUT_CLASSIFICATION	3.6846711858564505E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999457249193019	WITHOUT_CLASSIFICATION	5.427508069811961E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999723349671605	WITHOUT_CLASSIFICATION	2.7665032839466054E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999217629035269	WITHOUT_CLASSIFICATION	7.82370964731613E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999192129730904	WITHOUT_CLASSIFICATION	8.07870269095876E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998906272060988	WITHOUT_CLASSIFICATION	1.093727939011464E-4	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999923032971233	WITHOUT_CLASSIFICATION	7.696702876647356E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999794777685153	WITHOUT_CLASSIFICATION	2.052223148473372E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999143104475687	WITHOUT_CLASSIFICATION	8.568955243122137E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999802084542452	WITHOUT_CLASSIFICATION	1.9791545754906708E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999348770816721	WITHOUT_CLASSIFICATION	6.512291832793638E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999313492035838	WITHOUT_CLASSIFICATION	6.865079641610757E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999636008162681	WITHOUT_CLASSIFICATION	3.639918373182482E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999789261823882	WITHOUT_CLASSIFICATION	2.1073817611881756E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999663784656079	WITHOUT_CLASSIFICATION	3.362153439221332E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999982054337226	WITHOUT_CLASSIFICATION	1.7945662774039157E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.999995295511688	WITHOUT_CLASSIFICATION	4.704488312008924E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999991831448311	WITHOUT_CLASSIFICATION	8.168551688983617E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999336951263191	WITHOUT_CLASSIFICATION	6.630487368078991E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999599327950262	WITHOUT_CLASSIFICATION	4.0067204973733646E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999692128760399	WITHOUT_CLASSIFICATION	3.078712396001294E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999930478471688	WITHOUT_CLASSIFICATION	6.952152831147455E-6	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999500804010744	WITHOUT_CLASSIFICATION	4.9919598925668854E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999842908643348	WITHOUT_CLASSIFICATION	1.5709135665153206E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999508593755554	WITHOUT_CLASSIFICATION	4.914062444469726E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998575911495092	WITHOUT_CLASSIFICATION	1.424088504906844E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999956358917364	WITHOUT_CLASSIFICATION	4.364108263610138E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999830401749463	WITHOUT_CLASSIFICATION	1.6959825053620968E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999832248982737	WITHOUT_CLASSIFICATION	1.677510172621262E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568960502078	WITHOUT_CLASSIFICATION	4.3103949792210894E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999633571728159	WITHOUT_CLASSIFICATION	3.664282718407531E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999704196378758	WITHOUT_CLASSIFICATION	2.9580362124167293E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999905894189897	WITHOUT_CLASSIFICATION	9.41058101024853E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999856430162494	WITHOUT_CLASSIFICATION	1.4356983750654643E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999989113283043	WITHOUT_CLASSIFICATION	1.0886716957214842E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999912484640777	WITHOUT_CLASSIFICATION	8.751535922255905E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999882736565718	WITHOUT_CLASSIFICATION	1.172634342821325E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999978067040561	WITHOUT_CLASSIFICATION	2.193295943900901E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999910925491958	WITHOUT_CLASSIFICATION	8.907450804192932E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999963212906664	WITHOUT_CLASSIFICATION	3.6787093336009574E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999928876593652	WITHOUT_CLASSIFICATION	7.112340634760582E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998537094227054	WITHOUT_CLASSIFICATION	1.4629057729452535E-4	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999492347222786	WITHOUT_CLASSIFICATION	5.0765277721322826E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999948351628298	WITHOUT_CLASSIFICATION	5.164837170101056E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999736463856616	WITHOUT_CLASSIFICATION	2.6353614338494298E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999703008465425	WITHOUT_CLASSIFICATION	2.9699153457531145E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997973124667145	WITHOUT_CLASSIFICATION	2.0268753328533875E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998736525393835	WITHOUT_CLASSIFICATION	1.2634746061634963E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999950927796	WITHOUT_CLASSIFICATION	4.90722039999452E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999990106248022	WITHOUT_CLASSIFICATION	9.8937519779736E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998244183560174	WITHOUT_CLASSIFICATION	1.7558164398251075E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999243785282752	WITHOUT_CLASSIFICATION	7.562147172476804E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999606677283225	WITHOUT_CLASSIFICATION	3.933227167746882E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996608140100248	WITHOUT_CLASSIFICATION	3.3918598997514503E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999977768688392	WITHOUT_CLASSIFICATION	2.223131160700379E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999787543936222	WITHOUT_CLASSIFICATION	2.1245606377755368E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9989405278890349	WITHOUT_CLASSIFICATION	0.0010594721109651165	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999255779505289	WITHOUT_CLASSIFICATION	7.442204947101626E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568960502078	WITHOUT_CLASSIFICATION	4.3103949792210894E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999112732231555	WITHOUT_CLASSIFICATION	8.872677684440918E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999987635145186	WITHOUT_CLASSIFICATION	1.2364854814819515E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999787493400228	WITHOUT_CLASSIFICATION	2.125065997724474E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999158573356303	WITHOUT_CLASSIFICATION	8.414266436964447E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999255286708109	WITHOUT_CLASSIFICATION	7.447132918920706E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.99995257626301	WITHOUT_CLASSIFICATION	4.742373698990689E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999617779087574	WITHOUT_CLASSIFICATION	3.82220912426729E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999883922291228	WITHOUT_CLASSIFICATION	1.1607770877277191E-5	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999947144723565	WITHOUT_CLASSIFICATION	5.285527643516428E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999387872941776	WITHOUT_CLASSIFICATION	6.121270582240231E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999912203675164	WITHOUT_CLASSIFICATION	8.77963248356137E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999834445399335	WITHOUT_CLASSIFICATION	1.6555460066518993E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999736171835428	WITHOUT_CLASSIFICATION	2.638281645718012E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999608962279439	WITHOUT_CLASSIFICATION	3.910377205608503E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999626647471089	WITHOUT_CLASSIFICATION	3.733525289103238E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999992911290324	WITHOUT_CLASSIFICATION	7.08870967547348E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999967480206651	WITHOUT_CLASSIFICATION	3.2519793350050903E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999814397125332	WITHOUT_CLASSIFICATION	1.856028746684595E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999876932674077	WITHOUT_CLASSIFICATION	1.2306732592302643E-5	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999985116547275	WITHOUT_CLASSIFICATION	1.4883452724383725E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999824713070361	WITHOUT_CLASSIFICATION	1.7528692963814777E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999824713070361	WITHOUT_CLASSIFICATION	1.7528692963814777E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999788647862468	WITHOUT_CLASSIFICATION	2.113521375324027E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999912671354281	WITHOUT_CLASSIFICATION	8.732864572018036E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999886520274428	WITHOUT_CLASSIFICATION	1.1347972557187557E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999761978607271	WITHOUT_CLASSIFICATION	2.3802139272861425E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999072590835965	WITHOUT_CLASSIFICATION	9.274091640356868E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.99998937792368	WITHOUT_CLASSIFICATION	1.0622076319973906E-5	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999621194735507	WITHOUT_CLASSIFICATION	3.7880526449193365E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999150252332477	WITHOUT_CLASSIFICATION	8.497476675235389E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999150252332477	WITHOUT_CLASSIFICATION	8.497476675235389E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999883710392295	WITHOUT_CLASSIFICATION	1.1628960770497075E-4	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999904120459776	WITHOUT_CLASSIFICATION	9.587954022423941E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997649139018147	WITHOUT_CLASSIFICATION	2.350860981853832E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999926745137211	WITHOUT_CLASSIFICATION	7.325486278831151E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999926745137211	WITHOUT_CLASSIFICATION	7.325486278831151E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999926745137211	WITHOUT_CLASSIFICATION	7.325486278831151E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999963039491308	WITHOUT_CLASSIFICATION	3.696050869197351E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999674788984296	WITHOUT_CLASSIFICATION	3.2521101570325266E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999739907094555	WITHOUT_CLASSIFICATION	2.6009290544519638E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.99995252866083	WITHOUT_CLASSIFICATION	4.747133916997029E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999847311054686	WITHOUT_CLASSIFICATION	1.5268894531399247E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999991617113934	WITHOUT_CLASSIFICATION	8.382886065847001E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999616013855516	WITHOUT_CLASSIFICATION	3.839861444838822E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9986713067537533	WITHOUT_CLASSIFICATION	0.0013286932462467681	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999665134008972	WITHOUT_CLASSIFICATION	3.348659910291877E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999872077995468	WITHOUT_CLASSIFICATION	1.279220045315583E-5	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999786126571931	WITHOUT_CLASSIFICATION	2.1387342806843083E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999860779218949	WITHOUT_CLASSIFICATION	1.3922078105102843E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998991423290292	WITHOUT_CLASSIFICATION	1.0085767097082437E-4	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999959429127017	WITHOUT_CLASSIFICATION	4.057087298305395E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999952178913459	WITHOUT_CLASSIFICATION	4.7821086540755E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999816248679153	WITHOUT_CLASSIFICATION	1.8375132084662356E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999914432706293	WITHOUT_CLASSIFICATION	8.556729370655116E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999913826672764	WITHOUT_CLASSIFICATION	8.617332723688308E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999824713070361	WITHOUT_CLASSIFICATION	1.7528692963814777E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999982507274865	WITHOUT_CLASSIFICATION	1.7492725135040035E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999969554936159	WITHOUT_CLASSIFICATION	3.044506384036189E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999691232397386	WITHOUT_CLASSIFICATION	3.0876760261399104E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999795452866149	WITHOUT_CLASSIFICATION	2.04547133851439E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999873858277113	WITHOUT_CLASSIFICATION	1.26141722886267E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999951783768282	WITHOUT_CLASSIFICATION	4.821623171771349E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999562176376872	WITHOUT_CLASSIFICATION	4.378236231281757E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999922273553198	WITHOUT_CLASSIFICATION	7.772644680261951E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.99975905535009	WITHOUT_CLASSIFICATION	2.4094464991002802E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999894149290153	WITHOUT_CLASSIFICATION	1.0585070984690478E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9995151930432623	WITHOUT_CLASSIFICATION	4.8480695673769504E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999452554663356	WITHOUT_CLASSIFICATION	5.474453366433343E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.999985742813215	WITHOUT_CLASSIFICATION	1.4257186785072527E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999833024925974	WITHOUT_CLASSIFICATION	1.669750740261842E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999739942975857	WITHOUT_CLASSIFICATION	2.6005702414282008E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999989239743422	WITHOUT_CLASSIFICATION	1.0760256578368037E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999993796509072	WITHOUT_CLASSIFICATION	6.203490927986207E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999979454417048	WITHOUT_CLASSIFICATION	2.054558295108525E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999848516994025	WITHOUT_CLASSIFICATION	1.5148300597440148E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999848516994025	WITHOUT_CLASSIFICATION	1.5148300597440148E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999894976487502	WITHOUT_CLASSIFICATION	1.0502351249829316E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999924023944398	WITHOUT_CLASSIFICATION	7.597605560319173E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999893748471527	WITHOUT_CLASSIFICATION	1.0625152847265995E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999793207958732	WITHOUT_CLASSIFICATION	2.0679204126846942E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999615685946268	WITHOUT_CLASSIFICATION	3.8431405373284716E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999615658800487	WITHOUT_CLASSIFICATION	3.84341199512055E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999701579644247	WITHOUT_CLASSIFICATION	2.984203557520544E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999905603093438	WITHOUT_CLASSIFICATION	9.439690656197033E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999867905593594	WITHOUT_CLASSIFICATION	1.320944064068623E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999765982322771	WITHOUT_CLASSIFICATION	2.340176772283674E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999135723658118	WITHOUT_CLASSIFICATION	8.642763418814281E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999834445399335	WITHOUT_CLASSIFICATION	1.6555460066518993E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999980439818856	WITHOUT_CLASSIFICATION	1.956018114402105E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999906826097891	WITHOUT_CLASSIFICATION	9.317390210995268E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999986181965973	WITHOUT_CLASSIFICATION	1.3818034026659107E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999220395973906	WITHOUT_CLASSIFICATION	7.796040260947985E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984725585697	WITHOUT_CLASSIFICATION	1.5274414303239887E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984725585697	WITHOUT_CLASSIFICATION	1.5274414303239887E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999480439306846	WITHOUT_CLASSIFICATION	5.195606931545221E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997195045227	WITHOUT_CLASSIFICATION	2.8049547732296626E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999178238830595	WITHOUT_CLASSIFICATION	8.217611694041529E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999603826557593	WITHOUT_CLASSIFICATION	3.9617344240750716E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998846083734296	WITHOUT_CLASSIFICATION	1.1539162657046948E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998442379710121	WITHOUT_CLASSIFICATION	1.5576202898797024E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999165678451004	WITHOUT_CLASSIFICATION	8.343215489959709E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999929074373909	WITHOUT_CLASSIFICATION	7.092562609152055E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999447441601731	WITHOUT_CLASSIFICATION	5.525583982696389E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998128708124112	WITHOUT_CLASSIFICATION	1.8712918758880806E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999575015150023	WITHOUT_CLASSIFICATION	4.249848499767701E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999929074373909	WITHOUT_CLASSIFICATION	7.092562609152055E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999400562886351	WITHOUT_CLASSIFICATION	5.99437113648438E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999983547273425	WITHOUT_CLASSIFICATION	1.6452726574991156E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999991058075273	WITHOUT_CLASSIFICATION	8.941924726938265E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999729590896893	WITHOUT_CLASSIFICATION	2.704091031060483E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999608157785319	WITHOUT_CLASSIFICATION	3.918422146811274E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999828623344987	WITHOUT_CLASSIFICATION	1.7137665501257704E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999754276344993	WITHOUT_CLASSIFICATION	2.457236550066619E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999982207929041	WITHOUT_CLASSIFICATION	1.7792070958976168E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999955494157163	WITHOUT_CLASSIFICATION	4.4505842836890664E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999756922901424	WITHOUT_CLASSIFICATION	2.4307709857614583E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998565932211007	WITHOUT_CLASSIFICATION	1.4340677889933688E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999946013704245	WITHOUT_CLASSIFICATION	5.398629575456933E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999852188414979	WITHOUT_CLASSIFICATION	1.4781158502032108E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.99999251957854	WITHOUT_CLASSIFICATION	7.4804214601078086E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999941458559888	WITHOUT_CLASSIFICATION	5.8541440112815276E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.999990038409663	WITHOUT_CLASSIFICATION	9.961590336888912E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999198372912768	WITHOUT_CLASSIFICATION	8.016270872320403E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999020752805488	WITHOUT_CLASSIFICATION	9.792471945131396E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999020752805488	WITHOUT_CLASSIFICATION	9.792471945131396E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999754276344993	WITHOUT_CLASSIFICATION	2.457236550066619E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999814089573887	WITHOUT_CLASSIFICATION	1.859104261125262E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999824276419405	WITHOUT_CLASSIFICATION	1.7572358059529272E-5	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998686943615287	WITHOUT_CLASSIFICATION	1.3130563847142923E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999778957861242	WITHOUT_CLASSIFICATION	2.2104213875832108E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999773987474716	WITHOUT_CLASSIFICATION	2.260125252836132E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999834286600576	WITHOUT_CLASSIFICATION	1.6571339942385E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999884372706189	WITHOUT_CLASSIFICATION	1.1562729381004447E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999404865432934	WITHOUT_CLASSIFICATION	5.951345670667617E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999959539067539	WITHOUT_CLASSIFICATION	4.046093246141399E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999776420426073	WITHOUT_CLASSIFICATION	2.2357957392678095E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999975190959403	WITHOUT_CLASSIFICATION	2.4809040597323433E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999883245052952	WITHOUT_CLASSIFICATION	1.1675494704815303E-5	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999674983809743	WITHOUT_CLASSIFICATION	3.2501619025644376E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999739654151246	WITHOUT_CLASSIFICATION	2.603458487534204E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999951897845043	WITHOUT_CLASSIFICATION	4.810215495693187E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999831981869305	WITHOUT_CLASSIFICATION	1.6801813069545584E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999840015310637	WITHOUT_CLASSIFICATION	1.5998468936308968E-5	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999924628770784	WITHOUT_CLASSIFICATION	7.537122921495403E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999144159875518	WITHOUT_CLASSIFICATION	8.558401244819573E-5	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999919867208886	WITHOUT_CLASSIFICATION	8.01327911147594E-6	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999321130064857	WITHOUT_CLASSIFICATION	6.78869935143573E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999661360254113	WITHOUT_CLASSIFICATION	3.386397458879855E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999480243023826	WITHOUT_CLASSIFICATION	5.197569761738905E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999908757523797	WITHOUT_CLASSIFICATION	9.124247620313874E-6	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999753353529907	WITHOUT_CLASSIFICATION	2.4664647009279117E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999774698083668	WITHOUT_CLASSIFICATION	2.2530191633165495E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9971215253042527	WITHOUT_CLASSIFICATION	0.0028784746957472795	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998001305229821	WITHOUT_CLASSIFICATION	1.9986947701795786E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.99997338891003	WITHOUT_CLASSIFICATION	2.661108996996852E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999763286195641	WITHOUT_CLASSIFICATION	2.367138043585141E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999509531943163	WITHOUT_CLASSIFICATION	4.9046805683675575E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999810371915124	WITHOUT_CLASSIFICATION	1.8962808487578913E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999916846588478	WITHOUT_CLASSIFICATION	8.31534115225053E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999922896847196	WITHOUT_CLASSIFICATION	7.710315280364034E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999879369576378	WITHOUT_CLASSIFICATION	1.206304236216471E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999899949805846	WITHOUT_CLASSIFICATION	1.0005019415414962E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999960000350078	WITHOUT_CLASSIFICATION	3.999964992165641E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999864598785706	WITHOUT_CLASSIFICATION	1.354012142935752E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997715610919352	WITHOUT_CLASSIFICATION	2.2843890806463813E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999820427503303	WITHOUT_CLASSIFICATION	1.7957249669680032E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999973210124733	WITHOUT_CLASSIFICATION	2.6789875267069838E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999836395986379	WITHOUT_CLASSIFICATION	1.6360401362143752E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9996290293750064	WITHOUT_CLASSIFICATION	3.7097062499354415E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999932919301496	WITHOUT_CLASSIFICATION	6.708069850407875E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999733789067535	WITHOUT_CLASSIFICATION	2.66210932465076E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999051584727193	WITHOUT_CLASSIFICATION	9.484152728075425E-5	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99999440508782	WITHOUT_CLASSIFICATION	5.594912179952029E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996309393404358	WITHOUT_CLASSIFICATION	3.6906065956425255E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999982276517236	WITHOUT_CLASSIFICATION	1.7723482764330985E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999299136375757	WITHOUT_CLASSIFICATION	7.008636242443497E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999093812908424	WITHOUT_CLASSIFICATION	9.061870915765418E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999447441601731	WITHOUT_CLASSIFICATION	5.525583982696389E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995263974271661	WITHOUT_CLASSIFICATION	4.73602572833919E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999951897845043	WITHOUT_CLASSIFICATION	4.810215495693187E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999862165297202	WITHOUT_CLASSIFICATION	1.3783470279685335E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999971274137755	WITHOUT_CLASSIFICATION	2.8725862245063205E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999936016191292	WITHOUT_CLASSIFICATION	6.398380870854497E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999935868174411	WITHOUT_CLASSIFICATION	6.413182558942654E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999726098166631	WITHOUT_CLASSIFICATION	2.7390183336889334E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999974176340338	WITHOUT_CLASSIFICATION	2.582365966155479E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999007839254853	WITHOUT_CLASSIFICATION	9.92160745147564E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999562046150571	WITHOUT_CLASSIFICATION	4.379538494289717E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999462172792232	WITHOUT_CLASSIFICATION	5.378272077679731E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999958430295834	WITHOUT_CLASSIFICATION	4.156970416564619E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998479483133383	WITHOUT_CLASSIFICATION	1.520516866615551E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999976235579425	WITHOUT_CLASSIFICATION	2.376442057570836E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999838853582284	WITHOUT_CLASSIFICATION	1.6114641771701566E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999838853582284	WITHOUT_CLASSIFICATION	1.6114641771701566E-5	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998176846674732	WITHOUT_CLASSIFICATION	1.8231533252688076E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9993064689177652	WITHOUT_CLASSIFICATION	6.935310822347404E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999914126760153	WITHOUT_CLASSIFICATION	8.58732398474992E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9967550850323467	WITHOUT_CLASSIFICATION	0.003244914967653289	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999986995869302	WITHOUT_CLASSIFICATION	1.3004130698004461E-5	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999911760893974	WITHOUT_CLASSIFICATION	8.823910602597104E-6	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999979640855982	WITHOUT_CLASSIFICATION	2.0359144017557744E-6	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999368744951307	WITHOUT_CLASSIFICATION	6.31255048693156E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999550688792986	WITHOUT_CLASSIFICATION	4.493112070134506E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999757660240631	WITHOUT_CLASSIFICATION	2.4233975936834158E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999757660240631	WITHOUT_CLASSIFICATION	2.4233975936834158E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999497319421495	WITHOUT_CLASSIFICATION	5.0268057850591614E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995541958875	WITHOUT_CLASSIFICATION	4.4580411254407226E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999748371882347	WITHOUT_CLASSIFICATION	2.5162811765322653E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999988122535522	WITHOUT_CLASSIFICATION	1.1877464477969517E-5	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999320911773227	WITHOUT_CLASSIFICATION	6.790882267731887E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996298303385118	WITHOUT_CLASSIFICATION	3.7016966148822325E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999997161313864	WITHOUT_CLASSIFICATION	2.8386861360729034E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999978701959113	WITHOUT_CLASSIFICATION	2.129804088706067E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999521601013723	WITHOUT_CLASSIFICATION	4.78398986277623E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999966461961866	WITHOUT_CLASSIFICATION	3.353803813368223E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999861486656566	WITHOUT_CLASSIFICATION	1.3851334343479989E-5	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999507508159321	WITHOUT_CLASSIFICATION	4.924918406778678E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999585900224762	WITHOUT_CLASSIFICATION	4.140997752375531E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503097697798	WITHOUT_CLASSIFICATION	4.9690230220247875E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999469519121734	WITHOUT_CLASSIFICATION	5.3048087826671904E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999800128138454	WITHOUT_CLASSIFICATION	1.998718615455564E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999781486866383	WITHOUT_CLASSIFICATION	2.1851313361762416E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999807146722872	WITHOUT_CLASSIFICATION	1.9285327712736338E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999872931857112	WITHOUT_CLASSIFICATION	1.2706814288772158E-5	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999659848366871	WITHOUT_CLASSIFICATION	3.401516331280279E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999925267549747	WITHOUT_CLASSIFICATION	7.4732450253258265E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999980955320062	WITHOUT_CLASSIFICATION	1.9044679936879675E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999711192064452	WITHOUT_CLASSIFICATION	2.8880793554739608E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999861888522512	WITHOUT_CLASSIFICATION	1.3811147748876798E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999904502308694	WITHOUT_CLASSIFICATION	9.54976913059654E-6	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.999972299638367	WITHOUT_CLASSIFICATION	2.7700361632977926E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999798676846596	WITHOUT_CLASSIFICATION	2.0132315340328868E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708979348271	WITHOUT_CLASSIFICATION	2.9102065172905935E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999958120418952	WITHOUT_CLASSIFICATION	4.1879581047870215E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999759565318063	WITHOUT_CLASSIFICATION	2.4043468193667768E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999433395759868	WITHOUT_CLASSIFICATION	5.6660424013273504E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651637680089	WITHOUT_CLASSIFICATION	3.483623199111962E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9946471177770357	WITHOUT_CLASSIFICATION	0.005352882222964255	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999939610661556	WITHOUT_CLASSIFICATION	6.038933844366088E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999203812593769	WITHOUT_CLASSIFICATION	7.961874062316623E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999799455456789	WITHOUT_CLASSIFICATION	2.0054454321068598E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682683461234	WITHOUT_CLASSIFICATION	3.173165387654338E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999983782592042	WITHOUT_CLASSIFICATION	1.6217407957278263E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999617583234588	WITHOUT_CLASSIFICATION	3.8241676541308464E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999766481683506	WITHOUT_CLASSIFICATION	2.3351831649281746E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999887256871813	WITHOUT_CLASSIFICATION	1.1274312818648945E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999791898421216	WITHOUT_CLASSIFICATION	2.0810157878420802E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998344136398368	WITHOUT_CLASSIFICATION	1.6558636016312183E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999836512811178	WITHOUT_CLASSIFICATION	1.6348718882206428E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999826681104144	WITHOUT_CLASSIFICATION	1.733188958562806E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999827585704174	WITHOUT_CLASSIFICATION	1.7241429582580814E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998308629665035	WITHOUT_CLASSIFICATION	1.6913703349646602E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999884031996807	WITHOUT_CLASSIFICATION	1.1596800319179794E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999253281418962	WITHOUT_CLASSIFICATION	7.467185810380904E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999895195186677	WITHOUT_CLASSIFICATION	1.0480481332335366E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999602724171215	WITHOUT_CLASSIFICATION	3.972758287860018E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999930934816058	WITHOUT_CLASSIFICATION	6.906518394219292E-6	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999931379468525	WITHOUT_CLASSIFICATION	6.862053147414777E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999894138901304	WITHOUT_CLASSIFICATION	1.0586109869618276E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999854372333595	WITHOUT_CLASSIFICATION	1.4562766640507495E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999519131162448	WITHOUT_CLASSIFICATION	4.8086883755239325E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999854372333595	WITHOUT_CLASSIFICATION	1.4562766640507495E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999785094967611	WITHOUT_CLASSIFICATION	2.149050323879736E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999965387214993	WITHOUT_CLASSIFICATION	3.46127850083546E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999799899931691	WITHOUT_CLASSIFICATION	2.0010006830934452E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999954369801693	WITHOUT_CLASSIFICATION	4.563019830598936E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999986717087015	WITHOUT_CLASSIFICATION	1.3282912985023365E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999799899931691	WITHOUT_CLASSIFICATION	2.0010006830934452E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999862721593825	WITHOUT_CLASSIFICATION	1.3727840617516787E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996833009251896	WITHOUT_CLASSIFICATION	3.166990748102874E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999925983878779	WITHOUT_CLASSIFICATION	7.401612122116356E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999919729639112	WITHOUT_CLASSIFICATION	8.02703608881409E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999580044458763	WITHOUT_CLASSIFICATION	4.1995554123623214E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999925913022338	WITHOUT_CLASSIFICATION	7.408697766183718E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999947017965171	WITHOUT_CLASSIFICATION	5.298203482967842E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9993590233618688	WITHOUT_CLASSIFICATION	6.409766381312829E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999911079548662	WITHOUT_CLASSIFICATION	8.892045133736318E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999912496093287	WITHOUT_CLASSIFICATION	8.750390671210172E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999751890173451	WITHOUT_CLASSIFICATION	2.481098265501595E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999972133611418	WITHOUT_CLASSIFICATION	2.786638858197523E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999994660340328	WITHOUT_CLASSIFICATION	5.339659671855211E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998044249427198	WITHOUT_CLASSIFICATION	1.9557505728017734E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999985283101471	WITHOUT_CLASSIFICATION	1.4716898529014911E-5	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999935714923818	WITHOUT_CLASSIFICATION	6.428507618194003E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9980233189002066	WITHOUT_CLASSIFICATION	0.0019766810997934466	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999994596280908	WITHOUT_CLASSIFICATION	5.403719091902933E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999512563960058	WITHOUT_CLASSIFICATION	4.874360399414136E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9971792754925155	WITHOUT_CLASSIFICATION	0.0028207245074844535	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999823878847818	WITHOUT_CLASSIFICATION	1.7612115218178924E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999922163165207	WITHOUT_CLASSIFICATION	7.783683479298835E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999801659181486	WITHOUT_CLASSIFICATION	1.9834081851246813E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999747351305386	WITHOUT_CLASSIFICATION	2.526486946140011E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999848159351103	WITHOUT_CLASSIFICATION	1.5184064889661572E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999510268321288	WITHOUT_CLASSIFICATION	4.8973167871158414E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999977062704923	WITHOUT_CLASSIFICATION	2.293729507691457E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999912480809704	WITHOUT_CLASSIFICATION	8.751919029681155E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999753191752266	WITHOUT_CLASSIFICATION	2.4680824773420768E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999860994287418	WITHOUT_CLASSIFICATION	1.390057125816312E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999801659181486	WITHOUT_CLASSIFICATION	1.9834081851246813E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999803096071641	WITHOUT_CLASSIFICATION	1.9690392835872633E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999185694106468	WITHOUT_CLASSIFICATION	8.143058935320599E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999811515036082	WITHOUT_CLASSIFICATION	1.8848496391758935E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9990823315123125	WITHOUT_CLASSIFICATION	9.176684876874168E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9971792754925155	WITHOUT_CLASSIFICATION	0.0028207245074844535	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999872847438065	WITHOUT_CLASSIFICATION	1.2715256193432111E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999912539817635	WITHOUT_CLASSIFICATION	8.746018236504505E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998943977865071	WITHOUT_CLASSIFICATION	1.0560221349289045E-4	TEST
special case	WITHOUT_CLASSIFICATION	0.9999850047002906	WITHOUT_CLASSIFICATION	1.4995299709258845E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999458852845783	WITHOUT_CLASSIFICATION	5.411471542178544E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999958086604984	WITHOUT_CLASSIFICATION	4.191339501552546E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999358476228213	WITHOUT_CLASSIFICATION	6.415237717871432E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999512392300297	WITHOUT_CLASSIFICATION	4.876076997018007E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999565390583213	WITHOUT_CLASSIFICATION	4.346094167881687E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999755260138719	WITHOUT_CLASSIFICATION	2.4473986128085342E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9993098272270968	WITHOUT_CLASSIFICATION	6.901727729030868E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999920701512691	WITHOUT_CLASSIFICATION	7.929848730921055E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999904039409171	WITHOUT_CLASSIFICATION	9.596059082887606E-6	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999900145076627	WITHOUT_CLASSIFICATION	9.985492337339051E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999891497365138	WITHOUT_CLASSIFICATION	1.0850263486185615E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999995084699565	WITHOUT_CLASSIFICATION	4.915300434996084E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998670920484568	WITHOUT_CLASSIFICATION	1.3290795154324888E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998243588191403	WITHOUT_CLASSIFICATION	1.7564118085964517E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998587255935003	WITHOUT_CLASSIFICATION	1.4127440649961513E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999660949698956	WITHOUT_CLASSIFICATION	3.3905030104291017E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999612592261143	WITHOUT_CLASSIFICATION	3.874077388556447E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999612592261143	WITHOUT_CLASSIFICATION	3.874077388556447E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999929925140403	WITHOUT_CLASSIFICATION	7.007485959704956E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999612592261143	WITHOUT_CLASSIFICATION	3.874077388556447E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999612592261143	WITHOUT_CLASSIFICATION	3.874077388556447E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999802311394761	WITHOUT_CLASSIFICATION	1.9768860523933473E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998039074246116	WITHOUT_CLASSIFICATION	1.960925753883698E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999950315106857	WITHOUT_CLASSIFICATION	4.9684893142967374E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999950315106857	WITHOUT_CLASSIFICATION	4.9684893142967374E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999788075855884	WITHOUT_CLASSIFICATION	2.1192414411594416E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999651190135236	WITHOUT_CLASSIFICATION	3.4880986476469343E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999768979549393	WITHOUT_CLASSIFICATION	2.3102045060819767E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9992889875640364	WITHOUT_CLASSIFICATION	7.110124359636076E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999867930880226	WITHOUT_CLASSIFICATION	1.3206911977381979E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999093022315654	WITHOUT_CLASSIFICATION	9.069776843451558E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999074427617272	WITHOUT_CLASSIFICATION	9.255723827283683E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999927083284225	WITHOUT_CLASSIFICATION	7.291671577572286E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999371240921139	WITHOUT_CLASSIFICATION	6.287590788610283E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998712498389459	WITHOUT_CLASSIFICATION	1.2875016105416787E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999801896147903	WITHOUT_CLASSIFICATION	1.9810385209742046E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998808712813284	WITHOUT_CLASSIFICATION	1.1912871867151022E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864869981199	WITHOUT_CLASSIFICATION	1.3513001880049296E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999720954690521	WITHOUT_CLASSIFICATION	2.790453094803157E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999676290143953	WITHOUT_CLASSIFICATION	3.2370985604638726E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998277711192775	WITHOUT_CLASSIFICATION	1.722288807226734E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999985677267191	WITHOUT_CLASSIFICATION	1.432273280877089E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.999972863163928	WITHOUT_CLASSIFICATION	2.7136836072050522E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864869981199	WITHOUT_CLASSIFICATION	1.3513001880049296E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999823878847818	WITHOUT_CLASSIFICATION	1.7612115218178924E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999847929368617	WITHOUT_CLASSIFICATION	1.5207063138314134E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999756322395791	WITHOUT_CLASSIFICATION	2.4367760420904483E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999640955463096	WITHOUT_CLASSIFICATION	3.590445369033535E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999884891139916	WITHOUT_CLASSIFICATION	1.1510886008368742E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999930557573685	WITHOUT_CLASSIFICATION	6.944242631482642E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999117010961062	WITHOUT_CLASSIFICATION	8.829890389389064E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999986413859021	WITHOUT_CLASSIFICATION	1.3586140979074521E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999893279399253	WITHOUT_CLASSIFICATION	1.0672060074610936E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999933373006955	WITHOUT_CLASSIFICATION	6.662699304488974E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.999985309880247	WITHOUT_CLASSIFICATION	1.4690119752948668E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999029499417444	WITHOUT_CLASSIFICATION	9.705005825553462E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999933580970966	WITHOUT_CLASSIFICATION	6.641902903497059E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999830014377283	WITHOUT_CLASSIFICATION	1.6998562271666315E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999035256471365	WITHOUT_CLASSIFICATION	9.647435286352163E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999151864166651	WITHOUT_CLASSIFICATION	8.481358333488052E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999922832569131	WITHOUT_CLASSIFICATION	7.716743086834368E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999944902330499	WITHOUT_CLASSIFICATION	5.509766950120506E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999953827860517	WITHOUT_CLASSIFICATION	4.617213948306077E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999130051828587	WITHOUT_CLASSIFICATION	8.6994817141319E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999800879564117	WITHOUT_CLASSIFICATION	1.9912043588322024E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999787063408155	WITHOUT_CLASSIFICATION	2.129365918446828E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999998350948193	WITHOUT_CLASSIFICATION	1.6490518073832728E-7	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999893279399253	WITHOUT_CLASSIFICATION	1.0672060074610936E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999840756821896	WITHOUT_CLASSIFICATION	1.5924317810426286E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.999979497573946	WITHOUT_CLASSIFICATION	2.0502426053998316E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999762590168689	WITHOUT_CLASSIFICATION	2.3740983131170776E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999592648508079	WITHOUT_CLASSIFICATION	4.07351491922007E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999785880882779	WITHOUT_CLASSIFICATION	2.1411911722058522E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999914901361394	WITHOUT_CLASSIFICATION	8.509863860693927E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999793937770884	WITHOUT_CLASSIFICATION	2.060622291164173E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999914901361394	WITHOUT_CLASSIFICATION	8.509863860693927E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999798910817658	WITHOUT_CLASSIFICATION	2.0108918234187726E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999684775747226	WITHOUT_CLASSIFICATION	3.1522425277458507E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999932302869471	WITHOUT_CLASSIFICATION	6.769713052858128E-6	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999759662963272	WITHOUT_CLASSIFICATION	2.4033703672796395E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999255345107889	WITHOUT_CLASSIFICATION	7.446548921101564E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999728296369499	WITHOUT_CLASSIFICATION	2.7170363050082482E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999727535597094	WITHOUT_CLASSIFICATION	2.724644029057113E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999684775747226	WITHOUT_CLASSIFICATION	3.1522425277458507E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999960603984291	WITHOUT_CLASSIFICATION	3.9396015708990614E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999778859497065	WITHOUT_CLASSIFICATION	2.2114050293544166E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999082393313439	WITHOUT_CLASSIFICATION	9.176066865615386E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998813966188812	WITHOUT_CLASSIFICATION	1.186033811188558E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999903833407305	WITHOUT_CLASSIFICATION	9.616659269474445E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999910472359944	WITHOUT_CLASSIFICATION	8.95276400559684E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999684689496336	WITHOUT_CLASSIFICATION	3.1531050366314445E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494891178338	WITHOUT_CLASSIFICATION	5.051088216615469E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600665547266	WITHOUT_CLASSIFICATION	3.9933445273467625E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598067364239	WITHOUT_CLASSIFICATION	4.019326357604993E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598067364239	WITHOUT_CLASSIFICATION	4.019326357604993E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598067364239	WITHOUT_CLASSIFICATION	4.019326357604993E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999979931456696	WITHOUT_CLASSIFICATION	2.006854330351725E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999979931456696	WITHOUT_CLASSIFICATION	2.006854330351725E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997733702335994	WITHOUT_CLASSIFICATION	2.2662976640065475E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999958066955876	WITHOUT_CLASSIFICATION	4.193304412376431E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999788307851888	WITHOUT_CLASSIFICATION	2.116921481126594E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999816686720989	WITHOUT_CLASSIFICATION	1.8331327901043687E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999186944613422	WITHOUT_CLASSIFICATION	8.130553865777971E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503075616032	WITHOUT_CLASSIFICATION	4.969243839671969E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525278562392	WITHOUT_CLASSIFICATION	4.7472143760823716E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999971675294104	WITHOUT_CLASSIFICATION	2.8324705897164305E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646389877317	WITHOUT_CLASSIFICATION	3.536101226823276E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503075616032	WITHOUT_CLASSIFICATION	4.969243839671969E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525278562392	WITHOUT_CLASSIFICATION	4.7472143760823716E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999411214059505	WITHOUT_CLASSIFICATION	5.8878594049433716E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999766530067865	WITHOUT_CLASSIFICATION	2.3346993213462192E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999977557728753	WITHOUT_CLASSIFICATION	2.2442271246433717E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9998626773814776	WITHOUT_CLASSIFICATION	1.373226185225039E-4	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999831415859767	WITHOUT_CLASSIFICATION	1.6858414023325528E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999732160704395	WITHOUT_CLASSIFICATION	2.6783929560479003E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999779256613018	WITHOUT_CLASSIFICATION	2.2074338698152033E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999815795641158	WITHOUT_CLASSIFICATION	1.8420435884113647E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996657099320487	WITHOUT_CLASSIFICATION	3.342900679512684E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998799827143188	WITHOUT_CLASSIFICATION	1.2001728568124267E-4	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999642881984289	WITHOUT_CLASSIFICATION	3.571180157124047E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999826085977107	WITHOUT_CLASSIFICATION	1.7391402289280975E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999823841865704	WITHOUT_CLASSIFICATION	1.7615813429692256E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9921210868356399	WITHOUT_CLASSIFICATION	0.007878913164360044	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999789261823882	WITHOUT_CLASSIFICATION	2.1073817611881756E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999678529367333	WITHOUT_CLASSIFICATION	3.2147063266631757E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999633387026509	WITHOUT_CLASSIFICATION	3.666129734907716E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999951597088793	WITHOUT_CLASSIFICATION	4.840291120663754E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998939871112456	WITHOUT_CLASSIFICATION	1.0601288875440265E-4	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999934852717958	WITHOUT_CLASSIFICATION	6.514728204207836E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999937742996987	WITHOUT_CLASSIFICATION	6.225700301329229E-6	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999681800215604	WITHOUT_CLASSIFICATION	3.181997843953877E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999182157595765	WITHOUT_CLASSIFICATION	8.178424042358435E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999875175492233	WITHOUT_CLASSIFICATION	1.2482450776694878E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505848051725	WITHOUT_CLASSIFICATION	4.941519482743846E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311944832995	WITHOUT_CLASSIFICATION	6.880551670058063E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999169655529431	WITHOUT_CLASSIFICATION	8.30344470569158E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999169655529431	WITHOUT_CLASSIFICATION	8.30344470569158E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999490858324791	WITHOUT_CLASSIFICATION	5.091416752088756E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999936925241971	WITHOUT_CLASSIFICATION	6.307475802861514E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999301468321502	WITHOUT_CLASSIFICATION	6.98531678498326E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999834445399335	WITHOUT_CLASSIFICATION	1.6555460066518993E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999914966767641	WITHOUT_CLASSIFICATION	8.503323235870539E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999768781505879	WITHOUT_CLASSIFICATION	2.3121849412175373E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999705142209926	WITHOUT_CLASSIFICATION	2.9485779007421534E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999913314564339	WITHOUT_CLASSIFICATION	8.668543566091683E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999938350392169	WITHOUT_CLASSIFICATION	6.164960783071987E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999561166072843	WITHOUT_CLASSIFICATION	4.388339271570244E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9986461307511975	WITHOUT_CLASSIFICATION	0.0013538692488025176	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996588737722354	WITHOUT_CLASSIFICATION	3.4112622776459465E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999972142323683	WITHOUT_CLASSIFICATION	2.7857676317384917E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999546875435517	WITHOUT_CLASSIFICATION	4.531245644828106E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999490437567716	WITHOUT_CLASSIFICATION	5.095624322830209E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9998704180722809	WITHOUT_CLASSIFICATION	1.2958192771906623E-4	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999867500642321	WITHOUT_CLASSIFICATION	1.3249935767976063E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996588737722354	WITHOUT_CLASSIFICATION	3.4112622776459465E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996588737722354	WITHOUT_CLASSIFICATION	3.4112622776459465E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9998934416679184	WITHOUT_CLASSIFICATION	1.0655833208158505E-4	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999185901351729	WITHOUT_CLASSIFICATION	8.140986482705814E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9890362466140736	WITHOUT_CLASSIFICATION	0.010963753385926452	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999838176786923	WITHOUT_CLASSIFICATION	1.618232130763324E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999833024925974	WITHOUT_CLASSIFICATION	1.669750740261842E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999633387026509	WITHOUT_CLASSIFICATION	3.666129734907716E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9992444850505362	WITHOUT_CLASSIFICATION	7.555149494637385E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999891835696917	WITHOUT_CLASSIFICATION	1.0816430308297535E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999786514662253	WITHOUT_CLASSIFICATION	2.134853377470059E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543412516223	WITHOUT_CLASSIFICATION	4.565874837766902E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999921466758327	WITHOUT_CLASSIFICATION	7.853324167402317E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999546308995724	WITHOUT_CLASSIFICATION	4.536910042758661E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999676910316373	WITHOUT_CLASSIFICATION	3.2308968362637184E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999676910316373	WITHOUT_CLASSIFICATION	3.2308968362637184E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999676910316373	WITHOUT_CLASSIFICATION	3.2308968362637184E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999676910316373	WITHOUT_CLASSIFICATION	3.2308968362637184E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563895730363	WITHOUT_CLASSIFICATION	4.361042696380206E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999937802467107	WITHOUT_CLASSIFICATION	6.219753289304791E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998361372360917	WITHOUT_CLASSIFICATION	1.638627639082487E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999783050809301	WITHOUT_CLASSIFICATION	2.1694919069952992E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501561166553	WITHOUT_CLASSIFICATION	4.9843883344603665E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549445221484	WITHOUT_CLASSIFICATION	4.5055477851581914E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999748793244584	WITHOUT_CLASSIFICATION	2.5120675541626815E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999873264126901	WITHOUT_CLASSIFICATION	1.2673587309928591E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999360520926424	WITHOUT_CLASSIFICATION	6.39479073575803E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999536347117183	WITHOUT_CLASSIFICATION	4.6365288281811E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999946850636785	WITHOUT_CLASSIFICATION	5.3149363215324395E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999809033669517	WITHOUT_CLASSIFICATION	1.9096633048346824E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999795424423004	WITHOUT_CLASSIFICATION	2.0457557699569134E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999795424423004	WITHOUT_CLASSIFICATION	2.0457557699569134E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999795424423004	WITHOUT_CLASSIFICATION	2.0457557699569134E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999743678265652	WITHOUT_CLASSIFICATION	2.5632173434713078E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999878428529564	WITHOUT_CLASSIFICATION	1.215714704361689E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999962025474587	WITHOUT_CLASSIFICATION	3.797452541302214E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500676643206	WITHOUT_CLASSIFICATION	4.993233567935605E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999824337000677	WITHOUT_CLASSIFICATION	1.7566299932310837E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598067364239	WITHOUT_CLASSIFICATION	4.019326357604993E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999965993671572	WITHOUT_CLASSIFICATION	3.4006328427377776E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999618443326869	WITHOUT_CLASSIFICATION	3.815566731318702E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999929368396808	WITHOUT_CLASSIFICATION	7.0631603191676585E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999898155038227	WITHOUT_CLASSIFICATION	1.0184496177306845E-4	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500223489647	WITHOUT_CLASSIFICATION	4.9977651035330015E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999914730971844	WITHOUT_CLASSIFICATION	8.526902815713877E-6	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999871905447827	WITHOUT_CLASSIFICATION	1.2809455217358951E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999718926816037	WITHOUT_CLASSIFICATION	2.810731839626705E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998615065180619	WITHOUT_CLASSIFICATION	1.3849348193810634E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999953310289943	WITHOUT_CLASSIFICATION	4.6689710056960427E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999525890121831	WITHOUT_CLASSIFICATION	4.7410987816973674E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999886539092432	WITHOUT_CLASSIFICATION	1.1346090756869443E-5	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999987618229759	WITHOUT_CLASSIFICATION	1.238177024167175E-6	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999700252422755	WITHOUT_CLASSIFICATION	2.99747577244114E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999984164723885	WITHOUT_CLASSIFICATION	1.5835276115136472E-6	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998574234591129	WITHOUT_CLASSIFICATION	1.4257654088722257E-4	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999906461786575	WITHOUT_CLASSIFICATION	9.353821342501973E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999278346890925	WITHOUT_CLASSIFICATION	7.216531090751223E-5	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999842816311363	WITHOUT_CLASSIFICATION	1.5718368863808978E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999793826063353	WITHOUT_CLASSIFICATION	2.06173936647032E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999172804824824	WITHOUT_CLASSIFICATION	8.27195175174858E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999859683422525	WITHOUT_CLASSIFICATION	1.4031657747418267E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999978229060318	WITHOUT_CLASSIFICATION	2.1770939681164137E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999856888461627	WITHOUT_CLASSIFICATION	1.4311153837280863E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999539396722747	WITHOUT_CLASSIFICATION	4.6060327725161E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999842235955	WITHOUT_CLASSIFICATION	1.5776404500050506E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993371827596146	WITHOUT_CLASSIFICATION	6.628172403854873E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998109177853	WITHOUT_CLASSIFICATION	1.8908221469390678E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.999985493543758	WITHOUT_CLASSIFICATION	1.4506456242051786E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999745098845668	WITHOUT_CLASSIFICATION	2.5490115433147228E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999865053824951	WITHOUT_CLASSIFICATION	1.3494617504932507E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999631445565025	WITHOUT_CLASSIFICATION	3.685544349754867E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999643646384245	WITHOUT_CLASSIFICATION	3.5635361575466244E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998880216907556	WITHOUT_CLASSIFICATION	1.119783092442976E-4	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999777872108426	WITHOUT_CLASSIFICATION	2.221278915731696E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999906180076381	WITHOUT_CLASSIFICATION	9.381992361851429E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999333185481883	WITHOUT_CLASSIFICATION	6.668145181167478E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999966057247269	WITHOUT_CLASSIFICATION	3.394275273144942E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999747643465571	WITHOUT_CLASSIFICATION	2.5235653442911395E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999635519406798	WITHOUT_CLASSIFICATION	3.644805932019296E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999510435462341	WITHOUT_CLASSIFICATION	4.895645376593838E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999967181440994	WITHOUT_CLASSIFICATION	3.281855900694115E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997076781947687	WITHOUT_CLASSIFICATION	2.923218052313315E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999573688736144	WITHOUT_CLASSIFICATION	4.263112638561258E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997883163764859	WITHOUT_CLASSIFICATION	2.1168362351414003E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999927103105358	WITHOUT_CLASSIFICATION	7.2896894641760284E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999861273857198	WITHOUT_CLASSIFICATION	1.3872614280193862E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999076794501073	WITHOUT_CLASSIFICATION	9.232054989267692E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.999995640710452	WITHOUT_CLASSIFICATION	4.359289547977727E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999826862146042	WITHOUT_CLASSIFICATION	1.7313785395912702E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9993280274826505	WITHOUT_CLASSIFICATION	6.719725173495121E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999945269892044	WITHOUT_CLASSIFICATION	5.473010795451447E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999930866909913	WITHOUT_CLASSIFICATION	6.913309008670048E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997285022421752	WITHOUT_CLASSIFICATION	2.714977578248284E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999859126559942	WITHOUT_CLASSIFICATION	1.4087344005866808E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999764706837169	WITHOUT_CLASSIFICATION	2.3529316283198777E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998809981114025	WITHOUT_CLASSIFICATION	1.1900188859739907E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996214629774	WITHOUT_CLASSIFICATION	3.785370226811953E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999950404492337	WITHOUT_CLASSIFICATION	4.959550766310392E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996502587675827	WITHOUT_CLASSIFICATION	3.497412324172264E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999766517418238	WITHOUT_CLASSIFICATION	2.334825817618564E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999400704988706	WITHOUT_CLASSIFICATION	5.9929501129443865E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999977161440848	WITHOUT_CLASSIFICATION	2.2838559150484364E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999513768717995	WITHOUT_CLASSIFICATION	4.8623128200479175E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999992696295202	WITHOUT_CLASSIFICATION	7.30370479793361E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999913441570895	WITHOUT_CLASSIFICATION	8.655842910501334E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.999983129498404	WITHOUT_CLASSIFICATION	1.687050159603545E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999132104482003	WITHOUT_CLASSIFICATION	8.678955179969137E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999990774434568	WITHOUT_CLASSIFICATION	9.225565432028089E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999798450828724	WITHOUT_CLASSIFICATION	2.0154917127650703E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999822865092944	WITHOUT_CLASSIFICATION	1.7713490705560893E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999990880679654	WITHOUT_CLASSIFICATION	9.119320344786856E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999831669237995	WITHOUT_CLASSIFICATION	1.683307620055105E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997763362477292	WITHOUT_CLASSIFICATION	2.236637522707486E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999504423490255	WITHOUT_CLASSIFICATION	4.955765097451439E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996794105226081	WITHOUT_CLASSIFICATION	3.2058947739181334E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9986528087442517	WITHOUT_CLASSIFICATION	0.001347191255748333	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999607011670231	WITHOUT_CLASSIFICATION	3.929883297702966E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999697610832532	WITHOUT_CLASSIFICATION	3.023891674680013E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999832171803558	WITHOUT_CLASSIFICATION	1.678281964424067E-5	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999728397610125	WITHOUT_CLASSIFICATION	2.716023898745778E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998814037443685	WITHOUT_CLASSIFICATION	1.1859625563157548E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999815385478626	WITHOUT_CLASSIFICATION	1.8461452137416552E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999847067927836	WITHOUT_CLASSIFICATION	1.5293207216321973E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999841419679275	WITHOUT_CLASSIFICATION	1.5858032072523212E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999892413316277	WITHOUT_CLASSIFICATION	1.0758668372251348E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999226472071218	WITHOUT_CLASSIFICATION	7.73527928781971E-5	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999711954020419	WITHOUT_CLASSIFICATION	2.880459795809124E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999698999414735	WITHOUT_CLASSIFICATION	3.0100058526481306E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999791954506025	WITHOUT_CLASSIFICATION	2.080454939745685E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999923888109449	WITHOUT_CLASSIFICATION	7.611189055234E-6	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999847711442124	WITHOUT_CLASSIFICATION	1.5228855787676052E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999887216491387	WITHOUT_CLASSIFICATION	1.127835086135749E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999887216491387	WITHOUT_CLASSIFICATION	1.127835086135749E-5	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998649485135679	WITHOUT_CLASSIFICATION	1.350514864321066E-4	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999745927539389	WITHOUT_CLASSIFICATION	2.5407246061189293E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999760504683022	WITHOUT_CLASSIFICATION	2.3949531697845427E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9997304428368765	WITHOUT_CLASSIFICATION	2.695571631235393E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999908642549336	WITHOUT_CLASSIFICATION	9.135745066434948E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9992936519095788	WITHOUT_CLASSIFICATION	7.063480904213019E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9988798113966654	WITHOUT_CLASSIFICATION	0.001120188603334671	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997313059254614	WITHOUT_CLASSIFICATION	2.6869407453854367E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999582338491233	WITHOUT_CLASSIFICATION	4.1766150876625924E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9988904110909165	WITHOUT_CLASSIFICATION	0.001109588909083433	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999876169658274	WITHOUT_CLASSIFICATION	1.238303417261569E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999906127452714	WITHOUT_CLASSIFICATION	9.387254728595767E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999822860122483	WITHOUT_CLASSIFICATION	1.771398775170463E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999904811317566	WITHOUT_CLASSIFICATION	9.518868243532146E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999948274238079	WITHOUT_CLASSIFICATION	5.1725761921770285E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999179830640654	WITHOUT_CLASSIFICATION	8.201693593465581E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999749814831709	WITHOUT_CLASSIFICATION	2.501851682922434E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999749814831709	WITHOUT_CLASSIFICATION	2.501851682922434E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999825073577098	WITHOUT_CLASSIFICATION	1.7492642290121667E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998944284718966	WITHOUT_CLASSIFICATION	1.0557152810352E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999896516896222	WITHOUT_CLASSIFICATION	1.0348310377889473E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999447828405681	WITHOUT_CLASSIFICATION	5.5217159431940215E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999708235308176	WITHOUT_CLASSIFICATION	2.9176469182434488E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824338650718	WITHOUT_CLASSIFICATION	1.756613492828833E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999708235308176	WITHOUT_CLASSIFICATION	2.9176469182434488E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999832764983294	WITHOUT_CLASSIFICATION	1.672350167062811E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999685983415185	WITHOUT_CLASSIFICATION	3.1401658481428265E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999898480870631	WITHOUT_CLASSIFICATION	1.0151912936814468E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999898480870631	WITHOUT_CLASSIFICATION	1.0151912936814468E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999948054586887	WITHOUT_CLASSIFICATION	5.194541311293489E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999493128661964	WITHOUT_CLASSIFICATION	5.0687133803661006E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999915129084672	WITHOUT_CLASSIFICATION	8.487091532808192E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999528098690429	WITHOUT_CLASSIFICATION	4.719013095718653E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997524747837	WITHOUT_CLASSIFICATION	2.475252162695812E-7	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999023220947533	WITHOUT_CLASSIFICATION	9.767790524681079E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999928205644019	WITHOUT_CLASSIFICATION	7.179435598113496E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999913826672764	WITHOUT_CLASSIFICATION	8.617332723688308E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999942828383205	WITHOUT_CLASSIFICATION	5.717161679531899E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998693710653522	WITHOUT_CLASSIFICATION	1.3062893464781518E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999990106248022	WITHOUT_CLASSIFICATION	9.8937519779736E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999158573356303	WITHOUT_CLASSIFICATION	8.414266436964447E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9953358219257117	WITHOUT_CLASSIFICATION	0.004664178074288309	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999836454368264	WITHOUT_CLASSIFICATION	1.6354563173664793E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999781486866383	WITHOUT_CLASSIFICATION	2.1851313361762416E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999993747243498	WITHOUT_CLASSIFICATION	6.2527565019903104E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999816559633375	WITHOUT_CLASSIFICATION	1.8344036662496924E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998822991917885	WITHOUT_CLASSIFICATION	1.1770080821157839E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999696700703361	WITHOUT_CLASSIFICATION	3.0329929663854722E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999624344651776	WITHOUT_CLASSIFICATION	3.75655348222618E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999660757653207	WITHOUT_CLASSIFICATION	3.3924234679273365E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999863713025341	WITHOUT_CLASSIFICATION	1.3628697465982798E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999710310649043	WITHOUT_CLASSIFICATION	2.8968935095732232E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999954741080815	WITHOUT_CLASSIFICATION	4.525891918514921E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999357958689787	WITHOUT_CLASSIFICATION	6.42041310212413E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999642676543962	WITHOUT_CLASSIFICATION	3.5732345603801437E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999977884421501	WITHOUT_CLASSIFICATION	2.2115578498962852E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999892084456681	WITHOUT_CLASSIFICATION	1.0791554331960262E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984725585697	WITHOUT_CLASSIFICATION	1.5274414303239887E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999678336507064	WITHOUT_CLASSIFICATION	3.2166349293601153E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999788966848517	WITHOUT_CLASSIFICATION	2.1103315148286212E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999951534631567	WITHOUT_CLASSIFICATION	4.846536843293351E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999184259793148	WITHOUT_CLASSIFICATION	8.157402068512324E-5	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999544808461966	WITHOUT_CLASSIFICATION	4.5519153803486246E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999967773711489	WITHOUT_CLASSIFICATION	3.222628851101903E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999861872771316	WITHOUT_CLASSIFICATION	1.3812722868434662E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999861872771316	WITHOUT_CLASSIFICATION	1.3812722868434662E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999779010124425	WITHOUT_CLASSIFICATION	2.2098987557384065E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673965356578	WITHOUT_CLASSIFICATION	3.2603464342169796E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999933353234071	WITHOUT_CLASSIFICATION	6.664676592922078E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999838454107105	WITHOUT_CLASSIFICATION	1.615458928954837E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999763522296249	WITHOUT_CLASSIFICATION	2.3647770375130057E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999890012858529	WITHOUT_CLASSIFICATION	1.0998714147036116E-5	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999371721523	WITHOUT_CLASSIFICATION	6.282784780156542E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999958515911559	WITHOUT_CLASSIFICATION	4.148408844087364E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999779010124425	WITHOUT_CLASSIFICATION	2.2098987557384065E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673965356578	WITHOUT_CLASSIFICATION	3.2603464342169796E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998789550627217	WITHOUT_CLASSIFICATION	1.2104493727821599E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999953302483174	WITHOUT_CLASSIFICATION	4.669751682590833E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999946424604045	WITHOUT_CLASSIFICATION	5.35753959556651E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999597451980057	WITHOUT_CLASSIFICATION	4.025480199438406E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999831111752774	WITHOUT_CLASSIFICATION	1.6888824722702218E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9997780501567397	WITHOUT_CLASSIFICATION	2.2194984326029E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999724729166691	WITHOUT_CLASSIFICATION	2.752708333085084E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999820839593042	WITHOUT_CLASSIFICATION	1.791604069575056E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999868143543987	WITHOUT_CLASSIFICATION	1.3185645601324557E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9985548469508292	WITHOUT_CLASSIFICATION	0.0014451530491708772	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999893276334382	WITHOUT_CLASSIFICATION	1.0672366561798675E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9985548469508292	WITHOUT_CLASSIFICATION	0.0014451530491708772	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9997464840352877	WITHOUT_CLASSIFICATION	2.5351596471237834E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999950404492337	WITHOUT_CLASSIFICATION	4.959550766310392E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9997464840352877	WITHOUT_CLASSIFICATION	2.5351596471237834E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998807842274211	WITHOUT_CLASSIFICATION	1.192157725789641E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999948770987184	WITHOUT_CLASSIFICATION	5.122901281596128E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999820839593042	WITHOUT_CLASSIFICATION	1.791604069575056E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999820839593042	WITHOUT_CLASSIFICATION	1.791604069575056E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.99997888484269	WITHOUT_CLASSIFICATION	2.111515731004732E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999788977307317	WITHOUT_CLASSIFICATION	2.1102269268294818E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.99997888484269	WITHOUT_CLASSIFICATION	2.111515731004732E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999787585567685	WITHOUT_CLASSIFICATION	2.1241443231480868E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999898206433703	WITHOUT_CLASSIFICATION	1.017935662982097E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999769201287734	WITHOUT_CLASSIFICATION	2.3079871226709998E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998346192514357	WITHOUT_CLASSIFICATION	1.6538074856436416E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999794465834476	WITHOUT_CLASSIFICATION	2.0553416552381555E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999391570792001	WITHOUT_CLASSIFICATION	6.084292079988613E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999779048339045	WITHOUT_CLASSIFICATION	2.209516609551866E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999787955329136	WITHOUT_CLASSIFICATION	2.1204467086395473E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999786339383901	WITHOUT_CLASSIFICATION	2.1366061609824286E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999954364731991	WITHOUT_CLASSIFICATION	4.5635268009869995E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999797173591609	WITHOUT_CLASSIFICATION	2.0282640839050387E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999782502956234	WITHOUT_CLASSIFICATION	2.174970437654539E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999612260790306	WITHOUT_CLASSIFICATION	3.877392096931724E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999766746863898	WITHOUT_CLASSIFICATION	2.332531361011123E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999683204526109	WITHOUT_CLASSIFICATION	3.167954738909539E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999874388271176	WITHOUT_CLASSIFICATION	1.256117288252372E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999946035201458	WITHOUT_CLASSIFICATION	5.396479854233952E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999786543606282	WITHOUT_CLASSIFICATION	2.13456393717797E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999911223118968	WITHOUT_CLASSIFICATION	8.877688103163138E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999802347861605	WITHOUT_CLASSIFICATION	1.9765213839486687E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999786551820725	WITHOUT_CLASSIFICATION	2.134481792744309E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999231558014084	WITHOUT_CLASSIFICATION	7.684419859153491E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997850198772057	WITHOUT_CLASSIFICATION	2.149801227944558E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998918431013357	WITHOUT_CLASSIFICATION	1.0815689866422035E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998557413451252	WITHOUT_CLASSIFICATION	1.442586548747768E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9876711483899393	WITHOUT_CLASSIFICATION	0.012328851610060632	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999824919315218	WITHOUT_CLASSIFICATION	1.7508068478250593E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999794465834476	WITHOUT_CLASSIFICATION	2.0553416552381555E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999856658546191	WITHOUT_CLASSIFICATION	1.433414538084824E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.99988377549009	WITHOUT_CLASSIFICATION	1.1622450991002023E-4	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.938958580413452	WITHOUT_CLASSIFICATION	0.06104141958654799	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999052509603266	WITHOUT_CLASSIFICATION	9.474903967342329E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999949757773503	WITHOUT_CLASSIFICATION	5.024222649727214E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999917546575415	WITHOUT_CLASSIFICATION	8.24534245843505E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999787585567685	WITHOUT_CLASSIFICATION	2.1241443231480868E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999787585567685	WITHOUT_CLASSIFICATION	2.1241443231480868E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999949348943318	WITHOUT_CLASSIFICATION	5.0651056682871685E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999887165705339	WITHOUT_CLASSIFICATION	1.1283429466094255E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999855339360244	WITHOUT_CLASSIFICATION	1.4466063975555278E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999902982251699	WITHOUT_CLASSIFICATION	9.701774830100547E-6	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999798199452523	WITHOUT_CLASSIFICATION	2.01800547476876E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999894622073405	WITHOUT_CLASSIFICATION	1.0537792659484016E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999891939514156	WITHOUT_CLASSIFICATION	1.0806048584287246E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999878426576018	WITHOUT_CLASSIFICATION	1.215734239822121E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999064232771506	WITHOUT_CLASSIFICATION	9.357672284931727E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999875264812482	WITHOUT_CLASSIFICATION	1.2473518751894723E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934099874219	WITHOUT_CLASSIFICATION	6.5900125780898136E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999612260790306	WITHOUT_CLASSIFICATION	3.877392096931724E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999779010124425	WITHOUT_CLASSIFICATION	2.2098987557384065E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934099874219	WITHOUT_CLASSIFICATION	6.5900125780898136E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999907322212337	WITHOUT_CLASSIFICATION	9.267778766216652E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999978449638999	WITHOUT_CLASSIFICATION	2.1550361001182723E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999914844619113	WITHOUT_CLASSIFICATION	8.515538088594131E-6	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9975420596797371	WITHOUT_CLASSIFICATION	0.00245794032026302	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999293641937682	WITHOUT_CLASSIFICATION	7.06358062317682E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978356493145	WITHOUT_CLASSIFICATION	2.1643506854631743E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999937312701629	WITHOUT_CLASSIFICATION	6.268729837011027E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999577918348524	WITHOUT_CLASSIFICATION	4.2208165147539944E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999779003529473	WITHOUT_CLASSIFICATION	2.2099647052649467E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999841540886859	WITHOUT_CLASSIFICATION	1.584591131400336E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999347898276791	WITHOUT_CLASSIFICATION	6.521017232094357E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999347898276791	WITHOUT_CLASSIFICATION	6.521017232094357E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999085360262528	WITHOUT_CLASSIFICATION	9.146397374704357E-5	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9997077780349379	WITHOUT_CLASSIFICATION	2.9222196506199175E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999934099874219	WITHOUT_CLASSIFICATION	6.5900125780898136E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999293641937682	WITHOUT_CLASSIFICATION	7.06358062317682E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999937312701629	WITHOUT_CLASSIFICATION	6.268729837011027E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999876222504422	WITHOUT_CLASSIFICATION	1.2377749557675597E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999999306982417	WITHOUT_CLASSIFICATION	6.930175829185637E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999799978865932	WITHOUT_CLASSIFICATION	2.000211340684432E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999705271406075	WITHOUT_CLASSIFICATION	2.94728593924692E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999850705104235	WITHOUT_CLASSIFICATION	1.4929489576439255E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999779024268766	WITHOUT_CLASSIFICATION	2.209757312342823E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999907322212337	WITHOUT_CLASSIFICATION	9.267778766216652E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999952858150084	WITHOUT_CLASSIFICATION	4.714184991604698E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999790356937378	WITHOUT_CLASSIFICATION	2.096430626224002E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998802488425647	WITHOUT_CLASSIFICATION	1.1975115743535134E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999451564395735	WITHOUT_CLASSIFICATION	5.484356042654648E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999428244783486	WITHOUT_CLASSIFICATION	5.717552165152795E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999904111727571	WITHOUT_CLASSIFICATION	9.588827242878821E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998807842274211	WITHOUT_CLASSIFICATION	1.192157725789641E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796988490225	WITHOUT_CLASSIFICATION	2.0301150977466695E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9997896097367576	WITHOUT_CLASSIFICATION	2.1039026324246902E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999617947709627	WITHOUT_CLASSIFICATION	3.820522903727631E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999931562994838	WITHOUT_CLASSIFICATION	6.843700516217239E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999909651387225	WITHOUT_CLASSIFICATION	9.034861277418044E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999854676754025	WITHOUT_CLASSIFICATION	1.4532324597363415E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999788783521746	WITHOUT_CLASSIFICATION	2.112164782541994E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999433060115285	WITHOUT_CLASSIFICATION	5.6693988471631947E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999779024268766	WITHOUT_CLASSIFICATION	2.209757312342823E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999759196386264	WITHOUT_CLASSIFICATION	2.408036137349781E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999418577067063	WITHOUT_CLASSIFICATION	5.8142293293722506E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999918205065864	WITHOUT_CLASSIFICATION	8.179493413570863E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999071195934303	WITHOUT_CLASSIFICATION	9.288040656964768E-5	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999803011354591	WITHOUT_CLASSIFICATION	1.9698864540842728E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998715913163952	WITHOUT_CLASSIFICATION	1.284086836047805E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999902534441825	WITHOUT_CLASSIFICATION	9.746555817508237E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999814974976651	WITHOUT_CLASSIFICATION	1.8502502334951698E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999787786165888	WITHOUT_CLASSIFICATION	2.1221383411198145E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999939278018822	WITHOUT_CLASSIFICATION	6.07219811772269E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999872204080468	WITHOUT_CLASSIFICATION	1.277959195321422E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999979167355584	WITHOUT_CLASSIFICATION	2.0832644417340863E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999695838238949	WITHOUT_CLASSIFICATION	3.041617610517125E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999808249051343	WITHOUT_CLASSIFICATION	1.9175094865700455E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999904781817669	WITHOUT_CLASSIFICATION	9.521818233122214E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999367777193046	WITHOUT_CLASSIFICATION	6.322228069552081E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999621274750841	WITHOUT_CLASSIFICATION	3.787252491585666E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999288989290324	WITHOUT_CLASSIFICATION	7.110107096766808E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999682427149724	WITHOUT_CLASSIFICATION	3.17572850275305E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999849679465288	WITHOUT_CLASSIFICATION	1.5032053471163159E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999171681983786	WITHOUT_CLASSIFICATION	8.283180162135475E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9955843756507211	WITHOUT_CLASSIFICATION	0.004415624349278875	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.99980882643071	WITHOUT_CLASSIFICATION	1.9117356928994097E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999384820141832	WITHOUT_CLASSIFICATION	6.15179858167914E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999492767241175	WITHOUT_CLASSIFICATION	5.072327588250526E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9941667879464829	WITHOUT_CLASSIFICATION	0.005833212053517113	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999707327978758	WITHOUT_CLASSIFICATION	2.9267202124172715E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999756922901424	WITHOUT_CLASSIFICATION	2.4307709857614583E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999731210653865	WITHOUT_CLASSIFICATION	2.687893461345731E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995263974271661	WITHOUT_CLASSIFICATION	4.73602572833919E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999819606878149	WITHOUT_CLASSIFICATION	1.8039312185153974E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999642400761399	WITHOUT_CLASSIFICATION	3.5759923860009654E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999722650028143	WITHOUT_CLASSIFICATION	2.7734997185615097E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998661840565369	WITHOUT_CLASSIFICATION	1.3381594346309833E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999642400761399	WITHOUT_CLASSIFICATION	3.5759923860009654E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999819606878149	WITHOUT_CLASSIFICATION	1.8039312185153974E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999722650028143	WITHOUT_CLASSIFICATION	2.7734997185615097E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999677459551395	WITHOUT_CLASSIFICATION	3.225404486048944E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999689861553206	WITHOUT_CLASSIFICATION	3.1013844679492586E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9987583558956714	WITHOUT_CLASSIFICATION	0.0012416441043285632	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999907146813037	WITHOUT_CLASSIFICATION	9.285318696223225E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999991677755237	WITHOUT_CLASSIFICATION	8.322244762937545E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9890948609822031	WITHOUT_CLASSIFICATION	0.010905139017796817	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999316380573615	WITHOUT_CLASSIFICATION	6.836194263853515E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999237905674738	WITHOUT_CLASSIFICATION	7.620943252616917E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999994106901759	WITHOUT_CLASSIFICATION	5.8930982409640615E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999807734116751	WITHOUT_CLASSIFICATION	1.922658832489965E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999802502123017	WITHOUT_CLASSIFICATION	1.974978769824508E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999865327611595	WITHOUT_CLASSIFICATION	1.3467238840580534E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999647750421019	WITHOUT_CLASSIFICATION	3.522495789811192E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999907146813037	WITHOUT_CLASSIFICATION	9.285318696223225E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999919887058323	WITHOUT_CLASSIFICATION	8.01129416771229E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999904883464368	WITHOUT_CLASSIFICATION	9.51165356314247E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999199671537329	WITHOUT_CLASSIFICATION	8.003284626710527E-5	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999988017948902	WITHOUT_CLASSIFICATION	1.1982051097128509E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999630219220532	WITHOUT_CLASSIFICATION	3.697807794678695E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998797984774128	WITHOUT_CLASSIFICATION	1.2020152258714947E-4	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998879323118557	WITHOUT_CLASSIFICATION	1.120676881443321E-4	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999947538943217	WITHOUT_CLASSIFICATION	5.2461056782939044E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999880269235661	WITHOUT_CLASSIFICATION	1.1973076433912555E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999969176488184	WITHOUT_CLASSIFICATION	3.082351181598832E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998797984774128	WITHOUT_CLASSIFICATION	1.2020152258714947E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998797984774128	WITHOUT_CLASSIFICATION	1.2020152258714947E-4	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999883119356422	WITHOUT_CLASSIFICATION	1.1688064357792933E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999883119356422	WITHOUT_CLASSIFICATION	1.1688064357792933E-5	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999366292635746	WITHOUT_CLASSIFICATION	6.337073642534974E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999199671537329	WITHOUT_CLASSIFICATION	8.003284626710527E-5	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999781851265363	WITHOUT_CLASSIFICATION	2.1814873463709477E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999844518568802	WITHOUT_CLASSIFICATION	1.554814311973431E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999922132559961	WITHOUT_CLASSIFICATION	7.78674400392635E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999922132559961	WITHOUT_CLASSIFICATION	7.78674400392635E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999916437310283	WITHOUT_CLASSIFICATION	8.35626897158006E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999932127239435	WITHOUT_CLASSIFICATION	6.7872760564932E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999970318026052	WITHOUT_CLASSIFICATION	2.968197394807355E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999898513907913	WITHOUT_CLASSIFICATION	1.0148609208666425E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999872864909383	WITHOUT_CLASSIFICATION	1.2713509061739389E-5	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999725147883	WITHOUT_CLASSIFICATION	2.748521169478736E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.999990447147014	WITHOUT_CLASSIFICATION	9.552852986033922E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999630324704206	WITHOUT_CLASSIFICATION	3.696752957948478E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999894623326426	WITHOUT_CLASSIFICATION	1.0537667357332025E-5	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999888686405174	WITHOUT_CLASSIFICATION	1.1131359482536846E-5	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999892485388555	WITHOUT_CLASSIFICATION	1.0751461144574853E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999704482228404	WITHOUT_CLASSIFICATION	2.9551777159564623E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999758993638916	WITHOUT_CLASSIFICATION	2.410063610838526E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999798365717777	WITHOUT_CLASSIFICATION	2.016342822237593E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.99992798210736	WITHOUT_CLASSIFICATION	7.201789263998149E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999711870020016	WITHOUT_CLASSIFICATION	2.881299799850665E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542753088608	WITHOUT_CLASSIFICATION	4.572469113915383E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999898536486281	WITHOUT_CLASSIFICATION	1.0146351371799651E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999837651524841	WITHOUT_CLASSIFICATION	1.6234847515983385E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999995158536755	WITHOUT_CLASSIFICATION	4.84146324501457E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999982011740169	WITHOUT_CLASSIFICATION	1.7988259831068216E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9997814687648818	WITHOUT_CLASSIFICATION	2.1853123511816972E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999993748260438	WITHOUT_CLASSIFICATION	6.251739561991012E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999843519892162	WITHOUT_CLASSIFICATION	1.5648010783804107E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999834445399335	WITHOUT_CLASSIFICATION	1.6555460066518993E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999792954539567	WITHOUT_CLASSIFICATION	2.0704546043229676E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999787786165888	WITHOUT_CLASSIFICATION	2.1221383411198145E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999837120104795	WITHOUT_CLASSIFICATION	1.628798952046239E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999963442307731	WITHOUT_CLASSIFICATION	3.655769227035727E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500425934092	WITHOUT_CLASSIFICATION	4.9957406590786365E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488166969097	WITHOUT_CLASSIFICATION	5.118330309030887E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999846230086906	WITHOUT_CLASSIFICATION	1.53769913094095E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999846230086906	WITHOUT_CLASSIFICATION	1.53769913094095E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999214172611672	WITHOUT_CLASSIFICATION	7.858273883279292E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999802946505708	WITHOUT_CLASSIFICATION	1.970534942917354E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999794729519403	WITHOUT_CLASSIFICATION	2.052704805962786E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999794729519403	WITHOUT_CLASSIFICATION	2.052704805962786E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999899949805846	WITHOUT_CLASSIFICATION	1.0005019415414962E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998660252067967	WITHOUT_CLASSIFICATION	1.339747932032481E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999755236996967	WITHOUT_CLASSIFICATION	2.4476300303279386E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999833024925974	WITHOUT_CLASSIFICATION	1.669750740261842E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999804780302952	WITHOUT_CLASSIFICATION	1.9521969704794054E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9994865799892132	WITHOUT_CLASSIFICATION	5.134200107868104E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999814143386704	WITHOUT_CLASSIFICATION	1.8585661329630743E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999961077728341	WITHOUT_CLASSIFICATION	3.8922271659073604E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999961077728341	WITHOUT_CLASSIFICATION	3.8922271659073604E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999807484145364	WITHOUT_CLASSIFICATION	1.9251585463621457E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999654133694236	WITHOUT_CLASSIFICATION	3.45866305764051E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999654133694236	WITHOUT_CLASSIFICATION	3.45866305764051E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999650437515716	WITHOUT_CLASSIFICATION	3.49562484284938E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999807809145138	WITHOUT_CLASSIFICATION	1.9219085486202254E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999878141806452	WITHOUT_CLASSIFICATION	1.2185819354870953E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.999986293886488	WITHOUT_CLASSIFICATION	1.3706113511962315E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999765108421165	WITHOUT_CLASSIFICATION	2.3489157883583104E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999428319631054	WITHOUT_CLASSIFICATION	5.716803689464308E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998481679614548	WITHOUT_CLASSIFICATION	1.51832038545183E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999895925245637	WITHOUT_CLASSIFICATION	1.040747543627403E-5	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997379142648933	WITHOUT_CLASSIFICATION	2.620857351067676E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999951049101242	WITHOUT_CLASSIFICATION	4.895089875782233E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999407251746335	WITHOUT_CLASSIFICATION	5.9274825366457575E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999779169750719	WITHOUT_CLASSIFICATION	2.2083024928144928E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999779169750719	WITHOUT_CLASSIFICATION	2.2083024928144928E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999779169750719	WITHOUT_CLASSIFICATION	2.2083024928144928E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999779169750719	WITHOUT_CLASSIFICATION	2.2083024928144928E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999567157961589	WITHOUT_CLASSIFICATION	4.3284203841048486E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999006149971338	WITHOUT_CLASSIFICATION	9.938500286624976E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999705142209926	WITHOUT_CLASSIFICATION	2.9485779007421534E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999648958628926	WITHOUT_CLASSIFICATION	3.510413710736728E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999545074071773	WITHOUT_CLASSIFICATION	4.549259282284131E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9994934009506008	WITHOUT_CLASSIFICATION	5.065990493991431E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999479084357508	WITHOUT_CLASSIFICATION	5.209156424924077E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999998282977634	WITHOUT_CLASSIFICATION	1.7170223659456682E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999869857875537	WITHOUT_CLASSIFICATION	1.301421244618294E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.999980925415826	WITHOUT_CLASSIFICATION	1.907458417398043E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998938354171534	WITHOUT_CLASSIFICATION	1.0616458284663251E-4	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9950818741894019	WITHOUT_CLASSIFICATION	0.004918125810598042	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9990666505935456	WITHOUT_CLASSIFICATION	9.333494064543858E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998998100878561	WITHOUT_CLASSIFICATION	1.001899121438233E-4	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998938354171534	WITHOUT_CLASSIFICATION	1.0616458284663251E-4	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9939607839907728	WITHOUT_CLASSIFICATION	0.006039216009227152	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999946401449346	WITHOUT_CLASSIFICATION	5.359855065460119E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999002063031833	WITHOUT_CLASSIFICATION	9.979369681673781E-5	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995332360164136	WITHOUT_CLASSIFICATION	4.6676398358627707E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9990729433371228	WITHOUT_CLASSIFICATION	9.270566628772246E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998976500930696	WITHOUT_CLASSIFICATION	1.0234990693032493E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999964790564159	WITHOUT_CLASSIFICATION	3.5209435842387707E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999890379183417	WITHOUT_CLASSIFICATION	1.0962081658265476E-5	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822079187216	WITHOUT_CLASSIFICATION	1.7792081278420346E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999841075368561	WITHOUT_CLASSIFICATION	1.5892463143887316E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822079187216	WITHOUT_CLASSIFICATION	1.7792081278420346E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999890031017117	WITHOUT_CLASSIFICATION	1.0996898288290522E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997803680242323	WITHOUT_CLASSIFICATION	2.1963197576777447E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996245474067184	WITHOUT_CLASSIFICATION	3.7545259328157054E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999938658539349	WITHOUT_CLASSIFICATION	6.134146065095541E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999940348714363	WITHOUT_CLASSIFICATION	5.965128563675911E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999411711863802	WITHOUT_CLASSIFICATION	5.882881361982708E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999978030668894	WITHOUT_CLASSIFICATION	2.1969331105941018E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997487223033062	WITHOUT_CLASSIFICATION	2.512776966936551E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999978030668894	WITHOUT_CLASSIFICATION	2.1969331105941018E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999813371469565	WITHOUT_CLASSIFICATION	1.8662853043592095E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999471612921621	WITHOUT_CLASSIFICATION	5.2838707837985245E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999578859830652	WITHOUT_CLASSIFICATION	4.211401693472302E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999683831626562	WITHOUT_CLASSIFICATION	3.1616837343773295E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999724595824794	WITHOUT_CLASSIFICATION	2.7540417520661383E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997079572645908	WITHOUT_CLASSIFICATION	2.920427354092278E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999411711863802	WITHOUT_CLASSIFICATION	5.882881361982708E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997487223033062	WITHOUT_CLASSIFICATION	2.512776966936551E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999813371469565	WITHOUT_CLASSIFICATION	1.8662853043592095E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999310261298128	WITHOUT_CLASSIFICATION	6.89738701872269E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999909497500946	WITHOUT_CLASSIFICATION	9.05024990534939E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999891724031715	WITHOUT_CLASSIFICATION	1.0827596828543745E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.999999155943658	WITHOUT_CLASSIFICATION	8.440563420948656E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999920338833425	WITHOUT_CLASSIFICATION	7.966116657494618E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999788540111073	WITHOUT_CLASSIFICATION	2.1145988892703054E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999878463153291	WITHOUT_CLASSIFICATION	1.2153684670875256E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542753088608	WITHOUT_CLASSIFICATION	4.572469113915383E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999471612921621	WITHOUT_CLASSIFICATION	5.2838707837985245E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999908585978815	WITHOUT_CLASSIFICATION	9.14140211838619E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.99997888484269	WITHOUT_CLASSIFICATION	2.111515731004732E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999197164371769	WITHOUT_CLASSIFICATION	8.028356282311852E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999769375485041	WITHOUT_CLASSIFICATION	2.3062451495805027E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542753088608	WITHOUT_CLASSIFICATION	4.572469113915383E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999846982850452	WITHOUT_CLASSIFICATION	1.5301714954843234E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542753088608	WITHOUT_CLASSIFICATION	4.572469113915383E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999957957608867	WITHOUT_CLASSIFICATION	4.2042391133017876E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999798676846596	WITHOUT_CLASSIFICATION	2.0132315340328868E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999714091532418	WITHOUT_CLASSIFICATION	2.8590846758140593E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999476832539828	WITHOUT_CLASSIFICATION	5.23167460173926E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999939610661556	WITHOUT_CLASSIFICATION	6.038933844366088E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999846709989291	WITHOUT_CLASSIFICATION	1.5329001070938953E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999771647965081	WITHOUT_CLASSIFICATION	2.2835203491935502E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999871438222758	WITHOUT_CLASSIFICATION	1.2856177724159481E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999722033074838	WITHOUT_CLASSIFICATION	2.779669251617078E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999670716426902	WITHOUT_CLASSIFICATION	3.2928357309843836E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999895902185089	WITHOUT_CLASSIFICATION	1.0409781491153375E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999645425014285	WITHOUT_CLASSIFICATION	3.545749857148743E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997191309580186	WITHOUT_CLASSIFICATION	2.808690419814168E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.999978604614281	WITHOUT_CLASSIFICATION	2.1395385719074645E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999725643935099	WITHOUT_CLASSIFICATION	2.74356064900734E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999989762896563	WITHOUT_CLASSIFICATION	1.0237103437055145E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999921208862126	WITHOUT_CLASSIFICATION	7.87911378749776E-6	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998905646582862	WITHOUT_CLASSIFICATION	1.0943534171372147E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999951828893365	WITHOUT_CLASSIFICATION	4.817110663460702E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999986099430885	WITHOUT_CLASSIFICATION	1.3900569115012594E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998935910967381	WITHOUT_CLASSIFICATION	1.0640890326187944E-4	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998935910967381	WITHOUT_CLASSIFICATION	1.0640890326187944E-4	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999884236609704	WITHOUT_CLASSIFICATION	1.1576339029505993E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999750033407483	WITHOUT_CLASSIFICATION	2.4996659251729798E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999779062873418	WITHOUT_CLASSIFICATION	2.2093712658124367E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999807793757298	WITHOUT_CLASSIFICATION	1.9220624270266837E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999999216230917	WITHOUT_CLASSIFICATION	7.837690830048177E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999887582160014	WITHOUT_CLASSIFICATION	1.124178399853472E-5	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999778349441776	WITHOUT_CLASSIFICATION	2.2165055822452135E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999074361542651	WITHOUT_CLASSIFICATION	9.256384573497442E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9918426740264293	WITHOUT_CLASSIFICATION	0.00815732597357069	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999931379468525	WITHOUT_CLASSIFICATION	6.862053147414777E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999509612810122	WITHOUT_CLASSIFICATION	4.903871898775637E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999367806261573	WITHOUT_CLASSIFICATION	6.321937384261724E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996998072970631	WITHOUT_CLASSIFICATION	3.001927029369663E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999725759738849	WITHOUT_CLASSIFICATION	2.7424026115034597E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999954369801693	WITHOUT_CLASSIFICATION	4.563019830598936E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999712044390315	WITHOUT_CLASSIFICATION	2.87955609684502E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999834286600576	WITHOUT_CLASSIFICATION	1.6571339942385E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999834286600576	WITHOUT_CLASSIFICATION	1.6571339942385E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999972311018274	WITHOUT_CLASSIFICATION	2.768898172717746E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999871438222758	WITHOUT_CLASSIFICATION	1.2856177724159481E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999354310037173	WITHOUT_CLASSIFICATION	6.456899628275952E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999430302855301	WITHOUT_CLASSIFICATION	5.696971447001497E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999901543398033	WITHOUT_CLASSIFICATION	9.845660196573067E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999986837705629	WITHOUT_CLASSIFICATION	1.316229437090077E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999892033687044	WITHOUT_CLASSIFICATION	1.0796631295624328E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999783943497335	WITHOUT_CLASSIFICATION	2.1605650266451607E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999896210472524	WITHOUT_CLASSIFICATION	1.0378952747569511E-5	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998106706807804	WITHOUT_CLASSIFICATION	1.893293192194257E-4	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999914122943907	WITHOUT_CLASSIFICATION	8.587705609418357E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999932201454079	WITHOUT_CLASSIFICATION	6.7798545920997565E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999777440809728	WITHOUT_CLASSIFICATION	2.225591902706807E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999451480547382	WITHOUT_CLASSIFICATION	5.485194526187157E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999978955799564	WITHOUT_CLASSIFICATION	2.1044200435380905E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999818093174295	WITHOUT_CLASSIFICATION	1.8190682570453287E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999914945547554	WITHOUT_CLASSIFICATION	8.505445244583145E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999961042070312	WITHOUT_CLASSIFICATION	3.895792968715769E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999915616212763	WITHOUT_CLASSIFICATION	8.438378723632116E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999972769474142	WITHOUT_CLASSIFICATION	2.7230525857975053E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999476495386649	WITHOUT_CLASSIFICATION	5.235046133508865E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998191629611621	WITHOUT_CLASSIFICATION	1.8083703883791576E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999970242475244	WITHOUT_CLASSIFICATION	2.975752475605666E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999831382476597	WITHOUT_CLASSIFICATION	1.686175234030183E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999511343626913	WITHOUT_CLASSIFICATION	4.886563730863546E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999841204289339	WITHOUT_CLASSIFICATION	1.5879571065981366E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998581276675471	WITHOUT_CLASSIFICATION	1.4187233245299347E-4	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999005143432624	WITHOUT_CLASSIFICATION	9.948565673760603E-5	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999040854615322	WITHOUT_CLASSIFICATION	9.591453846777017E-5	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999458069458925	WITHOUT_CLASSIFICATION	5.419305410755526E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999503371234523	WITHOUT_CLASSIFICATION	4.966287654771864E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999510483872326	WITHOUT_CLASSIFICATION	4.895161276750323E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999994067695263	WITHOUT_CLASSIFICATION	5.932304736973681E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999533798551414	WITHOUT_CLASSIFICATION	4.662014485850381E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999740269894929	WITHOUT_CLASSIFICATION	2.5973010507068943E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9963788459523752	WITHOUT_CLASSIFICATION	0.0036211540476248725	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998743960628106	WITHOUT_CLASSIFICATION	1.2560393718942457E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999878548414337	WITHOUT_CLASSIFICATION	1.2145158566320801E-5	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999811665306717	WITHOUT_CLASSIFICATION	1.8833469328310122E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999811665306717	WITHOUT_CLASSIFICATION	1.8833469328310122E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999740737515755	WITHOUT_CLASSIFICATION	2.5926248424415467E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999776421331149	WITHOUT_CLASSIFICATION	2.2357866885081056E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999122724204228	WITHOUT_CLASSIFICATION	8.772757957714274E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999122724204228	WITHOUT_CLASSIFICATION	8.772757957714274E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999959963174985	WITHOUT_CLASSIFICATION	4.0036825014517585E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999927083284225	WITHOUT_CLASSIFICATION	7.291671577572286E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999827826732576	WITHOUT_CLASSIFICATION	1.7217326742336612E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999943915397789	WITHOUT_CLASSIFICATION	5.608460221142168E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999511623076554	WITHOUT_CLASSIFICATION	4.8837692344617624E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999950106804232	WITHOUT_CLASSIFICATION	4.989319576798193E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999934110595603	WITHOUT_CLASSIFICATION	6.588940439772605E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999934110595603	WITHOUT_CLASSIFICATION	6.588940439772605E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999950106804232	WITHOUT_CLASSIFICATION	4.989319576798193E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999664194834926	WITHOUT_CLASSIFICATION	3.35805165072847E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999787585567685	WITHOUT_CLASSIFICATION	2.1241443231480868E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.99997857743231	WITHOUT_CLASSIFICATION	2.142256768997133E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.99997857743231	WITHOUT_CLASSIFICATION	2.142256768997133E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.999983687591407	WITHOUT_CLASSIFICATION	1.631240859298069E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999936107951907	WITHOUT_CLASSIFICATION	6.389204809374495E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999945500180671	WITHOUT_CLASSIFICATION	5.4499819329347445E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999831463142463	WITHOUT_CLASSIFICATION	1.685368575370331E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999797542984085	WITHOUT_CLASSIFICATION	2.0245701591584634E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999786179340697	WITHOUT_CLASSIFICATION	2.138206593027232E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999934696690551	WITHOUT_CLASSIFICATION	6.530330944878491E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999938838618616	WITHOUT_CLASSIFICATION	6.116138138452332E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999930425663159	WITHOUT_CLASSIFICATION	6.957433683992738E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999770868366241	WITHOUT_CLASSIFICATION	2.2913163375924015E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999923516018834	WITHOUT_CLASSIFICATION	7.648398116647288E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9992545232230625	WITHOUT_CLASSIFICATION	7.454767769374576E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9998788289701995	WITHOUT_CLASSIFICATION	1.2117102980043008E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999957967093739	WITHOUT_CLASSIFICATION	4.203290626173717E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999781037941498	WITHOUT_CLASSIFICATION	2.1896205850261108E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9995156995763635	WITHOUT_CLASSIFICATION	4.84300423636454E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999907877877734	WITHOUT_CLASSIFICATION	9.212212226694115E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999417047273471	WITHOUT_CLASSIFICATION	5.8295272652867355E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999783169078866	WITHOUT_CLASSIFICATION	2.168309211337188E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999257952877375	WITHOUT_CLASSIFICATION	7.420471226247473E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999681856959554	WITHOUT_CLASSIFICATION	3.181430404468828E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999687518862519	WITHOUT_CLASSIFICATION	3.1248113748055716E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9945582877752575	WITHOUT_CLASSIFICATION	0.0054417122247424855	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998889280464153	WITHOUT_CLASSIFICATION	1.1107195358464748E-4	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999950241835142	WITHOUT_CLASSIFICATION	4.975816485885756E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999905412679174	WITHOUT_CLASSIFICATION	9.458732082482827E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999811515036082	WITHOUT_CLASSIFICATION	1.8848496391758935E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999954275566935	WITHOUT_CLASSIFICATION	4.572443306548817E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999826085977107	WITHOUT_CLASSIFICATION	1.7391402289280975E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998939871112456	WITHOUT_CLASSIFICATION	1.0601288875440265E-4	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999954117014614	WITHOUT_CLASSIFICATION	4.58829853859201E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999734659864539	WITHOUT_CLASSIFICATION	2.6534013546123923E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999785730932403	WITHOUT_CLASSIFICATION	2.142690675970304E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999864853938111	WITHOUT_CLASSIFICATION	1.3514606188878709E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999758986446631	WITHOUT_CLASSIFICATION	2.4101355336972027E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999783905151982	WITHOUT_CLASSIFICATION	2.1609484801797112E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999986545360641	WITHOUT_CLASSIFICATION	1.3454639358996232E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999925473335166	WITHOUT_CLASSIFICATION	7.452666483334573E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999970892940464	WITHOUT_CLASSIFICATION	2.910705953584768E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.999981812410087	WITHOUT_CLASSIFICATION	1.818758991308678E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999803586593661	WITHOUT_CLASSIFICATION	1.9641340633905286E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999784199411113	WITHOUT_CLASSIFICATION	2.1580058888727767E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999793419311928	WITHOUT_CLASSIFICATION	2.0658068807288573E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999971546749634	WITHOUT_CLASSIFICATION	2.8453250364947086E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999684090905987	WITHOUT_CLASSIFICATION	3.1590909401238085E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999322944586182	WITHOUT_CLASSIFICATION	6.770554138184631E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999915926437453	WITHOUT_CLASSIFICATION	8.407356254780107E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999358520417823	WITHOUT_CLASSIFICATION	6.414795821776411E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999871062542981	WITHOUT_CLASSIFICATION	1.289374570178862E-5	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.990928956792969	WITHOUT_CLASSIFICATION	0.009071043207031022	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.999994209989778	WITHOUT_CLASSIFICATION	5.7900102220269065E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999977220394056	WITHOUT_CLASSIFICATION	2.277960594384025E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999665927012475	WITHOUT_CLASSIFICATION	3.340729875254517E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999970076001778	WITHOUT_CLASSIFICATION	2.9923998222996086E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999809526564007	WITHOUT_CLASSIFICATION	1.904734359922626E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999882547643142	WITHOUT_CLASSIFICATION	1.1745235685787096E-5	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998910122474359	WITHOUT_CLASSIFICATION	1.0898775256416554E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988065031818	WITHOUT_CLASSIFICATION	1.193496818133421E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988065031818	WITHOUT_CLASSIFICATION	1.193496818133421E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.99992679975956	WITHOUT_CLASSIFICATION	7.320024043998191E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999805368225448	WITHOUT_CLASSIFICATION	1.9463177455177844E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999827050850344	WITHOUT_CLASSIFICATION	1.729491496558315E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999773624589512	WITHOUT_CLASSIFICATION	2.2637541048883735E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999327234374771	WITHOUT_CLASSIFICATION	6.727656252297336E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995828069450875	WITHOUT_CLASSIFICATION	4.171930549124985E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999537346452815	WITHOUT_CLASSIFICATION	4.6265354718646896E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999620065777	WITHOUT_CLASSIFICATION	3.7993422305232663E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999682433215237	WITHOUT_CLASSIFICATION	3.175667847630094E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999790127963021	WITHOUT_CLASSIFICATION	2.0987203697974193E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999763665905261	WITHOUT_CLASSIFICATION	2.3633409473793606E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999003671955122	WITHOUT_CLASSIFICATION	9.963280448774801E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999937759909716	WITHOUT_CLASSIFICATION	6.2240090284054215E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997185355792788	WITHOUT_CLASSIFICATION	2.8146442072124407E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999727535597094	WITHOUT_CLASSIFICATION	2.724644029057113E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999727535597094	WITHOUT_CLASSIFICATION	2.724644029057113E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999668310238548	WITHOUT_CLASSIFICATION	3.316897614522519E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999686073007447	WITHOUT_CLASSIFICATION	3.139269925530874E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999978825445461	WITHOUT_CLASSIFICATION	2.1174554538946742E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999986629582923	WITHOUT_CLASSIFICATION	1.3370417077176858E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999684775747226	WITHOUT_CLASSIFICATION	3.1522425277458507E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646648690741	WITHOUT_CLASSIFICATION	3.5335130925897375E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999883474547695	WITHOUT_CLASSIFICATION	1.1652545230566888E-5	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999913713278002	WITHOUT_CLASSIFICATION	8.628672199740094E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999745039055689	WITHOUT_CLASSIFICATION	2.549609443117526E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999976148600476	WITHOUT_CLASSIFICATION	2.385139952402898E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9988799764034179	WITHOUT_CLASSIFICATION	0.0011200235965821074	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999934923434265	WITHOUT_CLASSIFICATION	6.507656573423806E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999487379183595	WITHOUT_CLASSIFICATION	5.126208164048215E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999464981224943	WITHOUT_CLASSIFICATION	5.350187750575765E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999755395265003	WITHOUT_CLASSIFICATION	2.4460473499770652E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999601566924464	WITHOUT_CLASSIFICATION	3.9843307553651584E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999980255375947	WITHOUT_CLASSIFICATION	1.9744624052860514E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998975034879942	WITHOUT_CLASSIFICATION	1.0249651200579254E-4	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999226780408748	WITHOUT_CLASSIFICATION	7.732195912526479E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999964330133593	WITHOUT_CLASSIFICATION	3.566986640694668E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998956041766497	WITHOUT_CLASSIFICATION	1.0439582335032396E-4	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999962467331823	WITHOUT_CLASSIFICATION	3.7532668176113197E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999400609362458	WITHOUT_CLASSIFICATION	5.9939063754205884E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999991729979484	WITHOUT_CLASSIFICATION	8.270020516001522E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999865922453798	WITHOUT_CLASSIFICATION	1.3407754620227429E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999785719634718	WITHOUT_CLASSIFICATION	2.142803652816364E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996657099320487	WITHOUT_CLASSIFICATION	3.342900679512684E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999785799210054	WITHOUT_CLASSIFICATION	2.142007899465186E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999906290619627	WITHOUT_CLASSIFICATION	9.370938037306807E-6	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999857806429491	WITHOUT_CLASSIFICATION	1.4219357050956362E-5	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999693925477446	WITHOUT_CLASSIFICATION	3.060745225534499E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999617693074317	WITHOUT_CLASSIFICATION	3.8230692568174046E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999369070659306	WITHOUT_CLASSIFICATION	6.309293406941362E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999984494188336	WITHOUT_CLASSIFICATION	1.5505811662714816E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999754428936267	WITHOUT_CLASSIFICATION	2.4557106373352267E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999856285029866	WITHOUT_CLASSIFICATION	1.437149701350941E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999586260318061	WITHOUT_CLASSIFICATION	4.137396819391152E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999943010253823	WITHOUT_CLASSIFICATION	5.6989746176043145E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999578131772491	WITHOUT_CLASSIFICATION	4.218682275101159E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999286971602143	WITHOUT_CLASSIFICATION	7.130283978570845E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9997788704093942	WITHOUT_CLASSIFICATION	2.2112959060588378E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999900113954495	WITHOUT_CLASSIFICATION	9.988604550441502E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999039714452184	WITHOUT_CLASSIFICATION	9.602855478157538E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999039714452184	WITHOUT_CLASSIFICATION	9.602855478157538E-5	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999790463405802	WITHOUT_CLASSIFICATION	2.0953659419777657E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999927894165069	WITHOUT_CLASSIFICATION	7.2105834930489155E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.998900022185722	WITHOUT_CLASSIFICATION	0.0010999778142779073	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999570860983088	WITHOUT_CLASSIFICATION	4.291390169127191E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999887177260989	WITHOUT_CLASSIFICATION	1.1282273901180238E-5	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999981404247617	WITHOUT_CLASSIFICATION	1.8595752383991983E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.999964376768779	WITHOUT_CLASSIFICATION	3.562323122103759E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999232593591694	WITHOUT_CLASSIFICATION	7.674064083066246E-5	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999985754201406	WITHOUT_CLASSIFICATION	1.4245798593490354E-6	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509365893035	WITHOUT_CLASSIFICATION	4.906341069651559E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996588737722354	WITHOUT_CLASSIFICATION	3.4112622776459465E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9963716007602568	WITHOUT_CLASSIFICATION	0.0036283992397432795	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999967368819632	WITHOUT_CLASSIFICATION	3.263118036785159E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999547937842751	WITHOUT_CLASSIFICATION	4.5206215724846224E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9984597647265293	WITHOUT_CLASSIFICATION	0.0015402352734707571	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999994662249782	WITHOUT_CLASSIFICATION	5.3377502181201326E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999970555256833	WITHOUT_CLASSIFICATION	2.9444743166888232E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999821954150814	WITHOUT_CLASSIFICATION	1.7804584918705784E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998750299382978	WITHOUT_CLASSIFICATION	1.2497006170217607E-4	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999486565456145	WITHOUT_CLASSIFICATION	5.1343454385557E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996720714175	WITHOUT_CLASSIFICATION	3.279285826132754E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998958545255943	WITHOUT_CLASSIFICATION	1.041454744058125E-4	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998894186795715	WITHOUT_CLASSIFICATION	1.1058132042849449E-4	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999702216848698	WITHOUT_CLASSIFICATION	2.977831513025808E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999397606181826	WITHOUT_CLASSIFICATION	6.023938181736261E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999956029645741	WITHOUT_CLASSIFICATION	4.3970354259612304E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999903175589548	WITHOUT_CLASSIFICATION	9.682441045140528E-6	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9981731769674279	WITHOUT_CLASSIFICATION	0.0018268230325721494	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997682715142053	WITHOUT_CLASSIFICATION	2.3172848579467033E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999897552174605	WITHOUT_CLASSIFICATION	1.0244782539610653E-5	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999948319008194	WITHOUT_CLASSIFICATION	5.168099180696099E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999950839795333	WITHOUT_CLASSIFICATION	4.91602046668515E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999965370216269	WITHOUT_CLASSIFICATION	3.4629783730630742E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999958430295834	WITHOUT_CLASSIFICATION	4.156970416564619E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999360449555119	WITHOUT_CLASSIFICATION	6.395504448801868E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999994596280908	WITHOUT_CLASSIFICATION	5.403719091902933E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999838382398709	WITHOUT_CLASSIFICATION	1.6161760129162494E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999972981437737	WITHOUT_CLASSIFICATION	2.701856226296422E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9990666577463578	WITHOUT_CLASSIFICATION	9.333422536421038E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999990014573313	WITHOUT_CLASSIFICATION	9.98542668693342E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998228526457751	WITHOUT_CLASSIFICATION	1.7714735422485025E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999885079262474	WITHOUT_CLASSIFICATION	1.1492073752605234E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999992153101328	WITHOUT_CLASSIFICATION	7.846898671401302E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999963612244493	WITHOUT_CLASSIFICATION	3.638775550719096E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9997716344316658	WITHOUT_CLASSIFICATION	2.2836556833428988E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9980969403175014	WITHOUT_CLASSIFICATION	0.0019030596824986578	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9998779471390608	WITHOUT_CLASSIFICATION	1.2205286093917434E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999987517684781	WITHOUT_CLASSIFICATION	1.2482315220359178E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999937759909716	WITHOUT_CLASSIFICATION	6.2240090284054215E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999945462937894	WITHOUT_CLASSIFICATION	5.453706210557118E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999991361487485	WITHOUT_CLASSIFICATION	8.638512516359489E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999888715215931	WITHOUT_CLASSIFICATION	1.1128478406831175E-5	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999995991626132	WITHOUT_CLASSIFICATION	4.008373868037175E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999903902029595	WITHOUT_CLASSIFICATION	9.609797040539372E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999969141111337	WITHOUT_CLASSIFICATION	3.0858888662724787E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997310939969299	WITHOUT_CLASSIFICATION	2.6890600307002727E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9989565487271868	WITHOUT_CLASSIFICATION	0.0010434512728133478	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999360520926424	WITHOUT_CLASSIFICATION	6.39479073575803E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999893004612412	WITHOUT_CLASSIFICATION	1.0699538758811175E-5	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999965422052817	WITHOUT_CLASSIFICATION	3.457794718231823E-6	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9991836365682344	WITHOUT_CLASSIFICATION	8.163634317655892E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998587255935003	WITHOUT_CLASSIFICATION	1.4127440649961513E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999764265967737	WITHOUT_CLASSIFICATION	2.3573403226292928E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9997904916913527	WITHOUT_CLASSIFICATION	2.0950830864725545E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998289909328648	WITHOUT_CLASSIFICATION	1.7100906713525557E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999803728693061	WITHOUT_CLASSIFICATION	1.9627130693955753E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997383921656	WITHOUT_CLASSIFICATION	2.6160783440937224E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999993578469395	WITHOUT_CLASSIFICATION	6.421530604786461E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998289909328648	WITHOUT_CLASSIFICATION	1.7100906713525557E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998938451600803	WITHOUT_CLASSIFICATION	1.0615483991982826E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999981616753646	WITHOUT_CLASSIFICATION	1.8383246354862915E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999977889891354	WITHOUT_CLASSIFICATION	2.2110108646672215E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999823483419135	WITHOUT_CLASSIFICATION	1.765165808662069E-5	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999704486611202	WITHOUT_CLASSIFICATION	2.955133887983776E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999141986545289	WITHOUT_CLASSIFICATION	8.58013454711141E-5	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999963783315758	WITHOUT_CLASSIFICATION	3.621668424133282E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9916183643896833	WITHOUT_CLASSIFICATION	0.008381635610316667	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997965341655919	WITHOUT_CLASSIFICATION	2.0346583440810674E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999183944360966	WITHOUT_CLASSIFICATION	8.160556390334668E-5	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999015284038021	WITHOUT_CLASSIFICATION	9.847159619788429E-5	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9994290870092606	WITHOUT_CLASSIFICATION	5.70912990739518E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999991054797257	WITHOUT_CLASSIFICATION	8.945202742996369E-6	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999232338073646	WITHOUT_CLASSIFICATION	7.676619263550611E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999965162668903	WITHOUT_CLASSIFICATION	3.4837331096794584E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999812587669109	WITHOUT_CLASSIFICATION	1.8741233089036705E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999970242475244	WITHOUT_CLASSIFICATION	2.975752475605666E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999984428632002	WITHOUT_CLASSIFICATION	1.5571367997992478E-5	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999959015084333	WITHOUT_CLASSIFICATION	4.098491566727613E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994781456201867	WITHOUT_CLASSIFICATION	5.218543798133139E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999953873285147	WITHOUT_CLASSIFICATION	4.612671485327478E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999944836378953	WITHOUT_CLASSIFICATION	5.516362104618825E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999823840851966	WITHOUT_CLASSIFICATION	1.761591480342036E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999976787386291	WITHOUT_CLASSIFICATION	2.321261370967877E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999994027504645	WITHOUT_CLASSIFICATION	5.972495356043565E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999987949989877	WITHOUT_CLASSIFICATION	1.205001012343393E-6	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999514150967463	WITHOUT_CLASSIFICATION	4.858490325356659E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995976555614999	WITHOUT_CLASSIFICATION	4.02344438500078E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998615065180619	WITHOUT_CLASSIFICATION	1.3849348193810634E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999910013986548	WITHOUT_CLASSIFICATION	8.998601345177928E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999724355789804	WITHOUT_CLASSIFICATION	2.7564421019532404E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999978624460474	WITHOUT_CLASSIFICATION	2.137553952673062E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999798100253827	WITHOUT_CLASSIFICATION	2.0189974617244615E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999953948281268	WITHOUT_CLASSIFICATION	4.605171873166513E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999978218215579	WITHOUT_CLASSIFICATION	2.1781784420785395E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.99994456358309	WITHOUT_CLASSIFICATION	5.54364169098828E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999985095789425	WITHOUT_CLASSIFICATION	1.49042105734753E-6	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999939424972094	WITHOUT_CLASSIFICATION	6.057502790559224E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999914786007496	WITHOUT_CLASSIFICATION	8.521399250556652E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999981448196629	WITHOUT_CLASSIFICATION	1.8551803372470092E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999815385478626	WITHOUT_CLASSIFICATION	1.8461452137416552E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999852481934055	WITHOUT_CLASSIFICATION	1.475180659456907E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999852481934055	WITHOUT_CLASSIFICATION	1.475180659456907E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9992936519095788	WITHOUT_CLASSIFICATION	7.063480904213019E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999876169658274	WITHOUT_CLASSIFICATION	1.238303417261569E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999447828405681	WITHOUT_CLASSIFICATION	5.5217159431940215E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999853281256693	WITHOUT_CLASSIFICATION	1.467187433067598E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999833024925974	WITHOUT_CLASSIFICATION	1.669750740261842E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999833024925974	WITHOUT_CLASSIFICATION	1.669750740261842E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999820839593042	WITHOUT_CLASSIFICATION	1.791604069575056E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999837595765716	WITHOUT_CLASSIFICATION	1.6240423428379348E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999968296922227	WITHOUT_CLASSIFICATION	3.170307777303331E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999993747243498	WITHOUT_CLASSIFICATION	6.2527565019903104E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999801456042174	WITHOUT_CLASSIFICATION	1.985439578253595E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999863713025341	WITHOUT_CLASSIFICATION	1.3628697465982798E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999500273093013	WITHOUT_CLASSIFICATION	4.99726906986345E-5	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999848691182871	WITHOUT_CLASSIFICATION	1.5130881712764016E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999974491384597	WITHOUT_CLASSIFICATION	2.550861540329916E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997402996612867	WITHOUT_CLASSIFICATION	2.597003387132745E-4	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9964026027951953	WITHOUT_CLASSIFICATION	0.0035973972048046186	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999018540034447	WITHOUT_CLASSIFICATION	9.814599655532772E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999018540034447	WITHOUT_CLASSIFICATION	9.814599655532772E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999812587669109	WITHOUT_CLASSIFICATION	1.8741233089036705E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999778938823121	WITHOUT_CLASSIFICATION	2.210611768800016E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999779003529473	WITHOUT_CLASSIFICATION	2.2099647052649467E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999650949814685	WITHOUT_CLASSIFICATION	3.490501853148851E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998821463257079	WITHOUT_CLASSIFICATION	1.1785367429198694E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796988490225	WITHOUT_CLASSIFICATION	2.0301150977466695E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999649284509151	WITHOUT_CLASSIFICATION	3.5071549084837457E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999888808327219	WITHOUT_CLASSIFICATION	1.1119167278142496E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999838587552344	WITHOUT_CLASSIFICATION	1.6141244765528816E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998992091232054	WITHOUT_CLASSIFICATION	1.007908767946397E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999183944360966	WITHOUT_CLASSIFICATION	8.160556390334668E-5	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999529561533512	WITHOUT_CLASSIFICATION	4.704384664876971E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999433614479719	WITHOUT_CLASSIFICATION	5.6638552028053066E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999455682410623	WITHOUT_CLASSIFICATION	5.443175893759832E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.999994327974632	WITHOUT_CLASSIFICATION	5.6720253680113746E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999689790821187	WITHOUT_CLASSIFICATION	3.102091788128635E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999500070273187	WITHOUT_CLASSIFICATION	4.99929726812935E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999577458568554	WITHOUT_CLASSIFICATION	4.225414314453337E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999615968124688	WITHOUT_CLASSIFICATION	3.8403187531258464E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999736959457605	WITHOUT_CLASSIFICATION	2.6304054239561472E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999348415585604	WITHOUT_CLASSIFICATION	6.515844143965402E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999348415585604	WITHOUT_CLASSIFICATION	6.515844143965402E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998938354171534	WITHOUT_CLASSIFICATION	1.0616458284663251E-4	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999187939649	WITHOUT_CLASSIFICATION	8.12060351576075E-8	TEST
package	WITHOUT_CLASSIFICATION	0.999981829158073	WITHOUT_CLASSIFICATION	1.817084192695926E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999261188255117	WITHOUT_CLASSIFICATION	7.388117448826434E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.999970264859389	WITHOUT_CLASSIFICATION	2.9735140610876806E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999817847601912	WITHOUT_CLASSIFICATION	1.821523980877052E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999938658539349	WITHOUT_CLASSIFICATION	6.134146065095541E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999992145374322	WITHOUT_CLASSIFICATION	7.854625678643933E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999310261298128	WITHOUT_CLASSIFICATION	6.89738701872269E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999805783612271	WITHOUT_CLASSIFICATION	1.9421638772846567E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542753088608	WITHOUT_CLASSIFICATION	4.572469113915383E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999962974097896	WITHOUT_CLASSIFICATION	3.7025902104057014E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999918039018658	WITHOUT_CLASSIFICATION	8.196098134209967E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999946593183772	WITHOUT_CLASSIFICATION	5.3406816228690465E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999284365055268	WITHOUT_CLASSIFICATION	7.156349447329878E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999954932105722	WITHOUT_CLASSIFICATION	4.506789427740833E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999982658317325	WITHOUT_CLASSIFICATION	1.7341682675717708E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999377595228498	WITHOUT_CLASSIFICATION	6.224047715022311E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999149195610785	WITHOUT_CLASSIFICATION	8.508043892159427E-5	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999922114631722	WITHOUT_CLASSIFICATION	7.788536827746375E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999917830520793	WITHOUT_CLASSIFICATION	8.21694792065474E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999992135033773	WITHOUT_CLASSIFICATION	7.864966226746098E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999945500180671	WITHOUT_CLASSIFICATION	5.4499819329347445E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999770200808301	WITHOUT_CLASSIFICATION	2.297991916989225E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999726070602146	WITHOUT_CLASSIFICATION	2.739293978542981E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999726070602146	WITHOUT_CLASSIFICATION	2.739293978542981E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999416964825549	WITHOUT_CLASSIFICATION	5.830351744513719E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998566337315665	WITHOUT_CLASSIFICATION	1.433662684335185E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999518335777526	WITHOUT_CLASSIFICATION	4.81664222474003E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999940199267061	WITHOUT_CLASSIFICATION	5.9800732939002894E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999869908590382	WITHOUT_CLASSIFICATION	1.300914096184034E-5	TEST
