test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998284471145523	WITHOUT_CLASSIFICATION	1.7155288544767392E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999376168935047	WITHOUT_CLASSIFICATION	6.238310649537266E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999985842043541	WITHOUT_CLASSIFICATION	1.4157956458884455E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999981267846837	WITHOUT_CLASSIFICATION	1.873215316413649E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999785511246	WITHOUT_CLASSIFICATION	2.1448875392815288E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999785511246	WITHOUT_CLASSIFICATION	2.1448875392815288E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998606008859	WITHOUT_CLASSIFICATION	1.393991142471754E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999374910435	WITHOUT_CLASSIFICATION	6.250895645049039E-8	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999992760740533	WITHOUT_CLASSIFICATION	7.239259466508786E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999972670539992	WITHOUT_CLASSIFICATION	2.73294600079279E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999887658652761	WITHOUT_CLASSIFICATION	1.1234134723951492E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999887658652761	WITHOUT_CLASSIFICATION	1.1234134723951492E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998746268582758	WITHOUT_CLASSIFICATION	1.253731417241621E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999440272512	WITHOUT_CLASSIFICATION	5.597274868618265E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999995272097624	WITHOUT_CLASSIFICATION	4.7279023755122453E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990666366854	WITHOUT_CLASSIFICATION	9.333633146131479E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999233838939	WITHOUT_CLASSIFICATION	7.6616106185166E-8	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998149665839403	WITHOUT_CLASSIFICATION	1.8503341605955514E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999651977898453	WITHOUT_CLASSIFICATION	3.4802210154640465E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997049372991583	WITHOUT_CLASSIFICATION	2.950627008416845E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996544300485409	WITHOUT_CLASSIFICATION	3.455699514590615E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997942461312	WITHOUT_CLASSIFICATION	2.0575386873286635E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999964576872479	WITHOUT_CLASSIFICATION	3.54231275209727E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999077822372752	WITHOUT_CLASSIFICATION	9.22177627248627E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995300654744	WITHOUT_CLASSIFICATION	4.699345256124168E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999210335144807	WITHOUT_CLASSIFICATION	7.896648551926099E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999210335144807	WITHOUT_CLASSIFICATION	7.896648551926099E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999979968890224	WITHOUT_CLASSIFICATION	2.0031109775347563E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9998542948098876	WITHOUT_CLASSIFICATION	1.4570519011238578E-4	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999727254495	WITHOUT_CLASSIFICATION	2.7274550595322443E-8	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999736949042	WITHOUT_CLASSIFICATION	2.630509577971736E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999922976859561	WITHOUT_CLASSIFICATION	7.702314043882386E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999995831056046	WITHOUT_CLASSIFICATION	4.1689439543532414E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999967183118912	WITHOUT_CLASSIFICATION	3.2816881088251515E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999997208545628	WITHOUT_CLASSIFICATION	2.791454371594452E-7	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999382490604	WITHOUT_CLASSIFICATION	6.175093956095808E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.999996943074187	WITHOUT_CLASSIFICATION	3.0569258130247607E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998835436847	WITHOUT_CLASSIFICATION	1.164563152249342E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999954008852123	WITHOUT_CLASSIFICATION	4.599114787669465E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999465919072	WITHOUT_CLASSIFICATION	5.3408092820314637E-8	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999917630997	WITHOUT_CLASSIFICATION	8.236900297983778E-8	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999995913587195	WITHOUT_CLASSIFICATION	4.0864128043164595E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934650239641	WITHOUT_CLASSIFICATION	6.534976035945094E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712311859553	WITHOUT_CLASSIFICATION	2.8768814044629884E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998993864236	WITHOUT_CLASSIFICATION	1.0061357635805536E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999677827137	WITHOUT_CLASSIFICATION	3.221728630598429E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999948008501254	WITHOUT_CLASSIFICATION	5.199149874623675E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999789719856	WITHOUT_CLASSIFICATION	2.1028014392918933E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999994393633113	WITHOUT_CLASSIFICATION	5.60636688651346E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999948008501254	WITHOUT_CLASSIFICATION	5.199149874623675E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999994393633113	WITHOUT_CLASSIFICATION	5.60636688651346E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995625825332	WITHOUT_CLASSIFICATION	4.3741746685635897E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9978491231260121	WITHOUT_CLASSIFICATION	0.002150876873987806	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999970469337917	WITHOUT_CLASSIFICATION	2.953066208255181E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999985655471276	WITHOUT_CLASSIFICATION	1.4344528723624305E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999877188160828	WITHOUT_CLASSIFICATION	1.2281183917121988E-5	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999997091744634	WITHOUT_CLASSIFICATION	2.908255365975632E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998949841945973	WITHOUT_CLASSIFICATION	1.0501580540270133E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999977871454598	WITHOUT_CLASSIFICATION	2.2128545401846946E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999253391822	WITHOUT_CLASSIFICATION	7.466081780006396E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999708074338449	WITHOUT_CLASSIFICATION	2.9192566155107975E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999993291475487	WITHOUT_CLASSIFICATION	6.708524512239434E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999994393633113	WITHOUT_CLASSIFICATION	5.60636688651346E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998846577043	WITHOUT_CLASSIFICATION	1.1534229565144097E-7	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999998135832009	WITHOUT_CLASSIFICATION	1.864167989873319E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999999293416708	WITHOUT_CLASSIFICATION	7.065832917512325E-8	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999873730467412	WITHOUT_CLASSIFICATION	1.2626953258763559E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999901930822	WITHOUT_CLASSIFICATION	9.80691779699959E-8	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998300699134	WITHOUT_CLASSIFICATION	1.6993008648867174E-7	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999992351073674	WITHOUT_CLASSIFICATION	7.648926325983586E-7	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995603363274	WITHOUT_CLASSIFICATION	4.3966367252797754E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999984970685659	WITHOUT_CLASSIFICATION	1.5029314340696286E-6	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999703977613	WITHOUT_CLASSIFICATION	2.9602238729493212E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999688054899	WITHOUT_CLASSIFICATION	3.119451010539545E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999896415395705	WITHOUT_CLASSIFICATION	1.035846042945301E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999962812994027	WITHOUT_CLASSIFICATION	3.7187005972700074E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999479125622	WITHOUT_CLASSIFICATION	5.2087437868326084E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999963967471	WITHOUT_CLASSIFICATION	3.60325304993177E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999980008463982	WITHOUT_CLASSIFICATION	1.999153601683082E-6	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999997645030415	WITHOUT_CLASSIFICATION	2.354969585818648E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999987576965497	WITHOUT_CLASSIFICATION	1.2423034503343707E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999980702488472	WITHOUT_CLASSIFICATION	1.9297511527032584E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999755431548	WITHOUT_CLASSIFICATION	2.4456845287573336E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999995531126848	WITHOUT_CLASSIFICATION	4.4688731524406746E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999838043411	WITHOUT_CLASSIFICATION	1.6195658979334205E-8	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999990774344159	WITHOUT_CLASSIFICATION	9.225655840638016E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999994929684217	WITHOUT_CLASSIFICATION	5.070315783583074E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999838043411	WITHOUT_CLASSIFICATION	1.6195658979334205E-8	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998353186957	WITHOUT_CLASSIFICATION	1.6468130429632874E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999994552778511	WITHOUT_CLASSIFICATION	5.447221489856606E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999948008501254	WITHOUT_CLASSIFICATION	5.199149874623675E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999996612348112	WITHOUT_CLASSIFICATION	3.3876518885318614E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999999088962396	WITHOUT_CLASSIFICATION	9.110376036847348E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999339538531	WITHOUT_CLASSIFICATION	6.604614687879565E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999339538531	WITHOUT_CLASSIFICATION	6.604614687879565E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999981594044953	WITHOUT_CLASSIFICATION	1.8405955047622701E-6	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999974322316049	WITHOUT_CLASSIFICATION	2.5677683951089035E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998933370658	WITHOUT_CLASSIFICATION	1.0666293412765011E-7	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999862845658	WITHOUT_CLASSIFICATION	1.3715434214405984E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999995340145864	WITHOUT_CLASSIFICATION	4.6598541360535707E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999999846848767	WITHOUT_CLASSIFICATION	1.531512329897514E-7	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999988820375928	WITHOUT_CLASSIFICATION	1.1179624072102692E-6	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999997695968789	WITHOUT_CLASSIFICATION	2.3040312119957932E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999988301326016	WITHOUT_CLASSIFICATION	1.1698673984486938E-6	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999995660070378	WITHOUT_CLASSIFICATION	4.3399296216564855E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992200729985	WITHOUT_CLASSIFICATION	7.799270015919139E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992200729985	WITHOUT_CLASSIFICATION	7.799270015919139E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999272102389	WITHOUT_CLASSIFICATION	7.278976105210544E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999997898351509	WITHOUT_CLASSIFICATION	2.1016484905958057E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999968785388066	WITHOUT_CLASSIFICATION	3.1214611934433263E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992200729985	WITHOUT_CLASSIFICATION	7.799270015919139E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999272102389	WITHOUT_CLASSIFICATION	7.278976105210544E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999272102389	WITHOUT_CLASSIFICATION	7.278976105210544E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999516713283851	WITHOUT_CLASSIFICATION	4.8328671614790754E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999983718093729	WITHOUT_CLASSIFICATION	1.6281906270576725E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999994922394241	WITHOUT_CLASSIFICATION	5.077605758850302E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999982224914915	WITHOUT_CLASSIFICATION	1.7775085084450536E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999966031335882	WITHOUT_CLASSIFICATION	3.3968664117015795E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999966031335882	WITHOUT_CLASSIFICATION	3.3968664117015795E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999994624998882	WITHOUT_CLASSIFICATION	5.375001117704734E-7	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999994654933652	WITHOUT_CLASSIFICATION	5.34506634848312E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.999998981856804	WITHOUT_CLASSIFICATION	1.0181431959786053E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992039030787	WITHOUT_CLASSIFICATION	7.960969212228197E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992039030787	WITHOUT_CLASSIFICATION	7.960969212228197E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999996949202699	WITHOUT_CLASSIFICATION	3.0507973006595316E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999950659093514	WITHOUT_CLASSIFICATION	4.934090648628654E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998028820948	WITHOUT_CLASSIFICATION	1.9711790518035868E-7	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998934879494	WITHOUT_CLASSIFICATION	1.065120505775398E-7	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999947465481429	WITHOUT_CLASSIFICATION	5.253451857055225E-6	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999602382416	WITHOUT_CLASSIFICATION	3.976175839651501E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999992769665238	WITHOUT_CLASSIFICATION	7.230334761823409E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997878349755	WITHOUT_CLASSIFICATION	2.1216502458369716E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999973689278818	WITHOUT_CLASSIFICATION	2.6310721182263996E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998028820948	WITHOUT_CLASSIFICATION	1.9711790518035868E-7	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999947072509917	WITHOUT_CLASSIFICATION	5.292749008312376E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999722888001968	WITHOUT_CLASSIFICATION	2.771119980315279E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999722888001968	WITHOUT_CLASSIFICATION	2.771119980315279E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999995703613807	WITHOUT_CLASSIFICATION	4.296386193123524E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999572864615707	WITHOUT_CLASSIFICATION	4.271353842938818E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999032086565	WITHOUT_CLASSIFICATION	9.679134340345636E-8	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996738686046	WITHOUT_CLASSIFICATION	3.2613139541248244E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999950531172199	WITHOUT_CLASSIFICATION	4.946882780127678E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999984751077293	WITHOUT_CLASSIFICATION	1.5248922706144097E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999967289395555	WITHOUT_CLASSIFICATION	3.2710604444544793E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.999999225356801	WITHOUT_CLASSIFICATION	7.746431991053065E-7	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999898467516	WITHOUT_CLASSIFICATION	1.0153248421369842E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999012660568	WITHOUT_CLASSIFICATION	9.873394318088453E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999012660568	WITHOUT_CLASSIFICATION	9.873394318088453E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998284471145523	WITHOUT_CLASSIFICATION	1.7155288544767392E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999993779395437	WITHOUT_CLASSIFICATION	6.220604562377541E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999971880704719	WITHOUT_CLASSIFICATION	2.8119295280756393E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999961249389747	WITHOUT_CLASSIFICATION	3.875061025336617E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999982069680821	WITHOUT_CLASSIFICATION	1.7930319178928194E-6	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999971379912346	WITHOUT_CLASSIFICATION	2.862008765442011E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999968588834167	WITHOUT_CLASSIFICATION	3.141116583303343E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999999436594591	WITHOUT_CLASSIFICATION	5.634054090569527E-7	TEST
new	WITHOUT_CLASSIFICATION	0.9998819476342342	WITHOUT_CLASSIFICATION	1.180523657658563E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.9998791546724343	WITHOUT_CLASSIFICATION	1.2084532756573101E-4	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999976236783897	WITHOUT_CLASSIFICATION	2.3763216102539924E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999985842043541	WITHOUT_CLASSIFICATION	1.4157956458884455E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968605889868	WITHOUT_CLASSIFICATION	3.139411013234414E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968605889868	WITHOUT_CLASSIFICATION	3.139411013234414E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999984363211799	WITHOUT_CLASSIFICATION	1.563678820179901E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999820096651526	WITHOUT_CLASSIFICATION	1.7990334847428345E-5	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999998283807496	WITHOUT_CLASSIFICATION	1.7161925048206313E-7	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999960318372066	WITHOUT_CLASSIFICATION	3.968162793300873E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999985850806603	WITHOUT_CLASSIFICATION	1.4149193396704727E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999997951434022	WITHOUT_CLASSIFICATION	2.048565978231473E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.999999785511246	WITHOUT_CLASSIFICATION	2.1448875392815288E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999990154158324	WITHOUT_CLASSIFICATION	9.84584167698261E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999942280718791	WITHOUT_CLASSIFICATION	5.771928120908356E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999998798626679	WITHOUT_CLASSIFICATION	1.201373321029705E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999994350987178	WITHOUT_CLASSIFICATION	5.649012820981311E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999946809206633	WITHOUT_CLASSIFICATION	5.319079336668059E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999667248268903	WITHOUT_CLASSIFICATION	3.3275173109655194E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999959576434361	WITHOUT_CLASSIFICATION	4.042356563855236E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999996266289632	WITHOUT_CLASSIFICATION	3.7337103674148366E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994210832588	WITHOUT_CLASSIFICATION	5.789167412123566E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998090279165	WITHOUT_CLASSIFICATION	1.9097208352071984E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994088418951	WITHOUT_CLASSIFICATION	5.911581050119686E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999993318718504	WITHOUT_CLASSIFICATION	6.68128149504127E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999691368808985	WITHOUT_CLASSIFICATION	3.0863119101489636E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9998791546724343	WITHOUT_CLASSIFICATION	1.2084532756573101E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968605889868	WITHOUT_CLASSIFICATION	3.139411013234414E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999959576434361	WITHOUT_CLASSIFICATION	4.042356563855236E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998606008859	WITHOUT_CLASSIFICATION	1.393991142471754E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999994004989944	WITHOUT_CLASSIFICATION	5.995010056360524E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999987976077745	WITHOUT_CLASSIFICATION	1.2023922254097054E-6	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999988774701402	WITHOUT_CLASSIFICATION	1.1225298599038911E-6	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999930783923576	WITHOUT_CLASSIFICATION	6.921607642335294E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996199665766	WITHOUT_CLASSIFICATION	3.8003342331156214E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.999972292643071	WITHOUT_CLASSIFICATION	2.7707356928973872E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996515687608	WITHOUT_CLASSIFICATION	3.484312393060548E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999847956745419	WITHOUT_CLASSIFICATION	1.5204325458019029E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999823807680853	WITHOUT_CLASSIFICATION	1.7619231914720377E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999806369181552	WITHOUT_CLASSIFICATION	1.9363081844802587E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999806369181552	WITHOUT_CLASSIFICATION	1.9363081844802587E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998835192506	WITHOUT_CLASSIFICATION	1.1648074935497999E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999999682428534	WITHOUT_CLASSIFICATION	3.175714647630212E-8	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999836803669155	WITHOUT_CLASSIFICATION	1.6319633084413436E-5	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999905182018535	WITHOUT_CLASSIFICATION	9.481798146576845E-6	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999526003286	WITHOUT_CLASSIFICATION	4.739967148847754E-8	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.999999945175617	WITHOUT_CLASSIFICATION	5.4824383003273195E-8	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999992892865538	WITHOUT_CLASSIFICATION	7.107134462556782E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999374910435	WITHOUT_CLASSIFICATION	6.250895645049039E-8	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999925272726966	WITHOUT_CLASSIFICATION	7.47272730348732E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999997824610748	WITHOUT_CLASSIFICATION	2.1753892528485564E-7	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999997824610748	WITHOUT_CLASSIFICATION	2.1753892528485564E-7	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999995590261238	WITHOUT_CLASSIFICATION	4.4097387617300684E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999992616788754	WITHOUT_CLASSIFICATION	7.383211245795273E-7	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999995012346335	WITHOUT_CLASSIFICATION	4.987653664933698E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999962535905	WITHOUT_CLASSIFICATION	3.7464095100657244E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999702768727745	WITHOUT_CLASSIFICATION	2.9723127225510725E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999957823880993	WITHOUT_CLASSIFICATION	4.217611900727881E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9998791546724343	WITHOUT_CLASSIFICATION	1.2084532756573101E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999985842043541	WITHOUT_CLASSIFICATION	1.4157956458884455E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999959576434361	WITHOUT_CLASSIFICATION	4.042356563855236E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999959576434361	WITHOUT_CLASSIFICATION	4.042356563855236E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998939070739	WITHOUT_CLASSIFICATION	1.0609292617115713E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998939070739	WITHOUT_CLASSIFICATION	1.0609292617115713E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999993769689982	WITHOUT_CLASSIFICATION	6.230310018866164E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999717400718171	WITHOUT_CLASSIFICATION	2.8259928182967377E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999717400718171	WITHOUT_CLASSIFICATION	2.8259928182967377E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999975552027951	WITHOUT_CLASSIFICATION	2.4447972049400824E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999993988219305	WITHOUT_CLASSIFICATION	6.011780695973912E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999961997318784	WITHOUT_CLASSIFICATION	3.8002681215978856E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999994835779995	WITHOUT_CLASSIFICATION	5.164220004109661E-7	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998254316274	WITHOUT_CLASSIFICATION	1.7456837265340265E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999972670539992	WITHOUT_CLASSIFICATION	2.73294600079279E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999972670539992	WITHOUT_CLASSIFICATION	2.73294600079279E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999974225678872	WITHOUT_CLASSIFICATION	2.577432112873415E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999975096454609	WITHOUT_CLASSIFICATION	2.490354539188559E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999711286328978	WITHOUT_CLASSIFICATION	2.88713671022731E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999447754320708	WITHOUT_CLASSIFICATION	5.522456792919653E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999670295747013	WITHOUT_CLASSIFICATION	3.2970425298666596E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999281140419874	WITHOUT_CLASSIFICATION	7.188595801247157E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999887658652761	WITHOUT_CLASSIFICATION	1.1234134723951492E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999766855098965	WITHOUT_CLASSIFICATION	2.331449010361413E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999766855098965	WITHOUT_CLASSIFICATION	2.331449010361413E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998746268582758	WITHOUT_CLASSIFICATION	1.253731417241621E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998746268582758	WITHOUT_CLASSIFICATION	1.253731417241621E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999973485897161	WITHOUT_CLASSIFICATION	2.651410283898883E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999973485897161	WITHOUT_CLASSIFICATION	2.651410283898883E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999985550188409	WITHOUT_CLASSIFICATION	1.4449811590936781E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999985550188409	WITHOUT_CLASSIFICATION	1.4449811590936781E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999972670539992	WITHOUT_CLASSIFICATION	2.73294600079279E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999887658652761	WITHOUT_CLASSIFICATION	1.1234134723951492E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999766855098965	WITHOUT_CLASSIFICATION	2.331449010361413E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999766855098965	WITHOUT_CLASSIFICATION	2.331449010361413E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998746268582758	WITHOUT_CLASSIFICATION	1.253731417241621E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999973485897161	WITHOUT_CLASSIFICATION	2.651410283898883E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999973485897161	WITHOUT_CLASSIFICATION	2.651410283898883E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999985550188409	WITHOUT_CLASSIFICATION	1.4449811590936781E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999989387657046	WITHOUT_CLASSIFICATION	1.0612342955113666E-6	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999996435264543	WITHOUT_CLASSIFICATION	3.5647354562998564E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999986617547603	WITHOUT_CLASSIFICATION	1.3382452396670137E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999959888403059	WITHOUT_CLASSIFICATION	4.011159693981959E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999995145079167	WITHOUT_CLASSIFICATION	4.854920832984931E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999245032908888	WITHOUT_CLASSIFICATION	7.549670911125162E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999598468323	WITHOUT_CLASSIFICATION	4.0153167604243135E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999989680407186	WITHOUT_CLASSIFICATION	1.0319592814303256E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999996820436464	WITHOUT_CLASSIFICATION	3.179563535779527E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999986065058726	WITHOUT_CLASSIFICATION	1.393494127311274E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999999110392247	WITHOUT_CLASSIFICATION	8.896077530036456E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999979969048873	WITHOUT_CLASSIFICATION	2.0030951126271597E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999981594044953	WITHOUT_CLASSIFICATION	1.8405955047622701E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999245032908888	WITHOUT_CLASSIFICATION	7.549670911125162E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999245032908888	WITHOUT_CLASSIFICATION	7.549670911125162E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999245032908888	WITHOUT_CLASSIFICATION	7.549670911125162E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997446456619	WITHOUT_CLASSIFICATION	2.55354338184767E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999998448132773	WITHOUT_CLASSIFICATION	1.5518672269243118E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999998448132773	WITHOUT_CLASSIFICATION	1.5518672269243118E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999988171684266	WITHOUT_CLASSIFICATION	1.182831573422967E-6	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999996129917939	WITHOUT_CLASSIFICATION	3.8700820612664966E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999194791408	WITHOUT_CLASSIFICATION	8.052085919447736E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998189725423	WITHOUT_CLASSIFICATION	1.8102745778849912E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998189725423	WITHOUT_CLASSIFICATION	1.8102745778849912E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999233838939	WITHOUT_CLASSIFICATION	7.6616106185166E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999197807801	WITHOUT_CLASSIFICATION	8.021921989945452E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999197807801	WITHOUT_CLASSIFICATION	8.021921989945452E-8	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9997594435462969	WITHOUT_CLASSIFICATION	2.4055645370315489E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999988092262059	WITHOUT_CLASSIFICATION	1.19077379412208E-6	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999988453821168	WITHOUT_CLASSIFICATION	1.1546178831665261E-6	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999655787341614	WITHOUT_CLASSIFICATION	3.4421265838608094E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9998930273762243	WITHOUT_CLASSIFICATION	1.0697262377569697E-4	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9998130026893296	WITHOUT_CLASSIFICATION	1.8699731067035215E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998149665839403	WITHOUT_CLASSIFICATION	1.8503341605955514E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997403938248118	WITHOUT_CLASSIFICATION	2.596061751882013E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9938450355759925	WITHOUT_CLASSIFICATION	0.0061549644240075614	TEST
ID	WITHOUT_CLASSIFICATION	0.9996145786676025	WITHOUT_CLASSIFICATION	3.8542133239752405E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999522978013102	WITHOUT_CLASSIFICATION	4.7702198689644346E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996544300485409	WITHOUT_CLASSIFICATION	3.455699514590615E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997064884889	WITHOUT_CLASSIFICATION	2.9351151115068135E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999750376163768	WITHOUT_CLASSIFICATION	2.496238362314119E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999535360519378	WITHOUT_CLASSIFICATION	4.646394806222817E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996544300485409	WITHOUT_CLASSIFICATION	3.455699514590615E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999786769007	WITHOUT_CLASSIFICATION	2.1323099196001515E-8	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999956348079	WITHOUT_CLASSIFICATION	4.365192092765166E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999612806014601	WITHOUT_CLASSIFICATION	3.8719398539920974E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9998711409516782	WITHOUT_CLASSIFICATION	1.288590483218903E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999874910390277	WITHOUT_CLASSIFICATION	1.2508960972367991E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999750423846793	WITHOUT_CLASSIFICATION	2.4957615320820052E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999348306228182	WITHOUT_CLASSIFICATION	6.516937718182504E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999077822372752	WITHOUT_CLASSIFICATION	9.22177627248627E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999784750148353	WITHOUT_CLASSIFICATION	2.1524985164695782E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995300654744	WITHOUT_CLASSIFICATION	4.699345256124168E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999905270947783	WITHOUT_CLASSIFICATION	9.472905221601855E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999995315910624	WITHOUT_CLASSIFICATION	4.6840893765563305E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9997033188919596	WITHOUT_CLASSIFICATION	2.966811080403474E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998149665839403	WITHOUT_CLASSIFICATION	1.8503341605955514E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999784750148353	WITHOUT_CLASSIFICATION	2.1524985164695782E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999905270947783	WITHOUT_CLASSIFICATION	9.472905221601855E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9997033188919596	WITHOUT_CLASSIFICATION	2.966811080403474E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997172566586	WITHOUT_CLASSIFICATION	2.82743341386481E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9998775824456264	WITHOUT_CLASSIFICATION	1.2241755437357763E-4	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999528283539	WITHOUT_CLASSIFICATION	4.71716461725187E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999210335144807	WITHOUT_CLASSIFICATION	7.896648551926099E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999915433968396	WITHOUT_CLASSIFICATION	8.456603160403803E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999983255501453	WITHOUT_CLASSIFICATION	1.674449854680143E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999980597440277	WITHOUT_CLASSIFICATION	1.9402559723056538E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999978018499973	WITHOUT_CLASSIFICATION	2.19815000266827E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999752928743171	WITHOUT_CLASSIFICATION	2.4707125682967274E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998436562912	WITHOUT_CLASSIFICATION	1.5634370885554022E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993534097372	WITHOUT_CLASSIFICATION	6.465902628108594E-7	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999981868765601	WITHOUT_CLASSIFICATION	1.8131234399450366E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999622373685	WITHOUT_CLASSIFICATION	3.776263151238091E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999853958385	WITHOUT_CLASSIFICATION	1.460416151413425E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9998750596521451	WITHOUT_CLASSIFICATION	1.2494034785480354E-4	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999621913052414	WITHOUT_CLASSIFICATION	3.78086947586251E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9998542948098876	WITHOUT_CLASSIFICATION	1.4570519011238578E-4	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999993078211231	WITHOUT_CLASSIFICATION	6.921788769026785E-7	TEST
SORT	WITHOUT_CLASSIFICATION	0.9998472885716149	WITHOUT_CLASSIFICATION	1.5271142838503711E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999784750148353	WITHOUT_CLASSIFICATION	2.1524985164695782E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999985310851278	WITHOUT_CLASSIFICATION	1.4689148721300712E-6	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999999948497756	WITHOUT_CLASSIFICATION	5.1502243964245355E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999998823202072	WITHOUT_CLASSIFICATION	1.1767979285585712E-7	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9972710789998983	WITHOUT_CLASSIFICATION	0.0027289210001017724	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999979136254534	WITHOUT_CLASSIFICATION	2.086374546596827E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999985467179509	WITHOUT_CLASSIFICATION	1.4532820491647531E-6	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999998007325	WITHOUT_CLASSIFICATION	1.9926751066571498E-10	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999840926406	WITHOUT_CLASSIFICATION	1.5907359471176457E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999962669155257	WITHOUT_CLASSIFICATION	3.7330844743514197E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9998607857404125	WITHOUT_CLASSIFICATION	1.392142595874791E-4	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999701635440692	WITHOUT_CLASSIFICATION	2.9836455930847167E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999704641974382	WITHOUT_CLASSIFICATION	2.953580256183095E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999993335995004	WITHOUT_CLASSIFICATION	6.664004996517331E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999736949042	WITHOUT_CLASSIFICATION	2.630509577971736E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.999999906559406	WITHOUT_CLASSIFICATION	9.344059411884017E-8	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999015588167	WITHOUT_CLASSIFICATION	9.844118334081718E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999915089187896	WITHOUT_CLASSIFICATION	8.491081210361805E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999997650210657	WITHOUT_CLASSIFICATION	2.3497893437508668E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999998177571516	WITHOUT_CLASSIFICATION	1.8224284838537593E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999933169034274	WITHOUT_CLASSIFICATION	6.683096572595984E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999991229091332	WITHOUT_CLASSIFICATION	8.770908668212814E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999978574053918	WITHOUT_CLASSIFICATION	2.142594608263671E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999917711419	WITHOUT_CLASSIFICATION	8.228858096510241E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999989677535652	WITHOUT_CLASSIFICATION	1.0322464347983035E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994363866233	WITHOUT_CLASSIFICATION	5.63613376641142E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994363866233	WITHOUT_CLASSIFICATION	5.63613376641142E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999984487200586	WITHOUT_CLASSIFICATION	1.5512799413549935E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999997962133551	WITHOUT_CLASSIFICATION	2.037866450123726E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999434140427	WITHOUT_CLASSIFICATION	5.658595718447782E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995840212511	WITHOUT_CLASSIFICATION	4.1597874891553044E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999998629597918	WITHOUT_CLASSIFICATION	1.3704020820940113E-6	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.999999627571048	WITHOUT_CLASSIFICATION	3.724289520540975E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999996096734702	WITHOUT_CLASSIFICATION	3.903265297840678E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999959707922679	WITHOUT_CLASSIFICATION	4.029207732206934E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999904555219239	WITHOUT_CLASSIFICATION	9.544478076108975E-6	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999991381401498	WITHOUT_CLASSIFICATION	8.618598502770677E-7	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999862013849168	WITHOUT_CLASSIFICATION	1.3798615083309556E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999947588878911	WITHOUT_CLASSIFICATION	5.241112108811666E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.999998806837607	WITHOUT_CLASSIFICATION	1.1931623929822133E-6	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999997172041296	WITHOUT_CLASSIFICATION	2.8279587035531816E-7	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999995024804595	WITHOUT_CLASSIFICATION	4.975195404713163E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999949630373417	WITHOUT_CLASSIFICATION	5.036962658293454E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999998215941222	WITHOUT_CLASSIFICATION	1.784058778888842E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999992691960844	WITHOUT_CLASSIFICATION	7.308039156081961E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988791945541	WITHOUT_CLASSIFICATION	1.1208054459737242E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999997517690927	WITHOUT_CLASSIFICATION	2.4823090720408163E-7	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995486102758	WITHOUT_CLASSIFICATION	4.513897241078432E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999979401163845	WITHOUT_CLASSIFICATION	2.0598836155181393E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999984114001497	WITHOUT_CLASSIFICATION	1.5885998503511153E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999998760931687	WITHOUT_CLASSIFICATION	1.239068312969615E-6	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999994966403417	WITHOUT_CLASSIFICATION	5.033596582308523E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999982492184537	WITHOUT_CLASSIFICATION	1.7507815462221213E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999974309274008	WITHOUT_CLASSIFICATION	2.569072599202251E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999994010887524	WITHOUT_CLASSIFICATION	5.98911247541697E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998853291604	WITHOUT_CLASSIFICATION	1.14670839538736E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999941768569088	WITHOUT_CLASSIFICATION	5.823143091079E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999997517690927	WITHOUT_CLASSIFICATION	2.4823090720408163E-7	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999982455629315	WITHOUT_CLASSIFICATION	1.7544370685239918E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999479970402	WITHOUT_CLASSIFICATION	5.200295980291216E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999994691072799	WITHOUT_CLASSIFICATION	5.308927201632156E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999759083505496	WITHOUT_CLASSIFICATION	2.4091649450314857E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999759083505496	WITHOUT_CLASSIFICATION	2.4091649450314857E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999975822321099	WITHOUT_CLASSIFICATION	2.4177678902067673E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999988421067089	WITHOUT_CLASSIFICATION	1.1578932911829687E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.99998641248674	WITHOUT_CLASSIFICATION	1.35875132598683E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.99998641248674	WITHOUT_CLASSIFICATION	1.35875132598683E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999917711419	WITHOUT_CLASSIFICATION	8.228858096510241E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999700438859	WITHOUT_CLASSIFICATION	2.995611412678677E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999988402155467	WITHOUT_CLASSIFICATION	1.1597844533305736E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998502053463	WITHOUT_CLASSIFICATION	1.4979465367255407E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999988402155467	WITHOUT_CLASSIFICATION	1.1597844533305736E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998502053463	WITHOUT_CLASSIFICATION	1.4979465367255407E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991212250037	WITHOUT_CLASSIFICATION	8.787749962076387E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999704852759135	WITHOUT_CLASSIFICATION	2.9514724086531544E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999029119144	WITHOUT_CLASSIFICATION	9.708808561160085E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999997049577267	WITHOUT_CLASSIFICATION	2.9504227330616664E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999963001004714	WITHOUT_CLASSIFICATION	3.6998995286048628E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999947972069837	WITHOUT_CLASSIFICATION	5.202793016243631E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990467151857	WITHOUT_CLASSIFICATION	9.532848142833065E-7	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999990467151857	WITHOUT_CLASSIFICATION	9.532848142833065E-7	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999999198015705	WITHOUT_CLASSIFICATION	8.01984295053054E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999450685034	WITHOUT_CLASSIFICATION	5.4931496707000405E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999985782911015	WITHOUT_CLASSIFICATION	1.421708898464169E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999980830924	WITHOUT_CLASSIFICATION	1.9169075630745224E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.999999355507656	WITHOUT_CLASSIFICATION	6.444923441180068E-7	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999958126722867	WITHOUT_CLASSIFICATION	4.1873277133369105E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999970359233631	WITHOUT_CLASSIFICATION	2.9640766369234333E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999983051695192	WITHOUT_CLASSIFICATION	1.694830480807641E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999983051695192	WITHOUT_CLASSIFICATION	1.694830480807641E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999890841376	WITHOUT_CLASSIFICATION	1.091586238252423E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991212250037	WITHOUT_CLASSIFICATION	8.787749962076387E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999950412866341	WITHOUT_CLASSIFICATION	4.958713365977229E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999789219301684	WITHOUT_CLASSIFICATION	2.1078069831599122E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999986636683087	WITHOUT_CLASSIFICATION	1.336331691310378E-6	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999952461399023	WITHOUT_CLASSIFICATION	4.753860097706026E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999810302282525	WITHOUT_CLASSIFICATION	1.8969771747535226E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991212250037	WITHOUT_CLASSIFICATION	8.787749962076387E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999952461399023	WITHOUT_CLASSIFICATION	4.753860097706026E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999810302282525	WITHOUT_CLASSIFICATION	1.8969771747535226E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999998890178023	WITHOUT_CLASSIFICATION	1.1098219772084319E-7	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999961375898291	WITHOUT_CLASSIFICATION	3.862410170950813E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999900691597	WITHOUT_CLASSIFICATION	9.930840325241005E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991212250037	WITHOUT_CLASSIFICATION	8.787749962076387E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991212250037	WITHOUT_CLASSIFICATION	8.787749962076387E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999916855697424	WITHOUT_CLASSIFICATION	8.314430257699818E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.999995261285576	WITHOUT_CLASSIFICATION	4.738714424071754E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999996310625242	WITHOUT_CLASSIFICATION	3.68937475798952E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999917630997	WITHOUT_CLASSIFICATION	8.236900297983778E-8	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999998705242035	WITHOUT_CLASSIFICATION	1.294757964708437E-7	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999996312623617	WITHOUT_CLASSIFICATION	3.687376382315924E-7	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999983246829693	WITHOUT_CLASSIFICATION	1.675317030739416E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996195156868	WITHOUT_CLASSIFICATION	3.8048431313491536E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999709510982	WITHOUT_CLASSIFICATION	2.90489017959448E-8	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999860157606366	WITHOUT_CLASSIFICATION	1.3984239363242035E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999995922315563	WITHOUT_CLASSIFICATION	4.0776844374117815E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999977742680415	WITHOUT_CLASSIFICATION	2.2257319586287007E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999980667928006	WITHOUT_CLASSIFICATION	1.9332071994172945E-6	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999987400317227	WITHOUT_CLASSIFICATION	1.2599682772876916E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982831343762	WITHOUT_CLASSIFICATION	1.7168656237015442E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999779193185486	WITHOUT_CLASSIFICATION	2.2080681451429792E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999917630997	WITHOUT_CLASSIFICATION	8.236900297983778E-8	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999906902977931	WITHOUT_CLASSIFICATION	9.309702206859634E-6	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999995795988494	WITHOUT_CLASSIFICATION	4.2040115053644033E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999531157415	WITHOUT_CLASSIFICATION	4.688425845829863E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999926499813588	WITHOUT_CLASSIFICATION	7.350018641129102E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999931281478056	WITHOUT_CLASSIFICATION	6.871852194303509E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999931281478056	WITHOUT_CLASSIFICATION	6.871852194303509E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999917630997	WITHOUT_CLASSIFICATION	8.236900297983778E-8	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999535567450891	WITHOUT_CLASSIFICATION	4.644325491093616E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999986831556547	WITHOUT_CLASSIFICATION	1.3168443452978882E-6	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999081216719087	WITHOUT_CLASSIFICATION	9.187832809136305E-5	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999981113734742	WITHOUT_CLASSIFICATION	1.8886265258135758E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982082975211	WITHOUT_CLASSIFICATION	1.7917024789778477E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996189155019	WITHOUT_CLASSIFICATION	3.8108449800442536E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999533643352	WITHOUT_CLASSIFICATION	4.66356647900797E-8	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999997189858551	WITHOUT_CLASSIFICATION	2.810141448974735E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999970958928	WITHOUT_CLASSIFICATION	2.904107224033282E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998567539643	WITHOUT_CLASSIFICATION	1.43246035722716E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994325745598	WITHOUT_CLASSIFICATION	5.674254402025079E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999678534786232	WITHOUT_CLASSIFICATION	3.2146521376812356E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998537200557736	WITHOUT_CLASSIFICATION	1.462799442263659E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999818225453	WITHOUT_CLASSIFICATION	1.817745458922515E-8	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999452274825	WITHOUT_CLASSIFICATION	5.477251754441913E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999996641568856	WITHOUT_CLASSIFICATION	3.358431144661459E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999725490821	WITHOUT_CLASSIFICATION	2.7450917904419312E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999988424708947	WITHOUT_CLASSIFICATION	1.1575291054414475E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999502704034	WITHOUT_CLASSIFICATION	4.972959659391609E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999288422289	WITHOUT_CLASSIFICATION	7.115777117459142E-8	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999983074625	WITHOUT_CLASSIFICATION	1.692537496565455E-8	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999997525928821	WITHOUT_CLASSIFICATION	2.474071179381409E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979028865308	WITHOUT_CLASSIFICATION	2.097113469119242E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860760568876	WITHOUT_CLASSIFICATION	1.3923943112444208E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937519740847	WITHOUT_CLASSIFICATION	6.2480259153999675E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963792148667	WITHOUT_CLASSIFICATION	3.6207851332550538E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806202562131	WITHOUT_CLASSIFICATION	1.93797437868275E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839684866049	WITHOUT_CLASSIFICATION	1.6031513395140852E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999768157267235	WITHOUT_CLASSIFICATION	2.3184273276603627E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961352106866	WITHOUT_CLASSIFICATION	3.864789313276624E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999989772163944	WITHOUT_CLASSIFICATION	1.0227836055555E-6	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999541647305	WITHOUT_CLASSIFICATION	4.5835269424739705E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994765429578	WITHOUT_CLASSIFICATION	5.234570422095568E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956743152267	WITHOUT_CLASSIFICATION	4.32568477332503E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992315879428	WITHOUT_CLASSIFICATION	7.684120572411784E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990839456	WITHOUT_CLASSIFICATION	9.160543999936225E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965405872043	WITHOUT_CLASSIFICATION	3.45941279577647E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986564824721	WITHOUT_CLASSIFICATION	1.3435175279259488E-6	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997824037572	WITHOUT_CLASSIFICATION	2.175962428040742E-6	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596617363254	WITHOUT_CLASSIFICATION	4.033826367455575E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999972283736042	WITHOUT_CLASSIFICATION	2.771626395797266E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982329353271	WITHOUT_CLASSIFICATION	1.7670646729187442E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999487729693751	WITHOUT_CLASSIFICATION	5.122703062485992E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999745549571	WITHOUT_CLASSIFICATION	2.5445042903395705E-7	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999947150646	WITHOUT_CLASSIFICATION	5.28493544513912E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999041748488331	WITHOUT_CLASSIFICATION	9.58251511668911E-5	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999936692138205	WITHOUT_CLASSIFICATION	6.330786179488865E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995879384619	WITHOUT_CLASSIFICATION	4.120615381251133E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999710403144	WITHOUT_CLASSIFICATION	2.895968560631303E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999809192947461	WITHOUT_CLASSIFICATION	1.908070525399391E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999589112161426	WITHOUT_CLASSIFICATION	4.108878385747482E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999515239291357	WITHOUT_CLASSIFICATION	4.847607086433274E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999699418740282	WITHOUT_CLASSIFICATION	3.0058125971853905E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999889778748963	WITHOUT_CLASSIFICATION	1.1022125103655942E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999986314061462	WITHOUT_CLASSIFICATION	1.3685938537951926E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999787322477	WITHOUT_CLASSIFICATION	2.1267752374665975E-8	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999993738134652	WITHOUT_CLASSIFICATION	6.261865349334789E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.999684245410736	WITHOUT_CLASSIFICATION	3.157545892639894E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999888267214	WITHOUT_CLASSIFICATION	1.1173278660555517E-8	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988039418971	WITHOUT_CLASSIFICATION	1.196058102952189E-6	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971607860821	WITHOUT_CLASSIFICATION	2.8392139178676563E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992491259123	WITHOUT_CLASSIFICATION	7.508740876273389E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984650123591	WITHOUT_CLASSIFICATION	1.5349876408189254E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999789130889264	WITHOUT_CLASSIFICATION	2.1086911073531543E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999519026839	WITHOUT_CLASSIFICATION	4.8097316237685504E-8	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999380304443	WITHOUT_CLASSIFICATION	6.196955565383047E-8	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998631185293	WITHOUT_CLASSIFICATION	1.3688147063019098E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892110332655	WITHOUT_CLASSIFICATION	1.0788966734443336E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999519015426	WITHOUT_CLASSIFICATION	4.809845746813194E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999786620697031	WITHOUT_CLASSIFICATION	2.133793029686205E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997347034656	WITHOUT_CLASSIFICATION	2.652965343500416E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999996718285	WITHOUT_CLASSIFICATION	3.2817149874249586E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999776234162963	WITHOUT_CLASSIFICATION	2.2376583703756456E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995407837584	WITHOUT_CLASSIFICATION	4.5921624168034483E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999996735334328	WITHOUT_CLASSIFICATION	3.2646656721124845E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999903860655847	WITHOUT_CLASSIFICATION	9.613934415395151E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999041748488331	WITHOUT_CLASSIFICATION	9.58251511668911E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999994077455902	WITHOUT_CLASSIFICATION	5.922544099314863E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999999992087515	WITHOUT_CLASSIFICATION	7.912484937771102E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999327074885	WITHOUT_CLASSIFICATION	6.729251143035795E-8	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994549394345	WITHOUT_CLASSIFICATION	5.45060565446564E-7	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999367605416	WITHOUT_CLASSIFICATION	6.323945848604112E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999994772723195	WITHOUT_CLASSIFICATION	5.22727680349016E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999789130889264	WITHOUT_CLASSIFICATION	2.1086911073531543E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999999861281514	WITHOUT_CLASSIFICATION	1.3871848612864284E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999527519892	WITHOUT_CLASSIFICATION	4.724801087838653E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999848715093	WITHOUT_CLASSIFICATION	1.5128490697356664E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999993494637	WITHOUT_CLASSIFICATION	6.505363006611701E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999682812808	WITHOUT_CLASSIFICATION	3.171871926092015E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999805245642	WITHOUT_CLASSIFICATION	1.9475435795943432E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999540021814	WITHOUT_CLASSIFICATION	4.599781864987568E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999995264653297	WITHOUT_CLASSIFICATION	4.7353467030939613E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999312298782949	WITHOUT_CLASSIFICATION	6.87701217051998E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999987357643745	WITHOUT_CLASSIFICATION	1.2642356255929595E-6	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999770817978	WITHOUT_CLASSIFICATION	2.2918202214259497E-8	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992695484029	WITHOUT_CLASSIFICATION	7.30451597199486E-7	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998077487287	WITHOUT_CLASSIFICATION	1.922512714478279E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999552050692566	WITHOUT_CLASSIFICATION	4.479493074330198E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999995647507552	WITHOUT_CLASSIFICATION	4.352492447765736E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.99999972822035	WITHOUT_CLASSIFICATION	2.717796500723336E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999269952909	WITHOUT_CLASSIFICATION	7.300470897018493E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999816511849	WITHOUT_CLASSIFICATION	1.834881518821941E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999999081312094	WITHOUT_CLASSIFICATION	9.186879057061006E-8	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999968681866609	WITHOUT_CLASSIFICATION	3.131813339038409E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999994325324734	WITHOUT_CLASSIFICATION	5.674675266550003E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999999648586878	WITHOUT_CLASSIFICATION	3.514131220318959E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999991808294177	WITHOUT_CLASSIFICATION	8.191705821956308E-7	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999959474343514	WITHOUT_CLASSIFICATION	4.052565648599539E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998966564311	WITHOUT_CLASSIFICATION	1.0334356885376737E-7	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999007261628	WITHOUT_CLASSIFICATION	9.927383723687821E-8	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998692109393	WITHOUT_CLASSIFICATION	1.3078906070667297E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999041748488331	WITHOUT_CLASSIFICATION	9.58251511668911E-5	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999994646517036	WITHOUT_CLASSIFICATION	5.353482962839039E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999999830189265	WITHOUT_CLASSIFICATION	1.6981073498376635E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993718324545556	WITHOUT_CLASSIFICATION	6.281675454443838E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999990015530806	WITHOUT_CLASSIFICATION	9.984469194041176E-7	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999991577166406	WITHOUT_CLASSIFICATION	8.422833593130778E-7	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999993843120991	WITHOUT_CLASSIFICATION	6.156879007856903E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999041748488331	WITHOUT_CLASSIFICATION	9.58251511668911E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.999996969976397	WITHOUT_CLASSIFICATION	3.0300236030746037E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999269952909	WITHOUT_CLASSIFICATION	7.300470897018493E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999975409009114	WITHOUT_CLASSIFICATION	2.459099088682414E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.99999972822035	WITHOUT_CLASSIFICATION	2.717796500723336E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995228944414	WITHOUT_CLASSIFICATION	4.77105558713854E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998085540532959	WITHOUT_CLASSIFICATION	1.9144594670395866E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999850293683692	WITHOUT_CLASSIFICATION	1.4970631630726238E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999848715093	WITHOUT_CLASSIFICATION	1.5128490697356664E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999993494637	WITHOUT_CLASSIFICATION	6.505363006611701E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999682812808	WITHOUT_CLASSIFICATION	3.171871926092015E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999975444999842	WITHOUT_CLASSIFICATION	2.4555000158368658E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999986711776161	WITHOUT_CLASSIFICATION	1.3288223839180368E-6	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999999739696309	WITHOUT_CLASSIFICATION	2.6030369104509494E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.99999972822035	WITHOUT_CLASSIFICATION	2.717796500723336E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995228944414	WITHOUT_CLASSIFICATION	4.77105558713854E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999041748488331	WITHOUT_CLASSIFICATION	9.58251511668911E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999805245642	WITHOUT_CLASSIFICATION	1.9475435795943432E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999540021814	WITHOUT_CLASSIFICATION	4.599781864987568E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999995264653297	WITHOUT_CLASSIFICATION	4.7353467030939613E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999178161325	WITHOUT_CLASSIFICATION	8.218386753032723E-8	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999444008342	WITHOUT_CLASSIFICATION	5.559916579163085E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999981470484954	WITHOUT_CLASSIFICATION	1.852951504467539E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998813700146	WITHOUT_CLASSIFICATION	1.1862998541031461E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999941097890531	WITHOUT_CLASSIFICATION	5.89021094689406E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999884512055	WITHOUT_CLASSIFICATION	1.1548794470905855E-8	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596617363254	WITHOUT_CLASSIFICATION	4.033826367455575E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999965031083451	WITHOUT_CLASSIFICATION	3.4968916549291794E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999986549946086	WITHOUT_CLASSIFICATION	1.3450053913998711E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999985189985853	WITHOUT_CLASSIFICATION	1.4810014147664364E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999941258066	WITHOUT_CLASSIFICATION	5.874193345459564E-9	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998475029482	WITHOUT_CLASSIFICATION	1.5249705172697314E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806202562131	WITHOUT_CLASSIFICATION	1.93797437868275E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839684866049	WITHOUT_CLASSIFICATION	1.6031513395140852E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956743152267	WITHOUT_CLASSIFICATION	4.32568477332503E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998475029482	WITHOUT_CLASSIFICATION	1.5249705172697314E-7	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999999941317535	WITHOUT_CLASSIFICATION	5.8682465037222944E-8	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997645842709	WITHOUT_CLASSIFICATION	2.3541572925705056E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955012810429	WITHOUT_CLASSIFICATION	4.49871895714583E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955753295908	WITHOUT_CLASSIFICATION	4.424670409176942E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999489979468	WITHOUT_CLASSIFICATION	5.100205325967684E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999866474615293	WITHOUT_CLASSIFICATION	1.3352538470586374E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992315879428	WITHOUT_CLASSIFICATION	7.684120572411784E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986564824721	WITHOUT_CLASSIFICATION	1.3435175279259488E-6	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999996718285	WITHOUT_CLASSIFICATION	3.2817149874249586E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999981804991501	WITHOUT_CLASSIFICATION	1.8195008498260747E-6	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999879936969	WITHOUT_CLASSIFICATION	1.2006303022285027E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999961980698	WITHOUT_CLASSIFICATION	3.801930200635127E-8	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999832186317442	WITHOUT_CLASSIFICATION	1.67813682557426E-5	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997851436576	WITHOUT_CLASSIFICATION	2.1485634236242417E-7	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999675453449	WITHOUT_CLASSIFICATION	3.245465507050951E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999995474415388	WITHOUT_CLASSIFICATION	4.525584611896916E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999970958928	WITHOUT_CLASSIFICATION	2.904107224033282E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999996918390296	WITHOUT_CLASSIFICATION	3.081609703858229E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998199458193	WITHOUT_CLASSIFICATION	1.800541806086638E-7	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996361307567	WITHOUT_CLASSIFICATION	3.638692432272219E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999935288389679	WITHOUT_CLASSIFICATION	6.4711610321619816E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999311086948	WITHOUT_CLASSIFICATION	6.889130520127088E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988222355158	WITHOUT_CLASSIFICATION	1.1777644841926285E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995973671375	WITHOUT_CLASSIFICATION	4.026328624827315E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996329967832	WITHOUT_CLASSIFICATION	3.6700321683799146E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989226903531	WITHOUT_CLASSIFICATION	1.0773096469697683E-6	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999993115454714	WITHOUT_CLASSIFICATION	6.884545287097043E-7	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999981781677183	WITHOUT_CLASSIFICATION	1.821832281773402E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974199896807	WITHOUT_CLASSIFICATION	2.5800103193701336E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983548312299	WITHOUT_CLASSIFICATION	1.6451687701521722E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993969160955	WITHOUT_CLASSIFICATION	6.030839045433694E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995792254969	WITHOUT_CLASSIFICATION	4.20774503012297E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999996475130972	WITHOUT_CLASSIFICATION	3.5248690282922645E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999987919989891	WITHOUT_CLASSIFICATION	1.2080010107847559E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993380820452	WITHOUT_CLASSIFICATION	6.61917954805027E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999998735020774	WITHOUT_CLASSIFICATION	1.264979225818491E-7	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977298611497	WITHOUT_CLASSIFICATION	2.2701388503287697E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987198170687	WITHOUT_CLASSIFICATION	1.2801829313407549E-6	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999996545241037	WITHOUT_CLASSIFICATION	3.454758964164053E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999985354258231	WITHOUT_CLASSIFICATION	1.4645741769676308E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997179024208	WITHOUT_CLASSIFICATION	2.8209757919722693E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999996141940297	WITHOUT_CLASSIFICATION	3.858059702814215E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999955794474241	WITHOUT_CLASSIFICATION	4.420552575882245E-6	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999944930056255	WITHOUT_CLASSIFICATION	5.506994374509872E-6	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999995880356115	WITHOUT_CLASSIFICATION	4.119643885023507E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999193558415	WITHOUT_CLASSIFICATION	8.06441584098338E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999990032455187	WITHOUT_CLASSIFICATION	9.967544812355004E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998429026901	WITHOUT_CLASSIFICATION	1.5709730993119888E-7	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999930718317	WITHOUT_CLASSIFICATION	6.928168280044164E-9	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999971166802729	WITHOUT_CLASSIFICATION	2.8833197269569124E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999907273803996	WITHOUT_CLASSIFICATION	9.272619600347399E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999020442102	WITHOUT_CLASSIFICATION	9.795578980408375E-8	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999865232796645	WITHOUT_CLASSIFICATION	1.3476720335566446E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999998956744493	WITHOUT_CLASSIFICATION	1.0432555069274367E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999994870677719	WITHOUT_CLASSIFICATION	5.129322280987128E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999945352524218	WITHOUT_CLASSIFICATION	5.464747578182304E-6	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998540073830209	WITHOUT_CLASSIFICATION	1.4599261697904737E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999599366996184	WITHOUT_CLASSIFICATION	4.006330038170189E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999642815197	WITHOUT_CLASSIFICATION	3.571848028325308E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999990064532034	WITHOUT_CLASSIFICATION	9.935467966778288E-7	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999274418062	WITHOUT_CLASSIFICATION	7.255819378727188E-8	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999998675377842	WITHOUT_CLASSIFICATION	1.3246221577477807E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999994715928305	WITHOUT_CLASSIFICATION	5.284071695164374E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998562318974	WITHOUT_CLASSIFICATION	1.4376810265631707E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999926575145	WITHOUT_CLASSIFICATION	7.342485499988139E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999985037762946	WITHOUT_CLASSIFICATION	1.4962237053917528E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999999687657862	WITHOUT_CLASSIFICATION	3.123421379587433E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999999920136891	WITHOUT_CLASSIFICATION	7.986310898075972E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996638059874	WITHOUT_CLASSIFICATION	3.3619401256045893E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999992089130026	WITHOUT_CLASSIFICATION	7.910869973349797E-7	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999712650003	WITHOUT_CLASSIFICATION	2.873499970860661E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999982064446992	WITHOUT_CLASSIFICATION	1.793555300779022E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999998920008765	WITHOUT_CLASSIFICATION	1.0799912350542384E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999990234680143	WITHOUT_CLASSIFICATION	9.765319857179692E-7	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999994496136662	WITHOUT_CLASSIFICATION	5.503863339143473E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.999999800312714	WITHOUT_CLASSIFICATION	1.9968728617283047E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999951887854	WITHOUT_CLASSIFICATION	4.8112146055929395E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999999220582554	WITHOUT_CLASSIFICATION	7.794174452776932E-8	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999989663835827	WITHOUT_CLASSIFICATION	1.0336164173778511E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999967926428389	WITHOUT_CLASSIFICATION	3.207357161090192E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999865090162251	WITHOUT_CLASSIFICATION	1.3490983774867924E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999952128212425	WITHOUT_CLASSIFICATION	4.787178757582417E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999975624318425	WITHOUT_CLASSIFICATION	2.4375681575309878E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997536024369	WITHOUT_CLASSIFICATION	2.4639756312527266E-7	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998946367492	WITHOUT_CLASSIFICATION	1.053632508698645E-7	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999220946763	WITHOUT_CLASSIFICATION	7.79053237387788E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999998355406103	WITHOUT_CLASSIFICATION	1.6445938972812796E-7	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999984483699943	WITHOUT_CLASSIFICATION	1.551630005653315E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999997112960719	WITHOUT_CLASSIFICATION	2.887039281213862E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999995715180499	WITHOUT_CLASSIFICATION	4.284819501759273E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995980312557	WITHOUT_CLASSIFICATION	4.0196874433480866E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999984650964459	WITHOUT_CLASSIFICATION	1.5349035541498847E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999969866025058	WITHOUT_CLASSIFICATION	3.0133974941413006E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999995141410759	WITHOUT_CLASSIFICATION	4.858589241468458E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998836785838476	WITHOUT_CLASSIFICATION	1.163214161523642E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999970455733129	WITHOUT_CLASSIFICATION	2.9544266870267497E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999988055737733	WITHOUT_CLASSIFICATION	1.194426226670192E-6	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999991371643187	WITHOUT_CLASSIFICATION	8.628356813868051E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999983177654573	WITHOUT_CLASSIFICATION	1.682234542695139E-6	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996023928847	WITHOUT_CLASSIFICATION	3.9760711527165187E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999995429971229	WITHOUT_CLASSIFICATION	4.570028770940161E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999241294991552	WITHOUT_CLASSIFICATION	7.587050084477546E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999990413213805	WITHOUT_CLASSIFICATION	9.586786195782574E-7	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999994456971194	WITHOUT_CLASSIFICATION	5.543028806018117E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999960133837326	WITHOUT_CLASSIFICATION	3.986616267432697E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999995814180239	WITHOUT_CLASSIFICATION	4.1858197606638647E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999998637293	WITHOUT_CLASSIFICATION	1.362705820036661E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957025186893	WITHOUT_CLASSIFICATION	4.297481310717195E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999135474481232	WITHOUT_CLASSIFICATION	8.645255187680281E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999877774943717	WITHOUT_CLASSIFICATION	1.2222505628217666E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957025186893	WITHOUT_CLASSIFICATION	4.297481310717195E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998091343194	WITHOUT_CLASSIFICATION	1.9086568060007603E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.999999863644265	WITHOUT_CLASSIFICATION	1.3635573501677543E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999990327371684	WITHOUT_CLASSIFICATION	9.672628315921813E-6	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999790132096081	WITHOUT_CLASSIFICATION	2.098679039182348E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999998752298483	WITHOUT_CLASSIFICATION	1.247701517576784E-7	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999136168624	WITHOUT_CLASSIFICATION	8.638313768669616E-8	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999417252552997	WITHOUT_CLASSIFICATION	5.8274744700223984E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999992788607363	WITHOUT_CLASSIFICATION	7.211392638240217E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999238451951	WITHOUT_CLASSIFICATION	7.615480498314814E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999646499950462	WITHOUT_CLASSIFICATION	3.535000495381549E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999163968897	WITHOUT_CLASSIFICATION	8.360311031834397E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999994747136111	WITHOUT_CLASSIFICATION	5.2528638902765E-7	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999991384946214	WITHOUT_CLASSIFICATION	8.615053786124848E-7	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999973247791104	WITHOUT_CLASSIFICATION	2.6752208894823375E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99999982650461	WITHOUT_CLASSIFICATION	1.7349539008562322E-7	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999999112131511	WITHOUT_CLASSIFICATION	8.87868488073315E-8	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999989633390643	WITHOUT_CLASSIFICATION	1.03666093571261E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999989633390643	WITHOUT_CLASSIFICATION	1.03666093571261E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999684431836	WITHOUT_CLASSIFICATION	3.155681647181796E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999281680860356	WITHOUT_CLASSIFICATION	7.183191396445319E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999728504392971	WITHOUT_CLASSIFICATION	2.7149560702911998E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999899865789058	WITHOUT_CLASSIFICATION	1.0013421094128258E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999993845272378	WITHOUT_CLASSIFICATION	6.154727621193527E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999926794593256	WITHOUT_CLASSIFICATION	7.320540674329932E-6	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999979590383569	WITHOUT_CLASSIFICATION	2.0409616431729246E-6	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999928082293	WITHOUT_CLASSIFICATION	7.191770789099956E-9	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999984622572469	WITHOUT_CLASSIFICATION	1.5377427530228194E-6	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999986985290346	WITHOUT_CLASSIFICATION	1.3014709654714841E-6	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999996723727919	WITHOUT_CLASSIFICATION	3.2762720812116675E-7	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999898103237	WITHOUT_CLASSIFICATION	1.0189676284730377E-8	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999102760583	WITHOUT_CLASSIFICATION	8.972394171148143E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999998153899418	WITHOUT_CLASSIFICATION	1.8461005823730389E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999916247123	WITHOUT_CLASSIFICATION	8.375287663057731E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988222355158	WITHOUT_CLASSIFICATION	1.1777644841926285E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999936455224924	WITHOUT_CLASSIFICATION	6.354477507616814E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999588946257	WITHOUT_CLASSIFICATION	4.110537437934684E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999998111887355	WITHOUT_CLASSIFICATION	1.8881126450598528E-7	TEST
do the test	WITHOUT_CLASSIFICATION	0.9990578428938807	WITHOUT_CLASSIFICATION	9.421571061194251E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999382466073	WITHOUT_CLASSIFICATION	6.175339270423111E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999982588943391	WITHOUT_CLASSIFICATION	1.7411056608204068E-6	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999573613624	WITHOUT_CLASSIFICATION	4.2638637587598596E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998672053815	WITHOUT_CLASSIFICATION	1.327946184826354E-7	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999852024744	WITHOUT_CLASSIFICATION	1.4797525728661772E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999823961114	WITHOUT_CLASSIFICATION	1.7603888532685412E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.99999880897697	WITHOUT_CLASSIFICATION	1.1910230299017652E-6	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999998490454755	WITHOUT_CLASSIFICATION	1.5095452467565509E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999931718528982	WITHOUT_CLASSIFICATION	6.828147101857727E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999974422203421	WITHOUT_CLASSIFICATION	2.557779657863107E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998362443081	WITHOUT_CLASSIFICATION	1.637556919515714E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999298869888	WITHOUT_CLASSIFICATION	7.011301125275512E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999904082398514	WITHOUT_CLASSIFICATION	9.591760148532583E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999971379698936	WITHOUT_CLASSIFICATION	2.8620301064073263E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999997411697233	WITHOUT_CLASSIFICATION	2.588302767096675E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999570918365	WITHOUT_CLASSIFICATION	4.290816342716402E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999992750981511	WITHOUT_CLASSIFICATION	7.249018488215805E-7	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999999082461207	WITHOUT_CLASSIFICATION	9.175387930805976E-8	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999976897459403	WITHOUT_CLASSIFICATION	2.3102540596719043E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999985399339405	WITHOUT_CLASSIFICATION	1.4600660594998937E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999896136579792	WITHOUT_CLASSIFICATION	1.038634202071316E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999992631289408	WITHOUT_CLASSIFICATION	7.368710591297571E-7	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999998085222056	WITHOUT_CLASSIFICATION	1.9147779448325147E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999154457996	WITHOUT_CLASSIFICATION	8.455420048801615E-8	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999979218545723	WITHOUT_CLASSIFICATION	2.0781454277145513E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999990645587826	WITHOUT_CLASSIFICATION	9.354412174586905E-7	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920053063079	WITHOUT_CLASSIFICATION	7.994693692080662E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972882678057	WITHOUT_CLASSIFICATION	2.7117321942484643E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975780374282	WITHOUT_CLASSIFICATION	2.4219625718019777E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999794990748	WITHOUT_CLASSIFICATION	2.0500925113735394E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998504561993	WITHOUT_CLASSIFICATION	1.4954380063622997E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991645036983	WITHOUT_CLASSIFICATION	8.354963017334541E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999801009495	WITHOUT_CLASSIFICATION	1.98990505078945E-8	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999987509711651	WITHOUT_CLASSIFICATION	1.2490288349208227E-6	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961880884333	WITHOUT_CLASSIFICATION	3.8119115666718713E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999987509711651	WITHOUT_CLASSIFICATION	1.2490288349208227E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993789699425	WITHOUT_CLASSIFICATION	6.210300575127383E-7	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999998792796113	WITHOUT_CLASSIFICATION	1.2072038869756602E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999934948117646	WITHOUT_CLASSIFICATION	6.50518823548581E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995666787863	WITHOUT_CLASSIFICATION	4.333212136964463E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999945891296431	WITHOUT_CLASSIFICATION	5.410870356902875E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999889510259646	WITHOUT_CLASSIFICATION	1.1048974035399384E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997343456165	WITHOUT_CLASSIFICATION	2.656543835574194E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999993471315072	WITHOUT_CLASSIFICATION	6.528684928342777E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999206888857	WITHOUT_CLASSIFICATION	7.931111435515193E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999686323324234	WITHOUT_CLASSIFICATION	3.136766757656508E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999998620884291	WITHOUT_CLASSIFICATION	1.3791157091551318E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999632647187	WITHOUT_CLASSIFICATION	3.673528127816365E-8	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999988763105746	WITHOUT_CLASSIFICATION	1.1236894254076086E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999872136469133	WITHOUT_CLASSIFICATION	1.2786353086679875E-5	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999978375737	WITHOUT_CLASSIFICATION	2.1624262980260714E-8	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999995136226	WITHOUT_CLASSIFICATION	4.86377404629846E-9	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999994765004663	WITHOUT_CLASSIFICATION	5.234995337061851E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999994765004663	WITHOUT_CLASSIFICATION	5.234995337061851E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999996805547081	WITHOUT_CLASSIFICATION	3.1944529189040176E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999955787059613	WITHOUT_CLASSIFICATION	4.421294038667965E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999855236598	WITHOUT_CLASSIFICATION	1.44763402621158E-8	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999994573207884	WITHOUT_CLASSIFICATION	5.426792115582058E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999996452517217	WITHOUT_CLASSIFICATION	3.5474827837187263E-7	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999990916174994	WITHOUT_CLASSIFICATION	9.083825004772137E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999987053212607	WITHOUT_CLASSIFICATION	1.294678739320174E-6	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999986568787239	WITHOUT_CLASSIFICATION	1.343121276160421E-6	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999985392879469	WITHOUT_CLASSIFICATION	1.46071205308615E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999982428789	WITHOUT_CLASSIFICATION	1.7571211268259549E-9	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99999986380601	WITHOUT_CLASSIFICATION	1.3619398992475822E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997591699021	WITHOUT_CLASSIFICATION	2.408300978430179E-7	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998926811694	WITHOUT_CLASSIFICATION	1.0731883061742973E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999988769912559	WITHOUT_CLASSIFICATION	1.1230087440700063E-6	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999995501982688	WITHOUT_CLASSIFICATION	4.49801731140779E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999020557542	WITHOUT_CLASSIFICATION	9.794424583903195E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999768714863	WITHOUT_CLASSIFICATION	2.3128513764398016E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999990290807445	WITHOUT_CLASSIFICATION	9.7091925557271E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999999419663329	WITHOUT_CLASSIFICATION	5.80336670374084E-8	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999981450455	WITHOUT_CLASSIFICATION	1.854954462010194E-9	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999989214221343	WITHOUT_CLASSIFICATION	1.078577865656733E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998287849424	WITHOUT_CLASSIFICATION	1.7121505763506177E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999507929355	WITHOUT_CLASSIFICATION	4.920706457252056E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999618263933	WITHOUT_CLASSIFICATION	3.817360675983953E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999987436148916	WITHOUT_CLASSIFICATION	1.2563851084842116E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999990501408376	WITHOUT_CLASSIFICATION	9.498591624589915E-7	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997623448492	WITHOUT_CLASSIFICATION	2.376551508528586E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999997698649227	WITHOUT_CLASSIFICATION	2.30135077252933E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999606358914479	WITHOUT_CLASSIFICATION	3.936410855219917E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998026458089	WITHOUT_CLASSIFICATION	1.9735419100867715E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999972155786846	WITHOUT_CLASSIFICATION	2.7844213154766245E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999943754019204	WITHOUT_CLASSIFICATION	5.624598079566484E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999759437229395	WITHOUT_CLASSIFICATION	2.4056277060554107E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999988814355241	WITHOUT_CLASSIFICATION	1.1185644759303024E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999993610581731	WITHOUT_CLASSIFICATION	6.389418269500193E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999999846870768	WITHOUT_CLASSIFICATION	1.531292319899564E-7	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998506191832	WITHOUT_CLASSIFICATION	1.493808167901341E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999986976961152	WITHOUT_CLASSIFICATION	1.3023038848521214E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999603853955	WITHOUT_CLASSIFICATION	3.961460445034086E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999995708374175	WITHOUT_CLASSIFICATION	4.291625824508137E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998626415159	WITHOUT_CLASSIFICATION	1.3735848401598596E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972488469328	WITHOUT_CLASSIFICATION	2.7511530672900306E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999974371854675	WITHOUT_CLASSIFICATION	2.5628145324459044E-6	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999887621137	WITHOUT_CLASSIFICATION	1.1237886339688302E-8	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999999997411433	WITHOUT_CLASSIFICATION	2.5885670427389504E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999999441584435	WITHOUT_CLASSIFICATION	5.5841556446197735E-8	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999997611553761	WITHOUT_CLASSIFICATION	2.3884462382763767E-7	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999302122805	WITHOUT_CLASSIFICATION	6.978771956393451E-8	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998347489113	WITHOUT_CLASSIFICATION	1.652510886919896E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999971582462328	WITHOUT_CLASSIFICATION	2.8417537672052193E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950579289074	WITHOUT_CLASSIFICATION	4.9420710925584635E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999990762553497	WITHOUT_CLASSIFICATION	9.237446502773552E-7	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998170060111	WITHOUT_CLASSIFICATION	1.8299398889089082E-7	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999993569128998	WITHOUT_CLASSIFICATION	6.430871002721748E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999976348907582	WITHOUT_CLASSIFICATION	2.3651092417476887E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.999996969976397	WITHOUT_CLASSIFICATION	3.0300236030746037E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.999996969976397	WITHOUT_CLASSIFICATION	3.0300236030746037E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999431919075418	WITHOUT_CLASSIFICATION	5.680809245816941E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999455918943894	WITHOUT_CLASSIFICATION	5.4408105610609117E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999614247447	WITHOUT_CLASSIFICATION	3.857525528807504E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998525787853	WITHOUT_CLASSIFICATION	1.4742121462059726E-7	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999740936701	WITHOUT_CLASSIFICATION	2.5906329823849046E-8	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999763697898	WITHOUT_CLASSIFICATION	2.36302102478884E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998906437477	WITHOUT_CLASSIFICATION	1.0935625225903257E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999551826759	WITHOUT_CLASSIFICATION	4.481732410568611E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999987183319605	WITHOUT_CLASSIFICATION	1.281668039546854E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999732103299177	WITHOUT_CLASSIFICATION	2.6789670082249742E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998836093672	WITHOUT_CLASSIFICATION	1.1639063274163497E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999996951364516	WITHOUT_CLASSIFICATION	3.0486354838704314E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999997890365786	WITHOUT_CLASSIFICATION	2.109634213668313E-7	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999881310652844	WITHOUT_CLASSIFICATION	1.1868934715558225E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999042273539	WITHOUT_CLASSIFICATION	9.577264612195112E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999997313733789	WITHOUT_CLASSIFICATION	2.6862662104977765E-7	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999978260707676	WITHOUT_CLASSIFICATION	2.1739292323261634E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999958399383	WITHOUT_CLASSIFICATION	4.160061811955132E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999933508576998	WITHOUT_CLASSIFICATION	6.6491423002044874E-6	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999998620660163	WITHOUT_CLASSIFICATION	1.3793398370099061E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997723323979	WITHOUT_CLASSIFICATION	2.2766760208434572E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999543828578	WITHOUT_CLASSIFICATION	4.56171422140986E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999998495297601	WITHOUT_CLASSIFICATION	1.5047023989903346E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518555502933	WITHOUT_CLASSIFICATION	4.814444970670775E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999441718888	WITHOUT_CLASSIFICATION	5.582811126343314E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998378326064	WITHOUT_CLASSIFICATION	1.6216739366069011E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999990457633948	WITHOUT_CLASSIFICATION	9.542366052196016E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999999002516665	WITHOUT_CLASSIFICATION	9.974833350198983E-7	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999404442369761	WITHOUT_CLASSIFICATION	5.95557630238122E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999996205525407	WITHOUT_CLASSIFICATION	3.7944745939737134E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518555502933	WITHOUT_CLASSIFICATION	4.814444970670775E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999999211695493	WITHOUT_CLASSIFICATION	7.883045070477947E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999955520619	WITHOUT_CLASSIFICATION	4.447938079667206E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9997801520450201	WITHOUT_CLASSIFICATION	2.1984795497972698E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999989722301748	WITHOUT_CLASSIFICATION	1.0277698253140644E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999946200249	WITHOUT_CLASSIFICATION	5.379975107336939E-9	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999841656141849	WITHOUT_CLASSIFICATION	1.5834385815078607E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997725392482	WITHOUT_CLASSIFICATION	2.2746075191879606E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999429118767	WITHOUT_CLASSIFICATION	5.7088123339077014E-8	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999972119080326	WITHOUT_CLASSIFICATION	2.788091967410365E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999989722301748	WITHOUT_CLASSIFICATION	1.0277698253140644E-6	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999766131431336	WITHOUT_CLASSIFICATION	2.3386856866435393E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999429118767	WITHOUT_CLASSIFICATION	5.7088123339077014E-8	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999367347228	WITHOUT_CLASSIFICATION	6.326527726421635E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999988674948497	WITHOUT_CLASSIFICATION	1.1325051503027242E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999817009937	WITHOUT_CLASSIFICATION	1.829900636891907E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99999986380601	WITHOUT_CLASSIFICATION	1.3619398992475822E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999512160391	WITHOUT_CLASSIFICATION	4.878396089105771E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999999363989659	WITHOUT_CLASSIFICATION	6.360103409060334E-7	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997228619585	WITHOUT_CLASSIFICATION	2.771380414937008E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999996643183845	WITHOUT_CLASSIFICATION	3.3568161548502624E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999920699070896	WITHOUT_CLASSIFICATION	7.930092910351835E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999980889027429	WITHOUT_CLASSIFICATION	1.9110972571467704E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999996713386029	WITHOUT_CLASSIFICATION	3.2866139710685834E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999966802681527	WITHOUT_CLASSIFICATION	3.3197318472626507E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.99999756582377	WITHOUT_CLASSIFICATION	2.434176230051837E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997075698808	WITHOUT_CLASSIFICATION	2.9243011923946854E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999733650968639	WITHOUT_CLASSIFICATION	2.6634903136145692E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999789176538	WITHOUT_CLASSIFICATION	2.1082346204119678E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999610823213	WITHOUT_CLASSIFICATION	3.891767870226802E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999979633880229	WITHOUT_CLASSIFICATION	2.036611977077361E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999915728609	WITHOUT_CLASSIFICATION	8.427139088172682E-9	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999984462448753	WITHOUT_CLASSIFICATION	1.5537551246381287E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999928619397581	WITHOUT_CLASSIFICATION	7.138060241780239E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987010775206	WITHOUT_CLASSIFICATION	1.2989224793299323E-6	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999992442867689	WITHOUT_CLASSIFICATION	7.557132310534778E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999994433717021	WITHOUT_CLASSIFICATION	5.566282979357106E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999994974051263	WITHOUT_CLASSIFICATION	5.025948737069254E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999427622496	WITHOUT_CLASSIFICATION	5.723775039338664E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999943377105	WITHOUT_CLASSIFICATION	5.662289513165028E-8	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999972160509807	WITHOUT_CLASSIFICATION	2.7839490193296324E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999995907649143	WITHOUT_CLASSIFICATION	4.0923508572028197E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999543337377487	WITHOUT_CLASSIFICATION	4.566626225145118E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999986791914693	WITHOUT_CLASSIFICATION	1.3208085306298843E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982123743574	WITHOUT_CLASSIFICATION	1.7876256427026832E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977310712164	WITHOUT_CLASSIFICATION	2.2689287835370586E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999999905299415	WITHOUT_CLASSIFICATION	9.470058504922274E-8	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999983699863194	WITHOUT_CLASSIFICATION	1.6300136805448746E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999994487180489	WITHOUT_CLASSIFICATION	5.512819511878611E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999945798533	WITHOUT_CLASSIFICATION	5.420146707602688E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999998123242786	WITHOUT_CLASSIFICATION	1.8767572132568985E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999985006356465	WITHOUT_CLASSIFICATION	1.499364353477628E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999814152943	WITHOUT_CLASSIFICATION	1.8584705685992035E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999182970407	WITHOUT_CLASSIFICATION	8.170295925937591E-8	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999989275463744	WITHOUT_CLASSIFICATION	1.072453625578627E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999993119547393	WITHOUT_CLASSIFICATION	6.880452605847959E-7	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999953506831517	WITHOUT_CLASSIFICATION	4.649316848285018E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999997467150047	WITHOUT_CLASSIFICATION	2.5328499527247744E-7	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999985686476	WITHOUT_CLASSIFICATION	1.4313523994722433E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999994389648634	WITHOUT_CLASSIFICATION	5.610351365425176E-7	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999992015763112	WITHOUT_CLASSIFICATION	7.984236886962671E-7	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999549829925412	WITHOUT_CLASSIFICATION	4.501700745879875E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999922288511226	WITHOUT_CLASSIFICATION	7.771148877375535E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999972599123707	WITHOUT_CLASSIFICATION	2.740087629320098E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999993718023538	WITHOUT_CLASSIFICATION	6.281976462401815E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999901924806519	WITHOUT_CLASSIFICATION	9.807519348112588E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999987498591076	WITHOUT_CLASSIFICATION	1.2501408923416603E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999684374941	WITHOUT_CLASSIFICATION	3.15625060613511E-8	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999982217320099	WITHOUT_CLASSIFICATION	1.7782679901819083E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999829826594	WITHOUT_CLASSIFICATION	1.7017340719573145E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999103896179	WITHOUT_CLASSIFICATION	8.96103821092533E-7	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998778394191498	WITHOUT_CLASSIFICATION	1.2216058085014937E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999974723359153	WITHOUT_CLASSIFICATION	2.5276640848053425E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982123743574	WITHOUT_CLASSIFICATION	1.7876256427026832E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999999976952978	WITHOUT_CLASSIFICATION	2.304702200391783E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999996512763	WITHOUT_CLASSIFICATION	3.4872370780647244E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999873956724382	WITHOUT_CLASSIFICATION	1.2604327561686664E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998942224091788	WITHOUT_CLASSIFICATION	1.0577759082112155E-4	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999997342374501	WITHOUT_CLASSIFICATION	2.6576254988859733E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999988144684084	WITHOUT_CLASSIFICATION	1.1855315914879975E-6	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989510806129	WITHOUT_CLASSIFICATION	1.0489193871077469E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999923053807	WITHOUT_CLASSIFICATION	7.694619298179788E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999717989778	WITHOUT_CLASSIFICATION	2.8201022213197997E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999940689293825	WITHOUT_CLASSIFICATION	5.931070617551718E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999840567475	WITHOUT_CLASSIFICATION	1.594325243071781E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9995917378849069	WITHOUT_CLASSIFICATION	4.082621150930759E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999991764320945	WITHOUT_CLASSIFICATION	8.235679054906582E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999978293662901	WITHOUT_CLASSIFICATION	2.1706337099642774E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993789699425	WITHOUT_CLASSIFICATION	6.210300575127383E-7	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999903713511	WITHOUT_CLASSIFICATION	9.6286488404593E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999999366195	WITHOUT_CLASSIFICATION	6.338050551256561E-10	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999991418660015	WITHOUT_CLASSIFICATION	8.581339985193195E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.999997942652979	WITHOUT_CLASSIFICATION	2.057347021031135E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999959997466	WITHOUT_CLASSIFICATION	4.000253260336693E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990817700889	WITHOUT_CLASSIFICATION	9.182299110570443E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990817700889	WITHOUT_CLASSIFICATION	9.182299110570443E-7	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999995830793327	WITHOUT_CLASSIFICATION	4.169206672352004E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999996665449651	WITHOUT_CLASSIFICATION	3.3345503488326026E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998921879062	WITHOUT_CLASSIFICATION	1.0781209384161131E-7	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999983345315578	WITHOUT_CLASSIFICATION	1.665468442154279E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999997463771962	WITHOUT_CLASSIFICATION	2.5362280384932006E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998491580663	WITHOUT_CLASSIFICATION	1.5084193366580232E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999758845358866	WITHOUT_CLASSIFICATION	2.411546411337171E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998987306243	WITHOUT_CLASSIFICATION	1.0126937567057719E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998987306243	WITHOUT_CLASSIFICATION	1.0126937567057719E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999931946957836	WITHOUT_CLASSIFICATION	6.805304216471162E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999996413813583	WITHOUT_CLASSIFICATION	3.5861864171242534E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998068334132	WITHOUT_CLASSIFICATION	1.9316658674604233E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994181032379	WITHOUT_CLASSIFICATION	5.81896762054818E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994181032379	WITHOUT_CLASSIFICATION	5.81896762054818E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994181032379	WITHOUT_CLASSIFICATION	5.81896762054818E-7	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999998028855537	WITHOUT_CLASSIFICATION	1.9711444633496686E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999994046580043	WITHOUT_CLASSIFICATION	5.953419957731432E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999941359912338	WITHOUT_CLASSIFICATION	5.864008766252034E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999893411820342	WITHOUT_CLASSIFICATION	1.0658817965822564E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999998926686055	WITHOUT_CLASSIFICATION	1.073313944768743E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999999990498149	WITHOUT_CLASSIFICATION	9.50185091947695E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999805678781	WITHOUT_CLASSIFICATION	1.9432121880862527E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999864990597629	WITHOUT_CLASSIFICATION	1.3500940237129592E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999997037719541	WITHOUT_CLASSIFICATION	2.962280459530467E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998282139829	WITHOUT_CLASSIFICATION	1.7178601697549852E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999969531981662	WITHOUT_CLASSIFICATION	3.0468018339325705E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999970838979853	WITHOUT_CLASSIFICATION	2.91610201466567E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999982423645107	WITHOUT_CLASSIFICATION	1.7576354892564244E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998322826834	WITHOUT_CLASSIFICATION	1.6771731660590416E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999474728168	WITHOUT_CLASSIFICATION	5.2527183110517815E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998055562824	WITHOUT_CLASSIFICATION	1.9444371751387072E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999985154136654	WITHOUT_CLASSIFICATION	1.4845863347014628E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999551423871113	WITHOUT_CLASSIFICATION	4.4857612888722264E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999551423871113	WITHOUT_CLASSIFICATION	4.4857612888722264E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999679108211744	WITHOUT_CLASSIFICATION	3.208917882555387E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999679108211744	WITHOUT_CLASSIFICATION	3.208917882555387E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999695503314663	WITHOUT_CLASSIFICATION	3.0449668533791497E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999624591612072	WITHOUT_CLASSIFICATION	3.75408387928069E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999624591612072	WITHOUT_CLASSIFICATION	3.75408387928069E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999806201709232	WITHOUT_CLASSIFICATION	1.937982907676892E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999447069638157	WITHOUT_CLASSIFICATION	5.529303618442896E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997169055311	WITHOUT_CLASSIFICATION	2.8309446885647057E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999990817700889	WITHOUT_CLASSIFICATION	9.182299110570443E-7	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999679061395	WITHOUT_CLASSIFICATION	3.20938603542754E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999447069638157	WITHOUT_CLASSIFICATION	5.529303618442896E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999957622419	WITHOUT_CLASSIFICATION	4.237758121735477E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999990888892449	WITHOUT_CLASSIFICATION	9.111107552003401E-7	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999323753491448	WITHOUT_CLASSIFICATION	6.762465085520095E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999716425025064	WITHOUT_CLASSIFICATION	2.83574974937263E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999966119174	WITHOUT_CLASSIFICATION	3.3880825772352175E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999920400068492	WITHOUT_CLASSIFICATION	7.959993150771891E-6	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999990199180612	WITHOUT_CLASSIFICATION	9.800819388217224E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999992612070083	WITHOUT_CLASSIFICATION	7.387929917684754E-7	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998012264889	WITHOUT_CLASSIFICATION	1.9877351115554495E-7	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999994238390015	WITHOUT_CLASSIFICATION	5.76160998503542E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999615972535	WITHOUT_CLASSIFICATION	3.840274652444843E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999918023291545	WITHOUT_CLASSIFICATION	8.19767084548412E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999954287919904	WITHOUT_CLASSIFICATION	4.571208009503466E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999943807175594	WITHOUT_CLASSIFICATION	5.619282440521009E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999961832188504	WITHOUT_CLASSIFICATION	3.816781149570852E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999998469548396	WITHOUT_CLASSIFICATION	1.5304516049881066E-7	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999422330543	WITHOUT_CLASSIFICATION	5.7766945693437475E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999964207579056	WITHOUT_CLASSIFICATION	3.5792420943567194E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999964207579056	WITHOUT_CLASSIFICATION	3.5792420943567194E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999992098126304	WITHOUT_CLASSIFICATION	7.901873697120243E-7	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999968597057861	WITHOUT_CLASSIFICATION	3.1402942138150675E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999352266582	WITHOUT_CLASSIFICATION	6.477334179895828E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999997282201245	WITHOUT_CLASSIFICATION	2.7177987549614146E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999972158802803	WITHOUT_CLASSIFICATION	2.7841197196277516E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999997849751525	WITHOUT_CLASSIFICATION	2.1502484733163842E-7	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999913690508	WITHOUT_CLASSIFICATION	8.630949101689806E-9	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999872141307118	WITHOUT_CLASSIFICATION	1.2785869288128387E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999994196996257	WITHOUT_CLASSIFICATION	5.80300374347426E-7	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999183210421	WITHOUT_CLASSIFICATION	8.167895794966031E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999553251101	WITHOUT_CLASSIFICATION	4.467488989384088E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9995917378849069	WITHOUT_CLASSIFICATION	4.082621150930759E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999308061761	WITHOUT_CLASSIFICATION	6.919382393447511E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999989185918321	WITHOUT_CLASSIFICATION	1.0814081678457364E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999982755959301	WITHOUT_CLASSIFICATION	1.7244040699455228E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999999733957487	WITHOUT_CLASSIFICATION	2.6604251306967945E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999399672642	WITHOUT_CLASSIFICATION	6.00327357814841E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999399672642	WITHOUT_CLASSIFICATION	6.00327357814841E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999891538979558	WITHOUT_CLASSIFICATION	1.0846102044196461E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998691112365	WITHOUT_CLASSIFICATION	1.308887635012865E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999988505882259	WITHOUT_CLASSIFICATION	1.1494117740358374E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999975003322199	WITHOUT_CLASSIFICATION	2.499667780062082E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999989118758039	WITHOUT_CLASSIFICATION	1.0881241961761002E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999762551974283	WITHOUT_CLASSIFICATION	2.3744802571730193E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996864572679	WITHOUT_CLASSIFICATION	3.1354273210545883E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999392091801	WITHOUT_CLASSIFICATION	6.07908199557716E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998971562967	WITHOUT_CLASSIFICATION	1.0284370325696714E-7	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998940290397	WITHOUT_CLASSIFICATION	1.0597096039240051E-7	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997723212088	WITHOUT_CLASSIFICATION	2.2767879118284664E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999392091801	WITHOUT_CLASSIFICATION	6.07908199557716E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998585862311	WITHOUT_CLASSIFICATION	1.4141376886060038E-7	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999402015427	WITHOUT_CLASSIFICATION	5.979845727694456E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999523217148	WITHOUT_CLASSIFICATION	4.767828527045111E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999799572299112	WITHOUT_CLASSIFICATION	2.004277008890898E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999981790795	WITHOUT_CLASSIFICATION	1.8209205058187607E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999078770159	WITHOUT_CLASSIFICATION	9.212298420051494E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999378910344	WITHOUT_CLASSIFICATION	6.210896570601051E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997191733511	WITHOUT_CLASSIFICATION	2.8082664892592943E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998805412182	WITHOUT_CLASSIFICATION	1.1945878175532444E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999931482861686	WITHOUT_CLASSIFICATION	6.8517138314065604E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999981220934689	WITHOUT_CLASSIFICATION	1.8779065310755322E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997978426067	WITHOUT_CLASSIFICATION	2.0215739323146686E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999325125986	WITHOUT_CLASSIFICATION	6.748740144412026E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999992508232365	WITHOUT_CLASSIFICATION	7.491767635370355E-7	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999955222184094	WITHOUT_CLASSIFICATION	4.477781590531536E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999978702319401	WITHOUT_CLASSIFICATION	2.1297680598226314E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999972648153639	WITHOUT_CLASSIFICATION	2.735184636106688E-6	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998605582399274	WITHOUT_CLASSIFICATION	1.3944176007263495E-4	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998198097918582	WITHOUT_CLASSIFICATION	1.801902081417097E-4	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999540472154	WITHOUT_CLASSIFICATION	4.5952784506671344E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996129974743	WITHOUT_CLASSIFICATION	3.870025257075964E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998459369923	WITHOUT_CLASSIFICATION	1.5406300765899427E-7	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999658451378354	WITHOUT_CLASSIFICATION	3.415486216467152E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9995695191752935	WITHOUT_CLASSIFICATION	4.3048082470661123E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997956115934	WITHOUT_CLASSIFICATION	2.0438840672837574E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999722888001968	WITHOUT_CLASSIFICATION	2.771119980315279E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999337997623	WITHOUT_CLASSIFICATION	6.620023763546166E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999723609571	WITHOUT_CLASSIFICATION	2.7639042863005908E-8	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998501800128	WITHOUT_CLASSIFICATION	1.498199872010886E-7	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999993527016194	WITHOUT_CLASSIFICATION	6.472983805403037E-7	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999951123825	WITHOUT_CLASSIFICATION	4.887617500231606E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999998713038089	WITHOUT_CLASSIFICATION	1.2869619112037504E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999952121772823	WITHOUT_CLASSIFICATION	4.787822717650485E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998245978698	WITHOUT_CLASSIFICATION	1.754021300703756E-7	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999991327640722	WITHOUT_CLASSIFICATION	8.672359277938645E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999986929672456	WITHOUT_CLASSIFICATION	1.307032754413767E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999984609244	WITHOUT_CLASSIFICATION	1.5390756019204173E-8	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999831633726	WITHOUT_CLASSIFICATION	1.6836627406239864E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999981455186233	WITHOUT_CLASSIFICATION	1.8544813766943552E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999052341109	WITHOUT_CLASSIFICATION	9.476588924952415E-8	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999996371322932	WITHOUT_CLASSIFICATION	3.6286770680160004E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.99999999171474	WITHOUT_CLASSIFICATION	8.28526009074616E-9	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999828431482	WITHOUT_CLASSIFICATION	1.715685180247398E-8	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999907749934	WITHOUT_CLASSIFICATION	9.225006738216572E-9	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999969919210986	WITHOUT_CLASSIFICATION	3.0080789013137373E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999998336089941	WITHOUT_CLASSIFICATION	1.663910059040032E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999997882577317	WITHOUT_CLASSIFICATION	2.11742268224808E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999389451731465	WITHOUT_CLASSIFICATION	6.10548268534412E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999979332202196	WITHOUT_CLASSIFICATION	2.0667797804353595E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999996876895391	WITHOUT_CLASSIFICATION	3.1231046090162443E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877418155866	WITHOUT_CLASSIFICATION	1.2258184413559129E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999981407772706	WITHOUT_CLASSIFICATION	1.8592227293905096E-6	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999995444093279	WITHOUT_CLASSIFICATION	4.555906720588607E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999987461549511	WITHOUT_CLASSIFICATION	1.2538450489015953E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999639068462	WITHOUT_CLASSIFICATION	3.609315374120732E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999564380833	WITHOUT_CLASSIFICATION	4.3561916699879417E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997870469686	WITHOUT_CLASSIFICATION	2.129530314797188E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997869758985	WITHOUT_CLASSIFICATION	2.130241013972733E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999965449992523	WITHOUT_CLASSIFICATION	3.4550007477715384E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999933802429025	WITHOUT_CLASSIFICATION	6.619757097486579E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999997663586833	WITHOUT_CLASSIFICATION	2.336413166324892E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995121594922	WITHOUT_CLASSIFICATION	4.878405077453674E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999998695719863	WITHOUT_CLASSIFICATION	1.30428013748069E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9994106623458286	WITHOUT_CLASSIFICATION	5.893376541712329E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999996009123828	WITHOUT_CLASSIFICATION	3.990876171160707E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999942148145045	WITHOUT_CLASSIFICATION	5.78518549557473E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877418155866	WITHOUT_CLASSIFICATION	1.2258184413559129E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998823683605	WITHOUT_CLASSIFICATION	1.1763163956363978E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999990712751128	WITHOUT_CLASSIFICATION	9.287248871313011E-7	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997626139617	WITHOUT_CLASSIFICATION	2.373860383670821E-7	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999998027476076	WITHOUT_CLASSIFICATION	1.9725239244732312E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999781001077257	WITHOUT_CLASSIFICATION	2.1899892274272668E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999964495122199	WITHOUT_CLASSIFICATION	3.5504877801372327E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998971562967	WITHOUT_CLASSIFICATION	1.0284370325696714E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999929639997075	WITHOUT_CLASSIFICATION	7.036000292496624E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999991327640722	WITHOUT_CLASSIFICATION	8.672359277938645E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999955784642828	WITHOUT_CLASSIFICATION	4.421535717224678E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999197072624	WITHOUT_CLASSIFICATION	8.029273752321104E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999213960126	WITHOUT_CLASSIFICATION	7.860398740611056E-7	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991409156476	WITHOUT_CLASSIFICATION	8.590843525603911E-7	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999988628879355	WITHOUT_CLASSIFICATION	1.1371120644973936E-6	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999996366077787	WITHOUT_CLASSIFICATION	3.633922212860373E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999932962019091	WITHOUT_CLASSIFICATION	6.703798090930352E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999357673722	WITHOUT_CLASSIFICATION	6.423262781249523E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999877505613	WITHOUT_CLASSIFICATION	1.2249438770300932E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999954009133	WITHOUT_CLASSIFICATION	4.59908661553451E-9	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999995583293435	WITHOUT_CLASSIFICATION	4.416706564634394E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999997288840196	WITHOUT_CLASSIFICATION	2.711159805331586E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997131195337	WITHOUT_CLASSIFICATION	2.8688046627116715E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997131195337	WITHOUT_CLASSIFICATION	2.8688046627116715E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999887459608	WITHOUT_CLASSIFICATION	1.1254039205039951E-7	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999485291212	WITHOUT_CLASSIFICATION	5.147087879880364E-7	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999994798534888	WITHOUT_CLASSIFICATION	5.201465111491701E-7	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999885750985297	WITHOUT_CLASSIFICATION	1.1424901470293376E-5	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999713602912	WITHOUT_CLASSIFICATION	2.8639708870890894E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997764311803	WITHOUT_CLASSIFICATION	2.235688196298485E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999879267204	WITHOUT_CLASSIFICATION	1.2073279503518277E-8	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999998419921208	WITHOUT_CLASSIFICATION	1.5800787920812235E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998372546952	WITHOUT_CLASSIFICATION	1.627453048051773E-7	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999979922598807	WITHOUT_CLASSIFICATION	2.0077401193054944E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999983995349727	WITHOUT_CLASSIFICATION	1.600465027281752E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999967472184369	WITHOUT_CLASSIFICATION	3.2527815631997796E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998088371028	WITHOUT_CLASSIFICATION	1.9116289711359556E-7	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999993223069	WITHOUT_CLASSIFICATION	6.776931408551147E-10	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999996655703488	WITHOUT_CLASSIFICATION	3.3442965119863443E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998674496983	WITHOUT_CLASSIFICATION	1.325503016440373E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999996931511022	WITHOUT_CLASSIFICATION	3.068488978430767E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999970600765262	WITHOUT_CLASSIFICATION	2.9399234737016164E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999395020751	WITHOUT_CLASSIFICATION	6.049792481135664E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999694623983	WITHOUT_CLASSIFICATION	3.053760155097565E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999995366018463	WITHOUT_CLASSIFICATION	4.6339815370751575E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999382888053	WITHOUT_CLASSIFICATION	6.171119478239476E-8	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999994777820628	WITHOUT_CLASSIFICATION	5.222179371947371E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999996228914918	WITHOUT_CLASSIFICATION	3.771085081937224E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999441736527037	WITHOUT_CLASSIFICATION	5.5826347296352264E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999983959328135	WITHOUT_CLASSIFICATION	1.6040671865787327E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979508198458	WITHOUT_CLASSIFICATION	2.049180154150138E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994325745598	WITHOUT_CLASSIFICATION	5.674254402025079E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999836525502	WITHOUT_CLASSIFICATION	1.6347449906276862E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999980877267844	WITHOUT_CLASSIFICATION	1.9122732155643813E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999805709396	WITHOUT_CLASSIFICATION	1.9429060391129698E-7	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999993114277962	WITHOUT_CLASSIFICATION	6.885722037598101E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999993487915695	WITHOUT_CLASSIFICATION	6.512084305752874E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999688767333	WITHOUT_CLASSIFICATION	3.1123266652646257E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999865699016	WITHOUT_CLASSIFICATION	1.3430098427340493E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999021883043	WITHOUT_CLASSIFICATION	9.781169576174068E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999989319332426	WITHOUT_CLASSIFICATION	1.068066757450635E-6	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999972473935904	WITHOUT_CLASSIFICATION	2.7526064095397353E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999128046938	WITHOUT_CLASSIFICATION	8.719530626541699E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997091453615	WITHOUT_CLASSIFICATION	2.9085463843042935E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999829298342708	WITHOUT_CLASSIFICATION	1.70701657291702E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959048151424	WITHOUT_CLASSIFICATION	4.09518485763591E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999712899751	WITHOUT_CLASSIFICATION	2.8710024840736317E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999809994823319	WITHOUT_CLASSIFICATION	1.9000517668155396E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999985051535194	WITHOUT_CLASSIFICATION	1.4948464805360597E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999979426576763	WITHOUT_CLASSIFICATION	2.0573423236766956E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955012810429	WITHOUT_CLASSIFICATION	4.49871895714583E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9938450355759925	WITHOUT_CLASSIFICATION	0.0061549644240075614	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997117257524	WITHOUT_CLASSIFICATION	2.88274247658852E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996108046262	WITHOUT_CLASSIFICATION	3.8919537375503274E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993730425157	WITHOUT_CLASSIFICATION	6.269574843385914E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981434897293	WITHOUT_CLASSIFICATION	1.85651027078252E-6	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999954881068	WITHOUT_CLASSIFICATION	4.511893184403426E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999988870967412	WITHOUT_CLASSIFICATION	1.1129032587628605E-6	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991912314103	WITHOUT_CLASSIFICATION	8.087685896410068E-7	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999986216701385	WITHOUT_CLASSIFICATION	1.378329861446795E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999928650055	WITHOUT_CLASSIFICATION	7.134994486573069E-8	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999986683253809	WITHOUT_CLASSIFICATION	1.3316746190952643E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999991771144505	WITHOUT_CLASSIFICATION	8.228855494451714E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999997796610479	WITHOUT_CLASSIFICATION	2.2033895214657504E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999994958665466	WITHOUT_CLASSIFICATION	5.041334534572089E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999971877754237	WITHOUT_CLASSIFICATION	2.812224576401524E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998860442945	WITHOUT_CLASSIFICATION	1.1395570552976168E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999978874811265	WITHOUT_CLASSIFICATION	2.1125188734845205E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999994308289152	WITHOUT_CLASSIFICATION	5.691710849160639E-7	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999990863785727	WITHOUT_CLASSIFICATION	9.136214273526655E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999718352427	WITHOUT_CLASSIFICATION	2.816475730699377E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999042965561703	WITHOUT_CLASSIFICATION	9.570344382961885E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998795858366	WITHOUT_CLASSIFICATION	1.204141634453252E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999180807257	WITHOUT_CLASSIFICATION	8.191927427962284E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997190401562	WITHOUT_CLASSIFICATION	2.8095984383133976E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999180807257	WITHOUT_CLASSIFICATION	8.191927427962284E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999996697104644	WITHOUT_CLASSIFICATION	3.302895355511832E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999763669678	WITHOUT_CLASSIFICATION	2.3633032161505907E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999997261247722	WITHOUT_CLASSIFICATION	2.738752278271675E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999568425613	WITHOUT_CLASSIFICATION	4.3157438776206145E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999775461277	WITHOUT_CLASSIFICATION	2.2453872275425163E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998851447166	WITHOUT_CLASSIFICATION	1.1485528331775636E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999992433147549	WITHOUT_CLASSIFICATION	7.566852450948219E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998192086470574	WITHOUT_CLASSIFICATION	1.807913529426405E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999998779154831	WITHOUT_CLASSIFICATION	1.2208451689239962E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999953048179	WITHOUT_CLASSIFICATION	4.695182121586281E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999960648654402	WITHOUT_CLASSIFICATION	3.935134559802094E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998194599755	WITHOUT_CLASSIFICATION	1.8054002449714027E-7	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997946375933	WITHOUT_CLASSIFICATION	2.053624068185898E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999499736495739	WITHOUT_CLASSIFICATION	5.002635042612923E-5	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999985896694911	WITHOUT_CLASSIFICATION	1.41033050896529E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999808897835	WITHOUT_CLASSIFICATION	1.9110216499773023E-8	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999813790134	WITHOUT_CLASSIFICATION	1.862098658361616E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997773457872	WITHOUT_CLASSIFICATION	2.2265421293693274E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999926269957	WITHOUT_CLASSIFICATION	7.373004327787509E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999957313217521	WITHOUT_CLASSIFICATION	4.2686782478745995E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999993877987068	WITHOUT_CLASSIFICATION	6.122012932082926E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999997168330387	WITHOUT_CLASSIFICATION	2.831669612462487E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998442637983059	WITHOUT_CLASSIFICATION	1.5573620169403201E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999417894228	WITHOUT_CLASSIFICATION	5.821057721318208E-8	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999980394641731	WITHOUT_CLASSIFICATION	1.9605358268111893E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999673946557369	WITHOUT_CLASSIFICATION	3.26053442629646E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999923607402698	WITHOUT_CLASSIFICATION	7.639259730234195E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999979674594683	WITHOUT_CLASSIFICATION	2.0325405316743456E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999707255816	WITHOUT_CLASSIFICATION	2.9274418508512007E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999999561722444	WITHOUT_CLASSIFICATION	4.3827755605232314E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999951649306715	WITHOUT_CLASSIFICATION	4.835069328419533E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999972159104074	WITHOUT_CLASSIFICATION	2.784089592616349E-6	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999821244322	WITHOUT_CLASSIFICATION	1.787556780381762E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999728005091457	WITHOUT_CLASSIFICATION	2.719949085426994E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999984212811379	WITHOUT_CLASSIFICATION	1.5787188621495433E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999789562168575	WITHOUT_CLASSIFICATION	2.1043783142572874E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999973465511478	WITHOUT_CLASSIFICATION	2.653448852212163E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999687424125	WITHOUT_CLASSIFICATION	3.125758740417526E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999655874682224	WITHOUT_CLASSIFICATION	3.441253177764316E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998549855181	WITHOUT_CLASSIFICATION	1.450144817989522E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999065349094131	WITHOUT_CLASSIFICATION	9.346509058701159E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999998467246977	WITHOUT_CLASSIFICATION	1.5327530237684756E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993718324545556	WITHOUT_CLASSIFICATION	6.281675454443838E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999673946557369	WITHOUT_CLASSIFICATION	3.26053442629646E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999506501159442	WITHOUT_CLASSIFICATION	4.9349884055905695E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999997026270602	WITHOUT_CLASSIFICATION	2.973729397399808E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999405956378988	WITHOUT_CLASSIFICATION	5.9404362101149265E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999985683749928	WITHOUT_CLASSIFICATION	1.4316250073066814E-6	TEST
special case	WITHOUT_CLASSIFICATION	0.9999991953360096	WITHOUT_CLASSIFICATION	8.046639904785806E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999973782834434	WITHOUT_CLASSIFICATION	2.6217165566161586E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999924066882	WITHOUT_CLASSIFICATION	7.593311765527407E-9	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999985310636939	WITHOUT_CLASSIFICATION	1.4689363061627642E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989836704679	WITHOUT_CLASSIFICATION	1.016329532170272E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999997660180753	WITHOUT_CLASSIFICATION	2.3398192457503256E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999973397057189	WITHOUT_CLASSIFICATION	2.6602942810289597E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999991005763204	WITHOUT_CLASSIFICATION	8.994236796380781E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999955161984352	WITHOUT_CLASSIFICATION	4.483801564855479E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999924123359341	WITHOUT_CLASSIFICATION	7.587664065945547E-6	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999778610519	WITHOUT_CLASSIFICATION	2.2138948225015564E-8	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999263708503	WITHOUT_CLASSIFICATION	7.36291495739428E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999181965794	WITHOUT_CLASSIFICATION	8.180342053675461E-8	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999995215229888	WITHOUT_CLASSIFICATION	4.784770113486398E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999599147685	WITHOUT_CLASSIFICATION	4.008523152723173E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999506501159442	WITHOUT_CLASSIFICATION	4.9349884055905695E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999972923403114	WITHOUT_CLASSIFICATION	2.7076596886119337E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999982120352319	WITHOUT_CLASSIFICATION	1.787964768139673E-6	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999978310104439	WITHOUT_CLASSIFICATION	2.1689895560763E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999850852302	WITHOUT_CLASSIFICATION	1.4914769692067116E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998887213809	WITHOUT_CLASSIFICATION	1.1127861905202566E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999910137586173	WITHOUT_CLASSIFICATION	8.986241382671265E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999910137586173	WITHOUT_CLASSIFICATION	8.986241382671265E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999906669748	WITHOUT_CLASSIFICATION	9.333025192644219E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999910137586173	WITHOUT_CLASSIFICATION	8.986241382671265E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999910137586173	WITHOUT_CLASSIFICATION	8.986241382671265E-6	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999982951789104	WITHOUT_CLASSIFICATION	1.704821089634865E-6	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999994169435282	WITHOUT_CLASSIFICATION	5.830564717920599E-7	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997857274118	WITHOUT_CLASSIFICATION	2.1427258828744449E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998155717086	WITHOUT_CLASSIFICATION	1.8442829146646407E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999882491643	WITHOUT_CLASSIFICATION	1.1750835867569689E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999985382337035	WITHOUT_CLASSIFICATION	1.4617662963605375E-6	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999993718515655	WITHOUT_CLASSIFICATION	6.281484343672291E-7	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999984720181078	WITHOUT_CLASSIFICATION	1.527981892207796E-6	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999976168799861	WITHOUT_CLASSIFICATION	2.383120013923124E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999727042289277	WITHOUT_CLASSIFICATION	2.7295771072285268E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999985307409898	WITHOUT_CLASSIFICATION	1.4692590101732443E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995300949147	WITHOUT_CLASSIFICATION	4.6990508518096903E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999994803227275	WITHOUT_CLASSIFICATION	5.196772725368843E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999984639696904	WITHOUT_CLASSIFICATION	1.5360303096483844E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999998953032825	WITHOUT_CLASSIFICATION	1.04696717506614E-7	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999530122878881	WITHOUT_CLASSIFICATION	4.698771211177963E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991645036983	WITHOUT_CLASSIFICATION	8.354963017334541E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999981648180875	WITHOUT_CLASSIFICATION	1.835181912602571E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999870283844	WITHOUT_CLASSIFICATION	1.2971615599868756E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999980398072223	WITHOUT_CLASSIFICATION	1.960192777662628E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999978061731528	WITHOUT_CLASSIFICATION	2.193826847078043E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999960754504374	WITHOUT_CLASSIFICATION	3.924549562566762E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991645036983	WITHOUT_CLASSIFICATION	8.354963017334541E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999923607402698	WITHOUT_CLASSIFICATION	7.639259730234195E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999988556314324	WITHOUT_CLASSIFICATION	1.144368567679311E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995792254969	WITHOUT_CLASSIFICATION	4.20774503012297E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993380820452	WITHOUT_CLASSIFICATION	6.61917954805027E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999975370826155	WITHOUT_CLASSIFICATION	2.462917384416595E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999339726091	WITHOUT_CLASSIFICATION	6.602739091615326E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999849947884122	WITHOUT_CLASSIFICATION	1.500521158780919E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999984703093826	WITHOUT_CLASSIFICATION	1.529690617366966E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999980673887321	WITHOUT_CLASSIFICATION	1.9326112678037274E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998931211732	WITHOUT_CLASSIFICATION	1.0687882673176647E-7	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999997779547386	WITHOUT_CLASSIFICATION	2.2204526133257951E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999993167767208	WITHOUT_CLASSIFICATION	6.832232792448084E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999987518234997	WITHOUT_CLASSIFICATION	1.248176500294312E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996881972842	WITHOUT_CLASSIFICATION	3.118027158451139E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999891286226487	WITHOUT_CLASSIFICATION	1.0871377351386256E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998994303089	WITHOUT_CLASSIFICATION	1.0056969117029939E-7	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999975796245584	WITHOUT_CLASSIFICATION	2.4203754416202593E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999975696577218	WITHOUT_CLASSIFICATION	2.4303422781419505E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999989366603512	WITHOUT_CLASSIFICATION	1.0633396487616386E-6	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999957464073672	WITHOUT_CLASSIFICATION	4.253592632832976E-6	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999987294705265	WITHOUT_CLASSIFICATION	1.2705294735477597E-6	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999988989538295	WITHOUT_CLASSIFICATION	1.1010461704603913E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999989025019	WITHOUT_CLASSIFICATION	1.0974981173163267E-9	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999980673887321	WITHOUT_CLASSIFICATION	1.9326112678037274E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999997391287634	WITHOUT_CLASSIFICATION	2.6087123663474533E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999997293488248	WITHOUT_CLASSIFICATION	2.7065117525045216E-7	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998295681081	WITHOUT_CLASSIFICATION	1.7043189199967186E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999968466983197	WITHOUT_CLASSIFICATION	3.153301680456482E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945330227991	WITHOUT_CLASSIFICATION	5.466977200938336E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.999986168416839	WITHOUT_CLASSIFICATION	1.3831583160998051E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999943400607696	WITHOUT_CLASSIFICATION	5.659939230415933E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999993433309382	WITHOUT_CLASSIFICATION	6.566690619101663E-7	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999992839288285	WITHOUT_CLASSIFICATION	7.160711714490788E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999785088265098	WITHOUT_CLASSIFICATION	2.1491173490144615E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996615136761	WITHOUT_CLASSIFICATION	3.38486323738327E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999601763625	WITHOUT_CLASSIFICATION	3.9823637538368046E-8	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999996073206034	WITHOUT_CLASSIFICATION	3.9267939658545835E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999974213344168	WITHOUT_CLASSIFICATION	2.5786655830687636E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999888547174025	WITHOUT_CLASSIFICATION	1.1145282597482417E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999364880888	WITHOUT_CLASSIFICATION	6.351191115036945E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996615136761	WITHOUT_CLASSIFICATION	3.38486323738327E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999973123082577	WITHOUT_CLASSIFICATION	2.6876917422927693E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999996169920079	WITHOUT_CLASSIFICATION	3.8300799213030846E-7	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997343249983	WITHOUT_CLASSIFICATION	2.6567500166809396E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999969699888384	WITHOUT_CLASSIFICATION	3.030011161551503E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999990208597038	WITHOUT_CLASSIFICATION	9.79140296137221E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999599009818	WITHOUT_CLASSIFICATION	4.009901833133507E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999871450134	WITHOUT_CLASSIFICATION	1.285498659007041E-7	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983974834783	WITHOUT_CLASSIFICATION	1.6025165218164796E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995682612626	WITHOUT_CLASSIFICATION	4.317387374410728E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962192900974	WITHOUT_CLASSIFICATION	3.780709902469818E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990381558439	WITHOUT_CLASSIFICATION	9.618441561193289E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991026913511	WITHOUT_CLASSIFICATION	8.973086488884658E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999855573227	WITHOUT_CLASSIFICATION	1.444267730738752E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999855573227	WITHOUT_CLASSIFICATION	1.444267730738752E-7	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999957717427236	WITHOUT_CLASSIFICATION	4.228257276429329E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998360633179	WITHOUT_CLASSIFICATION	1.6393668221490253E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999986767665449	WITHOUT_CLASSIFICATION	1.3232334550867417E-6	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999978736734906	WITHOUT_CLASSIFICATION	2.1263265094963907E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999767907990492	WITHOUT_CLASSIFICATION	2.3209200950772943E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973402395521	WITHOUT_CLASSIFICATION	2.6597604478757987E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641502689302	WITHOUT_CLASSIFICATION	3.584973106990162E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711493376048	WITHOUT_CLASSIFICATION	2.8850662395320435E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999989967045629	WITHOUT_CLASSIFICATION	1.0032954371549575E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849549789929	WITHOUT_CLASSIFICATION	1.5045021007192556E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973402395521	WITHOUT_CLASSIFICATION	2.6597604478757987E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641502689302	WITHOUT_CLASSIFICATION	3.584973106990162E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711493376048	WITHOUT_CLASSIFICATION	2.8850662395320435E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999848814312313	WITHOUT_CLASSIFICATION	1.5118568768717213E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999919253497166	WITHOUT_CLASSIFICATION	8.07465028337433E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998069327377	WITHOUT_CLASSIFICATION	1.9306726236131605E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999995190916624	WITHOUT_CLASSIFICATION	4.809083376059089E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999987809422046	WITHOUT_CLASSIFICATION	1.2190577953780465E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999925379600011	WITHOUT_CLASSIFICATION	7.4620399989950896E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999994270704665	WITHOUT_CLASSIFICATION	5.729295334904551E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999954880489375	WITHOUT_CLASSIFICATION	4.51195106246411E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999504640187603	WITHOUT_CLASSIFICATION	4.95359812397876E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999968004982687	WITHOUT_CLASSIFICATION	3.1995017314196477E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999978388123705	WITHOUT_CLASSIFICATION	2.1611876294578243E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991920850346373	WITHOUT_CLASSIFICATION	8.07914965362839E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999839383593415	WITHOUT_CLASSIFICATION	1.6061640658436435E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999977345254306	WITHOUT_CLASSIFICATION	2.265474569483906E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999842315707	WITHOUT_CLASSIFICATION	1.5768429322341208E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999995911180067	WITHOUT_CLASSIFICATION	4.0888199325683153E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999325353203544	WITHOUT_CLASSIFICATION	6.746467964559619E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999753250041514	WITHOUT_CLASSIFICATION	2.4674995848587615E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999991894902662	WITHOUT_CLASSIFICATION	8.105097337148988E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999961643437628	WITHOUT_CLASSIFICATION	3.835656237100153E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999663545213	WITHOUT_CLASSIFICATION	3.36454787117548E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997910425928	WITHOUT_CLASSIFICATION	2.0895740708243807E-7	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995950504922	WITHOUT_CLASSIFICATION	4.049495078233872E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999717384711	WITHOUT_CLASSIFICATION	2.826152888561453E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999998348824628	WITHOUT_CLASSIFICATION	1.6511753713456656E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999987057961115	WITHOUT_CLASSIFICATION	1.294203888502874E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669151236475	WITHOUT_CLASSIFICATION	3.308487635244074E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999229478260355	WITHOUT_CLASSIFICATION	7.705217396445747E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999996444500355	WITHOUT_CLASSIFICATION	3.5554996438224813E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692665878251	WITHOUT_CLASSIFICATION	3.073341217485118E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998830644808113	WITHOUT_CLASSIFICATION	1.1693551918868883E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999983177654573	WITHOUT_CLASSIFICATION	1.682234542695139E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999983177654573	WITHOUT_CLASSIFICATION	1.682234542695139E-6	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999930077076196	WITHOUT_CLASSIFICATION	6.992292380471209E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999690078653182	WITHOUT_CLASSIFICATION	3.099213468181139E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999995665660364	WITHOUT_CLASSIFICATION	4.3343396359482805E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9995917378849069	WITHOUT_CLASSIFICATION	4.082621150930759E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999984631551743	WITHOUT_CLASSIFICATION	1.536844825790184E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999326740047	WITHOUT_CLASSIFICATION	6.732599532214191E-8	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999779088486822	WITHOUT_CLASSIFICATION	2.209115131777884E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999992799402226	WITHOUT_CLASSIFICATION	7.200597773751119E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999995814180239	WITHOUT_CLASSIFICATION	4.1858197606638647E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990572563993	WITHOUT_CLASSIFICATION	9.427436008580557E-7	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990174949985	WITHOUT_CLASSIFICATION	9.825050014651813E-7	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984893493729	WITHOUT_CLASSIFICATION	1.5106506271326673E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996024482292	WITHOUT_CLASSIFICATION	3.975517708010942E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985590210475	WITHOUT_CLASSIFICATION	1.440978952531552E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943033081005	WITHOUT_CLASSIFICATION	5.696691899512098E-6	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991337563809	WITHOUT_CLASSIFICATION	8.662436190234515E-7	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991359853638	WITHOUT_CLASSIFICATION	8.640146360682745E-7	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988760602899	WITHOUT_CLASSIFICATION	1.1239397099925743E-6	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954587383756	WITHOUT_CLASSIFICATION	4.54126162442587E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948002961592	WITHOUT_CLASSIFICATION	5.1997038407841E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999569906914	WITHOUT_CLASSIFICATION	4.300930862906262E-8	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999713055849294	WITHOUT_CLASSIFICATION	2.8694415070608926E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999737205739521	WITHOUT_CLASSIFICATION	2.627942604789934E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999730561308	WITHOUT_CLASSIFICATION	2.6943869243948984E-8	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999324905471	WITHOUT_CLASSIFICATION	6.75094529448148E-8	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999997667611777	WITHOUT_CLASSIFICATION	2.3323882225642142E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999990538583116	WITHOUT_CLASSIFICATION	9.461416884111625E-7	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999679822116	WITHOUT_CLASSIFICATION	3.2017788398649136E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999737205739521	WITHOUT_CLASSIFICATION	2.627942604789934E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999737205739521	WITHOUT_CLASSIFICATION	2.627942604789934E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999938520114561	WITHOUT_CLASSIFICATION	6.147988543928048E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999993090821114	WITHOUT_CLASSIFICATION	6.909178884912684E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999689000334389	WITHOUT_CLASSIFICATION	3.109996656114978E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.99999728966349	WITHOUT_CLASSIFICATION	2.7103365100830785E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999954287919904	WITHOUT_CLASSIFICATION	4.571208009503466E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999961643437628	WITHOUT_CLASSIFICATION	3.835656237100153E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999966389518798	WITHOUT_CLASSIFICATION	3.3610481201936577E-6	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998424185866	WITHOUT_CLASSIFICATION	1.5758141346272325E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999989543057084	WITHOUT_CLASSIFICATION	1.0456942915766748E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914559274591	WITHOUT_CLASSIFICATION	8.544072540958332E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999999382157992	WITHOUT_CLASSIFICATION	6.178420080583457E-7	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908856311612	WITHOUT_CLASSIFICATION	9.11436883870202E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999989095549886	WITHOUT_CLASSIFICATION	1.0904450114529446E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999989095549886	WITHOUT_CLASSIFICATION	1.0904450114529446E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999981047353896	WITHOUT_CLASSIFICATION	1.89526461034411E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999981047353896	WITHOUT_CLASSIFICATION	1.89526461034411E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960168968064	WITHOUT_CLASSIFICATION	3.983103193653411E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928356796368	WITHOUT_CLASSIFICATION	7.164320363225426E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999987751690158	WITHOUT_CLASSIFICATION	1.2248309841233266E-6	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205744102622	WITHOUT_CLASSIFICATION	7.942558973788469E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999997527402229	WITHOUT_CLASSIFICATION	2.472597770975389E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999997657064307	WITHOUT_CLASSIFICATION	2.3429356936015904E-7	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999509720951	WITHOUT_CLASSIFICATION	4.902790490010525E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995968382686	WITHOUT_CLASSIFICATION	4.031617313681436E-7	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999271878134	WITHOUT_CLASSIFICATION	7.281218659281412E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999200044697485	WITHOUT_CLASSIFICATION	7.999553025151514E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985907156453	WITHOUT_CLASSIFICATION	1.409284354646814E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999993399649934	WITHOUT_CLASSIFICATION	6.600350067280701E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998961548403	WITHOUT_CLASSIFICATION	1.038451596669049E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997853200016	WITHOUT_CLASSIFICATION	2.146799984914263E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999985618382826	WITHOUT_CLASSIFICATION	1.4381617173843905E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999985618382826	WITHOUT_CLASSIFICATION	1.4381617173843905E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999985618382826	WITHOUT_CLASSIFICATION	1.4381617173843905E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999999517820979	WITHOUT_CLASSIFICATION	4.82179020970194E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999970422024045	WITHOUT_CLASSIFICATION	2.957797595461233E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999436743566	WITHOUT_CLASSIFICATION	5.6325643400310464E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999455920737194	WITHOUT_CLASSIFICATION	5.440792628056633E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921900564838	WITHOUT_CLASSIFICATION	7.809943516216338E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747115066949	WITHOUT_CLASSIFICATION	2.5288493305145873E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999088508875	WITHOUT_CLASSIFICATION	9.114911244491855E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387368233	WITHOUT_CLASSIFICATION	5.612631767495398E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999917176544	WITHOUT_CLASSIFICATION	8.282345620723101E-9	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.99999997511331	WITHOUT_CLASSIFICATION	2.4886690107319945E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999972353572	WITHOUT_CLASSIFICATION	2.7646429060633048E-9	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997485058392	WITHOUT_CLASSIFICATION	2.514941607701721E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982831343762	WITHOUT_CLASSIFICATION	1.7168656237015442E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999546253932	WITHOUT_CLASSIFICATION	4.537460689113419E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999987068434865	WITHOUT_CLASSIFICATION	1.2931565134781955E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999266687329	WITHOUT_CLASSIFICATION	7.333126701475596E-8	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999106629557	WITHOUT_CLASSIFICATION	8.933704428445263E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999984415187648	WITHOUT_CLASSIFICATION	1.5584812351633226E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999980072575784	WITHOUT_CLASSIFICATION	1.992742421637416E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999999941483029	WITHOUT_CLASSIFICATION	5.851697116327569E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999964950274	WITHOUT_CLASSIFICATION	3.504972603400351E-8	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999990078606853	WITHOUT_CLASSIFICATION	9.921393147238562E-7	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998996266981	WITHOUT_CLASSIFICATION	1.0037330183927235E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999960979758562	WITHOUT_CLASSIFICATION	3.90202414382461E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999992906878619	WITHOUT_CLASSIFICATION	7.093121381881635E-7	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998381967272	WITHOUT_CLASSIFICATION	1.618032726794357E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999992825167286	WITHOUT_CLASSIFICATION	7.174832713014006E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999979533015703	WITHOUT_CLASSIFICATION	2.0466984298001784E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997556688265	WITHOUT_CLASSIFICATION	2.4433117352136205E-7	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999971379698936	WITHOUT_CLASSIFICATION	2.8620301064073263E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999037356143	WITHOUT_CLASSIFICATION	9.626438562012816E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999348978269	WITHOUT_CLASSIFICATION	6.510217315178348E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999986075595761	WITHOUT_CLASSIFICATION	1.3924404238379388E-6	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999763604766	WITHOUT_CLASSIFICATION	2.363952350841272E-8	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.999966245025858	WITHOUT_CLASSIFICATION	3.375497414201806E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999995849498509	WITHOUT_CLASSIFICATION	4.150501491508516E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999958399383	WITHOUT_CLASSIFICATION	4.160061811955132E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999995471222538	WITHOUT_CLASSIFICATION	4.528777462120474E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998611688562	WITHOUT_CLASSIFICATION	1.388311438860317E-7	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998420743723	WITHOUT_CLASSIFICATION	1.5792562778524862E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999810620285	WITHOUT_CLASSIFICATION	1.893797154062349E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999996736248985	WITHOUT_CLASSIFICATION	3.2637510154907646E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999995544717005	WITHOUT_CLASSIFICATION	4.455282994205108E-7	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999382523524	WITHOUT_CLASSIFICATION	6.174764752562895E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999993212909478	WITHOUT_CLASSIFICATION	6.787090521285794E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999996370217196	WITHOUT_CLASSIFICATION	3.629782805025353E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999996878728813	WITHOUT_CLASSIFICATION	3.121271187014759E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.999994765004663	WITHOUT_CLASSIFICATION	5.234995337061851E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999981723314527	WITHOUT_CLASSIFICATION	1.8276685472109532E-6	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998897115463341	WITHOUT_CLASSIFICATION	1.1028845366588208E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999395145655	WITHOUT_CLASSIFICATION	6.048543456887225E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999653596749575	WITHOUT_CLASSIFICATION	3.464032504258257E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999984504142047	WITHOUT_CLASSIFICATION	1.5495857953747077E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999935337818079	WITHOUT_CLASSIFICATION	6.466218192115657E-6	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995980989154	WITHOUT_CLASSIFICATION	4.0190108458301387E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999938600666404	WITHOUT_CLASSIFICATION	6.1399333595704325E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998605776096531	WITHOUT_CLASSIFICATION	1.3942239034685352E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999994173836603	WITHOUT_CLASSIFICATION	5.826163397864032E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999990046733634	WITHOUT_CLASSIFICATION	9.953266364853404E-7	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999794705609549	WITHOUT_CLASSIFICATION	2.0529439045054737E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999997844454358	WITHOUT_CLASSIFICATION	2.1555456417352995E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999825270192	WITHOUT_CLASSIFICATION	1.747298089947739E-8	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999973160492817	WITHOUT_CLASSIFICATION	2.6839507183823712E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999991029501852	WITHOUT_CLASSIFICATION	8.970498147337298E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997826148368	WITHOUT_CLASSIFICATION	2.1738516319317343E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999958425443	WITHOUT_CLASSIFICATION	4.157455759388809E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999989819767	WITHOUT_CLASSIFICATION	1.0180233409381109E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998890169502	WITHOUT_CLASSIFICATION	1.109830496878906E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518555502933	WITHOUT_CLASSIFICATION	4.814444970670775E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518555502933	WITHOUT_CLASSIFICATION	4.814444970670775E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999988918797511	WITHOUT_CLASSIFICATION	1.1081202488694878E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999974975890566	WITHOUT_CLASSIFICATION	2.5024109433841874E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999993167238808	WITHOUT_CLASSIFICATION	6.832761192566941E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999999784813603	WITHOUT_CLASSIFICATION	2.1518639712770228E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999714726611	WITHOUT_CLASSIFICATION	2.852733895632865E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999930959742698	WITHOUT_CLASSIFICATION	6.904025730228005E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999908375269	WITHOUT_CLASSIFICATION	9.162473097534302E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999996847407585	WITHOUT_CLASSIFICATION	3.152592415781693E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999989132309538	WITHOUT_CLASSIFICATION	1.0867690462177788E-6	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999980648171215	WITHOUT_CLASSIFICATION	1.9351828785473743E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999732916104	WITHOUT_CLASSIFICATION	2.6708389616183248E-8	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999657371879	WITHOUT_CLASSIFICATION	3.4262812203872896E-8	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999993931420521	WITHOUT_CLASSIFICATION	6.068579480040256E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999981994042	WITHOUT_CLASSIFICATION	1.800595790107577E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999999534424203	WITHOUT_CLASSIFICATION	4.655757970826221E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999844495832805	WITHOUT_CLASSIFICATION	1.5550416719511612E-5	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998489620953	WITHOUT_CLASSIFICATION	1.510379046248248E-7	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999973494018634	WITHOUT_CLASSIFICATION	2.650598136674324E-6	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994742236585	WITHOUT_CLASSIFICATION	5.257763413920306E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999932805989431	WITHOUT_CLASSIFICATION	6.719401056789828E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999989747359802	WITHOUT_CLASSIFICATION	1.0252640197968136E-6	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999998966810141	WITHOUT_CLASSIFICATION	1.0331898587989298E-7	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999874796731594	WITHOUT_CLASSIFICATION	1.252032684067543E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999979811799828	WITHOUT_CLASSIFICATION	2.0188200171087003E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999884428648	WITHOUT_CLASSIFICATION	1.1557135282821033E-8	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999993680605074	WITHOUT_CLASSIFICATION	6.319394926746518E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999999891927427	WITHOUT_CLASSIFICATION	1.080725729309342E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999995851258527	WITHOUT_CLASSIFICATION	4.14874147295863E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999967668738781	WITHOUT_CLASSIFICATION	3.2331261218882604E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999997795516457	WITHOUT_CLASSIFICATION	2.2044835441237704E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999981408876896	WITHOUT_CLASSIFICATION	1.8591123104609855E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998261562354	WITHOUT_CLASSIFICATION	1.7384376460444872E-7	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999998745739547	WITHOUT_CLASSIFICATION	1.2542604534432213E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999983482717917	WITHOUT_CLASSIFICATION	1.6517282083091823E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999992653234466	WITHOUT_CLASSIFICATION	7.346765533643556E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999992653234466	WITHOUT_CLASSIFICATION	7.346765533643556E-7	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999994813422323	WITHOUT_CLASSIFICATION	5.186577676286558E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.999996882186352	WITHOUT_CLASSIFICATION	3.117813648059798E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999996047230194	WITHOUT_CLASSIFICATION	3.9527698056735673E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999966167502327	WITHOUT_CLASSIFICATION	3.3832497674645974E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999998269348283	WITHOUT_CLASSIFICATION	1.730651718373056E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999990000941894	WITHOUT_CLASSIFICATION	9.999058105843706E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999982584231797	WITHOUT_CLASSIFICATION	1.7415768202722086E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999999322849845	WITHOUT_CLASSIFICATION	6.771501540378265E-8	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999996757310688	WITHOUT_CLASSIFICATION	3.242689311702127E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998086270174095	WITHOUT_CLASSIFICATION	1.9137298259052913E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996767954181	WITHOUT_CLASSIFICATION	3.232045818446267E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999429998654	WITHOUT_CLASSIFICATION	5.7000134656869244E-8	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999912577021995	WITHOUT_CLASSIFICATION	8.742297800448518E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999940210278833	WITHOUT_CLASSIFICATION	5.978972116733066E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999994139988186	WITHOUT_CLASSIFICATION	5.860011814014076E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999928295874658	WITHOUT_CLASSIFICATION	7.170412534107551E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999670444601357	WITHOUT_CLASSIFICATION	3.2955539864275306E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999670444601357	WITHOUT_CLASSIFICATION	3.2955539864275306E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999992884968	WITHOUT_CLASSIFICATION	7.115031965297413E-9	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999983534464337	WITHOUT_CLASSIFICATION	1.646553566275663E-6	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999984682360198	WITHOUT_CLASSIFICATION	1.5317639801533914E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998422681847	WITHOUT_CLASSIFICATION	1.577318153351201E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999785193136	WITHOUT_CLASSIFICATION	2.1480686391429158E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999404442369761	WITHOUT_CLASSIFICATION	5.95557630238122E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999245482065	WITHOUT_CLASSIFICATION	7.545179340960231E-8	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999995528904471	WITHOUT_CLASSIFICATION	4.4710955298558806E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998340214091	WITHOUT_CLASSIFICATION	1.6597859089002718E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999960713947353	WITHOUT_CLASSIFICATION	3.928605264663404E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999960713947353	WITHOUT_CLASSIFICATION	3.928605264663404E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999999094144273	WITHOUT_CLASSIFICATION	9.058557270830869E-7	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999902239958	WITHOUT_CLASSIFICATION	9.776004132784763E-9	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999639174849	WITHOUT_CLASSIFICATION	3.608251512409398E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999704765801012	WITHOUT_CLASSIFICATION	2.9523419898811544E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999999597193159	WITHOUT_CLASSIFICATION	4.028068409353967E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999787422829	WITHOUT_CLASSIFICATION	2.1257717152888074E-8	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999979456784318	WITHOUT_CLASSIFICATION	2.054321568132545E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999988674948497	WITHOUT_CLASSIFICATION	1.1325051503027242E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999781935737	WITHOUT_CLASSIFICATION	2.1806426444911808E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997169055311	WITHOUT_CLASSIFICATION	2.8309446885647057E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994972630618	WITHOUT_CLASSIFICATION	5.027369382028773E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999888562672908	WITHOUT_CLASSIFICATION	1.1143732709122174E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999993718023538	WITHOUT_CLASSIFICATION	6.281976462401815E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998942224091788	WITHOUT_CLASSIFICATION	1.0577759082112155E-4	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999918032363964	WITHOUT_CLASSIFICATION	8.196763603728315E-6	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999695503314663	WITHOUT_CLASSIFICATION	3.0449668533791497E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999980877267844	WITHOUT_CLASSIFICATION	1.9122732155643813E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999257298438	WITHOUT_CLASSIFICATION	7.427015633388783E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.99999954401734	WITHOUT_CLASSIFICATION	4.559826599352769E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.999999585814853	WITHOUT_CLASSIFICATION	4.1418514696514783E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999940605890014	WITHOUT_CLASSIFICATION	5.939410998616737E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999994155685017	WITHOUT_CLASSIFICATION	5.844314983568597E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999982275082399	WITHOUT_CLASSIFICATION	1.7724917602443831E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999806201709232	WITHOUT_CLASSIFICATION	1.937982907676892E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999983023273364	WITHOUT_CLASSIFICATION	1.6976726635124802E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999990359264397	WITHOUT_CLASSIFICATION	9.64073560385117E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999995679536168	WITHOUT_CLASSIFICATION	4.320463832270473E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999999522234053	WITHOUT_CLASSIFICATION	4.777659470729775E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999690330749369	WITHOUT_CLASSIFICATION	3.09669250630714E-5	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998219345025	WITHOUT_CLASSIFICATION	1.7806549744065727E-7	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999999979253679	WITHOUT_CLASSIFICATION	2.0746321011670833E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999399672642	WITHOUT_CLASSIFICATION	6.00327357814841E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999911790093154	WITHOUT_CLASSIFICATION	8.820990684447587E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999985788757783	WITHOUT_CLASSIFICATION	1.4211242218063782E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999998319810746	WITHOUT_CLASSIFICATION	1.680189254024261E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999993517728575	WITHOUT_CLASSIFICATION	6.482271424530941E-7	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999961543106085	WITHOUT_CLASSIFICATION	3.845689391488E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999987616241721	WITHOUT_CLASSIFICATION	1.2383758278988477E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999982132082194	WITHOUT_CLASSIFICATION	1.7867917806773551E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999982132082194	WITHOUT_CLASSIFICATION	1.7867917806773551E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999980438980564	WITHOUT_CLASSIFICATION	1.956101943625628E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997064884889	WITHOUT_CLASSIFICATION	2.9351151115068135E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999996514697391	WITHOUT_CLASSIFICATION	3.485302609806605E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999972722723394	WITHOUT_CLASSIFICATION	2.727727660672421E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999996037753524	WITHOUT_CLASSIFICATION	3.962246476636917E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999843037052	WITHOUT_CLASSIFICATION	1.5696294819083313E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999957988531	WITHOUT_CLASSIFICATION	4.2011468994697544E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999997993270046	WITHOUT_CLASSIFICATION	2.0067299552489715E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999980438980564	WITHOUT_CLASSIFICATION	1.956101943625628E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997064884889	WITHOUT_CLASSIFICATION	2.9351151115068135E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999987083447756	WITHOUT_CLASSIFICATION	1.2916552243964333E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999994855521264	WITHOUT_CLASSIFICATION	5.144478737177325E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999994261764692	WITHOUT_CLASSIFICATION	5.738235306922232E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999977059060752	WITHOUT_CLASSIFICATION	2.294093924862955E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999966453944	WITHOUT_CLASSIFICATION	3.3546056075055074E-9	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999991104829165	WITHOUT_CLASSIFICATION	8.895170835980315E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999639303419	WITHOUT_CLASSIFICATION	3.606965807937621E-8	TEST
}	WITHOUT_CLASSIFICATION	0.9996076542858836	WITHOUT_CLASSIFICATION	3.923457141164006E-4	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999997988422981	WITHOUT_CLASSIFICATION	2.0115770188798435E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999860437389264	WITHOUT_CLASSIFICATION	1.3956261073479175E-5	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999990431366325	WITHOUT_CLASSIFICATION	9.56863367625969E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999860437389264	WITHOUT_CLASSIFICATION	1.3956261073479175E-5	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999900641062182	WITHOUT_CLASSIFICATION	9.935893781791078E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999986768503405	WITHOUT_CLASSIFICATION	1.3231496594972106E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999592950119368	WITHOUT_CLASSIFICATION	4.0704988063250645E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976617680613	WITHOUT_CLASSIFICATION	2.338231938665804E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999972055452271	WITHOUT_CLASSIFICATION	2.794454772867757E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9996076542858836	WITHOUT_CLASSIFICATION	3.923457141164006E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9996076542858836	WITHOUT_CLASSIFICATION	3.923457141164006E-4	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999966433445645	WITHOUT_CLASSIFICATION	3.3566554354667E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999555751785	WITHOUT_CLASSIFICATION	4.442482149490043E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999981699435198	WITHOUT_CLASSIFICATION	1.8300564802397412E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997923562322	WITHOUT_CLASSIFICATION	2.0764376783512348E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998403203072	WITHOUT_CLASSIFICATION	1.596796927904314E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999993889484431	WITHOUT_CLASSIFICATION	6.110515569502936E-7	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999545995386974	WITHOUT_CLASSIFICATION	4.540046130268813E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999985999455149	WITHOUT_CLASSIFICATION	1.4000544851168487E-6	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997092924595	WITHOUT_CLASSIFICATION	2.9070754043678367E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9997033188919596	WITHOUT_CLASSIFICATION	2.966811080403474E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.9999891348578817	WITHOUT_CLASSIFICATION	1.0865142118284907E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999972435859271	WITHOUT_CLASSIFICATION	2.756414072805238E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999993550810189	WITHOUT_CLASSIFICATION	6.449189812144649E-7	TEST
types	WITHOUT_CLASSIFICATION	0.9999669872763403	WITHOUT_CLASSIFICATION	3.301272365963526E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999982444017544	WITHOUT_CLASSIFICATION	1.7555982455725005E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998094460122	WITHOUT_CLASSIFICATION	1.9055398770940543E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999905717784	WITHOUT_CLASSIFICATION	9.428221574671417E-9	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999994103341153	WITHOUT_CLASSIFICATION	5.896658847074257E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997293804613	WITHOUT_CLASSIFICATION	2.706195387076831E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998884809707	WITHOUT_CLASSIFICATION	1.1151902942972963E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9998196797957357	WITHOUT_CLASSIFICATION	1.8032020426430657E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999411861792	WITHOUT_CLASSIFICATION	5.8813820854152605E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999749531683656	WITHOUT_CLASSIFICATION	2.5046831634355416E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994932091535	WITHOUT_CLASSIFICATION	5.067908465184787E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998446863236	WITHOUT_CLASSIFICATION	1.5531367646479226E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998610169291	WITHOUT_CLASSIFICATION	1.3898307089132929E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999517609985893	WITHOUT_CLASSIFICATION	4.823900141062729E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999909570536	WITHOUT_CLASSIFICATION	9.04294629374825E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999996842030565	WITHOUT_CLASSIFICATION	3.157969434979161E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999969763375574	WITHOUT_CLASSIFICATION	3.023662442536468E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999956387183596	WITHOUT_CLASSIFICATION	4.361281640381189E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999907648903471	WITHOUT_CLASSIFICATION	9.235109652854739E-6	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999969732701973	WITHOUT_CLASSIFICATION	3.0267298027286098E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999985999455149	WITHOUT_CLASSIFICATION	1.4000544851168487E-6	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999995045477724	WITHOUT_CLASSIFICATION	4.954522275447688E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999594440983084	WITHOUT_CLASSIFICATION	4.055590169171587E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9975615281329312	WITHOUT_CLASSIFICATION	0.002438471867068794	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999110270830679	WITHOUT_CLASSIFICATION	8.897291693213728E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999997176498777	WITHOUT_CLASSIFICATION	2.823501222649368E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999988471586297	WITHOUT_CLASSIFICATION	1.1528413702179608E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997923562322	WITHOUT_CLASSIFICATION	2.0764376783512348E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997923562322	WITHOUT_CLASSIFICATION	2.0764376783512348E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998133531955	WITHOUT_CLASSIFICATION	1.8664680457144857E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999956230955132	WITHOUT_CLASSIFICATION	4.376904486883841E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999989077373019	WITHOUT_CLASSIFICATION	1.092262698007371E-6	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999234998429	WITHOUT_CLASSIFICATION	7.650015716430076E-8	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999852090034	WITHOUT_CLASSIFICATION	1.4790996598675554E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999996220949727	WITHOUT_CLASSIFICATION	3.779050272795849E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999977718780921	WITHOUT_CLASSIFICATION	2.2281219079052142E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999286906368	WITHOUT_CLASSIFICATION	7.130936316837216E-8	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999618208582	WITHOUT_CLASSIFICATION	3.817914187917429E-8	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999998949516086	WITHOUT_CLASSIFICATION	1.0504839149050686E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998862284022	WITHOUT_CLASSIFICATION	1.1377159781379301E-7	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999977883410343	WITHOUT_CLASSIFICATION	2.2116589657768385E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999718538672736	WITHOUT_CLASSIFICATION	2.814613272639864E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999980438980564	WITHOUT_CLASSIFICATION	1.956101943625628E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998862284022	WITHOUT_CLASSIFICATION	1.1377159781379301E-7	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962663644806	WITHOUT_CLASSIFICATION	3.7336355192939216E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999994151011375	WITHOUT_CLASSIFICATION	5.848988624977357E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999998485313311	WITHOUT_CLASSIFICATION	1.5146866902043804E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9986404404285528	WITHOUT_CLASSIFICATION	0.001359559571447164	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999718538672736	WITHOUT_CLASSIFICATION	2.814613272639864E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999983420348785	WITHOUT_CLASSIFICATION	1.657965121509346E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999445381945	WITHOUT_CLASSIFICATION	5.5461805413647704E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999104746354	WITHOUT_CLASSIFICATION	8.952536459654307E-8	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999638308125	WITHOUT_CLASSIFICATION	3.616918749438296E-8	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9997377458408315	WITHOUT_CLASSIFICATION	2.622541591684292E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999997154125018	WITHOUT_CLASSIFICATION	2.8458749819816137E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999995432014047	WITHOUT_CLASSIFICATION	4.567985952344622E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999197740789467	WITHOUT_CLASSIFICATION	8.022592105324699E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999995675958109	WITHOUT_CLASSIFICATION	4.324041891566952E-7	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998839346391	WITHOUT_CLASSIFICATION	1.1606536086617275E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999997882836664	WITHOUT_CLASSIFICATION	2.117163337080806E-7	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999999828480068	WITHOUT_CLASSIFICATION	1.715199321084559E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998862284022	WITHOUT_CLASSIFICATION	1.1377159781379301E-7	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999983420348785	WITHOUT_CLASSIFICATION	1.657965121509346E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999104746354	WITHOUT_CLASSIFICATION	8.952536459654307E-8	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998957334123	WITHOUT_CLASSIFICATION	1.0426658775345563E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999975967266754	WITHOUT_CLASSIFICATION	2.403273324568613E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999995120565958	WITHOUT_CLASSIFICATION	4.879434042249498E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999718538672736	WITHOUT_CLASSIFICATION	2.814613272639864E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999984063991916	WITHOUT_CLASSIFICATION	1.5936008084401313E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999196419370845	WITHOUT_CLASSIFICATION	8.035806291546977E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996544300485409	WITHOUT_CLASSIFICATION	3.455699514590615E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999210335144807	WITHOUT_CLASSIFICATION	7.896648551926099E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999197740789467	WITHOUT_CLASSIFICATION	8.022592105324699E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962663644806	WITHOUT_CLASSIFICATION	3.7336355192939216E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9998502418250167	WITHOUT_CLASSIFICATION	1.4975817498321997E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999998645048658	WITHOUT_CLASSIFICATION	1.3549513419540288E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999976313404286	WITHOUT_CLASSIFICATION	2.3686595712554057E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999987478649798	WITHOUT_CLASSIFICATION	1.2521350202153992E-6	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999985342608799	WITHOUT_CLASSIFICATION	1.465739119968618E-6	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999990744664942	WITHOUT_CLASSIFICATION	9.255335057914036E-7	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999965341217453	WITHOUT_CLASSIFICATION	3.465878254674702E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976617680613	WITHOUT_CLASSIFICATION	2.338231938665804E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998947075336	WITHOUT_CLASSIFICATION	1.0529246642567274E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996687865895	WITHOUT_CLASSIFICATION	3.3121341043694914E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998757891844432	WITHOUT_CLASSIFICATION	1.242108155568447E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999986662926429	WITHOUT_CLASSIFICATION	1.333707357074683E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997901028442	WITHOUT_CLASSIFICATION	2.098971556359979E-7	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999837431448	WITHOUT_CLASSIFICATION	1.6256855228927053E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999932688868436	WITHOUT_CLASSIFICATION	6.7311131564367485E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998352923376	WITHOUT_CLASSIFICATION	1.6470766238207953E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999210335144807	WITHOUT_CLASSIFICATION	7.896648551926099E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998114853082601	WITHOUT_CLASSIFICATION	1.8851469173990763E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9998966633119507	WITHOUT_CLASSIFICATION	1.0333668804931903E-4	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999670601252987	WITHOUT_CLASSIFICATION	3.2939874701316245E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999539735254542	WITHOUT_CLASSIFICATION	4.60264745458654E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999946389781854	WITHOUT_CLASSIFICATION	5.36102181460979E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999499788115	WITHOUT_CLASSIFICATION	5.002118839109903E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999998103996942	WITHOUT_CLASSIFICATION	1.8960030570517555E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999960934201709	WITHOUT_CLASSIFICATION	3.906579829046585E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999997870405914	WITHOUT_CLASSIFICATION	2.129594085457698E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998999985856907	WITHOUT_CLASSIFICATION	1.0000141430928234E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999983063006038	WITHOUT_CLASSIFICATION	1.6936993961909669E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999956835105822	WITHOUT_CLASSIFICATION	4.316489417707699E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999982872626348	WITHOUT_CLASSIFICATION	1.7127373652030777E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999980058120326	WITHOUT_CLASSIFICATION	1.994187967365621E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999997250811011	WITHOUT_CLASSIFICATION	2.749188988444316E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999991184159712	WITHOUT_CLASSIFICATION	8.815840287182218E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999839737918	WITHOUT_CLASSIFICATION	1.60262082525499E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999937425239	WITHOUT_CLASSIFICATION	6.257476110545862E-8	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999964478638973	WITHOUT_CLASSIFICATION	3.5521361027540115E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.99999943279153	WITHOUT_CLASSIFICATION	5.672084699853746E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9998874606023378	WITHOUT_CLASSIFICATION	1.125393976621903E-4	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999947824952623	WITHOUT_CLASSIFICATION	5.217504737649803E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999986090022088	WITHOUT_CLASSIFICATION	1.3909977910823075E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999534066429	WITHOUT_CLASSIFICATION	4.659335709794157E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999998557683063	WITHOUT_CLASSIFICATION	1.4423169370845066E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998853509427973	WITHOUT_CLASSIFICATION	1.1464905720268372E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999997446005723	WITHOUT_CLASSIFICATION	2.5539942769829703E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999974648944107	WITHOUT_CLASSIFICATION	2.5351055893892264E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999986105458083	WITHOUT_CLASSIFICATION	1.3894541916784598E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9998989600768373	WITHOUT_CLASSIFICATION	1.0103992316270594E-4	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998578722564	WITHOUT_CLASSIFICATION	1.4212774369579514E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999931482861686	WITHOUT_CLASSIFICATION	6.8517138314065604E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997098315959	WITHOUT_CLASSIFICATION	2.901684040560562E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999929639997075	WITHOUT_CLASSIFICATION	7.036000292496624E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999998112299838	WITHOUT_CLASSIFICATION	1.887700162021775E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999989401108185	WITHOUT_CLASSIFICATION	1.059889181553657E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997137986893	WITHOUT_CLASSIFICATION	2.8620131061620826E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999999595115571	WITHOUT_CLASSIFICATION	4.0488442890640713E-7	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999989401108185	WITHOUT_CLASSIFICATION	1.059889181553657E-6	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999998112299838	WITHOUT_CLASSIFICATION	1.887700162021775E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997137986893	WITHOUT_CLASSIFICATION	2.8620131061620826E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999991020880326	WITHOUT_CLASSIFICATION	8.979119673655998E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999990510091235	WITHOUT_CLASSIFICATION	9.489908765098823E-7	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999984757178121	WITHOUT_CLASSIFICATION	1.5242821879639777E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999985296014928	WITHOUT_CLASSIFICATION	1.4703985071778745E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999970311129	WITHOUT_CLASSIFICATION	2.968887051599522E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998067263943399	WITHOUT_CLASSIFICATION	1.9327360566011688E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999995000449873	WITHOUT_CLASSIFICATION	4.999550127444925E-7	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999985432428551	WITHOUT_CLASSIFICATION	1.4567571448978434E-6	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999860296596	WITHOUT_CLASSIFICATION	1.3970340513468568E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999995895580873	WITHOUT_CLASSIFICATION	4.1044191258197057E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999977729529811	WITHOUT_CLASSIFICATION	2.227047018891488E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999997944825508	WITHOUT_CLASSIFICATION	2.0551744921964823E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999998868501404	WITHOUT_CLASSIFICATION	1.131498596051182E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999985296014928	WITHOUT_CLASSIFICATION	1.4703985071778745E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997476412309	WITHOUT_CLASSIFICATION	2.523587691800751E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997983748798	WITHOUT_CLASSIFICATION	2.0162512026016224E-7	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999133177674	WITHOUT_CLASSIFICATION	8.668223263893206E-8	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999212123201	WITHOUT_CLASSIFICATION	7.878767992565859E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999998521007677	WITHOUT_CLASSIFICATION	1.4789923236002862E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999994103337801	WITHOUT_CLASSIFICATION	5.896662198246043E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999968223080968	WITHOUT_CLASSIFICATION	3.1776919033030354E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999948425489	WITHOUT_CLASSIFICATION	5.1574511421029615E-9	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999995108428924	WITHOUT_CLASSIFICATION	4.8915710759102E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999996352034376	WITHOUT_CLASSIFICATION	3.647965623567449E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999982891365492	WITHOUT_CLASSIFICATION	1.7108634508089925E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999982891365492	WITHOUT_CLASSIFICATION	1.7108634508089925E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999773877917	WITHOUT_CLASSIFICATION	2.261220841281925E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999773877917	WITHOUT_CLASSIFICATION	2.261220841281925E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999971193996908	WITHOUT_CLASSIFICATION	2.880600309132837E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999133177674	WITHOUT_CLASSIFICATION	8.668223263893206E-8	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999983058601818	WITHOUT_CLASSIFICATION	1.69413981823334E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999890161884	WITHOUT_CLASSIFICATION	1.0983811565207604E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996804587618	WITHOUT_CLASSIFICATION	3.195412381905209E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996804587618	WITHOUT_CLASSIFICATION	3.195412381905209E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998946704535	WITHOUT_CLASSIFICATION	1.0532954650009868E-7	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996393854661	WITHOUT_CLASSIFICATION	3.6061453383198935E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999945896523	WITHOUT_CLASSIFICATION	5.4103477353094E-9	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999988242600419	WITHOUT_CLASSIFICATION	1.1757399580085634E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998895137361	WITHOUT_CLASSIFICATION	1.1048626388729315E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999197411739	WITHOUT_CLASSIFICATION	8.025882614204322E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999927657114528	WITHOUT_CLASSIFICATION	7.2342885472436494E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999988744338676	WITHOUT_CLASSIFICATION	1.1255661324231125E-6	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999997136878096	WITHOUT_CLASSIFICATION	2.863121904644878E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998608619967	WITHOUT_CLASSIFICATION	1.391380032686413E-7	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999999354693326	WITHOUT_CLASSIFICATION	6.453066741245803E-8	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999991896674763	WITHOUT_CLASSIFICATION	8.103325238507545E-7	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998393820546	WITHOUT_CLASSIFICATION	1.6061794547896635E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999994802505472	WITHOUT_CLASSIFICATION	5.197494528209853E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999998686736659	WITHOUT_CLASSIFICATION	1.3132633410310805E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999981218630954	WITHOUT_CLASSIFICATION	1.8781369045853374E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914015928143	WITHOUT_CLASSIFICATION	8.598407185780622E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999548538689	WITHOUT_CLASSIFICATION	4.5146131107700184E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999964740235	WITHOUT_CLASSIFICATION	3.5259763795487025E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999727051715	WITHOUT_CLASSIFICATION	2.7294828503741008E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999928323249	WITHOUT_CLASSIFICATION	7.167675162129594E-9	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999913749641111	WITHOUT_CLASSIFICATION	8.625035888855968E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999999978039225	WITHOUT_CLASSIFICATION	2.196077495090455E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999857023467	WITHOUT_CLASSIFICATION	1.4297653284848515E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9995917378849069	WITHOUT_CLASSIFICATION	4.082621150930759E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999979318968067	WITHOUT_CLASSIFICATION	2.0681031932888143E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999956835105822	WITHOUT_CLASSIFICATION	4.316489417707699E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997460908668	WITHOUT_CLASSIFICATION	2.5390913311673475E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997374920168	WITHOUT_CLASSIFICATION	2.625079832248732E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810025643454	WITHOUT_CLASSIFICATION	1.8997435654603604E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972614194799	WITHOUT_CLASSIFICATION	2.738580520118252E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999985858428218	WITHOUT_CLASSIFICATION	1.4141571783045198E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999985858428218	WITHOUT_CLASSIFICATION	1.4141571783045198E-6	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999980258042476	WITHOUT_CLASSIFICATION	1.9741957523414093E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999983055276443	WITHOUT_CLASSIFICATION	1.6944723555998349E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999797891463365	WITHOUT_CLASSIFICATION	2.0210853663593347E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999797891463365	WITHOUT_CLASSIFICATION	2.0210853663593347E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997870469686	WITHOUT_CLASSIFICATION	2.129530314797188E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999997515295099	WITHOUT_CLASSIFICATION	2.48470489983622E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999830307875051	WITHOUT_CLASSIFICATION	1.6969212494964316E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999954287919904	WITHOUT_CLASSIFICATION	4.571208009503466E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999992621691829	WITHOUT_CLASSIFICATION	7.378308171321165E-7	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999975559012748	WITHOUT_CLASSIFICATION	2.444098725159714E-6	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999981772360368	WITHOUT_CLASSIFICATION	1.8227639633004047E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999989387657046	WITHOUT_CLASSIFICATION	1.0612342955113666E-6	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996152417288	WITHOUT_CLASSIFICATION	3.8475827127392324E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996152417288	WITHOUT_CLASSIFICATION	3.8475827127392324E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999987554696	WITHOUT_CLASSIFICATION	1.2445304269532987E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997241075577	WITHOUT_CLASSIFICATION	2.758924423551203E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997241075577	WITHOUT_CLASSIFICATION	2.758924423551203E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998578613731	WITHOUT_CLASSIFICATION	1.4213862696470236E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999996769736985	WITHOUT_CLASSIFICATION	3.230263015626058E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9961581018155388	WITHOUT_CLASSIFICATION	0.0038418981844612296	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999986274620135	WITHOUT_CLASSIFICATION	1.3725379864810386E-6	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.999999836695258	WITHOUT_CLASSIFICATION	1.6330474187480393E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999864239306	WITHOUT_CLASSIFICATION	1.3576069329690936E-8	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999998925089927	WITHOUT_CLASSIFICATION	1.0749100729386224E-6	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999800453275821	WITHOUT_CLASSIFICATION	1.9954672417894984E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999925068872	WITHOUT_CLASSIFICATION	7.493112809497361E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999903772784573	WITHOUT_CLASSIFICATION	9.622721542698312E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999984540017	WITHOUT_CLASSIFICATION	1.5459983477204939E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999995987115049	WITHOUT_CLASSIFICATION	4.0128849512248473E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982082975211	WITHOUT_CLASSIFICATION	1.7917024789778477E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982082975211	WITHOUT_CLASSIFICATION	1.7917024789778477E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982082975211	WITHOUT_CLASSIFICATION	1.7917024789778477E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999982082975211	WITHOUT_CLASSIFICATION	1.7917024789778477E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999980163102368	WITHOUT_CLASSIFICATION	1.9836897632241783E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999958084740511	WITHOUT_CLASSIFICATION	4.191525948957775E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999965868340646	WITHOUT_CLASSIFICATION	3.4131659353981347E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999890321454526	WITHOUT_CLASSIFICATION	1.0967854547276647E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983343850423	WITHOUT_CLASSIFICATION	1.665614957726512E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999990668861589	WITHOUT_CLASSIFICATION	9.331138411983511E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999973002731996	WITHOUT_CLASSIFICATION	2.699726800562111E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999982993682455	WITHOUT_CLASSIFICATION	1.7006317545010427E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999545432158	WITHOUT_CLASSIFICATION	4.545678432218178E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999998143344129	WITHOUT_CLASSIFICATION	1.8566558709360172E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999988151597222	WITHOUT_CLASSIFICATION	1.1848402777268258E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999990369656677	WITHOUT_CLASSIFICATION	9.630343323768165E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9993370852066914	WITHOUT_CLASSIFICATION	6.629147933086996E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999903892037733	WITHOUT_CLASSIFICATION	9.610796226710008E-6	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999978781808085	WITHOUT_CLASSIFICATION	2.121819191377115E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999990369656677	WITHOUT_CLASSIFICATION	9.630343323768165E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999989806723497	WITHOUT_CLASSIFICATION	1.0193276502538476E-6	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999961857073	WITHOUT_CLASSIFICATION	3.8142926398462605E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999795767361	WITHOUT_CLASSIFICATION	2.0423263855563613E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999738640046225	WITHOUT_CLASSIFICATION	2.6135995377486167E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999992896318721	WITHOUT_CLASSIFICATION	7.103681277757319E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999994345090999	WITHOUT_CLASSIFICATION	5.654909000591908E-7	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999970075015	WITHOUT_CLASSIFICATION	2.9924984397543855E-9	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999999463801821	WITHOUT_CLASSIFICATION	5.361981787011461E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996867748566	WITHOUT_CLASSIFICATION	3.1322514338651634E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998860153616	WITHOUT_CLASSIFICATION	1.1398463843936534E-7	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993556014228	WITHOUT_CLASSIFICATION	6.443985771696824E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995284939317	WITHOUT_CLASSIFICATION	4.7150606827621114E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999965213406279	WITHOUT_CLASSIFICATION	3.4786593720874035E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999140983054043	WITHOUT_CLASSIFICATION	8.59016945957068E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994460245412	WITHOUT_CLASSIFICATION	5.539754588642894E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999925504297944	WITHOUT_CLASSIFICATION	7.4495702056618E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999986769543677	WITHOUT_CLASSIFICATION	1.3230456322530492E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993956847542	WITHOUT_CLASSIFICATION	6.043152459012642E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999921113628211	WITHOUT_CLASSIFICATION	7.888637178899463E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993956847542	WITHOUT_CLASSIFICATION	6.043152459012642E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999181408057	WITHOUT_CLASSIFICATION	8.185919429969509E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999965403122892	WITHOUT_CLASSIFICATION	3.4596877106933763E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999998515924206	WITHOUT_CLASSIFICATION	1.4840757955874655E-7	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999992164456131	WITHOUT_CLASSIFICATION	7.83554386869556E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999997967586759	WITHOUT_CLASSIFICATION	2.0324132418577616E-7	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999955367129452	WITHOUT_CLASSIFICATION	4.463287054816462E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999951178424485	WITHOUT_CLASSIFICATION	4.882157551455697E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999986769543677	WITHOUT_CLASSIFICATION	1.3230456322530492E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999921113628211	WITHOUT_CLASSIFICATION	7.888637178899463E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999181408057	WITHOUT_CLASSIFICATION	8.185919429969509E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999993326919662	WITHOUT_CLASSIFICATION	6.673080339448376E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999997351788935	WITHOUT_CLASSIFICATION	2.6482110644323916E-7	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999976228362725	WITHOUT_CLASSIFICATION	2.3771637276528914E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999998329634514	WITHOUT_CLASSIFICATION	1.6703654858585308E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999991021703032	WITHOUT_CLASSIFICATION	8.978296968603343E-7	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998056101702	WITHOUT_CLASSIFICATION	1.943898297590457E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999996360607	WITHOUT_CLASSIFICATION	3.639393000277326E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914015928143	WITHOUT_CLASSIFICATION	8.598407185780622E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999965403122892	WITHOUT_CLASSIFICATION	3.4596877106933763E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992104255656	WITHOUT_CLASSIFICATION	7.895744344533858E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999079323316	WITHOUT_CLASSIFICATION	9.206766837535917E-8	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999998142091421	WITHOUT_CLASSIFICATION	1.857908578418959E-7	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998713489257	WITHOUT_CLASSIFICATION	1.2865107443197715E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914015928143	WITHOUT_CLASSIFICATION	8.598407185780622E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998615639496	WITHOUT_CLASSIFICATION	1.3843605039690077E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914015928143	WITHOUT_CLASSIFICATION	8.598407185780622E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998759492368	WITHOUT_CLASSIFICATION	1.240507631747515E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999829298342708	WITHOUT_CLASSIFICATION	1.70701657291702E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999999185524818	WITHOUT_CLASSIFICATION	8.144751819458279E-7	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998025863296	WITHOUT_CLASSIFICATION	1.9741367035409613E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997117257524	WITHOUT_CLASSIFICATION	2.88274247658852E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999989795805536	WITHOUT_CLASSIFICATION	1.0204194464224632E-6	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999916349229079	WITHOUT_CLASSIFICATION	8.365077092143835E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999996093737112	WITHOUT_CLASSIFICATION	3.906262887155653E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999990553326122	WITHOUT_CLASSIFICATION	9.44667387872141E-7	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999991048898269	WITHOUT_CLASSIFICATION	8.951101729780566E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518555502933	WITHOUT_CLASSIFICATION	4.814444970670775E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999042991123	WITHOUT_CLASSIFICATION	9.570088769591444E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9961581018155388	WITHOUT_CLASSIFICATION	0.0038418981844612296	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999959308490058	WITHOUT_CLASSIFICATION	4.069150994139714E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999750918013323	WITHOUT_CLASSIFICATION	2.4908198667788325E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999976885706748	WITHOUT_CLASSIFICATION	2.3114293251789768E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999809994823319	WITHOUT_CLASSIFICATION	1.9000517668155396E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998521754206	WITHOUT_CLASSIFICATION	1.4782457943893056E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998831578333	WITHOUT_CLASSIFICATION	1.1684216676971766E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999834443971	WITHOUT_CLASSIFICATION	1.6555602921591936E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999999877146727	WITHOUT_CLASSIFICATION	1.2285327300910497E-7	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999983496477	WITHOUT_CLASSIFICATION	1.6503522975628457E-8	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999995567018892	WITHOUT_CLASSIFICATION	4.432981108095865E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9956604078403304	WITHOUT_CLASSIFICATION	0.00433959215966953	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999970073388077	WITHOUT_CLASSIFICATION	2.9926611923291617E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999993197126935	WITHOUT_CLASSIFICATION	6.802873065607515E-7	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999845658894421	WITHOUT_CLASSIFICATION	1.543411055788293E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999965065992213	WITHOUT_CLASSIFICATION	3.4934007787377593E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999245032908888	WITHOUT_CLASSIFICATION	7.549670911125162E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999991044683724	WITHOUT_CLASSIFICATION	8.955316276561484E-7	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999967445526	WITHOUT_CLASSIFICATION	3.255447425034504E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999743737538	WITHOUT_CLASSIFICATION	2.5626246139496456E-8	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999938595884122	WITHOUT_CLASSIFICATION	6.140411587664177E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999943454202708	WITHOUT_CLASSIFICATION	5.654579729312563E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.994916028262148	WITHOUT_CLASSIFICATION	0.005083971737852055	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999042965561703	WITHOUT_CLASSIFICATION	9.570344382961885E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999994509526234	WITHOUT_CLASSIFICATION	5.490473766424785E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999985141655466	WITHOUT_CLASSIFICATION	1.4858344533272418E-6	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999322846469482	WITHOUT_CLASSIFICATION	6.771535305184427E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999968961105793	WITHOUT_CLASSIFICATION	3.1038894207625852E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9831239168848959	WITHOUT_CLASSIFICATION	0.016876083115104086	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999036918381	WITHOUT_CLASSIFICATION	9.630816193918938E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999997853458912	WITHOUT_CLASSIFICATION	2.1465410879827596E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999722888001968	WITHOUT_CLASSIFICATION	2.771119980315279E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999722888001968	WITHOUT_CLASSIFICATION	2.771119980315279E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999997146366639	WITHOUT_CLASSIFICATION	2.853633360870803E-7	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999996093737112	WITHOUT_CLASSIFICATION	3.906262887155653E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999991864143796	WITHOUT_CLASSIFICATION	8.135856203982487E-7	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999987070179285	WITHOUT_CLASSIFICATION	1.2929820715274053E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999667802755	WITHOUT_CLASSIFICATION	3.3219724617327836E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998806309841	WITHOUT_CLASSIFICATION	1.1936901585606286E-7	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999949409969019	WITHOUT_CLASSIFICATION	5.059003098157989E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9998898506330334	WITHOUT_CLASSIFICATION	1.1014936696661506E-4	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999941157916277	WITHOUT_CLASSIFICATION	5.884208372323151E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999997424890757	WITHOUT_CLASSIFICATION	2.575109242984375E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999996471266992	WITHOUT_CLASSIFICATION	3.5287330081630605E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999998254216368	WITHOUT_CLASSIFICATION	1.7457836310675472E-7	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999993120406447	WITHOUT_CLASSIFICATION	6.879593552179773E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999944049215432	WITHOUT_CLASSIFICATION	5.595078456723286E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999990831376857	WITHOUT_CLASSIFICATION	9.168623141787556E-7	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998487352464	WITHOUT_CLASSIFICATION	1.512647535931147E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999808186947	WITHOUT_CLASSIFICATION	1.9181305237821046E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999583893471	WITHOUT_CLASSIFICATION	4.161065286909584E-8	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998971263415	WITHOUT_CLASSIFICATION	1.0287365853982788E-7	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999426750347	WITHOUT_CLASSIFICATION	5.7324965189626197E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999993938786	WITHOUT_CLASSIFICATION	6.061213956650403E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999997434908316	WITHOUT_CLASSIFICATION	2.5650916838396153E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999994306646156	WITHOUT_CLASSIFICATION	5.693353843179837E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998427540278	WITHOUT_CLASSIFICATION	1.5724597234352036E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9831239168848959	WITHOUT_CLASSIFICATION	0.016876083115104086	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999989708998898	WITHOUT_CLASSIFICATION	1.0291001101959386E-6	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999998988647306	WITHOUT_CLASSIFICATION	1.0113526940474718E-7	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999474867788	WITHOUT_CLASSIFICATION	5.251322132331749E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999974602593955	WITHOUT_CLASSIFICATION	2.5397406045432547E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999997400779194	WITHOUT_CLASSIFICATION	2.59922080560074E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999994523473751	WITHOUT_CLASSIFICATION	5.476526249411221E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999652959468123	WITHOUT_CLASSIFICATION	3.470405318762603E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999987181420004	WITHOUT_CLASSIFICATION	1.2818579995899978E-6	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999996331137015	WITHOUT_CLASSIFICATION	3.668862984290773E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999999965669851	WITHOUT_CLASSIFICATION	3.433014892001195E-8	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999991144685367	WITHOUT_CLASSIFICATION	8.855314633307792E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999982567175915	WITHOUT_CLASSIFICATION	1.7432824086264817E-6	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9981012809843347	WITHOUT_CLASSIFICATION	0.0018987190156652177	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999997323456007	WITHOUT_CLASSIFICATION	2.676543993019124E-6	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999988127901194	WITHOUT_CLASSIFICATION	1.187209880543808E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999703656665	WITHOUT_CLASSIFICATION	2.9634333573194726E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999703656665	WITHOUT_CLASSIFICATION	2.9634333573194726E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999991793667817	WITHOUT_CLASSIFICATION	8.206332182379628E-7	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999988323054833	WITHOUT_CLASSIFICATION	1.1676945167731853E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998213763016	WITHOUT_CLASSIFICATION	1.7862369840547203E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998213763016	WITHOUT_CLASSIFICATION	1.7862369840547203E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.999999986210915	WITHOUT_CLASSIFICATION	1.3789084928871021E-8	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995300949147	WITHOUT_CLASSIFICATION	4.6990508518096903E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999999981154094	WITHOUT_CLASSIFICATION	1.8845905904112712E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999971303610117	WITHOUT_CLASSIFICATION	2.869638988441105E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999769377935542	WITHOUT_CLASSIFICATION	2.3062206445745512E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999955737798966	WITHOUT_CLASSIFICATION	4.426220103481555E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999851828393	WITHOUT_CLASSIFICATION	1.481716073654881E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999851828393	WITHOUT_CLASSIFICATION	1.481716073654881E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999938682186638	WITHOUT_CLASSIFICATION	6.131781336190165E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999998559945287	WITHOUT_CLASSIFICATION	1.4400547126938105E-7	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999973633841304	WITHOUT_CLASSIFICATION	2.636615869629244E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997005174612	WITHOUT_CLASSIFICATION	2.9948253883418587E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997005174612	WITHOUT_CLASSIFICATION	2.9948253883418587E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999996009957381	WITHOUT_CLASSIFICATION	3.9900426180668566E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998556859373	WITHOUT_CLASSIFICATION	1.443140626865204E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999885693334575	WITHOUT_CLASSIFICATION	1.1430666542439258E-5	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999990072678641	WITHOUT_CLASSIFICATION	9.92732135986897E-7	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999994253147146	WITHOUT_CLASSIFICATION	5.746852853885161E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994798992207	WITHOUT_CLASSIFICATION	5.20100779433102E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999213915406	WITHOUT_CLASSIFICATION	7.860845941465768E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999998759946079	WITHOUT_CLASSIFICATION	1.2400539206453464E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998342005687	WITHOUT_CLASSIFICATION	1.657994313207892E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999988330099706	WITHOUT_CLASSIFICATION	1.166990029313816E-6	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999989315064	WITHOUT_CLASSIFICATION	1.0684936506666522E-9	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999977447559724	WITHOUT_CLASSIFICATION	2.2552440275700152E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999339733172483	WITHOUT_CLASSIFICATION	6.602668275164138E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999986610689167	WITHOUT_CLASSIFICATION	1.338931083304247E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999951104073752	WITHOUT_CLASSIFICATION	4.889592624773898E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999929112394847	WITHOUT_CLASSIFICATION	7.088760515336131E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999786250177	WITHOUT_CLASSIFICATION	2.137498238471206E-8	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999962444802888	WITHOUT_CLASSIFICATION	3.7555197111558358E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999998172196052	WITHOUT_CLASSIFICATION	1.827803947912965E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999969859789265	WITHOUT_CLASSIFICATION	3.014021073530992E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999995659704563	WITHOUT_CLASSIFICATION	4.340295436800011E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999980670420133	WITHOUT_CLASSIFICATION	1.9329579866549846E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999389534053958	WITHOUT_CLASSIFICATION	6.104659460409654E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999759093232652	WITHOUT_CLASSIFICATION	2.40906767348615E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.999993394934248	WITHOUT_CLASSIFICATION	6.6050657519315216E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999994660079546	WITHOUT_CLASSIFICATION	5.339920453592738E-7	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999978725669867	WITHOUT_CLASSIFICATION	2.1274330133059843E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.99996678088248	WITHOUT_CLASSIFICATION	3.3219117519986345E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999873457073	WITHOUT_CLASSIFICATION	1.2654292778755554E-8	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999842315707	WITHOUT_CLASSIFICATION	1.5768429322341208E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997910425928	WITHOUT_CLASSIFICATION	2.0895740708243807E-7	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999005419192	WITHOUT_CLASSIFICATION	9.945808080074412E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998785781081	WITHOUT_CLASSIFICATION	1.214218918457816E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999995040648294	WITHOUT_CLASSIFICATION	4.959351705308819E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999108848713	WITHOUT_CLASSIFICATION	8.91151287469226E-8	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999817235339916	WITHOUT_CLASSIFICATION	1.827646600836039E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999955706053706	WITHOUT_CLASSIFICATION	4.4293946293998955E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999994866713809	WITHOUT_CLASSIFICATION	5.133286190055786E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999973459523812	WITHOUT_CLASSIFICATION	2.6540476187542545E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999591596756	WITHOUT_CLASSIFICATION	4.0840324408046934E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998499960366	WITHOUT_CLASSIFICATION	1.5000396332866514E-7	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999992391878643	WITHOUT_CLASSIFICATION	7.608121357730665E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999992120467119	WITHOUT_CLASSIFICATION	7.879532881299872E-7	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999998187453206	WITHOUT_CLASSIFICATION	1.812546793220799E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999996309492227	WITHOUT_CLASSIFICATION	3.690507771921322E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.999999414190899	WITHOUT_CLASSIFICATION	5.858091011192206E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999989757653456	WITHOUT_CLASSIFICATION	1.0242346544162767E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999940651903977	WITHOUT_CLASSIFICATION	5.934809602338167E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999993818399187	WITHOUT_CLASSIFICATION	6.181600812384715E-7	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999658966078496	WITHOUT_CLASSIFICATION	3.410339215046358E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999986152020024	WITHOUT_CLASSIFICATION	1.384797997536346E-6	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999599158563	WITHOUT_CLASSIFICATION	4.0084143565806825E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999954091169186	WITHOUT_CLASSIFICATION	4.590883081401699E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999655220211	WITHOUT_CLASSIFICATION	3.447797903734632E-8	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999990246563552	WITHOUT_CLASSIFICATION	9.753436448249918E-7	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999998603073569	WITHOUT_CLASSIFICATION	1.396926431008719E-6	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998530543452	WITHOUT_CLASSIFICATION	1.469456548548936E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999992986269034	WITHOUT_CLASSIFICATION	7.013730965214903E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999996628859953	WITHOUT_CLASSIFICATION	3.3711400465451803E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998548462680925	WITHOUT_CLASSIFICATION	1.4515373190746164E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997980618455	WITHOUT_CLASSIFICATION	2.019381544820609E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997980618455	WITHOUT_CLASSIFICATION	2.019381544820609E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998535899017182	WITHOUT_CLASSIFICATION	1.4641009828176906E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999034993004511	WITHOUT_CLASSIFICATION	9.650069954894336E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999799948892	WITHOUT_CLASSIFICATION	2.000511085276774E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999997429723494	WITHOUT_CLASSIFICATION	2.570276506665556E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999998855292109	WITHOUT_CLASSIFICATION	1.144707891080392E-6	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999963008567865	WITHOUT_CLASSIFICATION	3.699143213397397E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999995040965327	WITHOUT_CLASSIFICATION	4.959034673595104E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999988230244	WITHOUT_CLASSIFICATION	1.1769756861751851E-9	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999999307684588	WITHOUT_CLASSIFICATION	6.923154120006599E-7	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999852107059916	WITHOUT_CLASSIFICATION	1.4789294008379496E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999253804442	WITHOUT_CLASSIFICATION	7.461955576341686E-8	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999998157492296	WITHOUT_CLASSIFICATION	1.8425077039372816E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999654512185	WITHOUT_CLASSIFICATION	3.454878158902514E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999997242909348	WITHOUT_CLASSIFICATION	2.7570906524445696E-7	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999364880888	WITHOUT_CLASSIFICATION	6.351191115036945E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999364880888	WITHOUT_CLASSIFICATION	6.351191115036945E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999174762072	WITHOUT_CLASSIFICATION	8.252379286359155E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999990128233821	WITHOUT_CLASSIFICATION	9.871766179391171E-7	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998625228111	WITHOUT_CLASSIFICATION	1.374771888342964E-7	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999984605107	WITHOUT_CLASSIFICATION	1.5394893254315941E-9	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996615136761	WITHOUT_CLASSIFICATION	3.38486323738327E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999586933594676	WITHOUT_CLASSIFICATION	4.130664053238543E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999970059268133	WITHOUT_CLASSIFICATION	2.9940731867330594E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.999998685618978	WITHOUT_CLASSIFICATION	1.3143810220661989E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999868375578845	WITHOUT_CLASSIFICATION	1.316244211548935E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999976623212	WITHOUT_CLASSIFICATION	2.337678833891052E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999494348707566	WITHOUT_CLASSIFICATION	5.0565129243435826E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999993995409	WITHOUT_CLASSIFICATION	6.004590251947245E-10	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997199120177	WITHOUT_CLASSIFICATION	2.8008798219983895E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999916187484	WITHOUT_CLASSIFICATION	8.381251633631996E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999584806573	WITHOUT_CLASSIFICATION	4.151934281614204E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997978632484	WITHOUT_CLASSIFICATION	2.0213675158823487E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999994077455902	WITHOUT_CLASSIFICATION	5.922544099314863E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999850293683692	WITHOUT_CLASSIFICATION	1.4970631630726238E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999850641357784	WITHOUT_CLASSIFICATION	1.4935864221655004E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995228944414	WITHOUT_CLASSIFICATION	4.77105558713854E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999998851083473	WITHOUT_CLASSIFICATION	1.1489165283824727E-7	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998133504	WITHOUT_CLASSIFICATION	1.8664957389308318E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999450033967	WITHOUT_CLASSIFICATION	5.499660332462437E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999975547355	WITHOUT_CLASSIFICATION	2.445264545003036E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998890855902	WITHOUT_CLASSIFICATION	1.1091440976960401E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999860974293604	WITHOUT_CLASSIFICATION	1.3902570639537645E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991920850346373	WITHOUT_CLASSIFICATION	8.07914965362839E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999996300832443	WITHOUT_CLASSIFICATION	3.6991675561602684E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999752984392	WITHOUT_CLASSIFICATION	2.4701560912732638E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999526652773	WITHOUT_CLASSIFICATION	4.733472271490032E-8	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999928077884128	WITHOUT_CLASSIFICATION	7.192211587237817E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999997869645619	WITHOUT_CLASSIFICATION	2.130354381920726E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999829397934428	WITHOUT_CLASSIFICATION	1.70602065571401E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999447727665	WITHOUT_CLASSIFICATION	5.522723334067444E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999980044713	WITHOUT_CLASSIFICATION	1.99552865855361E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999606250874	WITHOUT_CLASSIFICATION	3.937491254895115E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999998649028562	WITHOUT_CLASSIFICATION	1.3509714378227008E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999513713026	WITHOUT_CLASSIFICATION	4.86286974550219E-8	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998506387199	WITHOUT_CLASSIFICATION	1.4936128017258232E-7	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999926202834816	WITHOUT_CLASSIFICATION	7.379716518334865E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999988289548317	WITHOUT_CLASSIFICATION	1.1710451682323062E-6	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999699547101	WITHOUT_CLASSIFICATION	3.0045289925485944E-8	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999997737303686	WITHOUT_CLASSIFICATION	2.262696313408157E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999997737303686	WITHOUT_CLASSIFICATION	2.262696313408157E-7	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999988826895587	WITHOUT_CLASSIFICATION	1.1173104412649252E-6	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998566413156	WITHOUT_CLASSIFICATION	1.4335868429599794E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999775743336	WITHOUT_CLASSIFICATION	2.2425666505118613E-8	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999995971861161	WITHOUT_CLASSIFICATION	4.028138838004787E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999295860266	WITHOUT_CLASSIFICATION	7.041397335961402E-8	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999991804007	WITHOUT_CLASSIFICATION	8.195992556114355E-10	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999155678114	WITHOUT_CLASSIFICATION	8.44321885656693E-8	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999208541847	WITHOUT_CLASSIFICATION	7.914581534947964E-8	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999950746952	WITHOUT_CLASSIFICATION	4.925304875936636E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967609723263	WITHOUT_CLASSIFICATION	3.239027673803692E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974010804281	WITHOUT_CLASSIFICATION	2.598919571978844E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999737205739521	WITHOUT_CLASSIFICATION	2.627942604789934E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999945054710034	WITHOUT_CLASSIFICATION	5.494528996527539E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999994962711602	WITHOUT_CLASSIFICATION	5.037288396900673E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999997590803962	WITHOUT_CLASSIFICATION	2.4091960378609793E-7	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999996602026193	WITHOUT_CLASSIFICATION	3.3979738063136257E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999679548911	WITHOUT_CLASSIFICATION	3.2045108877379684E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999963356782	WITHOUT_CLASSIFICATION	3.6643219318373594E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999747276057	WITHOUT_CLASSIFICATION	2.527239428935401E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999880082606184	WITHOUT_CLASSIFICATION	1.1991739381489835E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999962365294857	WITHOUT_CLASSIFICATION	3.7634705143727716E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999712090715	WITHOUT_CLASSIFICATION	2.879092850354923E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999631345781	WITHOUT_CLASSIFICATION	3.6865421965774166E-8	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999950302819787	WITHOUT_CLASSIFICATION	4.9697180213431204E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999998004507624	WITHOUT_CLASSIFICATION	1.995492376493896E-7	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999980593786226	WITHOUT_CLASSIFICATION	1.940621377431161E-6	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999985596163706	WITHOUT_CLASSIFICATION	1.4403836294014318E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999962754225	WITHOUT_CLASSIFICATION	3.7245776112449687E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999726703837509	WITHOUT_CLASSIFICATION	2.732961624904487E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999300220744	WITHOUT_CLASSIFICATION	6.997792555147386E-8	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998339832464	WITHOUT_CLASSIFICATION	1.660167534694428E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.99999995515901	WITHOUT_CLASSIFICATION	4.4840990066230526E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999991616889541	WITHOUT_CLASSIFICATION	8.383110459629352E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999738678484	WITHOUT_CLASSIFICATION	2.6132151595540273E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999954009133	WITHOUT_CLASSIFICATION	4.59908661553451E-9	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999824464681479	WITHOUT_CLASSIFICATION	1.755353185207926E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999417894228	WITHOUT_CLASSIFICATION	5.821057721318208E-8	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998900029297	WITHOUT_CLASSIFICATION	1.0999707033650085E-7	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999982940981317	WITHOUT_CLASSIFICATION	1.705901868266557E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998810967361	WITHOUT_CLASSIFICATION	1.1890326384650042E-7	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999912880729561	WITHOUT_CLASSIFICATION	8.711927043936701E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999860081689973	WITHOUT_CLASSIFICATION	1.3991831002564033E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998348747129	WITHOUT_CLASSIFICATION	1.6512528707057264E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999617488252	WITHOUT_CLASSIFICATION	3.8251174777825854E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999816386953	WITHOUT_CLASSIFICATION	1.836130472121383E-8	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999174212847204	WITHOUT_CLASSIFICATION	8.257871527963107E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998487879285	WITHOUT_CLASSIFICATION	1.5121207155661943E-7	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999976400340005	WITHOUT_CLASSIFICATION	2.359965999622298E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998746688369	WITHOUT_CLASSIFICATION	1.2533116300484144E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999654512185	WITHOUT_CLASSIFICATION	3.454878158902514E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999979829284746	WITHOUT_CLASSIFICATION	2.0170715254484994E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998507043543	WITHOUT_CLASSIFICATION	1.4929564570882337E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999892481729	WITHOUT_CLASSIFICATION	1.0751827164842526E-8	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999761588716	WITHOUT_CLASSIFICATION	2.3841128390002718E-8	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999251075552	WITHOUT_CLASSIFICATION	7.489244478922715E-8	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999915357917	WITHOUT_CLASSIFICATION	8.464208334012352E-9	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999991006113033	WITHOUT_CLASSIFICATION	8.993886967176456E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999962860668649	WITHOUT_CLASSIFICATION	3.713933135104776E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985907156453	WITHOUT_CLASSIFICATION	1.409284354646814E-6	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999983083305701	WITHOUT_CLASSIFICATION	1.6916694298530782E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999975238562	WITHOUT_CLASSIFICATION	2.476143816331159E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998206786144	WITHOUT_CLASSIFICATION	1.7932138556916402E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999850852302	WITHOUT_CLASSIFICATION	1.4914769692067116E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999988556141619	WITHOUT_CLASSIFICATION	1.1443858380966313E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999950409089	WITHOUT_CLASSIFICATION	4.959091101138751E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997070623142	WITHOUT_CLASSIFICATION	2.929376858670982E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999997940896687	WITHOUT_CLASSIFICATION	2.059103313085153E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999957660806887	WITHOUT_CLASSIFICATION	4.233919311306259E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999921162588	WITHOUT_CLASSIFICATION	7.883741247276613E-9	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999991106570463	WITHOUT_CLASSIFICATION	8.893429536815568E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997070623142	WITHOUT_CLASSIFICATION	2.929376858670982E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997002409131021	WITHOUT_CLASSIFICATION	2.9975908689794937E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999989454160929	WITHOUT_CLASSIFICATION	1.0545839071144784E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999996839056776	WITHOUT_CLASSIFICATION	3.160943224173245E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999898310964	WITHOUT_CLASSIFICATION	1.016890360373172E-7	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999980015012736	WITHOUT_CLASSIFICATION	1.99849872649139E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999509073061	WITHOUT_CLASSIFICATION	4.909269385377691E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999937869203	WITHOUT_CLASSIFICATION	6.213079787885767E-9	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999975054700961	WITHOUT_CLASSIFICATION	2.4945299038912586E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999021094688	WITHOUT_CLASSIFICATION	9.789053117268521E-8	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998723618583	WITHOUT_CLASSIFICATION	1.276381417376694E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999999046497647	WITHOUT_CLASSIFICATION	9.535023529573698E-8	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999451953744859	WITHOUT_CLASSIFICATION	5.480462551414773E-5	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999978729534	WITHOUT_CLASSIFICATION	2.1270466173709585E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999173505796	WITHOUT_CLASSIFICATION	8.264942043157005E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999999989243247	WITHOUT_CLASSIFICATION	1.075675310348043E-8	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999999536204414	WITHOUT_CLASSIFICATION	4.637955860109714E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998427540278	WITHOUT_CLASSIFICATION	1.5724597234352036E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999369855495	WITHOUT_CLASSIFICATION	6.301445055474471E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999813456064	WITHOUT_CLASSIFICATION	1.8654393584792797E-8	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999971394917236	WITHOUT_CLASSIFICATION	2.860508276388462E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.999999989402585	WITHOUT_CLASSIFICATION	1.0597414899182276E-8	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999796209064	WITHOUT_CLASSIFICATION	2.037909366245479E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999992536902624	WITHOUT_CLASSIFICATION	7.463097376353063E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999990852227	WITHOUT_CLASSIFICATION	9.14777305878008E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999976043639	WITHOUT_CLASSIFICATION	2.395636201506436E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999953540921	WITHOUT_CLASSIFICATION	4.6459078583410075E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999975311321507	WITHOUT_CLASSIFICATION	2.468867849273875E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999584999881436	WITHOUT_CLASSIFICATION	4.150001185638068E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999106629557	WITHOUT_CLASSIFICATION	8.933704428445263E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999993230750159	WITHOUT_CLASSIFICATION	6.769249841362831E-7	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999999539632647	WITHOUT_CLASSIFICATION	4.60367352430028E-8	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999998459274818	WITHOUT_CLASSIFICATION	1.5407251828255063E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999999078413297	WITHOUT_CLASSIFICATION	9.215867029263773E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999043783516	WITHOUT_CLASSIFICATION	9.56216483802063E-8	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999882116278	WITHOUT_CLASSIFICATION	1.1788372078802194E-8	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999945085152	WITHOUT_CLASSIFICATION	5.491484804605931E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999686459116	WITHOUT_CLASSIFICATION	3.135408845090884E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999987449489453	WITHOUT_CLASSIFICATION	1.255051054786983E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993005382384	WITHOUT_CLASSIFICATION	6.994617616651326E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999623524343	WITHOUT_CLASSIFICATION	3.764756581620343E-8	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999884428648	WITHOUT_CLASSIFICATION	1.1557135282821033E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999244060559	WITHOUT_CLASSIFICATION	7.559394414679011E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999244060559	WITHOUT_CLASSIFICATION	7.559394414679011E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999990000941894	WITHOUT_CLASSIFICATION	9.999058105843706E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996767954181	WITHOUT_CLASSIFICATION	3.232045818446267E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998422681847	WITHOUT_CLASSIFICATION	1.577318153351201E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999998555279789	WITHOUT_CLASSIFICATION	1.4447202112113749E-7	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999954287919904	WITHOUT_CLASSIFICATION	4.571208009503466E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999954287919904	WITHOUT_CLASSIFICATION	4.571208009503466E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9996076542858836	WITHOUT_CLASSIFICATION	3.923457141164006E-4	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999996193531773	WITHOUT_CLASSIFICATION	3.806468227814986E-7	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999238968187	WITHOUT_CLASSIFICATION	7.610318132216958E-8	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999257298438	WITHOUT_CLASSIFICATION	7.427015633388783E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999999854721053	WITHOUT_CLASSIFICATION	1.4527894707363475E-7	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999983023273364	WITHOUT_CLASSIFICATION	1.6976726635124802E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998409536909	WITHOUT_CLASSIFICATION	1.5904630913452232E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999983588338087	WITHOUT_CLASSIFICATION	1.6411661913068846E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999999341352691	WITHOUT_CLASSIFICATION	6.586473090579515E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999989683598536	WITHOUT_CLASSIFICATION	1.031640146331404E-6	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9982183358070824	WITHOUT_CLASSIFICATION	0.0017816641929175668	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979284844632	WITHOUT_CLASSIFICATION	2.071515536665649E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979284844632	WITHOUT_CLASSIFICATION	2.071515536665649E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999970191372	WITHOUT_CLASSIFICATION	2.980862742999288E-9	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999197740789467	WITHOUT_CLASSIFICATION	8.022592105324699E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999997154125018	WITHOUT_CLASSIFICATION	2.8458749819816137E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999970941791758	WITHOUT_CLASSIFICATION	2.905820824119812E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999988629966123	WITHOUT_CLASSIFICATION	1.1370033876464663E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998947075336	WITHOUT_CLASSIFICATION	1.0529246642567274E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935116196018283	WITHOUT_CLASSIFICATION	0.006488380398171655	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999992111002362	WITHOUT_CLASSIFICATION	7.888997636997092E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998840785126	WITHOUT_CLASSIFICATION	1.1592148740380994E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999999090718393	WITHOUT_CLASSIFICATION	9.092816072535058E-8	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999998868730748	WITHOUT_CLASSIFICATION	1.1312692523788465E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998723618583	WITHOUT_CLASSIFICATION	1.276381417376694E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998527444093	WITHOUT_CLASSIFICATION	1.4725559067863234E-7	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999924892920943	WITHOUT_CLASSIFICATION	7.510707905817921E-6	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999112672177	WITHOUT_CLASSIFICATION	8.873278227195518E-8	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998184181372	WITHOUT_CLASSIFICATION	1.8158186269225945E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999981523191401	WITHOUT_CLASSIFICATION	1.8476808598312875E-6	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999992764673811	WITHOUT_CLASSIFICATION	7.235326189746364E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999955513184021	WITHOUT_CLASSIFICATION	4.448681597819767E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.999999898713519	WITHOUT_CLASSIFICATION	1.0128648098011864E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999915685379	WITHOUT_CLASSIFICATION	8.43146211071569E-9	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999898044431225	WITHOUT_CLASSIFICATION	1.0195556877448854E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999898044431225	WITHOUT_CLASSIFICATION	1.0195556877448854E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999990369656677	WITHOUT_CLASSIFICATION	9.630343323768165E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999065995	WITHOUT_CLASSIFICATION	9.34005324719073E-11	TEST
package	WITHOUT_CLASSIFICATION	0.9999836756545328	WITHOUT_CLASSIFICATION	1.632434546713992E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999857470739	WITHOUT_CLASSIFICATION	1.4252926005000643E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999996612348112	WITHOUT_CLASSIFICATION	3.3876518885318614E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999887434834	WITHOUT_CLASSIFICATION	1.1256516510344654E-8	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994460245412	WITHOUT_CLASSIFICATION	5.539754588642894E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999909547426	WITHOUT_CLASSIFICATION	9.04525748410123E-9	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999993326919662	WITHOUT_CLASSIFICATION	6.673080339448376E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999985655471276	WITHOUT_CLASSIFICATION	1.4344528723624305E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914015928143	WITHOUT_CLASSIFICATION	8.598407185780622E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999986338025801	WITHOUT_CLASSIFICATION	1.366197419922181E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997824049152	WITHOUT_CLASSIFICATION	2.1759508474685777E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998846577043	WITHOUT_CLASSIFICATION	1.1534229565144097E-7	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998273458872	WITHOUT_CLASSIFICATION	1.7265411283341265E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999688054899	WITHOUT_CLASSIFICATION	3.119451010539545E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999919473129	WITHOUT_CLASSIFICATION	8.052686973421189E-9	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999896415395705	WITHOUT_CLASSIFICATION	1.035846042945301E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999980418008835	WITHOUT_CLASSIFICATION	1.958199116500068E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999996987486985	WITHOUT_CLASSIFICATION	3.012513015019437E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998607860835	WITHOUT_CLASSIFICATION	1.3921391659686304E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999998523389548	WITHOUT_CLASSIFICATION	1.4766104520114342E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999885693334575	WITHOUT_CLASSIFICATION	1.1430666542439258E-5	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999992839014592	WITHOUT_CLASSIFICATION	7.160985407741964E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999339538531	WITHOUT_CLASSIFICATION	6.604614687879565E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999339538531	WITHOUT_CLASSIFICATION	6.604614687879565E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999950659093514	WITHOUT_CLASSIFICATION	4.934090648628654E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996738686046	WITHOUT_CLASSIFICATION	3.2613139541248244E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999968874401	WITHOUT_CLASSIFICATION	3.112559904939548E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999888204711	WITHOUT_CLASSIFICATION	1.1179528861642474E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996184755935	WITHOUT_CLASSIFICATION	3.8152440656876646E-7	TEST
