test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997686430368558	WITHOUT_CLASSIFICATION	2.3135696314432016E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999961498424331	WITHOUT_CLASSIFICATION	3.850157566903143E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999998609377722	WITHOUT_CLASSIFICATION	1.3906222780353393E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999985274102617	WITHOUT_CLASSIFICATION	1.4725897382341772E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997265853187	WITHOUT_CLASSIFICATION	2.734146813460738E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997265853187	WITHOUT_CLASSIFICATION	2.734146813460738E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998110622643	WITHOUT_CLASSIFICATION	1.8893773562992624E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998858974756	WITHOUT_CLASSIFICATION	1.1410252442933118E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999990433753332	WITHOUT_CLASSIFICATION	9.566246667531474E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999992444301031	WITHOUT_CLASSIFICATION	7.555698968304121E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999932268182506	WITHOUT_CLASSIFICATION	6.773181749458397E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999932268182506	WITHOUT_CLASSIFICATION	6.773181749458397E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999310564312329	WITHOUT_CLASSIFICATION	6.894356876718765E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999722866035	WITHOUT_CLASSIFICATION	2.771339649572709E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999997470412414	WITHOUT_CLASSIFICATION	2.5295875858541227E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999987539536426	WITHOUT_CLASSIFICATION	1.2460463573730949E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998828540994	WITHOUT_CLASSIFICATION	1.1714590068087444E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999151804093749	WITHOUT_CLASSIFICATION	8.481959062517452E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999800483067548	WITHOUT_CLASSIFICATION	1.9951693245145658E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997338794309575	WITHOUT_CLASSIFICATION	2.661205690425766E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997459999491346	WITHOUT_CLASSIFICATION	2.540000508653376E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997078610332	WITHOUT_CLASSIFICATION	2.9213896678442454E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999721978591997	WITHOUT_CLASSIFICATION	2.780214080035993E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999483727426711	WITHOUT_CLASSIFICATION	5.162725732892053E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999996638661423	WITHOUT_CLASSIFICATION	3.3613385775276575E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999508625653226	WITHOUT_CLASSIFICATION	4.913743467745191E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999508625653226	WITHOUT_CLASSIFICATION	4.913743467745191E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999994626000618	WITHOUT_CLASSIFICATION	5.373999382316653E-7	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999369132550305	WITHOUT_CLASSIFICATION	6.30867449694914E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999832456627	WITHOUT_CLASSIFICATION	1.675433725706073E-8	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999775184365	WITHOUT_CLASSIFICATION	2.2481563440525367E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999969819679398	WITHOUT_CLASSIFICATION	3.0180320601699885E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998761453193	WITHOUT_CLASSIFICATION	1.2385468085700988E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.999998571526277	WITHOUT_CLASSIFICATION	1.4284737229958286E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999640983721	WITHOUT_CLASSIFICATION	3.590162794363384E-8	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.999999913465037	WITHOUT_CLASSIFICATION	8.653496296640171E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999969122442729	WITHOUT_CLASSIFICATION	3.0877557270373964E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995915388228	WITHOUT_CLASSIFICATION	4.084611771721116E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999951915102898	WITHOUT_CLASSIFICATION	4.808489710219158E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999731986848	WITHOUT_CLASSIFICATION	2.680131513148261E-8	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998998518914	WITHOUT_CLASSIFICATION	1.0014810865440805E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999999710720871	WITHOUT_CLASSIFICATION	2.89279128972256E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974350084226	WITHOUT_CLASSIFICATION	2.564991577357413E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889618251184	WITHOUT_CLASSIFICATION	1.103817488152684E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999352883226	WITHOUT_CLASSIFICATION	6.471167735766863E-8	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998805937922	WITHOUT_CLASSIFICATION	1.1940620768002247E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999971159574558	WITHOUT_CLASSIFICATION	2.88404254422952E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999858851194	WITHOUT_CLASSIFICATION	1.4114880507024951E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997786434691	WITHOUT_CLASSIFICATION	2.213565309562622E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999971159574558	WITHOUT_CLASSIFICATION	2.88404254422952E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997786434691	WITHOUT_CLASSIFICATION	2.213565309562622E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998350870395	WITHOUT_CLASSIFICATION	1.6491296049163796E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9982892421414317	WITHOUT_CLASSIFICATION	0.0017107578585684139	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999984233981709	WITHOUT_CLASSIFICATION	1.576601829141048E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989671470689	WITHOUT_CLASSIFICATION	1.0328529311030775E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999975466779578	WITHOUT_CLASSIFICATION	2.453322042137749E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999938427999553	WITHOUT_CLASSIFICATION	6.157200044738283E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999570950045339	WITHOUT_CLASSIFICATION	4.290499546609786E-5	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.999998411198909	WITHOUT_CLASSIFICATION	1.5888010910477966E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999997627402739	WITHOUT_CLASSIFICATION	2.3725972613609726E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999652249274846	WITHOUT_CLASSIFICATION	3.47750725154271E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999995362259193	WITHOUT_CLASSIFICATION	4.637740806795273E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997786434691	WITHOUT_CLASSIFICATION	2.213565309562622E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999765525672	WITHOUT_CLASSIFICATION	2.34474328002404E-8	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999084003078	WITHOUT_CLASSIFICATION	9.159969213382715E-8	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999999647634676	WITHOUT_CLASSIFICATION	3.5236532312453576E-8	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999956356591192	WITHOUT_CLASSIFICATION	4.364340880808058E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999904290144	WITHOUT_CLASSIFICATION	9.570985603562484E-8	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999114549809	WITHOUT_CLASSIFICATION	8.854501906450495E-8	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999991882057037	WITHOUT_CLASSIFICATION	8.117942962970909E-7	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996536257425	WITHOUT_CLASSIFICATION	3.463742574472649E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999990337177844	WITHOUT_CLASSIFICATION	9.662822154779188E-7	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999821852459	WITHOUT_CLASSIFICATION	1.781475412326921E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999731240963	WITHOUT_CLASSIFICATION	2.687590374911384E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999937066453036	WITHOUT_CLASSIFICATION	6.293354696275357E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999987587890335	WITHOUT_CLASSIFICATION	1.2412109664650993E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999734248373	WITHOUT_CLASSIFICATION	2.6575162742399186E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999996860011	WITHOUT_CLASSIFICATION	3.1399890332099865E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999989067624844	WITHOUT_CLASSIFICATION	1.0932375156597925E-6	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999992191779788	WITHOUT_CLASSIFICATION	7.808220211414351E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988638909326	WITHOUT_CLASSIFICATION	1.1361090674232604E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999990395434741	WITHOUT_CLASSIFICATION	9.604565259455172E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999806134646	WITHOUT_CLASSIFICATION	1.93865354426857E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999993781480723	WITHOUT_CLASSIFICATION	6.218519277150522E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999925864856	WITHOUT_CLASSIFICATION	7.413514341439422E-9	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.999999338264233	WITHOUT_CLASSIFICATION	6.617357670793428E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999994467672507	WITHOUT_CLASSIFICATION	5.532327492321061E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999925864856	WITHOUT_CLASSIFICATION	7.413514341439422E-9	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999825353056	WITHOUT_CLASSIFICATION	1.7464694388827228E-8	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997888029549	WITHOUT_CLASSIFICATION	2.111970451726029E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999971159574558	WITHOUT_CLASSIFICATION	2.88404254422952E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999998398594137	WITHOUT_CLASSIFICATION	1.6014058639012068E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999999179516863	WITHOUT_CLASSIFICATION	8.204831375326221E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999595263752	WITHOUT_CLASSIFICATION	4.047362467846636E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999595263752	WITHOUT_CLASSIFICATION	4.047362467846636E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999991294417903	WITHOUT_CLASSIFICATION	8.705582097490709E-7	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999982039914681	WITHOUT_CLASSIFICATION	1.7960085318024447E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998824764591	WITHOUT_CLASSIFICATION	1.1752354088082227E-7	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999871131051	WITHOUT_CLASSIFICATION	1.2886894819935886E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998035707225	WITHOUT_CLASSIFICATION	1.9642927758652843E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999346229869	WITHOUT_CLASSIFICATION	6.537701315669347E-8	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999992971030661	WITHOUT_CLASSIFICATION	7.028969338394244E-7	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999998548319823	WITHOUT_CLASSIFICATION	1.4516801775203055E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995406009513	WITHOUT_CLASSIFICATION	4.593990487709454E-7	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996408068198	WITHOUT_CLASSIFICATION	3.5919318023554925E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992180552763	WITHOUT_CLASSIFICATION	7.819447236934055E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992180552763	WITHOUT_CLASSIFICATION	7.819447236934055E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999399093299	WITHOUT_CLASSIFICATION	6.009067015095791E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998750229601	WITHOUT_CLASSIFICATION	1.2497703985161752E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999982041372469	WITHOUT_CLASSIFICATION	1.7958627529874242E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992180552763	WITHOUT_CLASSIFICATION	7.819447236934055E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999399093299	WITHOUT_CLASSIFICATION	6.009067015095791E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999399093299	WITHOUT_CLASSIFICATION	6.009067015095791E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999788141170728	WITHOUT_CLASSIFICATION	2.1185882927181255E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999998882538918	WITHOUT_CLASSIFICATION	1.1174610820328898E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998421271508	WITHOUT_CLASSIFICATION	1.5787284930816806E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999995216484352	WITHOUT_CLASSIFICATION	4.78351564808858E-7	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999966035716186	WITHOUT_CLASSIFICATION	3.396428381375838E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999966035716186	WITHOUT_CLASSIFICATION	3.396428381375838E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999995665218254	WITHOUT_CLASSIFICATION	4.3347817453775976E-7	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995125405724	WITHOUT_CLASSIFICATION	4.874594276201482E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999987472212813	WITHOUT_CLASSIFICATION	1.2527787186967286E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994720922563	WITHOUT_CLASSIFICATION	5.279077437643246E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994720922563	WITHOUT_CLASSIFICATION	5.279077437643246E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997984705618	WITHOUT_CLASSIFICATION	2.0152943828473815E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999981316843842	WITHOUT_CLASSIFICATION	1.868315615689419E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989834394716	WITHOUT_CLASSIFICATION	1.0165605284361725E-6	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999405952078	WITHOUT_CLASSIFICATION	5.9404792162939124E-8	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999974661989599	WITHOUT_CLASSIFICATION	2.533801040143145E-6	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999991733508695	WITHOUT_CLASSIFICATION	8.266491305068727E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.99999939755688	WITHOUT_CLASSIFICATION	6.024431199868655E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998074160648	WITHOUT_CLASSIFICATION	1.9258393536316366E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999977425339526	WITHOUT_CLASSIFICATION	2.2574660474242205E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999989834394716	WITHOUT_CLASSIFICATION	1.0165605284361725E-6	TEST
then by fk	WITHOUT_CLASSIFICATION	0.999996286282742	WITHOUT_CLASSIFICATION	3.7137172580306163E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999805222698948	WITHOUT_CLASSIFICATION	1.947773010523608E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999805222698948	WITHOUT_CLASSIFICATION	1.947773010523608E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997055509285	WITHOUT_CLASSIFICATION	2.9444907141433936E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999846404265301	WITHOUT_CLASSIFICATION	1.5359573469850108E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999001652611	WITHOUT_CLASSIFICATION	9.983473884581614E-8	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995284409996	WITHOUT_CLASSIFICATION	4.715590003581238E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999978927708144	WITHOUT_CLASSIFICATION	2.107229185667914E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999990658614343	WITHOUT_CLASSIFICATION	9.34138565707146E-7	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999973356532692	WITHOUT_CLASSIFICATION	2.6643467308921243E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999996028052082	WITHOUT_CLASSIFICATION	3.971947918608137E-7	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999933181645	WITHOUT_CLASSIFICATION	6.681835542182117E-9	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999783179191	WITHOUT_CLASSIFICATION	2.1682080856337794E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999783179191	WITHOUT_CLASSIFICATION	2.1682080856337794E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997686430368558	WITHOUT_CLASSIFICATION	2.3135696314432016E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994242723724	WITHOUT_CLASSIFICATION	5.757276276018344E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.999997237633938	WITHOUT_CLASSIFICATION	2.7623660619654867E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999973097517738	WITHOUT_CLASSIFICATION	2.6902482261627645E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999990982609656	WITHOUT_CLASSIFICATION	9.017390343788282E-7	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999985927665973	WITHOUT_CLASSIFICATION	1.4072334026785747E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999975368452598	WITHOUT_CLASSIFICATION	2.4631547402413994E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999991369369898	WITHOUT_CLASSIFICATION	8.630630101488411E-7	TEST
new	WITHOUT_CLASSIFICATION	0.9999444870490394	WITHOUT_CLASSIFICATION	5.551295096055721E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999425341775721	WITHOUT_CLASSIFICATION	5.746582242799225E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999981110676447	WITHOUT_CLASSIFICATION	1.888932355370495E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999998609377722	WITHOUT_CLASSIFICATION	1.3906222780353393E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999967231423622	WITHOUT_CLASSIFICATION	3.2768576377988256E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999967231423622	WITHOUT_CLASSIFICATION	3.2768576377988256E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.999998818250261	WITHOUT_CLASSIFICATION	1.1817497389786054E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999990283497685	WITHOUT_CLASSIFICATION	9.716502315069859E-6	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.99999992806809	WITHOUT_CLASSIFICATION	7.193190998253216E-8	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.999997475137666	WITHOUT_CLASSIFICATION	2.5248623339193655E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999984998814232	WITHOUT_CLASSIFICATION	1.500118576756915E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999130307179	WITHOUT_CLASSIFICATION	8.696928213579302E-8	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997265853187	WITHOUT_CLASSIFICATION	2.734146813460738E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999991270959393	WITHOUT_CLASSIFICATION	8.729040607410916E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999970520943408	WITHOUT_CLASSIFICATION	2.9479056593496625E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999990132978952	WITHOUT_CLASSIFICATION	9.867021047653758E-7	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999999244757171	WITHOUT_CLASSIFICATION	7.552428291037139E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999966596797345	WITHOUT_CLASSIFICATION	3.3403202654276493E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999739387258039	WITHOUT_CLASSIFICATION	2.6061274196116912E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999972365891661	WITHOUT_CLASSIFICATION	2.7634108338881677E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998100866592	WITHOUT_CLASSIFICATION	1.8991334080913903E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997339515846	WITHOUT_CLASSIFICATION	2.660484154259034E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999997373452573	WITHOUT_CLASSIFICATION	2.6265474274434056E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995396184135	WITHOUT_CLASSIFICATION	4.603815865215374E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999994425312311	WITHOUT_CLASSIFICATION	5.574687689979476E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999788948320436	WITHOUT_CLASSIFICATION	2.1105167956433225E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999425341775721	WITHOUT_CLASSIFICATION	5.746582242799225E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999967231423622	WITHOUT_CLASSIFICATION	3.2768576377988256E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999972365891661	WITHOUT_CLASSIFICATION	2.7634108338881677E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998110622643	WITHOUT_CLASSIFICATION	1.8893773562992624E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999995514319594	WITHOUT_CLASSIFICATION	4.4856804048043993E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999991511501004	WITHOUT_CLASSIFICATION	8.488498996938248E-7	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999990065256498	WITHOUT_CLASSIFICATION	9.934743501783263E-7	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999948287972795	WITHOUT_CLASSIFICATION	5.171202720464199E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996960632366	WITHOUT_CLASSIFICATION	3.0393676340343673E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999819880289718	WITHOUT_CLASSIFICATION	1.8011971028263643E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999997674877386	WITHOUT_CLASSIFICATION	2.3251226150482283E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.999987350294281	WITHOUT_CLASSIFICATION	1.2649705719011914E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999862358003756	WITHOUT_CLASSIFICATION	1.3764199624450907E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999803243445794	WITHOUT_CLASSIFICATION	1.9675655420536556E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999803243445794	WITHOUT_CLASSIFICATION	1.9675655420536556E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999404076068	WITHOUT_CLASSIFICATION	5.95923931954545E-8	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999999527267285	WITHOUT_CLASSIFICATION	4.727327158290984E-8	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999872017848728	WITHOUT_CLASSIFICATION	1.2798215127298052E-5	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999888145992856	WITHOUT_CLASSIFICATION	1.1185400714377165E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999828979359	WITHOUT_CLASSIFICATION	1.7102064097389877E-8	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999440829421	WITHOUT_CLASSIFICATION	5.591705792092012E-8	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999991132786402	WITHOUT_CLASSIFICATION	8.867213597501629E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998858974756	WITHOUT_CLASSIFICATION	1.1410252442933118E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999953555522111	WITHOUT_CLASSIFICATION	4.644447788938026E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999077194701	WITHOUT_CLASSIFICATION	9.228052990179547E-8	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999077194701	WITHOUT_CLASSIFICATION	9.228052990179547E-8	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996882419908	WITHOUT_CLASSIFICATION	3.117580092122587E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999992441583013	WITHOUT_CLASSIFICATION	7.558416986374923E-7	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999996794856882	WITHOUT_CLASSIFICATION	3.2051431178863767E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999572035196	WITHOUT_CLASSIFICATION	4.279648031761625E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999853742213001	WITHOUT_CLASSIFICATION	1.4625778699865577E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998059300065	WITHOUT_CLASSIFICATION	1.9406999349748874E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999425341775721	WITHOUT_CLASSIFICATION	5.746582242799225E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999998609377722	WITHOUT_CLASSIFICATION	1.3906222780353393E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999972365891661	WITHOUT_CLASSIFICATION	2.7634108338881677E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999972365891661	WITHOUT_CLASSIFICATION	2.7634108338881677E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998173840595	WITHOUT_CLASSIFICATION	1.826159404655446E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998173840595	WITHOUT_CLASSIFICATION	1.826159404655446E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999996479790895	WITHOUT_CLASSIFICATION	3.520209105015566E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999795612872833	WITHOUT_CLASSIFICATION	2.0438712716773386E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999795612872833	WITHOUT_CLASSIFICATION	2.0438712716773386E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999986684622897	WITHOUT_CLASSIFICATION	1.3315377102832962E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999997756638109	WITHOUT_CLASSIFICATION	2.243361890159697E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999979307797885	WITHOUT_CLASSIFICATION	2.0692202115042118E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999982529195316	WITHOUT_CLASSIFICATION	1.7470804683543976E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998198557397	WITHOUT_CLASSIFICATION	1.8014426032634233E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999992444301031	WITHOUT_CLASSIFICATION	7.555698968304121E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999992444301031	WITHOUT_CLASSIFICATION	7.555698968304121E-7	TEST
not array	WITHOUT_CLASSIFICATION	0.999998620302097	WITHOUT_CLASSIFICATION	1.3796979030612337E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999986441095702	WITHOUT_CLASSIFICATION	1.3558904297703688E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999829202167156	WITHOUT_CLASSIFICATION	1.7079783284456363E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999737307010692	WITHOUT_CLASSIFICATION	2.6269298930710865E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999799858722304	WITHOUT_CLASSIFICATION	2.0014127769666377E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999673997659907	WITHOUT_CLASSIFICATION	3.2600234009366246E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999932268182506	WITHOUT_CLASSIFICATION	6.773181749458397E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999846144039743	WITHOUT_CLASSIFICATION	1.538559602567201E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999846144039743	WITHOUT_CLASSIFICATION	1.538559602567201E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999310564312329	WITHOUT_CLASSIFICATION	6.894356876718765E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999310564312329	WITHOUT_CLASSIFICATION	6.894356876718765E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999988703492946	WITHOUT_CLASSIFICATION	1.1296507053771458E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999988703492946	WITHOUT_CLASSIFICATION	1.1296507053771458E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989754908092	WITHOUT_CLASSIFICATION	1.024509190823135E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989754908092	WITHOUT_CLASSIFICATION	1.024509190823135E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999992444301031	WITHOUT_CLASSIFICATION	7.555698968304121E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999932268182506	WITHOUT_CLASSIFICATION	6.773181749458397E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999846144039743	WITHOUT_CLASSIFICATION	1.538559602567201E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999846144039743	WITHOUT_CLASSIFICATION	1.538559602567201E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999310564312329	WITHOUT_CLASSIFICATION	6.894356876718765E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999988703492946	WITHOUT_CLASSIFICATION	1.1296507053771458E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999988703492946	WITHOUT_CLASSIFICATION	1.1296507053771458E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989754908092	WITHOUT_CLASSIFICATION	1.024509190823135E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999995008680852	WITHOUT_CLASSIFICATION	4.991319148128115E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999997047134359	WITHOUT_CLASSIFICATION	2.952865640721444E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999992602499171	WITHOUT_CLASSIFICATION	7.397500828384151E-7	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999948005734667	WITHOUT_CLASSIFICATION	5.199426533284469E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999990052260784	WITHOUT_CLASSIFICATION	9.947739216129731E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999683118073637	WITHOUT_CLASSIFICATION	3.168819263638577E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999711153004	WITHOUT_CLASSIFICATION	2.8884699649779975E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999989469528487	WITHOUT_CLASSIFICATION	1.0530471512123763E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999995126892892	WITHOUT_CLASSIFICATION	4.873107108223009E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999998326604186	WITHOUT_CLASSIFICATION	1.6733958140136582E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999996318897486	WITHOUT_CLASSIFICATION	3.681102513737427E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999990843746402	WITHOUT_CLASSIFICATION	9.156253597184989E-7	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999991294417903	WITHOUT_CLASSIFICATION	8.705582097490709E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999683118073637	WITHOUT_CLASSIFICATION	3.168819263638577E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999683118073637	WITHOUT_CLASSIFICATION	3.168819263638577E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999683118073637	WITHOUT_CLASSIFICATION	3.168819263638577E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999999596740027	WITHOUT_CLASSIFICATION	4.032599730537309E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999355528263	WITHOUT_CLASSIFICATION	6.444717369109947E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999355528263	WITHOUT_CLASSIFICATION	6.444717369109947E-7	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999995551639599	WITHOUT_CLASSIFICATION	4.4483604004538645E-7	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999996781766815	WITHOUT_CLASSIFICATION	3.2182331853827337E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999208001417	WITHOUT_CLASSIFICATION	7.919985834105376E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999188407035	WITHOUT_CLASSIFICATION	8.115929649894674E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999188407035	WITHOUT_CLASSIFICATION	8.115929649894674E-8	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998828540994	WITHOUT_CLASSIFICATION	1.1714590068087444E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999721519331	WITHOUT_CLASSIFICATION	2.78480668179472E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999721519331	WITHOUT_CLASSIFICATION	2.78480668179472E-8	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999982635636952	WITHOUT_CLASSIFICATION	1.7364363048032777E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999993314478809	WITHOUT_CLASSIFICATION	6.685521192529737E-7	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999991658019579	WITHOUT_CLASSIFICATION	8.341980421181112E-7	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997356257144414	WITHOUT_CLASSIFICATION	2.6437428555851634E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999425632765663	WITHOUT_CLASSIFICATION	5.743672343374272E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999171940340358	WITHOUT_CLASSIFICATION	8.280596596415676E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999151804093749	WITHOUT_CLASSIFICATION	8.481959062517452E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998312270229612	WITHOUT_CLASSIFICATION	1.6877297703863742E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9947728891656549	WITHOUT_CLASSIFICATION	0.005227110834345096	TEST
ID	WITHOUT_CLASSIFICATION	0.9997859313305004	WITHOUT_CLASSIFICATION	2.1406866949947773E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999655993018142	WITHOUT_CLASSIFICATION	3.440069818572927E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997459999491346	WITHOUT_CLASSIFICATION	2.540000508653376E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997547894106	WITHOUT_CLASSIFICATION	2.4521058938076056E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999695709089388	WITHOUT_CLASSIFICATION	3.0429091061210218E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999771337353032	WITHOUT_CLASSIFICATION	2.286626469682855E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997459999491346	WITHOUT_CLASSIFICATION	2.540000508653376E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999869728381	WITHOUT_CLASSIFICATION	1.3027161923626207E-8	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999835925693	WITHOUT_CLASSIFICATION	1.6407430673330638E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999691659339593	WITHOUT_CLASSIFICATION	3.083406604064917E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.999919720901359	WITHOUT_CLASSIFICATION	8.027909864091174E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999935722873163	WITHOUT_CLASSIFICATION	6.427712683693325E-6	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999866827734057	WITHOUT_CLASSIFICATION	1.331722659429812E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999461569745309	WITHOUT_CLASSIFICATION	5.384302546918184E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999483727426711	WITHOUT_CLASSIFICATION	5.162725732892053E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999850458918552	WITHOUT_CLASSIFICATION	1.4954108144802898E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999996638661423	WITHOUT_CLASSIFICATION	3.3613385775276575E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999959689935538	WITHOUT_CLASSIFICATION	4.0310064462529705E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.999999787354074	WITHOUT_CLASSIFICATION	2.1264592591517095E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.999860856790471	WITHOUT_CLASSIFICATION	1.391432095290657E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999151804093749	WITHOUT_CLASSIFICATION	8.481959062517452E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999850458918552	WITHOUT_CLASSIFICATION	1.4954108144802898E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999959689935538	WITHOUT_CLASSIFICATION	4.0310064462529705E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.999860856790471	WITHOUT_CLASSIFICATION	1.391432095290657E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998941176513	WITHOUT_CLASSIFICATION	1.058823486976912E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999286788772288	WITHOUT_CLASSIFICATION	7.132112277117127E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999806519949	WITHOUT_CLASSIFICATION	1.9348005094685287E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999508625653226	WITHOUT_CLASSIFICATION	4.913743467745191E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999387314248044	WITHOUT_CLASSIFICATION	6.126857519555983E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999990974215973	WITHOUT_CLASSIFICATION	9.025784028271872E-7	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999977543277908	WITHOUT_CLASSIFICATION	2.245672209129279E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999946358536435	WITHOUT_CLASSIFICATION	5.364146356519634E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999884115690507	WITHOUT_CLASSIFICATION	1.158843094932569E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999069294385	WITHOUT_CLASSIFICATION	9.30705614370172E-8	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999982898971468	WITHOUT_CLASSIFICATION	1.710102853173792E-6	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999977711430074	WITHOUT_CLASSIFICATION	2.2288569925698463E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999822943028	WITHOUT_CLASSIFICATION	1.77056972457613E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999991518686673	WITHOUT_CLASSIFICATION	8.481313327571302E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999248087806676	WITHOUT_CLASSIFICATION	7.519121933244171E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999854310693724	WITHOUT_CLASSIFICATION	1.4568930627593803E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999369132550305	WITHOUT_CLASSIFICATION	6.30867449694914E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999985586829545	WITHOUT_CLASSIFICATION	1.44131704549642E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999121559016171	WITHOUT_CLASSIFICATION	8.784409838293282E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999850458918552	WITHOUT_CLASSIFICATION	1.4954108144802898E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991510712338	WITHOUT_CLASSIFICATION	8.489287661528065E-7	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999665387844	WITHOUT_CLASSIFICATION	3.34612155093669E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.999999901221721	WITHOUT_CLASSIFICATION	9.877827902156335E-8	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9962509987647397	WITHOUT_CLASSIFICATION	0.0037490012352604444	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999976047046018	WITHOUT_CLASSIFICATION	2.3952953982987496E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999980436641921	WITHOUT_CLASSIFICATION	1.9563358080074832E-6	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999999398308	WITHOUT_CLASSIFICATION	6.01692550234232E-11	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999757327386	WITHOUT_CLASSIFICATION	2.4267261449478505E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999979491904332	WITHOUT_CLASSIFICATION	2.050809566752221E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999340357679564	WITHOUT_CLASSIFICATION	6.596423204372265E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999766265313383	WITHOUT_CLASSIFICATION	2.3373468661678708E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999663010079703	WITHOUT_CLASSIFICATION	3.369899202972679E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999995722865737	WITHOUT_CLASSIFICATION	4.277134262491203E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999775184365	WITHOUT_CLASSIFICATION	2.2481563440525367E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999999525257582	WITHOUT_CLASSIFICATION	4.747424167378977E-8	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999999944990875	WITHOUT_CLASSIFICATION	5.5009124997882097E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.999995860598005	WITHOUT_CLASSIFICATION	4.139401994948604E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998283110957	WITHOUT_CLASSIFICATION	1.7168890437202764E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999998970079117	WITHOUT_CLASSIFICATION	1.0299208833405211E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999974121741334	WITHOUT_CLASSIFICATION	2.587825866667839E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997151422529	WITHOUT_CLASSIFICATION	2.8485774706709385E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999995020862906	WITHOUT_CLASSIFICATION	4.979137093405317E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999958115757	WITHOUT_CLASSIFICATION	4.188424300383944E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999992358320425	WITHOUT_CLASSIFICATION	7.641679575414309E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999999610094819	WITHOUT_CLASSIFICATION	3.899051809921787E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999999610094819	WITHOUT_CLASSIFICATION	3.899051809921787E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999925493867723	WITHOUT_CLASSIFICATION	7.450613227708305E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999998744023904	WITHOUT_CLASSIFICATION	1.255976095338778E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999439134878	WITHOUT_CLASSIFICATION	5.608651224432504E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997270515159	WITHOUT_CLASSIFICATION	2.7294848414973216E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999993027295239	WITHOUT_CLASSIFICATION	6.972704761378112E-7	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997468337128	WITHOUT_CLASSIFICATION	2.5316628711549216E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999996053631818	WITHOUT_CLASSIFICATION	3.9463681822992317E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999996260903893	WITHOUT_CLASSIFICATION	3.739096106958013E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999940320114564	WITHOUT_CLASSIFICATION	5.96798854355046E-6	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999985612010603	WITHOUT_CLASSIFICATION	1.4387989397245293E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999934339926173	WITHOUT_CLASSIFICATION	6.566007382684489E-6	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999998252873575	WITHOUT_CLASSIFICATION	1.7471264249224774E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999995360806925	WITHOUT_CLASSIFICATION	4.6391930753738366E-7	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999999232961487	WITHOUT_CLASSIFICATION	7.670385136838401E-8	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999994942925243	WITHOUT_CLASSIFICATION	5.057074756872107E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999975236852103	WITHOUT_CLASSIFICATION	2.4763147896916923E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999999247631048	WITHOUT_CLASSIFICATION	7.523689511952302E-8	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999997603130515	WITHOUT_CLASSIFICATION	2.3968694852079756E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991681791678	WITHOUT_CLASSIFICATION	8.318208321022284E-7	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999633534742	WITHOUT_CLASSIFICATION	3.664652574816771E-8	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997619652661	WITHOUT_CLASSIFICATION	2.3803473378517758E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999998233444864	WITHOUT_CLASSIFICATION	1.7665551366109277E-7	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999997241798275	WITHOUT_CLASSIFICATION	2.758201724744953E-7	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999991727309689	WITHOUT_CLASSIFICATION	8.272690310297738E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999997943529733	WITHOUT_CLASSIFICATION	2.0564702679383195E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999987401604054	WITHOUT_CLASSIFICATION	1.2598395946410007E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989273613	WITHOUT_CLASSIFICATION	1.0726387000153788E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999998186891144	WITHOUT_CLASSIFICATION	1.8131088567385056E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998996597173	WITHOUT_CLASSIFICATION	1.0034028281622243E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999988145761991	WITHOUT_CLASSIFICATION	1.1854238009164298E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999633534742	WITHOUT_CLASSIFICATION	3.664652574816771E-8	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999989974533255	WITHOUT_CLASSIFICATION	1.002546674481534E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999996274228358	WITHOUT_CLASSIFICATION	3.7257716430397027E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999995891724441	WITHOUT_CLASSIFICATION	4.108275558721871E-7	TEST
found	WITHOUT_CLASSIFICATION	0.999983940187188	WITHOUT_CLASSIFICATION	1.6059812812113856E-5	TEST
found	WITHOUT_CLASSIFICATION	0.999983940187188	WITHOUT_CLASSIFICATION	1.6059812812113856E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999989429654444	WITHOUT_CLASSIFICATION	1.0570345555233803E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999994950633841	WITHOUT_CLASSIFICATION	5.04936615838053E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999935238324736	WITHOUT_CLASSIFICATION	6.476167526297433E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999935238324736	WITHOUT_CLASSIFICATION	6.476167526297433E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999958115757	WITHOUT_CLASSIFICATION	4.188424300383944E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999745974884	WITHOUT_CLASSIFICATION	2.540251153990095E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999989301620178	WITHOUT_CLASSIFICATION	1.0698379821858268E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994688227842	WITHOUT_CLASSIFICATION	5.311772158287731E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999989301620178	WITHOUT_CLASSIFICATION	1.0698379821858268E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994688227842	WITHOUT_CLASSIFICATION	5.311772158287731E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993520003011	WITHOUT_CLASSIFICATION	6.479996988617582E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999902952867787	WITHOUT_CLASSIFICATION	9.704713221280567E-6	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999783833897	WITHOUT_CLASSIFICATION	2.16166103000796E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999995638545767	WITHOUT_CLASSIFICATION	4.361454233319477E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999986363348582	WITHOUT_CLASSIFICATION	1.3636651418209063E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999973440290687	WITHOUT_CLASSIFICATION	2.6559709312716902E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.99999946605141	WITHOUT_CLASSIFICATION	5.339485899656833E-7	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.99999946605141	WITHOUT_CLASSIFICATION	5.339485899656833E-7	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999990959416772	WITHOUT_CLASSIFICATION	9.04058322733944E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999569270264	WITHOUT_CLASSIFICATION	4.307297358115068E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999988288280499	WITHOUT_CLASSIFICATION	1.1711719501143717E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999987606605	WITHOUT_CLASSIFICATION	1.2393395189833594E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999978017476383	WITHOUT_CLASSIFICATION	2.1982523617114912E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999995075882413	WITHOUT_CLASSIFICATION	4.924117587116475E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999970654314119	WITHOUT_CLASSIFICATION	2.9345685881084603E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999896439408126	WITHOUT_CLASSIFICATION	1.0356059187334676E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999896439408126	WITHOUT_CLASSIFICATION	1.0356059187334676E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999986167953	WITHOUT_CLASSIFICATION	1.383204696837638E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993520003011	WITHOUT_CLASSIFICATION	6.479996988617582E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999953393852805	WITHOUT_CLASSIFICATION	4.660614719517114E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999750407506922	WITHOUT_CLASSIFICATION	2.4959249307765725E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999996626322495	WITHOUT_CLASSIFICATION	3.3736775046102717E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999961100128809	WITHOUT_CLASSIFICATION	3.889987119094497E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999835219196689	WITHOUT_CLASSIFICATION	1.6478080331142766E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993520003011	WITHOUT_CLASSIFICATION	6.479996988617582E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999961100128809	WITHOUT_CLASSIFICATION	3.889987119094497E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999835219196689	WITHOUT_CLASSIFICATION	1.6478080331142766E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999695221821	WITHOUT_CLASSIFICATION	3.0477817972096457E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999971618853998	WITHOUT_CLASSIFICATION	2.838114600203564E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999934375684	WITHOUT_CLASSIFICATION	6.562431574590589E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993520003011	WITHOUT_CLASSIFICATION	6.479996988617582E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993520003011	WITHOUT_CLASSIFICATION	6.479996988617582E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999960091222515	WITHOUT_CLASSIFICATION	3.9908777485230415E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999971065355132	WITHOUT_CLASSIFICATION	2.8934644868868825E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999996526566429	WITHOUT_CLASSIFICATION	3.4734335697525217E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998998518914	WITHOUT_CLASSIFICATION	1.0014810865440805E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999999271674102	WITHOUT_CLASSIFICATION	7.283258982865366E-8	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999995545603416	WITHOUT_CLASSIFICATION	4.4543965834958725E-7	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999982082782297	WITHOUT_CLASSIFICATION	1.7917217702842402E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996614333193	WITHOUT_CLASSIFICATION	3.3856668069746844E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999863681523	WITHOUT_CLASSIFICATION	1.3631847739217146E-8	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999918274165169	WITHOUT_CLASSIFICATION	8.172583483018856E-6	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999997758931851	WITHOUT_CLASSIFICATION	2.241068150153833E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999985996857929	WITHOUT_CLASSIFICATION	1.4003142071213937E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999995912003931	WITHOUT_CLASSIFICATION	4.0879960701174566E-7	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999998645577306	WITHOUT_CLASSIFICATION	1.3544226939646074E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990959875622	WITHOUT_CLASSIFICATION	9.040124378686179E-7	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999942943740864	WITHOUT_CLASSIFICATION	5.705625913616409E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998998518914	WITHOUT_CLASSIFICATION	1.0014810865440805E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999905328957139	WITHOUT_CLASSIFICATION	9.467104286021583E-6	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999997894570274	WITHOUT_CLASSIFICATION	2.1054297258586928E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999399512557	WITHOUT_CLASSIFICATION	6.004874425629844E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999944827773473	WITHOUT_CLASSIFICATION	5.51722265276114E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.99999585674079	WITHOUT_CLASSIFICATION	4.143259210031393E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.99999585674079	WITHOUT_CLASSIFICATION	4.143259210031393E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998998518914	WITHOUT_CLASSIFICATION	1.0014810865440805E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998960652425455	WITHOUT_CLASSIFICATION	1.0393475745451454E-4	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999987196574579	WITHOUT_CLASSIFICATION	1.2803425420328814E-6	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999494445912314	WITHOUT_CLASSIFICATION	5.0555408768719055E-5	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999997960288891	WITHOUT_CLASSIFICATION	2.0397111090670216E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984235671739	WITHOUT_CLASSIFICATION	1.5764328261237286E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997420297831	WITHOUT_CLASSIFICATION	2.5797021692149367E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999997885622078	WITHOUT_CLASSIFICATION	2.114377921348972E-7	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999983181413493	WITHOUT_CLASSIFICATION	1.6818586506006417E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999962769254	WITHOUT_CLASSIFICATION	3.7230747016385582E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999342311381	WITHOUT_CLASSIFICATION	6.576886193789745E-8	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992520354319	WITHOUT_CLASSIFICATION	7.479645680053472E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999892548530277	WITHOUT_CLASSIFICATION	1.0745146972275217E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998381137253197	WITHOUT_CLASSIFICATION	1.6188627468018653E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999929787989	WITHOUT_CLASSIFICATION	7.021201073716232E-9	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999406184211	WITHOUT_CLASSIFICATION	5.938157881547912E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999998585588276	WITHOUT_CLASSIFICATION	1.4144117247073252E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999956642807	WITHOUT_CLASSIFICATION	4.3357192841806E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999997011042159	WITHOUT_CLASSIFICATION	2.9889578415334056E-7	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997637753184	WITHOUT_CLASSIFICATION	2.362246816767738E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999636706425	WITHOUT_CLASSIFICATION	3.632935751516304E-8	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999938736346	WITHOUT_CLASSIFICATION	6.12636541679318E-9	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998654292982	WITHOUT_CLASSIFICATION	1.345707018808323E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992865965179	WITHOUT_CLASSIFICATION	7.134034820842936E-7	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993430585733	WITHOUT_CLASSIFICATION	6.569414267040993E-6	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971362895649	WITHOUT_CLASSIFICATION	2.86371043519936E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984264219671	WITHOUT_CLASSIFICATION	1.5735780328181375E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889375292941	WITHOUT_CLASSIFICATION	1.1062470705865971E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916110987095	WITHOUT_CLASSIFICATION	8.388901290536914E-6	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879662637893	WITHOUT_CLASSIFICATION	1.2033736210707762E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985419991413	WITHOUT_CLASSIFICATION	1.4580008586156295E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999996541164063	WITHOUT_CLASSIFICATION	3.458835937064072E-7	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999860687154	WITHOUT_CLASSIFICATION	1.3931284527612054E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978203349383	WITHOUT_CLASSIFICATION	2.1796650616438398E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998281439655	WITHOUT_CLASSIFICATION	1.7185603449880786E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995321100974	WITHOUT_CLASSIFICATION	4.6788990254719155E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934496337326	WITHOUT_CLASSIFICATION	6.550366267415845E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984964487403	WITHOUT_CLASSIFICATION	1.5035512597095468E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993614676589	WITHOUT_CLASSIFICATION	6.385323411506744E-7	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992014058817	WITHOUT_CLASSIFICATION	7.985941182740276E-7	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819463210377	WITHOUT_CLASSIFICATION	1.805367896228075E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999892266344734	WITHOUT_CLASSIFICATION	1.0773365526454951E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989640967872	WITHOUT_CLASSIFICATION	1.0359032127630523E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999849851275142	WITHOUT_CLASSIFICATION	1.501487248590751E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999906129877	WITHOUT_CLASSIFICATION	9.387012305875136E-8	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999920007695	WITHOUT_CLASSIFICATION	7.999230478405347E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997919550893802	WITHOUT_CLASSIFICATION	2.0804491061984096E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999971727005013	WITHOUT_CLASSIFICATION	2.8272994986778247E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999997010721795	WITHOUT_CLASSIFICATION	2.989278205001438E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999861277103	WITHOUT_CLASSIFICATION	1.3872289643743407E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999895115421441	WITHOUT_CLASSIFICATION	1.0488457855833108E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999758458679051	WITHOUT_CLASSIFICATION	2.4154132094878983E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999716832685431	WITHOUT_CLASSIFICATION	2.831673145690545E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999983182591205	WITHOUT_CLASSIFICATION	1.681740879500121E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999951759469984	WITHOUT_CLASSIFICATION	4.824053001598154E-6	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999983201396864	WITHOUT_CLASSIFICATION	1.6798603135579609E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999854841276	WITHOUT_CLASSIFICATION	1.4515872475546453E-8	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999992543583447	WITHOUT_CLASSIFICATION	7.456416553460462E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9998909529795715	WITHOUT_CLASSIFICATION	1.0904702042845477E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999959111808	WITHOUT_CLASSIFICATION	4.088819234377308E-9	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994431844252	WITHOUT_CLASSIFICATION	5.568155747288946E-7	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984957030774	WITHOUT_CLASSIFICATION	1.5042969226405805E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991872755225	WITHOUT_CLASSIFICATION	8.127244775163312E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999855893285	WITHOUT_CLASSIFICATION	1.4410671499926134E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999791438395828	WITHOUT_CLASSIFICATION	2.0856160417306214E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999943485179	WITHOUT_CLASSIFICATION	5.651482076093675E-9	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999998777105037	WITHOUT_CLASSIFICATION	1.2228949638648524E-7	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999995191666714	WITHOUT_CLASSIFICATION	4.80833328566779E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920950243634	WITHOUT_CLASSIFICATION	7.904975636615553E-6	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999304984049	WITHOUT_CLASSIFICATION	6.950159504402815E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999899031854661	WITHOUT_CLASSIFICATION	1.0096814533951404E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.99999973654792	WITHOUT_CLASSIFICATION	2.63452080021997E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986142145	WITHOUT_CLASSIFICATION	1.385785487391492E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999178862199622	WITHOUT_CLASSIFICATION	8.211378003769946E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999997197178851	WITHOUT_CLASSIFICATION	2.802821149351404E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999998841647356	WITHOUT_CLASSIFICATION	1.1583526442811387E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999957253602548	WITHOUT_CLASSIFICATION	4.274639745165537E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997919550893802	WITHOUT_CLASSIFICATION	2.0804491061984096E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995860479578	WITHOUT_CLASSIFICATION	4.139520422633789E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999916777582	WITHOUT_CLASSIFICATION	8.322241713417936E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997388128179	WITHOUT_CLASSIFICATION	2.611871820028423E-7	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999990628344662	WITHOUT_CLASSIFICATION	9.371655338760376E-7	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999374272933	WITHOUT_CLASSIFICATION	6.257270667320577E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999995647435324	WITHOUT_CLASSIFICATION	4.35256467630782E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999791438395828	WITHOUT_CLASSIFICATION	2.0856160417306214E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998562312857	WITHOUT_CLASSIFICATION	1.4376871417238525E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999402238142	WITHOUT_CLASSIFICATION	5.97761858313694E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998593813627	WITHOUT_CLASSIFICATION	1.4061863720124563E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999520652937	WITHOUT_CLASSIFICATION	4.7934706409340376E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999539884082	WITHOUT_CLASSIFICATION	4.601159176614199E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998780169025	WITHOUT_CLASSIFICATION	1.2198309762561398E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999792899232	WITHOUT_CLASSIFICATION	2.0710076776836663E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996874385579	WITHOUT_CLASSIFICATION	3.125614420540761E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999740060221637	WITHOUT_CLASSIFICATION	2.5993977836322073E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999989605815572	WITHOUT_CLASSIFICATION	1.039418442859753E-6	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999946247244	WITHOUT_CLASSIFICATION	5.37527562801215E-9	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997447272766	WITHOUT_CLASSIFICATION	2.5527272334018237E-7	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998570327767	WITHOUT_CLASSIFICATION	1.4296722332803445E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999862305283055	WITHOUT_CLASSIFICATION	1.376947169453528E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999996266672333	WITHOUT_CLASSIFICATION	3.7333276664803293E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992302668202	WITHOUT_CLASSIFICATION	7.697331797416539E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999225426933	WITHOUT_CLASSIFICATION	7.745730665835553E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999836630308	WITHOUT_CLASSIFICATION	1.633696922180855E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998604594329	WITHOUT_CLASSIFICATION	1.3954056712611784E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999964826979955	WITHOUT_CLASSIFICATION	3.5173020044720746E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999995908013628	WITHOUT_CLASSIFICATION	4.091986372579172E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999987217904195	WITHOUT_CLASSIFICATION	1.2782095805162193E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.999999433502368	WITHOUT_CLASSIFICATION	5.66497632053494E-7	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999976105886289	WITHOUT_CLASSIFICATION	2.389411371100294E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999999520704643	WITHOUT_CLASSIFICATION	4.792953561466027E-8	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999487630251	WITHOUT_CLASSIFICATION	5.123697491164176E-8	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999702324147	WITHOUT_CLASSIFICATION	2.9767585373367536E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997919550893802	WITHOUT_CLASSIFICATION	2.0804491061984096E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996961705852	WITHOUT_CLASSIFICATION	3.0382941489359385E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999999947765188	WITHOUT_CLASSIFICATION	5.2234811981233545E-8	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997284722253473	WITHOUT_CLASSIFICATION	2.715277746526646E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999999196003723	WITHOUT_CLASSIFICATION	8.0399627703302E-7	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999992266182572	WITHOUT_CLASSIFICATION	7.733817427133673E-7	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999994908942567	WITHOUT_CLASSIFICATION	5.091057433771692E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997919550893802	WITHOUT_CLASSIFICATION	2.0804491061984096E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999983317745027	WITHOUT_CLASSIFICATION	1.6682254973584335E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999225426933	WITHOUT_CLASSIFICATION	7.745730665835553E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999981350166357	WITHOUT_CLASSIFICATION	1.864983364286992E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992302668202	WITHOUT_CLASSIFICATION	7.697331797416539E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998825568795	WITHOUT_CLASSIFICATION	1.174431204914813E-6	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993825865240062	WITHOUT_CLASSIFICATION	6.174134759936963E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999937716149019	WITHOUT_CLASSIFICATION	6.228385098087628E-6	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998593813627	WITHOUT_CLASSIFICATION	1.4061863720124563E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999520652937	WITHOUT_CLASSIFICATION	4.7934706409340376E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999539884082	WITHOUT_CLASSIFICATION	4.601159176614199E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999968566104102	WITHOUT_CLASSIFICATION	3.1433895898280997E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999992761993958	WITHOUT_CLASSIFICATION	7.238006043082618E-7	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996982156574	WITHOUT_CLASSIFICATION	3.0178434256555016E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992302668202	WITHOUT_CLASSIFICATION	7.697331797416539E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998825568795	WITHOUT_CLASSIFICATION	1.174431204914813E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997919550893802	WITHOUT_CLASSIFICATION	2.0804491061984096E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998780169025	WITHOUT_CLASSIFICATION	1.2198309762561398E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999792899232	WITHOUT_CLASSIFICATION	2.0710076776836663E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996874385579	WITHOUT_CLASSIFICATION	3.125614420540761E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999268099429	WITHOUT_CLASSIFICATION	7.319005714072079E-8	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999520254484	WITHOUT_CLASSIFICATION	4.797455164070213E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999998047803756	WITHOUT_CLASSIFICATION	1.9521962439732537E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998822440923	WITHOUT_CLASSIFICATION	1.1775590775346815E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999959418266409	WITHOUT_CLASSIFICATION	4.058173359221148E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999901404002	WITHOUT_CLASSIFICATION	9.859599747394129E-9	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819463210377	WITHOUT_CLASSIFICATION	1.805367896228075E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999976542204586	WITHOUT_CLASSIFICATION	2.3457795414892817E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999804086249137	WITHOUT_CLASSIFICATION	1.9591375086331836E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999987268827045	WITHOUT_CLASSIFICATION	1.27311729551218E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999963684897	WITHOUT_CLASSIFICATION	3.6315103815835786E-9	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999163561185	WITHOUT_CLASSIFICATION	8.364388150458991E-8	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889375292941	WITHOUT_CLASSIFICATION	1.1062470705865971E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916110987095	WITHOUT_CLASSIFICATION	8.388901290536914E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998281439655	WITHOUT_CLASSIFICATION	1.7185603449880786E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999163561185	WITHOUT_CLASSIFICATION	8.364388150458991E-8	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999706246073	WITHOUT_CLASSIFICATION	2.9375392655440764E-8	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998376949238	WITHOUT_CLASSIFICATION	1.6230507624921825E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982392318145	WITHOUT_CLASSIFICATION	1.7607681855414476E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969520748841	WITHOUT_CLASSIFICATION	3.047925115948757E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999497883599	WITHOUT_CLASSIFICATION	5.0211640111281274E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999930767158751	WITHOUT_CLASSIFICATION	6.9232841248085335E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995321100974	WITHOUT_CLASSIFICATION	4.6788990254719155E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993614676589	WITHOUT_CLASSIFICATION	6.385323411506744E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986142145	WITHOUT_CLASSIFICATION	1.385785487391492E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999990380113296	WITHOUT_CLASSIFICATION	9.619886704797305E-7	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999564566031	WITHOUT_CLASSIFICATION	4.3543396851207253E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999738358604	WITHOUT_CLASSIFICATION	2.6164139661099716E-8	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999850384206422	WITHOUT_CLASSIFICATION	1.4961579357827268E-5	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999999829977395	WITHOUT_CLASSIFICATION	1.7002260504593577E-7	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999770780905	WITHOUT_CLASSIFICATION	2.2921909532807678E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999997861432244	WITHOUT_CLASSIFICATION	2.138567756350378E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999962769254	WITHOUT_CLASSIFICATION	3.7230747016385582E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999999722628539	WITHOUT_CLASSIFICATION	2.773714610148188E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998799908277	WITHOUT_CLASSIFICATION	1.2000917224564486E-7	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999992798462748	WITHOUT_CLASSIFICATION	7.201537252644667E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999996160398881	WITHOUT_CLASSIFICATION	3.839601119046924E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999997189851572	WITHOUT_CLASSIFICATION	2.810148428237036E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993413683118	WITHOUT_CLASSIFICATION	6.586316881395236E-7	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997872647839	WITHOUT_CLASSIFICATION	2.1273521616322901E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997742365733	WITHOUT_CLASSIFICATION	2.2576342665521028E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998164122454	WITHOUT_CLASSIFICATION	1.8358775459697147E-6	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999996191996471	WITHOUT_CLASSIFICATION	3.8080035291005567E-7	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999986005094212	WITHOUT_CLASSIFICATION	1.3994905787296285E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999962294532838	WITHOUT_CLASSIFICATION	3.7705467161702454E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977223041762	WITHOUT_CLASSIFICATION	2.2776958238133892E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991944969399	WITHOUT_CLASSIFICATION	8.055030600594185E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987389603554	WITHOUT_CLASSIFICATION	1.26103964458811E-6	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999996740438827	WITHOUT_CLASSIFICATION	3.2595611736166823E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999990579742506	WITHOUT_CLASSIFICATION	9.420257494165934E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993051157026	WITHOUT_CLASSIFICATION	6.94884297400904E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999999613188322	WITHOUT_CLASSIFICATION	3.868116792436284E-8	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999961607835731	WITHOUT_CLASSIFICATION	3.839216426941039E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999525636747	WITHOUT_CLASSIFICATION	4.743632529855502E-7	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999992269759251	WITHOUT_CLASSIFICATION	7.730240749826144E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999985153562584	WITHOUT_CLASSIFICATION	1.484643741686271E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998575946887	WITHOUT_CLASSIFICATION	1.4240531134168708E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999998319439516	WITHOUT_CLASSIFICATION	1.680560483378832E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999853588679867	WITHOUT_CLASSIFICATION	1.464113201345094E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999790535641607	WITHOUT_CLASSIFICATION	2.094643583930559E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999945758338286	WITHOUT_CLASSIFICATION	5.424166171533985E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999414766569	WITHOUT_CLASSIFICATION	5.852334307109294E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999994312964281	WITHOUT_CLASSIFICATION	5.687035719537924E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999101625974	WITHOUT_CLASSIFICATION	8.983740252444146E-8	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999966513411	WITHOUT_CLASSIFICATION	3.348658963444299E-9	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999970975009742	WITHOUT_CLASSIFICATION	2.9024990257875123E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999916363918429	WITHOUT_CLASSIFICATION	8.363608157128326E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999676322187	WITHOUT_CLASSIFICATION	3.236778129830106E-8	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999861539509747	WITHOUT_CLASSIFICATION	1.384604902529469E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999995575194912	WITHOUT_CLASSIFICATION	4.4248050887569164E-7	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999997404218759	WITHOUT_CLASSIFICATION	2.5957812409514305E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999966804665346	WITHOUT_CLASSIFICATION	3.3195334654519013E-6	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998184894852916	WITHOUT_CLASSIFICATION	1.815105147084623E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999945852222157	WITHOUT_CLASSIFICATION	5.414777784284972E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999797308898	WITHOUT_CLASSIFICATION	2.0269110095664698E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999987454185304	WITHOUT_CLASSIFICATION	1.2545814695766148E-6	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999752153044	WITHOUT_CLASSIFICATION	2.4784695628034698E-8	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999998210964685	WITHOUT_CLASSIFICATION	1.789035315303056E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995054536059	WITHOUT_CLASSIFICATION	4.945463940931399E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998985533706	WITHOUT_CLASSIFICATION	1.0144662951186881E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999589061159	WITHOUT_CLASSIFICATION	4.10938840028171E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999987955858005	WITHOUT_CLASSIFICATION	1.20441419940067E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999999769330488	WITHOUT_CLASSIFICATION	2.306695120048406E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999547061799	WITHOUT_CLASSIFICATION	4.529382018434924E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995324361212	WITHOUT_CLASSIFICATION	4.6756387875930196E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999996218987246	WITHOUT_CLASSIFICATION	3.78101275402746E-7	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999867987545	WITHOUT_CLASSIFICATION	1.3201245624471787E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999993072952125	WITHOUT_CLASSIFICATION	6.927047874592303E-7	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999980453446188	WITHOUT_CLASSIFICATION	1.9546553812305377E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999993122578952	WITHOUT_CLASSIFICATION	6.877421047525548E-7	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999996203375934	WITHOUT_CLASSIFICATION	3.7966240658218257E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998679585971	WITHOUT_CLASSIFICATION	1.3204140285384493E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999294952675	WITHOUT_CLASSIFICATION	7.050473254627468E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999999537109318	WITHOUT_CLASSIFICATION	4.628906819222007E-8	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999988931825177	WITHOUT_CLASSIFICATION	1.1068174823525555E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999981249435398	WITHOUT_CLASSIFICATION	1.8750564601528931E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999840337415391	WITHOUT_CLASSIFICATION	1.5966258460818895E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999982746443214	WITHOUT_CLASSIFICATION	1.7253556785389698E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999989190389806	WITHOUT_CLASSIFICATION	1.0809610192941843E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999039977873	WITHOUT_CLASSIFICATION	9.600221271675907E-8	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999419766368	WITHOUT_CLASSIFICATION	5.802336312799833E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999805663127	WITHOUT_CLASSIFICATION	1.943368737138986E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999608741476	WITHOUT_CLASSIFICATION	3.9125852479689033E-8	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999969987038307	WITHOUT_CLASSIFICATION	3.0012961693593647E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999629144508	WITHOUT_CLASSIFICATION	3.708554919298386E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999996725843056	WITHOUT_CLASSIFICATION	3.2741569441694837E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997431523588	WITHOUT_CLASSIFICATION	2.5684764109679754E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999995684143946	WITHOUT_CLASSIFICATION	4.3158560538860194E-7	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999983827877916	WITHOUT_CLASSIFICATION	1.6172122084342513E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999994141959819	WITHOUT_CLASSIFICATION	5.858040181065206E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999858289233075	WITHOUT_CLASSIFICATION	1.4171076692596679E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999997720722334	WITHOUT_CLASSIFICATION	2.2792776661364905E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991081172089	WITHOUT_CLASSIFICATION	8.918827910989216E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999993889334722	WITHOUT_CLASSIFICATION	6.110665279355339E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999992509310377	WITHOUT_CLASSIFICATION	7.490689622184347E-7	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999994214549397	WITHOUT_CLASSIFICATION	5.785450602725248E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999981987407642	WITHOUT_CLASSIFICATION	1.8012592358560658E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999527766988404	WITHOUT_CLASSIFICATION	4.7223301159501855E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999992359505174	WITHOUT_CLASSIFICATION	7.640494825417048E-7	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999991439179581	WITHOUT_CLASSIFICATION	8.560820418422056E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999973968435978	WITHOUT_CLASSIFICATION	2.6031564022175582E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999997922965921	WITHOUT_CLASSIFICATION	2.07703408030875E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999998536843	WITHOUT_CLASSIFICATION	1.4631580051551627E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999979067282566	WITHOUT_CLASSIFICATION	2.093271743254965E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999558500231207	WITHOUT_CLASSIFICATION	4.414997687926817E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999929658747844	WITHOUT_CLASSIFICATION	7.034125215613687E-6	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999979067282566	WITHOUT_CLASSIFICATION	2.093271743254965E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999996394550387	WITHOUT_CLASSIFICATION	3.605449612903895E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.999999779223709	WITHOUT_CLASSIFICATION	2.2077629107370946E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999955735305771	WITHOUT_CLASSIFICATION	4.426469422941452E-6	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999863113896715	WITHOUT_CLASSIFICATION	1.3688610328541224E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999999196647572	WITHOUT_CLASSIFICATION	8.033524285731729E-8	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998723587727	WITHOUT_CLASSIFICATION	1.2764122727454424E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999561217626844	WITHOUT_CLASSIFICATION	4.387823731554343E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999153027528	WITHOUT_CLASSIFICATION	8.469724719334012E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999415719094	WITHOUT_CLASSIFICATION	5.842809052735596E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999772705707322	WITHOUT_CLASSIFICATION	2.2729429267810112E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999336453301	WITHOUT_CLASSIFICATION	6.635466994237863E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999991308581185	WITHOUT_CLASSIFICATION	8.691418814388529E-7	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999998861715781	WITHOUT_CLASSIFICATION	1.1382842191074993E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999998746342212	WITHOUT_CLASSIFICATION	1.25365778795848E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998848627722	WITHOUT_CLASSIFICATION	1.1513722768562515E-7	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999992920517035	WITHOUT_CLASSIFICATION	7.079482964300325E-7	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999872126837944	WITHOUT_CLASSIFICATION	1.2787316205504143E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999872126837944	WITHOUT_CLASSIFICATION	1.2787316205504143E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999753875525	WITHOUT_CLASSIFICATION	2.4612447418053603E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.999972946706273	WITHOUT_CLASSIFICATION	2.7053293726999317E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.999984002446423	WITHOUT_CLASSIFICATION	1.5997553576946855E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.999993586897882	WITHOUT_CLASSIFICATION	6.4131021180064755E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999999646810469	WITHOUT_CLASSIFICATION	3.53189531016504E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999734184571087	WITHOUT_CLASSIFICATION	2.6581542891254418E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999991456537899	WITHOUT_CLASSIFICATION	8.543462100954054E-7	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999651862406	WITHOUT_CLASSIFICATION	3.4813759536735334E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999993812144875	WITHOUT_CLASSIFICATION	6.187855124399977E-7	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999990552944695	WITHOUT_CLASSIFICATION	9.447055305555884E-7	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999320571329	WITHOUT_CLASSIFICATION	6.794286716347638E-8	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999940013757	WITHOUT_CLASSIFICATION	5.998624262129315E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999454086452	WITHOUT_CLASSIFICATION	5.459135472008321E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999636208117	WITHOUT_CLASSIFICATION	3.6379188292888963E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999968983211	WITHOUT_CLASSIFICATION	3.1016788376718644E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993413683118	WITHOUT_CLASSIFICATION	6.586316881395236E-7	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999961345929272	WITHOUT_CLASSIFICATION	3.8654070727789795E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999731700773	WITHOUT_CLASSIFICATION	2.6829922662377807E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999998588242027	WITHOUT_CLASSIFICATION	1.411757972814691E-7	TEST
do the test	WITHOUT_CLASSIFICATION	0.9991293942977859	WITHOUT_CLASSIFICATION	8.706057022140139E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999582276367	WITHOUT_CLASSIFICATION	4.1772363331623204E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999990118666982	WITHOUT_CLASSIFICATION	9.881333018585468E-7	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999028728952	WITHOUT_CLASSIFICATION	9.712710480317142E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998959374816	WITHOUT_CLASSIFICATION	1.04062518492244E-7	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999814648709	WITHOUT_CLASSIFICATION	1.8535129064454464E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999769281325	WITHOUT_CLASSIFICATION	2.307186755783021E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999986531425623	WITHOUT_CLASSIFICATION	1.3468574376907685E-6	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999998508770251	WITHOUT_CLASSIFICATION	1.4912297490438596E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999996368278336	WITHOUT_CLASSIFICATION	3.6317216638896317E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999988326588127	WITHOUT_CLASSIFICATION	1.1673411873386572E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999999571083676	WITHOUT_CLASSIFICATION	4.2891632389602486E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999999973799419	WITHOUT_CLASSIFICATION	2.620058098739937E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999941953091303	WITHOUT_CLASSIFICATION	5.804690869804019E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999982081321539	WITHOUT_CLASSIFICATION	1.7918678461067103E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999995982450316	WITHOUT_CLASSIFICATION	4.0175496839344435E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999666409468	WITHOUT_CLASSIFICATION	3.33590532526615E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999985945696361	WITHOUT_CLASSIFICATION	1.4054303638584406E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999998453002903	WITHOUT_CLASSIFICATION	1.5469970974812364E-7	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999983347966993	WITHOUT_CLASSIFICATION	1.665203300623935E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999975802754527	WITHOUT_CLASSIFICATION	2.4197245473025785E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.999981939961571	WITHOUT_CLASSIFICATION	1.8060038428954524E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999995656127416	WITHOUT_CLASSIFICATION	4.3438725835085097E-7	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999321645854	WITHOUT_CLASSIFICATION	6.783541463031674E-8	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999682989849	WITHOUT_CLASSIFICATION	3.170101522268069E-8	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999971352131014	WITHOUT_CLASSIFICATION	2.8647868986306586E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999996926856549	WITHOUT_CLASSIFICATION	3.0731434511738347E-7	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971444066778	WITHOUT_CLASSIFICATION	2.8555933222427003E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977497059984	WITHOUT_CLASSIFICATION	2.250294001572065E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975957105325	WITHOUT_CLASSIFICATION	2.4042894675154043E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999529400607	WITHOUT_CLASSIFICATION	4.705993926384873E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999174516193	WITHOUT_CLASSIFICATION	8.254838063362278E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993249993083	WITHOUT_CLASSIFICATION	6.750006917736754E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999950816362	WITHOUT_CLASSIFICATION	4.918363861629319E-9	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999994610012599	WITHOUT_CLASSIFICATION	5.389987400651787E-7	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985445560813	WITHOUT_CLASSIFICATION	1.4554439187514535E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999994610012599	WITHOUT_CLASSIFICATION	5.389987400651787E-7	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999987597770187	WITHOUT_CLASSIFICATION	1.2402229813044832E-6	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999986501326001	WITHOUT_CLASSIFICATION	1.3498673998209492E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999969574302362	WITHOUT_CLASSIFICATION	3.0425697638140554E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998547128829	WITHOUT_CLASSIFICATION	1.4528711709871113E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999970134852463	WITHOUT_CLASSIFICATION	2.986514753858725E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998043896086042	WITHOUT_CLASSIFICATION	1.9561039139587074E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998980275945	WITHOUT_CLASSIFICATION	1.0197240558912757E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999994600443332	WITHOUT_CLASSIFICATION	5.399556668638068E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999662408359	WITHOUT_CLASSIFICATION	3.375916400944375E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999992151797888	WITHOUT_CLASSIFICATION	7.848202111996981E-6	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999996421764373	WITHOUT_CLASSIFICATION	3.5782356258089055E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999819085508	WITHOUT_CLASSIFICATION	1.8091449299497526E-8	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999976522845783	WITHOUT_CLASSIFICATION	2.3477154217344507E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999925806958321	WITHOUT_CLASSIFICATION	7.419304167823612E-6	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999927782383	WITHOUT_CLASSIFICATION	7.221761760029602E-9	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999908936088	WITHOUT_CLASSIFICATION	9.106391201757475E-9	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999971735954983	WITHOUT_CLASSIFICATION	2.826404501756099E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999971735954983	WITHOUT_CLASSIFICATION	2.826404501756099E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.999999823142685	WITHOUT_CLASSIFICATION	1.7685731495772873E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999969227717358	WITHOUT_CLASSIFICATION	3.0772282641690834E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999999990282112	WITHOUT_CLASSIFICATION	9.717888063326366E-9	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999990738225272	WITHOUT_CLASSIFICATION	9.261774727029117E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998220930094	WITHOUT_CLASSIFICATION	1.7790699060361362E-7	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995337862037	WITHOUT_CLASSIFICATION	4.6621379630442957E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999992138317505	WITHOUT_CLASSIFICATION	7.861682494532308E-7	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999990216534271	WITHOUT_CLASSIFICATION	9.78346572857425E-7	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999980785933026	WITHOUT_CLASSIFICATION	1.921406697468146E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999598661611	WITHOUT_CLASSIFICATION	4.013383884036566E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997256290117	WITHOUT_CLASSIFICATION	2.7437098836267666E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998387550743	WITHOUT_CLASSIFICATION	1.6124492583764415E-7	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998648483727	WITHOUT_CLASSIFICATION	1.351516273459449E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999994918461395	WITHOUT_CLASSIFICATION	5.081538605887855E-7	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998171269868	WITHOUT_CLASSIFICATION	1.8287301318457985E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999938487829	WITHOUT_CLASSIFICATION	6.15121710386323E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999616569226	WITHOUT_CLASSIFICATION	3.834307735321068E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999993003336981	WITHOUT_CLASSIFICATION	6.996663018747822E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999999532013276	WITHOUT_CLASSIFICATION	4.6798672348953595E-8	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999990169173	WITHOUT_CLASSIFICATION	9.830826938798026E-10	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999954231331568	WITHOUT_CLASSIFICATION	4.57686684313332E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997425546158	WITHOUT_CLASSIFICATION	2.574453843063075E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999409698614	WITHOUT_CLASSIFICATION	5.9030138407994665E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999520945505	WITHOUT_CLASSIFICATION	4.790544952524059E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999989855464452	WITHOUT_CLASSIFICATION	1.0144535547462835E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999991781807956	WITHOUT_CLASSIFICATION	8.218192043418876E-7	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998885218958	WITHOUT_CLASSIFICATION	1.1147810417479329E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999997003117472	WITHOUT_CLASSIFICATION	2.9968825279920536E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999815138666893	WITHOUT_CLASSIFICATION	1.8486133310681717E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998214588086	WITHOUT_CLASSIFICATION	1.7854119130702908E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999987800898626	WITHOUT_CLASSIFICATION	1.2199101373161527E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999998033774537	WITHOUT_CLASSIFICATION	1.9662254629784803E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999963737601383	WITHOUT_CLASSIFICATION	3.626239861688931E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.99999948967057	WITHOUT_CLASSIFICATION	5.103294300045923E-7	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999999632584597	WITHOUT_CLASSIFICATION	3.674154030092375E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999215326276	WITHOUT_CLASSIFICATION	7.846737238134013E-8	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998263130608	WITHOUT_CLASSIFICATION	1.736869391130367E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999981563044159	WITHOUT_CLASSIFICATION	1.843695584133166E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999767593529	WITHOUT_CLASSIFICATION	2.3240647009109065E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998276976518	WITHOUT_CLASSIFICATION	1.723023482335096E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998726210984	WITHOUT_CLASSIFICATION	1.2737890164343034E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986248606045	WITHOUT_CLASSIFICATION	1.3751393954590186E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999983349546213	WITHOUT_CLASSIFICATION	1.6650453786692073E-6	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999946207055	WITHOUT_CLASSIFICATION	5.3792943809067236E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999972371124	WITHOUT_CLASSIFICATION	2.7628875780638205E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999998826464962	WITHOUT_CLASSIFICATION	1.1735350385306954E-7	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.999999913295807	WITHOUT_CLASSIFICATION	8.670419306941944E-8	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999592272352	WITHOUT_CLASSIFICATION	4.0772764803679887E-7	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999999080458545	WITHOUT_CLASSIFICATION	9.195414548572399E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999981581428536	WITHOUT_CLASSIFICATION	1.8418571463700713E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966837369147	WITHOUT_CLASSIFICATION	3.3162630852560756E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999986547811638	WITHOUT_CLASSIFICATION	1.3452188361596153E-6	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999197133853	WITHOUT_CLASSIFICATION	8.028661472350036E-8	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999996549055084	WITHOUT_CLASSIFICATION	3.450944916208159E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.999998358984118	WITHOUT_CLASSIFICATION	1.6410158820551417E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999983317745027	WITHOUT_CLASSIFICATION	1.6682254973584335E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999983317745027	WITHOUT_CLASSIFICATION	1.6682254973584335E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999191737287708	WITHOUT_CLASSIFICATION	8.082627122923292E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999735376325206	WITHOUT_CLASSIFICATION	2.6462367479419163E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999357595551	WITHOUT_CLASSIFICATION	6.424044474760447E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999332917194	WITHOUT_CLASSIFICATION	6.670828058172939E-8	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999821275072	WITHOUT_CLASSIFICATION	1.7872492898577467E-8	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999545499086	WITHOUT_CLASSIFICATION	4.5450091416211786E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998666838287	WITHOUT_CLASSIFICATION	1.3331617127093806E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999786195318	WITHOUT_CLASSIFICATION	2.138046823663696E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999989887408472	WITHOUT_CLASSIFICATION	1.0112591527857633E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999979575649804	WITHOUT_CLASSIFICATION	2.0424350196030784E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998977349362	WITHOUT_CLASSIFICATION	1.0226506371425886E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999982029172653	WITHOUT_CLASSIFICATION	1.797082734765015E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999999232034433	WITHOUT_CLASSIFICATION	7.67965567471619E-8	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999915745584459	WITHOUT_CLASSIFICATION	8.42544155415931E-6	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999210184713	WITHOUT_CLASSIFICATION	7.898152862445056E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999981379229693	WITHOUT_CLASSIFICATION	1.8620770306617104E-6	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.99999490537388	WITHOUT_CLASSIFICATION	5.094626119973369E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999903900005	WITHOUT_CLASSIFICATION	9.609999472351554E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999944180946516	WITHOUT_CLASSIFICATION	5.581905348332551E-6	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999985920266691	WITHOUT_CLASSIFICATION	1.4079733309220044E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999996839135429	WITHOUT_CLASSIFICATION	3.1608645713193886E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999797766688	WITHOUT_CLASSIFICATION	2.02233311149127E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999986988850791	WITHOUT_CLASSIFICATION	1.30111492096004E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999763449862805	WITHOUT_CLASSIFICATION	2.3655013719555053E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999789610182	WITHOUT_CLASSIFICATION	2.103898173708373E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999265313636	WITHOUT_CLASSIFICATION	7.346863637509563E-8	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999994166178341	WITHOUT_CLASSIFICATION	5.833821659898062E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999999735110435	WITHOUT_CLASSIFICATION	2.6488956490738033E-7	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635777397707	WITHOUT_CLASSIFICATION	3.642226022914183E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999996461773356	WITHOUT_CLASSIFICATION	3.5382266442706184E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999763449862805	WITHOUT_CLASSIFICATION	2.3655013719555053E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999997292615576	WITHOUT_CLASSIFICATION	2.7073844248903173E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999979666114	WITHOUT_CLASSIFICATION	2.0333885428196873E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9998716775135094	WITHOUT_CLASSIFICATION	1.2832248649062426E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999999480604301	WITHOUT_CLASSIFICATION	5.193956990317418E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999839514847	WITHOUT_CLASSIFICATION	1.6048515231925315E-8	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999982888188364	WITHOUT_CLASSIFICATION	1.7111811635959294E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999124823269	WITHOUT_CLASSIFICATION	8.751767318807879E-8	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998413235675	WITHOUT_CLASSIFICATION	1.5867643253839263E-7	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999950196263016	WITHOUT_CLASSIFICATION	4.980373698421175E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999999480604301	WITHOUT_CLASSIFICATION	5.193956990317418E-7	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999661634109623	WITHOUT_CLASSIFICATION	3.38365890375982E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998413235675	WITHOUT_CLASSIFICATION	1.5867643253839263E-7	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999998730925456	WITHOUT_CLASSIFICATION	1.2690745442111902E-7	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99999477802796	WITHOUT_CLASSIFICATION	5.221972039976871E-6	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.99999998959103	WITHOUT_CLASSIFICATION	1.0408970041417906E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997256290117	WITHOUT_CLASSIFICATION	2.7437098836267666E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999974273551	WITHOUT_CLASSIFICATION	2.5726448997416456E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996597898142	WITHOUT_CLASSIFICATION	3.4021018573066516E-7	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999246747969	WITHOUT_CLASSIFICATION	7.532520318369645E-8	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998175456843	WITHOUT_CLASSIFICATION	1.824543155272488E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999899359959669	WITHOUT_CLASSIFICATION	1.0064004033114978E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999970769212334	WITHOUT_CLASSIFICATION	2.923078766710644E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999940723348753	WITHOUT_CLASSIFICATION	5.927665124799055E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999983011746468	WITHOUT_CLASSIFICATION	1.698825353170197E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999970951470462	WITHOUT_CLASSIFICATION	2.904852953792843E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996148377573	WITHOUT_CLASSIFICATION	3.851622426584498E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999836154223778	WITHOUT_CLASSIFICATION	1.6384577622170012E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999824334571	WITHOUT_CLASSIFICATION	1.7566542914038555E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999615334846	WITHOUT_CLASSIFICATION	3.846651534141844E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999992660794548	WITHOUT_CLASSIFICATION	7.339205453060774E-7	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999918011584	WITHOUT_CLASSIFICATION	8.19884157160863E-9	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999989831208752	WITHOUT_CLASSIFICATION	1.01687912486486E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999947991384286	WITHOUT_CLASSIFICATION	5.200861571478246E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999994026431961	WITHOUT_CLASSIFICATION	5.97356803999482E-7	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.999999498983369	WITHOUT_CLASSIFICATION	5.010166310005574E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999995359341171	WITHOUT_CLASSIFICATION	4.6406588303153725E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999992501682499	WITHOUT_CLASSIFICATION	7.498317502150354E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998948742845	WITHOUT_CLASSIFICATION	1.0512571539956324E-7	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998229403385	WITHOUT_CLASSIFICATION	1.7705966145113614E-7	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999996023920852	WITHOUT_CLASSIFICATION	3.9760791480443414E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999996661906129	WITHOUT_CLASSIFICATION	3.338093871883699E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999526325556115	WITHOUT_CLASSIFICATION	4.7367444388505224E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999986536832672	WITHOUT_CLASSIFICATION	1.3463167327033821E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988064300733	WITHOUT_CLASSIFICATION	1.1935699267207482E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986896036694	WITHOUT_CLASSIFICATION	1.3103963305687845E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999997943587264	WITHOUT_CLASSIFICATION	2.0564127358242533E-7	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999986096093978	WITHOUT_CLASSIFICATION	1.3903906023197842E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997297497486	WITHOUT_CLASSIFICATION	2.7025025136131015E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999969504892	WITHOUT_CLASSIFICATION	3.049510815605937E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999997832658503	WITHOUT_CLASSIFICATION	2.167341497827918E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999999332937601	WITHOUT_CLASSIFICATION	6.670623990144217E-7	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999454380593	WITHOUT_CLASSIFICATION	5.4561940671049805E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999895623439	WITHOUT_CLASSIFICATION	1.0437656096990394E-7	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999994459306831	WITHOUT_CLASSIFICATION	5.540693169292899E-7	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996324878125	WITHOUT_CLASSIFICATION	3.675121874120043E-7	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999972799170654	WITHOUT_CLASSIFICATION	2.7200829345463406E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998942801263	WITHOUT_CLASSIFICATION	1.057198737291167E-7	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999855283549	WITHOUT_CLASSIFICATION	1.4471645155205094E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999980679085191	WITHOUT_CLASSIFICATION	1.9320914809175274E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999991202815436	WITHOUT_CLASSIFICATION	8.797184564522435E-7	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999271026735276	WITHOUT_CLASSIFICATION	7.289732647245063E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999934941123326	WITHOUT_CLASSIFICATION	6.505887667285459E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999998944580439	WITHOUT_CLASSIFICATION	1.0554195609751383E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999975966045305	WITHOUT_CLASSIFICATION	2.4033954694295174E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999957706685291	WITHOUT_CLASSIFICATION	4.229331470821135E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999991387421914	WITHOUT_CLASSIFICATION	8.612578085795457E-7	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999857253583	WITHOUT_CLASSIFICATION	1.427464179668627E-8	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999984751622788	WITHOUT_CLASSIFICATION	1.5248377211204258E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999820339222	WITHOUT_CLASSIFICATION	1.79660777822135E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999993843369531	WITHOUT_CLASSIFICATION	6.156630469585828E-7	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998065272072557	WITHOUT_CLASSIFICATION	1.9347279274426564E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999954246739734	WITHOUT_CLASSIFICATION	4.575326026564063E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988064300733	WITHOUT_CLASSIFICATION	1.1935699267207482E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999848048855	WITHOUT_CLASSIFICATION	1.5195114534618958E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999984393894	WITHOUT_CLASSIFICATION	1.5606107130495067E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999925721108174	WITHOUT_CLASSIFICATION	7.42788918270707E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999649429846283	WITHOUT_CLASSIFICATION	3.505701537166305E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998899350212	WITHOUT_CLASSIFICATION	1.1006497871455113E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999987854961531	WITHOUT_CLASSIFICATION	1.2145038468713351E-6	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996235337622	WITHOUT_CLASSIFICATION	3.764662377842305E-6	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999696296225	WITHOUT_CLASSIFICATION	3.0370377590776666E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999830461449	WITHOUT_CLASSIFICATION	1.6953855118828546E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999977575088931	WITHOUT_CLASSIFICATION	2.2424911068467753E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999930940333	WITHOUT_CLASSIFICATION	6.905966583702044E-9	TEST
/	WITHOUT_CLASSIFICATION	0.9998182097978779	WITHOUT_CLASSIFICATION	1.8179020212204347E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999994834380826	WITHOUT_CLASSIFICATION	5.165619173868896E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999985010969601	WITHOUT_CLASSIFICATION	1.4989030400026774E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999987597770187	WITHOUT_CLASSIFICATION	1.2402229813044832E-6	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999974389788	WITHOUT_CLASSIFICATION	2.5610210813448598E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999998959916	WITHOUT_CLASSIFICATION	1.0400841154373236E-10	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999997583335942	WITHOUT_CLASSIFICATION	2.416664057941488E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999987549843495	WITHOUT_CLASSIFICATION	1.2450156504054414E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999961922946	WITHOUT_CLASSIFICATION	3.807705445448615E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987543238031	WITHOUT_CLASSIFICATION	1.2456761968166304E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987543238031	WITHOUT_CLASSIFICATION	1.2456761968166304E-6	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997630146994	WITHOUT_CLASSIFICATION	2.3698530065046882E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999963948007883	WITHOUT_CLASSIFICATION	3.6051992115887493E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999365907266	WITHOUT_CLASSIFICATION	6.340927337676389E-8	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999996481109356	WITHOUT_CLASSIFICATION	3.518890644141206E-7	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999998469148524	WITHOUT_CLASSIFICATION	1.5308514763338104E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998830724309	WITHOUT_CLASSIFICATION	1.1692756898624102E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999787421504136	WITHOUT_CLASSIFICATION	2.1257849586402782E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998157379969	WITHOUT_CLASSIFICATION	1.8426200314988766E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998157379969	WITHOUT_CLASSIFICATION	1.8426200314988766E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999997976042165	WITHOUT_CLASSIFICATION	2.0239578350882478E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.999999764173581	WITHOUT_CLASSIFICATION	2.3582641896059062E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999999875105602	WITHOUT_CLASSIFICATION	1.248943980661476E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975916312304	WITHOUT_CLASSIFICATION	2.4083687696147166E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975916312304	WITHOUT_CLASSIFICATION	2.4083687696147166E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975916312304	WITHOUT_CLASSIFICATION	2.4083687696147166E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999998624654108	WITHOUT_CLASSIFICATION	1.375345892304391E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999994394227049	WITHOUT_CLASSIFICATION	5.605772951811152E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999958237687857	WITHOUT_CLASSIFICATION	4.176231214283197E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999805968853435	WITHOUT_CLASSIFICATION	1.9403114656581196E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999393963485	WITHOUT_CLASSIFICATION	6.060365150530723E-8	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999949739888	WITHOUT_CLASSIFICATION	5.0260111954387095E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999614414938	WITHOUT_CLASSIFICATION	3.855850625852693E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999810912085975	WITHOUT_CLASSIFICATION	1.890879140258583E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999998671466291	WITHOUT_CLASSIFICATION	1.328533707727948E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999885599857	WITHOUT_CLASSIFICATION	1.1440014302140417E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999987215019	WITHOUT_CLASSIFICATION	1.2784981001227145E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999984613869112	WITHOUT_CLASSIFICATION	1.5386130888703092E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999990237662446	WITHOUT_CLASSIFICATION	9.76233755286202E-7	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998629812737	WITHOUT_CLASSIFICATION	1.370187262227799E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999604904923	WITHOUT_CLASSIFICATION	3.9509507641411933E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997493773433	WITHOUT_CLASSIFICATION	2.506226567499254E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999978490210739	WITHOUT_CLASSIFICATION	2.150978926037158E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999734135052191	WITHOUT_CLASSIFICATION	2.6586494780886332E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999734135052191	WITHOUT_CLASSIFICATION	2.6586494780886332E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999822287231289	WITHOUT_CLASSIFICATION	1.7771276871171643E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999822287231289	WITHOUT_CLASSIFICATION	1.7771276871171643E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999982938656655	WITHOUT_CLASSIFICATION	1.7061343344953202E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999843615998264	WITHOUT_CLASSIFICATION	1.5638400173500218E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999843615998264	WITHOUT_CLASSIFICATION	1.5638400173500218E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999906400854307	WITHOUT_CLASSIFICATION	9.35991456929946E-6	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999978108636381	WITHOUT_CLASSIFICATION	2.189136361904057E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995498528829	WITHOUT_CLASSIFICATION	4.5014711711267234E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987543238031	WITHOUT_CLASSIFICATION	1.2456761968166304E-6	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999358778378	WITHOUT_CLASSIFICATION	6.412216220902276E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999978108636381	WITHOUT_CLASSIFICATION	2.189136361904057E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999998012098	WITHOUT_CLASSIFICATION	1.987901907934358E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999993661480763	WITHOUT_CLASSIFICATION	6.338519236835017E-7	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999952786324945	WITHOUT_CLASSIFICATION	4.721367505509063E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999805915850282	WITHOUT_CLASSIFICATION	1.9408414971798936E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999979685232	WITHOUT_CLASSIFICATION	2.0314768145878396E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999651220167058	WITHOUT_CLASSIFICATION	3.487798329413014E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999132657788	WITHOUT_CLASSIFICATION	8.673422120482608E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999978410532486	WITHOUT_CLASSIFICATION	2.1589467514674513E-6	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999990006097578	WITHOUT_CLASSIFICATION	9.99390242156446E-7	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999963103004863	WITHOUT_CLASSIFICATION	3.6896995137648435E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999741747421	WITHOUT_CLASSIFICATION	2.5825257887545025E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999952483250202	WITHOUT_CLASSIFICATION	4.751674979904327E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999976855218417	WITHOUT_CLASSIFICATION	2.3144781582655052E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999972552411408	WITHOUT_CLASSIFICATION	2.744758859246373E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999985448624211	WITHOUT_CLASSIFICATION	1.4551375788952132E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999998982016614	WITHOUT_CLASSIFICATION	1.017983386482103E-7	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999609680807	WITHOUT_CLASSIFICATION	3.9031919182340246E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999997704734385	WITHOUT_CLASSIFICATION	2.2952656149286097E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999997704734385	WITHOUT_CLASSIFICATION	2.2952656149286097E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999979197285811	WITHOUT_CLASSIFICATION	2.080271418883947E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999991389802659	WITHOUT_CLASSIFICATION	8.610197340126932E-7	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999993754742859	WITHOUT_CLASSIFICATION	6.245257141819156E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999954552805741	WITHOUT_CLASSIFICATION	4.544719425851368E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999967447495625	WITHOUT_CLASSIFICATION	3.255250437512769E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999124161616	WITHOUT_CLASSIFICATION	8.758383847403031E-8	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999956696627	WITHOUT_CLASSIFICATION	4.330337313125096E-9	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.99999105737031	WITHOUT_CLASSIFICATION	8.942629690103998E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999999454478434	WITHOUT_CLASSIFICATION	5.455215660053383E-7	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999829847712	WITHOUT_CLASSIFICATION	1.7015228726399458E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997532032825	WITHOUT_CLASSIFICATION	2.4679671749922154E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9998182097978779	WITHOUT_CLASSIFICATION	1.8179020212204347E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999553304572	WITHOUT_CLASSIFICATION	4.466954283034699E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999993363045221	WITHOUT_CLASSIFICATION	6.636954778593779E-7	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999988050564546	WITHOUT_CLASSIFICATION	1.194943545499423E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999996160365775	WITHOUT_CLASSIFICATION	3.839634224527477E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999366413288	WITHOUT_CLASSIFICATION	6.33586712485268E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999366413288	WITHOUT_CLASSIFICATION	6.33586712485268E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999917643141628	WITHOUT_CLASSIFICATION	8.23568583718093E-6	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999293978962	WITHOUT_CLASSIFICATION	7.06021037325907E-8	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999992620801633	WITHOUT_CLASSIFICATION	7.379198366929623E-7	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999987961277846	WITHOUT_CLASSIFICATION	1.203872215361685E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999994070807363	WITHOUT_CLASSIFICATION	5.929192636814055E-7	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999833152461656	WITHOUT_CLASSIFICATION	1.6684753834454204E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998852863288	WITHOUT_CLASSIFICATION	1.1471367126005274E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999936212087	WITHOUT_CLASSIFICATION	6.378791288435711E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999292612459	WITHOUT_CLASSIFICATION	7.07387540232558E-8	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999433413743	WITHOUT_CLASSIFICATION	5.6658625583627255E-8	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997171183608	WITHOUT_CLASSIFICATION	2.828816391816354E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999936212087	WITHOUT_CLASSIFICATION	6.378791288435711E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999999977467446	WITHOUT_CLASSIFICATION	2.2532553990198466E-8	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999073239062	WITHOUT_CLASSIFICATION	9.267609383017523E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999742706949	WITHOUT_CLASSIFICATION	2.5729305092159653E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.99997995975084	WITHOUT_CLASSIFICATION	2.004024916005706E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999743474308	WITHOUT_CLASSIFICATION	2.565256925278946E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999974866877	WITHOUT_CLASSIFICATION	2.5133122933814067E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.99999994158216	WITHOUT_CLASSIFICATION	5.841784008874815E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997843169585	WITHOUT_CLASSIFICATION	2.1568304151789524E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999962842533	WITHOUT_CLASSIFICATION	3.715746698605204E-8	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999977591399211	WITHOUT_CLASSIFICATION	2.240860078916748E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999979115502284	WITHOUT_CLASSIFICATION	2.088449771636038E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997712405084	WITHOUT_CLASSIFICATION	2.2875949144668298E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999562630607	WITHOUT_CLASSIFICATION	4.373693936880608E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999984033662973	WITHOUT_CLASSIFICATION	1.5966337026208298E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999951977321243	WITHOUT_CLASSIFICATION	4.802267875700524E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999988867249916	WITHOUT_CLASSIFICATION	1.1132750083915134E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999986749205129	WITHOUT_CLASSIFICATION	1.3250794871496257E-6	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999312681013678	WITHOUT_CLASSIFICATION	6.873189863222678E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999007036097713	WITHOUT_CLASSIFICATION	9.929639022862797E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999962246117	WITHOUT_CLASSIFICATION	3.775388306191213E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997284327075	WITHOUT_CLASSIFICATION	2.715672925682626E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999381089671	WITHOUT_CLASSIFICATION	6.189103288231051E-8	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999169939576211	WITHOUT_CLASSIFICATION	8.300604237891712E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9998102050212031	WITHOUT_CLASSIFICATION	1.8979497879698099E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999251482748	WITHOUT_CLASSIFICATION	7.485172521518498E-8	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999805222698948	WITHOUT_CLASSIFICATION	1.947773010523608E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999435478415	WITHOUT_CLASSIFICATION	5.645215860351445E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999899388825	WITHOUT_CLASSIFICATION	1.0061117381773334E-8	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999081666147	WITHOUT_CLASSIFICATION	9.18333853420715E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999998288579302	WITHOUT_CLASSIFICATION	1.7114206987007274E-7	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999966483386	WITHOUT_CLASSIFICATION	3.3516613401359634E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999998240394835	WITHOUT_CLASSIFICATION	1.7596051659155488E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999997270306523	WITHOUT_CLASSIFICATION	2.729693477011193E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999317687968	WITHOUT_CLASSIFICATION	6.823120320116554E-8	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996962774118	WITHOUT_CLASSIFICATION	3.037225882864693E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999993625970044	WITHOUT_CLASSIFICATION	6.374029956183265E-7	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999949432524	WITHOUT_CLASSIFICATION	5.056747609427744E-9	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999816129977	WITHOUT_CLASSIFICATION	1.8387002150961787E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999978741718164	WITHOUT_CLASSIFICATION	2.125828183575103E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999528480625	WITHOUT_CLASSIFICATION	4.715193738214463E-8	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999986237050288	WITHOUT_CLASSIFICATION	1.3762949712553067E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999850493752	WITHOUT_CLASSIFICATION	1.49506248373064E-8	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999874130101	WITHOUT_CLASSIFICATION	1.2586989824746133E-8	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.99999999212261	WITHOUT_CLASSIFICATION	7.877389922354254E-9	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999988642601408	WITHOUT_CLASSIFICATION	1.135739859139609E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999894463143	WITHOUT_CLASSIFICATION	1.0553685692668755E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999993712320797	WITHOUT_CLASSIFICATION	6.287679201691976E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999715194323326	WITHOUT_CLASSIFICATION	2.848056766744496E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999992032703262	WITHOUT_CLASSIFICATION	7.967296737870643E-7	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999996844371831	WITHOUT_CLASSIFICATION	3.1556281683523865E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942884675795	WITHOUT_CLASSIFICATION	5.711532420577793E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999992643453612	WITHOUT_CLASSIFICATION	7.356546387875814E-7	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998192418142	WITHOUT_CLASSIFICATION	1.807581856769198E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999993616867364	WITHOUT_CLASSIFICATION	6.383132636441502E-7	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999839735686	WITHOUT_CLASSIFICATION	1.6026431369446882E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999996625443712	WITHOUT_CLASSIFICATION	3.374556288087235E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997153170231	WITHOUT_CLASSIFICATION	2.8468297683819196E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997842842016	WITHOUT_CLASSIFICATION	2.1571579847132172E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999977634203923	WITHOUT_CLASSIFICATION	2.2365796076953244E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999926472905563	WITHOUT_CLASSIFICATION	7.352709443772828E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999999718305581	WITHOUT_CLASSIFICATION	2.816944190087518E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999990817675145	WITHOUT_CLASSIFICATION	9.182324856233044E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999998060863631	WITHOUT_CLASSIFICATION	1.9391363702593695E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998326180611945	WITHOUT_CLASSIFICATION	1.6738193880560907E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998449045663	WITHOUT_CLASSIFICATION	1.5509543365938244E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999945973976618	WITHOUT_CLASSIFICATION	5.4026023380860005E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942884675795	WITHOUT_CLASSIFICATION	5.711532420577793E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998137543695	WITHOUT_CLASSIFICATION	1.8624563042839847E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999991304313296	WITHOUT_CLASSIFICATION	8.695686703456131E-7	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999098837662	WITHOUT_CLASSIFICATION	9.011623377183901E-8	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999445170691	WITHOUT_CLASSIFICATION	5.548293104427246E-8	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999734190797824	WITHOUT_CLASSIFICATION	2.6580920217497166E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999982219929924	WITHOUT_CLASSIFICATION	1.7780070076983086E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999292612459	WITHOUT_CLASSIFICATION	7.07387540232558E-8	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999721805420081	WITHOUT_CLASSIFICATION	2.7819457991864698E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999996962774118	WITHOUT_CLASSIFICATION	3.037225882864693E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999944117018645	WITHOUT_CLASSIFICATION	5.5882981354429585E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999975250955	WITHOUT_CLASSIFICATION	2.4749045016182713E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999634685172	WITHOUT_CLASSIFICATION	3.6531482809782015E-7	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995906025001	WITHOUT_CLASSIFICATION	4.0939749993622296E-7	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999996090564286	WITHOUT_CLASSIFICATION	3.9094357145622265E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998200791688	WITHOUT_CLASSIFICATION	1.7992083127450168E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99999071695566	WITHOUT_CLASSIFICATION	9.283044339980007E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996191506932	WITHOUT_CLASSIFICATION	3.808493067081501E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999733426118	WITHOUT_CLASSIFICATION	2.6657388203225144E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999928041441	WITHOUT_CLASSIFICATION	7.195855907313483E-9	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998496487016	WITHOUT_CLASSIFICATION	1.503512984593551E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999119222741	WITHOUT_CLASSIFICATION	8.807772589485521E-8	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998123105911	WITHOUT_CLASSIFICATION	1.8768940895319149E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998123105911	WITHOUT_CLASSIFICATION	1.8768940895319149E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999367558385	WITHOUT_CLASSIFICATION	6.324416141653492E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999995973655665	WITHOUT_CLASSIFICATION	4.0263443345651856E-7	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997511661163	WITHOUT_CLASSIFICATION	2.488338836519435E-7	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999939729649373	WITHOUT_CLASSIFICATION	6.027035062726265E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999880157309	WITHOUT_CLASSIFICATION	1.1984269166946346E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997900878498	WITHOUT_CLASSIFICATION	2.0991215015439968E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999960862254	WITHOUT_CLASSIFICATION	3.913774538983962E-9	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999989138301983	WITHOUT_CLASSIFICATION	1.0861698015809123E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999949060006	WITHOUT_CLASSIFICATION	5.093999404644978E-8	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999885281753059	WITHOUT_CLASSIFICATION	1.1471824694167525E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999987649623987	WITHOUT_CLASSIFICATION	1.2350376012676073E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999983527782248	WITHOUT_CLASSIFICATION	1.647221775304006E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999201379544	WITHOUT_CLASSIFICATION	7.98620456340903E-8	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999998102336	WITHOUT_CLASSIFICATION	1.897664844533822E-10	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998985524979	WITHOUT_CLASSIFICATION	1.0144750211123013E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999500589272	WITHOUT_CLASSIFICATION	4.994107287245367E-8	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999996277703697	WITHOUT_CLASSIFICATION	3.7222963032030014E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999989917002844	WITHOUT_CLASSIFICATION	1.0082997156014354E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999566209633	WITHOUT_CLASSIFICATION	4.3379036736073854E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999827494646	WITHOUT_CLASSIFICATION	1.7250535462639523E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999976398206135	WITHOUT_CLASSIFICATION	2.3601793864212857E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999573297513	WITHOUT_CLASSIFICATION	4.267024869077334E-8	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999997078783208	WITHOUT_CLASSIFICATION	2.921216791933568E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998906541722	WITHOUT_CLASSIFICATION	1.0934582778521157E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999750153559624	WITHOUT_CLASSIFICATION	2.4984644037578283E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992044650398	WITHOUT_CLASSIFICATION	7.955349603185547E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989889829656	WITHOUT_CLASSIFICATION	1.0110170343649769E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992520354319	WITHOUT_CLASSIFICATION	7.479645680053472E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999851685691	WITHOUT_CLASSIFICATION	1.4831430926210717E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999983872786156	WITHOUT_CLASSIFICATION	1.6127213843827976E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999463363037	WITHOUT_CLASSIFICATION	5.366369616554E-8	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999996748343296	WITHOUT_CLASSIFICATION	3.2516567040919914E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999999831488559	WITHOUT_CLASSIFICATION	1.685114410286578E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999793530271	WITHOUT_CLASSIFICATION	2.0646972904795546E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999835416743	WITHOUT_CLASSIFICATION	1.6458325652673507E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999450613292	WITHOUT_CLASSIFICATION	5.4938670965497043E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996546891654	WITHOUT_CLASSIFICATION	3.4531083464201E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999978292212066	WITHOUT_CLASSIFICATION	2.1707787934854694E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999584694238	WITHOUT_CLASSIFICATION	4.153057622042303E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.99999979274674	WITHOUT_CLASSIFICATION	2.0725325994982778E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999918495938133	WITHOUT_CLASSIFICATION	8.150406186753577E-6	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983743177349	WITHOUT_CLASSIFICATION	1.6256822650814641E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999982796869	WITHOUT_CLASSIFICATION	1.7203131005684406E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999883215920176	WITHOUT_CLASSIFICATION	1.1678407982417099E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999986673178081	WITHOUT_CLASSIFICATION	1.3326821919469247E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999985595805151	WITHOUT_CLASSIFICATION	1.4404194849140658E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982392318145	WITHOUT_CLASSIFICATION	1.7607681855414476E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9947728891656549	WITHOUT_CLASSIFICATION	0.005227110834345096	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998676162238	WITHOUT_CLASSIFICATION	1.3238377616944503E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996445831083	WITHOUT_CLASSIFICATION	3.554168916981628E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994590704993	WITHOUT_CLASSIFICATION	5.409295007567688E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992016440618	WITHOUT_CLASSIFICATION	7.983559382402137E-7	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999966951881	WITHOUT_CLASSIFICATION	3.3048117855174237E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999990644043882	WITHOUT_CLASSIFICATION	9.355956117710275E-7	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999986219228032	WITHOUT_CLASSIFICATION	1.378077196818637E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999988320797476	WITHOUT_CLASSIFICATION	1.1679202523933522E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999764078363	WITHOUT_CLASSIFICATION	2.359216367822551E-8	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.99998355114002	WITHOUT_CLASSIFICATION	1.644885997996566E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999995182220717	WITHOUT_CLASSIFICATION	4.817779283666425E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.999999687627989	WITHOUT_CLASSIFICATION	3.123720110167034E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999994865875128	WITHOUT_CLASSIFICATION	5.134124872751481E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999979685473327	WITHOUT_CLASSIFICATION	2.03145266728748E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998976550724	WITHOUT_CLASSIFICATION	1.0234492775103358E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999978721897415	WITHOUT_CLASSIFICATION	2.1278102585402985E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999986741529769	WITHOUT_CLASSIFICATION	1.3258470231228309E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999995350682872	WITHOUT_CLASSIFICATION	4.649317127863231E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.999999965628575	WITHOUT_CLASSIFICATION	3.43714249482503E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999331681143637	WITHOUT_CLASSIFICATION	6.683188563631369E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999586099635	WITHOUT_CLASSIFICATION	4.139003638491869E-8	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999598174151	WITHOUT_CLASSIFICATION	4.018258488758701E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999999885197441	WITHOUT_CLASSIFICATION	1.1480255908161143E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999598174151	WITHOUT_CLASSIFICATION	4.018258488758701E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998141635108	WITHOUT_CLASSIFICATION	1.8583648920500497E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999883747229	WITHOUT_CLASSIFICATION	1.1625277012484446E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998259674652	WITHOUT_CLASSIFICATION	1.7403253485680452E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999702935708	WITHOUT_CLASSIFICATION	2.9706429167680316E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999973327305	WITHOUT_CLASSIFICATION	2.6672695063718903E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999893159464	WITHOUT_CLASSIFICATION	1.0684053595889069E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999991392961793	WITHOUT_CLASSIFICATION	8.607038207855594E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997928666685642	WITHOUT_CLASSIFICATION	2.071333314357149E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999988199530795	WITHOUT_CLASSIFICATION	1.180046920555355E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999928550257	WITHOUT_CLASSIFICATION	7.144974274130225E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999952102456307	WITHOUT_CLASSIFICATION	4.789754369375552E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999201961394	WITHOUT_CLASSIFICATION	7.980386074754034E-8	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997915665353	WITHOUT_CLASSIFICATION	2.0843346484715567E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999993063744253	WITHOUT_CLASSIFICATION	6.936255746998114E-6	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999995268324152	WITHOUT_CLASSIFICATION	4.7316758470601474E-7	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999935941472	WITHOUT_CLASSIFICATION	6.405852850076311E-9	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999849457898	WITHOUT_CLASSIFICATION	1.505421026300567E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999994794865598	WITHOUT_CLASSIFICATION	5.20513440221119E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999957852219	WITHOUT_CLASSIFICATION	4.214778129408418E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999941893835135	WITHOUT_CLASSIFICATION	5.810616486574416E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996813824941	WITHOUT_CLASSIFICATION	3.186175059301606E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999998234815308	WITHOUT_CLASSIFICATION	1.765184692353814E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997972065906596	WITHOUT_CLASSIFICATION	2.0279340934030663E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999743945968	WITHOUT_CLASSIFICATION	2.560540330725842E-8	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999971637744075	WITHOUT_CLASSIFICATION	2.836225592421384E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999813172389216	WITHOUT_CLASSIFICATION	1.8682761078423823E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999942936825776	WITHOUT_CLASSIFICATION	5.706317422373754E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999987089503674	WITHOUT_CLASSIFICATION	1.291049632722045E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99999998596009	WITHOUT_CLASSIFICATION	1.4039909994888374E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999994658825193	WITHOUT_CLASSIFICATION	5.341174806491857E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999948084868884	WITHOUT_CLASSIFICATION	5.191513111529187E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999999466652468	WITHOUT_CLASSIFICATION	5.333475321198222E-7	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999668517816	WITHOUT_CLASSIFICATION	3.314821833990684E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999804773116608	WITHOUT_CLASSIFICATION	1.952268833911648E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.99999901533808	WITHOUT_CLASSIFICATION	9.846619199575209E-7	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999877177374499	WITHOUT_CLASSIFICATION	1.2282262550136853E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999977877015859	WITHOUT_CLASSIFICATION	2.212298414179989E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999843690625	WITHOUT_CLASSIFICATION	1.5630937626382425E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999825326628169	WITHOUT_CLASSIFICATION	1.746733718311597E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999632211016	WITHOUT_CLASSIFICATION	3.6778898404130266E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.999949106907048	WITHOUT_CLASSIFICATION	5.089309295198305E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.999999817019204	WITHOUT_CLASSIFICATION	1.8298079599027468E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997284722253473	WITHOUT_CLASSIFICATION	2.715277746526646E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999813172389216	WITHOUT_CLASSIFICATION	1.8682761078423823E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999652187391491	WITHOUT_CLASSIFICATION	3.478126085078829E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999992446359466	WITHOUT_CLASSIFICATION	7.553640534276588E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999876711074712	WITHOUT_CLASSIFICATION	1.2328892528843426E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999405594588	WITHOUT_CLASSIFICATION	5.944054119779771E-7	TEST
special case	WITHOUT_CLASSIFICATION	0.9999995085574126	WITHOUT_CLASSIFICATION	4.914425874679775E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999979300008609	WITHOUT_CLASSIFICATION	2.06999913921929E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.99999999868341	WITHOUT_CLASSIFICATION	1.316590025987444E-9	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999957536561581	WITHOUT_CLASSIFICATION	4.2463438419018525E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999985975649954	WITHOUT_CLASSIFICATION	1.4024350046126645E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998964821553	WITHOUT_CLASSIFICATION	1.0351784471082312E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999960867587452	WITHOUT_CLASSIFICATION	3.913241254744621E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999990895791744	WITHOUT_CLASSIFICATION	9.104208255875759E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999962294067535	WITHOUT_CLASSIFICATION	3.7705932465136906E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999947380567743	WITHOUT_CLASSIFICATION	5.261943225623131E-6	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999867510948	WITHOUT_CLASSIFICATION	1.3248905223799792E-8	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999604521417	WITHOUT_CLASSIFICATION	3.95478583217308E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999433967042	WITHOUT_CLASSIFICATION	5.6603295730409215E-8	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997099152622	WITHOUT_CLASSIFICATION	2.900847377021615E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999804007852	WITHOUT_CLASSIFICATION	1.9599214877570392E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999652187391491	WITHOUT_CLASSIFICATION	3.478126085078829E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999973063312736	WITHOUT_CLASSIFICATION	2.693668726431979E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999994555849024	WITHOUT_CLASSIFICATION	5.444150976004715E-7	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999998919665683	WITHOUT_CLASSIFICATION	1.0803343170580096E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999735375703	WITHOUT_CLASSIFICATION	2.6462429723832614E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999996776817774	WITHOUT_CLASSIFICATION	3.2231822250962785E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999942012654722	WITHOUT_CLASSIFICATION	5.798734527789865E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999942012654722	WITHOUT_CLASSIFICATION	5.798734527789865E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999270818518	WITHOUT_CLASSIFICATION	7.291814812981047E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999942012654722	WITHOUT_CLASSIFICATION	5.798734527789865E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999942012654722	WITHOUT_CLASSIFICATION	5.798734527789865E-6	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999996019934086	WITHOUT_CLASSIFICATION	3.980065912900441E-7	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999989449454684	WITHOUT_CLASSIFICATION	1.055054531645525E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998295820169	WITHOUT_CLASSIFICATION	1.7041798298438037E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998612962363	WITHOUT_CLASSIFICATION	1.3870376370022552E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999467176431	WITHOUT_CLASSIFICATION	5.328235689263144E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999990002399172	WITHOUT_CLASSIFICATION	9.99760082762177E-7	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.99999972783028	WITHOUT_CLASSIFICATION	2.721697199433363E-7	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999989166050964	WITHOUT_CLASSIFICATION	1.0833949035634852E-6	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999983333087863	WITHOUT_CLASSIFICATION	1.666691213682678E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999809350722941	WITHOUT_CLASSIFICATION	1.9064927705914055E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999994594318153	WITHOUT_CLASSIFICATION	5.40568184582212E-7	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995655869779	WITHOUT_CLASSIFICATION	4.344130221609272E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999994069812518	WITHOUT_CLASSIFICATION	5.930187481810069E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999979967914483	WITHOUT_CLASSIFICATION	2.003208551703996E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999495204906	WITHOUT_CLASSIFICATION	5.0479509320204055E-8	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999513214331833	WITHOUT_CLASSIFICATION	4.8678566816775486E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993249993083	WITHOUT_CLASSIFICATION	6.750006917736754E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999976281186522	WITHOUT_CLASSIFICATION	2.371881347759098E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999941256268088	WITHOUT_CLASSIFICATION	5.874373191223967E-6	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999975145708944	WITHOUT_CLASSIFICATION	2.48542910565955E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999991324399695	WITHOUT_CLASSIFICATION	8.67560030535645E-7	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999977550498724	WITHOUT_CLASSIFICATION	2.2449501276013677E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993249993083	WITHOUT_CLASSIFICATION	6.750006917736754E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999942936825776	WITHOUT_CLASSIFICATION	5.706317422373754E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999992446971399	WITHOUT_CLASSIFICATION	7.553028601020191E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987389603554	WITHOUT_CLASSIFICATION	1.26103964458811E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993051157026	WITHOUT_CLASSIFICATION	6.94884297400904E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999985800938092	WITHOUT_CLASSIFICATION	1.4199061908799827E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999318178581	WITHOUT_CLASSIFICATION	6.818214197698702E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999846824741316	WITHOUT_CLASSIFICATION	1.5317525868396255E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999989778577744	WITHOUT_CLASSIFICATION	1.0221422256253736E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999982418383181	WITHOUT_CLASSIFICATION	1.7581616819785295E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999632084177	WITHOUT_CLASSIFICATION	3.6791582322683384E-8	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999998063377193	WITHOUT_CLASSIFICATION	1.9366228063086724E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999995156651363	WITHOUT_CLASSIFICATION	4.843348637075638E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999994166777919	WITHOUT_CLASSIFICATION	5.833222080581979E-7	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999995789677479	WITHOUT_CLASSIFICATION	4.210322520233212E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999930861141174	WITHOUT_CLASSIFICATION	6.913885882615975E-6	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998932810221	WITHOUT_CLASSIFICATION	1.0671897784956795E-7	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999993103034275	WITHOUT_CLASSIFICATION	6.89696572509711E-7	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999987963256166	WITHOUT_CLASSIFICATION	1.2036743834228562E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995451162188	WITHOUT_CLASSIFICATION	4.548837812486491E-7	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999967327427443	WITHOUT_CLASSIFICATION	3.267257255758236E-6	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999985986096511	WITHOUT_CLASSIFICATION	1.4013903489107688E-6	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999983702725771	WITHOUT_CLASSIFICATION	1.6297274229033348E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999979842396	WITHOUT_CLASSIFICATION	2.015760516169587E-9	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999982418383181	WITHOUT_CLASSIFICATION	1.7581616819785295E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998355711345	WITHOUT_CLASSIFICATION	1.6442886557813576E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999998940700301	WITHOUT_CLASSIFICATION	1.0592996983783007E-7	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999997335410198	WITHOUT_CLASSIFICATION	2.664589801654604E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999946205233142	WITHOUT_CLASSIFICATION	5.379476685726013E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931856350638	WITHOUT_CLASSIFICATION	6.814364936191432E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999924551082751	WITHOUT_CLASSIFICATION	7.544891724925008E-6	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999977872120147	WITHOUT_CLASSIFICATION	2.212787985274006E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999997508155462	WITHOUT_CLASSIFICATION	2.491844538011095E-7	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999991870285247	WITHOUT_CLASSIFICATION	8.129714751474381E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999901705806588	WITHOUT_CLASSIFICATION	9.829419341218488E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998586918492	WITHOUT_CLASSIFICATION	1.4130815084892381E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999990332422907	WITHOUT_CLASSIFICATION	9.667577094146864E-7	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999996383428108	WITHOUT_CLASSIFICATION	3.61657189166942E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999996559460977	WITHOUT_CLASSIFICATION	3.440539023190792E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999957103271122	WITHOUT_CLASSIFICATION	4.289672887766378E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921683119	WITHOUT_CLASSIFICATION	7.831688096143545E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998586918492	WITHOUT_CLASSIFICATION	1.4130815084892381E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999980207486672	WITHOUT_CLASSIFICATION	1.979251332758466E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999998077641794	WITHOUT_CLASSIFICATION	1.9223582071589603E-7	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998057799356	WITHOUT_CLASSIFICATION	1.942200643655427E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999919341749668	WITHOUT_CLASSIFICATION	8.065825033277842E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.999999484652404	WITHOUT_CLASSIFICATION	5.15347596051269E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999999827614707	WITHOUT_CLASSIFICATION	1.7238529299366236E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999193804187	WITHOUT_CLASSIFICATION	8.061958139142723E-8	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987311519195	WITHOUT_CLASSIFICATION	1.2688480804336071E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997741717143	WITHOUT_CLASSIFICATION	2.2582828584615834E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986453969487	WITHOUT_CLASSIFICATION	1.354603051286277E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999677078161	WITHOUT_CLASSIFICATION	3.229218390758322E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995980052017	WITHOUT_CLASSIFICATION	4.0199479831924566E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999110782382	WITHOUT_CLASSIFICATION	8.892176174415362E-8	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999110782382	WITHOUT_CLASSIFICATION	8.892176174415362E-8	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999982336340422	WITHOUT_CLASSIFICATION	1.7663659578180087E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998570563218	WITHOUT_CLASSIFICATION	1.4294367829602225E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.999999228730037	WITHOUT_CLASSIFICATION	7.712699630560634E-7	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999986941442558	WITHOUT_CLASSIFICATION	1.3058557441347187E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999851313387323	WITHOUT_CLASSIFICATION	1.4868661267665158E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998178025044	WITHOUT_CLASSIFICATION	1.8219749560589146E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999681701670742	WITHOUT_CLASSIFICATION	3.1829832925854275E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989805458867	WITHOUT_CLASSIFICATION	1.019454113305129E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999975646690923	WITHOUT_CLASSIFICATION	2.43533090765869E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945408977655	WITHOUT_CLASSIFICATION	5.459102234532948E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998178025044	WITHOUT_CLASSIFICATION	1.8219749560589146E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999681701670742	WITHOUT_CLASSIFICATION	3.1829832925854275E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989805458867	WITHOUT_CLASSIFICATION	1.019454113305129E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999915413126123	WITHOUT_CLASSIFICATION	8.458687387698322E-6	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999962708689832	WITHOUT_CLASSIFICATION	3.7291310167113026E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998987115105	WITHOUT_CLASSIFICATION	1.0128848945337552E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999996887646377	WITHOUT_CLASSIFICATION	3.1123536227027083E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999982880341438	WITHOUT_CLASSIFICATION	1.7119658562312384E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999926339432964	WITHOUT_CLASSIFICATION	7.366056703655131E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999994062208586	WITHOUT_CLASSIFICATION	5.937791414744195E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999965225760545	WITHOUT_CLASSIFICATION	3.4774239455513794E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999671657348376	WITHOUT_CLASSIFICATION	3.2834265162448914E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999894467381195	WITHOUT_CLASSIFICATION	1.0553261880399352E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999998380527842	WITHOUT_CLASSIFICATION	1.619472158146314E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997165280201742	WITHOUT_CLASSIFICATION	2.8347197982587396E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999905930131643	WITHOUT_CLASSIFICATION	9.406986835786632E-6	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999992983834327	WITHOUT_CLASSIFICATION	7.016165673128067E-7	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999611080872	WITHOUT_CLASSIFICATION	3.8891912873212095E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998359561807	WITHOUT_CLASSIFICATION	1.640438191845512E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995174019538239	WITHOUT_CLASSIFICATION	4.825980461760605E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999861107644548	WITHOUT_CLASSIFICATION	1.3889235545242716E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994093216943	WITHOUT_CLASSIFICATION	5.906783056334401E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999960162960907	WITHOUT_CLASSIFICATION	3.983703909254435E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999761585215	WITHOUT_CLASSIFICATION	2.3841478529805515E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999042211488	WITHOUT_CLASSIFICATION	9.577885124203579E-8	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995623122931	WITHOUT_CLASSIFICATION	4.3768770692782066E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999535111506	WITHOUT_CLASSIFICATION	4.64888494969717E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999260760837	WITHOUT_CLASSIFICATION	7.392391631934037E-8	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999985225071568	WITHOUT_CLASSIFICATION	1.477492843114682E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858838531916	WITHOUT_CLASSIFICATION	1.4116146808432144E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440267314958	WITHOUT_CLASSIFICATION	5.5973268504088464E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998122696355	WITHOUT_CLASSIFICATION	1.8773036456349428E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569057343061	WITHOUT_CLASSIFICATION	4.309426569396261E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999209368168612	WITHOUT_CLASSIFICATION	7.906318313876197E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999992509310377	WITHOUT_CLASSIFICATION	7.490689622184347E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999992509310377	WITHOUT_CLASSIFICATION	7.490689622184347E-7	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999965902635759	WITHOUT_CLASSIFICATION	3.409736424152391E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999861747677283	WITHOUT_CLASSIFICATION	1.3825232271587386E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999993460330172	WITHOUT_CLASSIFICATION	6.539669828246592E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9998182097978779	WITHOUT_CLASSIFICATION	1.8179020212204347E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999986497774211	WITHOUT_CLASSIFICATION	1.3502225789492069E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998069917395	WITHOUT_CLASSIFICATION	1.930082604970351E-7	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.999990035571924	WITHOUT_CLASSIFICATION	9.964428075946215E-6	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999995638868544	WITHOUT_CLASSIFICATION	4.361131456927896E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999997922965921	WITHOUT_CLASSIFICATION	2.07703408030875E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997963890402	WITHOUT_CLASSIFICATION	2.036109597961815E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981195079635	WITHOUT_CLASSIFICATION	1.8804920365535968E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988181802517	WITHOUT_CLASSIFICATION	1.1818197483620637E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972626252878	WITHOUT_CLASSIFICATION	2.7373747121823586E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988498238412	WITHOUT_CLASSIFICATION	1.1501761587716571E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942661358038	WITHOUT_CLASSIFICATION	5.733864196184153E-6	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986179325596	WITHOUT_CLASSIFICATION	1.382067440365247E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991320048169	WITHOUT_CLASSIFICATION	8.679951830743789E-7	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990343831596	WITHOUT_CLASSIFICATION	9.65616840324186E-7	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961744255403	WITHOUT_CLASSIFICATION	3.8255744596740765E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951172003049	WITHOUT_CLASSIFICATION	4.882799695178644E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999722832756	WITHOUT_CLASSIFICATION	2.7716724373356345E-8	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999948503904738	WITHOUT_CLASSIFICATION	5.1496095262013856E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999787209656592	WITHOUT_CLASSIFICATION	2.127903434077703E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999901255094	WITHOUT_CLASSIFICATION	9.874490522206782E-9	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998863778703	WITHOUT_CLASSIFICATION	1.136221297352199E-7	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999996955629498	WITHOUT_CLASSIFICATION	3.044370502562183E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999998766814703	WITHOUT_CLASSIFICATION	1.2331852969773309E-6	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999466767059	WITHOUT_CLASSIFICATION	5.3323294086877795E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999787209656592	WITHOUT_CLASSIFICATION	2.127903434077703E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999787209656592	WITHOUT_CLASSIFICATION	2.127903434077703E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999960608648447	WITHOUT_CLASSIFICATION	3.939135155281022E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999993753521265	WITHOUT_CLASSIFICATION	6.246478736016894E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999787518540344	WITHOUT_CLASSIFICATION	2.1248145965556957E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999972549422845	WITHOUT_CLASSIFICATION	2.745057715334865E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999976855218417	WITHOUT_CLASSIFICATION	2.3144781582655052E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999960162960907	WITHOUT_CLASSIFICATION	3.983703909254435E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999974424415573	WITHOUT_CLASSIFICATION	2.5575584426634433E-6	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999996386443931	WITHOUT_CLASSIFICATION	3.6135560696288926E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986638537729	WITHOUT_CLASSIFICATION	1.3361462271484663E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956708440596	WITHOUT_CLASSIFICATION	4.329155940367853E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999987094224893	WITHOUT_CLASSIFICATION	1.2905775107551889E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971248436335	WITHOUT_CLASSIFICATION	2.875156366430051E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996285266094	WITHOUT_CLASSIFICATION	3.7147339068792415E-7	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999996285266094	WITHOUT_CLASSIFICATION	3.7147339068792415E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992030859157	WITHOUT_CLASSIFICATION	7.969140842421062E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992030859157	WITHOUT_CLASSIFICATION	7.969140842421062E-7	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979493258226	WITHOUT_CLASSIFICATION	2.0506741773277547E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962912766379	WITHOUT_CLASSIFICATION	3.7087233620082014E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999988147659526	WITHOUT_CLASSIFICATION	1.1852340473833477E-6	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753347133908	WITHOUT_CLASSIFICATION	2.4665286609216373E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999992169585828	WITHOUT_CLASSIFICATION	7.830414171480336E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998897030656	WITHOUT_CLASSIFICATION	1.102969344257755E-7	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978050650498	WITHOUT_CLASSIFICATION	2.194934950202437E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999766382403	WITHOUT_CLASSIFICATION	2.3361759717424123E-7	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996476538022	WITHOUT_CLASSIFICATION	3.523461977707875E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999436132465156	WITHOUT_CLASSIFICATION	5.6386753484262416E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993278654224	WITHOUT_CLASSIFICATION	6.721345775286567E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999993453941003	WITHOUT_CLASSIFICATION	6.546058996147803E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998473862813	WITHOUT_CLASSIFICATION	1.52613718730568E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998066825602	WITHOUT_CLASSIFICATION	1.93317439760958E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999990665046946	WITHOUT_CLASSIFICATION	9.334953055402919E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999990665046946	WITHOUT_CLASSIFICATION	9.334953055402919E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999990665046946	WITHOUT_CLASSIFICATION	9.334953055402919E-7	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999994471185235	WITHOUT_CLASSIFICATION	5.528814765001852E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999989997079292	WITHOUT_CLASSIFICATION	1.0002920709021994E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999822511542	WITHOUT_CLASSIFICATION	1.7748845820655378E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999735377637752	WITHOUT_CLASSIFICATION	2.6462236224829033E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966048970903	WITHOUT_CLASSIFICATION	3.3951029098197087E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653951652938	WITHOUT_CLASSIFICATION	3.4604834706229994E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999204738124	WITHOUT_CLASSIFICATION	7.952618763549414E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994503510838	WITHOUT_CLASSIFICATION	5.496489161554115E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999961309674	WITHOUT_CLASSIFICATION	3.869032676327959E-9	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999732329424	WITHOUT_CLASSIFICATION	2.6767057599163925E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999985260801	WITHOUT_CLASSIFICATION	1.473919849629813E-9	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997116368424	WITHOUT_CLASSIFICATION	2.8836315753982054E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990959875622	WITHOUT_CLASSIFICATION	9.040124378686179E-7	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999410024207	WITHOUT_CLASSIFICATION	5.899757927498201E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999971857150113	WITHOUT_CLASSIFICATION	2.814284988842227E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999998484163176	WITHOUT_CLASSIFICATION	1.5158368237601304E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991806591307	WITHOUT_CLASSIFICATION	8.193408692778822E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999987070071191	WITHOUT_CLASSIFICATION	1.292992880824513E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.99999849354998	WITHOUT_CLASSIFICATION	1.50645001990154E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999657981228	WITHOUT_CLASSIFICATION	3.420187728613055E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998889747331	WITHOUT_CLASSIFICATION	1.1102526690877682E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999968783487808	WITHOUT_CLASSIFICATION	3.1216512191517242E-6	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998893297364	WITHOUT_CLASSIFICATION	1.1067026372641915E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999985228854065	WITHOUT_CLASSIFICATION	1.4771145935850464E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999994837262025	WITHOUT_CLASSIFICATION	5.162737974117537E-7	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999993122783692	WITHOUT_CLASSIFICATION	6.877216307623489E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999998411467556	WITHOUT_CLASSIFICATION	1.588532443573281E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.999998383427566	WITHOUT_CLASSIFICATION	1.6165724340532007E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998647141454	WITHOUT_CLASSIFICATION	1.352858546483158E-7	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999982081321539	WITHOUT_CLASSIFICATION	1.7918678461067103E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999390107579	WITHOUT_CLASSIFICATION	6.098924211961575E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999676718947	WITHOUT_CLASSIFICATION	3.2328105289775597E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999998806381712	WITHOUT_CLASSIFICATION	1.193618287999977E-6	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999999990226363	WITHOUT_CLASSIFICATION	9.773636986598784E-9	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999738202453055	WITHOUT_CLASSIFICATION	2.6179754694490988E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999998164678613	WITHOUT_CLASSIFICATION	1.83532138750577E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999903900005	WITHOUT_CLASSIFICATION	9.609999472351554E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999995795362085	WITHOUT_CLASSIFICATION	4.20463791438653E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999695121505	WITHOUT_CLASSIFICATION	3.048784942101627E-8	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998456107664	WITHOUT_CLASSIFICATION	1.5438923348516834E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999897972367	WITHOUT_CLASSIFICATION	1.0202763278051506E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995277533718	WITHOUT_CLASSIFICATION	4.722466282352019E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999999845315511	WITHOUT_CLASSIFICATION	1.54684488950947E-7	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999666789587	WITHOUT_CLASSIFICATION	3.3321041365313764E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996251991016	WITHOUT_CLASSIFICATION	3.748008985181753E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999998292148727	WITHOUT_CLASSIFICATION	1.70785127386372E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.999999767897707	WITHOUT_CLASSIFICATION	2.3210229302800632E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999971735954983	WITHOUT_CLASSIFICATION	2.826404501756099E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999991339954588	WITHOUT_CLASSIFICATION	8.660045412275385E-7	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997890312168686	WITHOUT_CLASSIFICATION	2.1096878313134074E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999510234108	WITHOUT_CLASSIFICATION	4.8976589128816665E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999684387202652	WITHOUT_CLASSIFICATION	3.156127973479574E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999998789736779	WITHOUT_CLASSIFICATION	1.210263221013639E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999846187732451	WITHOUT_CLASSIFICATION	1.5381226754916765E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995939732412	WITHOUT_CLASSIFICATION	4.060267587734091E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999973526823938	WITHOUT_CLASSIFICATION	2.6473176061678482E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998228759883605	WITHOUT_CLASSIFICATION	1.7712401163952533E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999993298459176	WITHOUT_CLASSIFICATION	6.701540824436006E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999990605428238	WITHOUT_CLASSIFICATION	9.394571762433126E-7	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999782478419861	WITHOUT_CLASSIFICATION	2.17521580140067E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999997937195952	WITHOUT_CLASSIFICATION	2.0628040485841143E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999897326859	WITHOUT_CLASSIFICATION	1.026731414204758E-8	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999984920677438	WITHOUT_CLASSIFICATION	1.5079322561860825E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999993912668936	WITHOUT_CLASSIFICATION	6.087331063366555E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998883575293	WITHOUT_CLASSIFICATION	1.1164247071985507E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999934192207	WITHOUT_CLASSIFICATION	6.580779324288808E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999980916832	WITHOUT_CLASSIFICATION	1.90831691028785E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999097021	WITHOUT_CLASSIFICATION	9.029790002736246E-8	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999763449862805	WITHOUT_CLASSIFICATION	2.3655013719555053E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999763449862805	WITHOUT_CLASSIFICATION	2.3655013719555053E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999989769521563	WITHOUT_CLASSIFICATION	1.0230478435872897E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999988160128364	WITHOUT_CLASSIFICATION	1.1839871636996256E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999996953314363	WITHOUT_CLASSIFICATION	3.0466856363157706E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998986500156	WITHOUT_CLASSIFICATION	1.0134998434530901E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999834131583	WITHOUT_CLASSIFICATION	1.6586841741531255E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999971375609652	WITHOUT_CLASSIFICATION	2.8624390348530416E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999727775924	WITHOUT_CLASSIFICATION	2.7222407504722162E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999528853584	WITHOUT_CLASSIFICATION	4.711464158865113E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999990275537864	WITHOUT_CLASSIFICATION	9.72446213480854E-7	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999989463981949	WITHOUT_CLASSIFICATION	1.0536018051350933E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999894033395	WITHOUT_CLASSIFICATION	1.0596660484929141E-8	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999923540024	WITHOUT_CLASSIFICATION	7.645997619247204E-9	TEST
a composite key	WITHOUT_CLASSIFICATION	0.999999696070823	WITHOUT_CLASSIFICATION	3.0392917698477853E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999897821042	WITHOUT_CLASSIFICATION	1.0217895698174684E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996988638653	WITHOUT_CLASSIFICATION	3.011361347045954E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999936607586772	WITHOUT_CLASSIFICATION	6.339241322796885E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999999444822435	WITHOUT_CLASSIFICATION	5.5517756592438815E-8	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999995968020906	WITHOUT_CLASSIFICATION	4.0319790931109476E-7	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999985160181831	WITHOUT_CLASSIFICATION	1.4839818169530442E-6	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999938405010541	WITHOUT_CLASSIFICATION	6.15949894586911E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999993446539861	WITHOUT_CLASSIFICATION	6.553460139757536E-7	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999492650052	WITHOUT_CLASSIFICATION	5.073499481057721E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999925613838349	WITHOUT_CLASSIFICATION	7.438616165049461E-6	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999997041541071	WITHOUT_CLASSIFICATION	2.9584589289511767E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999919695501	WITHOUT_CLASSIFICATION	8.030449872743003E-9	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999993022905631	WITHOUT_CLASSIFICATION	6.977094369702943E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998346458223	WITHOUT_CLASSIFICATION	1.6535417772239408E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999995876382909	WITHOUT_CLASSIFICATION	4.1236170904823887E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999975716097095	WITHOUT_CLASSIFICATION	2.4283902905948637E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999998058894307	WITHOUT_CLASSIFICATION	1.9411056923998363E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999998851816931	WITHOUT_CLASSIFICATION	1.1481830689645404E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999025609813	WITHOUT_CLASSIFICATION	9.743901872644009E-8	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.999999878929209	WITHOUT_CLASSIFICATION	1.2107079097293152E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999991238779388	WITHOUT_CLASSIFICATION	8.76122061116698E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999995084039613	WITHOUT_CLASSIFICATION	4.915960385616009E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999995084039613	WITHOUT_CLASSIFICATION	4.915960385616009E-7	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999996415209551	WITHOUT_CLASSIFICATION	3.5847904496229316E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999972062877903	WITHOUT_CLASSIFICATION	2.7937122097367782E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999993383339526	WITHOUT_CLASSIFICATION	6.61666047346581E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999955714189165	WITHOUT_CLASSIFICATION	4.428581083459664E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999998685356107	WITHOUT_CLASSIFICATION	1.3146438931887336E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999958584485495	WITHOUT_CLASSIFICATION	4.141551450420945E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999929509503183	WITHOUT_CLASSIFICATION	7.049049681645028E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999999241294091	WITHOUT_CLASSIFICATION	7.587059084556632E-8	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999998456072859	WITHOUT_CLASSIFICATION	1.5439271409094311E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9997640040505404	WITHOUT_CLASSIFICATION	2.3599594945959536E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998900912709	WITHOUT_CLASSIFICATION	1.0990872910531902E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998493735652	WITHOUT_CLASSIFICATION	1.5062643475843613E-7	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999980001379476	WITHOUT_CLASSIFICATION	1.9998620524158865E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999980318325045	WITHOUT_CLASSIFICATION	1.968167495599521E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999994555757928	WITHOUT_CLASSIFICATION	5.444242072700634E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999983091274566	WITHOUT_CLASSIFICATION	1.6908725434689469E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999889454952574	WITHOUT_CLASSIFICATION	1.1054504742598147E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999889454952574	WITHOUT_CLASSIFICATION	1.1054504742598147E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999873449902	WITHOUT_CLASSIFICATION	1.265500980759262E-8	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996675330753	WITHOUT_CLASSIFICATION	3.3246692463957914E-7	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999987691044555	WITHOUT_CLASSIFICATION	1.2308955445281471E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998918717796	WITHOUT_CLASSIFICATION	1.0812822043667065E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999066726482	WITHOUT_CLASSIFICATION	9.332735181788075E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635777397707	WITHOUT_CLASSIFICATION	3.642226022914183E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999721310306	WITHOUT_CLASSIFICATION	2.7868969280534933E-8	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999996163571302	WITHOUT_CLASSIFICATION	3.8364286977975057E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998712862898	WITHOUT_CLASSIFICATION	1.2871371034908415E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.999995399720891	WITHOUT_CLASSIFICATION	4.600279109045028E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.999995399720891	WITHOUT_CLASSIFICATION	4.600279109045028E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999986057747515	WITHOUT_CLASSIFICATION	1.3942252484704042E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999926844939	WITHOUT_CLASSIFICATION	7.3155059873426035E-9	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999709423212	WITHOUT_CLASSIFICATION	2.9057678789891732E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999900002134079	WITHOUT_CLASSIFICATION	9.999786592043122E-6	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999997220150153	WITHOUT_CLASSIFICATION	2.779849846615352E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999908233078	WITHOUT_CLASSIFICATION	9.176692191527902E-9	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999971049442434	WITHOUT_CLASSIFICATION	2.895055756624985E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.99999477802796	WITHOUT_CLASSIFICATION	5.221972039976871E-6	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999845474992	WITHOUT_CLASSIFICATION	1.5452500829644425E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999995498528829	WITHOUT_CLASSIFICATION	4.5014711711267234E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999992156444942	WITHOUT_CLASSIFICATION	7.843555057907739E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999796892601392	WITHOUT_CLASSIFICATION	2.031073986078148E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999975966045305	WITHOUT_CLASSIFICATION	2.4033954694295174E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999649429846283	WITHOUT_CLASSIFICATION	3.505701537166305E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999990792993791	WITHOUT_CLASSIFICATION	9.207006208936233E-6	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999982938656655	WITHOUT_CLASSIFICATION	1.7061343344953202E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999983872786156	WITHOUT_CLASSIFICATION	1.6127213843827976E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999795989643	WITHOUT_CLASSIFICATION	2.0401035720876627E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999996538532803	WITHOUT_CLASSIFICATION	3.461467197289025E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.9999997258728028	WITHOUT_CLASSIFICATION	2.7412719713424194E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999962482699212	WITHOUT_CLASSIFICATION	3.7517300787177847E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999995599193241	WITHOUT_CLASSIFICATION	4.4008067592219147E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999975513392843	WITHOUT_CLASSIFICATION	2.448660715697604E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999906400854307	WITHOUT_CLASSIFICATION	9.35991456929946E-6	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999972086964425	WITHOUT_CLASSIFICATION	2.791303557462486E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999992528013861	WITHOUT_CLASSIFICATION	7.471986138574264E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997560784573	WITHOUT_CLASSIFICATION	2.439215426734277E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997534311813	WITHOUT_CLASSIFICATION	2.4656881872897177E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997259262158564	WITHOUT_CLASSIFICATION	2.7407378414365236E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999278241194	WITHOUT_CLASSIFICATION	7.217588056004721E-8	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999778070627	WITHOUT_CLASSIFICATION	2.2192937210240137E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999366413288	WITHOUT_CLASSIFICATION	6.33586712485268E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999969551542066	WITHOUT_CLASSIFICATION	3.0448457933643885E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999938946986355	WITHOUT_CLASSIFICATION	6.105301364486327E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999970481419382	WITHOUT_CLASSIFICATION	2.9518580617539587E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999999769351616	WITHOUT_CLASSIFICATION	2.30648383974996E-7	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999988309529216	WITHOUT_CLASSIFICATION	1.1690470783820007E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999941877723385	WITHOUT_CLASSIFICATION	5.812227661563168E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999990321110361	WITHOUT_CLASSIFICATION	9.678889639074494E-7	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999990321110361	WITHOUT_CLASSIFICATION	9.678889639074494E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999985166304116	WITHOUT_CLASSIFICATION	1.4833695883210285E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997547894106	WITHOUT_CLASSIFICATION	2.4521058938076056E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999249136575	WITHOUT_CLASSIFICATION	7.508634254196109E-8	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.999998930124523	WITHOUT_CLASSIFICATION	1.0698754769741568E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999999658710514	WITHOUT_CLASSIFICATION	3.4128948598312165E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999839972311	WITHOUT_CLASSIFICATION	1.6002768781424095E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999998656584	WITHOUT_CLASSIFICATION	1.3434161229148265E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999997919299298	WITHOUT_CLASSIFICATION	2.0807007011473305E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999985166304116	WITHOUT_CLASSIFICATION	1.4833695883210285E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997547894106	WITHOUT_CLASSIFICATION	2.4521058938076056E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999979943012778	WITHOUT_CLASSIFICATION	2.0056987221334716E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999990097468718	WITHOUT_CLASSIFICATION	9.902531281664245E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997237615024	WITHOUT_CLASSIFICATION	2.76238497641265E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999983549011678	WITHOUT_CLASSIFICATION	1.6450988320974322E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999988255782	WITHOUT_CLASSIFICATION	1.1744218183255881E-9	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999992925438433	WITHOUT_CLASSIFICATION	7.074561566158154E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999799245641	WITHOUT_CLASSIFICATION	2.0075435881069602E-8	TEST
}	WITHOUT_CLASSIFICATION	0.9999086699893409	WITHOUT_CLASSIFICATION	9.133001065909329E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999240567287	WITHOUT_CLASSIFICATION	7.594327136255477E-8	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999931573469205	WITHOUT_CLASSIFICATION	6.842653079393471E-6	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999994742730144	WITHOUT_CLASSIFICATION	5.257269856649896E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999931573469205	WITHOUT_CLASSIFICATION	6.842653079393471E-6	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999953065392941	WITHOUT_CLASSIFICATION	4.693460705822541E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999985906404982	WITHOUT_CLASSIFICATION	1.4093595018511596E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999896697150772	WITHOUT_CLASSIFICATION	1.0330284922794969E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974783875253	WITHOUT_CLASSIFICATION	2.521612474664132E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999984598639503	WITHOUT_CLASSIFICATION	1.5401360496242081E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999086699893409	WITHOUT_CLASSIFICATION	9.133001065909329E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999086699893409	WITHOUT_CLASSIFICATION	9.133001065909329E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999968789175416	WITHOUT_CLASSIFICATION	3.1210824583318385E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999995272964997	WITHOUT_CLASSIFICATION	4.7270350028247043E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999989492725928	WITHOUT_CLASSIFICATION	1.0507274071991785E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998707553927	WITHOUT_CLASSIFICATION	1.2924460734533204E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998162235796	WITHOUT_CLASSIFICATION	1.83776420353429E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996039783	WITHOUT_CLASSIFICATION	3.960216999698278E-7	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999760921605639	WITHOUT_CLASSIFICATION	2.3907839436047606E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990480046558	WITHOUT_CLASSIFICATION	9.519953441319956E-7	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999999785148384	WITHOUT_CLASSIFICATION	2.148516160036072E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.999860856790471	WITHOUT_CLASSIFICATION	1.391432095290657E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.999993653641346	WITHOUT_CLASSIFICATION	6.346358653963649E-6	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999978678820408	WITHOUT_CLASSIFICATION	2.132117959142919E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999998228898043	WITHOUT_CLASSIFICATION	1.7711019571645125E-7	TEST
types	WITHOUT_CLASSIFICATION	0.999985443242854	WITHOUT_CLASSIFICATION	1.4556757146098186E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999988008081151	WITHOUT_CLASSIFICATION	1.1991918849492557E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999996952785098	WITHOUT_CLASSIFICATION	3.047214901433045E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999849637085	WITHOUT_CLASSIFICATION	1.5036291493287653E-8	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999995889354849	WITHOUT_CLASSIFICATION	4.110645150001691E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999993768622043	WITHOUT_CLASSIFICATION	6.231377957833383E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997991869024	WITHOUT_CLASSIFICATION	2.008130975860763E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9998857090985209	WITHOUT_CLASSIFICATION	1.1429090147904108E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999106606919	WITHOUT_CLASSIFICATION	8.933930809801928E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999852053609466	WITHOUT_CLASSIFICATION	1.479463905339029E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999993021667236	WITHOUT_CLASSIFICATION	6.978332763513904E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998429867445	WITHOUT_CLASSIFICATION	1.5701325545490323E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999861528985	WITHOUT_CLASSIFICATION	1.3847101506954818E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999758241565143	WITHOUT_CLASSIFICATION	2.4175843485713558E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999971110225	WITHOUT_CLASSIFICATION	2.888977530271082E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999997955277227	WITHOUT_CLASSIFICATION	2.0447227731082538E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999973979363165	WITHOUT_CLASSIFICATION	2.602063683533059E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999967327062713	WITHOUT_CLASSIFICATION	3.2672937286349907E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999881682953019	WITHOUT_CLASSIFICATION	1.1831704698105614E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.99999824348881	WITHOUT_CLASSIFICATION	1.7565111901177196E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990480046558	WITHOUT_CLASSIFICATION	9.519953441319956E-7	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999995156060372	WITHOUT_CLASSIFICATION	4.843939628179023E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999799672402557	WITHOUT_CLASSIFICATION	2.0032759744232807E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9979662840496338	WITHOUT_CLASSIFICATION	0.0020337159503661744	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999608675173921	WITHOUT_CLASSIFICATION	3.913248260791101E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994141927615	WITHOUT_CLASSIFICATION	5.858072384629463E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.999998988942695	WITHOUT_CLASSIFICATION	1.01105730499151E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998707553927	WITHOUT_CLASSIFICATION	1.2924460734533204E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998707553927	WITHOUT_CLASSIFICATION	1.2924460734533204E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998043057851	WITHOUT_CLASSIFICATION	1.956942149542872E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999972150210167	WITHOUT_CLASSIFICATION	2.784978983223588E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.999999662112575	WITHOUT_CLASSIFICATION	3.3788742505790004E-7	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998738116324	WITHOUT_CLASSIFICATION	1.2618836759150023E-7	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999998932272213	WITHOUT_CLASSIFICATION	1.0677277873303895E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999993059038679	WITHOUT_CLASSIFICATION	6.940961321423098E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999988835688199	WITHOUT_CLASSIFICATION	1.1164311801198696E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997455254176	WITHOUT_CLASSIFICATION	2.5447458235858454E-7	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999883936382	WITHOUT_CLASSIFICATION	1.160636179049156E-8	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999640771275	WITHOUT_CLASSIFICATION	3.592287251853085E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999903095362	WITHOUT_CLASSIFICATION	9.690463799641516E-8	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999984026115951	WITHOUT_CLASSIFICATION	1.5973884048845085E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998543571088809	WITHOUT_CLASSIFICATION	1.456428911189988E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999985166304116	WITHOUT_CLASSIFICATION	1.4833695883210285E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999903095362	WITHOUT_CLASSIFICATION	9.690463799641516E-8	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999974808562444	WITHOUT_CLASSIFICATION	2.5191437554862737E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999996908594688	WITHOUT_CLASSIFICATION	3.0914053118544934E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996634929478	WITHOUT_CLASSIFICATION	3.365070521955449E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9987979063309387	WITHOUT_CLASSIFICATION	0.0012020936690612495	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998543571088809	WITHOUT_CLASSIFICATION	1.456428911189988E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999917216176354	WITHOUT_CLASSIFICATION	8.278382364588533E-6	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999780727178	WITHOUT_CLASSIFICATION	2.1927282214790164E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999611192179	WITHOUT_CLASSIFICATION	3.888078210856069E-8	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.99999997881589	WITHOUT_CLASSIFICATION	2.118411001159313E-8	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998378472960633	WITHOUT_CLASSIFICATION	1.6215270393676022E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999980287219712	WITHOUT_CLASSIFICATION	1.9712780288107376E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999997362934026	WITHOUT_CLASSIFICATION	2.6370659747980183E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999621560086436	WITHOUT_CLASSIFICATION	3.7843991356410574E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999985464697206	WITHOUT_CLASSIFICATION	1.4535302793756417E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999995617319176	WITHOUT_CLASSIFICATION	4.382680824541717E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999552134293	WITHOUT_CLASSIFICATION	4.478657070997314E-8	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999558847049	WITHOUT_CLASSIFICATION	4.4115295009605936E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999903095362	WITHOUT_CLASSIFICATION	9.690463799641516E-8	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999917216176354	WITHOUT_CLASSIFICATION	8.278382364588533E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999611192179	WITHOUT_CLASSIFICATION	3.888078210856069E-8	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998755836346	WITHOUT_CLASSIFICATION	1.2441636545856936E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999867265362338	WITHOUT_CLASSIFICATION	1.3273463766183932E-5	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999997339985	WITHOUT_CLASSIFICATION	2.660015000849441E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998543571088809	WITHOUT_CLASSIFICATION	1.456428911189988E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999992215740015	WITHOUT_CLASSIFICATION	7.784259986207E-7	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999558310353074	WITHOUT_CLASSIFICATION	4.41689646926548E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997459999491346	WITHOUT_CLASSIFICATION	2.540000508653376E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999508625653226	WITHOUT_CLASSIFICATION	4.913743467745191E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999621560086436	WITHOUT_CLASSIFICATION	3.7843991356410574E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999974808562444	WITHOUT_CLASSIFICATION	2.5191437554862737E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999024008081381	WITHOUT_CLASSIFICATION	9.7599191861966E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999997202403462	WITHOUT_CLASSIFICATION	2.797596538047981E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999983425872374	WITHOUT_CLASSIFICATION	1.6574127625974248E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999991549847064	WITHOUT_CLASSIFICATION	8.450152937227844E-7	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999989492872675	WITHOUT_CLASSIFICATION	1.0507127325068615E-6	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999999486429162	WITHOUT_CLASSIFICATION	5.13570837910274E-7	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999984059672309	WITHOUT_CLASSIFICATION	1.5940327691380787E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974783875253	WITHOUT_CLASSIFICATION	2.521612474664132E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300632751	WITHOUT_CLASSIFICATION	6.993672487980574E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998898458297	WITHOUT_CLASSIFICATION	1.1015417032474825E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999497351399117	WITHOUT_CLASSIFICATION	5.026486008836195E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995800882928	WITHOUT_CLASSIFICATION	4.199117071462315E-7	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999285383738	WITHOUT_CLASSIFICATION	7.146162609282917E-8	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999887515953	WITHOUT_CLASSIFICATION	1.1248404625128742E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999961175138249	WITHOUT_CLASSIFICATION	3.882486175117312E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997000962338	WITHOUT_CLASSIFICATION	2.9990376617897397E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999508625653226	WITHOUT_CLASSIFICATION	4.913743467745191E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999015464363653	WITHOUT_CLASSIFICATION	9.845356363472845E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999337023325016	WITHOUT_CLASSIFICATION	6.629766749846508E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999818804389909	WITHOUT_CLASSIFICATION	1.8119561009018883E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999957428495278	WITHOUT_CLASSIFICATION	4.257150472195194E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999976582216562	WITHOUT_CLASSIFICATION	2.3417783438694396E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999630164997	WITHOUT_CLASSIFICATION	3.698350027999257E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996621830467	WITHOUT_CLASSIFICATION	3.3781695337107635E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999953464958932	WITHOUT_CLASSIFICATION	4.6535041068885976E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998509788973	WITHOUT_CLASSIFICATION	1.4902110273863094E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999933207381549	WITHOUT_CLASSIFICATION	6.679261845100028E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.999998893101161	WITHOUT_CLASSIFICATION	1.1068988390728447E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999967003027015	WITHOUT_CLASSIFICATION	3.299697298525684E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999981686270959	WITHOUT_CLASSIFICATION	1.8313729041428743E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999965690397329	WITHOUT_CLASSIFICATION	3.4309602671639837E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999072101396	WITHOUT_CLASSIFICATION	9.278986040367569E-8	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997754685843	WITHOUT_CLASSIFICATION	2.2453141568784204E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999682301397	WITHOUT_CLASSIFICATION	3.176986020632421E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999761943354	WITHOUT_CLASSIFICATION	2.3805664566563024E-8	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999998005784354	WITHOUT_CLASSIFICATION	1.9942156460270027E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999997115100908	WITHOUT_CLASSIFICATION	2.884899091023455E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999459816948149	WITHOUT_CLASSIFICATION	5.4018305185132255E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999974628580541	WITHOUT_CLASSIFICATION	2.537141945817998E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999988503836603	WITHOUT_CLASSIFICATION	1.1496163397386985E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999876566348	WITHOUT_CLASSIFICATION	1.2343365279978086E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999278950136	WITHOUT_CLASSIFICATION	7.210498640556529E-7	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998990994179227	WITHOUT_CLASSIFICATION	1.0090058207738338E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999985543864425	WITHOUT_CLASSIFICATION	1.4456135575287043E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999981253898309	WITHOUT_CLASSIFICATION	1.8746101690208958E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999989625157129	WITHOUT_CLASSIFICATION	1.0374842871205858E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994473255936204	WITHOUT_CLASSIFICATION	5.52674406379578E-4	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999996266338579	WITHOUT_CLASSIFICATION	3.7336614205708875E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999977591399211	WITHOUT_CLASSIFICATION	2.240860078916748E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999999855347618	WITHOUT_CLASSIFICATION	1.446523820851628E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999721805420081	WITHOUT_CLASSIFICATION	2.7819457991864698E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999966605856037	WITHOUT_CLASSIFICATION	3.3394143963738573E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999993998721989	WITHOUT_CLASSIFICATION	6.001278011352994E-7	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997959458645	WITHOUT_CLASSIFICATION	2.0405413540798241E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999977915446525	WITHOUT_CLASSIFICATION	2.208455347518957E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999993998721989	WITHOUT_CLASSIFICATION	6.001278011352994E-7	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999966605856037	WITHOUT_CLASSIFICATION	3.3394143963738573E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997959458645	WITHOUT_CLASSIFICATION	2.0405413540798241E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999995270934862	WITHOUT_CLASSIFICATION	4.729065138364746E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999981643057051	WITHOUT_CLASSIFICATION	1.835694294869572E-6	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999992138453383	WITHOUT_CLASSIFICATION	7.861546617301879E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999992528802679	WITHOUT_CLASSIFICATION	7.47119732092242E-7	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999935367155	WITHOUT_CLASSIFICATION	6.463284447959284E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999824423289675	WITHOUT_CLASSIFICATION	1.755767103249571E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999983315399804	WITHOUT_CLASSIFICATION	1.6684600195636516E-6	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999999459952522	WITHOUT_CLASSIFICATION	5.400474779281751E-7	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999739490362	WITHOUT_CLASSIFICATION	2.6050963814704162E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999989132870462	WITHOUT_CLASSIFICATION	1.086712953884364E-6	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999987677521099	WITHOUT_CLASSIFICATION	1.2322478900115092E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999996517862136	WITHOUT_CLASSIFICATION	3.4821378645426524E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999994186603623	WITHOUT_CLASSIFICATION	5.813396376586904E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999992528802679	WITHOUT_CLASSIFICATION	7.47119732092242E-7	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996661651877	WITHOUT_CLASSIFICATION	3.3383481236029034E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999984706989311	WITHOUT_CLASSIFICATION	1.5293010688328523E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998629435117	WITHOUT_CLASSIFICATION	1.370564882739204E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999445127634	WITHOUT_CLASSIFICATION	5.548723651569548E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999997366748637	WITHOUT_CLASSIFICATION	2.633251363108431E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999993996567419	WITHOUT_CLASSIFICATION	6.003432581290711E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999969901853429	WITHOUT_CLASSIFICATION	3.0098146570036262E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999951525799	WITHOUT_CLASSIFICATION	4.847420079480946E-9	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999940799588788	WITHOUT_CLASSIFICATION	5.9200411211459764E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999344186642	WITHOUT_CLASSIFICATION	6.558133579028133E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989103725239	WITHOUT_CLASSIFICATION	1.089627476126691E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989103725239	WITHOUT_CLASSIFICATION	1.089627476126691E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999848092728	WITHOUT_CLASSIFICATION	1.5190727270271275E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999848092728	WITHOUT_CLASSIFICATION	1.5190727270271275E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999981884779738	WITHOUT_CLASSIFICATION	1.8115220262354345E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998629435117	WITHOUT_CLASSIFICATION	1.370564882739204E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999986671533281	WITHOUT_CLASSIFICATION	1.3328466719347421E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999881604125	WITHOUT_CLASSIFICATION	1.1839587465619937E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998218533431	WITHOUT_CLASSIFICATION	1.7814665685398355E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998218533431	WITHOUT_CLASSIFICATION	1.7814665685398355E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999057027762	WITHOUT_CLASSIFICATION	9.429722385802951E-8	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999997681020926	WITHOUT_CLASSIFICATION	2.3189790740306103E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999974795867	WITHOUT_CLASSIFICATION	2.520413343571851E-9	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999991943419991	WITHOUT_CLASSIFICATION	8.056580008641873E-7	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998539941389	WITHOUT_CLASSIFICATION	1.4600586111436577E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999626229394	WITHOUT_CLASSIFICATION	3.737706066702643E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999976182263373	WITHOUT_CLASSIFICATION	2.381773662730223E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999990744965167	WITHOUT_CLASSIFICATION	9.255034832212287E-7	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999998630941773	WITHOUT_CLASSIFICATION	1.3690582267915833E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999426471566	WITHOUT_CLASSIFICATION	5.735284337981217E-8	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999999478009661	WITHOUT_CLASSIFICATION	5.2199033926778065E-8	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999987972566164	WITHOUT_CLASSIFICATION	1.2027433835166207E-6	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997765015036	WITHOUT_CLASSIFICATION	2.234984963631931E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999995875182834	WITHOUT_CLASSIFICATION	4.1248171653131616E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999986661717472	WITHOUT_CLASSIFICATION	1.333828252873489E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999975016112627	WITHOUT_CLASSIFICATION	2.4983887373587436E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962845278687	WITHOUT_CLASSIFICATION	3.7154721313864898E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999998531496912	WITHOUT_CLASSIFICATION	1.4685030892175176E-7	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999900558405	WITHOUT_CLASSIFICATION	9.94415956838553E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999728376302	WITHOUT_CLASSIFICATION	2.7162369780389775E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999999982866502	WITHOUT_CLASSIFICATION	1.7133497905122038E-8	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999974421591731	WITHOUT_CLASSIFICATION	2.557840826801692E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999999905051031	WITHOUT_CLASSIFICATION	9.49489689784929E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999900224334	WITHOUT_CLASSIFICATION	9.977566510369385E-9	TEST
/	WITHOUT_CLASSIFICATION	0.9998182097978779	WITHOUT_CLASSIFICATION	1.8179020212204347E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999988306863644	WITHOUT_CLASSIFICATION	1.1693136355128789E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999967003027015	WITHOUT_CLASSIFICATION	3.299697298525684E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998505424872	WITHOUT_CLASSIFICATION	1.4945751284509818E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.99999972739117	WITHOUT_CLASSIFICATION	2.726088298707642E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989183735572	WITHOUT_CLASSIFICATION	1.0816264427965597E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977141263997	WITHOUT_CLASSIFICATION	2.2858736002166392E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999992100858224	WITHOUT_CLASSIFICATION	7.899141776419441E-7	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999992100858224	WITHOUT_CLASSIFICATION	7.899141776419441E-7	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994397545526	WITHOUT_CLASSIFICATION	5.602454472662856E-7	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999989442865203	WITHOUT_CLASSIFICATION	1.0557134797977278E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999907075416777	WITHOUT_CLASSIFICATION	9.292458322195773E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999907075416777	WITHOUT_CLASSIFICATION	9.292458322195773E-6	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997153170231	WITHOUT_CLASSIFICATION	2.8468297683819196E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999990313445806	WITHOUT_CLASSIFICATION	9.68655419462091E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999910569334534	WITHOUT_CLASSIFICATION	8.943066546668072E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999976855218417	WITHOUT_CLASSIFICATION	2.3144781582655052E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999994410570443	WITHOUT_CLASSIFICATION	5.589429557267561E-7	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995455633575	WITHOUT_CLASSIFICATION	4.5443664252316146E-7	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999987936477849	WITHOUT_CLASSIFICATION	1.2063522151411485E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999995008680852	WITHOUT_CLASSIFICATION	4.991319148128115E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999995969158998	WITHOUT_CLASSIFICATION	4.030841002392367E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999995969158998	WITHOUT_CLASSIFICATION	4.030841002392367E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999982238672	WITHOUT_CLASSIFICATION	1.7761327433002368E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999995436388626	WITHOUT_CLASSIFICATION	4.563611373568862E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999995436388626	WITHOUT_CLASSIFICATION	4.563611373568862E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998797550416	WITHOUT_CLASSIFICATION	1.202449584464189E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999997887413746	WITHOUT_CLASSIFICATION	2.112586252761509E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9967986191818485	WITHOUT_CLASSIFICATION	0.003201380818151494	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999990196287274	WITHOUT_CLASSIFICATION	9.803712726242082E-7	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998602805552	WITHOUT_CLASSIFICATION	1.3971944486172453E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999933507727	WITHOUT_CLASSIFICATION	6.649227306388119E-9	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999995109904368	WITHOUT_CLASSIFICATION	4.89009563220534E-7	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999847970921528	WITHOUT_CLASSIFICATION	1.5202907847124316E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999868160524	WITHOUT_CLASSIFICATION	1.3183947638575557E-8	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999917053534956	WITHOUT_CLASSIFICATION	8.294646504445606E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999971148444	WITHOUT_CLASSIFICATION	2.8851554645525796E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999997765780128	WITHOUT_CLASSIFICATION	2.23421987178646E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984235671739	WITHOUT_CLASSIFICATION	1.5764328261237286E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984235671739	WITHOUT_CLASSIFICATION	1.5764328261237286E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984235671739	WITHOUT_CLASSIFICATION	1.5764328261237286E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999984235671739	WITHOUT_CLASSIFICATION	1.5764328261237286E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999965299308204	WITHOUT_CLASSIFICATION	3.4700691795830527E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999977353441466	WITHOUT_CLASSIFICATION	2.264655853391851E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999981186948681	WITHOUT_CLASSIFICATION	1.881305132017299E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999932689538241	WITHOUT_CLASSIFICATION	6.731046175917296E-6	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999992915432471	WITHOUT_CLASSIFICATION	7.084567529853216E-7	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999994851912115	WITHOUT_CLASSIFICATION	5.148087885534595E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999979469652345	WITHOUT_CLASSIFICATION	2.053034765445789E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999990192544962	WITHOUT_CLASSIFICATION	9.807455038020426E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998612863588	WITHOUT_CLASSIFICATION	1.387136412565844E-7	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999998619766075	WITHOUT_CLASSIFICATION	1.3802339235659823E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999995048386574	WITHOUT_CLASSIFICATION	4.951613426323628E-7	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994765623554	WITHOUT_CLASSIFICATION	5.234376445006711E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9946515430391524	WITHOUT_CLASSIFICATION	0.005348456960847533	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999971585069727	WITHOUT_CLASSIFICATION	2.8414930273196262E-6	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999979201207223	WITHOUT_CLASSIFICATION	2.079879277685165E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994765623554	WITHOUT_CLASSIFICATION	5.234376445006711E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999989925212125	WITHOUT_CLASSIFICATION	1.0074787875852065E-6	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999970406745	WITHOUT_CLASSIFICATION	2.9593253413184646E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999811878391	WITHOUT_CLASSIFICATION	1.881216086608177E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999935733234041	WITHOUT_CLASSIFICATION	6.426676595900375E-6	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997645909098	WITHOUT_CLASSIFICATION	2.3540909007410312E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997715992854	WITHOUT_CLASSIFICATION	2.2840071467318166E-7	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999998969857	WITHOUT_CLASSIFICATION	1.0301429844028383E-9	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999999968232172	WITHOUT_CLASSIFICATION	3.176782807887558E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998931028999	WITHOUT_CLASSIFICATION	1.0689710006266912E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999903409172	WITHOUT_CLASSIFICATION	9.65908279393528E-8	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997200378798	WITHOUT_CLASSIFICATION	2.799621202022164E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995706025161	WITHOUT_CLASSIFICATION	4.293974839962725E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999995830114786	WITHOUT_CLASSIFICATION	4.169885214008846E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999262863574008	WITHOUT_CLASSIFICATION	7.371364259923187E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996948694152	WITHOUT_CLASSIFICATION	3.051305848325747E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999949897068346	WITHOUT_CLASSIFICATION	5.010293165422985E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999212540078	WITHOUT_CLASSIFICATION	7.874599220307844E-7	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996164946036	WITHOUT_CLASSIFICATION	3.835053964379557E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999995043612806	WITHOUT_CLASSIFICATION	4.9563871939506565E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996164946036	WITHOUT_CLASSIFICATION	3.835053964379557E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999327107136	WITHOUT_CLASSIFICATION	6.728928639878791E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999981325907255	WITHOUT_CLASSIFICATION	1.867409274558127E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999449133562	WITHOUT_CLASSIFICATION	5.5086643794018205E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999995227609353	WITHOUT_CLASSIFICATION	4.772390646719702E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999349295868	WITHOUT_CLASSIFICATION	6.507041316218317E-8	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999979184903838	WITHOUT_CLASSIFICATION	2.0815096161074513E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999977929545063	WITHOUT_CLASSIFICATION	2.207045493645691E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999212540078	WITHOUT_CLASSIFICATION	7.874599220307844E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999995043612806	WITHOUT_CLASSIFICATION	4.9563871939506565E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999327107136	WITHOUT_CLASSIFICATION	6.728928639878791E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995828725329	WITHOUT_CLASSIFICATION	4.171274671699029E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999998979089055	WITHOUT_CLASSIFICATION	1.0209109447385336E-7	TEST
reset the id	WITHOUT_CLASSIFICATION	0.99999851964389	WITHOUT_CLASSIFICATION	1.4803561100447757E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999231831964	WITHOUT_CLASSIFICATION	7.681680362663835E-8	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999994152578591	WITHOUT_CLASSIFICATION	5.847421409715227E-7	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999997529471334	WITHOUT_CLASSIFICATION	2.470528665980107E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998016334982	WITHOUT_CLASSIFICATION	1.983665017543917E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962845278687	WITHOUT_CLASSIFICATION	3.7154721313864898E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999981325907255	WITHOUT_CLASSIFICATION	1.867409274558127E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997073404415	WITHOUT_CLASSIFICATION	2.926595585357327E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999519032889	WITHOUT_CLASSIFICATION	4.8096711112187695E-8	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999527204954	WITHOUT_CLASSIFICATION	4.727950456466201E-8	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.999999905872384	WITHOUT_CLASSIFICATION	9.412761596087039E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962845278687	WITHOUT_CLASSIFICATION	3.7154721313864898E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999999807446946	WITHOUT_CLASSIFICATION	1.925530539849912E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962845278687	WITHOUT_CLASSIFICATION	3.7154721313864898E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998819057414	WITHOUT_CLASSIFICATION	1.1809425855611424E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999918495938133	WITHOUT_CLASSIFICATION	8.150406186753577E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999998464779836	WITHOUT_CLASSIFICATION	1.5352201640203028E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998497075249	WITHOUT_CLASSIFICATION	1.5029247516294498E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998676162238	WITHOUT_CLASSIFICATION	1.3238377616944503E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.999999222657215	WITHOUT_CLASSIFICATION	7.773427849601704E-7	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999987222025285	WITHOUT_CLASSIFICATION	1.2777974714251941E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998483911697	WITHOUT_CLASSIFICATION	1.5160883025142305E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999991406608347	WITHOUT_CLASSIFICATION	8.593391653914794E-7	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999961233457677	WITHOUT_CLASSIFICATION	3.87665423226898E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999763449862805	WITHOUT_CLASSIFICATION	2.3655013719555053E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999991223875652	WITHOUT_CLASSIFICATION	8.776124347240495E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9967986191818485	WITHOUT_CLASSIFICATION	0.003201380818151494	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999933712562217	WITHOUT_CLASSIFICATION	6.628743778417378E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999980863671648	WITHOUT_CLASSIFICATION	1.9136328351985336E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999971459682323	WITHOUT_CLASSIFICATION	2.854031767698209E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999883215920176	WITHOUT_CLASSIFICATION	1.1678407982417099E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997718377174	WITHOUT_CLASSIFICATION	2.281622826334153E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998696820671	WITHOUT_CLASSIFICATION	1.3031793288077753E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999614716552	WITHOUT_CLASSIFICATION	3.852834487352749E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999999252531597	WITHOUT_CLASSIFICATION	7.474684022709234E-8	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999975515196	WITHOUT_CLASSIFICATION	2.448480527668894E-9	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999999804215795	WITHOUT_CLASSIFICATION	1.9578420488437495E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9964200325982026	WITHOUT_CLASSIFICATION	0.0035799674017973236	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999953970124326	WITHOUT_CLASSIFICATION	4.602987567365197E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999989606133085	WITHOUT_CLASSIFICATION	1.039386691493351E-6	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999873287970321	WITHOUT_CLASSIFICATION	1.267120296788537E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999952530353919	WITHOUT_CLASSIFICATION	4.74696460807121E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999683118073637	WITHOUT_CLASSIFICATION	3.168819263638577E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999987069270504	WITHOUT_CLASSIFICATION	1.293072949585604E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999974321372	WITHOUT_CLASSIFICATION	2.5678627847938188E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999905579691	WITHOUT_CLASSIFICATION	9.442030849442078E-9	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999995595552003	WITHOUT_CLASSIFICATION	4.404447997023399E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999961145179825	WITHOUT_CLASSIFICATION	3.885482017462647E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9960475388354263	WITHOUT_CLASSIFICATION	0.00395246116457376	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999331681143637	WITHOUT_CLASSIFICATION	6.683188563631369E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999999707550338	WITHOUT_CLASSIFICATION	2.9244966201050696E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999990183668	WITHOUT_CLASSIFICATION	9.816331999459265E-7	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999487437520762	WITHOUT_CLASSIFICATION	5.125624792385739E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999998396451626	WITHOUT_CLASSIFICATION	1.6035483739997956E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9863911226668525	WITHOUT_CLASSIFICATION	0.013608877333147537	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999546771737	WITHOUT_CLASSIFICATION	4.5322826204980265E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999998587676272	WITHOUT_CLASSIFICATION	1.4123237277746478E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999805222698948	WITHOUT_CLASSIFICATION	1.947773010523608E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999805222698948	WITHOUT_CLASSIFICATION	1.947773010523608E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998622088188	WITHOUT_CLASSIFICATION	1.3779118122836703E-7	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998483911697	WITHOUT_CLASSIFICATION	1.5160883025142305E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999985532498509	WITHOUT_CLASSIFICATION	1.446750149115578E-6	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999999202207784	WITHOUT_CLASSIFICATION	7.977922159128866E-7	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999971186889	WITHOUT_CLASSIFICATION	2.8813111023177704E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999304208099	WITHOUT_CLASSIFICATION	6.957919008921452E-8	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999933017764452	WITHOUT_CLASSIFICATION	6.698223554809795E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999250349037571	WITHOUT_CLASSIFICATION	7.49650962430221E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999888303772659	WITHOUT_CLASSIFICATION	1.116962273409951E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999998153604657	WITHOUT_CLASSIFICATION	1.8463953439014432E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999996794001191	WITHOUT_CLASSIFICATION	3.205998808694486E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999999305560179	WITHOUT_CLASSIFICATION	6.944398218726887E-8	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997109993557	WITHOUT_CLASSIFICATION	2.8900064431995623E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999938789281304	WITHOUT_CLASSIFICATION	6.121071869662551E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999988883500931	WITHOUT_CLASSIFICATION	1.1116499068935027E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998822233718	WITHOUT_CLASSIFICATION	1.1777662820259299E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999780635069	WITHOUT_CLASSIFICATION	2.193649304711887E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999635204386	WITHOUT_CLASSIFICATION	3.647956141923383E-8	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999222479663	WITHOUT_CLASSIFICATION	7.775203364109882E-8	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999677043027	WITHOUT_CLASSIFICATION	3.229569726715797E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999962241031	WITHOUT_CLASSIFICATION	3.775896994851465E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999995179149692	WITHOUT_CLASSIFICATION	4.820850308876571E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999994619150653	WITHOUT_CLASSIFICATION	5.380849347366773E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998705851211	WITHOUT_CLASSIFICATION	1.2941487903062718E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9863911226668525	WITHOUT_CLASSIFICATION	0.013608877333147537	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999996012879088	WITHOUT_CLASSIFICATION	3.987120912349408E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999302826763	WITHOUT_CLASSIFICATION	6.971732375588452E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999625697344	WITHOUT_CLASSIFICATION	3.743026551439061E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999978401643235	WITHOUT_CLASSIFICATION	2.1598356765906076E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999997151068615	WITHOUT_CLASSIFICATION	2.848931385671207E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999994164729747	WITHOUT_CLASSIFICATION	5.835270253504371E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999640484908251	WITHOUT_CLASSIFICATION	3.595150917488177E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999991036995234	WITHOUT_CLASSIFICATION	8.963004766068011E-7	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998234958192	WITHOUT_CLASSIFICATION	1.7650418084833885E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999924380987	WITHOUT_CLASSIFICATION	7.561901292538403E-9	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999994284009968	WITHOUT_CLASSIFICATION	5.715990031182147E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999993485074695	WITHOUT_CLASSIFICATION	6.514925305115435E-7	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9986542529817184	WITHOUT_CLASSIFICATION	0.0013457470182815655	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999987384156118	WITHOUT_CLASSIFICATION	1.2615843881595527E-6	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999377537104	WITHOUT_CLASSIFICATION	6.224628960445342E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999679608813	WITHOUT_CLASSIFICATION	3.2039118693559654E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999679608813	WITHOUT_CLASSIFICATION	3.2039118693559654E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999993644669871	WITHOUT_CLASSIFICATION	6.355330129395592E-7	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999990095719982	WITHOUT_CLASSIFICATION	9.904280018600695E-7	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999978796444684	WITHOUT_CLASSIFICATION	2.1203555316863315E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999978796444684	WITHOUT_CLASSIFICATION	2.1203555316863315E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999927159838	WITHOUT_CLASSIFICATION	7.284016073992287E-9	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995655869779	WITHOUT_CLASSIFICATION	4.344130221609272E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999865841135	WITHOUT_CLASSIFICATION	1.3415886612149673E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.99999941986631	WITHOUT_CLASSIFICATION	5.80133689985481E-7	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999890509171837	WITHOUT_CLASSIFICATION	1.0949082816194964E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970890535718	WITHOUT_CLASSIFICATION	2.9109464282405525E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999979646813	WITHOUT_CLASSIFICATION	2.03531870207886E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999979646813	WITHOUT_CLASSIFICATION	2.03531870207886E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999995624293801	WITHOUT_CLASSIFICATION	4.37570619903096E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999999267949358	WITHOUT_CLASSIFICATION	7.320506422993566E-8	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999980843722748	WITHOUT_CLASSIFICATION	1.9156277252728873E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998208841924	WITHOUT_CLASSIFICATION	1.7911580777082644E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998208841924	WITHOUT_CLASSIFICATION	1.7911580777082644E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999995814059538	WITHOUT_CLASSIFICATION	4.1859404626749317E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998442176061	WITHOUT_CLASSIFICATION	1.5578239384215198E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999902333158137	WITHOUT_CLASSIFICATION	9.766684186279334E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999994194935042	WITHOUT_CLASSIFICATION	5.805064958051058E-7	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999997907885952	WITHOUT_CLASSIFICATION	2.0921140467289363E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999996695930476	WITHOUT_CLASSIFICATION	3.3040695241044116E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999718601995	WITHOUT_CLASSIFICATION	2.8139800496516144E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.999999903691163	WITHOUT_CLASSIFICATION	9.630883704333944E-8	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999997507005651	WITHOUT_CLASSIFICATION	2.492994348415186E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999993696811431	WITHOUT_CLASSIFICATION	6.303188568749702E-7	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999996986395	WITHOUT_CLASSIFICATION	3.0136056299488423E-10	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999972828717827	WITHOUT_CLASSIFICATION	2.7171282174413067E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999693360503994	WITHOUT_CLASSIFICATION	3.0663949600590545E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999998966580027	WITHOUT_CLASSIFICATION	1.033419973086465E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999977432746014	WITHOUT_CLASSIFICATION	2.2567253986378704E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999982312146453	WITHOUT_CLASSIFICATION	1.7687853547239789E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999949561552	WITHOUT_CLASSIFICATION	5.0438448046812935E-9	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999973043447409	WITHOUT_CLASSIFICATION	2.6956552591521317E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999997720025446	WITHOUT_CLASSIFICATION	2.2799745539758325E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999954636714197	WITHOUT_CLASSIFICATION	4.53632858031267E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999993212582523	WITHOUT_CLASSIFICATION	6.787417476872875E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999982150693576	WITHOUT_CLASSIFICATION	1.7849306424510379E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999969484482415	WITHOUT_CLASSIFICATION	3.0515517585006127E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999929358218346	WITHOUT_CLASSIFICATION	7.064178165477003E-6	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999947199823039	WITHOUT_CLASSIFICATION	5.280017696085159E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999998242525858	WITHOUT_CLASSIFICATION	1.7574741413164765E-7	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.999998313345026	WITHOUT_CLASSIFICATION	1.6866549740210202E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999659679197822	WITHOUT_CLASSIFICATION	3.403208021789185E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999944565539	WITHOUT_CLASSIFICATION	5.54344613031218E-9	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999611080872	WITHOUT_CLASSIFICATION	3.8891912873212095E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999042211488	WITHOUT_CLASSIFICATION	9.577885124203579E-8	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999404424567	WITHOUT_CLASSIFICATION	5.955754342853437E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999239983302	WITHOUT_CLASSIFICATION	7.600166981981273E-8	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999994891359474	WITHOUT_CLASSIFICATION	5.108640526039371E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999254437931	WITHOUT_CLASSIFICATION	7.455620687102049E-8	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999761286209269	WITHOUT_CLASSIFICATION	2.3871379073069083E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999976184923948	WITHOUT_CLASSIFICATION	2.381507605251761E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999997379370232	WITHOUT_CLASSIFICATION	2.6206297676654894E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999987779697143	WITHOUT_CLASSIFICATION	1.222030285711625E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996464015731	WITHOUT_CLASSIFICATION	3.535984269041104E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999311218685	WITHOUT_CLASSIFICATION	6.887813153176742E-8	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999992553034678	WITHOUT_CLASSIFICATION	7.446965320765896E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999995048756464	WITHOUT_CLASSIFICATION	4.951243536859722E-7	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999998860025903	WITHOUT_CLASSIFICATION	1.1399740971863407E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999997982655149	WITHOUT_CLASSIFICATION	2.0173448520372245E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999995906792034	WITHOUT_CLASSIFICATION	4.0932079662787963E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999990182282806	WITHOUT_CLASSIFICATION	9.817717193514967E-7	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999946993621007	WITHOUT_CLASSIFICATION	5.3006378992088886E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999997128869886	WITHOUT_CLASSIFICATION	2.8711301131926265E-7	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999568384719771	WITHOUT_CLASSIFICATION	4.316152802290137E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999995021152229	WITHOUT_CLASSIFICATION	4.978847770958313E-7	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999999968071036	WITHOUT_CLASSIFICATION	3.1928964039885494E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999662911709106	WITHOUT_CLASSIFICATION	3.37088290893405E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999896827617	WITHOUT_CLASSIFICATION	1.0317238197123935E-8	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999987187831252	WITHOUT_CLASSIFICATION	1.2812168747382624E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996872604505	WITHOUT_CLASSIFICATION	3.127395495012422E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998482390119	WITHOUT_CLASSIFICATION	1.5176098808617278E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999995583254389	WITHOUT_CLASSIFICATION	4.4167456113127003E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998279982975	WITHOUT_CLASSIFICATION	1.7200170254293794E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999506210747188	WITHOUT_CLASSIFICATION	4.937892528127283E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995194524682	WITHOUT_CLASSIFICATION	4.805475316542803E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995194524682	WITHOUT_CLASSIFICATION	4.805475316542803E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999841458725642	WITHOUT_CLASSIFICATION	1.5854127435681407E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999496604931369	WITHOUT_CLASSIFICATION	5.033950686311435E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999842580934	WITHOUT_CLASSIFICATION	1.5741906642543368E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999996443035832	WITHOUT_CLASSIFICATION	3.556964167430727E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999994480023172	WITHOUT_CLASSIFICATION	5.519976827227079E-7	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999928067977283	WITHOUT_CLASSIFICATION	7.193202271729603E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999995227927939	WITHOUT_CLASSIFICATION	4.772072060771243E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999986187553	WITHOUT_CLASSIFICATION	1.381244617266528E-9	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999999637093102	WITHOUT_CLASSIFICATION	3.629068979877167E-7	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999965069211193	WITHOUT_CLASSIFICATION	3.493078880794047E-6	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999726050748	WITHOUT_CLASSIFICATION	2.7394925234701336E-8	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999989151034447	WITHOUT_CLASSIFICATION	1.0848965553188095E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999570094272	WITHOUT_CLASSIFICATION	4.299057266519212E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999428297653	WITHOUT_CLASSIFICATION	5.717023463119844E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921683119	WITHOUT_CLASSIFICATION	7.831688096143545E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921683119	WITHOUT_CLASSIFICATION	7.831688096143545E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999551724603	WITHOUT_CLASSIFICATION	4.4827539620269705E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999995808659641	WITHOUT_CLASSIFICATION	4.1913403597849526E-7	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999347947613	WITHOUT_CLASSIFICATION	6.520523869672303E-8	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999991144611	WITHOUT_CLASSIFICATION	8.855388512329109E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998586918492	WITHOUT_CLASSIFICATION	1.4130815084892381E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999599410968506	WITHOUT_CLASSIFICATION	4.0058903149400876E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996336326112	WITHOUT_CLASSIFICATION	3.6636738871309525E-7	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999994488075037	WITHOUT_CLASSIFICATION	5.511924963216902E-7	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999936284582748	WITHOUT_CLASSIFICATION	6.371541725290983E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999975271432	WITHOUT_CLASSIFICATION	2.4728569061745095E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999575488841917	WITHOUT_CLASSIFICATION	4.245111580814765E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999983249301	WITHOUT_CLASSIFICATION	1.6750698888578404E-9	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999998562553772	WITHOUT_CLASSIFICATION	1.4374462264651605E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999930963268	WITHOUT_CLASSIFICATION	6.9036731406711945E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999630664467	WITHOUT_CLASSIFICATION	3.6933553358223546E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997569046855	WITHOUT_CLASSIFICATION	2.430953145479846E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995860479578	WITHOUT_CLASSIFICATION	4.139520422633789E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999937716149019	WITHOUT_CLASSIFICATION	6.228385098087628E-6	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999949766329046	WITHOUT_CLASSIFICATION	5.02336709543291E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998825568795	WITHOUT_CLASSIFICATION	1.174431204914813E-6	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999999940879923	WITHOUT_CLASSIFICATION	5.9120077014242995E-8	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999995509775	WITHOUT_CLASSIFICATION	4.4902252749266235E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999719132054	WITHOUT_CLASSIFICATION	2.8086794589578116E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999985327774	WITHOUT_CLASSIFICATION	1.4672226537647982E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.99999980296419	WITHOUT_CLASSIFICATION	1.970358100281451E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999851080996447	WITHOUT_CLASSIFICATION	1.489190035535639E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997165280201742	WITHOUT_CLASSIFICATION	2.8347197982587396E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999993578815771	WITHOUT_CLASSIFICATION	6.421184229067736E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999531326637	WITHOUT_CLASSIFICATION	4.686733636036356E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998966023925	WITHOUT_CLASSIFICATION	1.0339760734894364E-7	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999985276454143	WITHOUT_CLASSIFICATION	1.4723545856988824E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999831791127	WITHOUT_CLASSIFICATION	1.6820887313868313E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999886473120204	WITHOUT_CLASSIFICATION	1.13526879795163E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999999938477151	WITHOUT_CLASSIFICATION	6.152284907703257E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999969272659	WITHOUT_CLASSIFICATION	3.0727340245942266E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999789291715	WITHOUT_CLASSIFICATION	2.1070828553233123E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999998780040417	WITHOUT_CLASSIFICATION	1.219959583349842E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998312168269	WITHOUT_CLASSIFICATION	1.6878317312902798E-7	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999186766975	WITHOUT_CLASSIFICATION	8.13233025231668E-8	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999993349225513	WITHOUT_CLASSIFICATION	6.650774486988959E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999988468814308	WITHOUT_CLASSIFICATION	1.1531185691726257E-6	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999998256990571	WITHOUT_CLASSIFICATION	1.7430094283812726E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990975731029	WITHOUT_CLASSIFICATION	9.024268971934641E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990975731029	WITHOUT_CLASSIFICATION	9.024268971934641E-7	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999995120650499	WITHOUT_CLASSIFICATION	4.879349501068298E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998200620545	WITHOUT_CLASSIFICATION	1.7993794547100063E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999820070541	WITHOUT_CLASSIFICATION	1.7992945938212024E-8	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999997389215928	WITHOUT_CLASSIFICATION	2.6107840714566537E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998684799752	WITHOUT_CLASSIFICATION	1.3152002480528276E-7	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999992659321	WITHOUT_CLASSIFICATION	7.340678454848108E-10	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999237065637	WITHOUT_CLASSIFICATION	7.629343632876423E-8	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997111123089	WITHOUT_CLASSIFICATION	2.8888769104658705E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999984147238	WITHOUT_CLASSIFICATION	1.585276149722319E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970176652332	WITHOUT_CLASSIFICATION	2.982334766822006E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983506085673	WITHOUT_CLASSIFICATION	1.6493914327048876E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999787209656592	WITHOUT_CLASSIFICATION	2.127903434077703E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999943861153066	WITHOUT_CLASSIFICATION	5.613884693402221E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997219916212	WITHOUT_CLASSIFICATION	2.780083786985071E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999338159747	WITHOUT_CLASSIFICATION	6.618402530107867E-8	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999998091741926	WITHOUT_CLASSIFICATION	1.9082580744296417E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999671847755	WITHOUT_CLASSIFICATION	3.2815224652986816E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999988455829	WITHOUT_CLASSIFICATION	1.1544172223477307E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999620751289	WITHOUT_CLASSIFICATION	3.79248710749154E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999868630271793	WITHOUT_CLASSIFICATION	1.3136972820703341E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999997044247526	WITHOUT_CLASSIFICATION	2.9557524739596087E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999157013619	WITHOUT_CLASSIFICATION	8.429863804046357E-8	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999916626696	WITHOUT_CLASSIFICATION	8.337330479982848E-9	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999974394360545	WITHOUT_CLASSIFICATION	2.5605639454971296E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999319220529	WITHOUT_CLASSIFICATION	6.807794708882083E-8	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999989880154516	WITHOUT_CLASSIFICATION	1.0119845483331453E-6	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999991083672729	WITHOUT_CLASSIFICATION	8.916327270373935E-7	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999972999826	WITHOUT_CLASSIFICATION	2.700017539810226E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999745342104537	WITHOUT_CLASSIFICATION	2.5465789546325246E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999327148565	WITHOUT_CLASSIFICATION	6.728514335407342E-8	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999048132832	WITHOUT_CLASSIFICATION	9.518671676862012E-8	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999999976760405	WITHOUT_CLASSIFICATION	2.3239595076067815E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999698072479	WITHOUT_CLASSIFICATION	3.0192752096868155E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.999999979603755	WITHOUT_CLASSIFICATION	2.0396245012511793E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999928041441	WITHOUT_CLASSIFICATION	7.195855907313483E-9	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999625720116498	WITHOUT_CLASSIFICATION	3.742798835014963E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999743945968	WITHOUT_CLASSIFICATION	2.560540330725842E-8	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998710558895	WITHOUT_CLASSIFICATION	1.2894411058204763E-7	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999992219552578	WITHOUT_CLASSIFICATION	7.780447421600379E-7	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999538587842	WITHOUT_CLASSIFICATION	4.614121579193216E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999970726297209	WITHOUT_CLASSIFICATION	2.9273702790796927E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999881249771995	WITHOUT_CLASSIFICATION	1.1875022800635505E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998927277524	WITHOUT_CLASSIFICATION	1.072722476744026E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999643770036	WITHOUT_CLASSIFICATION	3.562299637995558E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999999895649347	WITHOUT_CLASSIFICATION	1.0435065299557227E-7	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999956804452725	WITHOUT_CLASSIFICATION	4.3195547274955526E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999666104217	WITHOUT_CLASSIFICATION	3.338957835127994E-8	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999986987500231	WITHOUT_CLASSIFICATION	1.3012499768855799E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999256787651	WITHOUT_CLASSIFICATION	7.432123497794927E-8	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999570094272	WITHOUT_CLASSIFICATION	4.299057266519212E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999983739612806	WITHOUT_CLASSIFICATION	1.6260387194987215E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999720357512	WITHOUT_CLASSIFICATION	2.7964248812500206E-8	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999898190233	WITHOUT_CLASSIFICATION	1.0180976638147586E-8	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999984899027	WITHOUT_CLASSIFICATION	1.510097300552062E-8	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997940967664	WITHOUT_CLASSIFICATION	2.0590323351391886E-7	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999714449728	WITHOUT_CLASSIFICATION	2.8555027256371295E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999993318904342	WITHOUT_CLASSIFICATION	6.681095658964828E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999913910934687	WITHOUT_CLASSIFICATION	8.60890653136284E-6	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993278654224	WITHOUT_CLASSIFICATION	6.721345775286567E-7	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999991540120109	WITHOUT_CLASSIFICATION	8.459879892318613E-7	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999975949769	WITHOUT_CLASSIFICATION	2.405023039427103E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999995027974522	WITHOUT_CLASSIFICATION	4.97202547860879E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999735375703	WITHOUT_CLASSIFICATION	2.6462429723832614E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999994827433941	WITHOUT_CLASSIFICATION	5.172566057529991E-7	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999154695458	WITHOUT_CLASSIFICATION	8.453045412391323E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995783186403	WITHOUT_CLASSIFICATION	4.2168135962623746E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999988226239476	WITHOUT_CLASSIFICATION	1.1773760524085108E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999980223834924	WITHOUT_CLASSIFICATION	1.9776165074753805E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999920279493	WITHOUT_CLASSIFICATION	7.972050560643608E-9	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996661371519	WITHOUT_CLASSIFICATION	3.338628480915432E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995783186403	WITHOUT_CLASSIFICATION	4.2168135962623746E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997255647350506	WITHOUT_CLASSIFICATION	2.7443526494940244E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997415019783	WITHOUT_CLASSIFICATION	2.5849802166106185E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998782320368	WITHOUT_CLASSIFICATION	1.217679630949387E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998808678096	WITHOUT_CLASSIFICATION	1.1913219042224501E-7	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999977271209723	WITHOUT_CLASSIFICATION	2.2728790275698504E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999153241892	WITHOUT_CLASSIFICATION	8.467581082459255E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999970533281	WITHOUT_CLASSIFICATION	2.9466718464855216E-9	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999885236153467	WITHOUT_CLASSIFICATION	1.147638465330942E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998641430593	WITHOUT_CLASSIFICATION	1.3585694070955404E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999999303459093	WITHOUT_CLASSIFICATION	6.965409068328709E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999999052155418	WITHOUT_CLASSIFICATION	9.478445813042349E-8	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999948807465585	WITHOUT_CLASSIFICATION	5.119253441503095E-5	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999986712875	WITHOUT_CLASSIFICATION	1.3287124590388747E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999778434551	WITHOUT_CLASSIFICATION	2.215654486682403E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999932641588	WITHOUT_CLASSIFICATION	6.735841231446018E-9	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999996210848696	WITHOUT_CLASSIFICATION	3.78915130393028E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998705851211	WITHOUT_CLASSIFICATION	1.2941487903062718E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999699915562	WITHOUT_CLASSIFICATION	3.000844374193577E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999806802753	WITHOUT_CLASSIFICATION	1.9319724723301367E-8	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999984237827275	WITHOUT_CLASSIFICATION	1.576217272560094E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999901946126	WITHOUT_CLASSIFICATION	9.805387436844474E-9	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999749399792	WITHOUT_CLASSIFICATION	2.5060020731443414E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998013621443	WITHOUT_CLASSIFICATION	1.9863785567547416E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999999720278	WITHOUT_CLASSIFICATION	2.7972203183625383E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999942588202	WITHOUT_CLASSIFICATION	5.741179790746131E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999958423635	WITHOUT_CLASSIFICATION	4.157636544024185E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999993907628618	WITHOUT_CLASSIFICATION	6.092371382281365E-7	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999469971013935	WITHOUT_CLASSIFICATION	5.3002898606560797E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991806591307	WITHOUT_CLASSIFICATION	8.193408692778822E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999992059943638	WITHOUT_CLASSIFICATION	7.940056362128434E-7	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999998780480095	WITHOUT_CLASSIFICATION	1.2195199050434416E-7	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999999057977196	WITHOUT_CLASSIFICATION	9.420228037880463E-8	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999995494865592	WITHOUT_CLASSIFICATION	4.5051344074224614E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999998198498827	WITHOUT_CLASSIFICATION	1.801501172288636E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999960089392	WITHOUT_CLASSIFICATION	3.9910608491296574E-9	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999768496202	WITHOUT_CLASSIFICATION	2.3150379894778627E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999312986011	WITHOUT_CLASSIFICATION	6.870139892583192E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999987969143744	WITHOUT_CLASSIFICATION	1.2030856255875031E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999996647325547	WITHOUT_CLASSIFICATION	3.3526744528889674E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999917183511	WITHOUT_CLASSIFICATION	8.281648905556852E-9	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999919695501	WITHOUT_CLASSIFICATION	8.030449872743003E-9	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999665362104	WITHOUT_CLASSIFICATION	3.346378957567825E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999665362104	WITHOUT_CLASSIFICATION	3.346378957567825E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999958584485495	WITHOUT_CLASSIFICATION	4.141551450420945E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998900912709	WITHOUT_CLASSIFICATION	1.0990872910531902E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998918717796	WITHOUT_CLASSIFICATION	1.0812822043667065E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999133866975	WITHOUT_CLASSIFICATION	8.661330250802811E-8	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999976855218417	WITHOUT_CLASSIFICATION	2.3144781582655052E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999976855218417	WITHOUT_CLASSIFICATION	2.3144781582655052E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999086699893409	WITHOUT_CLASSIFICATION	9.133001065909329E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999164361213	WITHOUT_CLASSIFICATION	8.356387878933296E-8	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999998712180378	WITHOUT_CLASSIFICATION	1.2878196222713997E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999795989643	WITHOUT_CLASSIFICATION	2.0401035720876627E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999999011577557	WITHOUT_CLASSIFICATION	9.884224430874273E-8	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999972086964425	WITHOUT_CLASSIFICATION	2.791303557462486E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998445154011	WITHOUT_CLASSIFICATION	1.5548459876503533E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999984316268066	WITHOUT_CLASSIFICATION	1.5683731933648276E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999998330657305	WITHOUT_CLASSIFICATION	1.6693426939818635E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997750700294	WITHOUT_CLASSIFICATION	2.2492997073063917E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9987681265895674	WITHOUT_CLASSIFICATION	0.0012318734104325654	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969308443286	WITHOUT_CLASSIFICATION	3.0691556712947103E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969308443286	WITHOUT_CLASSIFICATION	3.0691556712947103E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999885074451	WITHOUT_CLASSIFICATION	1.1492554956487015E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999621560086436	WITHOUT_CLASSIFICATION	3.7843991356410574E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999980287219712	WITHOUT_CLASSIFICATION	1.9712780288107376E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999994338893639	WITHOUT_CLASSIFICATION	5.66110636097638E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999994299618103	WITHOUT_CLASSIFICATION	5.700381896354938E-7	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300632751	WITHOUT_CLASSIFICATION	6.993672487980574E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973249705218697	WITHOUT_CLASSIFICATION	0.0026750294781302596	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998220757064	WITHOUT_CLASSIFICATION	1.77924293658271E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999999679880498	WITHOUT_CLASSIFICATION	3.2011950193578853E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999998861931856	WITHOUT_CLASSIFICATION	1.1380681450054909E-7	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999915276771	WITHOUT_CLASSIFICATION	8.472322900457097E-8	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999999303459093	WITHOUT_CLASSIFICATION	6.965409068328709E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999999930408962	WITHOUT_CLASSIFICATION	6.959103813568777E-8	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999894072348587	WITHOUT_CLASSIFICATION	1.0592765141164262E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999680046827	WITHOUT_CLASSIFICATION	3.199531734196191E-8	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998251961686	WITHOUT_CLASSIFICATION	1.7480383131021137E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999991140554242	WITHOUT_CLASSIFICATION	8.859445759545288E-7	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999993020831236	WITHOUT_CLASSIFICATION	6.979168764751677E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999979287655983	WITHOUT_CLASSIFICATION	2.0712344016543185E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998595551389	WITHOUT_CLASSIFICATION	1.4044486114846763E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999937654875	WITHOUT_CLASSIFICATION	6.234512512918698E-9	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999996282364943	WITHOUT_CLASSIFICATION	3.7176350570081864E-6	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999996282364943	WITHOUT_CLASSIFICATION	3.7176350570081864E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994765623554	WITHOUT_CLASSIFICATION	5.234376445006711E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999414803	WITHOUT_CLASSIFICATION	5.851974899589784E-11	TEST
package	WITHOUT_CLASSIFICATION	0.9999918430674727	WITHOUT_CLASSIFICATION	8.156932527335952E-6	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999782469273	WITHOUT_CLASSIFICATION	2.175307264034688E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999998398594137	WITHOUT_CLASSIFICATION	1.6014058639012068E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999848191954	WITHOUT_CLASSIFICATION	1.5180804676458514E-8	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996948694152	WITHOUT_CLASSIFICATION	3.051305848325747E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999976013771	WITHOUT_CLASSIFICATION	2.3986229649666555E-9	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995828725329	WITHOUT_CLASSIFICATION	4.171274671699029E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999989671470689	WITHOUT_CLASSIFICATION	1.0328529311030775E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962845278687	WITHOUT_CLASSIFICATION	3.7154721313864898E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999947360310872	WITHOUT_CLASSIFICATION	5.263968912737509E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999012371446	WITHOUT_CLASSIFICATION	9.876285546820831E-8	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999765525672	WITHOUT_CLASSIFICATION	2.34474328002404E-8	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998499223335	WITHOUT_CLASSIFICATION	1.500776664390533E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999731240963	WITHOUT_CLASSIFICATION	2.687590374911384E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999781689968	WITHOUT_CLASSIFICATION	2.1831003187304624E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999937066453036	WITHOUT_CLASSIFICATION	6.293354696275357E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999983554908982	WITHOUT_CLASSIFICATION	1.644509101760558E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999996102691808	WITHOUT_CLASSIFICATION	3.897308191792712E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999999590496927	WITHOUT_CLASSIFICATION	4.095030729340334E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997280471307	WITHOUT_CLASSIFICATION	2.719528693609388E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999902333158137	WITHOUT_CLASSIFICATION	9.766684186279334E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999976315643948	WITHOUT_CLASSIFICATION	2.368435605317276E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999595263752	WITHOUT_CLASSIFICATION	4.047362467846636E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999595263752	WITHOUT_CLASSIFICATION	4.047362467846636E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999981316843842	WITHOUT_CLASSIFICATION	1.868315615689419E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995284409996	WITHOUT_CLASSIFICATION	4.715590003581238E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999969608111	WITHOUT_CLASSIFICATION	3.039188904004598E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999955126464	WITHOUT_CLASSIFICATION	4.487353648367441E-9	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999993669069777	WITHOUT_CLASSIFICATION	6.330930223278738E-7	TEST
