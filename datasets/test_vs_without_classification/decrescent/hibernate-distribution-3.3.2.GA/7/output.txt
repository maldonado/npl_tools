//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9993737680481225	WITHOUT_CLASSIFICATION	6.262319518774901E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999742883239915	WITHOUT_CLASSIFICATION	2.571167600844119E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999164390708	WITHOUT_CLASSIFICATION	8.356092918546227E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999993942971213	WITHOUT_CLASSIFICATION	6.057028786899411E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998111178547	WITHOUT_CLASSIFICATION	1.8888214520965043E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998111178547	WITHOUT_CLASSIFICATION	1.8888214520965043E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998475640932	WITHOUT_CLASSIFICATION	1.524359066627664E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999027430977	WITHOUT_CLASSIFICATION	9.725690226051618E-8	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996816450031	WITHOUT_CLASSIFICATION	3.183549969168603E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999612785373	WITHOUT_CLASSIFICATION	3.872146264854041E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996623214357	WITHOUT_CLASSIFICATION	3.3767856431445825E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996623214357	WITHOUT_CLASSIFICATION	3.3767856431445825E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999983261634612	WITHOUT_CLASSIFICATION	1.6738365387598819E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999761893216	WITHOUT_CLASSIFICATION	2.3810678510596444E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999490107659	WITHOUT_CLASSIFICATION	5.098923415469695E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999952556485381	WITHOUT_CLASSIFICATION	4.7443514618579985E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999645615131	WITHOUT_CLASSIFICATION	3.5438486939586026E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999980675488409	WITHOUT_CLASSIFICATION	1.9324511591109093E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999963750368644	WITHOUT_CLASSIFICATION	3.6249631356669006E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999957192117257	WITHOUT_CLASSIFICATION	4.280788274254721E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999961636672433	WITHOUT_CLASSIFICATION	3.836332756679234E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997680042370309	WITHOUT_CLASSIFICATION	2.3199576296900788E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999982538738378	WITHOUT_CLASSIFICATION	1.7461261622651265E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999980929570219	WITHOUT_CLASSIFICATION	1.907042978134581E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999515178908	WITHOUT_CLASSIFICATION	4.848210920179305E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972134501641	WITHOUT_CLASSIFICATION	2.7865498359801276E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972134501641	WITHOUT_CLASSIFICATION	2.7865498359801276E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999998680572558	WITHOUT_CLASSIFICATION	1.319427442277796E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999953167846631	WITHOUT_CLASSIFICATION	4.68321533688342E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999401796161	WITHOUT_CLASSIFICATION	5.982038388429344E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999756008506	WITHOUT_CLASSIFICATION	2.4399149325395492E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999990318877283	WITHOUT_CLASSIFICATION	9.681122716273105E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.897082376251173	TEST	0.10291762374882703	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.897082376251173	TEST	0.10291762374882703	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998596020957	WITHOUT_CLASSIFICATION	1.4039790434471753E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999867495255544	WITHOUT_CLASSIFICATION	1.3250474445624267E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999697689411	WITHOUT_CLASSIFICATION	3.023105888973634E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995574089096	WITHOUT_CLASSIFICATION	4.4259109044533443E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.999999949361193	WITHOUT_CLASSIFICATION	5.063880696155678E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990329139803	WITHOUT_CLASSIFICATION	9.670860196225978E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991674351014	WITHOUT_CLASSIFICATION	8.325648985885285E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999786058501	WITHOUT_CLASSIFICATION	2.1394149819096332E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999922765844951	WITHOUT_CLASSIFICATION	7.723415504996048E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999229287564	WITHOUT_CLASSIFICATION	7.707124370303193E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999992425921671	WITHOUT_CLASSIFICATION	7.574078327750233E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999922765844951	WITHOUT_CLASSIFICATION	7.723415504996048E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999992425921671	WITHOUT_CLASSIFICATION	7.574078327750233E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995790248883	WITHOUT_CLASSIFICATION	4.2097511169792683E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999499593659165	WITHOUT_CLASSIFICATION	5.00406340835016E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999995838366411	WITHOUT_CLASSIFICATION	4.161633588500318E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999995642897354	WITHOUT_CLASSIFICATION	4.357102645715805E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999979686729834	WITHOUT_CLASSIFICATION	2.0313270166338632E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999792807474143	WITHOUT_CLASSIFICATION	2.0719252585825447E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999401520330867	WITHOUT_CLASSIFICATION	5.984796691334287E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999996035655301	WITHOUT_CLASSIFICATION	3.964344699505039E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999707664139	WITHOUT_CLASSIFICATION	2.923358609526758E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.999995164146242	WITHOUT_CLASSIFICATION	4.835853758057139E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999995551367529	WITHOUT_CLASSIFICATION	4.448632470623104E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999999211905801	WITHOUT_CLASSIFICATION	7.880941994999629E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999788331946	WITHOUT_CLASSIFICATION	2.1166805376957307E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999540834368	WITHOUT_CLASSIFICATION	4.591656323424815E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999810703982	WITHOUT_CLASSIFICATION	1.8929601839777508E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999997291351694	WITHOUT_CLASSIFICATION	2.7086483058541772E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999911119268	WITHOUT_CLASSIFICATION	8.888073155734265E-9	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999675557948	WITHOUT_CLASSIFICATION	3.2444205230681785E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998132730316	WITHOUT_CLASSIFICATION	1.8672696843715213E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998975984425	WITHOUT_CLASSIFICATION	1.0240155746576147E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999990960351686	WITHOUT_CLASSIFICATION	9.039648313717028E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999931019201	WITHOUT_CLASSIFICATION	6.898079896799117E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999917890847	WITHOUT_CLASSIFICATION	8.210915258989974E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999997220339336	WITHOUT_CLASSIFICATION	2.7796606640052506E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999950736081297	WITHOUT_CLASSIFICATION	4.92639187037069E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999792460741	WITHOUT_CLASSIFICATION	2.075392594254071E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999959754895	WITHOUT_CLASSIFICATION	4.024510437763884E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999988599822335	WITHOUT_CLASSIFICATION	1.1400177665095275E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999976579116071	WITHOUT_CLASSIFICATION	2.342088392800872E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988593898854	WITHOUT_CLASSIFICATION	1.1406101146001936E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999990441204627	WITHOUT_CLASSIFICATION	9.558795372613114E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999922505841	WITHOUT_CLASSIFICATION	7.749415970039339E-9	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998178172208	WITHOUT_CLASSIFICATION	1.8218277919700475E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999914658951	WITHOUT_CLASSIFICATION	8.53410475552877E-9	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999446367075	WITHOUT_CLASSIFICATION	5.536329246268646E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997217811621	WITHOUT_CLASSIFICATION	2.7821883786485794E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999914658951	WITHOUT_CLASSIFICATION	8.53410475552877E-9	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999776689765	WITHOUT_CLASSIFICATION	2.2331023479095554E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999311456195	WITHOUT_CLASSIFICATION	6.88543804878305E-8	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999997121200821	WITHOUT_CLASSIFICATION	2.8787991794472393E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999999889515319	WITHOUT_CLASSIFICATION	1.1048468101943317E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999416513423	WITHOUT_CLASSIFICATION	5.834865754964566E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999934537721	WITHOUT_CLASSIFICATION	6.546227983433179E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999934537721	WITHOUT_CLASSIFICATION	6.546227983433179E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999994183084684	WITHOUT_CLASSIFICATION	5.81691531640355E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999094153853	WITHOUT_CLASSIFICATION	9.058461469099647E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999952387451144	WITHOUT_CLASSIFICATION	4.76125488559263E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999817802562	WITHOUT_CLASSIFICATION	1.8219743891318246E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999638477888	WITHOUT_CLASSIFICATION	3.615221121836974E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999790063828	WITHOUT_CLASSIFICATION	2.099361712591566E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998938509362	WITHOUT_CLASSIFICATION	1.0614906379666803E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999905682572	WITHOUT_CLASSIFICATION	9.431742800929771E-9	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998932191151	WITHOUT_CLASSIFICATION	1.0678088492193342E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999618974198	WITHOUT_CLASSIFICATION	3.8102580106067165E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999255025211	WITHOUT_CLASSIFICATION	7.449747890915124E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999255025211	WITHOUT_CLASSIFICATION	7.449747890915124E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999998691887	WITHOUT_CLASSIFICATION	1.3081130024973708E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999955817284	WITHOUT_CLASSIFICATION	4.418271607171329E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996038116096	WITHOUT_CLASSIFICATION	3.9618839044660356E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999255025211	WITHOUT_CLASSIFICATION	7.449747890915124E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999998691887	WITHOUT_CLASSIFICATION	1.3081130024973708E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999998691887	WITHOUT_CLASSIFICATION	1.3081130024973708E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999963043320755	WITHOUT_CLASSIFICATION	3.6956679245550816E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999997364275286	WITHOUT_CLASSIFICATION	2.6357247140993386E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999964510358	WITHOUT_CLASSIFICATION	3.5489641961991945E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999997357229494	WITHOUT_CLASSIFICATION	2.6427705057608016E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999992191769591	WITHOUT_CLASSIFICATION	7.808230409888384E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999992191769591	WITHOUT_CLASSIFICATION	7.808230409888384E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999991777761329	WITHOUT_CLASSIFICATION	8.222238671562505E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999986295203226	WITHOUT_CLASSIFICATION	1.3704796773516425E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999997623914516	WITHOUT_CLASSIFICATION	2.3760854838209486E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999015510691	WITHOUT_CLASSIFICATION	9.844893090938171E-8	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999015510691	WITHOUT_CLASSIFICATION	9.844893090938171E-8	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999992759429297	WITHOUT_CLASSIFICATION	7.240570702966676E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999990144021782	WITHOUT_CLASSIFICATION	9.855978217033198E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999779438570869	WITHOUT_CLASSIFICATION	2.2056142913033072E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999337451206	WITHOUT_CLASSIFICATION	6.625487931888554E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999987794500786	WITHOUT_CLASSIFICATION	1.2205499213699704E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999988549067867	WITHOUT_CLASSIFICATION	1.1450932132174843E-6	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999970844436434	WITHOUT_CLASSIFICATION	2.9155563566056215E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998840411464	WITHOUT_CLASSIFICATION	1.1595885358411703E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999962372464787	WITHOUT_CLASSIFICATION	3.762753521242236E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999779438570869	WITHOUT_CLASSIFICATION	2.2056142913033072E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999889832507637	WITHOUT_CLASSIFICATION	1.1016749236263488E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999997290954158	WITHOUT_CLASSIFICATION	2.7090458419254775E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999997290954158	WITHOUT_CLASSIFICATION	2.7090458419254775E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998494020853	WITHOUT_CLASSIFICATION	1.5059791473445585E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999935731223304	WITHOUT_CLASSIFICATION	6.426877669601077E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995669471843	WITHOUT_CLASSIFICATION	4.330528157714892E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999862717086698	WITHOUT_CLASSIFICATION	1.3728291330151333E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999979251131209	WITHOUT_CLASSIFICATION	2.0748868791521896E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999908897789237	WITHOUT_CLASSIFICATION	9.110221076188891E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999998913469315	WITHOUT_CLASSIFICATION	1.086530685209295E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999914233052	WITHOUT_CLASSIFICATION	8.576694768554729E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999924157817	WITHOUT_CLASSIFICATION	7.58421824022417E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999924157817	WITHOUT_CLASSIFICATION	7.58421824022417E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9993737680481225	WITHOUT_CLASSIFICATION	6.262319518774901E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997684007009	WITHOUT_CLASSIFICATION	2.31599299073811E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998481164715	WITHOUT_CLASSIFICATION	1.5188352844949282E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999995476977702	WITHOUT_CLASSIFICATION	4.5230222982740924E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999994802952016	WITHOUT_CLASSIFICATION	5.197047984614837E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999981822854472	WITHOUT_CLASSIFICATION	1.8177145527889219E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999997844089568	WITHOUT_CLASSIFICATION	2.1559104326230764E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995937789323	WITHOUT_CLASSIFICATION	4.0622106769596886E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.999997838899854	WITHOUT_CLASSIFICATION	2.1611001458873233E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999987666373986	WITHOUT_CLASSIFICATION	1.2333626013885832E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999994790321467	WITHOUT_CLASSIFICATION	5.209678532391539E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999164390708	WITHOUT_CLASSIFICATION	8.356092918546227E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998322131678	WITHOUT_CLASSIFICATION	1.6778683213954388E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998322131678	WITHOUT_CLASSIFICATION	1.6778683213954388E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995013120199	WITHOUT_CLASSIFICATION	4.986879801566525E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999931597007549	WITHOUT_CLASSIFICATION	6.840299245071442E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999600296094	WITHOUT_CLASSIFICATION	3.997039058966257E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999957701999701	WITHOUT_CLASSIFICATION	4.229800029895879E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999997624961815	WITHOUT_CLASSIFICATION	2.3750381847288283E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999458586447	WITHOUT_CLASSIFICATION	5.4141355195632164E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998111178547	WITHOUT_CLASSIFICATION	1.8888214520965043E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996515421993	WITHOUT_CLASSIFICATION	3.484578007209638E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999993856542025	WITHOUT_CLASSIFICATION	6.143457973824339E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997959433001	WITHOUT_CLASSIFICATION	2.0405669989076476E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998444654089	WITHOUT_CLASSIFICATION	1.555345910474432E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999996471090913	WITHOUT_CLASSIFICATION	3.528909087888815E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999993861477022	WITHOUT_CLASSIFICATION	6.138522977540435E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996599643663	WITHOUT_CLASSIFICATION	3.4003563357484643E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999012855115	WITHOUT_CLASSIFICATION	9.871448839925133E-8	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999756887159	WITHOUT_CLASSIFICATION	2.4311284157433573E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999998087834345	WITHOUT_CLASSIFICATION	1.9121656548403713E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998020471752	WITHOUT_CLASSIFICATION	1.9795282476908336E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999151922968	WITHOUT_CLASSIFICATION	8.480770329861826E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995230554278	WITHOUT_CLASSIFICATION	4.769445720852137E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999987666373986	WITHOUT_CLASSIFICATION	1.2333626013885832E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998322131678	WITHOUT_CLASSIFICATION	1.6778683213954388E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996599643663	WITHOUT_CLASSIFICATION	3.4003563357484643E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998475640932	WITHOUT_CLASSIFICATION	1.524359066627664E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998703871323	WITHOUT_CLASSIFICATION	1.2961286769130777E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999993668767019	WITHOUT_CLASSIFICATION	6.331232980094526E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999226969591	WITHOUT_CLASSIFICATION	7.730304091290996E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999972471394675	WITHOUT_CLASSIFICATION	2.752860532446702E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996637978684	WITHOUT_CLASSIFICATION	3.362021316861502E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999991910281876	WITHOUT_CLASSIFICATION	8.0897181243173E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999627851683	WITHOUT_CLASSIFICATION	3.721483170017826E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999849406673212	WITHOUT_CLASSIFICATION	1.5059332678703739E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999950834348317	WITHOUT_CLASSIFICATION	4.916565168316711E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999953087833529	WITHOUT_CLASSIFICATION	4.691216647086872E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999953087833529	WITHOUT_CLASSIFICATION	4.691216647086872E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999758544262	WITHOUT_CLASSIFICATION	2.4145573780456184E-8	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999943478391	WITHOUT_CLASSIFICATION	5.652160827950021E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999944497565209	WITHOUT_CLASSIFICATION	5.550243479123475E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999996931659154	WITHOUT_CLASSIFICATION	3.0683408449324205E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999883543376	WITHOUT_CLASSIFICATION	1.1645662334349539E-8	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999930669045	WITHOUT_CLASSIFICATION	6.933095569518509E-9	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998509639902	WITHOUT_CLASSIFICATION	1.4903600987179515E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999027430977	WITHOUT_CLASSIFICATION	9.725690226051618E-8	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999997123427548	WITHOUT_CLASSIFICATION	2.876572452195396E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999737628744	WITHOUT_CLASSIFICATION	2.6237125552299282E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999737628744	WITHOUT_CLASSIFICATION	2.6237125552299282E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998039121201	WITHOUT_CLASSIFICATION	1.9608787993194441E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998559945183	WITHOUT_CLASSIFICATION	1.4400548167395428E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999897299118	WITHOUT_CLASSIFICATION	1.0270088200552683E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999539365502	WITHOUT_CLASSIFICATION	4.6063449904521366E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999992662388814	WITHOUT_CLASSIFICATION	7.337611186665566E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999258499811	WITHOUT_CLASSIFICATION	7.415001896028878E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999987666373986	WITHOUT_CLASSIFICATION	1.2333626013885832E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999164390708	WITHOUT_CLASSIFICATION	8.356092918546227E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996599643663	WITHOUT_CLASSIFICATION	3.4003563357484643E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996599643663	WITHOUT_CLASSIFICATION	3.4003563357484643E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999906728794	WITHOUT_CLASSIFICATION	9.327120598733705E-8	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999906728794	WITHOUT_CLASSIFICATION	9.327120598733705E-8	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999998519170138	WITHOUT_CLASSIFICATION	1.4808298621982468E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999999494387243	WITHOUT_CLASSIFICATION	5.056127570777678E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.999999494387243	WITHOUT_CLASSIFICATION	5.056127570777678E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999998999378115	WITHOUT_CLASSIFICATION	1.0006218851541938E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999999558991672	WITHOUT_CLASSIFICATION	4.4100832721218556E-8	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997942747306	WITHOUT_CLASSIFICATION	2.0572526933880097E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999995938838313	WITHOUT_CLASSIFICATION	4.061161686829237E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999260048019	WITHOUT_CLASSIFICATION	7.399519812508609E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999612785373	WITHOUT_CLASSIFICATION	3.872146264854041E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999612785373	WITHOUT_CLASSIFICATION	3.872146264854041E-8	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999995687879712	WITHOUT_CLASSIFICATION	4.31212028764672E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999999488867045	WITHOUT_CLASSIFICATION	5.1113295487424554E-8	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999992959885194	WITHOUT_CLASSIFICATION	7.04011480472118E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.999998605428132	WITHOUT_CLASSIFICATION	1.3945718680464627E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999995133493698	WITHOUT_CLASSIFICATION	4.866506303031434E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999970230693472	WITHOUT_CLASSIFICATION	2.976930652848459E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996623214357	WITHOUT_CLASSIFICATION	3.3767856431445825E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.999999343977725	WITHOUT_CLASSIFICATION	6.560222748603239E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.999999343977725	WITHOUT_CLASSIFICATION	6.560222748603239E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999983261634612	WITHOUT_CLASSIFICATION	1.6738365387598819E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999983261634612	WITHOUT_CLASSIFICATION	1.6738365387598819E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997094049962	WITHOUT_CLASSIFICATION	2.905950038139097E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997094049962	WITHOUT_CLASSIFICATION	2.905950038139097E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997909801471	WITHOUT_CLASSIFICATION	2.0901985288895067E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997909801471	WITHOUT_CLASSIFICATION	2.0901985288895067E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999612785373	WITHOUT_CLASSIFICATION	3.872146264854041E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996623214357	WITHOUT_CLASSIFICATION	3.3767856431445825E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.999999343977725	WITHOUT_CLASSIFICATION	6.560222748603239E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.999999343977725	WITHOUT_CLASSIFICATION	6.560222748603239E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999983261634612	WITHOUT_CLASSIFICATION	1.6738365387598819E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997094049962	WITHOUT_CLASSIFICATION	2.905950038139097E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999997094049962	WITHOUT_CLASSIFICATION	2.905950038139097E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997909801471	WITHOUT_CLASSIFICATION	2.0901985288895067E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999157568366	WITHOUT_CLASSIFICATION	8.424316346447562E-8	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999989794377687	WITHOUT_CLASSIFICATION	1.0205622312665095E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999985583270525	WITHOUT_CLASSIFICATION	1.4416729474635431E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999998145875927	WITHOUT_CLASSIFICATION	1.8541240730234193E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999981525275239	WITHOUT_CLASSIFICATION	1.8474724760829878E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999989776560372	WITHOUT_CLASSIFICATION	1.0223439629059127E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998093844047	WITHOUT_CLASSIFICATION	1.9061559534175345E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999196874756	WITHOUT_CLASSIFICATION	8.031252439195011E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999983378643863	WITHOUT_CLASSIFICATION	1.662135613696785E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999997074390006	WITHOUT_CLASSIFICATION	2.9256099951539423E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999999939550079	WITHOUT_CLASSIFICATION	6.044992102118396E-8	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998557394011	WITHOUT_CLASSIFICATION	1.4426059897192147E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999994183084684	WITHOUT_CLASSIFICATION	5.81691531640355E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999989776560372	WITHOUT_CLASSIFICATION	1.0223439629059127E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999800612064179	WITHOUT_CLASSIFICATION	1.9938793582106927E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999800612064179	WITHOUT_CLASSIFICATION	1.9938793582106927E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999998513792419	WITHOUT_CLASSIFICATION	1.4862075809419585E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996644458663	WITHOUT_CLASSIFICATION	3.3555413358183696E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996644458663	WITHOUT_CLASSIFICATION	3.3555413358183696E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999991339776179	WITHOUT_CLASSIFICATION	8.660223821262134E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999975154932023	WITHOUT_CLASSIFICATION	2.4845067977485612E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999994236844515	WITHOUT_CLASSIFICATION	5.763155485366727E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999622754467	WITHOUT_CLASSIFICATION	3.7724553240712214E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999622754467	WITHOUT_CLASSIFICATION	3.7724553240712214E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999645615131	WITHOUT_CLASSIFICATION	3.5438486939586026E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999849195056	WITHOUT_CLASSIFICATION	1.5080494349827663E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999849195056	WITHOUT_CLASSIFICATION	1.5080494349827663E-8	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999962451678226	WITHOUT_CLASSIFICATION	3.7548321775337216E-6	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997557889094	WITHOUT_CLASSIFICATION	2.442110905272941E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999004171942	WITHOUT_CLASSIFICATION	9.958280573804239E-8	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999948951380356	WITHOUT_CLASSIFICATION	5.104861964418186E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999973858175012	WITHOUT_CLASSIFICATION	2.6141824988624982E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999978810286733	WITHOUT_CLASSIFICATION	2.118971326798081E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999980675488409	WITHOUT_CLASSIFICATION	1.9324511591109093E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999981164161594	WITHOUT_CLASSIFICATION	1.8835838406191782E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9985736820521738	WITHOUT_CLASSIFICATION	0.0014263179478261406	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999951005460227	WITHOUT_CLASSIFICATION	4.899453977207948E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999912234784496	WITHOUT_CLASSIFICATION	8.776521550354542E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999961636672433	WITHOUT_CLASSIFICATION	3.836332756679234E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999129840798	WITHOUT_CLASSIFICATION	8.701592021870895E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999644215544519	WITHOUT_CLASSIFICATION	3.5578445548189594E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999815604752662	WITHOUT_CLASSIFICATION	1.8439524733820405E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999961636672433	WITHOUT_CLASSIFICATION	3.836332756679234E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999941436847	WITHOUT_CLASSIFICATION	5.856315307206839E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999942801789	WITHOUT_CLASSIFICATION	5.719821005173287E-9	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999984963865595	WITHOUT_CLASSIFICATION	1.5036134405542362E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.999996671356838	WITHOUT_CLASSIFICATION	3.3286431619930034E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999990196420142	WITHOUT_CLASSIFICATION	9.80357985734079E-7	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999978010328795	WITHOUT_CLASSIFICATION	2.198967120547755E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999903459602709	WITHOUT_CLASSIFICATION	9.654039729047608E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999980929570219	WITHOUT_CLASSIFICATION	1.907042978134581E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975513475289	WITHOUT_CLASSIFICATION	2.448652471097631E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999515178908	WITHOUT_CLASSIFICATION	4.848210920179305E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996719418103	WITHOUT_CLASSIFICATION	3.280581896887274E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999683551992	WITHOUT_CLASSIFICATION	3.1644800835223785E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999972096138564	WITHOUT_CLASSIFICATION	2.7903861435988623E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999980675488409	WITHOUT_CLASSIFICATION	1.9324511591109093E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975513475289	WITHOUT_CLASSIFICATION	2.448652471097631E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996719418103	WITHOUT_CLASSIFICATION	3.280581896887274E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999972096138564	WITHOUT_CLASSIFICATION	2.7903861435988623E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999869378334	WITHOUT_CLASSIFICATION	1.3062166522922918E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999938403958447	WITHOUT_CLASSIFICATION	6.1596041552481995E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999959439887	WITHOUT_CLASSIFICATION	4.0560113357969105E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972134501641	WITHOUT_CLASSIFICATION	2.7865498359801276E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999981056925538	WITHOUT_CLASSIFICATION	1.8943074462553333E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999207194341	WITHOUT_CLASSIFICATION	7.928056587946805E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999962983555336	WITHOUT_CLASSIFICATION	3.7016444663229012E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999991866051374	WITHOUT_CLASSIFICATION	8.133948626106439E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999985538358018	WITHOUT_CLASSIFICATION	1.4461641981693547E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999691659651	WITHOUT_CLASSIFICATION	3.083403490084959E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987120404914	WITHOUT_CLASSIFICATION	1.2879595086349872E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999990906782381	WITHOUT_CLASSIFICATION	9.093217619543352E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999912654217	WITHOUT_CLASSIFICATION	8.734578375248345E-9	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999991969012183	WITHOUT_CLASSIFICATION	8.030987815967049E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999969467926247	WITHOUT_CLASSIFICATION	3.053207375158357E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999984789782431	WITHOUT_CLASSIFICATION	1.521021756941515E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999953167846631	WITHOUT_CLASSIFICATION	4.68321533688342E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999947747004445	WITHOUT_CLASSIFICATION	5.225299555534703E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999976598229859	WITHOUT_CLASSIFICATION	2.340177014050557E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999975513475289	WITHOUT_CLASSIFICATION	2.448652471097631E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998343107201	WITHOUT_CLASSIFICATION	1.656892798099341E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999452502415	WITHOUT_CLASSIFICATION	5.474975862589773E-8	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999615235029	WITHOUT_CLASSIFICATION	3.847649703887586E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9983753222845836	WITHOUT_CLASSIFICATION	0.0016246777154164565	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999996324249812	WITHOUT_CLASSIFICATION	3.675750187893381E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999993369305666	WITHOUT_CLASSIFICATION	6.630694333001511E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999995125354	WITHOUT_CLASSIFICATION	4.874645634691193E-10	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999926401106	WITHOUT_CLASSIFICATION	7.359889398513518E-9	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999982320913335	WITHOUT_CLASSIFICATION	1.767908666551768E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999971418461986	WITHOUT_CLASSIFICATION	2.858153801423509E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999982354442888	WITHOUT_CLASSIFICATION	1.7645557111668146E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999965057040222	WITHOUT_CLASSIFICATION	3.4942959778783302E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999449633535	WITHOUT_CLASSIFICATION	5.5036646356665276E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999756008506	WITHOUT_CLASSIFICATION	2.4399149325395492E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999783061408	WITHOUT_CLASSIFICATION	2.1693859095865482E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999699815513	WITHOUT_CLASSIFICATION	3.001844864440811E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999988785934181	WITHOUT_CLASSIFICATION	1.121406581891639E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999999924400604	WITHOUT_CLASSIFICATION	7.559939599166906E-8	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999694693881	WITHOUT_CLASSIFICATION	3.053061201797494E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995040680558	WITHOUT_CLASSIFICATION	4.959319442121997E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999605244059	WITHOUT_CLASSIFICATION	3.94755940667228E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999996771629492	WITHOUT_CLASSIFICATION	3.2283705072650116E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998945494472	WITHOUT_CLASSIFICATION	1.054505528824803E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999995760629236	WITHOUT_CLASSIFICATION	4.2393707639544515E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999990759832373	WITHOUT_CLASSIFICATION	9.240167627067598E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999990759832373	WITHOUT_CLASSIFICATION	9.240167627067598E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999900027185665	WITHOUT_CLASSIFICATION	9.997281433451941E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999778510444	WITHOUT_CLASSIFICATION	2.2148955527215208E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999049145855	WITHOUT_CLASSIFICATION	9.508541456905779E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999998852383075	WITHOUT_CLASSIFICATION	1.1476169235963235E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999989774582039	WITHOUT_CLASSIFICATION	1.0225417961386542E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996383757993	WITHOUT_CLASSIFICATION	3.6162420073809595E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999228637206	WITHOUT_CLASSIFICATION	7.713627940669526E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999961915575342	WITHOUT_CLASSIFICATION	3.8084424657906706E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999956978343467	WITHOUT_CLASSIFICATION	4.30216565320728E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999988139894687	WITHOUT_CLASSIFICATION	1.1860105314094188E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999984776866937	WITHOUT_CLASSIFICATION	1.522313306350745E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998256920705	WITHOUT_CLASSIFICATION	1.743079295825197E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999992199948127	WITHOUT_CLASSIFICATION	7.80005187271742E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999998763087472	WITHOUT_CLASSIFICATION	1.2369125289009645E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998847732134	WITHOUT_CLASSIFICATION	1.1522678645209618E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999463554454	WITHOUT_CLASSIFICATION	5.36445545287594E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998632330919	WITHOUT_CLASSIFICATION	1.3676690806552428E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998432424476	WITHOUT_CLASSIFICATION	1.5675755236103466E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999993596314312	WITHOUT_CLASSIFICATION	6.403685687813297E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999993002781544	WITHOUT_CLASSIFICATION	6.9972184555658E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995245244702	WITHOUT_CLASSIFICATION	4.7547552979935225E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995245244702	WITHOUT_CLASSIFICATION	4.7547552979935225E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999997187108716	WITHOUT_CLASSIFICATION	2.812891283970413E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.999997187108716	WITHOUT_CLASSIFICATION	2.812891283970413E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998945494472	WITHOUT_CLASSIFICATION	1.054505528824803E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999705595666	WITHOUT_CLASSIFICATION	2.944043340186119E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999917485643297	WITHOUT_CLASSIFICATION	8.25143567034926E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99999677897313	WITHOUT_CLASSIFICATION	3.221026870071041E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999917485643297	WITHOUT_CLASSIFICATION	8.25143567034926E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.99999677897313	WITHOUT_CLASSIFICATION	3.221026870071041E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999983689957518	WITHOUT_CLASSIFICATION	1.63100424821092E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999846855781002	WITHOUT_CLASSIFICATION	1.531442189987931E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999946448827	WITHOUT_CLASSIFICATION	5.3551173819383434E-9	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998765527954	WITHOUT_CLASSIFICATION	1.2344720449639535E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999976068768692	WITHOUT_CLASSIFICATION	2.3931231308222537E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999933688956063	WITHOUT_CLASSIFICATION	6.6311043936450385E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999453044168	WITHOUT_CLASSIFICATION	5.4695583127361844E-8	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994068526934	WITHOUT_CLASSIFICATION	5.931473065484914E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999964298870481	WITHOUT_CLASSIFICATION	3.5701129518598096E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999553858837	WITHOUT_CLASSIFICATION	4.461411635882815E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999997819536478	WITHOUT_CLASSIFICATION	2.1804635217989225E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999991855617	WITHOUT_CLASSIFICATION	8.144383761187242E-10	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997877972345	WITHOUT_CLASSIFICATION	2.1220276555846818E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999768802417849	WITHOUT_CLASSIFICATION	2.3119758215062055E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999791602347848	WITHOUT_CLASSIFICATION	2.0839765215220007E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998635396831125	WITHOUT_CLASSIFICATION	1.3646031688756724E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998635396831125	WITHOUT_CLASSIFICATION	1.3646031688756724E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999886171073	WITHOUT_CLASSIFICATION	1.1382892657247933E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999983689957518	WITHOUT_CLASSIFICATION	1.63100424821092E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999993535138861	WITHOUT_CLASSIFICATION	6.464861138287465E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999924594980815	WITHOUT_CLASSIFICATION	7.540501918557177E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999997655458385	WITHOUT_CLASSIFICATION	2.3445416154103413E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999919554820726	WITHOUT_CLASSIFICATION	8.044517927431111E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998881475173413	WITHOUT_CLASSIFICATION	1.1185248265866464E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999983689957518	WITHOUT_CLASSIFICATION	1.63100424821092E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999919554820726	WITHOUT_CLASSIFICATION	8.044517927431111E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998881475173413	WITHOUT_CLASSIFICATION	1.1185248265866464E-4	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999813964993538	WITHOUT_CLASSIFICATION	1.860350064615276E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999984220491933	WITHOUT_CLASSIFICATION	1.5779508067183323E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999544049079	WITHOUT_CLASSIFICATION	4.559509206505765E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999983689957518	WITHOUT_CLASSIFICATION	1.63100424821092E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999983689957518	WITHOUT_CLASSIFICATION	1.63100424821092E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999995554564336	WITHOUT_CLASSIFICATION	4.4454356647752933E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999997033118921	WITHOUT_CLASSIFICATION	2.9668810788413654E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999992835650449	WITHOUT_CLASSIFICATION	7.164349551484458E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999679579592	WITHOUT_CLASSIFICATION	3.2042040705218505E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999997973381074	WITHOUT_CLASSIFICATION	2.0266189261660682E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999436121845	WITHOUT_CLASSIFICATION	5.638781562893206E-8	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999995202219952	WITHOUT_CLASSIFICATION	4.797780047836626E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999278064472	WITHOUT_CLASSIFICATION	7.219355280679679E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999871609051	WITHOUT_CLASSIFICATION	1.2839095045700735E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.999999235612361	WITHOUT_CLASSIFICATION	7.643876390169844E-7	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999474777024	WITHOUT_CLASSIFICATION	5.252229751387288E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999999775722437	WITHOUT_CLASSIFICATION	2.2427756302620807E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998751194639	WITHOUT_CLASSIFICATION	1.2488053616975748E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997850065424	WITHOUT_CLASSIFICATION	2.1499345747304375E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998810301189	WITHOUT_CLASSIFICATION	1.1896988101778521E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999998226789239	WITHOUT_CLASSIFICATION	1.7732107609836654E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995574089096	WITHOUT_CLASSIFICATION	4.4259109044533443E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999784338942529	WITHOUT_CLASSIFICATION	2.1566105747092005E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999942207877708	WITHOUT_CLASSIFICATION	5.779212229276089E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997352902185	WITHOUT_CLASSIFICATION	2.647097815174954E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999995415303143	WITHOUT_CLASSIFICATION	4.58469685710277E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999939257109411	WITHOUT_CLASSIFICATION	6.074289058841265E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999939257109411	WITHOUT_CLASSIFICATION	6.074289058841265E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999995574089096	WITHOUT_CLASSIFICATION	4.4259109044533443E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999620977562154	WITHOUT_CLASSIFICATION	3.7902243784612206E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999917336072859	WITHOUT_CLASSIFICATION	8.266392714146884E-6	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999211848332814	WITHOUT_CLASSIFICATION	7.881516671866422E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999965265421658	WITHOUT_CLASSIFICATION	3.4734578343223227E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933774104883	WITHOUT_CLASSIFICATION	6.622589511694562E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998732221762	WITHOUT_CLASSIFICATION	1.2677782378108658E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999178772004	WITHOUT_CLASSIFICATION	8.21227994577585E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999996836508813	WITHOUT_CLASSIFICATION	3.1634911869610647E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999926475904	WITHOUT_CLASSIFICATION	7.352409596147725E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999590217781	WITHOUT_CLASSIFICATION	4.097822187017889E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994985765854	WITHOUT_CLASSIFICATION	5.014234144905771E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999919759945843	WITHOUT_CLASSIFICATION	8.024005415664341E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999978078401191	WITHOUT_CLASSIFICATION	2.1921598808989887E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999975327766	WITHOUT_CLASSIFICATION	2.467223484460507E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999675834119	WITHOUT_CLASSIFICATION	3.241658805550765E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999995662428324	WITHOUT_CLASSIFICATION	4.3375716760638383E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999904892696	WITHOUT_CLASSIFICATION	9.510730517024035E-9	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999994123348738	WITHOUT_CLASSIFICATION	5.876651262404924E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999675839965	WITHOUT_CLASSIFICATION	3.2416003574739206E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999842101909	WITHOUT_CLASSIFICATION	1.5789809136440722E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999568831401	WITHOUT_CLASSIFICATION	4.311685986606159E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999677291936	WITHOUT_CLASSIFICATION	3.227080631043862E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998988199772	WITHOUT_CLASSIFICATION	1.0118002280194635E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984440579556	WITHOUT_CLASSIFICATION	1.5559420444760834E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997541975405	WITHOUT_CLASSIFICATION	2.458024595418243E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997994451341	WITHOUT_CLASSIFICATION	2.0055486600189963E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985763555336	WITHOUT_CLASSIFICATION	1.4236444664879591E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994572410033	WITHOUT_CLASSIFICATION	5.427589967533542E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995809761988	WITHOUT_CLASSIFICATION	4.190238011054729E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998732900875	WITHOUT_CLASSIFICATION	1.2670991243098468E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999998962508292	WITHOUT_CLASSIFICATION	1.0374917081507931E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999848341102	WITHOUT_CLASSIFICATION	1.516588978356253E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998218861075	WITHOUT_CLASSIFICATION	1.7811389238463714E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997061591096	WITHOUT_CLASSIFICATION	2.9384089039236857E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999425207037	WITHOUT_CLASSIFICATION	5.7479296383536297E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983054453522	WITHOUT_CLASSIFICATION	1.6945546478593865E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998796310157	WITHOUT_CLASSIFICATION	1.2036898443216447E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998512480562	WITHOUT_CLASSIFICATION	1.487519437300639E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999987308339	WITHOUT_CLASSIFICATION	1.2691660999549586E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999218226547	WITHOUT_CLASSIFICATION	7.817734530696379E-7	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999987020998218	WITHOUT_CLASSIFICATION	1.297900178174543E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998238087604	WITHOUT_CLASSIFICATION	1.7619123955750868E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999944478161646	WITHOUT_CLASSIFICATION	5.552183835282349E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999127412211	WITHOUT_CLASSIFICATION	8.725877889611787E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999745360335	WITHOUT_CLASSIFICATION	2.5463966490788196E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997810100264097	WITHOUT_CLASSIFICATION	2.1898997359041117E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999982303746828	WITHOUT_CLASSIFICATION	1.7696253172648801E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999986901257963	WITHOUT_CLASSIFICATION	1.3098742037035494E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999981341815746	WITHOUT_CLASSIFICATION	1.8658184255196984E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999989007018251	WITHOUT_CLASSIFICATION	1.0992981749394082E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999983169858173	WITHOUT_CLASSIFICATION	1.6830141827021738E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999957717744593	WITHOUT_CLASSIFICATION	4.228225540662956E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999987158651357	WITHOUT_CLASSIFICATION	1.284134864380137E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999990012413099	WITHOUT_CLASSIFICATION	9.987586900034916E-7	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995316686118	WITHOUT_CLASSIFICATION	4.683313882224364E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999995819947153	WITHOUT_CLASSIFICATION	4.180052846707102E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997396641606	WITHOUT_CLASSIFICATION	2.603358394471583E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999978883321358	WITHOUT_CLASSIFICATION	2.111667864224086E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999999998377771	WITHOUT_CLASSIFICATION	1.622229105469097E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999066502834	WITHOUT_CLASSIFICATION	9.334971661340058E-8	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998824727565	WITHOUT_CLASSIFICATION	1.1752724351588021E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999035489687	WITHOUT_CLASSIFICATION	9.645103130058598E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997332633306	WITHOUT_CLASSIFICATION	2.6673666947867124E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999927819927685	WITHOUT_CLASSIFICATION	7.218007231509457E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999932784126	WITHOUT_CLASSIFICATION	6.7215874471936894E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999614544639	WITHOUT_CLASSIFICATION	3.854553615328111E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998446567572	WITHOUT_CLASSIFICATION	1.5534324282465237E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998885699589	WITHOUT_CLASSIFICATION	1.1143004111380598E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999693681789	WITHOUT_CLASSIFICATION	3.063182117731313E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999970573333067	WITHOUT_CLASSIFICATION	2.9426666932759904E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999942416144	WITHOUT_CLASSIFICATION	5.75838559395962E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999982976092	WITHOUT_CLASSIFICATION	1.7023908326139668E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999794674388123	WITHOUT_CLASSIFICATION	2.0532561187727482E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999663128255	WITHOUT_CLASSIFICATION	3.368717453287877E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999479955007	WITHOUT_CLASSIFICATION	5.200449914326634E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999990093543509	WITHOUT_CLASSIFICATION	9.906456490994054E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997810100264097	WITHOUT_CLASSIFICATION	2.1898997359041117E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998762150735	WITHOUT_CLASSIFICATION	1.2378492651037747E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999897195853	WITHOUT_CLASSIFICATION	1.0280414684242206E-8	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999377093216	WITHOUT_CLASSIFICATION	6.229067836339373E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996301958914	WITHOUT_CLASSIFICATION	3.698041085349466E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999760466172	WITHOUT_CLASSIFICATION	2.39533828285627E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999994803331773	WITHOUT_CLASSIFICATION	5.196668227236993E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.999960470282771	WITHOUT_CLASSIFICATION	3.9529717228945554E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997419186191	WITHOUT_CLASSIFICATION	2.580813809192762E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999999966512917	WITHOUT_CLASSIFICATION	3.3487082901366346E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999502370936	WITHOUT_CLASSIFICATION	4.976290629890286E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999844869935	WITHOUT_CLASSIFICATION	1.5513006524435142E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999731763155	WITHOUT_CLASSIFICATION	2.6823684449187317E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999613265308	WITHOUT_CLASSIFICATION	3.867346915259436E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999969084977	WITHOUT_CLASSIFICATION	3.0915022090574302E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999816482606882	WITHOUT_CLASSIFICATION	1.835173931169496E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997434968214	WITHOUT_CLASSIFICATION	2.565031785691394E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999996307691736	WITHOUT_CLASSIFICATION	3.692308264028588E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999993350975865	WITHOUT_CLASSIFICATION	6.649024134247283E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999259423734	WITHOUT_CLASSIFICATION	7.405762658186626E-8	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999982081365173	WITHOUT_CLASSIFICATION	1.7918634827072857E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999917063868	WITHOUT_CLASSIFICATION	8.293613133516383E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999985642200075	WITHOUT_CLASSIFICATION	1.4357799925368268E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999988603644291	WITHOUT_CLASSIFICATION	1.1396355709414044E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998237232788	WITHOUT_CLASSIFICATION	1.7627672125106703E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999988840345618	WITHOUT_CLASSIFICATION	1.1159654381553363E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999996835140502	WITHOUT_CLASSIFICATION	3.1648594976373373E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997680042370309	WITHOUT_CLASSIFICATION	2.3199576296900788E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998688341064	WITHOUT_CLASSIFICATION	1.3116589351894268E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997193869639	WITHOUT_CLASSIFICATION	2.806130361061533E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999579273878	WITHOUT_CLASSIFICATION	4.207261213638167E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997810100264097	WITHOUT_CLASSIFICATION	2.1898997359041117E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996307514086	WITHOUT_CLASSIFICATION	3.6924859132473583E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999689370824	WITHOUT_CLASSIFICATION	3.1062917658053016E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999324241616944	WITHOUT_CLASSIFICATION	6.757583830563811E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997810100264097	WITHOUT_CLASSIFICATION	2.1898997359041117E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994636258875	WITHOUT_CLASSIFICATION	5.363741123944777E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999917063868	WITHOUT_CLASSIFICATION	8.293613133516383E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999961668251498	WITHOUT_CLASSIFICATION	3.833174850235991E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.998959291408352	WITHOUT_CLASSIFICATION	0.0010407085916479314	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999981321154119	WITHOUT_CLASSIFICATION	1.8678845881001635E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999502370936	WITHOUT_CLASSIFICATION	4.976290629890286E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999844869935	WITHOUT_CLASSIFICATION	1.5513006524435142E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999731763155	WITHOUT_CLASSIFICATION	2.6823684449187317E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999973652289308	WITHOUT_CLASSIFICATION	2.6347710691539725E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999997411256486	WITHOUT_CLASSIFICATION	2.588743513660098E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999987471125485	WITHOUT_CLASSIFICATION	1.2528874514754955E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999999150661668	WITHOUT_CLASSIFICATION	8.493383319865909E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999989916958842	WITHOUT_CLASSIFICATION	1.008304115765263E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997810100264097	WITHOUT_CLASSIFICATION	2.1898997359041117E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999613265308	WITHOUT_CLASSIFICATION	3.867346915259436E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999969084977	WITHOUT_CLASSIFICATION	3.0915022090574302E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999658489034	WITHOUT_CLASSIFICATION	3.415109672817562E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999832469495	WITHOUT_CLASSIFICATION	1.675305041364893E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999997229745097	WITHOUT_CLASSIFICATION	2.7702549032312744E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999980628874706	WITHOUT_CLASSIFICATION	1.937112529401793E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999985228538959	WITHOUT_CLASSIFICATION	1.4771461040495065E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999731907998	WITHOUT_CLASSIFICATION	2.6809200179554593E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999218226547	WITHOUT_CLASSIFICATION	7.817734530696379E-7	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999983177751839	WITHOUT_CLASSIFICATION	1.6822248160482453E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999902984603167	WITHOUT_CLASSIFICATION	9.701539683357386E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999992545337559	WITHOUT_CLASSIFICATION	7.454662441460915E-7	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999976245451	WITHOUT_CLASSIFICATION	2.3754549814596656E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999789343154	WITHOUT_CLASSIFICATION	2.1065684652431495E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985763555336	WITHOUT_CLASSIFICATION	1.4236444664879591E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994572410033	WITHOUT_CLASSIFICATION	5.427589967533542E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997061591096	WITHOUT_CLASSIFICATION	2.9384089039236857E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999789343154	WITHOUT_CLASSIFICATION	2.1065684652431495E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999917413277	WITHOUT_CLASSIFICATION	8.258672426939912E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999574199471	WITHOUT_CLASSIFICATION	4.258005296784416E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998704704149	WITHOUT_CLASSIFICATION	1.2952958496154894E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999940590584	WITHOUT_CLASSIFICATION	5.94094159921563E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998449338813	WITHOUT_CLASSIFICATION	1.5506611870968597E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999842182201739	WITHOUT_CLASSIFICATION	1.5781779826144902E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999425207037	WITHOUT_CLASSIFICATION	5.7479296383536297E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998512480562	WITHOUT_CLASSIFICATION	1.487519437300639E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999982976092	WITHOUT_CLASSIFICATION	1.7023908326139668E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999995455185267	WITHOUT_CLASSIFICATION	4.5448147341153554E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999840629578	WITHOUT_CLASSIFICATION	1.5937042218392026E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999857765285	WITHOUT_CLASSIFICATION	1.4223471655894524E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999988479679913	WITHOUT_CLASSIFICATION	1.1520320086940199E-5	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998525449302	WITHOUT_CLASSIFICATION	1.474550698587929E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998042883151	WITHOUT_CLASSIFICATION	1.9571168488184552E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999984778124709	WITHOUT_CLASSIFICATION	1.5221875291777446E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999926475904	WITHOUT_CLASSIFICATION	7.352409596147725E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999707617145	WITHOUT_CLASSIFICATION	2.9238285544055888E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999999983247517	WITHOUT_CLASSIFICATION	1.67524829963008E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998121428798	WITHOUT_CLASSIFICATION	1.878571201629914E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999988600982697	WITHOUT_CLASSIFICATION	1.13990173028143E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999410367896	WITHOUT_CLASSIFICATION	5.8963210437393366E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990221885319	WITHOUT_CLASSIFICATION	9.778114681621563E-7	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999442586182	WITHOUT_CLASSIFICATION	5.574138195263241E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999208211419	WITHOUT_CLASSIFICATION	7.917885806177365E-8	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997743881156	WITHOUT_CLASSIFICATION	2.2561188446538902E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999999082254667	WITHOUT_CLASSIFICATION	9.177453330529492E-8	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999883132825416	WITHOUT_CLASSIFICATION	1.1686717458451695E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996568014435	WITHOUT_CLASSIFICATION	3.431985565718883E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997289536248	WITHOUT_CLASSIFICATION	2.710463753458125E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999441851051	WITHOUT_CLASSIFICATION	5.581489489730373E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997563283817	WITHOUT_CLASSIFICATION	2.4367161828795097E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999999043205262	WITHOUT_CLASSIFICATION	9.567947371191428E-8	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996590620303	WITHOUT_CLASSIFICATION	3.409379697380223E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999376063812	WITHOUT_CLASSIFICATION	6.239361883870534E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999998294346681	WITHOUT_CLASSIFICATION	1.7056533184031092E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995923300865	WITHOUT_CLASSIFICATION	4.076699134743419E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998992708641	WITHOUT_CLASSIFICATION	1.0072913583394613E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997918148669	WITHOUT_CLASSIFICATION	2.081851330690714E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999975920396781	WITHOUT_CLASSIFICATION	2.407960321813775E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999497133216	WITHOUT_CLASSIFICATION	5.028667839204351E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999804155694	WITHOUT_CLASSIFICATION	1.9584430578603306E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999273430782263	WITHOUT_CLASSIFICATION	7.265692177379135E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998991916954032	WITHOUT_CLASSIFICATION	1.0080830459675712E-4	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999978768062868	WITHOUT_CLASSIFICATION	2.123193713184833E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999727064364	WITHOUT_CLASSIFICATION	2.7293563640510945E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999989578699575	WITHOUT_CLASSIFICATION	1.0421300424976059E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999781160377	WITHOUT_CLASSIFICATION	2.1883962354405567E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999985075051	WITHOUT_CLASSIFICATION	1.492494933354907E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999991092318717	WITHOUT_CLASSIFICATION	8.907681283359367E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999979932422713	WITHOUT_CLASSIFICATION	2.006757728702468E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999706233155	WITHOUT_CLASSIFICATION	2.93766844896609E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999908737134395	WITHOUT_CLASSIFICATION	9.126286560477208E-6	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998586285731	WITHOUT_CLASSIFICATION	1.413714268737829E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999993095748936	WITHOUT_CLASSIFICATION	6.904251064081339E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993161281379	WITHOUT_CLASSIFICATION	6.838718622092255E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997925738613128	WITHOUT_CLASSIFICATION	2.0742613868725735E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999439330920925	WITHOUT_CLASSIFICATION	5.606690790744576E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999999967054457	WITHOUT_CLASSIFICATION	3.294554297634243E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999995319258557	WITHOUT_CLASSIFICATION	4.68074144290117E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999935118078	WITHOUT_CLASSIFICATION	6.488192151620007E-9	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999994367244482	WITHOUT_CLASSIFICATION	5.632755517602413E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999997291853823	WITHOUT_CLASSIFICATION	2.708146176260648E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999597218173	WITHOUT_CLASSIFICATION	4.027818267022566E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999796178969	WITHOUT_CLASSIFICATION	2.0382103142371756E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999999418431527	WITHOUT_CLASSIFICATION	5.81568472937418E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999218381956	WITHOUT_CLASSIFICATION	7.816180431795179E-8	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999828631287	WITHOUT_CLASSIFICATION	1.713687124688681E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997383662964	WITHOUT_CLASSIFICATION	2.6163370354403257E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999124940394	WITHOUT_CLASSIFICATION	8.75059606529581E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999948704461	WITHOUT_CLASSIFICATION	5.129553932188068E-9	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999783107246	WITHOUT_CLASSIFICATION	2.168927540730952E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999993769201756	WITHOUT_CLASSIFICATION	6.230798243821522E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999999009856664	WITHOUT_CLASSIFICATION	9.901433367218795E-8	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998845833976	WITHOUT_CLASSIFICATION	1.154166024003707E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999995084571396	WITHOUT_CLASSIFICATION	4.915428604417902E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997075788774	WITHOUT_CLASSIFICATION	2.924211226261045E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999999385953443	WITHOUT_CLASSIFICATION	6.14046556426733E-8	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999998120599493	WITHOUT_CLASSIFICATION	1.879400507044599E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999996765910921	WITHOUT_CLASSIFICATION	3.234089078621496E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999998800059569	WITHOUT_CLASSIFICATION	1.1999404310776038E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999981726564878	WITHOUT_CLASSIFICATION	1.8273435120447095E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999932381921894	WITHOUT_CLASSIFICATION	6.761807810658041E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999038864668	WITHOUT_CLASSIFICATION	9.611353327579253E-8	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998473753233	WITHOUT_CLASSIFICATION	1.5262467659221613E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999839961603794	WITHOUT_CLASSIFICATION	1.6003839620678958E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999848017807899	WITHOUT_CLASSIFICATION	1.519821921009057E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.99999878782913	WITHOUT_CLASSIFICATION	1.2121708699292992E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999995822093124	WITHOUT_CLASSIFICATION	4.1779068770139155E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999983885660579	WITHOUT_CLASSIFICATION	1.6114339419820016E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.99999994934492	WITHOUT_CLASSIFICATION	5.0655080000743594E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999999649202166	WITHOUT_CLASSIFICATION	3.5079783401118276E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999935365728213	WITHOUT_CLASSIFICATION	6.463427178712772E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999980282739409	WITHOUT_CLASSIFICATION	1.971726058998982E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999534290479972	WITHOUT_CLASSIFICATION	4.657095200271845E-5	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999966126228856	WITHOUT_CLASSIFICATION	3.3873771142990807E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999986327288362	WITHOUT_CLASSIFICATION	1.3672711637987492E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999968741926384	WITHOUT_CLASSIFICATION	3.1258073614797266E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982562101266	WITHOUT_CLASSIFICATION	1.7437898734098601E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997667598609	WITHOUT_CLASSIFICATION	2.332401392391466E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999942779501134	WITHOUT_CLASSIFICATION	5.722049886524036E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999967285507917	WITHOUT_CLASSIFICATION	3.2714492083649E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999980449740768	WITHOUT_CLASSIFICATION	1.9550259231943556E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999997824674377	WITHOUT_CLASSIFICATION	2.17532562295778E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999939708715174	WITHOUT_CLASSIFICATION	6.029128482536808E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998996723756	WITHOUT_CLASSIFICATION	1.0032762439524735E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999998464588	WITHOUT_CLASSIFICATION	1.535412370624021E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999995835907727	WITHOUT_CLASSIFICATION	4.164092272959494E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999947555109798	WITHOUT_CLASSIFICATION	5.244489020267562E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999980523096484	WITHOUT_CLASSIFICATION	1.9476903515198256E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999995835907727	WITHOUT_CLASSIFICATION	4.164092272959494E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999997983751316	WITHOUT_CLASSIFICATION	2.0162486829160296E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999996753899757	WITHOUT_CLASSIFICATION	3.2461002436881204E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999983894507819	WITHOUT_CLASSIFICATION	1.6105492181159435E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999954994912549	WITHOUT_CLASSIFICATION	4.500508745179236E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999827095588	WITHOUT_CLASSIFICATION	1.7290441229924625E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999326196827	WITHOUT_CLASSIFICATION	6.73803172787022E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999673497399906	WITHOUT_CLASSIFICATION	3.265026000941771E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.99999958503936	WITHOUT_CLASSIFICATION	4.1496064006212933E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999873011441	WITHOUT_CLASSIFICATION	1.2698855917937298E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999980286863405	WITHOUT_CLASSIFICATION	1.971313659648848E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999873072384	WITHOUT_CLASSIFICATION	1.2692761515582566E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999998940416223	WITHOUT_CLASSIFICATION	1.0595837765810822E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999991632404416	WITHOUT_CLASSIFICATION	8.367595584244492E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999982761917937	WITHOUT_CLASSIFICATION	1.7238082062420134E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999529832745	WITHOUT_CLASSIFICATION	4.7016725501078644E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999956810624547	WITHOUT_CLASSIFICATION	4.318937545258281E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999895009836013	WITHOUT_CLASSIFICATION	1.0499016398675741E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999895009836013	WITHOUT_CLASSIFICATION	1.0499016398675741E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999993056749	WITHOUT_CLASSIFICATION	6.943250958292722E-9	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999870333412074	WITHOUT_CLASSIFICATION	1.2966658792554498E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999991790562436	WITHOUT_CLASSIFICATION	8.209437563973556E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.99998766127534	WITHOUT_CLASSIFICATION	1.2338724660014796E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999623602877	WITHOUT_CLASSIFICATION	3.763971230144559E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998396279195604	WITHOUT_CLASSIFICATION	1.6037208043963484E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999974812939385	WITHOUT_CLASSIFICATION	2.518706061445589E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999949809651	WITHOUT_CLASSIFICATION	5.019034912273639E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998301892691	WITHOUT_CLASSIFICATION	1.6981073100142917E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999999865202178	WITHOUT_CLASSIFICATION	1.3479782201988783E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998461462697	WITHOUT_CLASSIFICATION	1.538537302569766E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999978215167	WITHOUT_CLASSIFICATION	2.178483323504973E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998109799221	WITHOUT_CLASSIFICATION	1.8902007807076674E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999983942237308	WITHOUT_CLASSIFICATION	1.6057762692019442E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999991038278	WITHOUT_CLASSIFICATION	8.961722050148081E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990221885319	WITHOUT_CLASSIFICATION	9.778114681621563E-7	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999890647816958	WITHOUT_CLASSIFICATION	1.0935218304178089E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998982447423	WITHOUT_CLASSIFICATION	1.0175525766166784E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999967948089491	WITHOUT_CLASSIFICATION	3.2051910507851125E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9955833776082834	WITHOUT_CLASSIFICATION	0.0044166223917166065	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999896175182	WITHOUT_CLASSIFICATION	1.0382481876785439E-8	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999965258380554	WITHOUT_CLASSIFICATION	3.474161944557982E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999159566132	WITHOUT_CLASSIFICATION	8.40433868248119E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999072271915	WITHOUT_CLASSIFICATION	9.277280856197683E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999947854865	WITHOUT_CLASSIFICATION	5.214513468046814E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999940716372	WITHOUT_CLASSIFICATION	5.928362837210288E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999995574781168	WITHOUT_CLASSIFICATION	4.425218831989593E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999271635805	WITHOUT_CLASSIFICATION	7.283641950314866E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999968168815953	WITHOUT_CLASSIFICATION	3.183118404800072E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999988825645418	WITHOUT_CLASSIFICATION	1.1174354580988182E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999984147579178	WITHOUT_CLASSIFICATION	1.5852420821097397E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997539167446	WITHOUT_CLASSIFICATION	2.4608325540981163E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999913761766399	WITHOUT_CLASSIFICATION	8.62382336019385E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970366596872	WITHOUT_CLASSIFICATION	2.963340312781492E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999989531086938	WITHOUT_CLASSIFICATION	1.046891306117279E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999999875639794	WITHOUT_CLASSIFICATION	1.243602060891664E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999967687980682	WITHOUT_CLASSIFICATION	3.231201931910593E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999995254093405	WITHOUT_CLASSIFICATION	4.74590659591851E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997389417322	WITHOUT_CLASSIFICATION	2.610582677378838E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999991255416202	WITHOUT_CLASSIFICATION	8.74458379725288E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999984222387941	WITHOUT_CLASSIFICATION	1.5777612058331545E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999997160286092	WITHOUT_CLASSIFICATION	2.8397139079222016E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999896333975	WITHOUT_CLASSIFICATION	1.0366602421293537E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999822315614	WITHOUT_CLASSIFICATION	1.776843865576144E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999994052441806	WITHOUT_CLASSIFICATION	5.947558192873486E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999364405822	WITHOUT_CLASSIFICATION	6.355941787055931E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998259438875	WITHOUT_CLASSIFICATION	1.740561124497969E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997917095752	WITHOUT_CLASSIFICATION	2.0829042488541015E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997539286829	WITHOUT_CLASSIFICATION	2.460713171476401E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999837427404	WITHOUT_CLASSIFICATION	1.6257259587986196E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999866863233	WITHOUT_CLASSIFICATION	1.3313676645900104E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997288262761	WITHOUT_CLASSIFICATION	2.7117372390495906E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999995939183	WITHOUT_CLASSIFICATION	4.060816816008636E-10	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999998305811741	WITHOUT_CLASSIFICATION	1.6941882595459236E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998783753336	WITHOUT_CLASSIFICATION	1.216246663261618E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999998305811741	WITHOUT_CLASSIFICATION	1.6941882595459236E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994884261706	WITHOUT_CLASSIFICATION	5.115738293860584E-7	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998521795782	WITHOUT_CLASSIFICATION	1.4782042172021883E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999997103832009	WITHOUT_CLASSIFICATION	2.896167991426702E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999664691274	WITHOUT_CLASSIFICATION	3.35308727210011E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992670264338	WITHOUT_CLASSIFICATION	7.329735661939833E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999867398525599	WITHOUT_CLASSIFICATION	1.3260147440126465E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999718316674	WITHOUT_CLASSIFICATION	2.8168332671105013E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998940221438	WITHOUT_CLASSIFICATION	1.0597785606518307E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999999962701697	WITHOUT_CLASSIFICATION	3.729830306071996E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999971963553421	WITHOUT_CLASSIFICATION	2.803644657928802E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999999980598834	WITHOUT_CLASSIFICATION	1.9401166051225372E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999972240107	WITHOUT_CLASSIFICATION	2.7759892222216106E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999898765070504	WITHOUT_CLASSIFICATION	1.0123492949663071E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999986103899271	WITHOUT_CLASSIFICATION	1.389610072839524E-6	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999970077279	WITHOUT_CLASSIFICATION	2.992272097415252E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999998488651	WITHOUT_CLASSIFICATION	1.5113490648735117E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999875782913165	WITHOUT_CLASSIFICATION	1.2421708683554596E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999875782913165	WITHOUT_CLASSIFICATION	1.2421708683554596E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999995700367915	WITHOUT_CLASSIFICATION	4.2996320856641894E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999967200970972	WITHOUT_CLASSIFICATION	3.279902902800057E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999995353546	WITHOUT_CLASSIFICATION	4.64645408217005E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999405619923	WITHOUT_CLASSIFICATION	5.943800765136524E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998952719645	WITHOUT_CLASSIFICATION	1.0472803548469736E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999714886088	WITHOUT_CLASSIFICATION	2.851139120415224E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999985970320125	WITHOUT_CLASSIFICATION	1.402967987493476E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999978375108411	WITHOUT_CLASSIFICATION	2.1624891588698036E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999996654398222	WITHOUT_CLASSIFICATION	3.345601778623844E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999338210964	WITHOUT_CLASSIFICATION	6.617890358724088E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998279650173	WITHOUT_CLASSIFICATION	1.7203498271801914E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998633631314	WITHOUT_CLASSIFICATION	1.366368685871127E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999582436703	WITHOUT_CLASSIFICATION	4.175632978452951E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999039011483	WITHOUT_CLASSIFICATION	9.609885165640742E-8	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999999177591684	WITHOUT_CLASSIFICATION	8.224083153395331E-8	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997725555546	WITHOUT_CLASSIFICATION	2.274444455342662E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999005692599	WITHOUT_CLASSIFICATION	9.943074009848114E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999974936127625	WITHOUT_CLASSIFICATION	2.5063872374689022E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999517500066	WITHOUT_CLASSIFICATION	4.824999341400639E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999997881498	WITHOUT_CLASSIFICATION	2.1185020727275704E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999995807138543	WITHOUT_CLASSIFICATION	4.19286145646756E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999530511419	WITHOUT_CLASSIFICATION	4.6948858187924106E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999857725779	WITHOUT_CLASSIFICATION	1.422742208805916E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999916338794	WITHOUT_CLASSIFICATION	8.366120613077218E-9	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999988456147096	WITHOUT_CLASSIFICATION	1.1543852903336557E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999998270061805	WITHOUT_CLASSIFICATION	1.7299381936373744E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999553959333	WITHOUT_CLASSIFICATION	4.460406670493951E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999985191144213	WITHOUT_CLASSIFICATION	1.4808855787419512E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999960422074488	WITHOUT_CLASSIFICATION	3.9577925512067415E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999998462913597	WITHOUT_CLASSIFICATION	1.5370864030154967E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.99999130678525	WITHOUT_CLASSIFICATION	8.693214750151297E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999993388495908	WITHOUT_CLASSIFICATION	6.611504092508056E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998902250546053	WITHOUT_CLASSIFICATION	1.0977494539462711E-4	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999967060448884	WITHOUT_CLASSIFICATION	3.29395511146692E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999994610223213	WITHOUT_CLASSIFICATION	5.389776786874956E-7	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999802404698	WITHOUT_CLASSIFICATION	1.9759530257455802E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999832511596	WITHOUT_CLASSIFICATION	1.6748840456268976E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999989245786035	WITHOUT_CLASSIFICATION	1.0754213965200956E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999672206383	WITHOUT_CLASSIFICATION	3.2779361734032894E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999657046161	WITHOUT_CLASSIFICATION	3.429538394766514E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999581424596	WITHOUT_CLASSIFICATION	4.18575403621306E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993455735162	WITHOUT_CLASSIFICATION	6.54426483727769E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999971003737954	WITHOUT_CLASSIFICATION	2.8996262044895117E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999800396672	WITHOUT_CLASSIFICATION	1.9960332847521094E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999962015266	WITHOUT_CLASSIFICATION	3.798473486865389E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999413835282	WITHOUT_CLASSIFICATION	5.8616471760740044E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999717917673	WITHOUT_CLASSIFICATION	2.8208232786226783E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999206911092	WITHOUT_CLASSIFICATION	7.930889074707141E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996295142417	WITHOUT_CLASSIFICATION	3.704857583135331E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999995301694081	WITHOUT_CLASSIFICATION	4.698305918975251E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987847178922	WITHOUT_CLASSIFICATION	1.2152821078697604E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999951973446993	WITHOUT_CLASSIFICATION	4.802655300692501E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999990862932076	WITHOUT_CLASSIFICATION	9.137067924450387E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999991202053816	WITHOUT_CLASSIFICATION	8.797946183412363E-7	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999968134640066	WITHOUT_CLASSIFICATION	3.186535993365808E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994636258875	WITHOUT_CLASSIFICATION	5.363741123944777E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999994636258875	WITHOUT_CLASSIFICATION	5.363741123944777E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999113971650547	WITHOUT_CLASSIFICATION	8.860283494531382E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999980171579773	WITHOUT_CLASSIFICATION	1.9828420227544748E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998662113309	WITHOUT_CLASSIFICATION	1.3378866917179136E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999752783395	WITHOUT_CLASSIFICATION	2.472166047847239E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999848599097	WITHOUT_CLASSIFICATION	1.5140090261836417E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999999137995916	WITHOUT_CLASSIFICATION	8.620040841390854E-8	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999793378367	WITHOUT_CLASSIFICATION	2.0662163374964326E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999999622464772	WITHOUT_CLASSIFICATION	3.775352279860169E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999345062140828	WITHOUT_CLASSIFICATION	6.54937859172361E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999823003155	WITHOUT_CLASSIFICATION	1.769968455490758E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999953922316112	WITHOUT_CLASSIFICATION	4.607768388863151E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998772550979	WITHOUT_CLASSIFICATION	1.2274490212477303E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999869933451734	WITHOUT_CLASSIFICATION	1.3006654826693145E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999891539972	WITHOUT_CLASSIFICATION	1.0846002816740836E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999988292385195	WITHOUT_CLASSIFICATION	1.170761480605514E-6	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999980757035996	WITHOUT_CLASSIFICATION	1.9242964003788266E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999979090537	WITHOUT_CLASSIFICATION	2.0909463513948955E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999960788541867	WITHOUT_CLASSIFICATION	3.921145813288919E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999965823064916	WITHOUT_CLASSIFICATION	3.4176935083674353E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999999587041284	WITHOUT_CLASSIFICATION	4.129587160688726E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999708710443	WITHOUT_CLASSIFICATION	2.9128955728227998E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999991714809446	WITHOUT_CLASSIFICATION	8.285190553832532E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999883670287026	WITHOUT_CLASSIFICATION	1.1632971297291332E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999844661615	WITHOUT_CLASSIFICATION	1.5533838476327324E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998654431886	WITHOUT_CLASSIFICATION	1.345568114172433E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999994029486399	WITHOUT_CLASSIFICATION	5.970513601056658E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999998739298038	WITHOUT_CLASSIFICATION	1.2607019621173475E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999777656443789	WITHOUT_CLASSIFICATION	2.2234355621172132E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999999917437156	WITHOUT_CLASSIFICATION	8.256284403662945E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999883670287026	WITHOUT_CLASSIFICATION	1.1632971297291332E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998509596372	WITHOUT_CLASSIFICATION	1.4904036277801885E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999999609714	WITHOUT_CLASSIFICATION	3.9028607790620193E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997613675913899	WITHOUT_CLASSIFICATION	2.3863240861017484E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999999220876211	WITHOUT_CLASSIFICATION	7.791237889933824E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.99999994571078	WITHOUT_CLASSIFICATION	5.4289219965827364E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999728609915586	WITHOUT_CLASSIFICATION	2.7139008441484564E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999789848412	WITHOUT_CLASSIFICATION	2.1015158844165768E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998833054023	WITHOUT_CLASSIFICATION	1.1669459762138408E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999974592466601	WITHOUT_CLASSIFICATION	2.5407533399823686E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999999220876211	WITHOUT_CLASSIFICATION	7.791237889933824E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999913914833872	WITHOUT_CLASSIFICATION	8.608516612702151E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998731128062	WITHOUT_CLASSIFICATION	1.2688719379113955E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999995904628871	WITHOUT_CLASSIFICATION	4.0953711282598424E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999990829010053	WITHOUT_CLASSIFICATION	9.170989946924177E-6	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999999740202394	WITHOUT_CLASSIFICATION	2.597976060120394E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998279650173	WITHOUT_CLASSIFICATION	1.7203498271801914E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999939407174	WITHOUT_CLASSIFICATION	6.059282603595377E-8	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999975052917569	WITHOUT_CLASSIFICATION	2.4947082430058026E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999699022976	WITHOUT_CLASSIFICATION	3.0097702397583583E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998520782811	WITHOUT_CLASSIFICATION	1.479217188260205E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999806561866563	WITHOUT_CLASSIFICATION	1.9343813343683508E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999990730268902	WITHOUT_CLASSIFICATION	9.269731097777471E-7	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999824450121039	WITHOUT_CLASSIFICATION	1.755498789609562E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999991958192678	WITHOUT_CLASSIFICATION	8.041807322941116E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999953219204775	WITHOUT_CLASSIFICATION	4.678079522559323E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999998900938506	WITHOUT_CLASSIFICATION	1.0990614938072796E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846049861674	WITHOUT_CLASSIFICATION	1.539501383260316E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999736708564	WITHOUT_CLASSIFICATION	2.632914370607722E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999255127316	WITHOUT_CLASSIFICATION	7.448726836286349E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999998001431115	WITHOUT_CLASSIFICATION	1.9985688845673706E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999999995982751	WITHOUT_CLASSIFICATION	4.017248922339086E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999997950596726	WITHOUT_CLASSIFICATION	2.049403272971985E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999980981438252	WITHOUT_CLASSIFICATION	1.9018561747313556E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999996859799887	WITHOUT_CLASSIFICATION	3.140200113211276E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999999893901495	WITHOUT_CLASSIFICATION	1.0609850503747943E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999933546421981	WITHOUT_CLASSIFICATION	6.645357801967271E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999984319507912	WITHOUT_CLASSIFICATION	1.5680492088323706E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999831776903	WITHOUT_CLASSIFICATION	1.6822309686376108E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999986401753144	WITHOUT_CLASSIFICATION	1.3598246857273975E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999992102773013	WITHOUT_CLASSIFICATION	7.897226986052898E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999983116116888	WITHOUT_CLASSIFICATION	1.6883883111624593E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999914339455138	WITHOUT_CLASSIFICATION	8.566054486159143E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999996086202382	WITHOUT_CLASSIFICATION	3.9137976177979275E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999816582008	WITHOUT_CLASSIFICATION	1.834179920070067E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604833351	WITHOUT_CLASSIFICATION	1.3951666482845663E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999997271535351	WITHOUT_CLASSIFICATION	2.72846464929366E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999998739886193	WITHOUT_CLASSIFICATION	1.2601138064381556E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998563117237	WITHOUT_CLASSIFICATION	1.4368827629319937E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999993232506	WITHOUT_CLASSIFICATION	6.767494674535163E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999997529580784	WITHOUT_CLASSIFICATION	2.4704192149522734E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996997839129	WITHOUT_CLASSIFICATION	3.00216087147839E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999833053395	WITHOUT_CLASSIFICATION	1.6694660498436368E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999455324536	WITHOUT_CLASSIFICATION	5.4467546368083953E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999997579536034	WITHOUT_CLASSIFICATION	2.4204639652188006E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999031114893	WITHOUT_CLASSIFICATION	9.688851067733099E-8	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999989964898344	WITHOUT_CLASSIFICATION	1.0035101655729267E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999377453204	WITHOUT_CLASSIFICATION	6.225467966970576E-8	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999939927702	WITHOUT_CLASSIFICATION	6.007229840164122E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999959172341046	WITHOUT_CLASSIFICATION	4.082765895319473E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999996217751637	WITHOUT_CLASSIFICATION	3.7822483632613143E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999693484196809	WITHOUT_CLASSIFICATION	3.06515803190609E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999984614451605	WITHOUT_CLASSIFICATION	1.5385548394922724E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999999619719418	WITHOUT_CLASSIFICATION	3.8028058208908913E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999976844589978	WITHOUT_CLASSIFICATION	2.3155410021705606E-6	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999988291137708	WITHOUT_CLASSIFICATION	1.1708862292205746E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999993277831275	WITHOUT_CLASSIFICATION	6.722168725331139E-7	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999865451668	WITHOUT_CLASSIFICATION	1.345483324607506E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999996044642621	WITHOUT_CLASSIFICATION	3.9553573791405766E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999912490287	WITHOUT_CLASSIFICATION	8.750971251940819E-9	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999998697429309	WITHOUT_CLASSIFICATION	1.302570692356347E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999494403143361	WITHOUT_CLASSIFICATION	5.05596856638452E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999973124459723	WITHOUT_CLASSIFICATION	2.687554027667505E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999816582008	WITHOUT_CLASSIFICATION	1.834179920070067E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999905784035	WITHOUT_CLASSIFICATION	9.421596606197542E-9	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999997743391	WITHOUT_CLASSIFICATION	2.256609711235294E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999994655244748	WITHOUT_CLASSIFICATION	5.344755251056822E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999971817018347	WITHOUT_CLASSIFICATION	2.8182981653792313E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999953989482	WITHOUT_CLASSIFICATION	4.6010517901855344E-8	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999994606341914	WITHOUT_CLASSIFICATION	5.393658084632416E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995949070448	WITHOUT_CLASSIFICATION	4.0509295518017763E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999818934111	WITHOUT_CLASSIFICATION	1.8106588845531587E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999930609271	WITHOUT_CLASSIFICATION	6.939072838766635E-9	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999989864893007	WITHOUT_CLASSIFICATION	1.0135106992398292E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999964161838	WITHOUT_CLASSIFICATION	3.5838162626672207E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999165043770507	WITHOUT_CLASSIFICATION	8.349562294927475E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999431023406	WITHOUT_CLASSIFICATION	5.689765930150338E-8	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999996221024743	WITHOUT_CLASSIFICATION	3.778975256706122E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994884261706	WITHOUT_CLASSIFICATION	5.115738293860584E-7	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999983020954	WITHOUT_CLASSIFICATION	1.6979046015800962E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999998054404	WITHOUT_CLASSIFICATION	1.9455960632493915E-10	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999302370862	WITHOUT_CLASSIFICATION	6.976291375334551E-8	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999998077674658	WITHOUT_CLASSIFICATION	1.9223253418002682E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999989413464	WITHOUT_CLASSIFICATION	1.058653594127823E-9	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999959190412377	WITHOUT_CLASSIFICATION	4.080958762340291E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999959190412377	WITHOUT_CLASSIFICATION	4.080958762340291E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998667369631	WITHOUT_CLASSIFICATION	1.3326303696327019E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999998852702408	WITHOUT_CLASSIFICATION	1.1472975920329688E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999427440064	WITHOUT_CLASSIFICATION	5.725599372848314E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999998304514848	WITHOUT_CLASSIFICATION	1.6954851529925308E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999999953606528	WITHOUT_CLASSIFICATION	4.6393471896833904E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999788626756	WITHOUT_CLASSIFICATION	2.1137324398840253E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999969621748542	WITHOUT_CLASSIFICATION	3.0378251456541496E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997858499541	WITHOUT_CLASSIFICATION	2.1415004585459036E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997858499541	WITHOUT_CLASSIFICATION	2.1415004585459036E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999945516295401	WITHOUT_CLASSIFICATION	5.448370459973251E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999994091187787	WITHOUT_CLASSIFICATION	5.908812212466197E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999345297851	WITHOUT_CLASSIFICATION	6.547021496101665E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999992936707022	WITHOUT_CLASSIFICATION	7.0632929794004E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999992936707022	WITHOUT_CLASSIFICATION	7.0632929794004E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999992936707022	WITHOUT_CLASSIFICATION	7.0632929794004E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999998377629222	WITHOUT_CLASSIFICATION	1.6223707768162228E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999785601156	WITHOUT_CLASSIFICATION	2.1439884404622368E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999973592510666	WITHOUT_CLASSIFICATION	2.6407489334281636E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999951458120149	WITHOUT_CLASSIFICATION	4.854187985132315E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999906605409	WITHOUT_CLASSIFICATION	9.339459152332494E-9	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999955572698	WITHOUT_CLASSIFICATION	4.442730209273521E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999632438534	WITHOUT_CLASSIFICATION	3.6756146569351945E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999438299146729	WITHOUT_CLASSIFICATION	5.6170085327120775E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998995757616	WITHOUT_CLASSIFICATION	1.0042423828254259E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999995763857049	WITHOUT_CLASSIFICATION	4.2361429500161993E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999995341238813	WITHOUT_CLASSIFICATION	4.658761187134573E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997424914804	WITHOUT_CLASSIFICATION	2.5750851958615337E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999550985471	WITHOUT_CLASSIFICATION	4.490145298204497E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999806725597	WITHOUT_CLASSIFICATION	1.9327440266175557E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999652855268	WITHOUT_CLASSIFICATION	3.471447312101421E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999996148938721	WITHOUT_CLASSIFICATION	3.8510612787511735E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999988219460015	WITHOUT_CLASSIFICATION	1.1780539984458E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999988219460015	WITHOUT_CLASSIFICATION	1.1780539984458E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999991474044182	WITHOUT_CLASSIFICATION	8.525955817125988E-7	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999991474044182	WITHOUT_CLASSIFICATION	8.525955817125988E-7	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999991368191106	WITHOUT_CLASSIFICATION	8.631808893413377E-7	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999991084274447	WITHOUT_CLASSIFICATION	8.915725552048936E-7	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999991084274447	WITHOUT_CLASSIFICATION	8.915725552048936E-7	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999995018697453	WITHOUT_CLASSIFICATION	4.981302548302818E-7	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999987918947918	WITHOUT_CLASSIFICATION	1.2081052082074561E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999340032232	WITHOUT_CLASSIFICATION	6.59967767823999E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999959190412377	WITHOUT_CLASSIFICATION	4.080958762340291E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999353791231	WITHOUT_CLASSIFICATION	6.46208769124016E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999987918947918	WITHOUT_CLASSIFICATION	1.2081052082074561E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999993926062134	WITHOUT_CLASSIFICATION	6.073937866222972E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999998106569195	WITHOUT_CLASSIFICATION	1.8934308063054904E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999990533047464	WITHOUT_CLASSIFICATION	9.466952536913317E-7	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994702977624	WITHOUT_CLASSIFICATION	5.297022375745212E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999916698762	WITHOUT_CLASSIFICATION	8.330123796594946E-9	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999827444039626	WITHOUT_CLASSIFICATION	1.7255596037351975E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995354259903	WITHOUT_CLASSIFICATION	4.645740097157002E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999986041215327	WITHOUT_CLASSIFICATION	1.3958784671840647E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999995567126162	WITHOUT_CLASSIFICATION	4.43287383824388E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999913110672088	WITHOUT_CLASSIFICATION	8.688932791281894E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999954939515	WITHOUT_CLASSIFICATION	4.5060486080905855E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999987677137592	WITHOUT_CLASSIFICATION	1.2322862408389644E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999999745384476	WITHOUT_CLASSIFICATION	2.546155239888694E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999991260991998	WITHOUT_CLASSIFICATION	8.739008002243858E-7	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999992763494358	WITHOUT_CLASSIFICATION	7.236505643157446E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999590510291	WITHOUT_CLASSIFICATION	4.094897094906189E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999809804885	WITHOUT_CLASSIFICATION	1.901951156241172E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997560605624	WITHOUT_CLASSIFICATION	2.4393943771442006E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997560605624	WITHOUT_CLASSIFICATION	2.4393943771442006E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999988933926235	WITHOUT_CLASSIFICATION	1.1066073764942422E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999995663436544	WITHOUT_CLASSIFICATION	4.3365634553704653E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996978915848	WITHOUT_CLASSIFICATION	3.021084151616918E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999999174380222	WITHOUT_CLASSIFICATION	8.256197780650532E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995428614795	WITHOUT_CLASSIFICATION	4.571385204215973E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999429825424	WITHOUT_CLASSIFICATION	5.701745757746558E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999960655159	WITHOUT_CLASSIFICATION	3.9344840700526715E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999947961430601	WITHOUT_CLASSIFICATION	5.203856939981793E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999997848440032	WITHOUT_CLASSIFICATION	2.1515599690329514E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999938160575	WITHOUT_CLASSIFICATION	6.1839424480052E-9	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999248045209	WITHOUT_CLASSIFICATION	7.519547909576139E-8	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999165043770507	WITHOUT_CLASSIFICATION	8.349562294927475E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999959485216	WITHOUT_CLASSIFICATION	4.051478368172665E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996914526943	WITHOUT_CLASSIFICATION	3.0854730575099E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999997035651302	WITHOUT_CLASSIFICATION	2.9643486976514063E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999996785314085	WITHOUT_CLASSIFICATION	3.2146859154980565E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999722625659	WITHOUT_CLASSIFICATION	2.7737434037123358E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999722625659	WITHOUT_CLASSIFICATION	2.7737434037123358E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999948463475364	WITHOUT_CLASSIFICATION	5.153652463561788E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997878299338	WITHOUT_CLASSIFICATION	2.1217006616458607E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999995372106266	WITHOUT_CLASSIFICATION	4.627893733019415E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999989368720328	WITHOUT_CLASSIFICATION	1.0631279672213108E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999995061704586	WITHOUT_CLASSIFICATION	4.938295414217705E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999972471294766	WITHOUT_CLASSIFICATION	2.7528705234087737E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999995808164015	WITHOUT_CLASSIFICATION	4.191835985044155E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999534863283	WITHOUT_CLASSIFICATION	4.65136716695109E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999800742567	WITHOUT_CLASSIFICATION	1.9925743221122646E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999800614232	WITHOUT_CLASSIFICATION	1.9938576802440644E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999372021331	WITHOUT_CLASSIFICATION	6.279786693334815E-8	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999534863283	WITHOUT_CLASSIFICATION	4.65136716695109E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999848396923	WITHOUT_CLASSIFICATION	1.51603076707783E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998161440093	WITHOUT_CLASSIFICATION	1.8385599064113604E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999817144339	WITHOUT_CLASSIFICATION	1.828556608106855E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999968616878324	WITHOUT_CLASSIFICATION	3.1383121675949774E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999813695117	WITHOUT_CLASSIFICATION	1.863048831900807E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999928332589	WITHOUT_CLASSIFICATION	7.166741166906322E-9	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999786327256	WITHOUT_CLASSIFICATION	2.13672744067893E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999483715625	WITHOUT_CLASSIFICATION	5.162843747116289E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999905882019	WITHOUT_CLASSIFICATION	9.411798061151504E-9	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999988862312209	WITHOUT_CLASSIFICATION	1.1137687791300396E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999990159123588	WITHOUT_CLASSIFICATION	9.840876410969156E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999418341016	WITHOUT_CLASSIFICATION	5.816589830110652E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999107524931	WITHOUT_CLASSIFICATION	8.924750688392643E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999999177934945	WITHOUT_CLASSIFICATION	8.220650549629895E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999981554357318	WITHOUT_CLASSIFICATION	1.8445642682967883E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999988168838727	WITHOUT_CLASSIFICATION	1.1831161273398191E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999987166429636	WITHOUT_CLASSIFICATION	1.28335703636918E-6	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999849701764049	WITHOUT_CLASSIFICATION	1.502982359503632E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999730177616795	WITHOUT_CLASSIFICATION	2.6982238320548023E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999827433681	WITHOUT_CLASSIFICATION	1.7256631855530165E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997733902474	WITHOUT_CLASSIFICATION	2.2660975257608687E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999363441785	WITHOUT_CLASSIFICATION	6.365582154794696E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999509630834728	WITHOUT_CLASSIFICATION	4.903691652730644E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999969056540253	WITHOUT_CLASSIFICATION	3.094345974534799E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999805366429	WITHOUT_CLASSIFICATION	1.9463357176030137E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.999997290954158	WITHOUT_CLASSIFICATION	2.7090458419254775E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999792379617	WITHOUT_CLASSIFICATION	2.076203828796446E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999997759504	WITHOUT_CLASSIFICATION	2.2404960966055927E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999943159875	WITHOUT_CLASSIFICATION	5.684012539382378E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999999652737862	WITHOUT_CLASSIFICATION	3.4726213798046816E-8	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999994363573	WITHOUT_CLASSIFICATION	5.636426303246632E-10	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999107417248	WITHOUT_CLASSIFICATION	8.925827523111493E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999999032685917	WITHOUT_CLASSIFICATION	9.673140828867167E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999359526363	WITHOUT_CLASSIFICATION	6.404736376457971E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999536320736	WITHOUT_CLASSIFICATION	4.636792644580228E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999994742349667	WITHOUT_CLASSIFICATION	5.257650332199347E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999980045147	WITHOUT_CLASSIFICATION	1.9954853342584683E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999929640131	WITHOUT_CLASSIFICATION	7.035986936793137E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995378423944	WITHOUT_CLASSIFICATION	4.621576055013901E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999699731434	WITHOUT_CLASSIFICATION	3.002685652697376E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999299206691	WITHOUT_CLASSIFICATION	7.007933090837739E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999818020533	WITHOUT_CLASSIFICATION	1.819794672791791E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999942936272	WITHOUT_CLASSIFICATION	5.706372808864263E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999934255516	WITHOUT_CLASSIFICATION	6.574448428074571E-9	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999999938306857	WITHOUT_CLASSIFICATION	6.169314308216558E-8	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999565119261	WITHOUT_CLASSIFICATION	4.3488073864827335E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999997557376136	WITHOUT_CLASSIFICATION	2.442623864813831E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999794869874876	WITHOUT_CLASSIFICATION	2.0513012512306653E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999978133052088	WITHOUT_CLASSIFICATION	2.1866947911850606E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997748156821	WITHOUT_CLASSIFICATION	2.2518431776599624E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983521938257	WITHOUT_CLASSIFICATION	1.6478061743760622E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998470906569	WITHOUT_CLASSIFICATION	1.529093429991371E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999853084417	WITHOUT_CLASSIFICATION	1.469155829893454E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999745046026	WITHOUT_CLASSIFICATION	2.5495397402567305E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999907493647	WITHOUT_CLASSIFICATION	9.250635174476962E-9	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998738134639	WITHOUT_CLASSIFICATION	1.2618653608813261E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999751062567	WITHOUT_CLASSIFICATION	2.4893743305774124E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999573029339	WITHOUT_CLASSIFICATION	4.2697066143028564E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999998118707812	WITHOUT_CLASSIFICATION	1.8812921889763462E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999987428541512	WITHOUT_CLASSIFICATION	1.2571458487413926E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998701652282	WITHOUT_CLASSIFICATION	1.298347717169774E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993136478016	WITHOUT_CLASSIFICATION	6.863521984680461E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999202504276	WITHOUT_CLASSIFICATION	7.974957241721962E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999970044516095	WITHOUT_CLASSIFICATION	2.995548390510936E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999996520069185	WITHOUT_CLASSIFICATION	3.479930815050451E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999965281401563	WITHOUT_CLASSIFICATION	3.4718598437935E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983521938257	WITHOUT_CLASSIFICATION	1.6478061743760622E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998864308092	WITHOUT_CLASSIFICATION	1.1356919078530582E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999997620281275	WITHOUT_CLASSIFICATION	2.379718725369746E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999830740789	WITHOUT_CLASSIFICATION	1.6925921085092672E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999842311785	WITHOUT_CLASSIFICATION	1.576882148586804E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999947860911842	WITHOUT_CLASSIFICATION	5.213908815780385E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999993653640021	WITHOUT_CLASSIFICATION	6.346359978576496E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999800742567	WITHOUT_CLASSIFICATION	1.9925743221122646E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999562106689647	WITHOUT_CLASSIFICATION	4.378933103532815E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999536320736	WITHOUT_CLASSIFICATION	4.636792644580228E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999975796143442	WITHOUT_CLASSIFICATION	2.420385655741854E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999904397883	WITHOUT_CLASSIFICATION	9.560211856728365E-9	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999997056533781	WITHOUT_CLASSIFICATION	2.943466218085446E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999997201343481	WITHOUT_CLASSIFICATION	2.7986565195044146E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997814902324	WITHOUT_CLASSIFICATION	2.185097675642809E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996772319282	WITHOUT_CLASSIFICATION	3.2276807184195336E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999990751698674	WITHOUT_CLASSIFICATION	9.248301325315966E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997955698604	WITHOUT_CLASSIFICATION	2.044301395938998E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999841439929	WITHOUT_CLASSIFICATION	1.5856007109867607E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999941537151	WITHOUT_CLASSIFICATION	5.846284961662672E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999405328039	WITHOUT_CLASSIFICATION	5.946719608510292E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999720034566	WITHOUT_CLASSIFICATION	2.799654339163111E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999960477675	WITHOUT_CLASSIFICATION	3.952232502937324E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999960477675	WITHOUT_CLASSIFICATION	3.952232502937324E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999768953668	WITHOUT_CLASSIFICATION	2.3104633263995248E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997719391579	WITHOUT_CLASSIFICATION	2.2806084210540216E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999250323717	WITHOUT_CLASSIFICATION	7.496762837685491E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999987803941359	WITHOUT_CLASSIFICATION	1.219605864101297E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999947481379	WITHOUT_CLASSIFICATION	5.2518620741349485E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999448724715	WITHOUT_CLASSIFICATION	5.512752864962435E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999997740026	WITHOUT_CLASSIFICATION	2.2599740849461202E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999987039454463	WITHOUT_CLASSIFICATION	1.2960545536233527E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999724573866	WITHOUT_CLASSIFICATION	2.7542613465151067E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999974075221658	WITHOUT_CLASSIFICATION	2.5924778342023215E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999022982546	WITHOUT_CLASSIFICATION	9.770174535762242E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999998335877633	WITHOUT_CLASSIFICATION	1.6641223657195678E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999909900843	WITHOUT_CLASSIFICATION	9.009915633334982E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999977614539	WITHOUT_CLASSIFICATION	2.238546204656627E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999728576279	WITHOUT_CLASSIFICATION	2.714237214771145E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999276555696	WITHOUT_CLASSIFICATION	7.234443050384663E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999994609781927	WITHOUT_CLASSIFICATION	5.390218073180065E-7	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999648118648	WITHOUT_CLASSIFICATION	3.5188135287757637E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999872473061	WITHOUT_CLASSIFICATION	1.2752694031575992E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999965280532729	WITHOUT_CLASSIFICATION	3.47194672714836E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999304283551	WITHOUT_CLASSIFICATION	6.957164494072931E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999994547002078	WITHOUT_CLASSIFICATION	5.452997921198585E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999519939996	WITHOUT_CLASSIFICATION	4.800600031736086E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999468550214206	WITHOUT_CLASSIFICATION	5.314497857949435E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999994642096095	WITHOUT_CLASSIFICATION	5.357903904126802E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997721025877	WITHOUT_CLASSIFICATION	2.2789741230525234E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994985765854	WITHOUT_CLASSIFICATION	5.014234144905771E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999937101762	WITHOUT_CLASSIFICATION	6.289823768495573E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999937094438539	WITHOUT_CLASSIFICATION	6.290556146128086E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999917931578	WITHOUT_CLASSIFICATION	8.206842188867389E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9997680042370309	WITHOUT_CLASSIFICATION	2.3199576296900788E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999558191440033	WITHOUT_CLASSIFICATION	4.4180855996581614E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999887051219	WITHOUT_CLASSIFICATION	1.1294878119398918E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999981243107	WITHOUT_CLASSIFICATION	1.875689255346926E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996652827038	WITHOUT_CLASSIFICATION	3.3471729626546855E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997773779401	WITHOUT_CLASSIFICATION	2.2262205994072537E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999928214702691	WITHOUT_CLASSIFICATION	7.178529730879065E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999900614504	WITHOUT_CLASSIFICATION	9.93854966253377E-9	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999630615279	WITHOUT_CLASSIFICATION	3.6938472147062986E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990189221684	WITHOUT_CLASSIFICATION	9.810778315917948E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998876709165	WITHOUT_CLASSIFICATION	1.1232908342135529E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999825052377	WITHOUT_CLASSIFICATION	1.7494762335441914E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999499863733574	WITHOUT_CLASSIFICATION	5.001362664268861E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999923886640442	WITHOUT_CLASSIFICATION	7.611335955878768E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999955715036767	WITHOUT_CLASSIFICATION	4.428496323333585E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998704704149	WITHOUT_CLASSIFICATION	1.2952958496154894E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.995744524462679	WITHOUT_CLASSIFICATION	0.004255475537321029	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999974437685	WITHOUT_CLASSIFICATION	2.556231504109962E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999830187548	WITHOUT_CLASSIFICATION	1.698124513183615E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.99999981321083	WITHOUT_CLASSIFICATION	1.86789170009962E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998673390804	WITHOUT_CLASSIFICATION	1.3266091954089327E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999937772681	WITHOUT_CLASSIFICATION	6.2227318453357314E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999998131292558	WITHOUT_CLASSIFICATION	1.868707442003733E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999999766056017	WITHOUT_CLASSIFICATION	2.3394398296393782E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998709565487	WITHOUT_CLASSIFICATION	1.2904345119881332E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999801723838	WITHOUT_CLASSIFICATION	1.9827616153563878E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999931156377831	WITHOUT_CLASSIFICATION	6.884362216874077E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999999277622574	WITHOUT_CLASSIFICATION	7.223774256845855E-8	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999602096598	WITHOUT_CLASSIFICATION	3.979034027942147E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999914260377	WITHOUT_CLASSIFICATION	8.573962296653984E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999988784199603	WITHOUT_CLASSIFICATION	1.1215800396880272E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998508916291	WITHOUT_CLASSIFICATION	1.4910837088250934E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999995411805974	WITHOUT_CLASSIFICATION	4.588194026035987E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999996754692969	WITHOUT_CLASSIFICATION	3.245307031653882E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999476337476	WITHOUT_CLASSIFICATION	5.2366252478700976E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998341880934	WITHOUT_CLASSIFICATION	1.658119067460033E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999830141792034	WITHOUT_CLASSIFICATION	1.698582079656206E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999810914647	WITHOUT_CLASSIFICATION	1.8908535255091736E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999567309502	WITHOUT_CLASSIFICATION	4.326904969299285E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999572346768	WITHOUT_CLASSIFICATION	4.276532330056276E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999567309502	WITHOUT_CLASSIFICATION	4.326904969299285E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998414003113	WITHOUT_CLASSIFICATION	1.5859968875685987E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999921526243	WITHOUT_CLASSIFICATION	7.847375727632552E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999999302652697	WITHOUT_CLASSIFICATION	6.973473031934846E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999612670764	WITHOUT_CLASSIFICATION	3.87329236994816E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999665975592	WITHOUT_CLASSIFICATION	3.340244084650247E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999405604402	WITHOUT_CLASSIFICATION	5.94395598459958E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996067411998	WITHOUT_CLASSIFICATION	3.932588001791415E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999873744716221	WITHOUT_CLASSIFICATION	1.2625528377909417E-5	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999996172794399	WITHOUT_CLASSIFICATION	3.827205601008031E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999944153086	WITHOUT_CLASSIFICATION	5.584691313128066E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999987404954043	WITHOUT_CLASSIFICATION	1.2595045957123145E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999808672306	WITHOUT_CLASSIFICATION	1.9132769265443988E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998392457251	WITHOUT_CLASSIFICATION	1.6075427498885975E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999970023237603	WITHOUT_CLASSIFICATION	2.997676239638409E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999006526483	WITHOUT_CLASSIFICATION	9.934735161686499E-8	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999995650464	WITHOUT_CLASSIFICATION	4.349535952255579E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999866561176	WITHOUT_CLASSIFICATION	1.3343882514581317E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998664307366	WITHOUT_CLASSIFICATION	1.3356926329488835E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999903075165	WITHOUT_CLASSIFICATION	9.69248356529228E-9	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999977622872667	WITHOUT_CLASSIFICATION	2.2377127334413627E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997428558502	WITHOUT_CLASSIFICATION	2.5714414968493694E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999985888035978	WITHOUT_CLASSIFICATION	1.4111964022579376E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998503640369042	WITHOUT_CLASSIFICATION	1.4963596309573423E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999626159699	WITHOUT_CLASSIFICATION	3.73840302181354E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999997435132983	WITHOUT_CLASSIFICATION	2.564867016947369E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999620299321006	WITHOUT_CLASSIFICATION	3.797006789938449E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999966378241626	WITHOUT_CLASSIFICATION	3.3621758373943316E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999987613568387	WITHOUT_CLASSIFICATION	1.2386431612813285E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999100151125	WITHOUT_CLASSIFICATION	8.998488748910166E-8	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999971923695374	WITHOUT_CLASSIFICATION	2.807630462670855E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999922013841369	WITHOUT_CLASSIFICATION	7.798615862988284E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999996211276398	WITHOUT_CLASSIFICATION	3.7887236017488667E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999435432745	WITHOUT_CLASSIFICATION	5.645672545865918E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999999707237163	WITHOUT_CLASSIFICATION	2.927628369417461E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999997142578593	WITHOUT_CLASSIFICATION	2.8574214072756604E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999935651703866	WITHOUT_CLASSIFICATION	6.434829613463013E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999958874808054	WITHOUT_CLASSIFICATION	4.112519194673401E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998990461891	WITHOUT_CLASSIFICATION	1.0095381096349661E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999835918355126	WITHOUT_CLASSIFICATION	1.6408164487446138E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999983131909093	WITHOUT_CLASSIFICATION	1.6868090907246935E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999947830544554	WITHOUT_CLASSIFICATION	5.216945544565806E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.999999651607834	WITHOUT_CLASSIFICATION	3.483921659462742E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999324241616944	WITHOUT_CLASSIFICATION	6.757583830563811E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999620299321006	WITHOUT_CLASSIFICATION	3.797006789938449E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999772680861524	WITHOUT_CLASSIFICATION	2.2731913847569414E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999187959197	WITHOUT_CLASSIFICATION	8.12040803185375E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999892799110873	WITHOUT_CLASSIFICATION	1.0720088912808128E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999978764297321	WITHOUT_CLASSIFICATION	2.12357026776439E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999996410802338	WITHOUT_CLASSIFICATION	3.5891976618782965E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998693881204	WITHOUT_CLASSIFICATION	1.30611879734542E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999999996228383	WITHOUT_CLASSIFICATION	3.771617110904463E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999881848374079	WITHOUT_CLASSIFICATION	1.1815162592074337E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990669435584	WITHOUT_CLASSIFICATION	9.330564415434989E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999888341786	WITHOUT_CLASSIFICATION	1.116582140943473E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999952050018938	WITHOUT_CLASSIFICATION	4.79499810629398E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999428532959	WITHOUT_CLASSIFICATION	5.714670411401927E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999943792616294	WITHOUT_CLASSIFICATION	5.620738370615412E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999971949515264	WITHOUT_CLASSIFICATION	2.8050484736201147E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999672595558	WITHOUT_CLASSIFICATION	3.2740444279782913E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999961021717	WITHOUT_CLASSIFICATION	3.897828267770763E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998332202622	WITHOUT_CLASSIFICATION	1.6677973775786247E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999996106840814	WITHOUT_CLASSIFICATION	3.8931591856007265E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999934814987	WITHOUT_CLASSIFICATION	6.518501325887621E-9	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999772680861524	WITHOUT_CLASSIFICATION	2.2731913847569414E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999996239674494	WITHOUT_CLASSIFICATION	3.7603255060308136E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999127920965	WITHOUT_CLASSIFICATION	8.72079033925161E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999997117773238	WITHOUT_CLASSIFICATION	2.8822267621164345E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998633901169	WITHOUT_CLASSIFICATION	1.3660988304618672E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997328103981	WITHOUT_CLASSIFICATION	2.671896018328117E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999983854338694	WITHOUT_CLASSIFICATION	1.614566130585676E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999983854338694	WITHOUT_CLASSIFICATION	1.614566130585676E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998685647361	WITHOUT_CLASSIFICATION	1.3143526397601263E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999983854338694	WITHOUT_CLASSIFICATION	1.614566130585676E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999983854338694	WITHOUT_CLASSIFICATION	1.614566130585676E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999992955523935	WITHOUT_CLASSIFICATION	7.044476065073008E-7	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999963238540387	WITHOUT_CLASSIFICATION	3.6761459614323286E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993169758561	WITHOUT_CLASSIFICATION	6.830241439753372E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992541389053	WITHOUT_CLASSIFICATION	7.458610947231707E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999396776393	WITHOUT_CLASSIFICATION	6.032236068695456E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999997103943281	WITHOUT_CLASSIFICATION	2.896056718721815E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999998572104497	WITHOUT_CLASSIFICATION	1.4278955029754706E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999946650305683	WITHOUT_CLASSIFICATION	5.334969431620925E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999983146024982	WITHOUT_CLASSIFICATION	1.6853975018663067E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999750751339926	WITHOUT_CLASSIFICATION	2.4924866007262707E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999984982114054	WITHOUT_CLASSIFICATION	1.501788594603909E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999993846769049	WITHOUT_CLASSIFICATION	6.153230950325439E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999986958934921	WITHOUT_CLASSIFICATION	1.3041065078696438E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999922118932483	WITHOUT_CLASSIFICATION	7.788106751635347E-6	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997340009475	WITHOUT_CLASSIFICATION	2.659990523429111E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997922008122614	WITHOUT_CLASSIFICATION	2.0779918773854668E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997288262761	WITHOUT_CLASSIFICATION	2.7117372390495906E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999877519591516	WITHOUT_CLASSIFICATION	1.2248040848532836E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999645575763243	WITHOUT_CLASSIFICATION	3.544242367583063E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999903589257877	WITHOUT_CLASSIFICATION	9.64107421236328E-6	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999996773951841	WITHOUT_CLASSIFICATION	3.2260481583632226E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999998210569818	WITHOUT_CLASSIFICATION	1.7894301821285533E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997288262761	WITHOUT_CLASSIFICATION	2.7117372390495906E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999966378241626	WITHOUT_CLASSIFICATION	3.3621758373943316E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999959253641815	WITHOUT_CLASSIFICATION	4.07463581845907E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997563283817	WITHOUT_CLASSIFICATION	2.4367161828795097E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999376063812	WITHOUT_CLASSIFICATION	6.239361883870534E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999968172020848	WITHOUT_CLASSIFICATION	3.182797915117339E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999999962042596	WITHOUT_CLASSIFICATION	3.795740411425184E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999961087516733	WITHOUT_CLASSIFICATION	3.891248326722697E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999995825886354	WITHOUT_CLASSIFICATION	4.1741136452287603E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998252722577	WITHOUT_CLASSIFICATION	1.7472774230783842E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999435242043	WITHOUT_CLASSIFICATION	5.647579564181918E-8	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999992747795782	WITHOUT_CLASSIFICATION	7.252204218073071E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997460422592	WITHOUT_CLASSIFICATION	2.539577408516304E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999998076049986	WITHOUT_CLASSIFICATION	1.923950013895093E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998683959241	WITHOUT_CLASSIFICATION	1.3160407582792068E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999972809263655	WITHOUT_CLASSIFICATION	2.7190736345338453E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999779925626	WITHOUT_CLASSIFICATION	2.200743742407999E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999998827083367	WITHOUT_CLASSIFICATION	1.1729166321415502E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999994576050455	WITHOUT_CLASSIFICATION	5.423949545155988E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999062620393	WITHOUT_CLASSIFICATION	9.373796073361403E-8	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999985898369015	WITHOUT_CLASSIFICATION	1.410163098500097E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999975527995657	WITHOUT_CLASSIFICATION	2.447200434279533E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999950621870313	WITHOUT_CLASSIFICATION	4.937812968756188E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999885810658	WITHOUT_CLASSIFICATION	1.141893425861613E-8	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998252722577	WITHOUT_CLASSIFICATION	1.7472774230783842E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999990487139311	WITHOUT_CLASSIFICATION	9.512860689977915E-7	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999996892864085	WITHOUT_CLASSIFICATION	3.1071359155263316E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.99999954034304	WITHOUT_CLASSIFICATION	4.5965696003271793E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999983890832548	WITHOUT_CLASSIFICATION	1.6109167452736014E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973343285622	WITHOUT_CLASSIFICATION	2.6656714378286403E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999942696514537	WITHOUT_CLASSIFICATION	5.730348546291728E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.999998000825415	WITHOUT_CLASSIFICATION	1.999174584990027E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999999503151744	WITHOUT_CLASSIFICATION	4.9684825640416146E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999981241462339	WITHOUT_CLASSIFICATION	1.8758537660456577E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999957489997275	WITHOUT_CLASSIFICATION	4.251000272387519E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999597944239	WITHOUT_CLASSIFICATION	4.0205576057098736E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999995742823155	WITHOUT_CLASSIFICATION	4.2571768454203596E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999984499859736	WITHOUT_CLASSIFICATION	1.5500140263153241E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999994616016039	WITHOUT_CLASSIFICATION	5.383983961779695E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999932054800494	WITHOUT_CLASSIFICATION	6.794519950554291E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993700214785	WITHOUT_CLASSIFICATION	6.299785214206165E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999597944239	WITHOUT_CLASSIFICATION	4.0205576057098736E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999991472911787	WITHOUT_CLASSIFICATION	8.527088213734611E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999992718507	WITHOUT_CLASSIFICATION	7.281493000229833E-7	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999394882855	WITHOUT_CLASSIFICATION	6.051171452858404E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999949396418959	WITHOUT_CLASSIFICATION	5.060358104135198E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.999999890501981	WITHOUT_CLASSIFICATION	1.0949801898960372E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999393607221	WITHOUT_CLASSIFICATION	6.063927787503491E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999829949818	WITHOUT_CLASSIFICATION	1.7005018155076418E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995931106832	WITHOUT_CLASSIFICATION	4.068893168568901E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999558612604	WITHOUT_CLASSIFICATION	4.4138739594456334E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997468066387	WITHOUT_CLASSIFICATION	2.531933612629134E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999944454388	WITHOUT_CLASSIFICATION	5.554561208258168E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998603725339	WITHOUT_CLASSIFICATION	1.396274661495469E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999556998883	WITHOUT_CLASSIFICATION	4.4300111719512606E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999556998883	WITHOUT_CLASSIFICATION	4.4300111719512606E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999962537326352	WITHOUT_CLASSIFICATION	3.7462673646922455E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999554105966	WITHOUT_CLASSIFICATION	4.458940336010742E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999998966861676	WITHOUT_CLASSIFICATION	1.0331383241160377E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999999026674004	WITHOUT_CLASSIFICATION	9.733259967424122E-8	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999890919566747	WITHOUT_CLASSIFICATION	1.0908043325381917E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997841163903	WITHOUT_CLASSIFICATION	2.1588360966565605E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986828638111	WITHOUT_CLASSIFICATION	1.317136188874737E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998940493377	WITHOUT_CLASSIFICATION	1.0595066229857152E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999974344922787	WITHOUT_CLASSIFICATION	2.5655077213424383E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994675011099	WITHOUT_CLASSIFICATION	5.324988899775208E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997841163903	WITHOUT_CLASSIFICATION	2.1588360966565605E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986828638111	WITHOUT_CLASSIFICATION	1.317136188874737E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998940493377	WITHOUT_CLASSIFICATION	1.0595066229857152E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999993395638028	WITHOUT_CLASSIFICATION	6.604361971601053E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999943536967432	WITHOUT_CLASSIFICATION	5.646303256910736E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999415380203	WITHOUT_CLASSIFICATION	5.8461979790140935E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999993027819971	WITHOUT_CLASSIFICATION	6.972180028778352E-7	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999997441548326	WITHOUT_CLASSIFICATION	2.5584516739821385E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999800854590198	WITHOUT_CLASSIFICATION	1.9914540980141078E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999986671173544	WITHOUT_CLASSIFICATION	1.332882645604494E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.999993089995672	WITHOUT_CLASSIFICATION	6.910004328019616E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999456553013056	WITHOUT_CLASSIFICATION	5.434469869441262E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999986925454859	WITHOUT_CLASSIFICATION	1.3074545141074914E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999997407878662	WITHOUT_CLASSIFICATION	2.592121337854375E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999287496018653	WITHOUT_CLASSIFICATION	7.125039813479268E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999860420871597	WITHOUT_CLASSIFICATION	1.3957912840404223E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999973959509	WITHOUT_CLASSIFICATION	2.6040490905404996E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999978186382	WITHOUT_CLASSIFICATION	2.1813618016873075E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999995035964926	WITHOUT_CLASSIFICATION	4.964035074165817E-7	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9975439233695461	WITHOUT_CLASSIFICATION	0.002456076630453989	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999878631498439	WITHOUT_CLASSIFICATION	1.213685015609073E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999999367778658	WITHOUT_CLASSIFICATION	6.322213411248026E-8	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.99999947960216	WITHOUT_CLASSIFICATION	5.203978400403906E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.99999984182429	WITHOUT_CLASSIFICATION	1.5817570991388008E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998703419585	WITHOUT_CLASSIFICATION	1.2965804154171222E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999043477685	WITHOUT_CLASSIFICATION	9.565223149414476E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999862562874	WITHOUT_CLASSIFICATION	1.3743712742678246E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999837430847	WITHOUT_CLASSIFICATION	1.6256915256333548E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999923572924218	WITHOUT_CLASSIFICATION	7.642707578367166E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987280520986	WITHOUT_CLASSIFICATION	1.2719479014743559E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953106830473	WITHOUT_CLASSIFICATION	4.6893169528139654E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999874191439	WITHOUT_CLASSIFICATION	1.2580856100125036E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923856620874	WITHOUT_CLASSIFICATION	7.614337912565712E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979123418754	WITHOUT_CLASSIFICATION	2.087658124577897E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982562101266	WITHOUT_CLASSIFICATION	1.7437898734098601E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982562101266	WITHOUT_CLASSIFICATION	1.7437898734098601E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999993257653481	WITHOUT_CLASSIFICATION	6.742346518662071E-7	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999878659807634	WITHOUT_CLASSIFICATION	1.2134019236618972E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999998353963284	WITHOUT_CLASSIFICATION	1.6460367163019175E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999165043770507	WITHOUT_CLASSIFICATION	8.349562294927475E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999994589168925	WITHOUT_CLASSIFICATION	5.410831074828185E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999996316970667	WITHOUT_CLASSIFICATION	3.6830293330018777E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999803362446748	WITHOUT_CLASSIFICATION	1.966375532517881E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999999111754765	WITHOUT_CLASSIFICATION	8.88245235230771E-8	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998996723756	WITHOUT_CLASSIFICATION	1.0032762439524735E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993988338921	WITHOUT_CLASSIFICATION	6.011661078583691E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995023734065	WITHOUT_CLASSIFICATION	4.976265935782346E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998026322833	WITHOUT_CLASSIFICATION	1.9736771665213837E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996248582388	WITHOUT_CLASSIFICATION	3.751417613229199E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996608260924	WITHOUT_CLASSIFICATION	3.3917390757677123E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993305113155	WITHOUT_CLASSIFICATION	6.694886844412259E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994642428249	WITHOUT_CLASSIFICATION	5.35757175031341E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998230371899	WITHOUT_CLASSIFICATION	1.7696281004352714E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998381571406	WITHOUT_CLASSIFICATION	1.6184285948657765E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999272124639	WITHOUT_CLASSIFICATION	7.278753610080632E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999940898579	WITHOUT_CLASSIFICATION	5.910142101090457E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999906239444	WITHOUT_CLASSIFICATION	9.376055609889975E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999866938879838	WITHOUT_CLASSIFICATION	1.3306112016222532E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999496798927171	WITHOUT_CLASSIFICATION	5.0320107282834254E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999792539567	WITHOUT_CLASSIFICATION	2.0746043328142248E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999995456985113	WITHOUT_CLASSIFICATION	4.543014885578545E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.999999928594359	WITHOUT_CLASSIFICATION	7.14056408951086E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999984379429337	WITHOUT_CLASSIFICATION	1.562057066204855E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999381210158	WITHOUT_CLASSIFICATION	6.18789840838815E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999496798927171	WITHOUT_CLASSIFICATION	5.0320107282834254E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999496798927171	WITHOUT_CLASSIFICATION	5.0320107282834254E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999575162860415	WITHOUT_CLASSIFICATION	4.2483713958410546E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999601821004	WITHOUT_CLASSIFICATION	3.981789976909386E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999890697556305	WITHOUT_CLASSIFICATION	1.0930244369472862E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999989163646592	WITHOUT_CLASSIFICATION	1.0836353407683222E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999999745384476	WITHOUT_CLASSIFICATION	2.546155239888694E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.99999947960216	WITHOUT_CLASSIFICATION	5.203978400403906E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999995583386265	WITHOUT_CLASSIFICATION	4.416613734641016E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997571164616	WITHOUT_CLASSIFICATION	2.4288353841415283E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999999615731711	WITHOUT_CLASSIFICATION	3.8426828906080625E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992014392869	WITHOUT_CLASSIFICATION	7.98560713127794E-7	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996004345147	WITHOUT_CLASSIFICATION	3.995654853267738E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993683506757	WITHOUT_CLASSIFICATION	6.316493243738178E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998921895683	WITHOUT_CLASSIFICATION	1.0781043180247913E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998921895683	WITHOUT_CLASSIFICATION	1.0781043180247913E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997545798202	WITHOUT_CLASSIFICATION	2.4542017982847916E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997545798202	WITHOUT_CLASSIFICATION	2.4542017982847916E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994100294133	WITHOUT_CLASSIFICATION	5.899705867315367E-7	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997156287163	WITHOUT_CLASSIFICATION	2.8437128374364256E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999948022926612	WITHOUT_CLASSIFICATION	5.197707338776987E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963375805871	WITHOUT_CLASSIFICATION	3.662419412891687E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999824027626	WITHOUT_CLASSIFICATION	1.759723737399354E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999374829296	WITHOUT_CLASSIFICATION	6.25170704857351E-8	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993420352961	WITHOUT_CLASSIFICATION	6.579647038783688E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999315231891	WITHOUT_CLASSIFICATION	6.847681082098544E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998585738321	WITHOUT_CLASSIFICATION	1.4142616780524993E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999573326197013	WITHOUT_CLASSIFICATION	4.266738029876235E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996223728742	WITHOUT_CLASSIFICATION	3.776271258280305E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998007930729	WITHOUT_CLASSIFICATION	1.9920692707946325E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999994901822404	WITHOUT_CLASSIFICATION	5.09817759558629E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999103737174	WITHOUT_CLASSIFICATION	8.96262826431838E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999992606437623	WITHOUT_CLASSIFICATION	7.393562376245303E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998820022137	WITHOUT_CLASSIFICATION	1.1799778630174507E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998820022137	WITHOUT_CLASSIFICATION	1.1799778630174507E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999993706759672	WITHOUT_CLASSIFICATION	6.293240328139541E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999996544515167	WITHOUT_CLASSIFICATION	3.455484832805277E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999457144296	WITHOUT_CLASSIFICATION	5.428557043495917E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999980171749422	WITHOUT_CLASSIFICATION	1.982825057836532E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989971110015	WITHOUT_CLASSIFICATION	1.0028889985518209E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918262219145	WITHOUT_CLASSIFICATION	8.173778085479117E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999849119363	WITHOUT_CLASSIFICATION	1.5088063683387425E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998600287573	WITHOUT_CLASSIFICATION	1.399712426483772E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999968611826	WITHOUT_CLASSIFICATION	3.1388173583989203E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999634407915	WITHOUT_CLASSIFICATION	3.6559208523697095E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999995081971	WITHOUT_CLASSIFICATION	4.918029040636881E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999666239462	WITHOUT_CLASSIFICATION	3.3376053773297407E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998810301189	WITHOUT_CLASSIFICATION	1.1896988101778521E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998641674307	WITHOUT_CLASSIFICATION	1.3583256928027997E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999993910863182	WITHOUT_CLASSIFICATION	6.089136817707184E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999989274806174	WITHOUT_CLASSIFICATION	1.0725193826478185E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998259618935	WITHOUT_CLASSIFICATION	1.7403810650367255E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999996250505199	WITHOUT_CLASSIFICATION	3.749494800737231E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999995825144032	WITHOUT_CLASSIFICATION	4.1748559677464294E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999927857002	WITHOUT_CLASSIFICATION	7.214299810503486E-9	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999135336117	WITHOUT_CLASSIFICATION	8.646638822498198E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999983112118538	WITHOUT_CLASSIFICATION	1.6887881462318556E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998942381845	WITHOUT_CLASSIFICATION	1.0576181550608717E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996067336482	WITHOUT_CLASSIFICATION	3.932663517058832E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999999200776157	WITHOUT_CLASSIFICATION	7.992238427876243E-8	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999999565913429	WITHOUT_CLASSIFICATION	4.340865709903962E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997655146516	WITHOUT_CLASSIFICATION	2.3448534838383053E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999985446249444	WITHOUT_CLASSIFICATION	1.4553750556721879E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999241965918	WITHOUT_CLASSIFICATION	7.58034082843926E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970366596872	WITHOUT_CLASSIFICATION	2.963340312781492E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999729356747	WITHOUT_CLASSIFICATION	2.7064325313294933E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998557184752	WITHOUT_CLASSIFICATION	1.442815248568149E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999979411286958	WITHOUT_CLASSIFICATION	2.0588713042278535E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999683470948	WITHOUT_CLASSIFICATION	3.165290524773322E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999748296914234	WITHOUT_CLASSIFICATION	2.51703085766094E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999996476934692	WITHOUT_CLASSIFICATION	3.5230653083494184E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999979090537	WITHOUT_CLASSIFICATION	2.0909463513948955E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999296955746	WITHOUT_CLASSIFICATION	7.030442534273327E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.99999999500955	WITHOUT_CLASSIFICATION	4.990450048966361E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999997212207615	WITHOUT_CLASSIFICATION	2.787792384607935E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999869569278	WITHOUT_CLASSIFICATION	1.304307227553774E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999428223126	WITHOUT_CLASSIFICATION	5.717768736869817E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999993521335416	WITHOUT_CLASSIFICATION	6.478664583111803E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999834098253	WITHOUT_CLASSIFICATION	1.6590174724555518E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995195778564	WITHOUT_CLASSIFICATION	4.804221436476964E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999994220388194	WITHOUT_CLASSIFICATION	5.77961180563243E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999990169685898	WITHOUT_CLASSIFICATION	9.830314101390148E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999875782913165	WITHOUT_CLASSIFICATION	1.2421708683554596E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999999907422084	WITHOUT_CLASSIFICATION	9.257791597387614E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9981838049422788	WITHOUT_CLASSIFICATION	0.001816195057721107	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999998509058146	WITHOUT_CLASSIFICATION	1.4909418541882323E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999289551139992	WITHOUT_CLASSIFICATION	7.104488600075775E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999997495540559	WITHOUT_CLASSIFICATION	2.5044594400575514E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999535740478925	WITHOUT_CLASSIFICATION	4.642595210752626E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999986860042968	WITHOUT_CLASSIFICATION	1.3139957032536074E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999998888199039	WITHOUT_CLASSIFICATION	1.111800961419689E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9990091420038012	WITHOUT_CLASSIFICATION	9.908579961988263E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.999997879196995	WITHOUT_CLASSIFICATION	2.120803004942876E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998408012226	WITHOUT_CLASSIFICATION	1.591987774510599E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999861391979473	WITHOUT_CLASSIFICATION	1.386080205270183E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999857984364	WITHOUT_CLASSIFICATION	1.4201563698694337E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998830376517	WITHOUT_CLASSIFICATION	1.1696234826823136E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999991670983256	WITHOUT_CLASSIFICATION	8.329016743465229E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999989972664208	WITHOUT_CLASSIFICATION	1.0027335791717123E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999685545464	WITHOUT_CLASSIFICATION	3.144545356906398E-8	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999914552847	WITHOUT_CLASSIFICATION	8.544715294229626E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999939729315	WITHOUT_CLASSIFICATION	6.027068531227787E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998193017826	WITHOUT_CLASSIFICATION	1.8069821742691158E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999883670287026	WITHOUT_CLASSIFICATION	1.1632971297291332E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999883670287026	WITHOUT_CLASSIFICATION	1.1632971297291332E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999983813124464	WITHOUT_CLASSIFICATION	1.6186875535099019E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999985992804665	WITHOUT_CLASSIFICATION	1.4007195334346588E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999635085473	WITHOUT_CLASSIFICATION	3.6491452857836155E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996679948921	WITHOUT_CLASSIFICATION	3.320051077743241E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999923298404	WITHOUT_CLASSIFICATION	7.670159614492136E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999977730836461	WITHOUT_CLASSIFICATION	2.226916353908054E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999557202675	WITHOUT_CLASSIFICATION	4.4279732626566944E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999998860400183	WITHOUT_CLASSIFICATION	1.1395998177653299E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999988021853398	WITHOUT_CLASSIFICATION	1.1978146602943872E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999996048911437	WITHOUT_CLASSIFICATION	3.95108856327896E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999866922024	WITHOUT_CLASSIFICATION	1.3307797545645213E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999929862304	WITHOUT_CLASSIFICATION	7.013769573630171E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999991033591621	WITHOUT_CLASSIFICATION	8.966408378636437E-7	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999918538724	WITHOUT_CLASSIFICATION	8.146127555139466E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999995016037065	WITHOUT_CLASSIFICATION	4.983962935546542E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999986938881742	WITHOUT_CLASSIFICATION	1.306111825826749E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999997220341948	WITHOUT_CLASSIFICATION	2.7796580511479475E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999994541716316	WITHOUT_CLASSIFICATION	5.458283683592261E-7	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999989828735468	WITHOUT_CLASSIFICATION	1.0171264531833823E-6	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999983381963342	WITHOUT_CLASSIFICATION	1.661803665898985E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998696726282	WITHOUT_CLASSIFICATION	1.3032737167595008E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997385084974	WITHOUT_CLASSIFICATION	2.6149150258146736E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999905316001785	WITHOUT_CLASSIFICATION	9.468399821588575E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999938335693873	WITHOUT_CLASSIFICATION	6.166430612651644E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999752280727	WITHOUT_CLASSIFICATION	2.4771927258242387E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999988417124094	WITHOUT_CLASSIFICATION	1.1582875905488507E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997442232262	WITHOUT_CLASSIFICATION	2.5577677370508433E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999978698106735	WITHOUT_CLASSIFICATION	2.130189326480114E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999994923526053	WITHOUT_CLASSIFICATION	5.0764739474843E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999646932123	WITHOUT_CLASSIFICATION	3.5306787672795585E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996801413067	WITHOUT_CLASSIFICATION	3.1985869338524824E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999472255233	WITHOUT_CLASSIFICATION	5.277447660032955E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998457451944	WITHOUT_CLASSIFICATION	1.5425480572759453E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999998199925612	WITHOUT_CLASSIFICATION	1.800074387527424E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994062209121	WITHOUT_CLASSIFICATION	5.937790878353185E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994062209121	WITHOUT_CLASSIFICATION	5.937790878353185E-7	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998251158989	WITHOUT_CLASSIFICATION	1.7488410117213625E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999956738564296	WITHOUT_CLASSIFICATION	4.326143570392087E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999995903748622	WITHOUT_CLASSIFICATION	4.096251378187011E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999999024151364	WITHOUT_CLASSIFICATION	9.75848635975342E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998553199376	WITHOUT_CLASSIFICATION	1.4468006242404733E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999881643493765	WITHOUT_CLASSIFICATION	1.1835650623532075E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999998710290967	WITHOUT_CLASSIFICATION	1.28970903299159E-6	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999931143104	WITHOUT_CLASSIFICATION	6.885689663506381E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998199151778733	WITHOUT_CLASSIFICATION	1.8008482212684526E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999710031529	WITHOUT_CLASSIFICATION	2.8996847133886907E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999467976405	WITHOUT_CLASSIFICATION	5.320235937458696E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999994902101135	WITHOUT_CLASSIFICATION	5.097898866330421E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999987668982595	WITHOUT_CLASSIFICATION	1.2331017405841976E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998753539958	WITHOUT_CLASSIFICATION	1.2464600417257164E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996672264169	WITHOUT_CLASSIFICATION	3.3277358310646787E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999967612806286	WITHOUT_CLASSIFICATION	3.238719371371421E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999967612806286	WITHOUT_CLASSIFICATION	3.238719371371421E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999955231884	WITHOUT_CLASSIFICATION	4.4768116931439694E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999089230787	WITHOUT_CLASSIFICATION	9.107692135503176E-8	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999999262993132	WITHOUT_CLASSIFICATION	7.370068679764947E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999497221118	WITHOUT_CLASSIFICATION	5.0277888225392323E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999777656443789	WITHOUT_CLASSIFICATION	2.2234355621172132E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999606494184	WITHOUT_CLASSIFICATION	3.935058155229884E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999993696438457	WITHOUT_CLASSIFICATION	6.303561542529707E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999993696438457	WITHOUT_CLASSIFICATION	6.303561542529707E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999992512451095	WITHOUT_CLASSIFICATION	7.487548905844197E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999970248697	WITHOUT_CLASSIFICATION	2.9751301995449972E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.99999871390975	WITHOUT_CLASSIFICATION	1.2860902499907466E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999989851625	WITHOUT_CLASSIFICATION	1.0148375082060856E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999995407429899	WITHOUT_CLASSIFICATION	4.592570100518477E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999990829010053	WITHOUT_CLASSIFICATION	9.170989946924177E-6	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999936496075	WITHOUT_CLASSIFICATION	6.350392448632076E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999340032232	WITHOUT_CLASSIFICATION	6.59967767823999E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998889600642	WITHOUT_CLASSIFICATION	1.1103993578552678E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999862844612681	WITHOUT_CLASSIFICATION	1.3715538731873199E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999976844589978	WITHOUT_CLASSIFICATION	2.3155410021705606E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999971817018347	WITHOUT_CLASSIFICATION	2.8182981653792313E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999974003187316	WITHOUT_CLASSIFICATION	2.5996812683657193E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999991368191106	WITHOUT_CLASSIFICATION	8.631808893413377E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999937094438539	WITHOUT_CLASSIFICATION	6.290556146128086E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999444090004	WITHOUT_CLASSIFICATION	5.5590999682523936E-8	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999994200302637	WITHOUT_CLASSIFICATION	5.799697363481132E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999989853089446	WITHOUT_CLASSIFICATION	1.0146910553575663E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999986959054508	WITHOUT_CLASSIFICATION	1.3040945492138057E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998800985188	WITHOUT_CLASSIFICATION	1.1990148111358908E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999999541308275	WITHOUT_CLASSIFICATION	4.5869172509367734E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999995018697453	WITHOUT_CLASSIFICATION	4.981302548302818E-7	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999680248006881	WITHOUT_CLASSIFICATION	3.1975199311943324E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998172262381	WITHOUT_CLASSIFICATION	1.8277376190805868E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998689823077	WITHOUT_CLASSIFICATION	1.3101769228163569E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999999886717179	WITHOUT_CLASSIFICATION	1.1328282102721065E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999497405425593	WITHOUT_CLASSIFICATION	5.0259457440756695E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999999944423969	WITHOUT_CLASSIFICATION	5.5576031135457086E-8	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999960979213	WITHOUT_CLASSIFICATION	3.9020786522131E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999722625659	WITHOUT_CLASSIFICATION	2.7737434037123358E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999949074277537	WITHOUT_CLASSIFICATION	5.092572246310045E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.999996738143906	WITHOUT_CLASSIFICATION	3.261856094121019E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999992320782335	WITHOUT_CLASSIFICATION	7.679217665326581E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999996999257725	WITHOUT_CLASSIFICATION	3.0007422740275124E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999983948577844	WITHOUT_CLASSIFICATION	1.6051422154868525E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999963328439406	WITHOUT_CLASSIFICATION	3.667156059505788E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999992277750996	WITHOUT_CLASSIFICATION	7.722249003751922E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999999340091756	WITHOUT_CLASSIFICATION	6.59908243387123E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999995437198271	WITHOUT_CLASSIFICATION	4.562801728951153E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995230641385	WITHOUT_CLASSIFICATION	4.769358614543828E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999684491191	WITHOUT_CLASSIFICATION	3.1550880863301655E-8	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999996693489624	WITHOUT_CLASSIFICATION	3.306510375174043E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999988093865221	WITHOUT_CLASSIFICATION	1.1906134780224896E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998328969486	WITHOUT_CLASSIFICATION	1.6710305137679147E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999948036952	WITHOUT_CLASSIFICATION	5.196304796096478E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999994010000378	WITHOUT_CLASSIFICATION	5.989999623060597E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999995437198271	WITHOUT_CLASSIFICATION	4.562801728951153E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995230641385	WITHOUT_CLASSIFICATION	4.769358614543828E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999997326281705	WITHOUT_CLASSIFICATION	2.673718294942102E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999979381513182	WITHOUT_CLASSIFICATION	2.0618486818115073E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999999941185601	WITHOUT_CLASSIFICATION	5.881439900797773E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999995041826403	WITHOUT_CLASSIFICATION	4.958173597458449E-7	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999952204858	WITHOUT_CLASSIFICATION	4.779514312552475E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999994102268552	WITHOUT_CLASSIFICATION	5.8977314478987E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999908161573763	WITHOUT_CLASSIFICATION	9.183842623729008E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999981284692665	WITHOUT_CLASSIFICATION	1.8715307335151726E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999785577268	WITHOUT_CLASSIFICATION	2.1442273092598127E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999919552994324	WITHOUT_CLASSIFICATION	8.044700567647921E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999998633386514	WITHOUT_CLASSIFICATION	1.3666134868146326E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999919552994324	WITHOUT_CLASSIFICATION	8.044700567647921E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999968864745004	WITHOUT_CLASSIFICATION	3.11352549968323E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999938029442923	WITHOUT_CLASSIFICATION	6.197055707701509E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999970204789761	WITHOUT_CLASSIFICATION	2.979521023993547E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983848521818	WITHOUT_CLASSIFICATION	1.6151478181777713E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999989943549289	WITHOUT_CLASSIFICATION	1.0056450711166524E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9999705024042892	WITHOUT_CLASSIFICATION	2.9497595710862514E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999705024042892	WITHOUT_CLASSIFICATION	2.9497595710862514E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999951728511831	WITHOUT_CLASSIFICATION	4.827148816811694E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999992864384204	WITHOUT_CLASSIFICATION	7.135615796206537E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990002346082	WITHOUT_CLASSIFICATION	9.997653917829853E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999986560793198	WITHOUT_CLASSIFICATION	1.3439206801262016E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999992548636957	WITHOUT_CLASSIFICATION	7.45136304367213E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999797131802344	WITHOUT_CLASSIFICATION	2.028681976571498E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977204993664	WITHOUT_CLASSIFICATION	2.2795006334828384E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994491270429	WITHOUT_CLASSIFICATION	5.508729571004082E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999972096138564	WITHOUT_CLASSIFICATION	2.7903861435988623E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999914125186989	WITHOUT_CLASSIFICATION	8.587481301068239E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999960623823421	WITHOUT_CLASSIFICATION	3.937617657932873E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999995943919119	WITHOUT_CLASSIFICATION	4.05608088244085E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.999973045792228	WITHOUT_CLASSIFICATION	2.695420777191779E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999997313316723	WITHOUT_CLASSIFICATION	2.6866832771072396E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999988553624718	WITHOUT_CLASSIFICATION	1.14463752817123E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999976965903	WITHOUT_CLASSIFICATION	2.303409568520077E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999072813598	WITHOUT_CLASSIFICATION	9.27186401343225E-8	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998837864581	WITHOUT_CLASSIFICATION	1.1621354194889082E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999998199315616	WITHOUT_CLASSIFICATION	1.8006843840194812E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998667753057683	WITHOUT_CLASSIFICATION	1.3322469423167685E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999818225365	WITHOUT_CLASSIFICATION	1.8177463484280913E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999972019239046	WITHOUT_CLASSIFICATION	2.798076095366956E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998765899958	WITHOUT_CLASSIFICATION	1.234100041950116E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999990485679836	WITHOUT_CLASSIFICATION	9.514320163839519E-7	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999994121523501	WITHOUT_CLASSIFICATION	5.87847649897593E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999882979473204	WITHOUT_CLASSIFICATION	1.1702052679680445E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999967533355	WITHOUT_CLASSIFICATION	3.246664478139818E-9	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999976692104514	WITHOUT_CLASSIFICATION	2.3307895485943782E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996794218116	WITHOUT_CLASSIFICATION	3.205781885156372E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999993187306696	WITHOUT_CLASSIFICATION	6.812693305133271E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999814361288278	WITHOUT_CLASSIFICATION	1.8563871172184533E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999932164845345	WITHOUT_CLASSIFICATION	6.783515465531243E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977204993664	WITHOUT_CLASSIFICATION	2.2795006334828384E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999999670710317	WITHOUT_CLASSIFICATION	3.2928968243077485E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999868410432262	WITHOUT_CLASSIFICATION	1.3158956773794574E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.996599861136414	WITHOUT_CLASSIFICATION	0.0034001388635860903	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999621107812241	WITHOUT_CLASSIFICATION	3.7889218775982935E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999999761255939	WITHOUT_CLASSIFICATION	2.387440609630188E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999975689481715	WITHOUT_CLASSIFICATION	2.4310518285177274E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999986560793198	WITHOUT_CLASSIFICATION	1.3439206801262016E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999986560793198	WITHOUT_CLASSIFICATION	1.3439206801262016E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999999397721032	WITHOUT_CLASSIFICATION	6.022789680377936E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999995617713776	WITHOUT_CLASSIFICATION	4.3822862239790245E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999993820393371	WITHOUT_CLASSIFICATION	6.179606627346563E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999995206080176	WITHOUT_CLASSIFICATION	4.793919824497686E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999997285041082	WITHOUT_CLASSIFICATION	2.714958917107791E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995524701683	WITHOUT_CLASSIFICATION	4.4752983181133634E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999997100250164	WITHOUT_CLASSIFICATION	2.8997498359969373E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999371790832	WITHOUT_CLASSIFICATION	6.282091684222356E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999999931984541	WITHOUT_CLASSIFICATION	6.801545909449858E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999556852848	WITHOUT_CLASSIFICATION	4.431471530147721E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999965416048676	WITHOUT_CLASSIFICATION	3.4583951324055538E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999334206206045	WITHOUT_CLASSIFICATION	6.657937939545624E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999955152616884	WITHOUT_CLASSIFICATION	4.484738311523257E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999556852848	WITHOUT_CLASSIFICATION	4.431471530147721E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999995637347086	WITHOUT_CLASSIFICATION	4.362652914168972E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999997821255987	WITHOUT_CLASSIFICATION	2.178744011814485E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999990831018066	WITHOUT_CLASSIFICATION	9.16898193455325E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9977688200738388	WITHOUT_CLASSIFICATION	0.002231179926161175	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999334206206045	WITHOUT_CLASSIFICATION	6.657937939545624E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986284963537	WITHOUT_CLASSIFICATION	1.3715036462573428E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999921011694	WITHOUT_CLASSIFICATION	7.8988305755991E-9	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999988760925	WITHOUT_CLASSIFICATION	1.1239074901238957E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999987200737	WITHOUT_CLASSIFICATION	1.279926295140639E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999574614786922	WITHOUT_CLASSIFICATION	4.253852130786527E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999999466824478	WITHOUT_CLASSIFICATION	5.331755218823299E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999589482332	WITHOUT_CLASSIFICATION	4.105176676511378E-8	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999137240587	WITHOUT_CLASSIFICATION	8.627594130467981E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999970645149099	WITHOUT_CLASSIFICATION	2.935485090094242E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999983635354597	WITHOUT_CLASSIFICATION	1.6364645402744908E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999931930971	WITHOUT_CLASSIFICATION	6.806902960018697E-9	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999895269392	WITHOUT_CLASSIFICATION	1.047306075129323E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999556852848	WITHOUT_CLASSIFICATION	4.431471530147721E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986284963537	WITHOUT_CLASSIFICATION	1.3715036462573428E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999988760925	WITHOUT_CLASSIFICATION	1.1239074901238957E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996244591312	WITHOUT_CLASSIFICATION	3.755408689178319E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999856693990055	WITHOUT_CLASSIFICATION	1.4330600994543562E-5	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999286868503	WITHOUT_CLASSIFICATION	7.131314971109294E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999334206206045	WITHOUT_CLASSIFICATION	6.657937939545624E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999934183526202	WITHOUT_CLASSIFICATION	6.581647379755868E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999981708930195	WITHOUT_CLASSIFICATION	1.8291069804225264E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999961636672433	WITHOUT_CLASSIFICATION	3.836332756679234E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972134501641	WITHOUT_CLASSIFICATION	2.7865498359801276E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999137240587	WITHOUT_CLASSIFICATION	8.627594130467981E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999995637347086	WITHOUT_CLASSIFICATION	4.362652914168972E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999967958334142	WITHOUT_CLASSIFICATION	3.2041665859423843E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999912423771377	WITHOUT_CLASSIFICATION	8.757622862320627E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999974187847611	WITHOUT_CLASSIFICATION	2.581215238872984E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999967687635967	WITHOUT_CLASSIFICATION	3.2312364034632517E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999962726225101	WITHOUT_CLASSIFICATION	3.727377489852727E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999969724605224	WITHOUT_CLASSIFICATION	3.0275394776229904E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.999997905842358	WITHOUT_CLASSIFICATION	2.0941576419290462E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983848521818	WITHOUT_CLASSIFICATION	1.6151478181777713E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999699409076	WITHOUT_CLASSIFICATION	3.0059092425400706E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999303994607	WITHOUT_CLASSIFICATION	6.960053938397168E-8	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999291925718338	WITHOUT_CLASSIFICATION	7.080742816625832E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999985436769058	WITHOUT_CLASSIFICATION	1.4563230942604377E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998082783152	WITHOUT_CLASSIFICATION	1.917216847345222E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999923339938	WITHOUT_CLASSIFICATION	7.66600610563349E-9	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999996789502343	WITHOUT_CLASSIFICATION	3.2104976565070503E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998796588109	WITHOUT_CLASSIFICATION	1.2034118916543382E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999972134501641	WITHOUT_CLASSIFICATION	2.7865498359801276E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999955594756011	WITHOUT_CLASSIFICATION	4.440524398778367E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.999996278518579	WITHOUT_CLASSIFICATION	3.7214814211269217E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999910650710104	WITHOUT_CLASSIFICATION	8.93492898954736E-6	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999981343925002	WITHOUT_CLASSIFICATION	1.865607499829082E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999974210241875	WITHOUT_CLASSIFICATION	2.5789758124381538E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999867607109	WITHOUT_CLASSIFICATION	1.323928919965057E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999998196689929	WITHOUT_CLASSIFICATION	1.8033100713166397E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999897926979915	WITHOUT_CLASSIFICATION	1.0207302008594017E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998605327876	WITHOUT_CLASSIFICATION	1.3946721241384573E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999488452871041	WITHOUT_CLASSIFICATION	5.115471289577855E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999977299724344	WITHOUT_CLASSIFICATION	2.270027565506E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999994506118235	WITHOUT_CLASSIFICATION	5.4938817650296214E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999974061146828	WITHOUT_CLASSIFICATION	2.593885317327417E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999979502888156	WITHOUT_CLASSIFICATION	2.0497111844741487E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999547672189	WITHOUT_CLASSIFICATION	4.523278113480091E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998598513494	WITHOUT_CLASSIFICATION	1.4014865062633162E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999659188993	WITHOUT_CLASSIFICATION	3.408110074975861E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999869925604	WITHOUT_CLASSIFICATION	1.3007439510061305E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.99999948459397	WITHOUT_CLASSIFICATION	5.154060299531821E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999987268568824	WITHOUT_CLASSIFICATION	1.273143117685121E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999986499317595	WITHOUT_CLASSIFICATION	1.3500682405442835E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998227075784	WITHOUT_CLASSIFICATION	1.7729242163584192E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997987301689	WITHOUT_CLASSIFICATION	2.012698310263182E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999989796077	WITHOUT_CLASSIFICATION	1.0203923110308249E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999448455835	WITHOUT_CLASSIFICATION	5.51544165499636E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998397383524992	WITHOUT_CLASSIFICATION	1.602616475008388E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999974871897133	WITHOUT_CLASSIFICATION	2.512810286813291E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999921411635152	WITHOUT_CLASSIFICATION	7.858836484728733E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999997554778125	WITHOUT_CLASSIFICATION	2.4452218745411624E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994728026917629	WITHOUT_CLASSIFICATION	5.271973082371594E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998938111816	WITHOUT_CLASSIFICATION	1.061888184087803E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999988862312209	WITHOUT_CLASSIFICATION	1.1137687791300396E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999521991635	WITHOUT_CLASSIFICATION	4.780083643768692E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999562106689647	WITHOUT_CLASSIFICATION	4.378933103532815E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999993015034758	WITHOUT_CLASSIFICATION	6.984965240442904E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999908551939	WITHOUT_CLASSIFICATION	9.144806098242807E-8	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999561106315	WITHOUT_CLASSIFICATION	4.388936834165296E-8	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999992393594298	WITHOUT_CLASSIFICATION	7.606405702772461E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999908551939	WITHOUT_CLASSIFICATION	9.144806098242807E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999993015034758	WITHOUT_CLASSIFICATION	6.984965240442904E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999561106315	WITHOUT_CLASSIFICATION	4.388936834165296E-8	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999998229894774	WITHOUT_CLASSIFICATION	1.7701052262464305E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999994895537162	WITHOUT_CLASSIFICATION	5.104462838274335E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999998703080689	WITHOUT_CLASSIFICATION	1.2969193107977505E-7	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999997648584601	WITHOUT_CLASSIFICATION	2.351415399003531E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999708339883	WITHOUT_CLASSIFICATION	2.9166011833210777E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999424571767792	WITHOUT_CLASSIFICATION	5.754282322079844E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999900698463935	WITHOUT_CLASSIFICATION	9.930153606495633E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999977883186174	WITHOUT_CLASSIFICATION	2.2116813825758612E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999998141656065	WITHOUT_CLASSIFICATION	1.8583439351123247E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999958498506681	WITHOUT_CLASSIFICATION	4.150149331828602E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999997140969846	WITHOUT_CLASSIFICATION	2.859030153396465E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999988105533985	WITHOUT_CLASSIFICATION	1.1894466015531324E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999999106916122	WITHOUT_CLASSIFICATION	8.930838780642493E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999976432219124	WITHOUT_CLASSIFICATION	2.3567780875887267E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996114888655	WITHOUT_CLASSIFICATION	3.8851113455921095E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997834854999	WITHOUT_CLASSIFICATION	2.1651450012961615E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998970738234	WITHOUT_CLASSIFICATION	1.0292617660416268E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999552199645	WITHOUT_CLASSIFICATION	4.47800354956199E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995735605229	WITHOUT_CLASSIFICATION	4.2643947701214196E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999973933301798	WITHOUT_CLASSIFICATION	2.606669820256678E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999985543739625	WITHOUT_CLASSIFICATION	1.445626037631608E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999925582206	WITHOUT_CLASSIFICATION	7.441779407424894E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999986274880468	WITHOUT_CLASSIFICATION	1.3725119531736573E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998778683209	WITHOUT_CLASSIFICATION	1.2213167909383478E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999958371381823	WITHOUT_CLASSIFICATION	4.16286181767759E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999958371381823	WITHOUT_CLASSIFICATION	4.16286181767759E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999883116558	WITHOUT_CLASSIFICATION	1.1688344198489212E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999883116558	WITHOUT_CLASSIFICATION	1.1688344198489212E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999995987620511	WITHOUT_CLASSIFICATION	4.012379488507667E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998970738234	WITHOUT_CLASSIFICATION	1.0292617660416268E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999995046313046	WITHOUT_CLASSIFICATION	4.953686952857961E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999959229394	WITHOUT_CLASSIFICATION	4.077060522685102E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996914659848	WITHOUT_CLASSIFICATION	3.085340151822991E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996914659848	WITHOUT_CLASSIFICATION	3.085340151822991E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998426995228	WITHOUT_CLASSIFICATION	1.573004773157265E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996496586571	WITHOUT_CLASSIFICATION	3.5034134297729586E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999856669093	WITHOUT_CLASSIFICATION	1.433309073392943E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.99999876173194	WITHOUT_CLASSIFICATION	1.2382680599391824E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999999065693974	WITHOUT_CLASSIFICATION	9.343060260783498E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999431319311	WITHOUT_CLASSIFICATION	5.6868068967988735E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999956724468041	WITHOUT_CLASSIFICATION	4.327553195828965E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999989668098471	WITHOUT_CLASSIFICATION	1.0331901528529463E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999995958605258	WITHOUT_CLASSIFICATION	4.041394741290411E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999293045022	WITHOUT_CLASSIFICATION	7.069549781197358E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999999316485852	WITHOUT_CLASSIFICATION	6.835141473808599E-8	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999989875692199	WITHOUT_CLASSIFICATION	1.012430780079209E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999994248132353	WITHOUT_CLASSIFICATION	5.751867646019384E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999986976303746	WITHOUT_CLASSIFICATION	1.3023696253143168E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999967519709898	WITHOUT_CLASSIFICATION	3.24802901025346E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991242831578	WITHOUT_CLASSIFICATION	8.757168421300431E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991334959711	WITHOUT_CLASSIFICATION	8.665040287952905E-7	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999242123487	WITHOUT_CLASSIFICATION	7.57876512103827E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999849342945	WITHOUT_CLASSIFICATION	1.5065705499012046E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999721989139	WITHOUT_CLASSIFICATION	2.780108616456135E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999940813472	WITHOUT_CLASSIFICATION	5.9186527073899034E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999993137973404	WITHOUT_CLASSIFICATION	6.862026595210521E-7	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999999972390339	WITHOUT_CLASSIFICATION	2.7609661061223857E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999939521316	WITHOUT_CLASSIFICATION	6.047868458735509E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999165043770507	WITHOUT_CLASSIFICATION	8.349562294927475E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999499002154	WITHOUT_CLASSIFICATION	5.009978459328092E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999994506118235	WITHOUT_CLASSIFICATION	5.4938817650296214E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999993518327083	WITHOUT_CLASSIFICATION	6.481672917495487E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999999762203149	WITHOUT_CLASSIFICATION	2.3779685099581644E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990930979489	WITHOUT_CLASSIFICATION	9.069020512331607E-7	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997893635912	WITHOUT_CLASSIFICATION	2.106364086788413E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999990106309744	WITHOUT_CLASSIFICATION	9.893690255672158E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999990106309744	WITHOUT_CLASSIFICATION	9.893690255672158E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998855546443	WITHOUT_CLASSIFICATION	1.1444535572282214E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999997351815245	WITHOUT_CLASSIFICATION	2.648184754874758E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999975009834807	WITHOUT_CLASSIFICATION	2.499016519322999E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999975009834807	WITHOUT_CLASSIFICATION	2.499016519322999E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999751062567	WITHOUT_CLASSIFICATION	2.4893743305774124E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999994026182409	WITHOUT_CLASSIFICATION	5.973817590465927E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999974860189265	WITHOUT_CLASSIFICATION	2.5139810734785108E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999999745384476	WITHOUT_CLASSIFICATION	2.546155239888694E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999988346856455	WITHOUT_CLASSIFICATION	1.165314354554269E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999999297168091	WITHOUT_CLASSIFICATION	7.028319090567848E-7	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999997929740079	WITHOUT_CLASSIFICATION	2.0702599214497441E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999157568366	WITHOUT_CLASSIFICATION	8.424316346447562E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999147904736	WITHOUT_CLASSIFICATION	8.520952641215113E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999147904736	WITHOUT_CLASSIFICATION	8.520952641215113E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999999164363	WITHOUT_CLASSIFICATION	8.356370444015043E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999854971739	WITHOUT_CLASSIFICATION	1.4502826098616828E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999854971739	WITHOUT_CLASSIFICATION	1.4502826098616828E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999737575148	WITHOUT_CLASSIFICATION	2.6242485128203006E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998197216396	WITHOUT_CLASSIFICATION	1.802783603765275E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.993500958145692	WITHOUT_CLASSIFICATION	0.006499041854308072	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999338036369	WITHOUT_CLASSIFICATION	6.61963629818363E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999999983514863	WITHOUT_CLASSIFICATION	1.648513704494449E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999135063057	WITHOUT_CLASSIFICATION	8.649369429900121E-8	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999994537281425	WITHOUT_CLASSIFICATION	5.462718575780475E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999372760846583	WITHOUT_CLASSIFICATION	6.272391534159365E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999484996112	WITHOUT_CLASSIFICATION	5.150038882880958E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999991966180284	WITHOUT_CLASSIFICATION	8.033819716133066E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999857324471	WITHOUT_CLASSIFICATION	1.4267552966995987E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999456191117	WITHOUT_CLASSIFICATION	5.438088835853557E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933774104883	WITHOUT_CLASSIFICATION	6.622589511694562E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933774104883	WITHOUT_CLASSIFICATION	6.622589511694562E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933774104883	WITHOUT_CLASSIFICATION	6.622589511694562E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933774104883	WITHOUT_CLASSIFICATION	6.622589511694562E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999992994318426	WITHOUT_CLASSIFICATION	7.005681574277252E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999986675295351	WITHOUT_CLASSIFICATION	1.332470464893478E-6	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999967701220684	WITHOUT_CLASSIFICATION	3.2298779315749125E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999902553527587	WITHOUT_CLASSIFICATION	9.74464724142751E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999980656676898	WITHOUT_CLASSIFICATION	1.9343323101528314E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999997016675894	WITHOUT_CLASSIFICATION	2.983324105968229E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999950611508066	WITHOUT_CLASSIFICATION	4.938849193460617E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999998741847057	WITHOUT_CLASSIFICATION	1.258152943107996E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999476412742	WITHOUT_CLASSIFICATION	5.23587256826893E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999609871668	WITHOUT_CLASSIFICATION	3.901283314152727E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999996767054622	WITHOUT_CLASSIFICATION	3.2329453781584067E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995179216774	WITHOUT_CLASSIFICATION	4.820783225978533E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9702567553432526	WITHOUT_CLASSIFICATION	0.02974324465674744	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999959605887736	WITHOUT_CLASSIFICATION	4.039411226445601E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999966004076374	WITHOUT_CLASSIFICATION	3.3995923626271365E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995179216774	WITHOUT_CLASSIFICATION	4.820783225978533E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999543961720815	WITHOUT_CLASSIFICATION	4.5603827918545844E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999994702841	WITHOUT_CLASSIFICATION	5.297159953050249E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999863970468	WITHOUT_CLASSIFICATION	1.3602953132541533E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999978328075642	WITHOUT_CLASSIFICATION	2.167192435922474E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998791450135	WITHOUT_CLASSIFICATION	1.208549864232789E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998167527742	WITHOUT_CLASSIFICATION	1.832472258123097E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999994665957	WITHOUT_CLASSIFICATION	5.334042630264964E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999998861456512	WITHOUT_CLASSIFICATION	1.13854348814126E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999610165923	WITHOUT_CLASSIFICATION	3.8983407814882045E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999968005108	WITHOUT_CLASSIFICATION	3.199489208136346E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999176269506	WITHOUT_CLASSIFICATION	8.237304943370109E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998863672895	WITHOUT_CLASSIFICATION	1.1363271047979947E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.99999784365077	WITHOUT_CLASSIFICATION	2.156349229906405E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997993299057205	WITHOUT_CLASSIFICATION	2.0067009427954325E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998964845814	WITHOUT_CLASSIFICATION	1.0351541865354804E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999989550697617	WITHOUT_CLASSIFICATION	1.044930238376702E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998751112644	WITHOUT_CLASSIFICATION	1.2488873562429014E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998129676365	WITHOUT_CLASSIFICATION	1.8703236348925642E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999993717445684	WITHOUT_CLASSIFICATION	6.282554315770662E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998129676365	WITHOUT_CLASSIFICATION	1.8703236348925642E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999678070898	WITHOUT_CLASSIFICATION	3.2192910244135595E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993807674369	WITHOUT_CLASSIFICATION	6.192325631568518E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999999427502695	WITHOUT_CLASSIFICATION	5.724973060229259E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999962603854228	WITHOUT_CLASSIFICATION	3.739614577254741E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998751112644	WITHOUT_CLASSIFICATION	1.2488873562429014E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999993717445684	WITHOUT_CLASSIFICATION	6.282554315770662E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999678070898	WITHOUT_CLASSIFICATION	3.2192910244135595E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998626394717	WITHOUT_CLASSIFICATION	1.3736052828813828E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999999165752339	WITHOUT_CLASSIFICATION	8.342476604301381E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999965756317523	WITHOUT_CLASSIFICATION	3.4243682477392987E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.99999871028287	WITHOUT_CLASSIFICATION	1.289717129963581E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998670060908	WITHOUT_CLASSIFICATION	1.3299390928021676E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999637154808	WITHOUT_CLASSIFICATION	3.6284519234322367E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991334959711	WITHOUT_CLASSIFICATION	8.665040287952905E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993807674369	WITHOUT_CLASSIFICATION	6.192325631568518E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999330031176	WITHOUT_CLASSIFICATION	6.699688243156901E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999591759462	WITHOUT_CLASSIFICATION	4.08240538637977E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999721491953	WITHOUT_CLASSIFICATION	2.785080474400177E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991334959711	WITHOUT_CLASSIFICATION	8.665040287952905E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999994912671588	WITHOUT_CLASSIFICATION	5.087328412554587E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991334959711	WITHOUT_CLASSIFICATION	8.665040287952905E-7	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999274607198	WITHOUT_CLASSIFICATION	7.253928020448049E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990189221684	WITHOUT_CLASSIFICATION	9.810778315917948E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999981308707673	WITHOUT_CLASSIFICATION	1.8691292327961963E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999440269524	WITHOUT_CLASSIFICATION	5.59730476963502E-8	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999974437685	WITHOUT_CLASSIFICATION	2.556231504109962E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999997969235788	WITHOUT_CLASSIFICATION	2.030764212189842E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999998373109793	WITHOUT_CLASSIFICATION	1.6268902077110288E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999995869044597	WITHOUT_CLASSIFICATION	4.130955404076299E-7	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999988443543966	WITHOUT_CLASSIFICATION	1.1556456035111066E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.99999432954981	WITHOUT_CLASSIFICATION	5.670450190042175E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999883670287026	WITHOUT_CLASSIFICATION	1.1632971297291332E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.99999928256499	WITHOUT_CLASSIFICATION	7.174350100357981E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.993500958145692	WITHOUT_CLASSIFICATION	0.006499041854308072	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999925196222657	WITHOUT_CLASSIFICATION	7.480377734365863E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999888582512355	WITHOUT_CLASSIFICATION	1.1141748764556006E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999912940011538	WITHOUT_CLASSIFICATION	8.705998846143607E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999499863733574	WITHOUT_CLASSIFICATION	5.001362664268861E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999437541524	WITHOUT_CLASSIFICATION	5.6245847648361E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.99999990328585	WITHOUT_CLASSIFICATION	9.671415007150652E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999826828582	WITHOUT_CLASSIFICATION	1.731714178576669E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999975894931645	WITHOUT_CLASSIFICATION	2.4105068355485453E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999977797394	WITHOUT_CLASSIFICATION	2.2202606841502163E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999287897438	WITHOUT_CLASSIFICATION	7.121025622976318E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9920307923250504	WITHOUT_CLASSIFICATION	0.007969207674949528	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999726987091659	WITHOUT_CLASSIFICATION	2.730129083412224E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999933038519178	WITHOUT_CLASSIFICATION	6.696148082234271E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999923463547798	WITHOUT_CLASSIFICATION	7.653645220204887E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999998342069025	WITHOUT_CLASSIFICATION	1.6579309748790006E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999800612064179	WITHOUT_CLASSIFICATION	1.9938793582106927E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999989085691579	WITHOUT_CLASSIFICATION	1.0914308420916919E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999960712196	WITHOUT_CLASSIFICATION	3.928780409705511E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999981334693	WITHOUT_CLASSIFICATION	1.8665306674469774E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999930875056685	WITHOUT_CLASSIFICATION	6.912494331540716E-6	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999848195473131	WITHOUT_CLASSIFICATION	1.518045268679716E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9970772377236018	WITHOUT_CLASSIFICATION	0.0029227622763982465	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999830141792034	WITHOUT_CLASSIFICATION	1.698582079656206E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.99999880521239	WITHOUT_CLASSIFICATION	1.1947876099469814E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999959890748505	WITHOUT_CLASSIFICATION	4.010925149501642E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999441804100562	WITHOUT_CLASSIFICATION	5.5819589943852655E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999974241989101	WITHOUT_CLASSIFICATION	2.575801089862194E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9935779840671637	WITHOUT_CLASSIFICATION	0.0064220159328362255	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999562302292	WITHOUT_CLASSIFICATION	4.376977089288667E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999989815390865	WITHOUT_CLASSIFICATION	1.0184609135035571E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999853377323027	WITHOUT_CLASSIFICATION	1.4662267697410872E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999853377323027	WITHOUT_CLASSIFICATION	1.4662267697410872E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998905518102	WITHOUT_CLASSIFICATION	1.0944818982696056E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999995869044597	WITHOUT_CLASSIFICATION	4.130955404076299E-7	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999972007918704	WITHOUT_CLASSIFICATION	2.799208129574837E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999988009020487	WITHOUT_CLASSIFICATION	1.1990979512098276E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999953065399	WITHOUT_CLASSIFICATION	4.693460039659359E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999682731301	WITHOUT_CLASSIFICATION	3.172686994894926E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.999994704954988	WITHOUT_CLASSIFICATION	5.295045011997794E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998954676403019	WITHOUT_CLASSIFICATION	1.0453235969810627E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999633441881922	WITHOUT_CLASSIFICATION	3.665581180779191E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999994349831841	WITHOUT_CLASSIFICATION	5.650168159258845E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999523130011	WITHOUT_CLASSIFICATION	4.7686998836354484E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999908518706	WITHOUT_CLASSIFICATION	9.148129322390108E-9	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998983480354	WITHOUT_CLASSIFICATION	1.0165196459113564E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999741776316488	WITHOUT_CLASSIFICATION	2.5822368351251906E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997403132764	WITHOUT_CLASSIFICATION	2.596867235224386E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999083416937	WITHOUT_CLASSIFICATION	9.165830628640162E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999498331182	WITHOUT_CLASSIFICATION	5.016688174165157E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999913482949	WITHOUT_CLASSIFICATION	8.651705057365884E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999649080763	WITHOUT_CLASSIFICATION	3.509192367645916E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999738118499	WITHOUT_CLASSIFICATION	2.6188150059158516E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999987282749	WITHOUT_CLASSIFICATION	1.2717250826038075E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999186984792	WITHOUT_CLASSIFICATION	8.130152073574432E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997588249033	WITHOUT_CLASSIFICATION	2.411750966466519E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999502453947	WITHOUT_CLASSIFICATION	4.975460535226536E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9935779840671637	WITHOUT_CLASSIFICATION	0.0064220159328362255	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999658299568	WITHOUT_CLASSIFICATION	3.417004324876427E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999901720671	WITHOUT_CLASSIFICATION	9.827932981295316E-9	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999917744522	WITHOUT_CLASSIFICATION	8.225547912062467E-9	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999870570313	WITHOUT_CLASSIFICATION	1.2942968699964999E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999998114712417	WITHOUT_CLASSIFICATION	1.8852875829856244E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999998176808844	WITHOUT_CLASSIFICATION	1.8231911550642758E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999394914907386	WITHOUT_CLASSIFICATION	6.0508509261545915E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999815741465	WITHOUT_CLASSIFICATION	1.8425853503418357E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999460312622	WITHOUT_CLASSIFICATION	5.396873782633637E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998407854054	WITHOUT_CLASSIFICATION	1.5921459463982754E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998258108131	WITHOUT_CLASSIFICATION	1.7418918698815238E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996576245767417	WITHOUT_CLASSIFICATION	3.423754232582995E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999912486691875	WITHOUT_CLASSIFICATION	8.751330812366426E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999992934246748	WITHOUT_CLASSIFICATION	7.065753252528086E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999854968077	WITHOUT_CLASSIFICATION	1.4503192377304134E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999854968077	WITHOUT_CLASSIFICATION	1.4503192377304134E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999584747306	WITHOUT_CLASSIFICATION	4.1525269505782556E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999999821837877	WITHOUT_CLASSIFICATION	1.7816212299478154E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999926817147998	WITHOUT_CLASSIFICATION	7.318285200133556E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999926817147998	WITHOUT_CLASSIFICATION	7.318285200133556E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.999999995142256	WITHOUT_CLASSIFICATION	4.857744082791425E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999993846769049	WITHOUT_CLASSIFICATION	6.153230950325439E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999827774739	WITHOUT_CLASSIFICATION	1.7222526072609867E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999995129794026	WITHOUT_CLASSIFICATION	4.870205973595093E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999984644068154	WITHOUT_CLASSIFICATION	1.5355931846909053E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996021413641	WITHOUT_CLASSIFICATION	3.978586359776384E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999912148305	WITHOUT_CLASSIFICATION	8.785169569758497E-9	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999912148305	WITHOUT_CLASSIFICATION	8.785169569758497E-9	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999987101274466	WITHOUT_CLASSIFICATION	1.2898725534138906E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999205138244	WITHOUT_CLASSIFICATION	7.948617568777544E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999885228256329	WITHOUT_CLASSIFICATION	1.1477174367111787E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999856695668	WITHOUT_CLASSIFICATION	1.4330433185525756E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999856695668	WITHOUT_CLASSIFICATION	1.4330433185525756E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998455021547	WITHOUT_CLASSIFICATION	1.5449784541640913E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999808977307	WITHOUT_CLASSIFICATION	1.910226923414242E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999918470507804	WITHOUT_CLASSIFICATION	8.1529492195985E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998168312979	WITHOUT_CLASSIFICATION	1.8316870214432853E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999561825126	WITHOUT_CLASSIFICATION	4.381748736433357E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999063293584	WITHOUT_CLASSIFICATION	9.367064158278557E-8	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999826638646	WITHOUT_CLASSIFICATION	1.7336135410136378E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999999317106144	WITHOUT_CLASSIFICATION	6.828938557199585E-8	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999376777348	WITHOUT_CLASSIFICATION	6.232226522084149E-8	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999985753004236	WITHOUT_CLASSIFICATION	1.424699576392636E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998399901988	WITHOUT_CLASSIFICATION	1.6000980125407495E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999983276249478	WITHOUT_CLASSIFICATION	1.6723750521978864E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999650389599006	WITHOUT_CLASSIFICATION	3.4961040099404015E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999992339152631	WITHOUT_CLASSIFICATION	7.660847369528631E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994021968854	WITHOUT_CLASSIFICATION	5.978031145304817E-7	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999994253209039	WITHOUT_CLASSIFICATION	5.74679096087382E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999958058097	WITHOUT_CLASSIFICATION	4.194190306132659E-9	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999999047369431	WITHOUT_CLASSIFICATION	9.526305690382502E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999996825200761	WITHOUT_CLASSIFICATION	3.1747992398033194E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999994378125715	WITHOUT_CLASSIFICATION	5.621874284845969E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999999075157112	WITHOUT_CLASSIFICATION	9.248428883738499E-8	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999998569253201	WITHOUT_CLASSIFICATION	1.4307467990382214E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999909875272852	WITHOUT_CLASSIFICATION	9.012472714910682E-6	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999683822999387	WITHOUT_CLASSIFICATION	3.161770006127984E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999788362065495	WITHOUT_CLASSIFICATION	2.1163793450489773E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.99999994627059	WITHOUT_CLASSIFICATION	5.3729410070774555E-8	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999996354510846	WITHOUT_CLASSIFICATION	3.645489154573516E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999864029037911	WITHOUT_CLASSIFICATION	1.3597096208897213E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999983233588	WITHOUT_CLASSIFICATION	1.6766411624317486E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999978186382	WITHOUT_CLASSIFICATION	2.1813618016873075E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998703419585	WITHOUT_CLASSIFICATION	1.2965804154171222E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999867755643	WITHOUT_CLASSIFICATION	1.3224435586315675E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999965686699	WITHOUT_CLASSIFICATION	3.431330093184325E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999997838660576	WITHOUT_CLASSIFICATION	2.1613394239709025E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999808323403	WITHOUT_CLASSIFICATION	1.9167659752457133E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999785752073616	WITHOUT_CLASSIFICATION	2.1424792638361946E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999932539138677	WITHOUT_CLASSIFICATION	6.7460861322807175E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999991867373904	WITHOUT_CLASSIFICATION	8.132626096654789E-7	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999998766740494	WITHOUT_CLASSIFICATION	1.2332595058109185E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998914815852	WITHOUT_CLASSIFICATION	1.085184149233615E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999629836654	WITHOUT_CLASSIFICATION	3.701633459758834E-8	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996823229899	WITHOUT_CLASSIFICATION	3.176770100904327E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999998684835508	WITHOUT_CLASSIFICATION	1.3151644916515593E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999820103558	WITHOUT_CLASSIFICATION	1.7989644208402825E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999998148361744	WITHOUT_CLASSIFICATION	1.8516382564434998E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999337528581	WITHOUT_CLASSIFICATION	6.624714187135401E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997215124661	WITHOUT_CLASSIFICATION	2.7848753398803243E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999976762785038	WITHOUT_CLASSIFICATION	2.3237214962625573E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999464251698	WITHOUT_CLASSIFICATION	5.3574830202120815E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999928071117531	WITHOUT_CLASSIFICATION	7.192888246950056E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999998733348698	WITHOUT_CLASSIFICATION	1.2666513012183637E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999999979189118	WITHOUT_CLASSIFICATION	2.0810881964301878E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999962995228744	WITHOUT_CLASSIFICATION	3.700477125736815E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999999996611057	WITHOUT_CLASSIFICATION	3.3889431206510655E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999996848269624	WITHOUT_CLASSIFICATION	3.151730374934867E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999071311162	WITHOUT_CLASSIFICATION	9.286888381679739E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999958943406	WITHOUT_CLASSIFICATION	4.105659400901145E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999461427481	WITHOUT_CLASSIFICATION	5.3857251817252765E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998786499064	WITHOUT_CLASSIFICATION	1.2135009375517628E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999399085268529	WITHOUT_CLASSIFICATION	6.009147314701556E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995955978019	WITHOUT_CLASSIFICATION	4.0440219802593925E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995955978019	WITHOUT_CLASSIFICATION	4.0440219802593925E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999993901218577	WITHOUT_CLASSIFICATION	6.098781423062155E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999847272507689	WITHOUT_CLASSIFICATION	1.527274923104928E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999976277213	WITHOUT_CLASSIFICATION	2.3722787007387568E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999647785212	WITHOUT_CLASSIFICATION	3.522147881830699E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999997527417982	WITHOUT_CLASSIFICATION	2.472582017286819E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999997509552846	WITHOUT_CLASSIFICATION	2.490447153941931E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999540328454	WITHOUT_CLASSIFICATION	4.5967154699425836E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999998105896	WITHOUT_CLASSIFICATION	1.8941039751027267E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.99999934632471	WITHOUT_CLASSIFICATION	6.536752900177385E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999983743045977	WITHOUT_CLASSIFICATION	1.6256954022186463E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999977392449	WITHOUT_CLASSIFICATION	2.260755098974934E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999974333763026	WITHOUT_CLASSIFICATION	2.5666236973255156E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999019318102	WITHOUT_CLASSIFICATION	9.806818972140099E-8	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999910148961	WITHOUT_CLASSIFICATION	8.985103955817598E-9	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993700214785	WITHOUT_CLASSIFICATION	6.299785214206165E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993700214785	WITHOUT_CLASSIFICATION	6.299785214206165E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999713485952	WITHOUT_CLASSIFICATION	2.865140478138137E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999999852624	WITHOUT_CLASSIFICATION	1.4737599998102957E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997779705085	WITHOUT_CLASSIFICATION	2.2202949141606776E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999949371648	WITHOUT_CLASSIFICATION	5.062835141254991E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999597944239	WITHOUT_CLASSIFICATION	4.0205576057098736E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964987759542	WITHOUT_CLASSIFICATION	3.5012240458081612E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999979119278919	WITHOUT_CLASSIFICATION	2.088072108164451E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999936482805628	WITHOUT_CLASSIFICATION	6.3517194372236715E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.99999999822319	WITHOUT_CLASSIFICATION	1.7768099485149533E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999721811879142	WITHOUT_CLASSIFICATION	2.7818812085834197E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999988474328	WITHOUT_CLASSIFICATION	1.1525671734494435E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999989357067013	WITHOUT_CLASSIFICATION	1.0642932986913269E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999985105479	WITHOUT_CLASSIFICATION	1.4894520897757689E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996626441146	WITHOUT_CLASSIFICATION	3.3735588547363615E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999984207126229	WITHOUT_CLASSIFICATION	1.579287377075271E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998762150735	WITHOUT_CLASSIFICATION	1.2378492651037747E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999981321154119	WITHOUT_CLASSIFICATION	1.8678845881001635E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999981188290797	WITHOUT_CLASSIFICATION	1.881170920295608E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999635621887	WITHOUT_CLASSIFICATION	3.643781130334474E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999983651588	WITHOUT_CLASSIFICATION	1.6348412053504323E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999842768521	WITHOUT_CLASSIFICATION	1.572314796207769E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999934005492	WITHOUT_CLASSIFICATION	6.5994507751701166E-9	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996662685674	WITHOUT_CLASSIFICATION	3.337314325394107E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999768961669798	WITHOUT_CLASSIFICATION	2.3103833020238823E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999287496018653	WITHOUT_CLASSIFICATION	7.125039813479268E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999994765844751	WITHOUT_CLASSIFICATION	5.234155248818376E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999879762274	WITHOUT_CLASSIFICATION	1.2023772620939084E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999405496153	WITHOUT_CLASSIFICATION	5.945038460487916E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999976710582945	WITHOUT_CLASSIFICATION	2.328941705491846E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999190955667	WITHOUT_CLASSIFICATION	8.090443324823398E-8	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999953162676447	WITHOUT_CLASSIFICATION	4.6837323552964374E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999997807949573	WITHOUT_CLASSIFICATION	2.192050425974026E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999970374095	WITHOUT_CLASSIFICATION	2.9625905582518595E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999949003168	WITHOUT_CLASSIFICATION	5.0996831722362155E-9	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999999265596128	WITHOUT_CLASSIFICATION	7.344038721215703E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998763471214	WITHOUT_CLASSIFICATION	1.2365287853054484E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999838651087	WITHOUT_CLASSIFICATION	1.6134891376173347E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988676265359	WITHOUT_CLASSIFICATION	1.132373464177519E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999991170177905	WITHOUT_CLASSIFICATION	8.829822094742854E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999130222552	WITHOUT_CLASSIFICATION	8.697774473100146E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999999227300211	WITHOUT_CLASSIFICATION	7.726997890188146E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999999227300211	WITHOUT_CLASSIFICATION	7.726997890188146E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999997440210634	WITHOUT_CLASSIFICATION	2.559789365990903E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999985356910721	WITHOUT_CLASSIFICATION	1.4643089279671365E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999908500616	WITHOUT_CLASSIFICATION	9.149938419862925E-9	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999999922915111	WITHOUT_CLASSIFICATION	7.708488902289321E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999417246571	WITHOUT_CLASSIFICATION	5.827534283192179E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999996224053	WITHOUT_CLASSIFICATION	3.7759469382851644E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999673895402	WITHOUT_CLASSIFICATION	3.261045977631222E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999978241002698	WITHOUT_CLASSIFICATION	2.1758997301662424E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999851022953	WITHOUT_CLASSIFICATION	1.4897704787800807E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995810328448	WITHOUT_CLASSIFICATION	4.1896715520684285E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997730584644	WITHOUT_CLASSIFICATION	2.2694153544996828E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999496798927171	WITHOUT_CLASSIFICATION	5.0320107282834254E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999833187988993	WITHOUT_CLASSIFICATION	1.6681201100617904E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998400902778	WITHOUT_CLASSIFICATION	1.5990972222546421E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999323704379	WITHOUT_CLASSIFICATION	6.762956204733415E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999999660067136	WITHOUT_CLASSIFICATION	3.3993286392048114E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999795970734	WITHOUT_CLASSIFICATION	2.0402926584360136E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999985989106	WITHOUT_CLASSIFICATION	1.4010894042635428E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999947900433981	WITHOUT_CLASSIFICATION	5.209956601808299E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999977293077037	WITHOUT_CLASSIFICATION	2.2706922962120815E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999681355371	WITHOUT_CLASSIFICATION	3.1864462905029577E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999999969665785	WITHOUT_CLASSIFICATION	3.033421498530057E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999944108099856	WITHOUT_CLASSIFICATION	5.589190014411182E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999940795605072	WITHOUT_CLASSIFICATION	5.920439492697469E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999929703598065	WITHOUT_CLASSIFICATION	7.029640193568595E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999969764699469	WITHOUT_CLASSIFICATION	3.023530053117207E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999942807307	WITHOUT_CLASSIFICATION	5.719269294843786E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999879876306537	WITHOUT_CLASSIFICATION	1.2012369346288538E-5	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999655194904	WITHOUT_CLASSIFICATION	3.448050951637365E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999686578409	WITHOUT_CLASSIFICATION	3.134215909562117E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999819189804	WITHOUT_CLASSIFICATION	1.8081019616814667E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999996432898435	WITHOUT_CLASSIFICATION	3.5671015660159425E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999759485748	WITHOUT_CLASSIFICATION	2.4051425169887368E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999941537151	WITHOUT_CLASSIFICATION	5.846284961662672E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999927301690024	WITHOUT_CLASSIFICATION	7.269830997595544E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999626159699	WITHOUT_CLASSIFICATION	3.73840302181354E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995096232966	WITHOUT_CLASSIFICATION	4.90376703309225E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999791433077	WITHOUT_CLASSIFICATION	2.085669231815862E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999959617056383	WITHOUT_CLASSIFICATION	4.0382943616919126E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999982107492821	WITHOUT_CLASSIFICATION	1.7892507178555425E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994446368924	WITHOUT_CLASSIFICATION	5.553631077301596E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999978461118	WITHOUT_CLASSIFICATION	2.1538881961023995E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999677932889	WITHOUT_CLASSIFICATION	3.220671108701258E-8	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998583175664754	WITHOUT_CLASSIFICATION	1.4168243352457465E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999013773874	WITHOUT_CLASSIFICATION	9.862261266935515E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999997881348817	WITHOUT_CLASSIFICATION	2.1186511841068472E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999819346988	WITHOUT_CLASSIFICATION	1.806530120436783E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999019318102	WITHOUT_CLASSIFICATION	9.806818972140099E-8	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999995611134214	WITHOUT_CLASSIFICATION	4.388865786202576E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999767346627	WITHOUT_CLASSIFICATION	2.326533735452136E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99999992840267	WITHOUT_CLASSIFICATION	7.159732994132465E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999276633436	WITHOUT_CLASSIFICATION	7.233665645465E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999252800306	WITHOUT_CLASSIFICATION	7.471996936477887E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999558594576	WITHOUT_CLASSIFICATION	4.4140542471128134E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999993042033442	WITHOUT_CLASSIFICATION	6.957966558452586E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999966135031509	WITHOUT_CLASSIFICATION	3.3864968489305264E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996223728742	WITHOUT_CLASSIFICATION	3.776271258280305E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998156178033	WITHOUT_CLASSIFICATION	1.8438219663340725E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998907503826	WITHOUT_CLASSIFICATION	1.0924961725616998E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998633901169	WITHOUT_CLASSIFICATION	1.3660988304618672E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999996475658434	WITHOUT_CLASSIFICATION	3.5243415655284885E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999275073608	WITHOUT_CLASSIFICATION	7.249263923254259E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994746954528	WITHOUT_CLASSIFICATION	5.253045471368154E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999967388942588	WITHOUT_CLASSIFICATION	3.2611057411567324E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999975935698681	WITHOUT_CLASSIFICATION	2.406430131874955E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999743143749	WITHOUT_CLASSIFICATION	2.5685625181234814E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999988302983511	WITHOUT_CLASSIFICATION	1.1697016488832682E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994746954528	WITHOUT_CLASSIFICATION	5.253045471368154E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994444341024971	WITHOUT_CLASSIFICATION	5.555658975028943E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999366410042	WITHOUT_CLASSIFICATION	6.335899581162484E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999759485588	WITHOUT_CLASSIFICATION	2.4051441234084162E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999223249978	WITHOUT_CLASSIFICATION	7.767500219953367E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999884407653102	WITHOUT_CLASSIFICATION	1.1559234689662727E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999934317862	WITHOUT_CLASSIFICATION	6.568213795178538E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999960970084	WITHOUT_CLASSIFICATION	3.902991552098688E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999996275049222	WITHOUT_CLASSIFICATION	3.724950777975629E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999103178965	WITHOUT_CLASSIFICATION	8.968210363220248E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998143465012	WITHOUT_CLASSIFICATION	1.8565349881960394E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999996007877834	WITHOUT_CLASSIFICATION	3.99212216624947E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998655111361445	WITHOUT_CLASSIFICATION	1.3448886385544452E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999977547606	WITHOUT_CLASSIFICATION	2.245239482304621E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999999994083101	WITHOUT_CLASSIFICATION	5.9168990541944495E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999518931384	WITHOUT_CLASSIFICATION	4.810686162779045E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999502453947	WITHOUT_CLASSIFICATION	4.975460535226536E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999833600607	WITHOUT_CLASSIFICATION	1.6639939364889355E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999999991596461	WITHOUT_CLASSIFICATION	8.403538951884173E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999853610239526	WITHOUT_CLASSIFICATION	1.4638976047430165E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999799183541	WITHOUT_CLASSIFICATION	2.00816458572756E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999414791723	WITHOUT_CLASSIFICATION	5.852082776752963E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999757709434	WITHOUT_CLASSIFICATION	2.422905667304291E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999981440174	WITHOUT_CLASSIFICATION	1.8559825318102564E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999986799281	WITHOUT_CLASSIFICATION	1.320071947264401E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999991274846	WITHOUT_CLASSIFICATION	8.725152880369666E-10	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999997111843848	WITHOUT_CLASSIFICATION	2.888156151908371E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999741986224762	WITHOUT_CLASSIFICATION	2.580137752385954E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998259618935	WITHOUT_CLASSIFICATION	1.7403810650367255E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999988189218048	WITHOUT_CLASSIFICATION	1.1810781951708779E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999998902735999	WITHOUT_CLASSIFICATION	1.0972640014061522E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999613429663	WITHOUT_CLASSIFICATION	3.865703373894731E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999991936974119	WITHOUT_CLASSIFICATION	8.06302588152411E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999998025344774	WITHOUT_CLASSIFICATION	1.9746552267969496E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999976301174	WITHOUT_CLASSIFICATION	2.3698826129988175E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999834549684	WITHOUT_CLASSIFICATION	1.654503149511503E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998759404171	WITHOUT_CLASSIFICATION	1.240595829275115E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999966165546698	WITHOUT_CLASSIFICATION	3.3834453303667513E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999998062038468	WITHOUT_CLASSIFICATION	1.9379615326894246E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999902527816	WITHOUT_CLASSIFICATION	9.747218409138072E-9	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999752280727	WITHOUT_CLASSIFICATION	2.4771927258242387E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999732917418	WITHOUT_CLASSIFICATION	2.6708258225299683E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999732917418	WITHOUT_CLASSIFICATION	2.6708258225299683E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999881643493765	WITHOUT_CLASSIFICATION	1.1835650623532075E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999710031529	WITHOUT_CLASSIFICATION	2.8996847133886907E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999497221118	WITHOUT_CLASSIFICATION	5.0277888225392323E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.897082376251173	TEST	0.10291762374882703	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.999999745384476	WITHOUT_CLASSIFICATION	2.546155239888694E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.999999745384476	WITHOUT_CLASSIFICATION	2.546155239888694E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999983655029768	WITHOUT_CLASSIFICATION	1.6344970232767103E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999444090004	WITHOUT_CLASSIFICATION	5.5590999682523936E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999502440592302	WITHOUT_CLASSIFICATION	4.975594076979089E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999680248006881	WITHOUT_CLASSIFICATION	3.1975199311943324E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999355288066	WITHOUT_CLASSIFICATION	6.447119337179498E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999999218808301	WITHOUT_CLASSIFICATION	7.811916990720466E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999999094380286	WITHOUT_CLASSIFICATION	9.056197147487244E-8	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999474438035	WITHOUT_CLASSIFICATION	5.255619647467125E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999049482985821	WITHOUT_CLASSIFICATION	9.505170141781783E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997105980145	WITHOUT_CLASSIFICATION	2.894019854937549E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997105980145	WITHOUT_CLASSIFICATION	2.894019854937549E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999908970145873	WITHOUT_CLASSIFICATION	9.102985412674335E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999137240587	WITHOUT_CLASSIFICATION	8.627594130467981E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.999999466824478	WITHOUT_CLASSIFICATION	5.331755218823299E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999266865812408	WITHOUT_CLASSIFICATION	7.331341875916957E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999970465608554	WITHOUT_CLASSIFICATION	2.9534391446978832E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999699409076	WITHOUT_CLASSIFICATION	3.0059092425400706E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941608719857	WITHOUT_CLASSIFICATION	5.839128014345836E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999562743396	WITHOUT_CLASSIFICATION	4.3725660370267755E-8	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999998690026981	WITHOUT_CLASSIFICATION	1.3099730189671733E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999994837452042	WITHOUT_CLASSIFICATION	5.162547958795368E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999693645195	WITHOUT_CLASSIFICATION	3.063548041609812E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998143465012	WITHOUT_CLASSIFICATION	1.8565349881960394E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999716933005	WITHOUT_CLASSIFICATION	2.8306699465411928E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999705927405838	WITHOUT_CLASSIFICATION	2.9407259416133687E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999921030799	WITHOUT_CLASSIFICATION	7.89692013263547E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999997970950871	WITHOUT_CLASSIFICATION	2.0290491283362034E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999995718815138	WITHOUT_CLASSIFICATION	4.281184861882882E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999973021776979	WITHOUT_CLASSIFICATION	2.697822302063418E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999878781350258	WITHOUT_CLASSIFICATION	1.2121864974243948E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999106008018	WITHOUT_CLASSIFICATION	8.939919809958056E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999712543957	WITHOUT_CLASSIFICATION	2.8745604357025907E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999996113505303	WITHOUT_CLASSIFICATION	3.886494696632189E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999996113505303	WITHOUT_CLASSIFICATION	3.886494696632189E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995179216774	WITHOUT_CLASSIFICATION	4.820783225978533E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999997912195	WITHOUT_CLASSIFICATION	2.08780570793591E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999844380667771	WITHOUT_CLASSIFICATION	1.5561933222898507E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998962877933	WITHOUT_CLASSIFICATION	1.0371220678078454E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.999999889515319	WITHOUT_CLASSIFICATION	1.1048468101943317E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999764731426	WITHOUT_CLASSIFICATION	2.3526857440273634E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998964845814	WITHOUT_CLASSIFICATION	1.0351541865354804E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999984325908	WITHOUT_CLASSIFICATION	1.567409205835493E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998626394717	WITHOUT_CLASSIFICATION	1.3736052828813828E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999995642897354	WITHOUT_CLASSIFICATION	4.357102645715805E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991334959711	WITHOUT_CLASSIFICATION	8.665040287952905E-7	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999978663022112	WITHOUT_CLASSIFICATION	2.133697788697351E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999196350764	WITHOUT_CLASSIFICATION	8.036492369006299E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999788331946	WITHOUT_CLASSIFICATION	2.1166805376957307E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999629295176	WITHOUT_CLASSIFICATION	3.7070482258528466E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999917890847	WITHOUT_CLASSIFICATION	8.210915258989974E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999482653701	WITHOUT_CLASSIFICATION	5.1734629935436225E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999997220339336	WITHOUT_CLASSIFICATION	2.7796606640052506E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999995389458967	WITHOUT_CLASSIFICATION	4.6105410327039083E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999997372087218	WITHOUT_CLASSIFICATION	2.627912781547495E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998642685506	WITHOUT_CLASSIFICATION	1.357314493791784E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999994651036271	WITHOUT_CLASSIFICATION	5.348963728658484E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999918470507804	WITHOUT_CLASSIFICATION	8.1529492195985E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998264706469	WITHOUT_CLASSIFICATION	1.7352935315110184E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999934537721	WITHOUT_CLASSIFICATION	6.546227983433179E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999934537721	WITHOUT_CLASSIFICATION	6.546227983433179E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999990144021782	WITHOUT_CLASSIFICATION	9.855978217033198E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995669471843	WITHOUT_CLASSIFICATION	4.330528157714892E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999767281647	WITHOUT_CLASSIFICATION	2.327183537095048E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999790443167	WITHOUT_CLASSIFICATION	2.0955683285115827E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996840709184	WITHOUT_CLASSIFICATION	3.15929081594471E-7	TEST
