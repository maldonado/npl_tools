test out the optimizer:	WITHOUT_CLASSIFICATION	0.9987974564299378	WITHOUT_CLASSIFICATION	0.001202543570062204	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996833359994173	WITHOUT_CLASSIFICATION	3.166640005827869E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999903731668327	WITHOUT_CLASSIFICATION	9.626833167253866E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999933117721174	WITHOUT_CLASSIFICATION	6.688227882577295E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999933117721174	WITHOUT_CLASSIFICATION	6.688227882577295E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999738653575586	WITHOUT_CLASSIFICATION	2.6134642441463655E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999962238923211	WITHOUT_CLASSIFICATION	3.776107678909336E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999743766918673	WITHOUT_CLASSIFICATION	2.562330813270109E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999907210791035	WITHOUT_CLASSIFICATION	9.27892089663692E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999887351647758	WITHOUT_CLASSIFICATION	1.1264835224223369E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999887351647758	WITHOUT_CLASSIFICATION	1.1264835224223369E-5	TEST
long	WITHOUT_CLASSIFICATION	0.999984061981378	WITHOUT_CLASSIFICATION	1.5938018621981736E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999905981828067	WITHOUT_CLASSIFICATION	9.40181719323884E-6	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999679550713306	WITHOUT_CLASSIFICATION	3.2044928669342354E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999980353865723	WITHOUT_CLASSIFICATION	1.9646134277026633E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.99999563493102	WITHOUT_CLASSIFICATION	4.365068980115633E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999853985039926	WITHOUT_CLASSIFICATION	1.4601496007412705E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999763033876594	WITHOUT_CLASSIFICATION	2.3696612340541145E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999786353960066	WITHOUT_CLASSIFICATION	2.1364603993420353E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999852788104594	WITHOUT_CLASSIFICATION	1.4721189540582807E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999852788104594	WITHOUT_CLASSIFICATION	1.4721189540582807E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999730876221309	WITHOUT_CLASSIFICATION	2.6912377869155365E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.999985281399512	WITHOUT_CLASSIFICATION	1.4718600488034863E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999561762784981	WITHOUT_CLASSIFICATION	4.3823721501921844E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999487092643908	WITHOUT_CLASSIFICATION	5.129073560914855E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.999953427795315	WITHOUT_CLASSIFICATION	4.65722046848862E-5	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999993454001593	WITHOUT_CLASSIFICATION	6.545998407088269E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999332996689247	WITHOUT_CLASSIFICATION	6.670033107520971E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999865169942829	WITHOUT_CLASSIFICATION	1.3483005717168419E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999910764970028	WITHOUT_CLASSIFICATION	8.923502997177258E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999731123676765	WITHOUT_CLASSIFICATION	2.68876323235204E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999696167523795	WITHOUT_CLASSIFICATION	3.038324762049418E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996726525081766	WITHOUT_CLASSIFICATION	3.27347491823352E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999894788640459	WITHOUT_CLASSIFICATION	1.052113595420182E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999804280362595	WITHOUT_CLASSIFICATION	1.9571963740487306E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999712480767592	WITHOUT_CLASSIFICATION	2.8751923240802537E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613744464578	WITHOUT_CLASSIFICATION	3.862555354215891E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999902047856545	WITHOUT_CLASSIFICATION	9.795214345527291E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999509206409376	WITHOUT_CLASSIFICATION	4.907935906240559E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999857442480632	WITHOUT_CLASSIFICATION	1.42557519368905E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999857442480632	WITHOUT_CLASSIFICATION	1.42557519368905E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999902047856545	WITHOUT_CLASSIFICATION	9.795214345527291E-6	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9998380800841906	WITHOUT_CLASSIFICATION	1.619199158094393E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999652105973701	WITHOUT_CLASSIFICATION	3.478940262992901E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999847715312457	WITHOUT_CLASSIFICATION	1.5228468754448969E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999989784468066	WITHOUT_CLASSIFICATION	1.021553193315415E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999986502165364	WITHOUT_CLASSIFICATION	1.349783463562117E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9994056574394042	WITHOUT_CLASSIFICATION	5.943425605958492E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999205829622064	WITHOUT_CLASSIFICATION	7.941703779349835E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999939307395443	WITHOUT_CLASSIFICATION	6.06926045558138E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998934238575821	WITHOUT_CLASSIFICATION	1.0657614241793888E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999803117676824	WITHOUT_CLASSIFICATION	1.968823231751932E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999857442480632	WITHOUT_CLASSIFICATION	1.42557519368905E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999996341023452	WITHOUT_CLASSIFICATION	3.6589765479529305E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999948864100384	WITHOUT_CLASSIFICATION	5.113589961600866E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.999988582735378	WITHOUT_CLASSIFICATION	1.1417264621916623E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999925638610073	WITHOUT_CLASSIFICATION	7.4361389926441735E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999904161003118	WITHOUT_CLASSIFICATION	9.583899688094044E-6	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999905809686366	WITHOUT_CLASSIFICATION	9.419031363355654E-6	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999559905996404	WITHOUT_CLASSIFICATION	4.4009400359722864E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999805896870184	WITHOUT_CLASSIFICATION	1.9410312981585583E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999565757760907	WITHOUT_CLASSIFICATION	4.342422390943294E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999977209587324	WITHOUT_CLASSIFICATION	2.2790412677156852E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999968887941902	WITHOUT_CLASSIFICATION	3.111205809823486E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999573250845704	WITHOUT_CLASSIFICATION	4.267491542951099E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999902810167768	WITHOUT_CLASSIFICATION	9.718983223268815E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999901130046454	WITHOUT_CLASSIFICATION	9.886995354572432E-6	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999988961199389	WITHOUT_CLASSIFICATION	1.1038800611264048E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999724648946366	WITHOUT_CLASSIFICATION	2.7535105363449526E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999914517434864	WITHOUT_CLASSIFICATION	8.548256513581033E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998905991350744	WITHOUT_CLASSIFICATION	1.0940086492556909E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999992505299944	WITHOUT_CLASSIFICATION	7.494700054876318E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999935008050332	WITHOUT_CLASSIFICATION	6.4991949667298156E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9995569462387314	WITHOUT_CLASSIFICATION	4.430537612686041E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999745577762013	WITHOUT_CLASSIFICATION	2.5442223798724725E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.999976113665861	WITHOUT_CLASSIFICATION	2.3886334139022364E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999867666631634	WITHOUT_CLASSIFICATION	1.3233336836496307E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999745577762013	WITHOUT_CLASSIFICATION	2.5442223798724725E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997492023223	WITHOUT_CLASSIFICATION	2.5079767779090445E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999539427495443	WITHOUT_CLASSIFICATION	4.6057250455752366E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999819912364003	WITHOUT_CLASSIFICATION	1.8008763599676096E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999931959622264	WITHOUT_CLASSIFICATION	6.8040377736078555E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999816903667788	WITHOUT_CLASSIFICATION	1.830963322127071E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999816903667788	WITHOUT_CLASSIFICATION	1.830963322127071E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999828115737325	WITHOUT_CLASSIFICATION	1.7188426267493748E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999968659055724	WITHOUT_CLASSIFICATION	3.1340944276055644E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999845800640568	WITHOUT_CLASSIFICATION	1.541993594316279E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999696326087244	WITHOUT_CLASSIFICATION	3.0367391275608487E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999947189292063	WITHOUT_CLASSIFICATION	5.28107079373758E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999846564003088	WITHOUT_CLASSIFICATION	1.5343599691215616E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999832490835875	WITHOUT_CLASSIFICATION	1.6750916412541782E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999943436156883	WITHOUT_CLASSIFICATION	5.656384311702906E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999895482507116	WITHOUT_CLASSIFICATION	1.0451749288291344E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999986585622626	WITHOUT_CLASSIFICATION	1.3414377374109754E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999582710067408	WITHOUT_CLASSIFICATION	4.172899325914172E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999582710067408	WITHOUT_CLASSIFICATION	4.172899325914172E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999988273407322	WITHOUT_CLASSIFICATION	1.1726592677938627E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999956306928883	WITHOUT_CLASSIFICATION	4.369307111711397E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999982882034105	WITHOUT_CLASSIFICATION	1.711796589498905E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999582710067408	WITHOUT_CLASSIFICATION	4.172899325914172E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999988273407322	WITHOUT_CLASSIFICATION	1.1726592677938627E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999988273407322	WITHOUT_CLASSIFICATION	1.1726592677938627E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999837173355401	WITHOUT_CLASSIFICATION	1.6282664459956387E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999715563548457	WITHOUT_CLASSIFICATION	2.8443645154363457E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999987101216273	WITHOUT_CLASSIFICATION	1.2898783726966282E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999626436105962	WITHOUT_CLASSIFICATION	3.735638940382914E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999838921563687	WITHOUT_CLASSIFICATION	1.610784363129639E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999838921563687	WITHOUT_CLASSIFICATION	1.610784363129639E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999987133089701	WITHOUT_CLASSIFICATION	1.2866910299008901E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999974768473642	WITHOUT_CLASSIFICATION	2.523152635803473E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999772337212707	WITHOUT_CLASSIFICATION	2.2766278729337247E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999902568639747	WITHOUT_CLASSIFICATION	9.743136025321367E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999902568639747	WITHOUT_CLASSIFICATION	9.743136025321367E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999696910949761	WITHOUT_CLASSIFICATION	3.0308905023768826E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99997479921469	WITHOUT_CLASSIFICATION	2.52007853100066E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994645010366514	WITHOUT_CLASSIFICATION	5.354989633486511E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999819311697808	WITHOUT_CLASSIFICATION	1.8068830219142078E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9990684263296543	WITHOUT_CLASSIFICATION	9.315736703457493E-4	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999914226091373	WITHOUT_CLASSIFICATION	8.577390862711139E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999956322180228	WITHOUT_CLASSIFICATION	4.3677819771986915E-5	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999299769069451	WITHOUT_CLASSIFICATION	7.002309305492255E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994645010366514	WITHOUT_CLASSIFICATION	5.354989633486511E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999337910259498	WITHOUT_CLASSIFICATION	6.620897405020143E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999871778235817	WITHOUT_CLASSIFICATION	1.2822176418275832E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999871778235817	WITHOUT_CLASSIFICATION	1.2822176418275832E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999056591594293	WITHOUT_CLASSIFICATION	9.4340840570638E-5	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9995990603231367	WITHOUT_CLASSIFICATION	4.0093967686324357E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999718936878129	WITHOUT_CLASSIFICATION	2.8106312187088004E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999816075188596	WITHOUT_CLASSIFICATION	1.8392481140398626E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999586372924675	WITHOUT_CLASSIFICATION	4.136270753252211E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.999933142262878	WITHOUT_CLASSIFICATION	6.685773712195683E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999191928288446	WITHOUT_CLASSIFICATION	8.080717115555066E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999905152579058	WITHOUT_CLASSIFICATION	9.484742094202809E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999937754864904	WITHOUT_CLASSIFICATION	6.2245135096827865E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985101799872	WITHOUT_CLASSIFICATION	1.4898200128399667E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999985101799872	WITHOUT_CLASSIFICATION	1.4898200128399667E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9987974564299378	WITHOUT_CLASSIFICATION	0.001202543570062204	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999990888467299	WITHOUT_CLASSIFICATION	9.11153270091873E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999982435395959	WITHOUT_CLASSIFICATION	1.7564604041064336E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999984349636347	WITHOUT_CLASSIFICATION	1.565036365295148E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999862342503546	WITHOUT_CLASSIFICATION	1.376574964552456E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999835035652994	WITHOUT_CLASSIFICATION	1.649643470064559E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999392852484583	WITHOUT_CLASSIFICATION	6.071475154160756E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999769322039945	WITHOUT_CLASSIFICATION	2.3067796005391838E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999853089075541	WITHOUT_CLASSIFICATION	1.469109244579614E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999857209109341	WITHOUT_CLASSIFICATION	1.4279089065990875E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999835035652994	WITHOUT_CLASSIFICATION	1.649643470064559E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997094955323217	WITHOUT_CLASSIFICATION	2.905044676783451E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999837242582519	WITHOUT_CLASSIFICATION	1.627574174810434E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999849210567815	WITHOUT_CLASSIFICATION	1.5078943218471855E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999854537603172	WITHOUT_CLASSIFICATION	1.4546239682806047E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999899493690773	WITHOUT_CLASSIFICATION	1.0050630922754728E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999933117721174	WITHOUT_CLASSIFICATION	6.688227882577295E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999826804215405	WITHOUT_CLASSIFICATION	1.731957845945869E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999877473551746	WITHOUT_CLASSIFICATION	1.2252644825343605E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999877164912742	WITHOUT_CLASSIFICATION	1.2283508725961221E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999850804779307	WITHOUT_CLASSIFICATION	1.4919522069282405E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999852769372413	WITHOUT_CLASSIFICATION	1.4723062758669041E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999743621705705	WITHOUT_CLASSIFICATION	2.563782942961818E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999758051500087	WITHOUT_CLASSIFICATION	2.4194849991194148E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999939293541376	WITHOUT_CLASSIFICATION	6.070645862388024E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999833215810495	WITHOUT_CLASSIFICATION	1.667841895047713E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.999984491820271	WITHOUT_CLASSIFICATION	1.5508179728993852E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999853089075541	WITHOUT_CLASSIFICATION	1.469109244579614E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999852769372413	WITHOUT_CLASSIFICATION	1.4723062758669041E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999738653575586	WITHOUT_CLASSIFICATION	2.6134642441463655E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999763795723351	WITHOUT_CLASSIFICATION	2.3620427664953924E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999948240994074	WITHOUT_CLASSIFICATION	5.175900592597801E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999698612613482	WITHOUT_CLASSIFICATION	3.013873865172135E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999853879575117	WITHOUT_CLASSIFICATION	1.461204248831151E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999693807762471	WITHOUT_CLASSIFICATION	3.061922375281694E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999854143467326	WITHOUT_CLASSIFICATION	1.4585653267448354E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9997000148848769	WITHOUT_CLASSIFICATION	2.9998511512305406E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999181496741343	WITHOUT_CLASSIFICATION	8.185032586575643E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999181496741343	WITHOUT_CLASSIFICATION	8.185032586575643E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999733025114671	WITHOUT_CLASSIFICATION	2.6697488532927696E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999928827498349	WITHOUT_CLASSIFICATION	7.117250165106347E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997320573538608	WITHOUT_CLASSIFICATION	2.6794264613924776E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999639338748164	WITHOUT_CLASSIFICATION	3.6066125183551876E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999973323138929	WITHOUT_CLASSIFICATION	2.6676861070985964E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999777695946485	WITHOUT_CLASSIFICATION	2.2230405351459455E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999832142392134	WITHOUT_CLASSIFICATION	1.678576078650223E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999962238923211	WITHOUT_CLASSIFICATION	3.776107678909336E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999973183452485	WITHOUT_CLASSIFICATION	2.68165475148583E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999973183452485	WITHOUT_CLASSIFICATION	2.68165475148583E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999938368325132	WITHOUT_CLASSIFICATION	6.163167486784799E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.999982927217656	WITHOUT_CLASSIFICATION	1.707278234392461E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999938368325132	WITHOUT_CLASSIFICATION	6.163167486784799E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999868922928142	WITHOUT_CLASSIFICATION	1.3107707185772007E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999865867607267	WITHOUT_CLASSIFICATION	1.3413239273267065E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999935925926876	WITHOUT_CLASSIFICATION	6.407407312434221E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999853089075541	WITHOUT_CLASSIFICATION	1.469109244579614E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999852769372413	WITHOUT_CLASSIFICATION	1.4723062758669041E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999852769372413	WITHOUT_CLASSIFICATION	1.4723062758669041E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999936106493228	WITHOUT_CLASSIFICATION	6.389350677216102E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999717173172504	WITHOUT_CLASSIFICATION	2.8282682749518154E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999789237858033	WITHOUT_CLASSIFICATION	2.1076214196714683E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999907210791035	WITHOUT_CLASSIFICATION	9.27892089663692E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999907210791035	WITHOUT_CLASSIFICATION	9.27892089663692E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999803091686316	WITHOUT_CLASSIFICATION	1.9690831368394015E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999893704886921	WITHOUT_CLASSIFICATION	1.0629511307944548E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999723831370911	WITHOUT_CLASSIFICATION	2.7616862908901832E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999863395368238	WITHOUT_CLASSIFICATION	1.366046317618971E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999892307673033	WITHOUT_CLASSIFICATION	1.07692326968412E-5	TEST
short	WITHOUT_CLASSIFICATION	0.999985410342877	WITHOUT_CLASSIFICATION	1.458965712298154E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999887351647758	WITHOUT_CLASSIFICATION	1.1264835224223369E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999853089869415	WITHOUT_CLASSIFICATION	1.4691013058372458E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999853089869415	WITHOUT_CLASSIFICATION	1.4691013058372458E-5	TEST
long	WITHOUT_CLASSIFICATION	0.999984061981378	WITHOUT_CLASSIFICATION	1.5938018621981736E-5	TEST
long	WITHOUT_CLASSIFICATION	0.999984061981378	WITHOUT_CLASSIFICATION	1.5938018621981736E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999913250748111	WITHOUT_CLASSIFICATION	8.674925188835444E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999913250748111	WITHOUT_CLASSIFICATION	8.674925188835444E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999625947821643	WITHOUT_CLASSIFICATION	3.740521783568489E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999625947821643	WITHOUT_CLASSIFICATION	3.740521783568489E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999907210791035	WITHOUT_CLASSIFICATION	9.27892089663692E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999887351647758	WITHOUT_CLASSIFICATION	1.1264835224223369E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999853089869415	WITHOUT_CLASSIFICATION	1.4691013058372458E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999853089869415	WITHOUT_CLASSIFICATION	1.4691013058372458E-5	TEST
long	WITHOUT_CLASSIFICATION	0.999984061981378	WITHOUT_CLASSIFICATION	1.5938018621981736E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999913250748111	WITHOUT_CLASSIFICATION	8.674925188835444E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999913250748111	WITHOUT_CLASSIFICATION	8.674925188835444E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999625947821643	WITHOUT_CLASSIFICATION	3.740521783568489E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999754103416479	WITHOUT_CLASSIFICATION	2.4589658352016665E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999919542816921	WITHOUT_CLASSIFICATION	8.045718307857603E-6	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999924031849821	WITHOUT_CLASSIFICATION	7.59681501798422E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999522885465736	WITHOUT_CLASSIFICATION	4.771145342632718E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999905096429034	WITHOUT_CLASSIFICATION	9.490357096573928E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.999985282946911	WITHOUT_CLASSIFICATION	1.4717053088889469E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999912967385955	WITHOUT_CLASSIFICATION	8.703261404435153E-6	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999991578454697	WITHOUT_CLASSIFICATION	8.421545302999872E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999229938998566	WITHOUT_CLASSIFICATION	7.700610014343462E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999763543371781	WITHOUT_CLASSIFICATION	2.364566282183602E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999672043739105	WITHOUT_CLASSIFICATION	3.279562608952566E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999763955967989	WITHOUT_CLASSIFICATION	2.3604403201123334E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999828115737325	WITHOUT_CLASSIFICATION	1.7188426267493748E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999985282946911	WITHOUT_CLASSIFICATION	1.4717053088889469E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999985282946911	WITHOUT_CLASSIFICATION	1.4717053088889469E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999985282946911	WITHOUT_CLASSIFICATION	1.4717053088889469E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998640876137648	WITHOUT_CLASSIFICATION	1.3591238623518643E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999683200974866	WITHOUT_CLASSIFICATION	3.1679902513320235E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999683200974866	WITHOUT_CLASSIFICATION	3.1679902513320235E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999722105190451	WITHOUT_CLASSIFICATION	2.778948095495194E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999880453015005	WITHOUT_CLASSIFICATION	1.1954698499464787E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998065955202	WITHOUT_CLASSIFICATION	1.9340447979986856E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999799329199514	WITHOUT_CLASSIFICATION	2.0067080048665694E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999799329199514	WITHOUT_CLASSIFICATION	2.0067080048665694E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.99999563493102	WITHOUT_CLASSIFICATION	4.365068980115633E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999973953163158	WITHOUT_CLASSIFICATION	2.6046836841257034E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999973953163158	WITHOUT_CLASSIFICATION	2.6046836841257034E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999661328240845	WITHOUT_CLASSIFICATION	3.3867175915564253E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999749292006578	WITHOUT_CLASSIFICATION	2.507079934223658E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999786353960066	WITHOUT_CLASSIFICATION	2.1364603993420353E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9958251960371577	WITHOUT_CLASSIFICATION	0.004174803962842353	TEST
ID	WITHOUT_CLASSIFICATION	0.9999853985039926	WITHOUT_CLASSIFICATION	1.4601496007412705E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999863125737456	WITHOUT_CLASSIFICATION	1.3687426254492084E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999552565296044	WITHOUT_CLASSIFICATION	4.474347039563601E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999417192027677	WITHOUT_CLASSIFICATION	5.828079723231072E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9998989058700286	WITHOUT_CLASSIFICATION	1.0109412997138034E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999487092643908	WITHOUT_CLASSIFICATION	5.129073560914855E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999989144250473	WITHOUT_CLASSIFICATION	1.0855749526174076E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999852752891385	WITHOUT_CLASSIFICATION	1.4724710861516317E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999982244618662	WITHOUT_CLASSIFICATION	1.775538133800582E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999982250378811	WITHOUT_CLASSIFICATION	1.7749621188899102E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999852971827891	WITHOUT_CLASSIFICATION	1.4702817211011292E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999786353960066	WITHOUT_CLASSIFICATION	2.1364603993420353E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999887644458862	WITHOUT_CLASSIFICATION	1.1235554113663863E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999828956046015	WITHOUT_CLASSIFICATION	1.7104395398497443E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999853035304137	WITHOUT_CLASSIFICATION	1.4696469586245314E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999852971827891	WITHOUT_CLASSIFICATION	1.4702817211011292E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999887644458862	WITHOUT_CLASSIFICATION	1.1235554113663863E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999853035304137	WITHOUT_CLASSIFICATION	1.4696469586245314E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999246066610669	WITHOUT_CLASSIFICATION	7.53933389331568E-5	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999246066610669	WITHOUT_CLASSIFICATION	7.53933389331568E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999852788104594	WITHOUT_CLASSIFICATION	1.4721189540582807E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999844613265766	WITHOUT_CLASSIFICATION	1.553867342336796E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999832724836883	WITHOUT_CLASSIFICATION	1.6727516311690492E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999677561050682	WITHOUT_CLASSIFICATION	3.2243894931797994E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999336832270532	WITHOUT_CLASSIFICATION	6.631677294672773E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999833494408804	WITHOUT_CLASSIFICATION	1.6650559119682148E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999693077015496	WITHOUT_CLASSIFICATION	3.0692298450353675E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999477561442848	WITHOUT_CLASSIFICATION	5.224385571537963E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999960297685802	WITHOUT_CLASSIFICATION	3.9702314197589655E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999693077015496	WITHOUT_CLASSIFICATION	3.0692298450353675E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.999985281399512	WITHOUT_CLASSIFICATION	1.4718600488034863E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999887404163068	WITHOUT_CLASSIFICATION	1.1259583693253645E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999852769354396	WITHOUT_CLASSIFICATION	1.4723064560464453E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999852971827891	WITHOUT_CLASSIFICATION	1.4702817211011292E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999784001132485	WITHOUT_CLASSIFICATION	2.159988675151658E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999921359724426	WITHOUT_CLASSIFICATION	7.864027557367397E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9995388446352131	WITHOUT_CLASSIFICATION	4.6115536478687766E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999905053237006	WITHOUT_CLASSIFICATION	9.49467629940404E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999525196967654	WITHOUT_CLASSIFICATION	4.748030323459399E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999976219354557	WITHOUT_CLASSIFICATION	2.378064544352813E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999899481653976	WITHOUT_CLASSIFICATION	1.005183460240994E-4	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999929607680178	WITHOUT_CLASSIFICATION	7.039231982140186E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999823947049038	WITHOUT_CLASSIFICATION	1.7605295096207624E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999507958808647	WITHOUT_CLASSIFICATION	4.920411913529012E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999487092643908	WITHOUT_CLASSIFICATION	5.129073560914855E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999838476527698	WITHOUT_CLASSIFICATION	1.6152347230154674E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999613714521325	WITHOUT_CLASSIFICATION	3.862854786751128E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999767920753921	WITHOUT_CLASSIFICATION	2.3207924607896885E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999921053514969	WITHOUT_CLASSIFICATION	7.89464850313792E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.999992137200417	WITHOUT_CLASSIFICATION	7.862799583071564E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999719089827267	WITHOUT_CLASSIFICATION	2.809101727322775E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999781750983292	WITHOUT_CLASSIFICATION	2.1824901670835482E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999964852591846	WITHOUT_CLASSIFICATION	3.514740815409441E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999758439869663	WITHOUT_CLASSIFICATION	2.415601303368006E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999827026628051	WITHOUT_CLASSIFICATION	1.7297337194896148E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999931903449	WITHOUT_CLASSIFICATION	6.809655099985725E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999931903449	WITHOUT_CLASSIFICATION	6.809655099985725E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999670126131746	WITHOUT_CLASSIFICATION	3.298738682550363E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999787362815099	WITHOUT_CLASSIFICATION	2.126371849010248E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999946310485602	WITHOUT_CLASSIFICATION	5.36895143965934E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999670152066812	WITHOUT_CLASSIFICATION	3.29847933187418E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999670229994769	WITHOUT_CLASSIFICATION	3.297700052301731E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999688230375373	WITHOUT_CLASSIFICATION	3.117696246261824E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999754037786892	WITHOUT_CLASSIFICATION	2.4596221310797226E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9994690785839777	WITHOUT_CLASSIFICATION	5.309214160223007E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999505849599892	WITHOUT_CLASSIFICATION	4.941504001070514E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999922932124599	WITHOUT_CLASSIFICATION	7.706787540154852E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.999982397546516	WITHOUT_CLASSIFICATION	1.760245348406789E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999875551232107	WITHOUT_CLASSIFICATION	1.2444876789265003E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999841964288188	WITHOUT_CLASSIFICATION	1.5803571181188746E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999824538721502	WITHOUT_CLASSIFICATION	1.7546127849756848E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999715422858791	WITHOUT_CLASSIFICATION	2.845771412083195E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999933321212499	WITHOUT_CLASSIFICATION	6.66787875010341E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734511270416	WITHOUT_CLASSIFICATION	2.6548872958394137E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999992810629801	WITHOUT_CLASSIFICATION	7.1893701989593045E-6	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719821535722	WITHOUT_CLASSIFICATION	2.8017846427815647E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999913538284784	WITHOUT_CLASSIFICATION	8.646171521695283E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999974211853514	WITHOUT_CLASSIFICATION	2.578814648472038E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999386621707019	WITHOUT_CLASSIFICATION	6.13378292981556E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999933321212499	WITHOUT_CLASSIFICATION	6.66787875010341E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999710127524685	WITHOUT_CLASSIFICATION	2.8987247531487277E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999758447987344	WITHOUT_CLASSIFICATION	2.415520126568433E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999758447987344	WITHOUT_CLASSIFICATION	2.415520126568433E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999516211037585	WITHOUT_CLASSIFICATION	4.837889624153121E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999557936327017	WITHOUT_CLASSIFICATION	4.4206367298208067E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999992810629801	WITHOUT_CLASSIFICATION	7.1893701989593045E-6	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999859005761111	WITHOUT_CLASSIFICATION	1.4099423888886731E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999849152250037	WITHOUT_CLASSIFICATION	1.5084774996325972E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999845980137245	WITHOUT_CLASSIFICATION	1.5401986275446357E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999880747610497	WITHOUT_CLASSIFICATION	1.1925238950405986E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999880747610497	WITHOUT_CLASSIFICATION	1.1925238950405986E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999710579024491	WITHOUT_CLASSIFICATION	2.8942097550867298E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999822514070658	WITHOUT_CLASSIFICATION	1.774859293428604E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999822514070658	WITHOUT_CLASSIFICATION	1.774859293428604E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999758439869663	WITHOUT_CLASSIFICATION	2.415601303368006E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999965298469976	WITHOUT_CLASSIFICATION	3.470153002401921E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998848142535268	WITHOUT_CLASSIFICATION	1.1518574647307616E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999919893658249	WITHOUT_CLASSIFICATION	8.010634175129516E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998848142535268	WITHOUT_CLASSIFICATION	1.1518574647307616E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999919893658249	WITHOUT_CLASSIFICATION	8.010634175129516E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998936619621099	WITHOUT_CLASSIFICATION	1.0633803788999368E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999829258053037	WITHOUT_CLASSIFICATION	1.707419469630927E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999979887381766	WITHOUT_CLASSIFICATION	2.0112618235088366E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999914032561343	WITHOUT_CLASSIFICATION	8.596743865717054E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999644707110084	WITHOUT_CLASSIFICATION	3.5529288991697765E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9996175480406861	WITHOUT_CLASSIFICATION	3.8245195931396216E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998730275902504	WITHOUT_CLASSIFICATION	1.2697240974957736E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998730275902504	WITHOUT_CLASSIFICATION	1.2697240974957736E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999713085185657	WITHOUT_CLASSIFICATION	2.8691481434266653E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999802479155258	WITHOUT_CLASSIFICATION	1.975208447422702E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999869228194375	WITHOUT_CLASSIFICATION	1.307718056252261E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999997158877148	WITHOUT_CLASSIFICATION	2.841122852038227E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999886260773947	WITHOUT_CLASSIFICATION	1.137392260528309E-5	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999832814907801	WITHOUT_CLASSIFICATION	1.6718509219858176E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999832814907801	WITHOUT_CLASSIFICATION	1.6718509219858176E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999930877341726	WITHOUT_CLASSIFICATION	6.912265827404349E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999930877341726	WITHOUT_CLASSIFICATION	6.912265827404349E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999976930084185	WITHOUT_CLASSIFICATION	2.3069915815904467E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998936619621099	WITHOUT_CLASSIFICATION	1.0633803788999368E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999802569337771	WITHOUT_CLASSIFICATION	1.9743066222905334E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998506309969699	WITHOUT_CLASSIFICATION	1.49369003030199E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997687985100976	WITHOUT_CLASSIFICATION	2.312014899023941E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999644114626063	WITHOUT_CLASSIFICATION	3.558853739368324E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994386278544849	WITHOUT_CLASSIFICATION	5.613721455151178E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998936619621099	WITHOUT_CLASSIFICATION	1.0633803788999368E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999644114626063	WITHOUT_CLASSIFICATION	3.558853739368324E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994386278544849	WITHOUT_CLASSIFICATION	5.613721455151178E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999546226261696	WITHOUT_CLASSIFICATION	4.537737383025297E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999826395937398	WITHOUT_CLASSIFICATION	1.736040626011135E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999886925686756	WITHOUT_CLASSIFICATION	1.1307431324348705E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998936619621099	WITHOUT_CLASSIFICATION	1.0633803788999368E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998936619621099	WITHOUT_CLASSIFICATION	1.0633803788999368E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.999990489551181	WITHOUT_CLASSIFICATION	9.510448818970194E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999881969681333	WITHOUT_CLASSIFICATION	1.1803031866631126E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999961334812616	WITHOUT_CLASSIFICATION	3.866518738479728E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999804280362595	WITHOUT_CLASSIFICATION	1.9571963740487306E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999936702164289	WITHOUT_CLASSIFICATION	6.3297835710578114E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999974537655204	WITHOUT_CLASSIFICATION	2.546234479602455E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997895771733121	WITHOUT_CLASSIFICATION	2.1042282668797075E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999849625729027	WITHOUT_CLASSIFICATION	1.5037427097357938E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999915492701577	WITHOUT_CLASSIFICATION	8.450729842353598E-6	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999334064228477	WITHOUT_CLASSIFICATION	6.659357715236283E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999858034643935	WITHOUT_CLASSIFICATION	1.4196535606532627E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999871872659887	WITHOUT_CLASSIFICATION	1.2812734011353446E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999742333881408	WITHOUT_CLASSIFICATION	2.576661185915179E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999532281717024	WITHOUT_CLASSIFICATION	4.6771828297499304E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612572577771	WITHOUT_CLASSIFICATION	3.874274222290159E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997868677662037	WITHOUT_CLASSIFICATION	2.1313223379625638E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999804280362595	WITHOUT_CLASSIFICATION	1.9571963740487306E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999719347753702	WITHOUT_CLASSIFICATION	2.8065224629718583E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.999973448266418	WITHOUT_CLASSIFICATION	2.655173358197705E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999854689327822	WITHOUT_CLASSIFICATION	1.4531067217892829E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999387707148943	WITHOUT_CLASSIFICATION	6.122928510562178E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999822563329448	WITHOUT_CLASSIFICATION	1.774366705510272E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999822563329448	WITHOUT_CLASSIFICATION	1.774366705510272E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999804280362595	WITHOUT_CLASSIFICATION	1.9571963740487306E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999813575999295	WITHOUT_CLASSIFICATION	1.8642400070535218E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9993415679211862	WITHOUT_CLASSIFICATION	6.584320788138177E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9992785791701637	WITHOUT_CLASSIFICATION	7.214208298363397E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999902432987502	WITHOUT_CLASSIFICATION	9.756701249781243E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999852855903765	WITHOUT_CLASSIFICATION	1.471440962356252E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999947765807238	WITHOUT_CLASSIFICATION	5.223419276180458E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999978371993216	WITHOUT_CLASSIFICATION	2.1628006783949925E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999983380132963	WITHOUT_CLASSIFICATION	1.6619867036351352E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999722804008109	WITHOUT_CLASSIFICATION	2.7719599189238086E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999370372453502	WITHOUT_CLASSIFICATION	6.29627546497449E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999706997750243	WITHOUT_CLASSIFICATION	2.9300224975614724E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999711661912806	WITHOUT_CLASSIFICATION	2.8833808719409958E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999955694065304	WITHOUT_CLASSIFICATION	4.430593469528965E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878824413775	WITHOUT_CLASSIFICATION	1.2117558622401972E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999630628014496	WITHOUT_CLASSIFICATION	3.6937198550339E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999993861202202	WITHOUT_CLASSIFICATION	6.138797797912462E-6	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999943447330745	WITHOUT_CLASSIFICATION	5.655266925571217E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858666132239	WITHOUT_CLASSIFICATION	1.413338677615566E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999551726506415	WITHOUT_CLASSIFICATION	4.482734935862038E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999691718061745	WITHOUT_CLASSIFICATION	3.082819382560681E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999969670146681	WITHOUT_CLASSIFICATION	3.0329853317631E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831956530665	WITHOUT_CLASSIFICATION	1.6804346933493666E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830303251732	WITHOUT_CLASSIFICATION	1.6969674826794264E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999728939175879	WITHOUT_CLASSIFICATION	2.7106082412146105E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962271306959	WITHOUT_CLASSIFICATION	3.772869304097672E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999782954992344	WITHOUT_CLASSIFICATION	2.170450076555697E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999737288009773	WITHOUT_CLASSIFICATION	2.6271199022605243E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973849317977	WITHOUT_CLASSIFICATION	2.615068202302694E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761847053562	WITHOUT_CLASSIFICATION	2.3815294643788377E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729465964617	WITHOUT_CLASSIFICATION	2.7053403538268112E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817405553749	WITHOUT_CLASSIFICATION	1.825944462501663E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718022243393	WITHOUT_CLASSIFICATION	2.8197775660707072E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718500558467	WITHOUT_CLASSIFICATION	2.8149944153357802E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999667499663714	WITHOUT_CLASSIFICATION	3.325003362872243E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612769800881	WITHOUT_CLASSIFICATION	3.872301991196149E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999857323930326	WITHOUT_CLASSIFICATION	1.4267606967407454E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899637427714	WITHOUT_CLASSIFICATION	1.0036257228689585E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999990273427687	WITHOUT_CLASSIFICATION	9.726572312818144E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998314538751442	WITHOUT_CLASSIFICATION	1.6854612485592185E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999838195582407	WITHOUT_CLASSIFICATION	1.618044175932434E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999838695176146	WITHOUT_CLASSIFICATION	1.6130482385447376E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999993751110183	WITHOUT_CLASSIFICATION	6.248889817031719E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999670240461339	WITHOUT_CLASSIFICATION	3.297595386615211E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999815194507115	WITHOUT_CLASSIFICATION	1.8480549288451566E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999853692480042	WITHOUT_CLASSIFICATION	1.4630751995702813E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999957717289721	WITHOUT_CLASSIFICATION	4.228271027948058E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999893594877134	WITHOUT_CLASSIFICATION	1.0640512286672931E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999733202677803	WITHOUT_CLASSIFICATION	2.667973221961262E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999877611857267	WITHOUT_CLASSIFICATION	1.2238814273341381E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678575957586	WITHOUT_CLASSIFICATION	3.214240424146805E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702370007458	WITHOUT_CLASSIFICATION	2.9762999254209844E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925999624345	WITHOUT_CLASSIFICATION	7.400037565438703E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679006431316	WITHOUT_CLASSIFICATION	3.209935686842537E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998908709115353	WITHOUT_CLASSIFICATION	1.0912908846474188E-4	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999659182067704	WITHOUT_CLASSIFICATION	3.4081793229550113E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999855942896564	WITHOUT_CLASSIFICATION	1.4405710343643895E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999808156302751	WITHOUT_CLASSIFICATION	1.9184369724903963E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580866411969	WITHOUT_CLASSIFICATION	4.19133588031642E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999601950168493	WITHOUT_CLASSIFICATION	3.980498315066697E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999708699912824	WITHOUT_CLASSIFICATION	2.913000871763554E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999685048774533	WITHOUT_CLASSIFICATION	3.149512254667252E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999870744972567	WITHOUT_CLASSIFICATION	1.2925502743400283E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999492233220045	WITHOUT_CLASSIFICATION	5.077667799538038E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999760681878117	WITHOUT_CLASSIFICATION	2.393181218824943E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998987572235577	WITHOUT_CLASSIFICATION	1.0124277644221711E-4	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999849007554554	WITHOUT_CLASSIFICATION	1.5099244544583479E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998314538751442	WITHOUT_CLASSIFICATION	1.6854612485592185E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999892663204594	WITHOUT_CLASSIFICATION	1.0733679540655726E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999982202553765	WITHOUT_CLASSIFICATION	1.7797446235016995E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999835700245461	WITHOUT_CLASSIFICATION	1.642997545391059E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899637427714	WITHOUT_CLASSIFICATION	1.0036257228689585E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999860786592745	WITHOUT_CLASSIFICATION	1.3921340725597323E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998908709115353	WITHOUT_CLASSIFICATION	1.0912908846474188E-4	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999632374370856	WITHOUT_CLASSIFICATION	3.6762562914430256E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999677307956766	WITHOUT_CLASSIFICATION	3.226920432353563E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999290707995169	WITHOUT_CLASSIFICATION	7.092920048310498E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999613390528511	WITHOUT_CLASSIFICATION	3.866094714890369E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999963167074018	WITHOUT_CLASSIFICATION	3.683292598205536E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999726287405931	WITHOUT_CLASSIFICATION	2.73712594068026E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999651485539586	WITHOUT_CLASSIFICATION	3.4851446041331165E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999850007172446	WITHOUT_CLASSIFICATION	1.4999282755344846E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995599930575698	WITHOUT_CLASSIFICATION	4.4000694243015144E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999731952011605	WITHOUT_CLASSIFICATION	2.6804798839535045E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999502054981458	WITHOUT_CLASSIFICATION	4.97945018541073E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899637427714	WITHOUT_CLASSIFICATION	1.0036257228689585E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999756274180249	WITHOUT_CLASSIFICATION	2.437258197508103E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999280471977059	WITHOUT_CLASSIFICATION	7.195280229420508E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999837381313345	WITHOUT_CLASSIFICATION	1.6261868665560645E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999986442547731	WITHOUT_CLASSIFICATION	1.3557452268976882E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999887846924836	WITHOUT_CLASSIFICATION	1.1215307516301964E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999853673345487	WITHOUT_CLASSIFICATION	1.4632665451173042E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999296283182255	WITHOUT_CLASSIFICATION	7.037168177441879E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999887435523179	WITHOUT_CLASSIFICATION	1.1256447682140986E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999925377190451	WITHOUT_CLASSIFICATION	7.462280954955977E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999568720904732	WITHOUT_CLASSIFICATION	4.312790952678032E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999827734009032	WITHOUT_CLASSIFICATION	1.7226599096748787E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999914907782557	WITHOUT_CLASSIFICATION	8.509221744321507E-6	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999914907782557	WITHOUT_CLASSIFICATION	8.509221744321507E-6	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899637427714	WITHOUT_CLASSIFICATION	1.0036257228689585E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998314538751442	WITHOUT_CLASSIFICATION	1.6854612485592185E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999386149525364	WITHOUT_CLASSIFICATION	6.138504746352825E-5	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999996607305439	WITHOUT_CLASSIFICATION	3.392694561006983E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9989530037647312	WITHOUT_CLASSIFICATION	0.0010469962352688154	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999632546761223	WITHOUT_CLASSIFICATION	3.6745323877714864E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999632694879482	WITHOUT_CLASSIFICATION	3.673051205180506E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999632694879482	WITHOUT_CLASSIFICATION	3.673051205180506E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998314538751442	WITHOUT_CLASSIFICATION	1.6854612485592185E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999823961834468	WITHOUT_CLASSIFICATION	1.760381655319371E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999986442547731	WITHOUT_CLASSIFICATION	1.3557452268976882E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999737058150956	WITHOUT_CLASSIFICATION	2.6294184904394624E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999837381313345	WITHOUT_CLASSIFICATION	1.6261868665560645E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999624723597845	WITHOUT_CLASSIFICATION	3.7527640215537954E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9989604513024741	WITHOUT_CLASSIFICATION	0.00103954869752586	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999286100691236	WITHOUT_CLASSIFICATION	7.138993087637414E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999290707995169	WITHOUT_CLASSIFICATION	7.092920048310498E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999613390528511	WITHOUT_CLASSIFICATION	3.866094714890369E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999963167074018	WITHOUT_CLASSIFICATION	3.683292598205536E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999869987227626	WITHOUT_CLASSIFICATION	1.3001277237330716E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999822721604525	WITHOUT_CLASSIFICATION	1.7727839547452366E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999718782520285	WITHOUT_CLASSIFICATION	2.8121747971547357E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999837381313345	WITHOUT_CLASSIFICATION	1.6261868665560645E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999624723597845	WITHOUT_CLASSIFICATION	3.7527640215537954E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998314538751442	WITHOUT_CLASSIFICATION	1.6854612485592185E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999726287405931	WITHOUT_CLASSIFICATION	2.73712594068026E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999651485539586	WITHOUT_CLASSIFICATION	3.4851446041331165E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999850007172446	WITHOUT_CLASSIFICATION	1.4999282755344846E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949551782531	WITHOUT_CLASSIFICATION	5.044821746952034E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952705996245	WITHOUT_CLASSIFICATION	4.7294003755245414E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999720059995819	WITHOUT_CLASSIFICATION	2.799400041812307E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999777206875027	WITHOUT_CLASSIFICATION	2.2279312497241576E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999625868095724	WITHOUT_CLASSIFICATION	3.7413190427604074E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999387638895318	WITHOUT_CLASSIFICATION	6.12361104681323E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998799022700702	WITHOUT_CLASSIFICATION	1.2009772992985442E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999533337552186	WITHOUT_CLASSIFICATION	4.6666244781395427E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999528482627339	WITHOUT_CLASSIFICATION	4.7151737266150355E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761847053562	WITHOUT_CLASSIFICATION	2.3815294643788377E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999680459524607	WITHOUT_CLASSIFICATION	3.195404753930996E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999658825966381	WITHOUT_CLASSIFICATION	3.411740336188039E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725228275557	WITHOUT_CLASSIFICATION	2.7477172444323155E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999804638699568	WITHOUT_CLASSIFICATION	1.953613004319706E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999852778634966	WITHOUT_CLASSIFICATION	1.4722136503486002E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999729465964617	WITHOUT_CLASSIFICATION	2.7053403538268112E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717990654556	WITHOUT_CLASSIFICATION	2.8200934544419354E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999870744972567	WITHOUT_CLASSIFICATION	1.2925502743400283E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999739962915588	WITHOUT_CLASSIFICATION	2.6003708441133056E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999904948434722	WITHOUT_CLASSIFICATION	9.505156527781015E-6	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999814070764237	WITHOUT_CLASSIFICATION	1.8592923576402816E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9993805356375717	WITHOUT_CLASSIFICATION	6.194643624283016E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999941491289404	WITHOUT_CLASSIFICATION	5.850871059643737E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999246066610669	WITHOUT_CLASSIFICATION	7.53933389331568E-5	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999991694461101	WITHOUT_CLASSIFICATION	8.305538898980954E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999983380132963	WITHOUT_CLASSIFICATION	1.6619867036351352E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999737598922037	WITHOUT_CLASSIFICATION	2.6240107796270983E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999777059555103	WITHOUT_CLASSIFICATION	2.229404448961503E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999856200453238	WITHOUT_CLASSIFICATION	1.4379954676150873E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999804108739493	WITHOUT_CLASSIFICATION	1.9589126050735965E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999931000795818	WITHOUT_CLASSIFICATION	6.8999204181881285E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999931967768619	WITHOUT_CLASSIFICATION	6.803223138006245E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827556685086	WITHOUT_CLASSIFICATION	1.7244331491486285E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828906862939	WITHOUT_CLASSIFICATION	1.7109313706189333E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999437432868499	WITHOUT_CLASSIFICATION	5.625671315026769E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999959632961539	WITHOUT_CLASSIFICATION	4.03670384609194E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999880728444178	WITHOUT_CLASSIFICATION	1.192715558205952E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999346321967995	WITHOUT_CLASSIFICATION	6.536780320051966E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999341019827959	WITHOUT_CLASSIFICATION	6.5898017204041E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999716875882839	WITHOUT_CLASSIFICATION	2.831241171602046E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998045053245	WITHOUT_CLASSIFICATION	1.95494675500753E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999554414086801	WITHOUT_CLASSIFICATION	4.455859131990043E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999560286381893	WITHOUT_CLASSIFICATION	4.3971361810581166E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999716875882839	WITHOUT_CLASSIFICATION	2.831241171602046E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999958585682068	WITHOUT_CLASSIFICATION	4.141431793170445E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999379019157761	WITHOUT_CLASSIFICATION	6.209808422387402E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732048800217	WITHOUT_CLASSIFICATION	2.67951199782344E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999925300052712	WITHOUT_CLASSIFICATION	7.469994728749406E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999985960737712	WITHOUT_CLASSIFICATION	1.4039262288797965E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999728817107595	WITHOUT_CLASSIFICATION	2.7118289240487623E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999884037297313	WITHOUT_CLASSIFICATION	1.1596270268795344E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999739076292063	WITHOUT_CLASSIFICATION	2.6092370793630866E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999739076292063	WITHOUT_CLASSIFICATION	2.6092370793630866E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999923817712453	WITHOUT_CLASSIFICATION	7.618228754655609E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999945390084404	WITHOUT_CLASSIFICATION	5.460991559648124E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999949650552388	WITHOUT_CLASSIFICATION	5.03494476126157E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999891198157002	WITHOUT_CLASSIFICATION	1.0880184299903452E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999998419010275	WITHOUT_CLASSIFICATION	1.5809897249321409E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999444416923238	WITHOUT_CLASSIFICATION	5.555830767625933E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999209960061595	WITHOUT_CLASSIFICATION	7.900399384051527E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999859732455774	WITHOUT_CLASSIFICATION	1.4026754422725631E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998422728309369	WITHOUT_CLASSIFICATION	1.5772716906328337E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999967928210328	WITHOUT_CLASSIFICATION	3.2071789671990155E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999227214965807	WITHOUT_CLASSIFICATION	7.727850341930933E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999170744720249	WITHOUT_CLASSIFICATION	8.292552797507654E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998934958734171	WITHOUT_CLASSIFICATION	1.0650412658281724E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999968851299499	WITHOUT_CLASSIFICATION	3.114870050098253E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999918948075059	WITHOUT_CLASSIFICATION	8.105192493998712E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999451144974184	WITHOUT_CLASSIFICATION	5.488550258167567E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999920181315969	WITHOUT_CLASSIFICATION	7.981868403139053E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999774263512133	WITHOUT_CLASSIFICATION	2.257364878660422E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999711301219767	WITHOUT_CLASSIFICATION	2.8869878023300578E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999304566926489	WITHOUT_CLASSIFICATION	6.954330735103326E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999984502526722	WITHOUT_CLASSIFICATION	1.549747327804955E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999376933292444	WITHOUT_CLASSIFICATION	6.230667075552555E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999779750272518	WITHOUT_CLASSIFICATION	2.2024972748156152E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999871418299888	WITHOUT_CLASSIFICATION	1.285817001128429E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999769408601054	WITHOUT_CLASSIFICATION	2.30591398946001E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999840728527933	WITHOUT_CLASSIFICATION	1.592714720671293E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999976966957005	WITHOUT_CLASSIFICATION	2.3033042994216408E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999961067009573	WITHOUT_CLASSIFICATION	3.893299042766697E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996102651494035	WITHOUT_CLASSIFICATION	3.897348505964058E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999823697293012	WITHOUT_CLASSIFICATION	1.7630270698682964E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999669666053986	WITHOUT_CLASSIFICATION	3.303339460133826E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999933410053982	WITHOUT_CLASSIFICATION	6.6589946017801295E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999930418044386	WITHOUT_CLASSIFICATION	6.958195561446296E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999945934313573	WITHOUT_CLASSIFICATION	5.406568642621036E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999819783709541	WITHOUT_CLASSIFICATION	1.8021629045860545E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999825438068434	WITHOUT_CLASSIFICATION	1.7456193156578846E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997437026638557	WITHOUT_CLASSIFICATION	2.562973361443408E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999572212064914	WITHOUT_CLASSIFICATION	4.2778793508601426E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999914939707182	WITHOUT_CLASSIFICATION	8.506029281788099E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999891046172572	WITHOUT_CLASSIFICATION	1.089538274272465E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999709904901061	WITHOUT_CLASSIFICATION	2.900950989395369E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999502054981458	WITHOUT_CLASSIFICATION	4.97945018541073E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999502054981458	WITHOUT_CLASSIFICATION	4.97945018541073E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999592544028825	WITHOUT_CLASSIFICATION	4.074559711757419E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999791092645528	WITHOUT_CLASSIFICATION	2.089073544720101E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999972316539131	WITHOUT_CLASSIFICATION	2.7683460869008062E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999881127964058	WITHOUT_CLASSIFICATION	1.188720359418113E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999861534649258	WITHOUT_CLASSIFICATION	1.3846535074151878E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999861639673239	WITHOUT_CLASSIFICATION	1.3836032676150512E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999831288371736	WITHOUT_CLASSIFICATION	1.687116282638035E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998940202291731	WITHOUT_CLASSIFICATION	1.0597977082691086E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999884498122822	WITHOUT_CLASSIFICATION	1.1550187717872928E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999844228862153	WITHOUT_CLASSIFICATION	1.557711378476982E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999394827656939	WITHOUT_CLASSIFICATION	6.051723430602184E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999361689024648	WITHOUT_CLASSIFICATION	6.383109753524448E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999612308108758	WITHOUT_CLASSIFICATION	3.8769189124206267E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999834552179847	WITHOUT_CLASSIFICATION	1.6544782015283397E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999643521438533	WITHOUT_CLASSIFICATION	3.564785614668946E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999947076489845	WITHOUT_CLASSIFICATION	5.29235101547079E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999965599381557	WITHOUT_CLASSIFICATION	3.440061844387361E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999998873899685	WITHOUT_CLASSIFICATION	1.1261003158239285E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999960573427882	WITHOUT_CLASSIFICATION	3.94265721183093E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999504653290364	WITHOUT_CLASSIFICATION	4.953467096362189E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999234943043414	WITHOUT_CLASSIFICATION	7.650569565859896E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999960573427882	WITHOUT_CLASSIFICATION	3.94265721183093E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999527325374141	WITHOUT_CLASSIFICATION	4.726746258583122E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999931335547068	WITHOUT_CLASSIFICATION	6.86644529327831E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999221952411634	WITHOUT_CLASSIFICATION	7.78047588365966E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998696360195157	WITHOUT_CLASSIFICATION	1.3036398048424334E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999824551053593	WITHOUT_CLASSIFICATION	1.7544894640650333E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999927423305862	WITHOUT_CLASSIFICATION	7.257669413841745E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999612703484086	WITHOUT_CLASSIFICATION	3.8729651591348885E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999728252127157	WITHOUT_CLASSIFICATION	2.7174787284230075E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999934201885574	WITHOUT_CLASSIFICATION	6.579811442585497E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999613754922111	WITHOUT_CLASSIFICATION	3.8624507788834664E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999944161681673	WITHOUT_CLASSIFICATION	5.583831832601598E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999890771749189	WITHOUT_CLASSIFICATION	1.0922825081104563E-4	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999930127170019	WITHOUT_CLASSIFICATION	6.9872829981264344E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999916192256015	WITHOUT_CLASSIFICATION	8.380774398492301E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999804746389716	WITHOUT_CLASSIFICATION	1.952536102843365E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999564969619342	WITHOUT_CLASSIFICATION	4.3503038065882254E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999878136091077	WITHOUT_CLASSIFICATION	1.2186390892213602E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999824675565001	WITHOUT_CLASSIFICATION	1.753244349988714E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.999967372716378	WITHOUT_CLASSIFICATION	3.2627283622026667E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999131139674807	WITHOUT_CLASSIFICATION	8.688603251929662E-5	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997643148233157	WITHOUT_CLASSIFICATION	2.3568517668436177E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999822878972896	WITHOUT_CLASSIFICATION	1.771210271037148E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999988502768401	WITHOUT_CLASSIFICATION	1.1497231598638364E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999855407456156	WITHOUT_CLASSIFICATION	1.4459254384387783E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998947365247907	WITHOUT_CLASSIFICATION	1.052634752093498E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999875009838745	WITHOUT_CLASSIFICATION	1.249901612545916E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999998558961333	WITHOUT_CLASSIFICATION	1.4410386669591176E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999894100748509	WITHOUT_CLASSIFICATION	1.0589925149154186E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999867896456669	WITHOUT_CLASSIFICATION	1.3210354333005214E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999988704202059	WITHOUT_CLASSIFICATION	1.129579794050588E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999931967768619	WITHOUT_CLASSIFICATION	6.803223138006245E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999524340652707	WITHOUT_CLASSIFICATION	4.756593472930951E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999975655436323	WITHOUT_CLASSIFICATION	2.434456367702283E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999931934475647	WITHOUT_CLASSIFICATION	6.806552435366252E-6	TEST
do the test	WITHOUT_CLASSIFICATION	0.9993796580437416	WITHOUT_CLASSIFICATION	6.203419562585008E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998674780141155	WITHOUT_CLASSIFICATION	1.325219858844769E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999768971651783	WITHOUT_CLASSIFICATION	2.3102834821607933E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999341663340314	WITHOUT_CLASSIFICATION	6.583366596863274E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999883943969784	WITHOUT_CLASSIFICATION	1.1605603021650402E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999920256997087	WITHOUT_CLASSIFICATION	7.974300291276683E-6	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999920270900067	WITHOUT_CLASSIFICATION	7.97290999330331E-6	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999986804403805	WITHOUT_CLASSIFICATION	1.3195596194942151E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999898332146177	WITHOUT_CLASSIFICATION	1.016678538233853E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9912570884746773	WITHOUT_CLASSIFICATION	0.00874291152532261	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999898388839901	WITHOUT_CLASSIFICATION	1.0161116009919303E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999893744176764	WITHOUT_CLASSIFICATION	1.062558232353391E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999932628277504	WITHOUT_CLASSIFICATION	6.737172249669466E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999911230140798	WITHOUT_CLASSIFICATION	8.876985920321975E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999917597976407	WITHOUT_CLASSIFICATION	8.240202359362283E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999915217105709	WITHOUT_CLASSIFICATION	8.478289429035049E-6	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999904460922743	WITHOUT_CLASSIFICATION	9.553907725667908E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999916920377044	WITHOUT_CLASSIFICATION	8.307962295509362E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999995242770668	WITHOUT_CLASSIFICATION	4.757229331981154E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999701843482286	WITHOUT_CLASSIFICATION	2.9815651771421314E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998787643817172	WITHOUT_CLASSIFICATION	1.2123561828277524E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.999993372748779	WITHOUT_CLASSIFICATION	6.6272512210362674E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999907665411288	WITHOUT_CLASSIFICATION	9.23345887118561E-6	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990976996802	WITHOUT_CLASSIFICATION	9.023003198075799E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999273040615951	WITHOUT_CLASSIFICATION	7.269593840492444E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9997486374525217	WITHOUT_CLASSIFICATION	2.5136254747829066E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652920523261	WITHOUT_CLASSIFICATION	3.4707947673803124E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999367414918091	WITHOUT_CLASSIFICATION	6.325850819095981E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703449802058	WITHOUT_CLASSIFICATION	2.96550197942485E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999877932564337	WITHOUT_CLASSIFICATION	1.2206743566363581E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999824677530557	WITHOUT_CLASSIFICATION	1.753224694424233E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999903948195795	WITHOUT_CLASSIFICATION	9.60518042057467E-6	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999983267150543	WITHOUT_CLASSIFICATION	1.673284945755025E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999814604134628	WITHOUT_CLASSIFICATION	1.853958653719727E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965064549005	WITHOUT_CLASSIFICATION	3.4935450994950536E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999814604134628	WITHOUT_CLASSIFICATION	1.853958653719727E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999199979421125	WITHOUT_CLASSIFICATION	8.000205788753367E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999914213016582	WITHOUT_CLASSIFICATION	8.578698341748745E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999865163057688	WITHOUT_CLASSIFICATION	1.3483694231227182E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998964654122506	WITHOUT_CLASSIFICATION	1.0353458774931829E-4	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999138291920895	WITHOUT_CLASSIFICATION	8.617080791056889E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9922555160187063	WITHOUT_CLASSIFICATION	0.007744483981293706	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999965347637466	WITHOUT_CLASSIFICATION	3.465236253340392E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999874769190631	WITHOUT_CLASSIFICATION	1.2523080936954054E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999962821455057	WITHOUT_CLASSIFICATION	3.717854494296742E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998387547893817	WITHOUT_CLASSIFICATION	1.612452106183396E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999882748928662	WITHOUT_CLASSIFICATION	1.1725107133703303E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999841084157844	WITHOUT_CLASSIFICATION	1.589158421562306E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998882332604617	WITHOUT_CLASSIFICATION	1.1176673953823782E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9988619793569264	WITHOUT_CLASSIFICATION	0.0011380206430736456	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999893757061147	WITHOUT_CLASSIFICATION	1.0624293885342804E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999952366420249	WITHOUT_CLASSIFICATION	4.763357975059145E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999846712680228	WITHOUT_CLASSIFICATION	1.5328731977159433E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999846712680228	WITHOUT_CLASSIFICATION	1.5328731977159433E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999825595884203	WITHOUT_CLASSIFICATION	1.744041157965088E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999743416540336	WITHOUT_CLASSIFICATION	2.565834596642198E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999974816941694	WITHOUT_CLASSIFICATION	2.5183058306009095E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999203627884846	WITHOUT_CLASSIFICATION	7.963721151546969E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999971474672204	WITHOUT_CLASSIFICATION	2.8525327795939198E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999425645420853	WITHOUT_CLASSIFICATION	5.7435457914641726E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996699666868898	WITHOUT_CLASSIFICATION	3.3003331311025325E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999883330814145	WITHOUT_CLASSIFICATION	1.1666918585497504E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.999991133066914	WITHOUT_CLASSIFICATION	8.866933086018713E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999789230310558	WITHOUT_CLASSIFICATION	2.107696894417091E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999401969030605	WITHOUT_CLASSIFICATION	5.98030969395786E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999701445638643	WITHOUT_CLASSIFICATION	2.985543613568748E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999870317110675	WITHOUT_CLASSIFICATION	1.2968288932458535E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999455001818884	WITHOUT_CLASSIFICATION	5.449981811164473E-5	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999843811140033	WITHOUT_CLASSIFICATION	1.561888599665743E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999986455788635	WITHOUT_CLASSIFICATION	1.3544211364993407E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999953742924382	WITHOUT_CLASSIFICATION	4.625707561757286E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999546481495949	WITHOUT_CLASSIFICATION	4.535185040519153E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999957742173682	WITHOUT_CLASSIFICATION	4.225782631759843E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999878260112166	WITHOUT_CLASSIFICATION	1.217398878343069E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999517349750733	WITHOUT_CLASSIFICATION	4.826502492675425E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999881236574615	WITHOUT_CLASSIFICATION	1.1876342538594429E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999715575716168	WITHOUT_CLASSIFICATION	2.844242838318175E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999988040388775	WITHOUT_CLASSIFICATION	1.1959611225001358E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999448726945751	WITHOUT_CLASSIFICATION	5.512730542485738E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999901643048724	WITHOUT_CLASSIFICATION	9.835695127577175E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999057728924327	WITHOUT_CLASSIFICATION	9.422710756735456E-5	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.99993272755853	WITHOUT_CLASSIFICATION	6.727244146998206E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999886479172819	WITHOUT_CLASSIFICATION	1.1352082718030654E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999960645068001	WITHOUT_CLASSIFICATION	3.935493199915195E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999533100488319	WITHOUT_CLASSIFICATION	4.668995116813113E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999718685453166	WITHOUT_CLASSIFICATION	2.8131454683453095E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9991720703292645	WITHOUT_CLASSIFICATION	8.27929670735499E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999912827614321	WITHOUT_CLASSIFICATION	8.717238567848342E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999882520708058	WITHOUT_CLASSIFICATION	1.1747929194222707E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999920578467313	WITHOUT_CLASSIFICATION	7.942153268741394E-6	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999789379882319	WITHOUT_CLASSIFICATION	2.1062011768083513E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999595049301883	WITHOUT_CLASSIFICATION	4.049506981162931E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999902534757704	WITHOUT_CLASSIFICATION	9.746524229519606E-6	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9997092115537323	WITHOUT_CLASSIFICATION	2.9078844626774237E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999470241881461	WITHOUT_CLASSIFICATION	5.2975811853904945E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619574174818	WITHOUT_CLASSIFICATION	3.804258251814016E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999419545159663	WITHOUT_CLASSIFICATION	5.804548403368777E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999764411802954	WITHOUT_CLASSIFICATION	2.355881970460612E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999855291524327	WITHOUT_CLASSIFICATION	1.4470847567408087E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.999996641350718	WITHOUT_CLASSIFICATION	3.358649282107177E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999290752959953	WITHOUT_CLASSIFICATION	7.092470400473308E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999681759635369	WITHOUT_CLASSIFICATION	3.1824036462982636E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999738206022654	WITHOUT_CLASSIFICATION	2.6179397734660654E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999720265727893	WITHOUT_CLASSIFICATION	2.7973427210767218E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619574174818	WITHOUT_CLASSIFICATION	3.804258251814016E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999350132091098	WITHOUT_CLASSIFICATION	6.498679089011234E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998687755463503	WITHOUT_CLASSIFICATION	1.3122445364976954E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999974815185855	WITHOUT_CLASSIFICATION	2.5184814145774578E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999906835791519	WITHOUT_CLASSIFICATION	9.316420848138106E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999823961834468	WITHOUT_CLASSIFICATION	1.760381655319371E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999823961834468	WITHOUT_CLASSIFICATION	1.760381655319371E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9970755007061266	WITHOUT_CLASSIFICATION	0.0029244992938733203	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999935908345506	WITHOUT_CLASSIFICATION	6.409165449279692E-6	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999185990811705	WITHOUT_CLASSIFICATION	8.140091882942005E-5	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999662073764498	WITHOUT_CLASSIFICATION	3.3792623550119156E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999652417643147	WITHOUT_CLASSIFICATION	3.47582356853191E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999691833098535	WITHOUT_CLASSIFICATION	3.081669014637285E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999952780495072	WITHOUT_CLASSIFICATION	4.72195049285828E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9990591200947493	WITHOUT_CLASSIFICATION	9.408799052507135E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999867143601666	WITHOUT_CLASSIFICATION	1.3285639833388028E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996827181946957	WITHOUT_CLASSIFICATION	3.172818053043893E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999922592902618	WITHOUT_CLASSIFICATION	7.74070973821299E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999939255283816	WITHOUT_CLASSIFICATION	6.074471618298272E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999845060275053	WITHOUT_CLASSIFICATION	1.5493972494698254E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999951857636957	WITHOUT_CLASSIFICATION	4.814236304251234E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998665338136623	WITHOUT_CLASSIFICATION	1.3346618633770796E-4	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9992417028226603	WITHOUT_CLASSIFICATION	7.58297177339665E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999988769409972	WITHOUT_CLASSIFICATION	1.1230590027736814E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999805619600719	WITHOUT_CLASSIFICATION	1.9438039928073413E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999821717569498	WITHOUT_CLASSIFICATION	1.782824305020865E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999977497234663	WITHOUT_CLASSIFICATION	2.2502765337138296E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999938762766518	WITHOUT_CLASSIFICATION	6.1237233481662615E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999983108902829	WITHOUT_CLASSIFICATION	1.6891097170925102E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999990361788473	WITHOUT_CLASSIFICATION	9.638211527542041E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999902472788991	WITHOUT_CLASSIFICATION	9.752721100894644E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999854961055786	WITHOUT_CLASSIFICATION	1.4503894421374184E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999793678559975	WITHOUT_CLASSIFICATION	2.0632144002539356E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998869643677412	WITHOUT_CLASSIFICATION	1.1303563225873065E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999736762073596	WITHOUT_CLASSIFICATION	2.632379264034588E-5	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999820192327866	WITHOUT_CLASSIFICATION	1.798076721331798E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999763510382893	WITHOUT_CLASSIFICATION	2.3648961710712573E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998458475110434	WITHOUT_CLASSIFICATION	1.5415248895654296E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999603023387884	WITHOUT_CLASSIFICATION	3.969766121165128E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999763510382893	WITHOUT_CLASSIFICATION	2.3648961710712573E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999883400682812	WITHOUT_CLASSIFICATION	1.1659931718821939E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999820192327866	WITHOUT_CLASSIFICATION	1.798076721331798E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9995012066393527	WITHOUT_CLASSIFICATION	4.987933606471794E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999763510382893	WITHOUT_CLASSIFICATION	2.3648961710712573E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999629240502765	WITHOUT_CLASSIFICATION	3.7075949723403626E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999787848292118	WITHOUT_CLASSIFICATION	2.1215170788220307E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999401969030605	WITHOUT_CLASSIFICATION	5.98030969395786E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999494366053605	WITHOUT_CLASSIFICATION	5.0563394639440935E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999246066610669	WITHOUT_CLASSIFICATION	7.53933389331568E-5	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999965132274048	WITHOUT_CLASSIFICATION	3.4867725951669854E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999754184980161	WITHOUT_CLASSIFICATION	2.4581501984006656E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999877327221154	WITHOUT_CLASSIFICATION	1.2267277884595772E-4	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.999964149593032	WITHOUT_CLASSIFICATION	3.585040696798206E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999071901012807	WITHOUT_CLASSIFICATION	9.28098987193004E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999540085706801	WITHOUT_CLASSIFICATION	4.5991429319946835E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999642715482887	WITHOUT_CLASSIFICATION	3.572845171129504E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824551132283	WITHOUT_CLASSIFICATION	1.754488677184063E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999787975826718	WITHOUT_CLASSIFICATION	2.1202417328160227E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999887693565334	WITHOUT_CLASSIFICATION	1.1230643466601716E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999961372399799	WITHOUT_CLASSIFICATION	3.862760020068875E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999939679832329	WITHOUT_CLASSIFICATION	6.0320167669969655E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999571894966898	WITHOUT_CLASSIFICATION	4.2810503310144774E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999683621634262	WITHOUT_CLASSIFICATION	3.1637836573693385E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999755210391894	WITHOUT_CLASSIFICATION	2.447896081058254E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999893186898935	WITHOUT_CLASSIFICATION	1.0681310106448326E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999612578795121	WITHOUT_CLASSIFICATION	3.874212048793401E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999988427095273	WITHOUT_CLASSIFICATION	1.1572904726935285E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999443564444731	WITHOUT_CLASSIFICATION	5.5643555526877553E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998521168728502	WITHOUT_CLASSIFICATION	1.478831271498327E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999690645445755	WITHOUT_CLASSIFICATION	3.0935455424635464E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.999986135943386	WITHOUT_CLASSIFICATION	1.386405661387447E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.999976495779737	WITHOUT_CLASSIFICATION	2.3504220262924965E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967431226232	WITHOUT_CLASSIFICATION	3.256877376789838E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971846570502	WITHOUT_CLASSIFICATION	2.815342949813145E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999724378320384	WITHOUT_CLASSIFICATION	2.7562167961544878E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.99998715690868	WITHOUT_CLASSIFICATION	1.2843091319964823E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999913408749944	WITHOUT_CLASSIFICATION	8.659125005601652E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999990572907445	WITHOUT_CLASSIFICATION	9.427092554956733E-7	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999931950862532	WITHOUT_CLASSIFICATION	6.804913746880973E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999920394710043	WITHOUT_CLASSIFICATION	7.960528995689382E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999711778691873	WITHOUT_CLASSIFICATION	2.88221308126979E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999993386662563	WITHOUT_CLASSIFICATION	6.613337437005801E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999669472203994	WITHOUT_CLASSIFICATION	3.3052779600700776E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999994262899634	WITHOUT_CLASSIFICATION	5.737100365921875E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999260749764901	WITHOUT_CLASSIFICATION	7.392502350994254E-5	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999625858846708	WITHOUT_CLASSIFICATION	3.741411532918475E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999962224857682	WITHOUT_CLASSIFICATION	3.7775142318194988E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999664805104964	WITHOUT_CLASSIFICATION	3.351948950356105E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999671555026264	WITHOUT_CLASSIFICATION	3.284449737356344E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997766812104599	WITHOUT_CLASSIFICATION	2.2331878954016946E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998810169898132	WITHOUT_CLASSIFICATION	1.1898301018684022E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999804324055891	WITHOUT_CLASSIFICATION	1.9567594410823125E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999903244223555	WITHOUT_CLASSIFICATION	9.675577644576433E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998884925006628	WITHOUT_CLASSIFICATION	1.1150749933727634E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999258699162566	WITHOUT_CLASSIFICATION	7.413008374328886E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999689238832192	WITHOUT_CLASSIFICATION	3.1076116780765144E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997668371690248	WITHOUT_CLASSIFICATION	2.3316283097502994E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999984361361824	WITHOUT_CLASSIFICATION	1.563863817512399E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999819916144113	WITHOUT_CLASSIFICATION	1.8008385588711965E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9989668572751009	WITHOUT_CLASSIFICATION	0.0010331427248990526	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999125134174086	WITHOUT_CLASSIFICATION	8.748658259141543E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967431226232	WITHOUT_CLASSIFICATION	3.256877376789838E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999361779150243	WITHOUT_CLASSIFICATION	6.382208497564547E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999989662649474	WITHOUT_CLASSIFICATION	1.0337350525750325E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999858232834716	WITHOUT_CLASSIFICATION	1.4176716528249324E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999526794166703	WITHOUT_CLASSIFICATION	4.7320583329791915E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999518210376053	WITHOUT_CLASSIFICATION	4.817896239476389E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999508701916151	WITHOUT_CLASSIFICATION	4.9129808384891616E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708207507846	WITHOUT_CLASSIFICATION	2.9179249215466643E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999930709288434	WITHOUT_CLASSIFICATION	6.929071156585764E-6	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999951291321507	WITHOUT_CLASSIFICATION	4.870867849268617E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999498606671009	WITHOUT_CLASSIFICATION	5.0139332898956315E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999945621670486	WITHOUT_CLASSIFICATION	5.437832951459689E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999886479172819	WITHOUT_CLASSIFICATION	1.1352082718030654E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999798921566023	WITHOUT_CLASSIFICATION	2.010784339760776E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999657850078001	WITHOUT_CLASSIFICATION	3.4214992199913736E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999199979421125	WITHOUT_CLASSIFICATION	8.000205788753367E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995281414226	WITHOUT_CLASSIFICATION	4.7185857747977663E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999982218943791	WITHOUT_CLASSIFICATION	1.7781056208850163E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999988411727913	WITHOUT_CLASSIFICATION	1.1588272087043402E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.999991739041282	WITHOUT_CLASSIFICATION	8.260958717930597E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999091830403	WITHOUT_CLASSIFICATION	9.081695970091193E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999975825264552	WITHOUT_CLASSIFICATION	2.4174735447990433E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999975825264552	WITHOUT_CLASSIFICATION	2.4174735447990433E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999810573019253	WITHOUT_CLASSIFICATION	1.8942698074731578E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999943183959074	WITHOUT_CLASSIFICATION	5.681604092634308E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999882713974488	WITHOUT_CLASSIFICATION	1.172860255110767E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999832188587495	WITHOUT_CLASSIFICATION	1.6781141250539234E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999458766126931	WITHOUT_CLASSIFICATION	5.4123387306930495E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999924805933498	WITHOUT_CLASSIFICATION	7.519406650122934E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999512091587515	WITHOUT_CLASSIFICATION	4.8790841248604996E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999616656115985	WITHOUT_CLASSIFICATION	3.8334388401601994E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999616656115985	WITHOUT_CLASSIFICATION	3.8334388401601994E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999219474620995	WITHOUT_CLASSIFICATION	7.805253790052316E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999921647330694	WITHOUT_CLASSIFICATION	7.835266930684649E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998653187925131	WITHOUT_CLASSIFICATION	1.3468120748695591E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898127645025	WITHOUT_CLASSIFICATION	1.0187235497506918E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898127645025	WITHOUT_CLASSIFICATION	1.0187235497506918E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898127645025	WITHOUT_CLASSIFICATION	1.0187235497506918E-5	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999659070837885	WITHOUT_CLASSIFICATION	3.409291621140441E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999775955902482	WITHOUT_CLASSIFICATION	2.240440975169862E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999807275867931	WITHOUT_CLASSIFICATION	1.927241320684833E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999469317096262	WITHOUT_CLASSIFICATION	5.306829037366889E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999869580463756	WITHOUT_CLASSIFICATION	1.3041953624429109E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999995456955487	WITHOUT_CLASSIFICATION	4.543044514020612E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999523629502322	WITHOUT_CLASSIFICATION	4.763704976786147E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990798028952995	WITHOUT_CLASSIFICATION	9.201971047004169E-4	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999771086476145	WITHOUT_CLASSIFICATION	2.2891352385489717E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999924855363665	WITHOUT_CLASSIFICATION	7.514463633501582E-6	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999822656619893	WITHOUT_CLASSIFICATION	1.7734338010661724E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999862118678975	WITHOUT_CLASSIFICATION	1.3788132102591E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998781136613576	WITHOUT_CLASSIFICATION	1.2188633864240411E-4	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999834487858474	WITHOUT_CLASSIFICATION	1.6551214152547507E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999968288831352	WITHOUT_CLASSIFICATION	3.171116864764733E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999886468173136	WITHOUT_CLASSIFICATION	1.1353182686464214E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999884053839057	WITHOUT_CLASSIFICATION	1.159461609445335E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999993274426059	WITHOUT_CLASSIFICATION	6.72557394089704E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999975825264552	WITHOUT_CLASSIFICATION	2.4174735447990433E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999988677677661	WITHOUT_CLASSIFICATION	1.1322322339090208E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999979163559537	WITHOUT_CLASSIFICATION	2.0836440462175635E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999611485863467	WITHOUT_CLASSIFICATION	3.885141365335577E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999730503540364	WITHOUT_CLASSIFICATION	2.69496459635588E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999854524706684	WITHOUT_CLASSIFICATION	1.454752933154153E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999965576870187	WITHOUT_CLASSIFICATION	3.442312981392999E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999482978738202	WITHOUT_CLASSIFICATION	5.1702126179817104E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999933682927837	WITHOUT_CLASSIFICATION	6.631707216276583E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9995618322897211	WITHOUT_CLASSIFICATION	4.3816771027887266E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999794471946508	WITHOUT_CLASSIFICATION	2.055280534920727E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9995737551570034	WITHOUT_CLASSIFICATION	4.2624484299650604E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999673356809587	WITHOUT_CLASSIFICATION	3.266431904125829E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999906338141582	WITHOUT_CLASSIFICATION	9.366185841894618E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999885867341993	WITHOUT_CLASSIFICATION	1.1413265800823685E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999790507425174	WITHOUT_CLASSIFICATION	2.0949257482718302E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999991265567079	WITHOUT_CLASSIFICATION	8.734432922314198E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999958705346953	WITHOUT_CLASSIFICATION	4.129465304718125E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999977504262638	WITHOUT_CLASSIFICATION	2.249573736086722E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999789368467685	WITHOUT_CLASSIFICATION	2.1063153231414477E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999789368467685	WITHOUT_CLASSIFICATION	2.1063153231414477E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999859901797452	WITHOUT_CLASSIFICATION	1.4009820254717755E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999994828067683	WITHOUT_CLASSIFICATION	5.17193231702881E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999985604607652	WITHOUT_CLASSIFICATION	1.4395392347914639E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999713485373511	WITHOUT_CLASSIFICATION	2.865146264877526E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999219316284547	WITHOUT_CLASSIFICATION	7.806837154539079E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999974352749336	WITHOUT_CLASSIFICATION	2.5647250664027567E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999795436867394	WITHOUT_CLASSIFICATION	2.0456313260590616E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999307849761924	WITHOUT_CLASSIFICATION	6.921502380770369E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999842449779162	WITHOUT_CLASSIFICATION	1.575502208385412E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999851195937	WITHOUT_CLASSIFICATION	1.488040630012093E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999300609790276	WITHOUT_CLASSIFICATION	6.993902097240832E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999886479172819	WITHOUT_CLASSIFICATION	1.1352082718030654E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999980501061838	WITHOUT_CLASSIFICATION	1.9498938162303923E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999932321963678	WITHOUT_CLASSIFICATION	6.767803632225557E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999991649312707	WITHOUT_CLASSIFICATION	8.35068729263825E-7	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999029219088843	WITHOUT_CLASSIFICATION	9.707809111578657E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986420463969	WITHOUT_CLASSIFICATION	1.3579536031071525E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986420463969	WITHOUT_CLASSIFICATION	1.3579536031071525E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999626573871907	WITHOUT_CLASSIFICATION	3.734261280932825E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999996358676877	WITHOUT_CLASSIFICATION	3.6413231227212923E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999149106403016	WITHOUT_CLASSIFICATION	8.508935969842603E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.999927433472851	WITHOUT_CLASSIFICATION	7.25665271490137E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998621425001891	WITHOUT_CLASSIFICATION	1.3785749981092075E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997842028533838	WITHOUT_CLASSIFICATION	2.1579714661617625E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999505026187708	WITHOUT_CLASSIFICATION	4.949738122926144E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999947728429948	WITHOUT_CLASSIFICATION	5.2271570052200984E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999955617939505	WITHOUT_CLASSIFICATION	4.438206049505892E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999014192895257	WITHOUT_CLASSIFICATION	9.858071047433957E-5	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999347355042849	WITHOUT_CLASSIFICATION	6.526449571511955E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999947728429948	WITHOUT_CLASSIFICATION	5.2271570052200984E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999679199941486	WITHOUT_CLASSIFICATION	3.208000585139494E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999874112544985	WITHOUT_CLASSIFICATION	1.258874550154093E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999962521739929	WITHOUT_CLASSIFICATION	3.7478260069833045E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999580475358003	WITHOUT_CLASSIFICATION	4.195246419963662E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999576304846204	WITHOUT_CLASSIFICATION	4.236951537955838E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999906709183494	WITHOUT_CLASSIFICATION	9.329081650506133E-6	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999835285982055	WITHOUT_CLASSIFICATION	1.6471401794498177E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999812418487132	WITHOUT_CLASSIFICATION	1.8758151286811463E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999964897071014	WITHOUT_CLASSIFICATION	3.510292898568508E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999844847569102	WITHOUT_CLASSIFICATION	1.5515243089917854E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998930225490683	WITHOUT_CLASSIFICATION	1.0697745093160884E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999948363684792	WITHOUT_CLASSIFICATION	5.163631520800836E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999883214778612	WITHOUT_CLASSIFICATION	1.1678522138815444E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999912796763734	WITHOUT_CLASSIFICATION	8.72032362666074E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999925249229511	WITHOUT_CLASSIFICATION	7.4750770488828E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999924270139648	WITHOUT_CLASSIFICATION	7.572986035130024E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995927610673837	WITHOUT_CLASSIFICATION	4.0723893261622826E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999372613617582	WITHOUT_CLASSIFICATION	6.273863824180676E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999372613617582	WITHOUT_CLASSIFICATION	6.273863824180676E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999835285982055	WITHOUT_CLASSIFICATION	1.6471401794498177E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999859096252943	WITHOUT_CLASSIFICATION	1.409037470568196E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999914847112623	WITHOUT_CLASSIFICATION	8.515288737769529E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998319799292594	WITHOUT_CLASSIFICATION	1.6802007074048496E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999852788653476	WITHOUT_CLASSIFICATION	1.472113465245588E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999857285336811	WITHOUT_CLASSIFICATION	1.4271466319091317E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999871778235817	WITHOUT_CLASSIFICATION	1.2822176418275832E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999916567186471	WITHOUT_CLASSIFICATION	8.343281352873872E-6	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999528566237124	WITHOUT_CLASSIFICATION	4.7143376287651265E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999969814754213	WITHOUT_CLASSIFICATION	3.018524578712665E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.999980262900862	WITHOUT_CLASSIFICATION	1.9737099138063892E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999976554915678	WITHOUT_CLASSIFICATION	2.3445084322262593E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999924530297465	WITHOUT_CLASSIFICATION	7.546970253456375E-6	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999783443305649	WITHOUT_CLASSIFICATION	2.165566943503442E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999884305479781	WITHOUT_CLASSIFICATION	1.1569452021886312E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999655875095538	WITHOUT_CLASSIFICATION	3.441249044631017E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999874163593525	WITHOUT_CLASSIFICATION	1.2583640647531647E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999920796363195	WITHOUT_CLASSIFICATION	7.920363680482899E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999956376946447	WITHOUT_CLASSIFICATION	4.362305355222902E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999136693245528	WITHOUT_CLASSIFICATION	8.633067544720484E-5	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999894731272069	WITHOUT_CLASSIFICATION	1.0526872793080922E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999656830799262	WITHOUT_CLASSIFICATION	3.431692007383045E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999629251779982	WITHOUT_CLASSIFICATION	3.707482200183378E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999639442041567	WITHOUT_CLASSIFICATION	3.605579584327136E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999938379045096	WITHOUT_CLASSIFICATION	6.162095490417791E-6	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999733709404133	WITHOUT_CLASSIFICATION	2.6629059586657665E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999820099301372	WITHOUT_CLASSIFICATION	1.7990069862800446E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.997234775350357	WITHOUT_CLASSIFICATION	0.0027652246496430526	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998676026711695	WITHOUT_CLASSIFICATION	1.3239732883059115E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999791204432893	WITHOUT_CLASSIFICATION	2.0879556710650033E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999816124863531	WITHOUT_CLASSIFICATION	1.8387513646920545E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999650032485451	WITHOUT_CLASSIFICATION	3.4996751454982815E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999858021110928	WITHOUT_CLASSIFICATION	1.419788890718462E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999923169657348	WITHOUT_CLASSIFICATION	7.683034265297015E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999948893864725	WITHOUT_CLASSIFICATION	5.1106135274810405E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999902288620828	WITHOUT_CLASSIFICATION	9.77113791731402E-6	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998930334101233	WITHOUT_CLASSIFICATION	1.0696658987680595E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999960800528843	WITHOUT_CLASSIFICATION	3.919947115587576E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999831303339678	WITHOUT_CLASSIFICATION	1.6869666032182247E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997661035880995	WITHOUT_CLASSIFICATION	2.3389641190057337E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999898607384767	WITHOUT_CLASSIFICATION	1.013926152329091E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999965312347265	WITHOUT_CLASSIFICATION	3.468765273490962E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999869213050165	WITHOUT_CLASSIFICATION	1.307869498336096E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998075030260056	WITHOUT_CLASSIFICATION	1.924969739943785E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999948117044112	WITHOUT_CLASSIFICATION	5.188295588744194E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999766293008299	WITHOUT_CLASSIFICATION	2.3370699170113704E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999015361098119	WITHOUT_CLASSIFICATION	9.846389018813526E-5	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999951117231844	WITHOUT_CLASSIFICATION	4.8882768154753E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996355140916471	WITHOUT_CLASSIFICATION	3.644859083528887E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999998971799265	WITHOUT_CLASSIFICATION	1.0282007349453344E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999951253059064	WITHOUT_CLASSIFICATION	4.874694093610033E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999051474398204	WITHOUT_CLASSIFICATION	9.485256017952253E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999955617939505	WITHOUT_CLASSIFICATION	4.438206049505892E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997382686646231	WITHOUT_CLASSIFICATION	2.617313353769068E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999655875095538	WITHOUT_CLASSIFICATION	3.441249044631017E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999822330192765	WITHOUT_CLASSIFICATION	1.7766980723480374E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999810615588871	WITHOUT_CLASSIFICATION	1.8938441112817017E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999964481141018	WITHOUT_CLASSIFICATION	3.5518858981832786E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999963939929536	WITHOUT_CLASSIFICATION	3.606007046342076E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999833816591993	WITHOUT_CLASSIFICATION	1.6618340800670673E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999998168670117	WITHOUT_CLASSIFICATION	1.8313298829840078E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999099767027071	WITHOUT_CLASSIFICATION	9.002329729297382E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999684689476324	WITHOUT_CLASSIFICATION	3.153105236763026E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999608788572434	WITHOUT_CLASSIFICATION	3.912114275664312E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999982246729372	WITHOUT_CLASSIFICATION	1.7753270628424722E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999162147005625	WITHOUT_CLASSIFICATION	8.378529943759218E-5	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999986263403028	WITHOUT_CLASSIFICATION	1.37365969722852E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999907780892056	WITHOUT_CLASSIFICATION	9.221910794346264E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999907780892056	WITHOUT_CLASSIFICATION	9.221910794346264E-6	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998543964662325	WITHOUT_CLASSIFICATION	1.4560353376742615E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9991990209075898	WITHOUT_CLASSIFICATION	8.009790924100619E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999949687179963	WITHOUT_CLASSIFICATION	5.031282003694804E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9978444492140258	WITHOUT_CLASSIFICATION	0.0021555507859740675	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999931886671648	WITHOUT_CLASSIFICATION	6.811332835177075E-6	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999879817790251	WITHOUT_CLASSIFICATION	1.2018220974922128E-5	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999991804627761	WITHOUT_CLASSIFICATION	8.195372239218632E-7	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999517279761304	WITHOUT_CLASSIFICATION	4.827202386966946E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999767866942098	WITHOUT_CLASSIFICATION	2.3213305790265714E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999698928348543	WITHOUT_CLASSIFICATION	3.010716514573947E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999698928348543	WITHOUT_CLASSIFICATION	3.010716514573947E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999646700892938	WITHOUT_CLASSIFICATION	3.532991070620289E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997811261716	WITHOUT_CLASSIFICATION	2.1887382847070348E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999835703176634	WITHOUT_CLASSIFICATION	1.6429682336512397E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999929479416779	WITHOUT_CLASSIFICATION	7.052058322033996E-6	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999482662956636	WITHOUT_CLASSIFICATION	5.1733704336372206E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997533511744271	WITHOUT_CLASSIFICATION	2.466488255729504E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999981753871323	WITHOUT_CLASSIFICATION	1.824612867734264E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999674954072139	WITHOUT_CLASSIFICATION	3.250459278610561E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999664402050709	WITHOUT_CLASSIFICATION	3.3559794929126907E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999967252334099	WITHOUT_CLASSIFICATION	3.274766590118966E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999914757114919	WITHOUT_CLASSIFICATION	8.524288508076196E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999620571964128	WITHOUT_CLASSIFICATION	3.794280358722209E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999853657740948	WITHOUT_CLASSIFICATION	1.4634225905324431E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999689408600895	WITHOUT_CLASSIFICATION	3.1059139910576846E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613999268333	WITHOUT_CLASSIFICATION	3.8600073166771723E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999370372453502	WITHOUT_CLASSIFICATION	6.29627546497449E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999866085568611	WITHOUT_CLASSIFICATION	1.3391443138817812E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999696910949761	WITHOUT_CLASSIFICATION	3.0308905023768826E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899637427714	WITHOUT_CLASSIFICATION	1.0036257228689585E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999925585898239	WITHOUT_CLASSIFICATION	7.441410176008144E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999973448266418	WITHOUT_CLASSIFICATION	2.655173358197705E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999959105517798	WITHOUT_CLASSIFICATION	4.089448220251457E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999986314072651	WITHOUT_CLASSIFICATION	1.3685927349501296E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999858075669973	WITHOUT_CLASSIFICATION	1.4192433002651633E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999808924342406	WITHOUT_CLASSIFICATION	1.9107565759356093E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999924452789298	WITHOUT_CLASSIFICATION	7.55472107012646E-6	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999607275183567	WITHOUT_CLASSIFICATION	3.927248164327106E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999983709819479	WITHOUT_CLASSIFICATION	1.6290180520877372E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775734236438	WITHOUT_CLASSIFICATION	2.2426576356170718E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999976628921275	WITHOUT_CLASSIFICATION	2.337107872384347E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999967031855433	WITHOUT_CLASSIFICATION	3.296814456699604E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999603363626376	WITHOUT_CLASSIFICATION	3.9663637362341496E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725228275557	WITHOUT_CLASSIFICATION	2.7477172444323155E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9958251960371577	WITHOUT_CLASSIFICATION	0.004174803962842353	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999959417814902	WITHOUT_CLASSIFICATION	4.058218509865468E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999297478378418	WITHOUT_CLASSIFICATION	7.025216215810818E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999984721500178	WITHOUT_CLASSIFICATION	1.5278499821950584E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757618038968	WITHOUT_CLASSIFICATION	2.4238196103178212E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999988215588695	WITHOUT_CLASSIFICATION	1.1784411304798418E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999743011359977	WITHOUT_CLASSIFICATION	2.5698864002228666E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999810200707332	WITHOUT_CLASSIFICATION	1.897992926679626E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999843761596463	WITHOUT_CLASSIFICATION	1.5623840353674383E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999854509289003	WITHOUT_CLASSIFICATION	1.4549071099694446E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997292390565414	WITHOUT_CLASSIFICATION	2.7076094345858403E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999866786431827	WITHOUT_CLASSIFICATION	1.3321356817225618E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999858802882299	WITHOUT_CLASSIFICATION	1.411971177025415E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999765878322584	WITHOUT_CLASSIFICATION	2.3412167741579672E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998821780020609	WITHOUT_CLASSIFICATION	1.1782199793909228E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999916646741708	WITHOUT_CLASSIFICATION	8.335325829314698E-6	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999161369410886	WITHOUT_CLASSIFICATION	8.386305891138035E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999870199532256	WITHOUT_CLASSIFICATION	1.2980046774476424E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.999964892027014	WITHOUT_CLASSIFICATION	3.510797298590029E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999889622850532	WITHOUT_CLASSIFICATION	1.1037714946847002E-5	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999914570736016	WITHOUT_CLASSIFICATION	8.542926398417944E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999933068153583	WITHOUT_CLASSIFICATION	6.693184641744822E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999894450956981	WITHOUT_CLASSIFICATION	1.0554904301886627E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999661422085878	WITHOUT_CLASSIFICATION	3.385779141219198E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999894450956981	WITHOUT_CLASSIFICATION	1.0554904301886627E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999772485152354	WITHOUT_CLASSIFICATION	2.275148476466366E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999971810908374	WITHOUT_CLASSIFICATION	2.8189091626404736E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999842952578253	WITHOUT_CLASSIFICATION	1.570474217471167E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999977254673396	WITHOUT_CLASSIFICATION	2.274532660450531E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999855096560716	WITHOUT_CLASSIFICATION	1.4490343928413618E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999842952578253	WITHOUT_CLASSIFICATION	1.570474217471167E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999890085497916	WITHOUT_CLASSIFICATION	1.099145020840876E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996964850392392	WITHOUT_CLASSIFICATION	3.035149607607061E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999995186510614	WITHOUT_CLASSIFICATION	4.813489385965514E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999936167869246	WITHOUT_CLASSIFICATION	6.383213075548135E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999679606993764	WITHOUT_CLASSIFICATION	3.203930062348671E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999949882037574	WITHOUT_CLASSIFICATION	5.011796242541711E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999966099338217	WITHOUT_CLASSIFICATION	3.390066178380317E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996087554353326	WITHOUT_CLASSIFICATION	3.9124456466749756E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999936862221276	WITHOUT_CLASSIFICATION	6.313777872443695E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999963626368611	WITHOUT_CLASSIFICATION	3.6373631387972295E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999838537257718	WITHOUT_CLASSIFICATION	1.614627422828332E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999974905427931	WITHOUT_CLASSIFICATION	2.5094572069660087E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995305512923	WITHOUT_CLASSIFICATION	4.694487077444292E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9996866377023563	WITHOUT_CLASSIFICATION	3.1336229764364256E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999854409178727	WITHOUT_CLASSIFICATION	1.4559082127415939E-5	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999501139745016	WITHOUT_CLASSIFICATION	4.988602549850501E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9974535829552797	WITHOUT_CLASSIFICATION	0.0025464170447203546	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999968703362965	WITHOUT_CLASSIFICATION	3.1296637034088387E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999621026185662	WITHOUT_CLASSIFICATION	3.78973814338589E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9978762836389142	WITHOUT_CLASSIFICATION	0.00212371636108586	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999757698799552	WITHOUT_CLASSIFICATION	2.4230120044739096E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.999993171518101	WITHOUT_CLASSIFICATION	6.8284818989594225E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999984591274848	WITHOUT_CLASSIFICATION	1.5408725152018072E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999731536299792	WITHOUT_CLASSIFICATION	2.6846370020840533E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999805172620452	WITHOUT_CLASSIFICATION	1.948273795480711E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999704702001604	WITHOUT_CLASSIFICATION	2.9529799839685462E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999976120584453	WITHOUT_CLASSIFICATION	2.3879415546592997E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999884771468502	WITHOUT_CLASSIFICATION	1.152285314972382E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999824974354704	WITHOUT_CLASSIFICATION	1.7502564529618005E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999801295151395	WITHOUT_CLASSIFICATION	1.9870484860521407E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999984591274848	WITHOUT_CLASSIFICATION	1.5408725152018072E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999984666654492	WITHOUT_CLASSIFICATION	1.5333345507966537E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999440761080961	WITHOUT_CLASSIFICATION	5.592389190391421E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999764126089619	WITHOUT_CLASSIFICATION	2.358739103818906E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9989530037647312	WITHOUT_CLASSIFICATION	0.0010469962352688154	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9978762836389142	WITHOUT_CLASSIFICATION	0.00212371636108586	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999822444630618	WITHOUT_CLASSIFICATION	1.7755536938101557E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999840716674647	WITHOUT_CLASSIFICATION	1.5928332535277994E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999513407851522	WITHOUT_CLASSIFICATION	4.865921484772668E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999965014246103	WITHOUT_CLASSIFICATION	3.4985753897023176E-5	TEST
special case	WITHOUT_CLASSIFICATION	0.9999881543009471	WITHOUT_CLASSIFICATION	1.1845699052902925E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999446841845085	WITHOUT_CLASSIFICATION	5.531581549141773E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999983434005801	WITHOUT_CLASSIFICATION	1.6565994199011163E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999200802354503	WITHOUT_CLASSIFICATION	7.991976454967873E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999620970101559	WITHOUT_CLASSIFICATION	3.790298984413401E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999741495568782	WITHOUT_CLASSIFICATION	2.585044312167474E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999673206935109	WITHOUT_CLASSIFICATION	3.26793064891669E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9994556034093244	WITHOUT_CLASSIFICATION	5.44396590675588E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999917002538984	WITHOUT_CLASSIFICATION	8.299746101623874E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999936055061559	WITHOUT_CLASSIFICATION	6.3944938441268386E-6	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999922259434085	WITHOUT_CLASSIFICATION	7.774056591366334E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999889235603667	WITHOUT_CLASSIFICATION	1.1076439633264633E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999975627285071	WITHOUT_CLASSIFICATION	2.4372714928276535E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999822444630618	WITHOUT_CLASSIFICATION	1.7755536938101557E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999036098505869	WITHOUT_CLASSIFICATION	9.639014941303467E-5	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998391035157284	WITHOUT_CLASSIFICATION	1.6089648427161264E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997594662647595	WITHOUT_CLASSIFICATION	2.405337352405067E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999658777844816	WITHOUT_CLASSIFICATION	3.412221551837834E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999766837415571	WITHOUT_CLASSIFICATION	2.331625844289076E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999766837415571	WITHOUT_CLASSIFICATION	2.331625844289076E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999947765807238	WITHOUT_CLASSIFICATION	5.223419276180462E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999766837415571	WITHOUT_CLASSIFICATION	2.331625844289076E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999766837415571	WITHOUT_CLASSIFICATION	2.331625844289076E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999851890056589	WITHOUT_CLASSIFICATION	1.4810994341162062E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997728776686697	WITHOUT_CLASSIFICATION	2.271223313302572E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999614891188631	WITHOUT_CLASSIFICATION	3.85108811369249E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999614891188631	WITHOUT_CLASSIFICATION	3.85108811369249E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999978371993216	WITHOUT_CLASSIFICATION	2.1628006783949925E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999647654102338	WITHOUT_CLASSIFICATION	3.523458976618879E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999849036677909	WITHOUT_CLASSIFICATION	1.5096332209077334E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9994222218821158	WITHOUT_CLASSIFICATION	5.777781178841964E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999904198208406	WITHOUT_CLASSIFICATION	9.580179159458561E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999015253921391	WITHOUT_CLASSIFICATION	9.847460786099348E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999181499308145	WITHOUT_CLASSIFICATION	8.185006918552559E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999937954863635	WITHOUT_CLASSIFICATION	6.204513636534681E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999011207006374	WITHOUT_CLASSIFICATION	9.887929936252297E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998788780483828	WITHOUT_CLASSIFICATION	1.2112195161713983E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999771000375015	WITHOUT_CLASSIFICATION	2.289996249840059E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998221726858468	WITHOUT_CLASSIFICATION	1.7782731415311168E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999903948195795	WITHOUT_CLASSIFICATION	9.60518042057467E-6	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999818427212716	WITHOUT_CLASSIFICATION	1.815727872842678E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999805086073156	WITHOUT_CLASSIFICATION	1.9491392684410962E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998368847120244	WITHOUT_CLASSIFICATION	1.631152879755815E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999982106794176	WITHOUT_CLASSIFICATION	1.7893205822857183E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999790622433764	WITHOUT_CLASSIFICATION	2.0937756623518558E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999903948195795	WITHOUT_CLASSIFICATION	9.60518042057467E-6	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999757698799552	WITHOUT_CLASSIFICATION	2.4230120044739096E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999874754859532	WITHOUT_CLASSIFICATION	1.2524514046754154E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998045053245	WITHOUT_CLASSIFICATION	1.95494675500753E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999716875882839	WITHOUT_CLASSIFICATION	2.831241171602046E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999910481004263	WITHOUT_CLASSIFICATION	8.951899573690332E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999928470218907	WITHOUT_CLASSIFICATION	7.1529781093197575E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.999904830990524	WITHOUT_CLASSIFICATION	9.51690094760096E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999904406168864	WITHOUT_CLASSIFICATION	9.5593831136469E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999854062709452	WITHOUT_CLASSIFICATION	1.4593729054752686E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999996420875916	WITHOUT_CLASSIFICATION	3.5791240839562155E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999872225963272	WITHOUT_CLASSIFICATION	1.2777403672729005E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999314609076041	WITHOUT_CLASSIFICATION	6.853909239600098E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999942285673825	WITHOUT_CLASSIFICATION	5.771432617511067E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999766128067599	WITHOUT_CLASSIFICATION	2.33871932401026E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998990492631787	WITHOUT_CLASSIFICATION	1.0095073682127548E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999433766503819	WITHOUT_CLASSIFICATION	5.662334961804918E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999919116928235	WITHOUT_CLASSIFICATION	8.088307176518982E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999942636432212	WITHOUT_CLASSIFICATION	5.736356778725664E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999678992261993	WITHOUT_CLASSIFICATION	3.2100773800640135E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999237003454614	WITHOUT_CLASSIFICATION	7.629965453859225E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999870581553983	WITHOUT_CLASSIFICATION	1.2941844601600723E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999715627235782	WITHOUT_CLASSIFICATION	2.843727642183198E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999090721143	WITHOUT_CLASSIFICATION	9.092788560650722E-8	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999854062709452	WITHOUT_CLASSIFICATION	1.4593729054752686E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999868649089246	WITHOUT_CLASSIFICATION	1.3135091075335958E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999837222127018	WITHOUT_CLASSIFICATION	1.627778729817539E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999693495693016	WITHOUT_CLASSIFICATION	3.065043069832595E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999913157877119	WITHOUT_CLASSIFICATION	8.684212288099214E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.999982257266262	WITHOUT_CLASSIFICATION	1.774273373800821E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.999992938942827	WITHOUT_CLASSIFICATION	7.061057172999231E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999826215662334	WITHOUT_CLASSIFICATION	1.7378433766528913E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999929420741377	WITHOUT_CLASSIFICATION	7.057925862315737E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999833871424948	WITHOUT_CLASSIFICATION	1.6612857505187333E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999808030291508	WITHOUT_CLASSIFICATION	1.919697084919796E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999134893461387	WITHOUT_CLASSIFICATION	8.651065386135637E-5	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999794884466221	WITHOUT_CLASSIFICATION	2.051155337788862E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999610673367485	WITHOUT_CLASSIFICATION	3.893266325140899E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999815836278575	WITHOUT_CLASSIFICATION	1.8416372142506634E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999819902461446	WITHOUT_CLASSIFICATION	1.8009753855340253E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999808030291508	WITHOUT_CLASSIFICATION	1.919697084919796E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999830106235424	WITHOUT_CLASSIFICATION	1.6989376457455195E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999812804593793	WITHOUT_CLASSIFICATION	1.8719540620740115E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999304566926489	WITHOUT_CLASSIFICATION	6.954330735103326E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998905171748695	WITHOUT_CLASSIFICATION	1.0948282513047136E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999921004700174	WITHOUT_CLASSIFICATION	7.899529982663627E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999289434007931	WITHOUT_CLASSIFICATION	7.105659920686016E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999788010737519	WITHOUT_CLASSIFICATION	2.119892624811103E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570350962411	WITHOUT_CLASSIFICATION	4.2964903758866264E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671927204664	WITHOUT_CLASSIFICATION	3.280727953360079E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692079515694	WITHOUT_CLASSIFICATION	3.0792048430695075E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692079515694	WITHOUT_CLASSIFICATION	3.0792048430695075E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692079515694	WITHOUT_CLASSIFICATION	3.0792048430695075E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99999688940058	WITHOUT_CLASSIFICATION	3.1105994200270516E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99999688940058	WITHOUT_CLASSIFICATION	3.1105994200270516E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998810276405383	WITHOUT_CLASSIFICATION	1.1897235946157917E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999952168880875	WITHOUT_CLASSIFICATION	4.783111912543773E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999824535959148	WITHOUT_CLASSIFICATION	1.75464040852371E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999865506133724	WITHOUT_CLASSIFICATION	1.3449386627763631E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999467613403168	WITHOUT_CLASSIFICATION	5.3238659683209095E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614772093744	WITHOUT_CLASSIFICATION	3.852279062549923E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962756368283	WITHOUT_CLASSIFICATION	3.7243631716889725E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999971305785545	WITHOUT_CLASSIFICATION	2.8694214455055467E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721892218165	WITHOUT_CLASSIFICATION	2.7810778183526366E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614772093744	WITHOUT_CLASSIFICATION	3.852279062549923E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962756368283	WITHOUT_CLASSIFICATION	3.7243631716889725E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999477504551287	WITHOUT_CLASSIFICATION	5.224954487113539E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999798127562427	WITHOUT_CLASSIFICATION	2.0187243757389397E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999968097563999	WITHOUT_CLASSIFICATION	3.1902436000686225E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9998690889275369	WITHOUT_CLASSIFICATION	1.3091107246310775E-4	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999977143838887	WITHOUT_CLASSIFICATION	2.2856161113034815E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999662204723082	WITHOUT_CLASSIFICATION	3.3779527691801154E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999852928997187	WITHOUT_CLASSIFICATION	1.4707100281193978E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999768758086429	WITHOUT_CLASSIFICATION	2.3124191357046847E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997690692342023	WITHOUT_CLASSIFICATION	2.309307657976056E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998821634997653	WITHOUT_CLASSIFICATION	1.1783650023458623E-4	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999974224477328	WITHOUT_CLASSIFICATION	2.57755226719993E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999784895300774	WITHOUT_CLASSIFICATION	2.15104699226389E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999880760360772	WITHOUT_CLASSIFICATION	1.19239639227887E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9936771741237741	WITHOUT_CLASSIFICATION	0.00632282587622589	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999824551132283	WITHOUT_CLASSIFICATION	1.754488677184063E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999588739758242	WITHOUT_CLASSIFICATION	4.1126024175889256E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999280839604746	WITHOUT_CLASSIFICATION	7.19160395253616E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999974731262138	WITHOUT_CLASSIFICATION	2.526873786256892E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999482435104323	WITHOUT_CLASSIFICATION	5.1756489567698146E-5	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999489395922826	WITHOUT_CLASSIFICATION	5.1060407717319876E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999867388057984	WITHOUT_CLASSIFICATION	1.326119420169106E-5	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999820136805639	WITHOUT_CLASSIFICATION	1.798631943605833E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999571719403005	WITHOUT_CLASSIFICATION	4.282805969940969E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612392612003	WITHOUT_CLASSIFICATION	3.876073879978685E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999851144028915	WITHOUT_CLASSIFICATION	1.4885597108574459E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622647298717	WITHOUT_CLASSIFICATION	3.773527012836732E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999409260964627	WITHOUT_CLASSIFICATION	5.9073903537289375E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999394827656939	WITHOUT_CLASSIFICATION	6.051723430602184E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999394827656939	WITHOUT_CLASSIFICATION	6.051723430602184E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999578545096104	WITHOUT_CLASSIFICATION	4.214549038952506E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999996084060378	WITHOUT_CLASSIFICATION	3.91593962199726E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999508220958818	WITHOUT_CLASSIFICATION	4.917790411803362E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999886479172819	WITHOUT_CLASSIFICATION	1.1352082718030654E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999994763612003	WITHOUT_CLASSIFICATION	5.236387997010975E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999718556178051	WITHOUT_CLASSIFICATION	2.8144382194816438E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999816711869305	WITHOUT_CLASSIFICATION	1.8328813069584392E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999923075295916	WITHOUT_CLASSIFICATION	7.692470408398285E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999965599381557	WITHOUT_CLASSIFICATION	3.440061844387361E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621786019286	WITHOUT_CLASSIFICATION	3.782139807140313E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620942117583	WITHOUT_CLASSIFICATION	3.7905788241785635E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621111373099	WITHOUT_CLASSIFICATION	3.7888862690083466E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999740042049029	WITHOUT_CLASSIFICATION	2.5995795097132628E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9984018286165639	WITHOUT_CLASSIFICATION	0.0015981713834360605	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996706817413932	WITHOUT_CLASSIFICATION	3.293182586068914E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999983159512825	WITHOUT_CLASSIFICATION	1.6840487174461366E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999840248750094	WITHOUT_CLASSIFICATION	1.597512499063281E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999452605289448	WITHOUT_CLASSIFICATION	5.4739471055081266E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999482911456868	WITHOUT_CLASSIFICATION	5.1708854313044115E-5	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999895328744818	WITHOUT_CLASSIFICATION	1.046712551824046E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996706817413932	WITHOUT_CLASSIFICATION	3.293182586068914E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996706817413932	WITHOUT_CLASSIFICATION	3.293182586068914E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999559351295277	WITHOUT_CLASSIFICATION	4.4064870472225906E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999512938942668	WITHOUT_CLASSIFICATION	4.870610573311253E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.993666282565894	WITHOUT_CLASSIFICATION	0.0063337174341060246	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999915625245324	WITHOUT_CLASSIFICATION	8.437475467645438E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999885867341993	WITHOUT_CLASSIFICATION	1.1413265800823685E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999280839604746	WITHOUT_CLASSIFICATION	7.19160395253616E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9992676076173365	WITHOUT_CLASSIFICATION	7.323923826634108E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999852958585699	WITHOUT_CLASSIFICATION	1.470414143011903E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999704000313278	WITHOUT_CLASSIFICATION	2.9599968672272537E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686406606645	WITHOUT_CLASSIFICATION	3.1359339335424705E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999892864571231	WITHOUT_CLASSIFICATION	1.0713542876942848E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659888777083	WITHOUT_CLASSIFICATION	3.4011122291664164E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999794022624237	WITHOUT_CLASSIFICATION	2.0597737576333945E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999794022624237	WITHOUT_CLASSIFICATION	2.0597737576333945E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999794022624237	WITHOUT_CLASSIFICATION	2.0597737576333945E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999794022624237	WITHOUT_CLASSIFICATION	2.0597737576333945E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670937028996	WITHOUT_CLASSIFICATION	3.2906297100378716E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999408497527061	WITHOUT_CLASSIFICATION	5.915024729380761E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999218977105866	WITHOUT_CLASSIFICATION	7.810228941346873E-5	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999853160208642	WITHOUT_CLASSIFICATION	1.4683979135847504E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613538561141	WITHOUT_CLASSIFICATION	3.8646143885848286E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644287736914	WITHOUT_CLASSIFICATION	3.5571226308542715E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999982010623931	WITHOUT_CLASSIFICATION	1.7989376069032818E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999901226782177	WITHOUT_CLASSIFICATION	9.877321782353198E-6	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999701856338634	WITHOUT_CLASSIFICATION	2.9814366136574475E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999640449393399	WITHOUT_CLASSIFICATION	3.5955060660134675E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.99999509414425	WITHOUT_CLASSIFICATION	4.905855749950167E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999845219453459	WITHOUT_CLASSIFICATION	1.5478054654083708E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999848889607543	WITHOUT_CLASSIFICATION	1.5111039245793408E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999848889607543	WITHOUT_CLASSIFICATION	1.5111039245793408E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999848889607543	WITHOUT_CLASSIFICATION	1.5111039245793408E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999855027429025	WITHOUT_CLASSIFICATION	1.4497257097333818E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999866251732282	WITHOUT_CLASSIFICATION	1.3374826771811353E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999984577508977	WITHOUT_CLASSIFICATION	1.5422491023899562E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612626975753	WITHOUT_CLASSIFICATION	3.8737302424570926E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999880634819673	WITHOUT_CLASSIFICATION	1.193651803258883E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692079515694	WITHOUT_CLASSIFICATION	3.0792048430695075E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999980245579089	WITHOUT_CLASSIFICATION	1.9754420911369712E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999782811886597	WITHOUT_CLASSIFICATION	2.1718811340290963E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999962922694466	WITHOUT_CLASSIFICATION	3.7077305532742314E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999219204757817	WITHOUT_CLASSIFICATION	7.807952421836449E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612572577771	WITHOUT_CLASSIFICATION	3.874274222290159E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999989868694196	WITHOUT_CLASSIFICATION	1.0131305803835445E-5	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999734121014164	WITHOUT_CLASSIFICATION	2.658789858364354E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999596858607116	WITHOUT_CLASSIFICATION	4.031413928835015E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998870343143385	WITHOUT_CLASSIFICATION	1.1296568566160985E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999645961308227	WITHOUT_CLASSIFICATION	3.540386917738354E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999657808180363	WITHOUT_CLASSIFICATION	3.421918196363066E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999919504293608	WITHOUT_CLASSIFICATION	8.049570639164173E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999995628861126	WITHOUT_CLASSIFICATION	4.371138874789691E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999774173008736	WITHOUT_CLASSIFICATION	2.2582699126371116E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993370511656	WITHOUT_CLASSIFICATION	6.629488344708501E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999104373073386	WITHOUT_CLASSIFICATION	8.956269266130542E-5	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999927382979099	WITHOUT_CLASSIFICATION	7.26170209011478E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999819264620216	WITHOUT_CLASSIFICATION	1.8073537978406898E-4	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999990724577158	WITHOUT_CLASSIFICATION	9.275422841998903E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999745365028306	WITHOUT_CLASSIFICATION	2.5463497169295496E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999735242276666	WITHOUT_CLASSIFICATION	2.6475772333442765E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999911230140798	WITHOUT_CLASSIFICATION	8.876985920321975E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.99999830423231	WITHOUT_CLASSIFICATION	1.6957676900003403E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999853367449091	WITHOUT_CLASSIFICATION	1.4663255090910707E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999327518077261	WITHOUT_CLASSIFICATION	6.724819227394929E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999909136490468	WITHOUT_CLASSIFICATION	9.08635095323149E-6	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9994989628331981	WITHOUT_CLASSIFICATION	5.010371668019214E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999988769409972	WITHOUT_CLASSIFICATION	1.1230590027736814E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999814003827785	WITHOUT_CLASSIFICATION	1.8599617221478672E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999866846119432	WITHOUT_CLASSIFICATION	1.3315388056802897E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999824745566079	WITHOUT_CLASSIFICATION	1.7525443392019277E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999701019838774	WITHOUT_CLASSIFICATION	2.9898016122674133E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999974051128155	WITHOUT_CLASSIFICATION	2.5948871845078624E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999400342541331	WITHOUT_CLASSIFICATION	5.9965745866877476E-5	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999856796663557	WITHOUT_CLASSIFICATION	1.4320333644214863E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999930241561569	WITHOUT_CLASSIFICATION	6.975843843091071E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999517398606806	WITHOUT_CLASSIFICATION	4.826013931933285E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999975848933735	WITHOUT_CLASSIFICATION	2.415106626428018E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999846712680228	WITHOUT_CLASSIFICATION	1.5328731977159433E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999739592983131	WITHOUT_CLASSIFICATION	2.6040701686925078E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999610471287614	WITHOUT_CLASSIFICATION	3.895287123848469E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999969568246199	WITHOUT_CLASSIFICATION	3.0431753802192485E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998451903495952	WITHOUT_CLASSIFICATION	1.5480965040479431E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999539182858197	WITHOUT_CLASSIFICATION	4.608171418034078E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997511692851757	WITHOUT_CLASSIFICATION	2.488307148242922E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999951512060833	WITHOUT_CLASSIFICATION	4.8487939166895894E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999901343440303	WITHOUT_CLASSIFICATION	9.865655969775138E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999471539687252	WITHOUT_CLASSIFICATION	5.284603127473028E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999946972825425	WITHOUT_CLASSIFICATION	5.302717457487626E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999981616506548	WITHOUT_CLASSIFICATION	1.8383493451914522E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995614842305418	WITHOUT_CLASSIFICATION	4.3851576945818087E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999939973015756	WITHOUT_CLASSIFICATION	6.0026984244668985E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999957632195907	WITHOUT_CLASSIFICATION	4.2367804093200796E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9996232322647134	WITHOUT_CLASSIFICATION	3.7676773528660517E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999895847664192	WITHOUT_CLASSIFICATION	1.041523358073527E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999830098191259	WITHOUT_CLASSIFICATION	1.699018087412743E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998796813111913	WITHOUT_CLASSIFICATION	1.2031868880874959E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999994847890636	WITHOUT_CLASSIFICATION	5.152109362983384E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999626768824662	WITHOUT_CLASSIFICATION	3.732311753373851E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999694350648101	WITHOUT_CLASSIFICATION	3.0564935189901114E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999835579074844	WITHOUT_CLASSIFICATION	1.6442092515538304E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999736147827573	WITHOUT_CLASSIFICATION	2.63852172427932E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999983801119522	WITHOUT_CLASSIFICATION	1.6198880477932066E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999774324872005	WITHOUT_CLASSIFICATION	2.256751279951274E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999962719025834	WITHOUT_CLASSIFICATION	3.72809741659586E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999922521456341	WITHOUT_CLASSIFICATION	7.747854365892939E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999772024989634	WITHOUT_CLASSIFICATION	2.2797501036518846E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999401229433776	WITHOUT_CLASSIFICATION	5.9877056622297836E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992860907195	WITHOUT_CLASSIFICATION	7.13909280480202E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999919814559303	WITHOUT_CLASSIFICATION	8.018544069691082E-6	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999871496979177	WITHOUT_CLASSIFICATION	1.2850302082382602E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.99999937792283	WITHOUT_CLASSIFICATION	6.22077169948129E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999820320767862	WITHOUT_CLASSIFICATION	1.796792321387057E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998564024876103	WITHOUT_CLASSIFICATION	1.4359751238964645E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999619143038045	WITHOUT_CLASSIFICATION	3.8085696195480773E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998906402388233	WITHOUT_CLASSIFICATION	1.0935976117667572E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988297579378119	WITHOUT_CLASSIFICATION	0.0011702420621880795	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999668998801482	WITHOUT_CLASSIFICATION	3.3100119851742285E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.999980761048807	WITHOUT_CLASSIFICATION	1.9238951193057958E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999909045948336	WITHOUT_CLASSIFICATION	9.095405166259213E-6	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999730949220296	WITHOUT_CLASSIFICATION	2.69050779704364E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998184634525326	WITHOUT_CLASSIFICATION	1.8153654746742235E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999860556861334	WITHOUT_CLASSIFICATION	1.3944313866612627E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999789381855195	WITHOUT_CLASSIFICATION	2.106181448049988E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999987013347823	WITHOUT_CLASSIFICATION	1.2986652176875808E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999825588911234	WITHOUT_CLASSIFICATION	1.7441108876531595E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998965448179644	WITHOUT_CLASSIFICATION	1.034551820355974E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999658171705991	WITHOUT_CLASSIFICATION	3.4182829400851824E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999841522553393	WITHOUT_CLASSIFICATION	1.584774466065607E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999861863670849	WITHOUT_CLASSIFICATION	1.3813632915110456E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999897883040545	WITHOUT_CLASSIFICATION	1.0211695945486108E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999869637149313	WITHOUT_CLASSIFICATION	1.3036285068659931E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999994086147989	WITHOUT_CLASSIFICATION	5.91385201107439E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999994086147989	WITHOUT_CLASSIFICATION	5.91385201107439E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999381780900329	WITHOUT_CLASSIFICATION	6.182190996709074E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999634171029923	WITHOUT_CLASSIFICATION	3.65828970075996E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999670907681917	WITHOUT_CLASSIFICATION	3.2909231808360463E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9997312750712877	WITHOUT_CLASSIFICATION	2.6872492871231807E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999874233305625	WITHOUT_CLASSIFICATION	1.257666943761918E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996946577664273	WITHOUT_CLASSIFICATION	3.053422335727002E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9985838291457306	WITHOUT_CLASSIFICATION	0.0014161708542694091	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997862549555274	WITHOUT_CLASSIFICATION	2.137450444726459E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999705660752184	WITHOUT_CLASSIFICATION	2.9433924781532332E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9985730666818292	WITHOUT_CLASSIFICATION	0.0014269333181708096	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999917862991395	WITHOUT_CLASSIFICATION	8.213700860496774E-6	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999266416685976	WITHOUT_CLASSIFICATION	7.335833140249302E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998197747975919	WITHOUT_CLASSIFICATION	1.802252024081904E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999935090786508	WITHOUT_CLASSIFICATION	6.490921349227888E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999996293848249	WITHOUT_CLASSIFICATION	3.7061517510761976E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999273639425075	WITHOUT_CLASSIFICATION	7.263605749256933E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999846707419777	WITHOUT_CLASSIFICATION	1.532925802222169E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999846707419777	WITHOUT_CLASSIFICATION	1.532925802222169E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999789432373921	WITHOUT_CLASSIFICATION	2.1056762607871417E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998986415027978	WITHOUT_CLASSIFICATION	1.0135849720220538E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999922186337886	WITHOUT_CLASSIFICATION	7.781366211320163E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999630309324722	WITHOUT_CLASSIFICATION	3.696906752785249E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999819697839339	WITHOUT_CLASSIFICATION	1.8030216066106686E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999854961055786	WITHOUT_CLASSIFICATION	1.4503894421374184E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999819697839339	WITHOUT_CLASSIFICATION	1.8030216066106686E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999784655466709	WITHOUT_CLASSIFICATION	2.153445332906244E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999978335555166	WITHOUT_CLASSIFICATION	2.166444483395342E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999870407529104	WITHOUT_CLASSIFICATION	1.2959247089533358E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999870407529104	WITHOUT_CLASSIFICATION	1.2959247089533358E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999425763801776	WITHOUT_CLASSIFICATION	5.742361982230931E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999597736494106	WITHOUT_CLASSIFICATION	4.022635058945836E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999446267614102	WITHOUT_CLASSIFICATION	5.537323858988613E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999632549159567	WITHOUT_CLASSIFICATION	3.674508404316256E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999059660619	WITHOUT_CLASSIFICATION	9.403393812202163E-8	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9997699473734917	WITHOUT_CLASSIFICATION	2.3005262650832367E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999946738943088	WITHOUT_CLASSIFICATION	5.326105691248916E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999993274426059	WITHOUT_CLASSIFICATION	6.72557394089704E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995088767427	WITHOUT_CLASSIFICATION	4.911232572925271E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998461244859964	WITHOUT_CLASSIFICATION	1.5387551400366644E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999903244223555	WITHOUT_CLASSIFICATION	9.675577644576433E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999526794166703	WITHOUT_CLASSIFICATION	4.7320583329791915E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9963919494752368	WITHOUT_CLASSIFICATION	0.0036080505247632704	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999980953467722	WITHOUT_CLASSIFICATION	1.9046532277980037E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999696910949761	WITHOUT_CLASSIFICATION	3.0308905023768826E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999958326736907	WITHOUT_CLASSIFICATION	4.1673263092869175E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999876547181482	WITHOUT_CLASSIFICATION	1.2345281851881928E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998546763367269	WITHOUT_CLASSIFICATION	1.4532366327318084E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999958713645042	WITHOUT_CLASSIFICATION	4.1286354958035476E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999502627857775	WITHOUT_CLASSIFICATION	4.9737214222626856E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999977649387694	WITHOUT_CLASSIFICATION	2.2350612306083767E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999912056311188	WITHOUT_CLASSIFICATION	8.794368881264748E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999977616611119	WITHOUT_CLASSIFICATION	2.2383388881092176E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999661615118548	WITHOUT_CLASSIFICATION	3.3838488145211546E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999510267885134	WITHOUT_CLASSIFICATION	4.897321148646701E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996328057325818	WITHOUT_CLASSIFICATION	3.6719426741816194E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999821623717357	WITHOUT_CLASSIFICATION	1.78376282643548E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999911725636228	WITHOUT_CLASSIFICATION	8.827436377317321E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986420463969	WITHOUT_CLASSIFICATION	1.3579536031071525E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999801809282479	WITHOUT_CLASSIFICATION	1.981907175206794E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999827879283901	WITHOUT_CLASSIFICATION	1.7212071609913688E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999233662903118	WITHOUT_CLASSIFICATION	7.663370968824641E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999324296672384	WITHOUT_CLASSIFICATION	6.757033276157996E-5	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999723703564237	WITHOUT_CLASSIFICATION	2.7629643576179856E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999732688950558	WITHOUT_CLASSIFICATION	2.6731104944150797E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.999987759385098	WITHOUT_CLASSIFICATION	1.2240614901984614E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.999987759385098	WITHOUT_CLASSIFICATION	1.2240614901984614E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999852879805192	WITHOUT_CLASSIFICATION	1.47120194808048E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999552565296044	WITHOUT_CLASSIFICATION	4.474347039563601E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999951355530489	WITHOUT_CLASSIFICATION	4.864446951088513E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999862550276863	WITHOUT_CLASSIFICATION	1.374497231358702E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999675190101841	WITHOUT_CLASSIFICATION	3.2480989815825136E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999948063657584	WITHOUT_CLASSIFICATION	5.1936342416284795E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999773812464	WITHOUT_CLASSIFICATION	2.2618753733312662E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999611261337066	WITHOUT_CLASSIFICATION	3.887386629345577E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999852879805192	WITHOUT_CLASSIFICATION	1.47120194808048E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999552565296044	WITHOUT_CLASSIFICATION	4.474347039563601E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998059466739612	WITHOUT_CLASSIFICATION	1.9405332603888653E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999399580355768	WITHOUT_CLASSIFICATION	6.0041964423218874E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999943404414894	WITHOUT_CLASSIFICATION	5.659558510675169E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.999962766814514	WITHOUT_CLASSIFICATION	3.723318548594259E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999893898854838	WITHOUT_CLASSIFICATION	1.0610114516190413E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9998639030741535	WITHOUT_CLASSIFICATION	1.3609692584651647E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999819295185922	WITHOUT_CLASSIFICATION	1.8070481407778317E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999883889973183	WITHOUT_CLASSIFICATION	1.161100268163928E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999932314117448	WITHOUT_CLASSIFICATION	6.768588255186453E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9988420072964598	WITHOUT_CLASSIFICATION	0.0011579927035402838	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999894539377286	WITHOUT_CLASSIFICATION	1.0546062271217607E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9988420072964598	WITHOUT_CLASSIFICATION	0.0011579927035402838	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998707960878006	WITHOUT_CLASSIFICATION	1.2920391219947382E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999626768824662	WITHOUT_CLASSIFICATION	3.732311753373851E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998707960878006	WITHOUT_CLASSIFICATION	1.2920391219947382E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998560484667518	WITHOUT_CLASSIFICATION	1.4395153324829618E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999431993059114	WITHOUT_CLASSIFICATION	5.680069408861308E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999883889973183	WITHOUT_CLASSIFICATION	1.161100268163928E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999883889973183	WITHOUT_CLASSIFICATION	1.161100268163928E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999831288371736	WITHOUT_CLASSIFICATION	1.687116282638035E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999831360171988	WITHOUT_CLASSIFICATION	1.6863982801154093E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999831288371736	WITHOUT_CLASSIFICATION	1.687116282638035E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999825598226879	WITHOUT_CLASSIFICATION	1.744017731210872E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999856229045254	WITHOUT_CLASSIFICATION	1.4377095474728065E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999698324465522	WITHOUT_CLASSIFICATION	3.016755344777558E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998758875326408	WITHOUT_CLASSIFICATION	1.2411246735919999E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999831722752446	WITHOUT_CLASSIFICATION	1.682772475542228E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999501820714581	WITHOUT_CLASSIFICATION	4.981792854173216E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999853035304137	WITHOUT_CLASSIFICATION	1.4696469586245314E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999857414154868	WITHOUT_CLASSIFICATION	1.4258584513116219E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999822905617379	WITHOUT_CLASSIFICATION	1.7709438262072222E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999969376800519	WITHOUT_CLASSIFICATION	3.062319948098552E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999866736578933	WITHOUT_CLASSIFICATION	1.332634210675051E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999854442184941	WITHOUT_CLASSIFICATION	1.4555781505841292E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999725908517942	WITHOUT_CLASSIFICATION	2.7409148205740016E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999844007255011	WITHOUT_CLASSIFICATION	1.5599274498889918E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999977847160698	WITHOUT_CLASSIFICATION	2.2152839302004897E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999884838895162	WITHOUT_CLASSIFICATION	1.1516110483777163E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999953493395949	WITHOUT_CLASSIFICATION	4.650660405096756E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999982308381986	WITHOUT_CLASSIFICATION	1.7691618013985626E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999921190637707	WITHOUT_CLASSIFICATION	7.880936229287687E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999846463144351	WITHOUT_CLASSIFICATION	1.53536855649394E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999822860499817	WITHOUT_CLASSIFICATION	1.771395001823098E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999674830141049	WITHOUT_CLASSIFICATION	3.251698589515652E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998496824767555	WITHOUT_CLASSIFICATION	1.5031752324445624E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998910404712218	WITHOUT_CLASSIFICATION	1.0895952877813564E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998643828119715	WITHOUT_CLASSIFICATION	1.3561718802845564E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9883873926050206	WITHOUT_CLASSIFICATION	0.011612607394979376	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999878737432971	WITHOUT_CLASSIFICATION	1.212625670292283E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999831722752446	WITHOUT_CLASSIFICATION	1.682772475542228E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999831073998073	WITHOUT_CLASSIFICATION	1.689260019268778E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999172956385632	WITHOUT_CLASSIFICATION	8.270436143674009E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9261509960317046	WITHOUT_CLASSIFICATION	0.0738490039682954	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999363495101227	WITHOUT_CLASSIFICATION	6.365048987732678E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999891690256141	WITHOUT_CLASSIFICATION	1.0830974386004114E-5	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999901616920487	WITHOUT_CLASSIFICATION	9.838307951195873E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999825598226879	WITHOUT_CLASSIFICATION	1.744017731210872E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999825598226879	WITHOUT_CLASSIFICATION	1.744017731210872E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999928211930582	WITHOUT_CLASSIFICATION	7.178806941776045E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999867156531237	WITHOUT_CLASSIFICATION	1.3284346876377348E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999875151343206	WITHOUT_CLASSIFICATION	1.2484865679384885E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999865621948751	WITHOUT_CLASSIFICATION	1.3437805124861295E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998721171122309	WITHOUT_CLASSIFICATION	1.2788288776904394E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999849529474414	WITHOUT_CLASSIFICATION	1.5047052558711068E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999994255162073	WITHOUT_CLASSIFICATION	5.744837927109067E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999841009619918	WITHOUT_CLASSIFICATION	1.589903800827566E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999340107947151	WITHOUT_CLASSIFICATION	6.598920528486956E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999905649430352	WITHOUT_CLASSIFICATION	9.435056964857375E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924321113912	WITHOUT_CLASSIFICATION	7.567888608797598E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999725908517942	WITHOUT_CLASSIFICATION	2.7409148205740016E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999852879805192	WITHOUT_CLASSIFICATION	1.47120194808048E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924321113912	WITHOUT_CLASSIFICATION	7.567888608797598E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999924324885671	WITHOUT_CLASSIFICATION	7.567511432927698E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999985929312672	WITHOUT_CLASSIFICATION	1.4070687327677976E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999885137151776	WITHOUT_CLASSIFICATION	1.1486284822524066E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9976250340143419	WITHOUT_CLASSIFICATION	0.0023749659856581026	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999325100062008	WITHOUT_CLASSIFICATION	6.748999379917157E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999983258873761	WITHOUT_CLASSIFICATION	1.674112623851291E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999943201577298	WITHOUT_CLASSIFICATION	5.67984227023759E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999804844860903	WITHOUT_CLASSIFICATION	1.9515513909612292E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999852772315525	WITHOUT_CLASSIFICATION	1.4722768447433225E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999787632571908	WITHOUT_CLASSIFICATION	2.123674280928079E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999487092643908	WITHOUT_CLASSIFICATION	5.129073560914855E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999487092643908	WITHOUT_CLASSIFICATION	5.129073560914855E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999564600794704	WITHOUT_CLASSIFICATION	4.3539920529764506E-5	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998492488969764	WITHOUT_CLASSIFICATION	1.5075110302367395E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924321113912	WITHOUT_CLASSIFICATION	7.567888608797598E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999325100062008	WITHOUT_CLASSIFICATION	6.748999379917157E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999943201577298	WITHOUT_CLASSIFICATION	5.67984227023759E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999823697419176	WITHOUT_CLASSIFICATION	1.7630258082451476E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999995127626107	WITHOUT_CLASSIFICATION	4.872373893555246E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999832855278371	WITHOUT_CLASSIFICATION	1.6714472162856864E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999820847758176	WITHOUT_CLASSIFICATION	1.791522418231278E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999877635401212	WITHOUT_CLASSIFICATION	1.2236459878890273E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999852788104594	WITHOUT_CLASSIFICATION	1.4721189540582807E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999924324885671	WITHOUT_CLASSIFICATION	7.567511432927698E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999632819259284	WITHOUT_CLASSIFICATION	3.671807407155354E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999827800059105	WITHOUT_CLASSIFICATION	1.7219994089512004E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999122877228682	WITHOUT_CLASSIFICATION	8.771227713182257E-5	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999573143817937	WITHOUT_CLASSIFICATION	4.2685618206427444E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999559154822121	WITHOUT_CLASSIFICATION	4.4084517787979864E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999921363168903	WITHOUT_CLASSIFICATION	7.863683109697146E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998560484667518	WITHOUT_CLASSIFICATION	1.4395153324829618E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850146881598	WITHOUT_CLASSIFICATION	1.4985311840161376E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998910053612027	WITHOUT_CLASSIFICATION	1.0899463879738873E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999707864755848	WITHOUT_CLASSIFICATION	2.9213524415211254E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999964593574531	WITHOUT_CLASSIFICATION	3.540642546988058E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999953594445752	WITHOUT_CLASSIFICATION	4.640555424863005E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999988533986744	WITHOUT_CLASSIFICATION	1.1466013255999478E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999824781906534	WITHOUT_CLASSIFICATION	1.7521809346523462E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999663628971742	WITHOUT_CLASSIFICATION	3.363710282585083E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999852788104594	WITHOUT_CLASSIFICATION	1.4721189540582807E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999823464992429	WITHOUT_CLASSIFICATION	1.765350075710014E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999670368793301	WITHOUT_CLASSIFICATION	3.2963120669942086E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.999951920505628	WITHOUT_CLASSIFICATION	4.807949437207785E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999947009112294	WITHOUT_CLASSIFICATION	5.299088770582292E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998966084391686	WITHOUT_CLASSIFICATION	1.0339156083139073E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999734785649637	WITHOUT_CLASSIFICATION	2.6521435036361345E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999886108200728	WITHOUT_CLASSIFICATION	1.1389179927206432E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998648295202321	WITHOUT_CLASSIFICATION	1.3517047976781718E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999847450810735	WITHOUT_CLASSIFICATION	1.525491892656169E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999830267801761	WITHOUT_CLASSIFICATION	1.6973219823853014E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999955215614851	WITHOUT_CLASSIFICATION	4.478438514918062E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999895469415331	WITHOUT_CLASSIFICATION	1.0453058466854589E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999985760857224	WITHOUT_CLASSIFICATION	1.423914277560339E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999863377721061	WITHOUT_CLASSIFICATION	1.3662227893787919E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999676500308144	WITHOUT_CLASSIFICATION	3.234996918545688E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999940799731882	WITHOUT_CLASSIFICATION	5.920026811725737E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999555494746858	WITHOUT_CLASSIFICATION	4.445052531407128E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999725770830853	WITHOUT_CLASSIFICATION	2.742291691470819E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999441085667428	WITHOUT_CLASSIFICATION	5.5891433257133604E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999959429548972	WITHOUT_CLASSIFICATION	4.057045102799816E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999891691011485	WITHOUT_CLASSIFICATION	1.0830898851461686E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999342575651956	WITHOUT_CLASSIFICATION	6.574243480432495E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9957273361770151	WITHOUT_CLASSIFICATION	0.004272663822984843	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999887101775975	WITHOUT_CLASSIFICATION	1.1289822402503789E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999605895813306	WITHOUT_CLASSIFICATION	3.941041866939727E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999658280423117	WITHOUT_CLASSIFICATION	3.4171957688280406E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9906807920069589	WITHOUT_CLASSIFICATION	0.009319207993041178	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999960171062802	WITHOUT_CLASSIFICATION	3.9828937197970345E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999844847569102	WITHOUT_CLASSIFICATION	1.5515243089917854E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999823966176253	WITHOUT_CLASSIFICATION	1.7603382374709682E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997382686646231	WITHOUT_CLASSIFICATION	2.617313353769068E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999606433704387	WITHOUT_CLASSIFICATION	3.93566295612307E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999514314565776	WITHOUT_CLASSIFICATION	4.856854342239882E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999606913143384	WITHOUT_CLASSIFICATION	3.93086856615189E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998679014136889	WITHOUT_CLASSIFICATION	1.3209858631108026E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999514314565776	WITHOUT_CLASSIFICATION	4.856854342239882E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999606433704387	WITHOUT_CLASSIFICATION	3.93566295612307E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999606913143384	WITHOUT_CLASSIFICATION	3.93086856615189E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999721678691177	WITHOUT_CLASSIFICATION	2.7832130882190133E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999770917025617	WITHOUT_CLASSIFICATION	2.29082974382275E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9993457060790767	WITHOUT_CLASSIFICATION	6.542939209232478E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999923759306757	WITHOUT_CLASSIFICATION	7.6240693242908225E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999995327308344	WITHOUT_CLASSIFICATION	4.6726916566228756E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9892383665795068	WITHOUT_CLASSIFICATION	0.010761633420493126	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999392605281293	WITHOUT_CLASSIFICATION	6.073947187064402E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999712433121472	WITHOUT_CLASSIFICATION	2.8756687852866466E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999944987213043	WITHOUT_CLASSIFICATION	5.501278695773765E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999841469592933	WITHOUT_CLASSIFICATION	1.5853040706770398E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999845419613629	WITHOUT_CLASSIFICATION	1.545803863710787E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999991360520354	WITHOUT_CLASSIFICATION	8.639479646000335E-6	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999730929783976	WITHOUT_CLASSIFICATION	2.6907021602320703E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999923759306757	WITHOUT_CLASSIFICATION	7.6240693242908225E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999994419471417	WITHOUT_CLASSIFICATION	5.580528582998255E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999886794255302	WITHOUT_CLASSIFICATION	1.1320574469846322E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998827713497175	WITHOUT_CLASSIFICATION	1.172286502825201E-4	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999987352764153	WITHOUT_CLASSIFICATION	1.2647235847707211E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999695664018282	WITHOUT_CLASSIFICATION	3.0433598171781762E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999440312307802	WITHOUT_CLASSIFICATION	5.59687692197717E-5	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999305749043997	WITHOUT_CLASSIFICATION	6.942509560017724E-5	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999972063862884	WITHOUT_CLASSIFICATION	2.7936137115270617E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999820402497877	WITHOUT_CLASSIFICATION	1.7959750212295984E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999469856089365	WITHOUT_CLASSIFICATION	5.3014391063566076E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999440312307802	WITHOUT_CLASSIFICATION	5.59687692197717E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999440312307802	WITHOUT_CLASSIFICATION	5.59687692197717E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999921226943834	WITHOUT_CLASSIFICATION	7.877305616571215E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999921226943834	WITHOUT_CLASSIFICATION	7.877305616571215E-6	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999532199913074	WITHOUT_CLASSIFICATION	4.6780008692755794E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998827713497175	WITHOUT_CLASSIFICATION	1.172286502825201E-4	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998751716409519	WITHOUT_CLASSIFICATION	1.2482835904819255E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999987540224156	WITHOUT_CLASSIFICATION	1.245977584404869E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999901996383892	WITHOUT_CLASSIFICATION	9.80036161087794E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999901996383892	WITHOUT_CLASSIFICATION	9.80036161087794E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999941252973851	WITHOUT_CLASSIFICATION	5.87470261493879E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999397210404456	WITHOUT_CLASSIFICATION	6.0278959554408425E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.99999784983792	WITHOUT_CLASSIFICATION	2.150162080136032E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999867350725624	WITHOUT_CLASSIFICATION	1.326492743764471E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999923763538432	WITHOUT_CLASSIFICATION	7.6236461568297606E-6	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998457869369	WITHOUT_CLASSIFICATION	1.5421306307972716E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999922300067008	WITHOUT_CLASSIFICATION	7.76999329921746E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999712180968638	WITHOUT_CLASSIFICATION	2.8781903136184532E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999906911493086	WITHOUT_CLASSIFICATION	9.308850691471189E-6	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999941386563455	WITHOUT_CLASSIFICATION	5.8613436544670034E-6	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.999984173102237	WITHOUT_CLASSIFICATION	1.5826897763044136E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999611120605589	WITHOUT_CLASSIFICATION	3.8887939441042904E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999669821732882	WITHOUT_CLASSIFICATION	3.30178267117786E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999864937746655	WITHOUT_CLASSIFICATION	1.350622533451888E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999564473614696	WITHOUT_CLASSIFICATION	4.3552638530500026E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999977508601468	WITHOUT_CLASSIFICATION	2.249139853209649E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646888752608	WITHOUT_CLASSIFICATION	3.5311124739202286E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999886935308948	WITHOUT_CLASSIFICATION	1.1306469105087269E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999879669567956	WITHOUT_CLASSIFICATION	1.2033043204320472E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999972806972837	WITHOUT_CLASSIFICATION	2.7193027162637873E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999988002279295	WITHOUT_CLASSIFICATION	1.199772070500266E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.999855941085793	WITHOUT_CLASSIFICATION	1.4405891420700762E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999915477644543	WITHOUT_CLASSIFICATION	8.45223554564214E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999990966411371	WITHOUT_CLASSIFICATION	9.033588629004249E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999886479172819	WITHOUT_CLASSIFICATION	1.1352082718030654E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999840428615806	WITHOUT_CLASSIFICATION	1.5957138419451855E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999830267801761	WITHOUT_CLASSIFICATION	1.6973219823853014E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999885358394692	WITHOUT_CLASSIFICATION	1.1464160530747809E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999928901863124	WITHOUT_CLASSIFICATION	7.109813687676655E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612586931461	WITHOUT_CLASSIFICATION	3.8741306853926336E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608774093018	WITHOUT_CLASSIFICATION	3.912259069808924E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999873549082787	WITHOUT_CLASSIFICATION	1.2645091721292464E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999873549082787	WITHOUT_CLASSIFICATION	1.2645091721292464E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999681067631864	WITHOUT_CLASSIFICATION	3.189323681371487E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999873432878625	WITHOUT_CLASSIFICATION	1.265671213740192E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999836776823452	WITHOUT_CLASSIFICATION	1.632231765480362E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999836776823452	WITHOUT_CLASSIFICATION	1.632231765480362E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998930334101233	WITHOUT_CLASSIFICATION	1.0696658987680595E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998609569134757	WITHOUT_CLASSIFICATION	1.390430865243822E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.999982639201373	WITHOUT_CLASSIFICATION	1.7360798627047594E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999885867341993	WITHOUT_CLASSIFICATION	1.1413265800823685E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.999983411861114	WITHOUT_CLASSIFICATION	1.658813888594789E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996865227610524	WITHOUT_CLASSIFICATION	3.1347723894761397E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999754103416479	WITHOUT_CLASSIFICATION	2.4589658352016665E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999953913260996	WITHOUT_CLASSIFICATION	4.6086739003969454E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999953913260996	WITHOUT_CLASSIFICATION	4.6086739003969454E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999906256375772	WITHOUT_CLASSIFICATION	9.37436242271334E-6	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999328169622108	WITHOUT_CLASSIFICATION	6.718303778914459E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999328169622108	WITHOUT_CLASSIFICATION	6.718303778914459E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999591061992994	WITHOUT_CLASSIFICATION	4.0893800700616016E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999839602121855	WITHOUT_CLASSIFICATION	1.603978781451564E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999893900771191	WITHOUT_CLASSIFICATION	1.0609922880876826E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999802551751384	WITHOUT_CLASSIFICATION	1.974482486158204E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999985205855692	WITHOUT_CLASSIFICATION	1.4794144308039889E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999583852266913	WITHOUT_CLASSIFICATION	4.1614773308772735E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998484918142778	WITHOUT_CLASSIFICATION	1.515081857222154E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999919086048452	WITHOUT_CLASSIFICATION	8.0913951547854E-6	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998139263865715	WITHOUT_CLASSIFICATION	1.8607361342853115E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.999994827640401	WITHOUT_CLASSIFICATION	5.172359598983969E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999622605409079	WITHOUT_CLASSIFICATION	3.773945909212063E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999852855903765	WITHOUT_CLASSIFICATION	1.471440962356252E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999852855903765	WITHOUT_CLASSIFICATION	1.471440962356252E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999852855903765	WITHOUT_CLASSIFICATION	1.471440962356252E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999852855903765	WITHOUT_CLASSIFICATION	1.471440962356252E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999682969136277	WITHOUT_CLASSIFICATION	3.170308637238259E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999140443807536	WITHOUT_CLASSIFICATION	8.595561924645587E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999816711869305	WITHOUT_CLASSIFICATION	1.8328813069584392E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999760510116974	WITHOUT_CLASSIFICATION	2.3948988302624944E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999362758936318	WITHOUT_CLASSIFICATION	6.372410636824367E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996021967228091	WITHOUT_CLASSIFICATION	3.978032771908161E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999312090096978	WITHOUT_CLASSIFICATION	6.879099030217212E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999978828384489	WITHOUT_CLASSIFICATION	2.1171615511455624E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999850620699569	WITHOUT_CLASSIFICATION	1.4937930043187832E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999838226474876	WITHOUT_CLASSIFICATION	1.6177352512442032E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999436061781359	WITHOUT_CLASSIFICATION	5.639382186401122E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9901810493357711	WITHOUT_CLASSIFICATION	0.009818950664228937	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996118744146566	WITHOUT_CLASSIFICATION	3.8812558534341877E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999399123410407	WITHOUT_CLASSIFICATION	6.0087658959233116E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999436061781359	WITHOUT_CLASSIFICATION	5.639382186401122E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9968644803185052	WITHOUT_CLASSIFICATION	0.003135519681494785	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999950056506763	WITHOUT_CLASSIFICATION	4.994349323726605E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999892503421791	WITHOUT_CLASSIFICATION	1.0749657820906017E-4	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999672330491148	WITHOUT_CLASSIFICATION	3.2766950885203705E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999512821310767	WITHOUT_CLASSIFICATION	4.8717868923308375E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999046594464859	WITHOUT_CLASSIFICATION	9.534055351408169E-5	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999974851640785	WITHOUT_CLASSIFICATION	2.5148359215967256E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999916190227311	WITHOUT_CLASSIFICATION	8.380977268802393E-6	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861228483619	WITHOUT_CLASSIFICATION	1.3877151638130901E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999897400375206	WITHOUT_CLASSIFICATION	1.0259962479421085E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861228483619	WITHOUT_CLASSIFICATION	1.3877151638130901E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999859236773793	WITHOUT_CLASSIFICATION	1.407632262089446E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999694236651397	WITHOUT_CLASSIFICATION	3.057633486030382E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996882188693557	WITHOUT_CLASSIFICATION	3.1178113064443273E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999961251960335	WITHOUT_CLASSIFICATION	3.874803966455118E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999944298985207	WITHOUT_CLASSIFICATION	5.5701014792690645E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999920936298079	WITHOUT_CLASSIFICATION	7.906370192103281E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999830996184811	WITHOUT_CLASSIFICATION	1.690038151892349E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996267234630015	WITHOUT_CLASSIFICATION	3.7327653699846416E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999830996184811	WITHOUT_CLASSIFICATION	1.690038151892349E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999986276274021	WITHOUT_CLASSIFICATION	1.372372597898982E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999776920023118	WITHOUT_CLASSIFICATION	2.230799768822934E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999703996200179	WITHOUT_CLASSIFICATION	2.9600379982144976E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999599074186215	WITHOUT_CLASSIFICATION	4.0092581378547336E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999979082624071	WITHOUT_CLASSIFICATION	2.0917375929023394E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997880071225829	WITHOUT_CLASSIFICATION	2.1199287741719314E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999920936298079	WITHOUT_CLASSIFICATION	7.906370192103281E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996267234630015	WITHOUT_CLASSIFICATION	3.7327653699846416E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999986276274021	WITHOUT_CLASSIFICATION	1.372372597898982E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999258680584507	WITHOUT_CLASSIFICATION	7.41319415492089E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999922744569025	WITHOUT_CLASSIFICATION	7.725543097389829E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999912379528217	WITHOUT_CLASSIFICATION	8.762047178168E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999995740334411	WITHOUT_CLASSIFICATION	4.2596655888365246E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999934545750008	WITHOUT_CLASSIFICATION	6.545424999331562E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999977901071137	WITHOUT_CLASSIFICATION	2.209892886301481E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999921435957974	WITHOUT_CLASSIFICATION	7.856404202626543E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646888752608	WITHOUT_CLASSIFICATION	3.5311124739202286E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999776920023118	WITHOUT_CLASSIFICATION	2.230799768822934E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999933139717407	WITHOUT_CLASSIFICATION	6.686028259318437E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999831288371736	WITHOUT_CLASSIFICATION	1.687116282638035E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999514884458302	WITHOUT_CLASSIFICATION	4.851155416977619E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999682965841526	WITHOUT_CLASSIFICATION	3.170341584732016E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646888752608	WITHOUT_CLASSIFICATION	3.5311124739202286E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999817720508649	WITHOUT_CLASSIFICATION	1.8227949135155158E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646888752608	WITHOUT_CLASSIFICATION	3.5311124739202286E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999709803999018	WITHOUT_CLASSIFICATION	2.9019600098089033E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999983709819479	WITHOUT_CLASSIFICATION	1.6290180520877372E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999701056627194	WITHOUT_CLASSIFICATION	2.9894337280531597E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999608659932058	WITHOUT_CLASSIFICATION	3.913400679410312E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999959417814902	WITHOUT_CLASSIFICATION	4.058218509865468E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999874194014167	WITHOUT_CLASSIFICATION	1.2580598583292335E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999843117478575	WITHOUT_CLASSIFICATION	1.5688252142415907E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999805784199624	WITHOUT_CLASSIFICATION	1.942158003763954E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999625674811206	WITHOUT_CLASSIFICATION	3.743251887951437E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999008735282459	WITHOUT_CLASSIFICATION	9.912647175407822E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999882967823917	WITHOUT_CLASSIFICATION	1.1703217608337214E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.999924577494772	WITHOUT_CLASSIFICATION	7.542250522795267E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9996903429358288	WITHOUT_CLASSIFICATION	3.096570641712519E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.999982293412637	WITHOUT_CLASSIFICATION	1.77065873629917E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999641839288946	WITHOUT_CLASSIFICATION	3.5816071105245034E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999132195637	WITHOUT_CLASSIFICATION	8.678043629963351E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999927760084232	WITHOUT_CLASSIFICATION	7.2239915768892615E-6	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998847719752442	WITHOUT_CLASSIFICATION	1.1522802475585937E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999980209787022	WITHOUT_CLASSIFICATION	1.9790212978378855E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999916887625917	WITHOUT_CLASSIFICATION	8.311237408275223E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999936109260171	WITHOUT_CLASSIFICATION	6.389073982909698E-5	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999936109260171	WITHOUT_CLASSIFICATION	6.389073982909698E-5	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999907531222662	WITHOUT_CLASSIFICATION	9.246877733852435E-6	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999621758378486	WITHOUT_CLASSIFICATION	3.782416215134583E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999985282946911	WITHOUT_CLASSIFICATION	1.4717053088889469E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999757180369858	WITHOUT_CLASSIFICATION	2.4281963014086013E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995565537727	WITHOUT_CLASSIFICATION	4.434462273429398E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999928482127536	WITHOUT_CLASSIFICATION	7.151787246476967E-6	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999711661912806	WITHOUT_CLASSIFICATION	2.8833808719409958E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999950443961372	WITHOUT_CLASSIFICATION	4.9556038628001125E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9937207334077824	WITHOUT_CLASSIFICATION	0.0062792665922175705	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999914570736016	WITHOUT_CLASSIFICATION	8.542926398417944E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999629108323566	WITHOUT_CLASSIFICATION	3.7089167643358244E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999453732212745	WITHOUT_CLASSIFICATION	5.462677872546389E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998454351866192	WITHOUT_CLASSIFICATION	1.5456481338076947E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999831209134017	WITHOUT_CLASSIFICATION	1.6879086598247947E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999977254673396	WITHOUT_CLASSIFICATION	2.274532660450531E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999816960222717	WITHOUT_CLASSIFICATION	1.8303977728316015E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999871778235817	WITHOUT_CLASSIFICATION	1.2822176418275832E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999871778235817	WITHOUT_CLASSIFICATION	1.2822176418275832E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999957389296464	WITHOUT_CLASSIFICATION	4.261070353599123E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999805784199624	WITHOUT_CLASSIFICATION	1.942158003763954E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999545069492888	WITHOUT_CLASSIFICATION	4.549305071119764E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999571929378285	WITHOUT_CLASSIFICATION	4.280706217144614E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999995049800548	WITHOUT_CLASSIFICATION	4.950199452044504E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999804036982538	WITHOUT_CLASSIFICATION	1.9596301746254113E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999795796259002	WITHOUT_CLASSIFICATION	2.042037409977801E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999854948702339	WITHOUT_CLASSIFICATION	1.4505129766113774E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999925479650528	WITHOUT_CLASSIFICATION	7.452034947223747E-6	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998818290645505	WITHOUT_CLASSIFICATION	1.1817093544955862E-4	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999926288210277	WITHOUT_CLASSIFICATION	7.371178972293509E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999964134893902	WITHOUT_CLASSIFICATION	3.5865106098925306E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999969630251561	WITHOUT_CLASSIFICATION	3.0369748438915048E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999406122917476	WITHOUT_CLASSIFICATION	5.938770825237182E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999962116587248	WITHOUT_CLASSIFICATION	3.788341275199406E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999744087665325	WITHOUT_CLASSIFICATION	2.5591233467394485E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999931678353285	WITHOUT_CLASSIFICATION	6.83216467146817E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999978537211461	WITHOUT_CLASSIFICATION	2.146278853847949E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999960433078121	WITHOUT_CLASSIFICATION	3.956692187925227E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999976379165928	WITHOUT_CLASSIFICATION	2.3620834072822634E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999513610772891	WITHOUT_CLASSIFICATION	4.863892271087861E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999867313496086	WITHOUT_CLASSIFICATION	1.3268650391399175E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999970004169966	WITHOUT_CLASSIFICATION	2.999583003402086E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999897955812672	WITHOUT_CLASSIFICATION	1.020441873273368E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999618239654655	WITHOUT_CLASSIFICATION	3.8176034534382185E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999872792340161	WITHOUT_CLASSIFICATION	1.2720765983880438E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998920475974857	WITHOUT_CLASSIFICATION	1.0795240251428125E-4	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999048076091936	WITHOUT_CLASSIFICATION	9.519239080630564E-5	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999169069608821	WITHOUT_CLASSIFICATION	8.309303911783935E-5	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999459754830862	WITHOUT_CLASSIFICATION	5.402451691379072E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999614936286818	WITHOUT_CLASSIFICATION	3.850637131815281E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999625079090444	WITHOUT_CLASSIFICATION	3.7492090955695015E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999963031915503	WITHOUT_CLASSIFICATION	3.6968084496336433E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999638828512484	WITHOUT_CLASSIFICATION	3.611714875157685E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999823358313275	WITHOUT_CLASSIFICATION	1.766416867261019E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9967771123172592	WITHOUT_CLASSIFICATION	0.0032228876827408333	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999294367682048	WITHOUT_CLASSIFICATION	7.056323179527764E-5	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999916023944365	WITHOUT_CLASSIFICATION	8.397605563424198E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997783079309719	WITHOUT_CLASSIFICATION	2.2169206902804324E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997783079309719	WITHOUT_CLASSIFICATION	2.2169206902804324E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999968880902591	WITHOUT_CLASSIFICATION	3.111909740912586E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999713534099447	WITHOUT_CLASSIFICATION	2.864659005538831E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999551846517089	WITHOUT_CLASSIFICATION	4.4815348291099775E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999551846517089	WITHOUT_CLASSIFICATION	4.4815348291099775E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999964468412702	WITHOUT_CLASSIFICATION	3.553158729886557E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999937954863635	WITHOUT_CLASSIFICATION	6.204513636534681E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999857292974701	WITHOUT_CLASSIFICATION	1.4270702529940997E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999970857427323	WITHOUT_CLASSIFICATION	2.9142572676225136E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999619980613031	WITHOUT_CLASSIFICATION	3.800193869691765E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999612835084595	WITHOUT_CLASSIFICATION	3.8716491540467664E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999992424378538	WITHOUT_CLASSIFICATION	7.575621462020044E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999992424378538	WITHOUT_CLASSIFICATION	7.575621462020044E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999612835084595	WITHOUT_CLASSIFICATION	3.8716491540467664E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999804064533329	WITHOUT_CLASSIFICATION	1.9593546667065843E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999825598226879	WITHOUT_CLASSIFICATION	1.744017731210872E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999822507584876	WITHOUT_CLASSIFICATION	1.7749241512355025E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999822507584876	WITHOUT_CLASSIFICATION	1.7749241512355025E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999865331820641	WITHOUT_CLASSIFICATION	1.346681793596185E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999949597516932	WITHOUT_CLASSIFICATION	5.040248306842053E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994760605504	WITHOUT_CLASSIFICATION	5.2393944960011085E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999805718996869	WITHOUT_CLASSIFICATION	1.9428100313077026E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999988437817337	WITHOUT_CLASSIFICATION	1.1562182662976718E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999823128477083	WITHOUT_CLASSIFICATION	1.7687152291739158E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999996261040982	WITHOUT_CLASSIFICATION	3.7389590179139757E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999949089052296	WITHOUT_CLASSIFICATION	5.091094770428615E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999905672820147	WITHOUT_CLASSIFICATION	9.432717985296138E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999746068081178	WITHOUT_CLASSIFICATION	2.539319188232284E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999940212292608	WITHOUT_CLASSIFICATION	5.978770739100387E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9993366547331243	WITHOUT_CLASSIFICATION	6.633452668757034E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999220793261172	WITHOUT_CLASSIFICATION	7.792067388275514E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999981586107908	WITHOUT_CLASSIFICATION	1.8413892091106894E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999853675328298	WITHOUT_CLASSIFICATION	1.4632467170071394E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996766690409858	WITHOUT_CLASSIFICATION	3.233309590140929E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999944781952201	WITHOUT_CLASSIFICATION	5.521804779929703E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999971176253412	WITHOUT_CLASSIFICATION	2.8823746587980286E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999783558214501	WITHOUT_CLASSIFICATION	2.1644178549852117E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999243324250576	WITHOUT_CLASSIFICATION	7.566757494227806E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999680582438473	WITHOUT_CLASSIFICATION	3.1941756152710316E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999590774223397	WITHOUT_CLASSIFICATION	4.092257766021622E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.997339862340248	WITHOUT_CLASSIFICATION	0.0026601376597519466	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999245405945631	WITHOUT_CLASSIFICATION	7.545940543680657E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999971407688819	WITHOUT_CLASSIFICATION	2.859231118040824E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999886758158468	WITHOUT_CLASSIFICATION	1.1324184153284334E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999764126089619	WITHOUT_CLASSIFICATION	2.358739103818906E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999976647795711	WITHOUT_CLASSIFICATION	2.3352204289598866E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999784895300774	WITHOUT_CLASSIFICATION	2.15104699226389E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999482435104323	WITHOUT_CLASSIFICATION	5.1756489567698146E-5	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999670783097125	WITHOUT_CLASSIFICATION	3.2921690287368355E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999857820907211	WITHOUT_CLASSIFICATION	1.4217909278926077E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999822448917388	WITHOUT_CLASSIFICATION	1.7755108261224867E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999900208688279	WITHOUT_CLASSIFICATION	9.979131172052487E-6	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999669580500864	WITHOUT_CLASSIFICATION	3.304194991364224E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999712688169397	WITHOUT_CLASSIFICATION	2.8731183060352453E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999906782560007	WITHOUT_CLASSIFICATION	9.321743999209081E-6	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999950554362566	WITHOUT_CLASSIFICATION	4.944563743373994E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999976316683902	WITHOUT_CLASSIFICATION	2.3683316097874425E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999849296504671	WITHOUT_CLASSIFICATION	1.5070349532866753E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999837160712484	WITHOUT_CLASSIFICATION	1.628392875162501E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999857207530812	WITHOUT_CLASSIFICATION	1.4279246918787102E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999829381728893	WITHOUT_CLASSIFICATION	1.7061827110735047E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999976774469161	WITHOUT_CLASSIFICATION	2.3225530838322143E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999661562553579	WITHOUT_CLASSIFICATION	3.384374464217384E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999519974419219	WITHOUT_CLASSIFICATION	4.800255807818137E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999989580127305	WITHOUT_CLASSIFICATION	1.0419872695052755E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999542556353885	WITHOUT_CLASSIFICATION	4.574436461156511E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999992030481211	WITHOUT_CLASSIFICATION	7.969518788927307E-6	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9947418486232514	WITHOUT_CLASSIFICATION	0.005258151376748531	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999963395536734	WITHOUT_CLASSIFICATION	3.6604463265749904E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999970927478063	WITHOUT_CLASSIFICATION	2.907252193780843E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999772869851341	WITHOUT_CLASSIFICATION	2.2713014865910302E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999959756134976	WITHOUT_CLASSIFICATION	4.024386502343584E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999759155170357	WITHOUT_CLASSIFICATION	2.4084482964256964E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999938074892302	WITHOUT_CLASSIFICATION	6.192510769882323E-6	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999381965024176	WITHOUT_CLASSIFICATION	6.180349758235561E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988921087872	WITHOUT_CLASSIFICATION	1.1078912127276588E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988921087872	WITHOUT_CLASSIFICATION	1.1078912127276588E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999710952515325	WITHOUT_CLASSIFICATION	2.8904748467503138E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999803352845952	WITHOUT_CLASSIFICATION	1.9664715404901203E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999883571058132	WITHOUT_CLASSIFICATION	1.1642894186816596E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999647641920189	WITHOUT_CLASSIFICATION	3.5235807981270056E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999505626871358	WITHOUT_CLASSIFICATION	4.943731286419484E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9993867308214264	WITHOUT_CLASSIFICATION	6.132691785736142E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999730386568543	WITHOUT_CLASSIFICATION	2.696134314568946E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999992975994517	WITHOUT_CLASSIFICATION	7.02400548344979E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999665796632977	WITHOUT_CLASSIFICATION	3.3420336702198886E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999862415033006	WITHOUT_CLASSIFICATION	1.375849669950574E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999915805263956	WITHOUT_CLASSIFICATION	8.419473604385764E-6	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999146550898227	WITHOUT_CLASSIFICATION	8.534491017725632E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999994354964416	WITHOUT_CLASSIFICATION	5.645035583958664E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998343980344014	WITHOUT_CLASSIFICATION	1.6560196559847922E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999819902461446	WITHOUT_CLASSIFICATION	1.8009753855340253E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999819902461446	WITHOUT_CLASSIFICATION	1.8009753855340253E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999749292006578	WITHOUT_CLASSIFICATION	2.507079934223658E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999749201600744	WITHOUT_CLASSIFICATION	2.5079839925515635E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999835114800391	WITHOUT_CLASSIFICATION	1.6488519960927886E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999988884426045	WITHOUT_CLASSIFICATION	1.111557395490009E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999808030291508	WITHOUT_CLASSIFICATION	1.919697084919796E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727472116126	WITHOUT_CLASSIFICATION	2.7252788387421213E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999913489987523	WITHOUT_CLASSIFICATION	8.651001247685415E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999933861718758	WITHOUT_CLASSIFICATION	6.613828124157727E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999723379384923	WITHOUT_CLASSIFICATION	2.7662061507704685E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999998358115279	WITHOUT_CLASSIFICATION	1.6418847210559748E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9994510630443157	WITHOUT_CLASSIFICATION	5.489369556842707E-4	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999923524965378	WITHOUT_CLASSIFICATION	7.647503462192053E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999661841983429	WITHOUT_CLASSIFICATION	3.3815801656966044E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999781206279653	WITHOUT_CLASSIFICATION	2.187937203472508E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999808092173342	WITHOUT_CLASSIFICATION	1.919078266576563E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999760861121004	WITHOUT_CLASSIFICATION	2.3913887899525008E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999892663204594	WITHOUT_CLASSIFICATION	1.0733679540655726E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999286100691236	WITHOUT_CLASSIFICATION	7.138993087637414E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999599476976939	WITHOUT_CLASSIFICATION	4.005230230595341E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999624723597845	WITHOUT_CLASSIFICATION	3.7527640215537954E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999531287807091	WITHOUT_CLASSIFICATION	4.6871219290950584E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999949717209785	WITHOUT_CLASSIFICATION	5.028279021540651E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999645434634139	WITHOUT_CLASSIFICATION	3.545653658613616E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994679474159	WITHOUT_CLASSIFICATION	5.320525841045224E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999846922451014	WITHOUT_CLASSIFICATION	1.530775489851173E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999822447299678	WITHOUT_CLASSIFICATION	1.7755270032210448E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997690692342023	WITHOUT_CLASSIFICATION	2.309307657976056E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999873641006153	WITHOUT_CLASSIFICATION	1.2635899384827384E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999953420280159	WITHOUT_CLASSIFICATION	4.657971984061664E-6	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999929431541729	WITHOUT_CLASSIFICATION	7.056845827124821E-6	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999801212543217	WITHOUT_CLASSIFICATION	1.987874567838005E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999731290097459	WITHOUT_CLASSIFICATION	2.6870990254099367E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999291892861659	WITHOUT_CLASSIFICATION	7.081071383413531E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999987113025436	WITHOUT_CLASSIFICATION	1.2886974564316704E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999792915071376	WITHOUT_CLASSIFICATION	2.0708492862416527E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999870798978562	WITHOUT_CLASSIFICATION	1.292010214389657E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999753390790459	WITHOUT_CLASSIFICATION	2.4660920954096764E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999958672226437	WITHOUT_CLASSIFICATION	4.132777356397042E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999980488059379	WITHOUT_CLASSIFICATION	1.95119406211022E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999181653029207	WITHOUT_CLASSIFICATION	8.183469707930291E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9998431330968685	WITHOUT_CLASSIFICATION	1.5686690313146778E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999900809764566	WITHOUT_CLASSIFICATION	9.919023543439086E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998647411446236	WITHOUT_CLASSIFICATION	1.3525885537624374E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998647411446236	WITHOUT_CLASSIFICATION	1.3525885537624374E-4	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999989658938957	WITHOUT_CLASSIFICATION	1.0341061042982855E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999996153158424	WITHOUT_CLASSIFICATION	3.846841575992926E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9988874051917112	WITHOUT_CLASSIFICATION	0.0011125948082889206	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999718498340572	WITHOUT_CLASSIFICATION	2.8150165942814543E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999907775102359	WITHOUT_CLASSIFICATION	9.222489763995163E-6	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999981303091854	WITHOUT_CLASSIFICATION	1.8696908146573175E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999724225859523	WITHOUT_CLASSIFICATION	2.75774140477679E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998867351465812	WITHOUT_CLASSIFICATION	1.1326485341884488E-4	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999992644389848	WITHOUT_CLASSIFICATION	7.35561015225509E-7	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622010060792	WITHOUT_CLASSIFICATION	3.779899392078845E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620885646057	WITHOUT_CLASSIFICATION	3.7911435394321565E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996706817413932	WITHOUT_CLASSIFICATION	3.293182586068914E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9935336856565483	WITHOUT_CLASSIFICATION	0.006466314343451667	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999980835650774	WITHOUT_CLASSIFICATION	1.916434922647177E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999710796771083	WITHOUT_CLASSIFICATION	2.8920322891677067E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9991807604282997	WITHOUT_CLASSIFICATION	8.192395717002258E-4	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999950664943759	WITHOUT_CLASSIFICATION	4.9335056241125465E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999987303810983	WITHOUT_CLASSIFICATION	1.2696189017587068E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999862829204041	WITHOUT_CLASSIFICATION	1.3717079595883549E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998260873864783	WITHOUT_CLASSIFICATION	1.7391261352167137E-4	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999590501287299	WITHOUT_CLASSIFICATION	4.094987127009274E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998059381425	WITHOUT_CLASSIFICATION	1.940618575597784E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999665725569823	WITHOUT_CLASSIFICATION	3.342744301767601E-5	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999233488057654	WITHOUT_CLASSIFICATION	7.66511942346767E-5	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999790109457072	WITHOUT_CLASSIFICATION	2.0989054292765062E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999543628953795	WITHOUT_CLASSIFICATION	4.563710462038449E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999996240553112	WITHOUT_CLASSIFICATION	3.759446887957367E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999915419067266	WITHOUT_CLASSIFICATION	8.45809327341741E-6	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9985529222227201	WITHOUT_CLASSIFICATION	0.0014470777772799363	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998845989983218	WITHOUT_CLASSIFICATION	1.1540100167805627E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999928864285559	WITHOUT_CLASSIFICATION	7.113571444064209E-6	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999963186077375	WITHOUT_CLASSIFICATION	3.6813922624246694E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999973788141091	WITHOUT_CLASSIFICATION	2.621185890978792E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999968051076621	WITHOUT_CLASSIFICATION	3.1948923378619616E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999982246729372	WITHOUT_CLASSIFICATION	1.7753270628424722E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999785587739847	WITHOUT_CLASSIFICATION	2.144122601528591E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999968703362965	WITHOUT_CLASSIFICATION	3.1296637034088387E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999814974634864	WITHOUT_CLASSIFICATION	1.8502536513583933E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999796715460673	WITHOUT_CLASSIFICATION	2.0328453932708797E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999417929440337	WITHOUT_CLASSIFICATION	5.820705596629928E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999941201617489	WITHOUT_CLASSIFICATION	5.8798382510619545E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998677703545976	WITHOUT_CLASSIFICATION	1.322296454022689E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999911647843477	WITHOUT_CLASSIFICATION	8.835215652411355E-6	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999986652398023	WITHOUT_CLASSIFICATION	1.3347601976388871E-6	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999898514848546	WITHOUT_CLASSIFICATION	1.0148515145344298E-5	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9996922106549532	WITHOUT_CLASSIFICATION	3.077893450467596E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9987844132785864	WITHOUT_CLASSIFICATION	0.0012155867214137242	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999230314359563	WITHOUT_CLASSIFICATION	7.696856404372714E-5	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999994558681681	WITHOUT_CLASSIFICATION	5.441318319726205E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999994354964416	WITHOUT_CLASSIFICATION	5.645035583958664E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999968079504943	WITHOUT_CLASSIFICATION	3.1920495057860872E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999997317026103	WITHOUT_CLASSIFICATION	2.682973897590345E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999912348141418	WITHOUT_CLASSIFICATION	8.765185858264058E-6	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999983997736017	WITHOUT_CLASSIFICATION	1.6002263983610556E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999898677036859	WITHOUT_CLASSIFICATION	1.0132296314107996E-5	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999943240028083	WITHOUT_CLASSIFICATION	5.67599719160008E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998732560473902	WITHOUT_CLASSIFICATION	1.2674395260981028E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9990891337757287	WITHOUT_CLASSIFICATION	9.108662242712452E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999701856338634	WITHOUT_CLASSIFICATION	2.9814366136574475E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999925919431721	WITHOUT_CLASSIFICATION	7.4080568279581125E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999976261602365	WITHOUT_CLASSIFICATION	2.3738397636615767E-6	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9994968459171513	WITHOUT_CLASSIFICATION	5.031540828486957E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997594662647595	WITHOUT_CLASSIFICATION	2.405337352405067E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999856534899882	WITHOUT_CLASSIFICATION	1.434651001182156E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998710231845467	WITHOUT_CLASSIFICATION	1.2897681545335257E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997929054478263	WITHOUT_CLASSIFICATION	2.0709455217369986E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999747556898665	WITHOUT_CLASSIFICATION	2.5244310133528234E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997952951226	WITHOUT_CLASSIFICATION	2.0470487746950818E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999994898101702	WITHOUT_CLASSIFICATION	5.101898297908926E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997929054478263	WITHOUT_CLASSIFICATION	2.0709455217369986E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999189668614622	WITHOUT_CLASSIFICATION	8.103313853772084E-5	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999991122713765	WITHOUT_CLASSIFICATION	8.877286236164311E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999986683573137	WITHOUT_CLASSIFICATION	1.3316426863888653E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999840181368983	WITHOUT_CLASSIFICATION	1.5981863101761294E-5	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999730502796207	WITHOUT_CLASSIFICATION	2.6949720379240756E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998744102920972	WITHOUT_CLASSIFICATION	1.2558970790271882E-4	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999975991281547	WITHOUT_CLASSIFICATION	2.4008718453151848E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9970726097602916	WITHOUT_CLASSIFICATION	0.0029273902397084577	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998160733403489	WITHOUT_CLASSIFICATION	1.83926659650998E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998514060822394	WITHOUT_CLASSIFICATION	1.48593917760609E-4	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999280197316057	WITHOUT_CLASSIFICATION	7.198026839430807E-5	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9995961448764585	WITHOUT_CLASSIFICATION	4.0385512354137646E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999925980532324	WITHOUT_CLASSIFICATION	7.4019467675654395E-6	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999667030726421	WITHOUT_CLASSIFICATION	3.3296927357878254E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999976422082945	WITHOUT_CLASSIFICATION	2.3577917055158524E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999853867552275	WITHOUT_CLASSIFICATION	1.4613244772478394E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999970004169966	WITHOUT_CLASSIFICATION	2.999583003402086E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999925213966092	WITHOUT_CLASSIFICATION	7.478603390852613E-6	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999964225175885	WITHOUT_CLASSIFICATION	3.5774824115560173E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9996996143793373	WITHOUT_CLASSIFICATION	3.003856206626337E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999948341827871	WITHOUT_CLASSIFICATION	5.1658172128042585E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999955210874606	WITHOUT_CLASSIFICATION	4.4789125393828465E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999988904300503	WITHOUT_CLASSIFICATION	1.1095699497018225E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999987123888668	WITHOUT_CLASSIFICATION	1.2876111331118374E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999997315863282	WITHOUT_CLASSIFICATION	2.6841367190537227E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999372320961	WITHOUT_CLASSIFICATION	6.276790389884166E-7	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999602538965713	WITHOUT_CLASSIFICATION	3.974610342869109E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999168429211491	WITHOUT_CLASSIFICATION	8.31570788509004E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998870343143385	WITHOUT_CLASSIFICATION	1.1296568566160985E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999864806021739	WITHOUT_CLASSIFICATION	1.351939782610544E-5	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999640986129412	WITHOUT_CLASSIFICATION	3.590138705880465E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999980093174895	WITHOUT_CLASSIFICATION	1.990682510541736E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999850106327711	WITHOUT_CLASSIFICATION	1.4989367228876966E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999928511996945	WITHOUT_CLASSIFICATION	7.148800305405793E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999992128553855	WITHOUT_CLASSIFICATION	7.871446144483542E-7	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999711631738276	WITHOUT_CLASSIFICATION	2.8836826172451523E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999990120868727	WITHOUT_CLASSIFICATION	9.879131273400638E-7	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999977309417899	WITHOUT_CLASSIFICATION	2.2690582100319135E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999941915726198	WITHOUT_CLASSIFICATION	5.80842738010705E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999991485138963	WITHOUT_CLASSIFICATION	8.514861037089791E-7	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999860556861334	WITHOUT_CLASSIFICATION	1.3944313866612627E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999908745015798	WITHOUT_CLASSIFICATION	9.125498420130185E-6	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999908745015798	WITHOUT_CLASSIFICATION	9.125498420130185E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996946577664273	WITHOUT_CLASSIFICATION	3.053422335727002E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999917862991395	WITHOUT_CLASSIFICATION	8.213700860496774E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999630309324722	WITHOUT_CLASSIFICATION	3.696906752785249E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999921127188763	WITHOUT_CLASSIFICATION	7.887281123661452E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999885867341993	WITHOUT_CLASSIFICATION	1.1413265800823685E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999885867341993	WITHOUT_CLASSIFICATION	1.1413265800823685E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999883889973183	WITHOUT_CLASSIFICATION	1.161100268163928E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999871922412116	WITHOUT_CLASSIFICATION	1.2807758788291764E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999783310805667	WITHOUT_CLASSIFICATION	2.166891943333857E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999958326736907	WITHOUT_CLASSIFICATION	4.1673263092869175E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999845799398824	WITHOUT_CLASSIFICATION	1.5420060117562497E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999912056311188	WITHOUT_CLASSIFICATION	8.794368881264748E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998805919539656	WITHOUT_CLASSIFICATION	1.1940804603448584E-4	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999881196810964	WITHOUT_CLASSIFICATION	1.1880318903720253E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999981246524401	WITHOUT_CLASSIFICATION	1.8753475599821676E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998508554291506	WITHOUT_CLASSIFICATION	1.4914457084932165E-4	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9971253563118864	WITHOUT_CLASSIFICATION	0.002874643688113521	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999125348235568	WITHOUT_CLASSIFICATION	8.746517644317849E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999125348235568	WITHOUT_CLASSIFICATION	8.746517644317849E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999853867552275	WITHOUT_CLASSIFICATION	1.4613244772478394E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999852741172639	WITHOUT_CLASSIFICATION	1.4725882736026872E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999852772315525	WITHOUT_CLASSIFICATION	1.4722768447433225E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999739118475478	WITHOUT_CLASSIFICATION	2.608815245213798E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999172180095948	WITHOUT_CLASSIFICATION	8.278199040516648E-5	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850146881598	WITHOUT_CLASSIFICATION	1.4985311840161376E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999797122878095	WITHOUT_CLASSIFICATION	2.0287712190553914E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999848786544971	WITHOUT_CLASSIFICATION	1.5121345502740868E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999860901321896	WITHOUT_CLASSIFICATION	1.3909867810305523E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999885825068014	WITHOUT_CLASSIFICATION	1.1417493198598759E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998514060822394	WITHOUT_CLASSIFICATION	1.48593917760609E-4	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999605050680838	WITHOUT_CLASSIFICATION	3.949493191628058E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999109023521852	WITHOUT_CLASSIFICATION	8.909764781488833E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999592254051817	WITHOUT_CLASSIFICATION	4.0774594818367385E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999919703685306	WITHOUT_CLASSIFICATION	8.029631469295526E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999786282266592	WITHOUT_CLASSIFICATION	2.1371773340827227E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999612262217307	WITHOUT_CLASSIFICATION	3.877377826935075E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999426581822566	WITHOUT_CLASSIFICATION	5.7341817743364524E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.999968451647841	WITHOUT_CLASSIFICATION	3.154835215894673E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999635013432602	WITHOUT_CLASSIFICATION	3.649865673982628E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999484213691023	WITHOUT_CLASSIFICATION	5.1578630897723386E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999484213691023	WITHOUT_CLASSIFICATION	5.1578630897723386E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999436061781359	WITHOUT_CLASSIFICATION	5.639382186401122E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999999964457746	WITHOUT_CLASSIFICATION	3.5542254114561064E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999881234330144	WITHOUT_CLASSIFICATION	1.187656698563913E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999512280834996	WITHOUT_CLASSIFICATION	4.8771916500407756E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999819912364003	WITHOUT_CLASSIFICATION	1.8008763599676096E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999811621825558	WITHOUT_CLASSIFICATION	1.8837817444130942E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999961251960335	WITHOUT_CLASSIFICATION	3.874803966455118E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999994068108574	WITHOUT_CLASSIFICATION	5.931891426993903E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999258680584507	WITHOUT_CLASSIFICATION	7.41319415492089E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999847715312457	WITHOUT_CLASSIFICATION	1.5228468754448969E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646888752608	WITHOUT_CLASSIFICATION	3.5311124739202286E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999931846742255	WITHOUT_CLASSIFICATION	6.815325774502536E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999945004069155	WITHOUT_CLASSIFICATION	5.499593084440681E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999996341023452	WITHOUT_CLASSIFICATION	3.6589765479529305E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999020722049033	WITHOUT_CLASSIFICATION	9.792779509666381E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999968887941902	WITHOUT_CLASSIFICATION	3.111205809823486E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999981637149209	WITHOUT_CLASSIFICATION	1.8362850791777203E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999573250845704	WITHOUT_CLASSIFICATION	4.267491542951099E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998898076915137	WITHOUT_CLASSIFICATION	1.1019230848631878E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999945013102948	WITHOUT_CLASSIFICATION	5.498689705207592E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999931225033947	WITHOUT_CLASSIFICATION	6.877496605349028E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999993150631051	WITHOUT_CLASSIFICATION	6.849368948435849E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994760605504	WITHOUT_CLASSIFICATION	5.2393944960011085E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999758061679885	WITHOUT_CLASSIFICATION	2.4193832011499408E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999816903667788	WITHOUT_CLASSIFICATION	1.830963322127071E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999816903667788	WITHOUT_CLASSIFICATION	1.830963322127071E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99997479921469	WITHOUT_CLASSIFICATION	2.52007853100066E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999816075188596	WITHOUT_CLASSIFICATION	1.8392481140398626E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999582960263851	WITHOUT_CLASSIFICATION	4.170397361493846E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999968089024379	WITHOUT_CLASSIFICATION	3.191097562073993E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999893288565662	WITHOUT_CLASSIFICATION	1.0671143433828378E-5	TEST
