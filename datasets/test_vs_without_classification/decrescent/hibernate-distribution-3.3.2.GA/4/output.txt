test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992024726985476	WITHOUT_CLASSIFICATION	7.975273014525381E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996689053969816	WITHOUT_CLASSIFICATION	3.310946030183699E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999900721052686	WITHOUT_CLASSIFICATION	9.927894731434148E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999925249453859	WITHOUT_CLASSIFICATION	7.475054614119379E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999925249453859	WITHOUT_CLASSIFICATION	7.475054614119379E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999629546586	WITHOUT_CLASSIFICATION	3.704534140012645E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999492838834361	WITHOUT_CLASSIFICATION	5.071611656397874E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999663392306432	WITHOUT_CLASSIFICATION	3.366076935689516E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999839092097182	WITHOUT_CLASSIFICATION	1.609079028167845E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999752111823061	WITHOUT_CLASSIFICATION	2.4788817693842792E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999752111823061	WITHOUT_CLASSIFICATION	2.4788817693842792E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999643120073262	WITHOUT_CLASSIFICATION	3.568799267384388E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999875864788811	WITHOUT_CLASSIFICATION	1.2413521118930319E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999666517905685	WITHOUT_CLASSIFICATION	3.3348209431431575E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999550829764863	WITHOUT_CLASSIFICATION	4.491702351368957E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999955883152034	WITHOUT_CLASSIFICATION	4.411684796550883E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999677376824486	WITHOUT_CLASSIFICATION	3.226231755147071E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999956917882618	WITHOUT_CLASSIFICATION	4.308211738201578E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999748236627809	WITHOUT_CLASSIFICATION	2.517633721907408E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999675675408864	WITHOUT_CLASSIFICATION	3.2432459113492236E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999675675408864	WITHOUT_CLASSIFICATION	3.2432459113492236E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999549651928736	WITHOUT_CLASSIFICATION	4.5034807126431455E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999675638873502	WITHOUT_CLASSIFICATION	3.243611264981601E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999481218730604	WITHOUT_CLASSIFICATION	5.1878126939488794E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999315389877625	WITHOUT_CLASSIFICATION	6.846101223743752E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9998960449935352	WITHOUT_CLASSIFICATION	1.0395500646472504E-4	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999990470398753	WITHOUT_CLASSIFICATION	9.529601246680563E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9998944802892229	WITHOUT_CLASSIFICATION	1.0551971077716678E-4	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.999975441655784	WITHOUT_CLASSIFICATION	2.4558344215997015E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999921566588417	WITHOUT_CLASSIFICATION	7.843341158308491E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999699672373449	WITHOUT_CLASSIFICATION	3.00327626551893E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999698633345115	WITHOUT_CLASSIFICATION	3.013666548840022E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9987448837295757	WITHOUT_CLASSIFICATION	0.0012551162704243569	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999836125015739	WITHOUT_CLASSIFICATION	1.6387498426175794E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999980099854344	WITHOUT_CLASSIFICATION	1.9900145655937194E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999711002938483	WITHOUT_CLASSIFICATION	2.8899706151617268E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475196208837	WITHOUT_CLASSIFICATION	5.248037911631973E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999845796195814	WITHOUT_CLASSIFICATION	1.5420380418555674E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999220142862848	WITHOUT_CLASSIFICATION	7.798571371526262E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999683188552939	WITHOUT_CLASSIFICATION	3.1681144706037826E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999683188552939	WITHOUT_CLASSIFICATION	3.1681144706037826E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999845796195814	WITHOUT_CLASSIFICATION	1.5420380418555674E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9993501991840817	WITHOUT_CLASSIFICATION	6.498008159183472E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999517018788294	WITHOUT_CLASSIFICATION	4.829812117055916E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999762794734928	WITHOUT_CLASSIFICATION	2.3720526507285205E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999974719699114	WITHOUT_CLASSIFICATION	2.528030088690544E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999978649071175	WITHOUT_CLASSIFICATION	2.1350928825809027E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9985289221832332	WITHOUT_CLASSIFICATION	0.0014710778167668637	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998992233418745	WITHOUT_CLASSIFICATION	1.0077665812555397E-4	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999876242422581	WITHOUT_CLASSIFICATION	1.2375757741955498E-5	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999009292064478	WITHOUT_CLASSIFICATION	9.907079355227651E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.99997809589547	WITHOUT_CLASSIFICATION	2.190410452992707E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999683188552939	WITHOUT_CLASSIFICATION	3.1681144706037826E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999923677896336	WITHOUT_CLASSIFICATION	7.632210366391374E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999009151229034	WITHOUT_CLASSIFICATION	9.908487709667246E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.999965510731884	WITHOUT_CLASSIFICATION	3.448926811603943E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999834978606709	WITHOUT_CLASSIFICATION	1.6502139329158652E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999886092683907	WITHOUT_CLASSIFICATION	1.1390731609267198E-5	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999779804835892	WITHOUT_CLASSIFICATION	2.2019516410697116E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999385854571289	WITHOUT_CLASSIFICATION	6.141454287105204E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999716186514801	WITHOUT_CLASSIFICATION	2.83813485197991E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999279515726511	WITHOUT_CLASSIFICATION	7.204842734881787E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999955025261392	WITHOUT_CLASSIFICATION	4.4974738606744925E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999942835330738	WITHOUT_CLASSIFICATION	5.716466926092221E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999936178341737	WITHOUT_CLASSIFICATION	6.382165826306062E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999746324512251	WITHOUT_CLASSIFICATION	2.536754877495988E-5	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999826400295051	WITHOUT_CLASSIFICATION	1.735997049493845E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999998726666588	WITHOUT_CLASSIFICATION	1.2733334121076765E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999806268883902	WITHOUT_CLASSIFICATION	1.9373111609801685E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999889246441273	WITHOUT_CLASSIFICATION	1.107535587271113E-5	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998300956952167	WITHOUT_CLASSIFICATION	1.699043047833091E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999979409639289	WITHOUT_CLASSIFICATION	2.059036071120021E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999893938566404	WITHOUT_CLASSIFICATION	1.0606143359641334E-5	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997491932055712	WITHOUT_CLASSIFICATION	2.508067944288176E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999647290027454	WITHOUT_CLASSIFICATION	3.527099725461415E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999672240959179	WITHOUT_CLASSIFICATION	3.277590408215188E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999705641751536	WITHOUT_CLASSIFICATION	2.9435824846370164E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999647290027454	WITHOUT_CLASSIFICATION	3.527099725461415E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999989679331271	WITHOUT_CLASSIFICATION	1.0320668729252259E-6	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999141745227719	WITHOUT_CLASSIFICATION	8.582547722808787E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999564477076612	WITHOUT_CLASSIFICATION	4.3552292338791405E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999874409175481	WITHOUT_CLASSIFICATION	1.255908245192118E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999706286954574	WITHOUT_CLASSIFICATION	2.9371304542562488E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999706286954574	WITHOUT_CLASSIFICATION	2.9371304542562488E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999711383410359	WITHOUT_CLASSIFICATION	2.8861658964037142E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999325860777636	WITHOUT_CLASSIFICATION	6.741392223633781E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999769681415218	WITHOUT_CLASSIFICATION	2.303185847823569E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999934934271923	WITHOUT_CLASSIFICATION	6.506572807701803E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999893282992691	WITHOUT_CLASSIFICATION	1.0671700730822978E-5	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999669209056347	WITHOUT_CLASSIFICATION	3.3079094365350806E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999586301033587	WITHOUT_CLASSIFICATION	4.1369896641223485E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999932722978733	WITHOUT_CLASSIFICATION	6.727702126717652E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999845132445191	WITHOUT_CLASSIFICATION	1.548675548093191E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999800071434894	WITHOUT_CLASSIFICATION	1.9992856510542186E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999439748303883	WITHOUT_CLASSIFICATION	5.6025169611692766E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999439748303883	WITHOUT_CLASSIFICATION	5.6025169611692766E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831718945049	WITHOUT_CLASSIFICATION	1.6828105494987063E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999923200368905	WITHOUT_CLASSIFICATION	7.679963109393588E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999744207171326	WITHOUT_CLASSIFICATION	2.557928286736303E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999439748303883	WITHOUT_CLASSIFICATION	5.6025169611692766E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831718945049	WITHOUT_CLASSIFICATION	1.6828105494987063E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831718945049	WITHOUT_CLASSIFICATION	1.6828105494987063E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999758762676499	WITHOUT_CLASSIFICATION	2.4123732350004143E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999695753530388	WITHOUT_CLASSIFICATION	3.0424646961194072E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999690787598007	WITHOUT_CLASSIFICATION	3.092124019938052E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999398668327351	WITHOUT_CLASSIFICATION	6.0133167264878436E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999730294651409	WITHOUT_CLASSIFICATION	2.69705348590749E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999730294651409	WITHOUT_CLASSIFICATION	2.69705348590749E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999827447128095	WITHOUT_CLASSIFICATION	1.725528719057882E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999966241387628	WITHOUT_CLASSIFICATION	3.375861237196197E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.999973838435054	WITHOUT_CLASSIFICATION	2.6161564945970653E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999872261456719	WITHOUT_CLASSIFICATION	1.2773854328159658E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999872261456719	WITHOUT_CLASSIFICATION	1.2773854328159658E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999969083381379	WITHOUT_CLASSIFICATION	3.09166186210456E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999230272400677	WITHOUT_CLASSIFICATION	7.697275993238547E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995678078825699	WITHOUT_CLASSIFICATION	4.321921174301306E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999702968739607	WITHOUT_CLASSIFICATION	2.9703126039358167E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9985161630565315	WITHOUT_CLASSIFICATION	0.001483836943468578	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999921682410048	WITHOUT_CLASSIFICATION	7.831758995188151E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998968249901308	WITHOUT_CLASSIFICATION	1.0317500986922558E-4	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999334395471934	WITHOUT_CLASSIFICATION	6.656045280667216E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995678078825699	WITHOUT_CLASSIFICATION	4.321921174301306E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999166370906182	WITHOUT_CLASSIFICATION	8.33629093818674E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999754203935157	WITHOUT_CLASSIFICATION	2.4579606484307385E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999754203935157	WITHOUT_CLASSIFICATION	2.4579606484307385E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9997656762414678	WITHOUT_CLASSIFICATION	2.343237585321496E-4	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9992289749301957	WITHOUT_CLASSIFICATION	7.710250698043036E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999512337947751	WITHOUT_CLASSIFICATION	4.8766205224857934E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998311823324412	WITHOUT_CLASSIFICATION	1.6881766755877454E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998827355483962	WITHOUT_CLASSIFICATION	1.1726445160373525E-4	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.999936916942444	WITHOUT_CLASSIFICATION	6.308305755597505E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999193347209707	WITHOUT_CLASSIFICATION	8.066527902923146E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999832643068345	WITHOUT_CLASSIFICATION	1.6735693165505936E-5	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999832168118011	WITHOUT_CLASSIFICATION	1.6783188198919663E-5	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999953306220832	WITHOUT_CLASSIFICATION	4.669377916763885E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999953306220832	WITHOUT_CLASSIFICATION	4.669377916763885E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9992024726985476	WITHOUT_CLASSIFICATION	7.975273014525381E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999880388059723	WITHOUT_CLASSIFICATION	1.1961194027651337E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999664338317499	WITHOUT_CLASSIFICATION	3.3566168250174166E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999739078302498	WITHOUT_CLASSIFICATION	2.609216975025142E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999788559711009	WITHOUT_CLASSIFICATION	2.114402889905165E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.999973480814783	WITHOUT_CLASSIFICATION	2.6519185217013992E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999369214965855	WITHOUT_CLASSIFICATION	6.30785034144915E-5	TEST
new	WITHOUT_CLASSIFICATION	0.999938024871065	WITHOUT_CLASSIFICATION	6.197512893506841E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999677683774915	WITHOUT_CLASSIFICATION	3.223162250851982E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999821854867819	WITHOUT_CLASSIFICATION	1.7814513218139494E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.999973480814783	WITHOUT_CLASSIFICATION	2.6519185217013992E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9997207679374045	WITHOUT_CLASSIFICATION	2.7923206259553355E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999795078287368	WITHOUT_CLASSIFICATION	2.049217126314498E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999762615317158	WITHOUT_CLASSIFICATION	2.373846828410506E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999819886339284	WITHOUT_CLASSIFICATION	1.801136607157572E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999778432702385	WITHOUT_CLASSIFICATION	2.2156729761482616E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999925249453859	WITHOUT_CLASSIFICATION	7.475054614119379E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999769262997567	WITHOUT_CLASSIFICATION	2.307370024336109E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999706960001244	WITHOUT_CLASSIFICATION	2.930399987556767E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999842393527522	WITHOUT_CLASSIFICATION	1.5760647247894575E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999817364600766	WITHOUT_CLASSIFICATION	1.8263539923439658E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999675626065658	WITHOUT_CLASSIFICATION	3.2437393434207876E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999639474175135	WITHOUT_CLASSIFICATION	3.605258248650619E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999634373858456	WITHOUT_CLASSIFICATION	3.656261415435815E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999929343543278	WITHOUT_CLASSIFICATION	7.065645672271607E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999977477015705	WITHOUT_CLASSIFICATION	2.252298429490893E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.999981235586534	WITHOUT_CLASSIFICATION	1.8764413466059403E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999677683774915	WITHOUT_CLASSIFICATION	3.223162250851982E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999675626065658	WITHOUT_CLASSIFICATION	3.2437393434207876E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999629546586	WITHOUT_CLASSIFICATION	3.704534140012645E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999785099571705	WITHOUT_CLASSIFICATION	2.149004282953031E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999352804851136	WITHOUT_CLASSIFICATION	6.471951488636483E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999658845412043	WITHOUT_CLASSIFICATION	3.4115458795675226E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999677695657937	WITHOUT_CLASSIFICATION	3.2230434206245884E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999966016312107	WITHOUT_CLASSIFICATION	3.398368789307698E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.999967975020804	WITHOUT_CLASSIFICATION	3.20249791959897E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9996645593890238	WITHOUT_CLASSIFICATION	3.354406109762949E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998676363290833	WITHOUT_CLASSIFICATION	1.3236367091682568E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998676363290833	WITHOUT_CLASSIFICATION	1.3236367091682568E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999573942864664	WITHOUT_CLASSIFICATION	4.260571353361811E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999919641799215	WITHOUT_CLASSIFICATION	8.035820078402601E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9996865522099553	WITHOUT_CLASSIFICATION	3.1344779004467693E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999565088084874	WITHOUT_CLASSIFICATION	4.34911915126956E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999580690635873	WITHOUT_CLASSIFICATION	4.193093641263655E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999721543312912	WITHOUT_CLASSIFICATION	2.784566870890833E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999821034180745	WITHOUT_CLASSIFICATION	1.789658192557964E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999492838834361	WITHOUT_CLASSIFICATION	5.071611656397874E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999952365216281	WITHOUT_CLASSIFICATION	4.763478371920178E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999952365216281	WITHOUT_CLASSIFICATION	4.763478371920178E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999895526473537	WITHOUT_CLASSIFICATION	1.0447352646360193E-5	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999801575549908	WITHOUT_CLASSIFICATION	1.9842445009218075E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999895526473537	WITHOUT_CLASSIFICATION	1.0447352646360193E-5	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999820762900913	WITHOUT_CLASSIFICATION	1.7923709908674886E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999692054268956	WITHOUT_CLASSIFICATION	3.079457310444755E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999852043868767	WITHOUT_CLASSIFICATION	1.4795613123264949E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999677683774915	WITHOUT_CLASSIFICATION	3.223162250851982E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999675626065658	WITHOUT_CLASSIFICATION	3.2437393434207876E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999675626065658	WITHOUT_CLASSIFICATION	3.2437393434207876E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999852413998217	WITHOUT_CLASSIFICATION	1.4758600178277306E-5	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999526031040888	WITHOUT_CLASSIFICATION	4.739689591114084E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999854505122692	WITHOUT_CLASSIFICATION	1.454948773080198E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999839092097182	WITHOUT_CLASSIFICATION	1.609079028167845E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999839092097182	WITHOUT_CLASSIFICATION	1.609079028167845E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9999513509446293	WITHOUT_CLASSIFICATION	4.86490553706984E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999876899760786	WITHOUT_CLASSIFICATION	1.2310023921519388E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999287897191352	WITHOUT_CLASSIFICATION	7.121028086476483E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999695862953187	WITHOUT_CLASSIFICATION	3.0413704681185E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999759955248075	WITHOUT_CLASSIFICATION	2.4004475192561918E-5	TEST
short	WITHOUT_CLASSIFICATION	0.999967740525874	WITHOUT_CLASSIFICATION	3.225947412599488E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999752111823061	WITHOUT_CLASSIFICATION	2.4788817693842792E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999676229382202	WITHOUT_CLASSIFICATION	3.237706177986098E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999676229382202	WITHOUT_CLASSIFICATION	3.237706177986098E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999643120073262	WITHOUT_CLASSIFICATION	3.568799267384388E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999643120073262	WITHOUT_CLASSIFICATION	3.568799267384388E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999809657037245	WITHOUT_CLASSIFICATION	1.9034296275428152E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999809657037245	WITHOUT_CLASSIFICATION	1.9034296275428152E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999487248697179	WITHOUT_CLASSIFICATION	5.127513028216439E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999487248697179	WITHOUT_CLASSIFICATION	5.127513028216439E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999839092097182	WITHOUT_CLASSIFICATION	1.609079028167845E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999752111823061	WITHOUT_CLASSIFICATION	2.4788817693842792E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999676229382202	WITHOUT_CLASSIFICATION	3.237706177986098E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999676229382202	WITHOUT_CLASSIFICATION	3.237706177986098E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999643120073262	WITHOUT_CLASSIFICATION	3.568799267384388E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999809657037245	WITHOUT_CLASSIFICATION	1.9034296275428152E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999809657037245	WITHOUT_CLASSIFICATION	1.9034296275428152E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999487248697179	WITHOUT_CLASSIFICATION	5.127513028216439E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999733732156519	WITHOUT_CLASSIFICATION	2.662678434802636E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999847433052372	WITHOUT_CLASSIFICATION	1.525669476281422E-5	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999866957413521	WITHOUT_CLASSIFICATION	1.3304258647879837E-5	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999053528110895	WITHOUT_CLASSIFICATION	9.464718891050122E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999891877623402	WITHOUT_CLASSIFICATION	1.0812237659801416E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999675741891683	WITHOUT_CLASSIFICATION	3.242581083162809E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999854249750324	WITHOUT_CLASSIFICATION	1.4575024967648744E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999761118688971	WITHOUT_CLASSIFICATION	2.3888131102939783E-5	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998300158710269	WITHOUT_CLASSIFICATION	1.6998412897313944E-4	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999650441496774	WITHOUT_CLASSIFICATION	3.495585032263798E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999590091233157	WITHOUT_CLASSIFICATION	4.099087668435054E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999772459359597	WITHOUT_CLASSIFICATION	2.2754064040330015E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999711383410359	WITHOUT_CLASSIFICATION	2.8861658964037142E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999675741891683	WITHOUT_CLASSIFICATION	3.242581083162809E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999675741891683	WITHOUT_CLASSIFICATION	3.242581083162809E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999675741891683	WITHOUT_CLASSIFICATION	3.242581083162809E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998791768831056	WITHOUT_CLASSIFICATION	1.2082311689449039E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999581382702729	WITHOUT_CLASSIFICATION	4.186172972705451E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999581382702729	WITHOUT_CLASSIFICATION	4.186172972705451E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999436096952129	WITHOUT_CLASSIFICATION	5.639030478718806E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999969832789707	WITHOUT_CLASSIFICATION	3.0167210292940797E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9997296342364593	WITHOUT_CLASSIFICATION	2.7036576354068825E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999669365606115	WITHOUT_CLASSIFICATION	3.306343938856005E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999669365606115	WITHOUT_CLASSIFICATION	3.306343938856005E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999955883152034	WITHOUT_CLASSIFICATION	4.411684796550883E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999942379063629	WITHOUT_CLASSIFICATION	5.7620936371952444E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999942379063629	WITHOUT_CLASSIFICATION	5.7620936371952444E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999248618866708	WITHOUT_CLASSIFICATION	7.513811332919145E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999608428772818	WITHOUT_CLASSIFICATION	3.9157122718225106E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999748236627809	WITHOUT_CLASSIFICATION	2.517633721907408E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9944385996206372	WITHOUT_CLASSIFICATION	0.005561400379362805	TEST
ID	WITHOUT_CLASSIFICATION	0.9999677376824486	WITHOUT_CLASSIFICATION	3.226231755147071E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999774585606815	WITHOUT_CLASSIFICATION	2.2541439318495756E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999682339674044	WITHOUT_CLASSIFICATION	3.176603259559122E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9994501200455582	WITHOUT_CLASSIFICATION	5.498799544417714E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9998964239672244	WITHOUT_CLASSIFICATION	1.0357603277551552E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999315389877625	WITHOUT_CLASSIFICATION	6.846101223743752E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999982210720662	WITHOUT_CLASSIFICATION	1.7789279338365675E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999704398562578	WITHOUT_CLASSIFICATION	2.956014374225869E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999704538343017	WITHOUT_CLASSIFICATION	2.9546165698262895E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99996756991482	WITHOUT_CLASSIFICATION	3.2430085180014734E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999748236627809	WITHOUT_CLASSIFICATION	2.517633721907408E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.999975398956087	WITHOUT_CLASSIFICATION	2.4601043912978943E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999714717904141	WITHOUT_CLASSIFICATION	2.852820958591654E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.999967568974051	WITHOUT_CLASSIFICATION	3.243102594902413E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99996756991482	WITHOUT_CLASSIFICATION	3.2430085180014734E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.999975398956087	WITHOUT_CLASSIFICATION	2.4601043912978943E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.999967568974051	WITHOUT_CLASSIFICATION	3.243102594902413E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998676704739511	WITHOUT_CLASSIFICATION	1.3232952604887133E-4	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998676704739511	WITHOUT_CLASSIFICATION	1.3232952604887133E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999675675408864	WITHOUT_CLASSIFICATION	3.2432459113492236E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999727132958834	WITHOUT_CLASSIFICATION	2.7286704116588825E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999720316563807	WITHOUT_CLASSIFICATION	2.7968343619307728E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996510568889004	WITHOUT_CLASSIFICATION	3.489431110995447E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9998257211700603	WITHOUT_CLASSIFICATION	1.7427882993957408E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999767185562534	WITHOUT_CLASSIFICATION	2.3281443746600862E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999499531123948	WITHOUT_CLASSIFICATION	5.004688760525067E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999493700554318	WITHOUT_CLASSIFICATION	5.062994456814255E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999911761811277	WITHOUT_CLASSIFICATION	8.82381887241264E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999499531123948	WITHOUT_CLASSIFICATION	5.004688760525067E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999675638873502	WITHOUT_CLASSIFICATION	3.243611264981601E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999817413539042	WITHOUT_CLASSIFICATION	1.8258646095774026E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.99996756991482	WITHOUT_CLASSIFICATION	3.2430085180014734E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999701168254814	WITHOUT_CLASSIFICATION	2.9883174518520835E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999917506347873	WITHOUT_CLASSIFICATION	8.249365212748271E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9994248616741606	WITHOUT_CLASSIFICATION	5.751383258394595E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999885502699936	WITHOUT_CLASSIFICATION	1.1449730006465769E-5	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999139037277426	WITHOUT_CLASSIFICATION	8.609627225735155E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999969902978976	WITHOUT_CLASSIFICATION	3.009702102506417E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999245290544854	WITHOUT_CLASSIFICATION	7.547094551461179E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999871057521851	WITHOUT_CLASSIFICATION	1.289424781482682E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999706088885562	WITHOUT_CLASSIFICATION	2.9391111443792356E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999174223322819	WITHOUT_CLASSIFICATION	8.257766771815611E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999315389877625	WITHOUT_CLASSIFICATION	6.846101223743752E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999719923964152	WITHOUT_CLASSIFICATION	2.800760358477308E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9994342708246907	WITHOUT_CLASSIFICATION	5.657291753094142E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999591477047506	WITHOUT_CLASSIFICATION	4.08522952494597E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999861695341555	WITHOUT_CLASSIFICATION	1.3830465844455563E-5	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999862240491774	WITHOUT_CLASSIFICATION	1.3775950822711446E-5	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999608311582915	WITHOUT_CLASSIFICATION	3.91688417084263E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999543662844084	WITHOUT_CLASSIFICATION	4.563371559160509E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999070928510819	WITHOUT_CLASSIFICATION	9.29071489180912E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999547317441285	WITHOUT_CLASSIFICATION	4.526825587140241E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999714978491704	WITHOUT_CLASSIFICATION	2.850215082960648E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999933286948737	WITHOUT_CLASSIFICATION	6.671305126348427E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999933286948737	WITHOUT_CLASSIFICATION	6.671305126348427E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999661423572233	WITHOUT_CLASSIFICATION	3.385764277684554E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999767152244108	WITHOUT_CLASSIFICATION	2.3284775589226617E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999946859028838	WITHOUT_CLASSIFICATION	5.31409711622809E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999661914097066	WITHOUT_CLASSIFICATION	3.380859029340694E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999661407830961	WITHOUT_CLASSIFICATION	3.3859216903890386E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.999968098376693	WITHOUT_CLASSIFICATION	3.190162330695842E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999749642794141	WITHOUT_CLASSIFICATION	2.5035720585858398E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9994335963542582	WITHOUT_CLASSIFICATION	5.664036457418618E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999506509011117	WITHOUT_CLASSIFICATION	4.934909888823237E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999928206062305	WITHOUT_CLASSIFICATION	7.1793937694521E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999704391852396	WITHOUT_CLASSIFICATION	2.9560814760328203E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999806646337477	WITHOUT_CLASSIFICATION	1.933536625226567E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999770490561363	WITHOUT_CLASSIFICATION	2.2950943863690052E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999720144890487	WITHOUT_CLASSIFICATION	2.798551095122078E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999531600295415	WITHOUT_CLASSIFICATION	4.68399704585062E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999919105846339	WITHOUT_CLASSIFICATION	8.089415366030115E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639170717373	WITHOUT_CLASSIFICATION	3.608292826276512E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999888093534358	WITHOUT_CLASSIFICATION	1.119064656420578E-5	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605560280587	WITHOUT_CLASSIFICATION	3.944397194129245E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999848203529716	WITHOUT_CLASSIFICATION	1.517964702832469E-5	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999995258116468	WITHOUT_CLASSIFICATION	4.741883531895942E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999190380297174	WITHOUT_CLASSIFICATION	8.096197028258106E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999919105846339	WITHOUT_CLASSIFICATION	8.089415366030115E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999698635765123	WITHOUT_CLASSIFICATION	3.0136423487769094E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999560096197645	WITHOUT_CLASSIFICATION	4.399038023543417E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999560096197645	WITHOUT_CLASSIFICATION	4.399038023543417E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999579464118341	WITHOUT_CLASSIFICATION	4.205358816582782E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999916861372487	WITHOUT_CLASSIFICATION	8.313862751298122E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999888093534358	WITHOUT_CLASSIFICATION	1.119064656420578E-5	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999722567837632	WITHOUT_CLASSIFICATION	2.7743216236693544E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999773418879071	WITHOUT_CLASSIFICATION	2.265811209291862E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999770122654766	WITHOUT_CLASSIFICATION	2.2987734523310592E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999709435098979	WITHOUT_CLASSIFICATION	2.9056490102171643E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999709435098979	WITHOUT_CLASSIFICATION	2.9056490102171643E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999573836149626	WITHOUT_CLASSIFICATION	4.261638503749976E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999704399883073	WITHOUT_CLASSIFICATION	2.956001169271176E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999704399883073	WITHOUT_CLASSIFICATION	2.956001169271176E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999547317441285	WITHOUT_CLASSIFICATION	4.526825587140241E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999816846666622	WITHOUT_CLASSIFICATION	1.8315333337873553E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998158227079805	WITHOUT_CLASSIFICATION	1.8417729201942174E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999872415521508	WITHOUT_CLASSIFICATION	1.2758447849239409E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998158227079805	WITHOUT_CLASSIFICATION	1.8417729201942174E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999872415521508	WITHOUT_CLASSIFICATION	1.2758447849239409E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998673205432478	WITHOUT_CLASSIFICATION	1.3267945675230516E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999584976843465	WITHOUT_CLASSIFICATION	4.150231565351072E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999957391762941	WITHOUT_CLASSIFICATION	4.2608237058662545E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999858196203196	WITHOUT_CLASSIFICATION	1.4180379680260107E-5	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999371637814899	WITHOUT_CLASSIFICATION	6.2836218510061E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9992055340967879	WITHOUT_CLASSIFICATION	7.944659032120803E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998710732380959	WITHOUT_CLASSIFICATION	1.2892676190420172E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998710732380959	WITHOUT_CLASSIFICATION	1.2892676190420172E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999587723421711	WITHOUT_CLASSIFICATION	4.122765782883528E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999670595646992	WITHOUT_CLASSIFICATION	3.2940435300834833E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999768309580117	WITHOUT_CLASSIFICATION	2.316904198821971E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999927827839221	WITHOUT_CLASSIFICATION	7.2172160778850375E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999905909517693	WITHOUT_CLASSIFICATION	9.409048230603258E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999793211059606	WITHOUT_CLASSIFICATION	2.067889403947136E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999793211059606	WITHOUT_CLASSIFICATION	2.067889403947136E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998782273278095	WITHOUT_CLASSIFICATION	1.2177267219056608E-4	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998782273278095	WITHOUT_CLASSIFICATION	1.2177267219056608E-4	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999960062488688	WITHOUT_CLASSIFICATION	3.993751131243214E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998673205432478	WITHOUT_CLASSIFICATION	1.3267945675230516E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999682030414683	WITHOUT_CLASSIFICATION	3.1796958531716326E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9995323585746813	WITHOUT_CLASSIFICATION	4.6764142531866633E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998208119106742	WITHOUT_CLASSIFICATION	1.7918808932575412E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999612755178039	WITHOUT_CLASSIFICATION	3.8724482196112036E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993759781214743	WITHOUT_CLASSIFICATION	6.240218785257782E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998673205432478	WITHOUT_CLASSIFICATION	1.3267945675230516E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999612755178039	WITHOUT_CLASSIFICATION	3.8724482196112036E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993759781214743	WITHOUT_CLASSIFICATION	6.240218785257782E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999248120554439	WITHOUT_CLASSIFICATION	7.518794455612849E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999971311453728	WITHOUT_CLASSIFICATION	2.868854627200317E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999808866962372	WITHOUT_CLASSIFICATION	1.9113303762812048E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998673205432478	WITHOUT_CLASSIFICATION	1.3267945675230516E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998673205432478	WITHOUT_CLASSIFICATION	1.3267945675230516E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999757639473601	WITHOUT_CLASSIFICATION	2.4236052639845834E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999775959609285	WITHOUT_CLASSIFICATION	2.2404039071469514E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999930972037766	WITHOUT_CLASSIFICATION	6.902796223332315E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999980099854344	WITHOUT_CLASSIFICATION	1.9900145655937194E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999887859551756	WITHOUT_CLASSIFICATION	1.1214044824344887E-5	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999955746994774	WITHOUT_CLASSIFICATION	4.425300522586818E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998202400092553	WITHOUT_CLASSIFICATION	1.797599907446527E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999816854673881	WITHOUT_CLASSIFICATION	1.8314532611961524E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999985117512602	WITHOUT_CLASSIFICATION	1.4882487398124955E-5	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999178489991764	WITHOUT_CLASSIFICATION	8.215100082369378E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999711739287032	WITHOUT_CLASSIFICATION	2.882607129688724E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999731005071001	WITHOUT_CLASSIFICATION	2.6899492900004403E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999637728486893	WITHOUT_CLASSIFICATION	3.6227151310740275E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999961882639902	WITHOUT_CLASSIFICATION	3.8117360097849835E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473125061282	WITHOUT_CLASSIFICATION	5.2687493871783996E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999671429700884	WITHOUT_CLASSIFICATION	3.285702991160364E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999980099854344	WITHOUT_CLASSIFICATION	1.9900145655937194E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999711973481611	WITHOUT_CLASSIFICATION	2.8802651838910522E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999638962897714	WITHOUT_CLASSIFICATION	3.6103710228556274E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999772137214816	WITHOUT_CLASSIFICATION	2.278627851840716E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999361187592423	WITHOUT_CLASSIFICATION	6.388124075776466E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999704718674481	WITHOUT_CLASSIFICATION	2.9528132551871727E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999704718674481	WITHOUT_CLASSIFICATION	2.9528132551871727E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999980099854344	WITHOUT_CLASSIFICATION	1.9900145655937194E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999812771456363	WITHOUT_CLASSIFICATION	1.872285436373842E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9989670711688772	WITHOUT_CLASSIFICATION	0.001032928831122733	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9983623117407096	WITHOUT_CLASSIFICATION	0.0016376882592904051	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.99998976021272	WITHOUT_CLASSIFICATION	1.02397872799713E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999675976283872	WITHOUT_CLASSIFICATION	3.2402371612771675E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999924789319353	WITHOUT_CLASSIFICATION	7.5210680646511075E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999757940771431	WITHOUT_CLASSIFICATION	2.4205922856958156E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999960823448346	WITHOUT_CLASSIFICATION	3.917655165404572E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999466008685345	WITHOUT_CLASSIFICATION	5.339913146559237E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999359410020381	WITHOUT_CLASSIFICATION	6.40589979618913E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999517629671747	WITHOUT_CLASSIFICATION	4.82370328252297E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999686365118924	WITHOUT_CLASSIFICATION	3.136348810754994E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999937848690137	WITHOUT_CLASSIFICATION	6.2151309863665175E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840262061614	WITHOUT_CLASSIFICATION	1.5973793838617855E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999501679764031	WITHOUT_CLASSIFICATION	4.983202359691951E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999834826622422	WITHOUT_CLASSIFICATION	1.6517337757771632E-5	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999917045823251	WITHOUT_CLASSIFICATION	8.295417674864695E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821323143544	WITHOUT_CLASSIFICATION	1.7867685645598566E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999450901707074	WITHOUT_CLASSIFICATION	5.490982929253795E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999563066561336	WITHOUT_CLASSIFICATION	4.3693343866552505E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999947746444697	WITHOUT_CLASSIFICATION	5.225355530253542E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763464157567	WITHOUT_CLASSIFICATION	2.3653584243363394E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763120142323	WITHOUT_CLASSIFICATION	2.3687985767654362E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621753580623	WITHOUT_CLASSIFICATION	3.782464193770186E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999493271995572	WITHOUT_CLASSIFICATION	5.0672800442723685E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999685237013695	WITHOUT_CLASSIFICATION	3.1476298630556036E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999615522989351	WITHOUT_CLASSIFICATION	3.844770106485596E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631040577392	WITHOUT_CLASSIFICATION	3.6895942260656895E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657872183322	WITHOUT_CLASSIFICATION	3.421278166776557E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631570995079	WITHOUT_CLASSIFICATION	3.684290049221819E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761773526066	WITHOUT_CLASSIFICATION	2.3822647393499913E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610880926706	WITHOUT_CLASSIFICATION	3.891190732941243E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611319581577	WITHOUT_CLASSIFICATION	3.886804184220717E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999496402279038	WITHOUT_CLASSIFICATION	5.035977209632531E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999715224794182	WITHOUT_CLASSIFICATION	2.8477520581828457E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999789872984705	WITHOUT_CLASSIFICATION	2.1012701529598E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999987402732983	WITHOUT_CLASSIFICATION	1.2597267016742284E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998531229070206	WITHOUT_CLASSIFICATION	1.4687709297944148E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999734726245267	WITHOUT_CLASSIFICATION	2.6527375473273982E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999771171802345	WITHOUT_CLASSIFICATION	2.2882819765438215E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999989322606023	WITHOUT_CLASSIFICATION	1.0677393977016909E-5	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999661328173269	WITHOUT_CLASSIFICATION	3.38671826729498E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999688450782561	WITHOUT_CLASSIFICATION	3.1154921743896663E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.999967833516875	WITHOUT_CLASSIFICATION	3.216648312500374E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999924782043402	WITHOUT_CLASSIFICATION	7.521795659688772E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999780317974512	WITHOUT_CLASSIFICATION	2.196820254881085E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999967252231277	WITHOUT_CLASSIFICATION	3.274776872294963E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999977691240139	WITHOUT_CLASSIFICATION	2.230875986101072E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569165494041	WITHOUT_CLASSIFICATION	4.308345059595171E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598624068458	WITHOUT_CLASSIFICATION	4.01375931542325E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909896358277	WITHOUT_CLASSIFICATION	9.010364172409925E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569623253036	WITHOUT_CLASSIFICATION	4.303767469633733E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998686999550315	WITHOUT_CLASSIFICATION	1.3130004496853217E-4	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999624229911354	WITHOUT_CLASSIFICATION	3.757700886470368E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999845608502584	WITHOUT_CLASSIFICATION	1.543914974165023E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999684089369618	WITHOUT_CLASSIFICATION	3.1591063038112175E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991575178245	WITHOUT_CLASSIFICATION	8.424821754997732E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999461090631612	WITHOUT_CLASSIFICATION	5.3890936838845955E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999208941227757	WITHOUT_CLASSIFICATION	7.910587722423488E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999559796738557	WITHOUT_CLASSIFICATION	4.4020326144309105E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999778954452911	WITHOUT_CLASSIFICATION	2.210455470889439E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999913689059761	WITHOUT_CLASSIFICATION	8.631094023909167E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999523474422769	WITHOUT_CLASSIFICATION	4.765255772311631E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998560370541016	WITHOUT_CLASSIFICATION	1.4396294589827922E-4	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999819793214223	WITHOUT_CLASSIFICATION	1.802067857766761E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998531229070206	WITHOUT_CLASSIFICATION	1.4687709297944148E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999732861504662	WITHOUT_CLASSIFICATION	2.6713849533786877E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999735494069353	WITHOUT_CLASSIFICATION	2.6450593064694928E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999762651014443	WITHOUT_CLASSIFICATION	2.373489855556952E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999789872984705	WITHOUT_CLASSIFICATION	2.1012701529598E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999755135387028	WITHOUT_CLASSIFICATION	2.448646129720448E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9998686999550315	WITHOUT_CLASSIFICATION	1.3130004496853217E-4	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999698508451627	WITHOUT_CLASSIFICATION	3.0149154837312905E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999530429351091	WITHOUT_CLASSIFICATION	4.695706489088651E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998907069273965	WITHOUT_CLASSIFICATION	1.0929307260347205E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999947461037063	WITHOUT_CLASSIFICATION	5.253896293692002E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999482126288168	WITHOUT_CLASSIFICATION	5.1787371183273426E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999971119844312	WITHOUT_CLASSIFICATION	2.888015568810758E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999234255205195	WITHOUT_CLASSIFICATION	7.657447948048143E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999688458054694	WITHOUT_CLASSIFICATION	3.115419453056475E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994197240981239	WITHOUT_CLASSIFICATION	5.802759018761203E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999593540453665	WITHOUT_CLASSIFICATION	4.064595463356975E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999207712483537	WITHOUT_CLASSIFICATION	7.922875164630923E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999789872984705	WITHOUT_CLASSIFICATION	2.1012701529598E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999698961542084	WITHOUT_CLASSIFICATION	3.0103845791638064E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.99984125942514	WITHOUT_CLASSIFICATION	1.5874057485989348E-4	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999853429779845	WITHOUT_CLASSIFICATION	1.4657022015484683E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999808654004675	WITHOUT_CLASSIFICATION	1.913459953251524E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999817875774012	WITHOUT_CLASSIFICATION	1.82124225987985E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999842632864602	WITHOUT_CLASSIFICATION	1.5736713539809564E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999242254194783	WITHOUT_CLASSIFICATION	7.577458052167419E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999858041674292	WITHOUT_CLASSIFICATION	1.4195832570680786E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999893908268326	WITHOUT_CLASSIFICATION	1.0609173167455072E-5	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.999921770101567	WITHOUT_CLASSIFICATION	7.822989843292964E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999766497195238	WITHOUT_CLASSIFICATION	2.335028047610846E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999843615614428	WITHOUT_CLASSIFICATION	1.5638438557243586E-5	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999843615614428	WITHOUT_CLASSIFICATION	1.5638438557243586E-5	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999789872984705	WITHOUT_CLASSIFICATION	2.1012701529598E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998531229070206	WITHOUT_CLASSIFICATION	1.4687709297944148E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998469030653169	WITHOUT_CLASSIFICATION	1.5309693468307727E-4	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999952570071026	WITHOUT_CLASSIFICATION	4.742992897354809E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991056709374067	WITHOUT_CLASSIFICATION	8.943290625933142E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998531229070206	WITHOUT_CLASSIFICATION	1.4687709297944148E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999705359430929	WITHOUT_CLASSIFICATION	2.9464056906999418E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999808654004675	WITHOUT_CLASSIFICATION	1.913459953251524E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999622816879917	WITHOUT_CLASSIFICATION	3.771831200828604E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999853429779845	WITHOUT_CLASSIFICATION	1.4657022015484683E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999966915487359	WITHOUT_CLASSIFICATION	3.3084512640902185E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999116761643261	WITHOUT_CLASSIFICATION	8.832383567388472E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998602341505534	WITHOUT_CLASSIFICATION	1.397658494466474E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998907069273965	WITHOUT_CLASSIFICATION	1.0929307260347205E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999947461037063	WITHOUT_CLASSIFICATION	5.253896293692002E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999482126288168	WITHOUT_CLASSIFICATION	5.1787371183273426E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999793361191586	WITHOUT_CLASSIFICATION	2.0663880841447154E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999670092299601	WITHOUT_CLASSIFICATION	3.2990770039893314E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999552024050249	WITHOUT_CLASSIFICATION	4.4797594975020286E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999853429779845	WITHOUT_CLASSIFICATION	1.4657022015484683E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999966915487359	WITHOUT_CLASSIFICATION	3.3084512640902185E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998531229070206	WITHOUT_CLASSIFICATION	1.4687709297944148E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999971119844312	WITHOUT_CLASSIFICATION	2.888015568810758E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999234255205195	WITHOUT_CLASSIFICATION	7.657447948048143E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999688458054694	WITHOUT_CLASSIFICATION	3.115419453056475E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933624152089	WITHOUT_CLASSIFICATION	6.637584791059462E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942828524966	WITHOUT_CLASSIFICATION	5.717147503488669E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999605631587939	WITHOUT_CLASSIFICATION	3.943684120608549E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999625495708612	WITHOUT_CLASSIFICATION	3.745042913881433E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999318633036943	WITHOUT_CLASSIFICATION	6.813669630572265E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999242841306654	WITHOUT_CLASSIFICATION	7.57158693346203E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998909821512243	WITHOUT_CLASSIFICATION	1.090178487757039E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999472437259674	WITHOUT_CLASSIFICATION	5.275627403255446E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999397581639738	WITHOUT_CLASSIFICATION	6.024183602605695E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657872183322	WITHOUT_CLASSIFICATION	3.421278166776557E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999396396378071	WITHOUT_CLASSIFICATION	6.0360362193073844E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999531980683568	WITHOUT_CLASSIFICATION	4.6801931643143926E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625040978739	WITHOUT_CLASSIFICATION	3.74959021261739E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999684952383255	WITHOUT_CLASSIFICATION	3.1504761674502335E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999675694097879	WITHOUT_CLASSIFICATION	3.243059021210836E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631570995079	WITHOUT_CLASSIFICATION	3.684290049221819E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610803069375	WITHOUT_CLASSIFICATION	3.891969306243174E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999778954452911	WITHOUT_CLASSIFICATION	2.210455470889439E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999585065033574	WITHOUT_CLASSIFICATION	4.149349664267613E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999803738945112	WITHOUT_CLASSIFICATION	1.9626105488780337E-5	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999591209952753	WITHOUT_CLASSIFICATION	4.087900472464544E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9991935995254485	WITHOUT_CLASSIFICATION	8.064004745514567E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999893784566414	WITHOUT_CLASSIFICATION	1.0621543358716338E-5	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998676704739511	WITHOUT_CLASSIFICATION	1.3232952604887133E-4	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999847958722524	WITHOUT_CLASSIFICATION	1.5204127747684342E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999960823448346	WITHOUT_CLASSIFICATION	3.917655165404572E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999732629128525	WITHOUT_CLASSIFICATION	2.6737087147472485E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999655436164308	WITHOUT_CLASSIFICATION	3.445638356913277E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999789565021588	WITHOUT_CLASSIFICATION	2.1043497841130582E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999969084773635	WITHOUT_CLASSIFICATION	3.091522636500617E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999898952686648	WITHOUT_CLASSIFICATION	1.0104731335198045E-5	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999872264465421	WITHOUT_CLASSIFICATION	1.2773553457891075E-5	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975356159111	WITHOUT_CLASSIFICATION	2.464384088884616E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999755957530664	WITHOUT_CLASSIFICATION	2.4404246933694547E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999265343797799	WITHOUT_CLASSIFICATION	7.346562022016212E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999437907503981	WITHOUT_CLASSIFICATION	5.6209249601985805E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999796028444797	WITHOUT_CLASSIFICATION	2.0397155520287307E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99990390022332	WITHOUT_CLASSIFICATION	9.609977668006445E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999026744249305	WITHOUT_CLASSIFICATION	9.732557506954244E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999603340142609	WITHOUT_CLASSIFICATION	3.966598573920435E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999722975099932	WITHOUT_CLASSIFICATION	2.7702490006850705E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999366283919551	WITHOUT_CLASSIFICATION	6.337160804491618E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999404737040367	WITHOUT_CLASSIFICATION	5.9526295963324275E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999603340142609	WITHOUT_CLASSIFICATION	3.966598573920435E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999993543326154	WITHOUT_CLASSIFICATION	6.456673845971468E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999171733427382	WITHOUT_CLASSIFICATION	8.28266572617525E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999642006171597	WITHOUT_CLASSIFICATION	3.579938284024477E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999898351740842	WITHOUT_CLASSIFICATION	1.0164825915710429E-5	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999975140085012	WITHOUT_CLASSIFICATION	2.485991498843611E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999560654965765	WITHOUT_CLASSIFICATION	4.393450342340684E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999794840706626	WITHOUT_CLASSIFICATION	2.0515929337369107E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999746266940303	WITHOUT_CLASSIFICATION	2.5373305969803333E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999746266940303	WITHOUT_CLASSIFICATION	2.5373305969803333E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999879350955612	WITHOUT_CLASSIFICATION	1.2064904438828257E-5	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999918216896213	WITHOUT_CLASSIFICATION	8.178310378683375E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999908315766024	WITHOUT_CLASSIFICATION	9.168423397552088E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999814177258813	WITHOUT_CLASSIFICATION	1.858227411860966E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999966882564225	WITHOUT_CLASSIFICATION	3.3117435773506877E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999390478976988	WITHOUT_CLASSIFICATION	6.095210230117146E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9998142439845454	WITHOUT_CLASSIFICATION	1.8575601545459412E-4	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999795797862578	WITHOUT_CLASSIFICATION	2.0420213742167297E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998679069645505	WITHOUT_CLASSIFICATION	1.3209303544953001E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999941597894153	WITHOUT_CLASSIFICATION	5.840210584758147E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999887628389281	WITHOUT_CLASSIFICATION	1.1237161071890062E-4	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998629807771955	WITHOUT_CLASSIFICATION	1.3701922280443874E-4	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998741243929472	WITHOUT_CLASSIFICATION	1.258756070528415E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999394120961688	WITHOUT_CLASSIFICATION	6.0587903831151416E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999893110226193	WITHOUT_CLASSIFICATION	1.0688977380721602E-5	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999023837697076	WITHOUT_CLASSIFICATION	9.761623029228478E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999883624060374	WITHOUT_CLASSIFICATION	1.1637593962561859E-5	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999667931296098	WITHOUT_CLASSIFICATION	3.3206870390135244E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999695985906831	WITHOUT_CLASSIFICATION	3.040140931687487E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999181083335172	WITHOUT_CLASSIFICATION	8.18916664827145E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999785321732387	WITHOUT_CLASSIFICATION	2.1467826761303864E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999441095113244	WITHOUT_CLASSIFICATION	5.589048867555163E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999673689678256	WITHOUT_CLASSIFICATION	3.263103217443085E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999813220224328	WITHOUT_CLASSIFICATION	1.867797756713682E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999707070830923	WITHOUT_CLASSIFICATION	2.9292916907708813E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999773472966472	WITHOUT_CLASSIFICATION	2.2652703352843127E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999995644532379	WITHOUT_CLASSIFICATION	4.355467621013222E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999987579371655	WITHOUT_CLASSIFICATION	1.2420628344981646E-5	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995950918941254	WITHOUT_CLASSIFICATION	4.0490810587462324E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999708972111296	WITHOUT_CLASSIFICATION	2.9102788870253274E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999561243930091	WITHOUT_CLASSIFICATION	4.387560699089712E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999867773513516	WITHOUT_CLASSIFICATION	1.3222648648492008E-5	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999911049790853	WITHOUT_CLASSIFICATION	8.895020914657566E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999930701249057	WITHOUT_CLASSIFICATION	6.929875094361754E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999981115317258	WITHOUT_CLASSIFICATION	1.888468274198317E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999709618889464	WITHOUT_CLASSIFICATION	2.9038111053634495E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9994740462051702	WITHOUT_CLASSIFICATION	5.259537948298098E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998927141609519	WITHOUT_CLASSIFICATION	1.0728583904810392E-4	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999977281070466	WITHOUT_CLASSIFICATION	2.2718929533986337E-5	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999793027397541	WITHOUT_CLASSIFICATION	2.069726024586007E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999931071750728	WITHOUT_CLASSIFICATION	6.892824927197864E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999207712483537	WITHOUT_CLASSIFICATION	7.922875164630923E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999207712483537	WITHOUT_CLASSIFICATION	7.922875164630923E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999472210207568	WITHOUT_CLASSIFICATION	5.277897924311003E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999685065282883	WITHOUT_CLASSIFICATION	3.1493471711789995E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999568025021153	WITHOUT_CLASSIFICATION	4.3197497884754156E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999839828171494	WITHOUT_CLASSIFICATION	1.6017182850623575E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999747243810877	WITHOUT_CLASSIFICATION	2.527561891234907E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999689546124563	WITHOUT_CLASSIFICATION	3.104538754381377E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999759689769899	WITHOUT_CLASSIFICATION	2.4031023009988975E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9996935129289822	WITHOUT_CLASSIFICATION	3.0648707101771773E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999809714510204	WITHOUT_CLASSIFICATION	1.902854897959145E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999808038076796	WITHOUT_CLASSIFICATION	1.9196192320342052E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999894376981152	WITHOUT_CLASSIFICATION	1.0562301884797867E-4	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999440368649977	WITHOUT_CLASSIFICATION	5.5963135002311386E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999947308948815	WITHOUT_CLASSIFICATION	5.269105118502728E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999762467015991	WITHOUT_CLASSIFICATION	2.375329840085106E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999966129245194	WITHOUT_CLASSIFICATION	3.387075480602989E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999901877097649	WITHOUT_CLASSIFICATION	9.812290235182496E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999898589584892	WITHOUT_CLASSIFICATION	1.014104151066397E-5	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999999836635863	WITHOUT_CLASSIFICATION	1.6336413696697614E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999931466827174	WITHOUT_CLASSIFICATION	6.8533172825533335E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999587491390711	WITHOUT_CLASSIFICATION	4.1250860928887215E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999117294196989	WITHOUT_CLASSIFICATION	8.8270580301159E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999931466827174	WITHOUT_CLASSIFICATION	6.8533172825533335E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999359267188114	WITHOUT_CLASSIFICATION	6.40732811886244E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999882365020016	WITHOUT_CLASSIFICATION	1.1763497998497782E-5	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997694797641573	WITHOUT_CLASSIFICATION	2.3052023584274226E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997111961880358	WITHOUT_CLASSIFICATION	2.888038119641466E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.999970919617526	WITHOUT_CLASSIFICATION	2.9080382473846485E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999869551862124	WITHOUT_CLASSIFICATION	1.3044813787721911E-5	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999474130648115	WITHOUT_CLASSIFICATION	5.258693518860718E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999625284398592	WITHOUT_CLASSIFICATION	3.747156014081781E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999890685854251	WITHOUT_CLASSIFICATION	1.093141457491764E-5	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999947713071842	WITHOUT_CLASSIFICATION	5.228692815785106E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999918800552293	WITHOUT_CLASSIFICATION	8.119944770592844E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999914683214063	WITHOUT_CLASSIFICATION	8.531678593706786E-5	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999879661541348	WITHOUT_CLASSIFICATION	1.203384586531651E-5	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999761522371596	WITHOUT_CLASSIFICATION	2.3847762840421074E-5	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999963646594074	WITHOUT_CLASSIFICATION	3.635340592609028E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999418744097301	WITHOUT_CLASSIFICATION	5.812559026979441E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999817443101761	WITHOUT_CLASSIFICATION	1.825568982394832E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999708739777772	WITHOUT_CLASSIFICATION	2.9126022222894733E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999666128666885	WITHOUT_CLASSIFICATION	3.3387133311419565E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999883032031967	WITHOUT_CLASSIFICATION	1.1696796803289459E-4	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998165853157993	WITHOUT_CLASSIFICATION	1.834146842007638E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999687430074002	WITHOUT_CLASSIFICATION	3.125699259968752E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999987805166706	WITHOUT_CLASSIFICATION	1.2194833294269998E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999713819161646	WITHOUT_CLASSIFICATION	2.861808383538449E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997934973913276	WITHOUT_CLASSIFICATION	2.065026086724286E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999451663709946	WITHOUT_CLASSIFICATION	5.483362900542776E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999965941999174	WITHOUT_CLASSIFICATION	3.4058000826271137E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999854668995617	WITHOUT_CLASSIFICATION	1.4533100438361903E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999876560305232	WITHOUT_CLASSIFICATION	1.234396947672267E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999984882506778	WITHOUT_CLASSIFICATION	1.511749322239542E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999872264465421	WITHOUT_CLASSIFICATION	1.2773553457891075E-5	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999467564908101	WITHOUT_CLASSIFICATION	5.324350918987645E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999952236548335	WITHOUT_CLASSIFICATION	4.7763451665022355E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999841069822951	WITHOUT_CLASSIFICATION	1.5893017704850676E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.9993084982403185	WITHOUT_CLASSIFICATION	6.915017596813663E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997121131561534	WITHOUT_CLASSIFICATION	2.878868438466252E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999424158201414	WITHOUT_CLASSIFICATION	5.758417985862737E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999924650760462	WITHOUT_CLASSIFICATION	7.534923953801007E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999774108794236	WITHOUT_CLASSIFICATION	2.258912057631146E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999987671442715	WITHOUT_CLASSIFICATION	1.2328557285042385E-5	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999876747439801	WITHOUT_CLASSIFICATION	1.2325256019952937E-5	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999786734881179	WITHOUT_CLASSIFICATION	2.1326511882173278E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999987838315967	WITHOUT_CLASSIFICATION	1.2161684033053147E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9888135184915612	WITHOUT_CLASSIFICATION	0.01118648150843884	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999801973709431	WITHOUT_CLASSIFICATION	1.980262905682963E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999922577202411	WITHOUT_CLASSIFICATION	7.742279758878167E-6	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999877669122791	WITHOUT_CLASSIFICATION	1.2233087720980981E-5	TEST
count++;	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999834469306171	WITHOUT_CLASSIFICATION	1.6553069382864643E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999885352845356	WITHOUT_CLASSIFICATION	1.1464715464464838E-5	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999886967049946	WITHOUT_CLASSIFICATION	1.130329500543123E-5	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999920314880509	WITHOUT_CLASSIFICATION	7.968511949156888E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999884871122913	WITHOUT_CLASSIFICATION	1.1512887708624915E-5	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999894127222761	WITHOUT_CLASSIFICATION	1.058727772391543E-5	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999625308096772	WITHOUT_CLASSIFICATION	3.7469190322729036E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998922163031372	WITHOUT_CLASSIFICATION	1.0778369686280462E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9999830417975725	WITHOUT_CLASSIFICATION	1.6958202427480353E-5	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999863699388983	WITHOUT_CLASSIFICATION	1.3630061101558456E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999981212889052	WITHOUT_CLASSIFICATION	1.8787110948416298E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999361898178962	WITHOUT_CLASSIFICATION	6.38101821037834E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9993897824332688	WITHOUT_CLASSIFICATION	6.102175667311725E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999457013366689	WITHOUT_CLASSIFICATION	5.429866333102238E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999919968966151	WITHOUT_CLASSIFICATION	8.003103384895342E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999517184117066	WITHOUT_CLASSIFICATION	4.828158829341237E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999584967928822	WITHOUT_CLASSIFICATION	4.150320711780592E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999732362621938	WITHOUT_CLASSIFICATION	2.6763737806178892E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999838234778305	WITHOUT_CLASSIFICATION	1.6176522169476565E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999968879981835	WITHOUT_CLASSIFICATION	3.1120018164193345E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999684924839262	WITHOUT_CLASSIFICATION	3.150751607381033E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999453328477551	WITHOUT_CLASSIFICATION	5.466715224502516E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999684924839262	WITHOUT_CLASSIFICATION	3.150751607381033E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999439982009638	WITHOUT_CLASSIFICATION	5.600179903619969E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999895725270906	WITHOUT_CLASSIFICATION	1.042747290946503E-5	TEST
named parameter	WITHOUT_CLASSIFICATION	0.999977629056536	WITHOUT_CLASSIFICATION	2.23709434640049E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998102925090439	WITHOUT_CLASSIFICATION	1.8970749095620186E-4	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998709074586555	WITHOUT_CLASSIFICATION	1.2909254134457318E-4	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9920506998091109	WITHOUT_CLASSIFICATION	0.007949300190889146	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999995175111826	WITHOUT_CLASSIFICATION	4.824888174005636E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999880611788079	WITHOUT_CLASSIFICATION	1.1938821191997555E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999933135730151	WITHOUT_CLASSIFICATION	6.6864269849017925E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9994303608324376	WITHOUT_CLASSIFICATION	5.696391675623578E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999880899242594	WITHOUT_CLASSIFICATION	1.1910075740607311E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999758899683077	WITHOUT_CLASSIFICATION	2.411003169229456E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998941332686391	WITHOUT_CLASSIFICATION	1.0586673136087127E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9975514041234573	WITHOUT_CLASSIFICATION	0.0024485958765426653	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999726030763364	WITHOUT_CLASSIFICATION	2.7396923663562926E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999914405684803	WITHOUT_CLASSIFICATION	8.559431519724739E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999613381563282	WITHOUT_CLASSIFICATION	3.866184367192518E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999613381563282	WITHOUT_CLASSIFICATION	3.866184367192518E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.999979378439468	WITHOUT_CLASSIFICATION	2.062156053201534E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999434221371449	WITHOUT_CLASSIFICATION	5.657786285493714E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999598259148605	WITHOUT_CLASSIFICATION	4.017408513945663E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998987813819482	WITHOUT_CLASSIFICATION	1.0121861805182538E-4	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999946425287813	WITHOUT_CLASSIFICATION	5.357471218703841E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999581854340731	WITHOUT_CLASSIFICATION	4.181456592685761E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9992196171467634	WITHOUT_CLASSIFICATION	7.803828532365041E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999830581343885	WITHOUT_CLASSIFICATION	1.6941865611451572E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999913909955352	WITHOUT_CLASSIFICATION	8.609004464740904E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999870402647398	WITHOUT_CLASSIFICATION	1.2959735260088534E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999104543637033	WITHOUT_CLASSIFICATION	8.95456362968076E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999047657164779	WITHOUT_CLASSIFICATION	9.523428352202295E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999819186070923	WITHOUT_CLASSIFICATION	1.8081392907711302E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998783164203511	WITHOUT_CLASSIFICATION	1.2168357964890661E-4	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999768858059346	WITHOUT_CLASSIFICATION	2.3114194065413424E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999694153065888	WITHOUT_CLASSIFICATION	3.0584693411323834E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999935295608059	WITHOUT_CLASSIFICATION	6.470439194055867E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999028517258779	WITHOUT_CLASSIFICATION	9.714827412218356E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999958442639845	WITHOUT_CLASSIFICATION	4.155736015575944E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999740147495181	WITHOUT_CLASSIFICATION	2.5985250481827248E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999513599121232	WITHOUT_CLASSIFICATION	4.864008787678894E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999986507036234	WITHOUT_CLASSIFICATION	1.3492963765981081E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999605523899893	WITHOUT_CLASSIFICATION	3.944761001072125E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999811810826384	WITHOUT_CLASSIFICATION	1.881891736147581E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999339903946948	WITHOUT_CLASSIFICATION	6.600960530516921E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999890272272375	WITHOUT_CLASSIFICATION	1.097277276240863E-5	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998633808679678	WITHOUT_CLASSIFICATION	1.366191320321999E-4	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999194512325181	WITHOUT_CLASSIFICATION	8.054876748192594E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999752564797901	WITHOUT_CLASSIFICATION	2.474352020990985E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999941876683612	WITHOUT_CLASSIFICATION	5.812331638724314E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999153391782883	WITHOUT_CLASSIFICATION	8.466082171163335E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999470748916831	WITHOUT_CLASSIFICATION	5.292510831689711E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992664907560469	WITHOUT_CLASSIFICATION	7.335092439530746E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999787478088555	WITHOUT_CLASSIFICATION	2.1252191144377865E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999820053697601	WITHOUT_CLASSIFICATION	1.7994630239778833E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999833820023637	WITHOUT_CLASSIFICATION	1.6617997636288847E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999732778176029	WITHOUT_CLASSIFICATION	2.6722182397019576E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999574936123409	WITHOUT_CLASSIFICATION	4.250638765926445E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999825632513316	WITHOUT_CLASSIFICATION	1.7436748668354444E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9994789254943143	WITHOUT_CLASSIFICATION	5.210745056856905E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999387767131181	WITHOUT_CLASSIFICATION	6.122328688187225E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999479336521627	WITHOUT_CLASSIFICATION	5.206634783727164E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999075949201286	WITHOUT_CLASSIFICATION	9.240507987136682E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999672254647693	WITHOUT_CLASSIFICATION	3.277453523076453E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999836456627282	WITHOUT_CLASSIFICATION	1.6354337271801063E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999925014598763	WITHOUT_CLASSIFICATION	7.498540123679279E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999137072860818	WITHOUT_CLASSIFICATION	8.629271391817645E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999976326375456	WITHOUT_CLASSIFICATION	2.367362454398751E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999632703991597	WITHOUT_CLASSIFICATION	3.672960084042872E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999210194036964	WITHOUT_CLASSIFICATION	7.898059630368868E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999479336521627	WITHOUT_CLASSIFICATION	5.206634783727164E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998059656932624	WITHOUT_CLASSIFICATION	1.9403430673750537E-4	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997187620700354	WITHOUT_CLASSIFICATION	2.812379299645568E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999997758678765	WITHOUT_CLASSIFICATION	2.2413212351225255E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999817086155932	WITHOUT_CLASSIFICATION	1.829138440677813E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999705359430929	WITHOUT_CLASSIFICATION	2.9464056906999418E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999705359430929	WITHOUT_CLASSIFICATION	2.9464056906999418E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9982797585584926	WITHOUT_CLASSIFICATION	0.0017202414415074196	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999874980353762	WITHOUT_CLASSIFICATION	1.2501964623683008E-5	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998721055044719	WITHOUT_CLASSIFICATION	1.2789449552808035E-4	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999496875429059	WITHOUT_CLASSIFICATION	5.031245709410572E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999492743971574	WITHOUT_CLASSIFICATION	5.072560284263177E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999693585207585	WITHOUT_CLASSIFICATION	3.064147924152906E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999935669509564	WITHOUT_CLASSIFICATION	6.433049043577541E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9983283296331785	WITHOUT_CLASSIFICATION	0.001671670366821453	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999847394949497	WITHOUT_CLASSIFICATION	1.5260505050323797E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999139472097433	WITHOUT_CLASSIFICATION	8.605279025670474E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999880650686207	WITHOUT_CLASSIFICATION	1.193493137924408E-5	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.999990287394689	WITHOUT_CLASSIFICATION	9.712605311009632E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999726393575887	WITHOUT_CLASSIFICATION	2.736064241123333E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999943692860426	WITHOUT_CLASSIFICATION	5.630713957374608E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998726936836386	WITHOUT_CLASSIFICATION	1.27306316361362E-4	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991646193645242	WITHOUT_CLASSIFICATION	8.35380635475838E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999975892475758	WITHOUT_CLASSIFICATION	2.4107524242627857E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999870885333536	WITHOUT_CLASSIFICATION	1.2911466646413494E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999786031352951	WITHOUT_CLASSIFICATION	2.1396864704888428E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999935430462176	WITHOUT_CLASSIFICATION	6.456953782458468E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999885282012898	WITHOUT_CLASSIFICATION	1.1471798710267452E-5	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999954696387002	WITHOUT_CLASSIFICATION	4.530361299770832E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999976540528179	WITHOUT_CLASSIFICATION	2.34594718203786E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9995789408779527	WITHOUT_CLASSIFICATION	4.210591220472376E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999759583622155	WITHOUT_CLASSIFICATION	2.4041637784531597E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999760209015314	WITHOUT_CLASSIFICATION	2.3979098468519083E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998274607555291	WITHOUT_CLASSIFICATION	1.7253924447092152E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9998946573375543	WITHOUT_CLASSIFICATION	1.0534266244559775E-4	TEST
DELETED	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999693071641289	WITHOUT_CLASSIFICATION	3.0692835871042646E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999543771223813	WITHOUT_CLASSIFICATION	4.562287761873759E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9996164037428747	WITHOUT_CLASSIFICATION	3.835962571252455E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.99989838632578	WITHOUT_CLASSIFICATION	1.0161367422003252E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999543771223813	WITHOUT_CLASSIFICATION	4.562287761873759E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999858589725457	WITHOUT_CLASSIFICATION	1.4141027454361478E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999693071641289	WITHOUT_CLASSIFICATION	3.0692835871042646E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999585819919987	WITHOUT_CLASSIFICATION	4.1418008001304447E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999543771223813	WITHOUT_CLASSIFICATION	4.562287761873759E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999507429554577	WITHOUT_CLASSIFICATION	4.925704454232943E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999689771000991	WITHOUT_CLASSIFICATION	3.102289990095565E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999104543637033	WITHOUT_CLASSIFICATION	8.95456362968076E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999279904172735	WITHOUT_CLASSIFICATION	7.200958272645388E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998676704739511	WITHOUT_CLASSIFICATION	1.3232952604887133E-4	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999990437911017	WITHOUT_CLASSIFICATION	9.56208898289887E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999749373208513	WITHOUT_CLASSIFICATION	2.5062679148679408E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999899948090919	WITHOUT_CLASSIFICATION	1.0005190908093822E-4	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999693426893378	WITHOUT_CLASSIFICATION	3.0657310662126064E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999147434857771	WITHOUT_CLASSIFICATION	8.525651422294723E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999285864676655	WITHOUT_CLASSIFICATION	7.141353233449041E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999579730695057	WITHOUT_CLASSIFICATION	4.202693049437322E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999705514618391	WITHOUT_CLASSIFICATION	2.9448538160898894E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999611731829823	WITHOUT_CLASSIFICATION	3.8826817017768304E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999980808557481	WITHOUT_CLASSIFICATION	1.919144251899424E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999931759463918	WITHOUT_CLASSIFICATION	6.824053608216411E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999907946112342	WITHOUT_CLASSIFICATION	9.205388765936565E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999312450041594	WITHOUT_CLASSIFICATION	6.875499584054516E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999582609818085	WITHOUT_CLASSIFICATION	4.1739018191421075E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999538765859147	WITHOUT_CLASSIFICATION	4.612341408516174E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999887348639098	WITHOUT_CLASSIFICATION	1.1265136090206403E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999474282695953	WITHOUT_CLASSIFICATION	5.2571730404678514E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999982368421449	WITHOUT_CLASSIFICATION	1.763157855085756E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999943532977714	WITHOUT_CLASSIFICATION	5.646702228597016E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998686482354618	WITHOUT_CLASSIFICATION	1.3135176453814515E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999559168240922	WITHOUT_CLASSIFICATION	4.408317590769491E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999768632012909	WITHOUT_CLASSIFICATION	2.31367987091598E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999725711123548	WITHOUT_CLASSIFICATION	2.7428887645162135E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954934839827	WITHOUT_CLASSIFICATION	4.5065160173048744E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999961818796982	WITHOUT_CLASSIFICATION	3.818120301797035E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999670348519717	WITHOUT_CLASSIFICATION	3.2965148028332654E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999861218122574	WITHOUT_CLASSIFICATION	1.387818774253202E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999850962632693	WITHOUT_CLASSIFICATION	1.4903736730702858E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999998690183692	WITHOUT_CLASSIFICATION	1.3098163079295256E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999864547024675	WITHOUT_CLASSIFICATION	1.3545297532384875E-5	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999870438405024	WITHOUT_CLASSIFICATION	1.2956159497666725E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999717371796075	WITHOUT_CLASSIFICATION	2.8262820392505874E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999896500525534	WITHOUT_CLASSIFICATION	1.034994744668634E-5	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.99995465198081	WITHOUT_CLASSIFICATION	4.534801919000855E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999916071700048	WITHOUT_CLASSIFICATION	8.392829995188777E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998670274672445	WITHOUT_CLASSIFICATION	1.3297253275548293E-4	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999466059623283	WITHOUT_CLASSIFICATION	5.339403767168291E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999994541420541	WITHOUT_CLASSIFICATION	5.45857945891251E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999618926317033	WITHOUT_CLASSIFICATION	3.810736829668219E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999961515990518	WITHOUT_CLASSIFICATION	3.8484009482085825E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997121808697008	WITHOUT_CLASSIFICATION	2.8781913029910254E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998445580620089	WITHOUT_CLASSIFICATION	1.554419379911146E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999414283643482	WITHOUT_CLASSIFICATION	5.8571635651791916E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999035734417	WITHOUT_CLASSIFICATION	9.64265583007881E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997972567727823	WITHOUT_CLASSIFICATION	2.027432272177017E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999281702905216	WITHOUT_CLASSIFICATION	7.182970947828273E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999551385027989	WITHOUT_CLASSIFICATION	4.4861497200975015E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994945988777743	WITHOUT_CLASSIFICATION	5.054011222257225E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999974866343931	WITHOUT_CLASSIFICATION	2.513365606905254E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999686293649704	WITHOUT_CLASSIFICATION	3.137063502946267E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9982189130836974	WITHOUT_CLASSIFICATION	0.001781086916302666	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999106685072051	WITHOUT_CLASSIFICATION	8.93314927948656E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954934839827	WITHOUT_CLASSIFICATION	4.5065160173048744E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999183669559857	WITHOUT_CLASSIFICATION	8.163304401422728E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999984688561201	WITHOUT_CLASSIFICATION	1.5311438799852533E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999689980369012	WITHOUT_CLASSIFICATION	3.100196309869029E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998741518433728	WITHOUT_CLASSIFICATION	1.2584815662715804E-4	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999173587735035	WITHOUT_CLASSIFICATION	8.26412264964947E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999345154912587	WITHOUT_CLASSIFICATION	6.548450874131661E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602891930627	WITHOUT_CLASSIFICATION	3.971080693733226E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999985018973571	WITHOUT_CLASSIFICATION	1.49810264289735E-5	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999921382180834	WITHOUT_CLASSIFICATION	7.861781916635358E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999433951304412	WITHOUT_CLASSIFICATION	5.660486955893392E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999891678830485	WITHOUT_CLASSIFICATION	1.0832116951534654E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999752564797901	WITHOUT_CLASSIFICATION	2.474352020990985E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999694571554321	WITHOUT_CLASSIFICATION	3.054284456794399E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999440503455225	WITHOUT_CLASSIFICATION	5.594965447758145E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999439982009638	WITHOUT_CLASSIFICATION	5.600179903619969E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999991128385134	WITHOUT_CLASSIFICATION	8.871614866625177E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999955072647387	WITHOUT_CLASSIFICATION	4.492735261269108E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999790371510353	WITHOUT_CLASSIFICATION	2.0962848964789477E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999808341555813	WITHOUT_CLASSIFICATION	1.916584441873562E-5	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999982451616011	WITHOUT_CLASSIFICATION	1.754838398958085E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999738771175507	WITHOUT_CLASSIFICATION	2.612288244935758E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999738771175507	WITHOUT_CLASSIFICATION	2.612288244935758E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999768927596108	WITHOUT_CLASSIFICATION	2.3107240389212934E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999907877405058	WITHOUT_CLASSIFICATION	9.212259494241969E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999854152521225	WITHOUT_CLASSIFICATION	1.4584747877541605E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999757369338812	WITHOUT_CLASSIFICATION	2.42630661188507E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998798671058813	WITHOUT_CLASSIFICATION	1.2013289411875878E-4	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999888694163317	WITHOUT_CLASSIFICATION	1.1130583668267562E-5	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999437368045621	WITHOUT_CLASSIFICATION	5.6263195437856226E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999925707132527	WITHOUT_CLASSIFICATION	7.429286747292997E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999925707132527	WITHOUT_CLASSIFICATION	7.429286747292997E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998652763065936	WITHOUT_CLASSIFICATION	1.3472369340631154E-4	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.999986212204847	WITHOUT_CLASSIFICATION	1.3787795153087158E-5	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9996767904450767	WITHOUT_CLASSIFICATION	3.2320955492334103E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999988933955965	WITHOUT_CLASSIFICATION	1.1066044035102095E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999988933955965	WITHOUT_CLASSIFICATION	1.1066044035102095E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999988933955965	WITHOUT_CLASSIFICATION	1.1066044035102095E-5	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999957143860906	WITHOUT_CLASSIFICATION	4.285613909410273E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999659000946707	WITHOUT_CLASSIFICATION	3.409990532935308E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999722342007064	WITHOUT_CLASSIFICATION	2.7765799293612104E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999323347160772	WITHOUT_CLASSIFICATION	6.766528392275917E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999774781755552	WITHOUT_CLASSIFICATION	2.2521824444801044E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999998988886223	WITHOUT_CLASSIFICATION	1.01111377704554E-6	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999459985132979	WITHOUT_CLASSIFICATION	5.4001486702052575E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9984738215428729	WITHOUT_CLASSIFICATION	0.0015261784571270712	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999560753463583	WITHOUT_CLASSIFICATION	4.392465364164428E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999846456033988	WITHOUT_CLASSIFICATION	1.53543966011981E-5	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999704967441658	WITHOUT_CLASSIFICATION	2.950325583416561E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999775310376567	WITHOUT_CLASSIFICATION	2.246896234327022E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999571485260025	WITHOUT_CLASSIFICATION	4.285147399738786E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999543156767577	WITHOUT_CLASSIFICATION	4.568432324225249E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999951964580874	WITHOUT_CLASSIFICATION	4.803541912654642E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999804175612783	WITHOUT_CLASSIFICATION	1.958243872168958E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999858741031259	WITHOUT_CLASSIFICATION	1.412589687419192E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999903181648825	WITHOUT_CLASSIFICATION	9.681835117433307E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999738771175507	WITHOUT_CLASSIFICATION	2.612288244935758E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999784517962517	WITHOUT_CLASSIFICATION	2.154820374827906E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999964923005342	WITHOUT_CLASSIFICATION	3.5076994658134828E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999497528703953	WITHOUT_CLASSIFICATION	5.024712960470136E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999721049659167	WITHOUT_CLASSIFICATION	2.7895034083207742E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999823818400316	WITHOUT_CLASSIFICATION	1.761815996839773E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999993777207639	WITHOUT_CLASSIFICATION	6.222792361041709E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999264475927495	WITHOUT_CLASSIFICATION	7.35524072505694E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999914227288627	WITHOUT_CLASSIFICATION	8.577271137411479E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996001952117166	WITHOUT_CLASSIFICATION	3.998047882833874E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999878024138316	WITHOUT_CLASSIFICATION	1.2197586168488052E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999436547906151	WITHOUT_CLASSIFICATION	5.634520938490341E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999340911403157	WITHOUT_CLASSIFICATION	6.590885968416063E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999791632213353	WITHOUT_CLASSIFICATION	2.083677866474397E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999756280044971	WITHOUT_CLASSIFICATION	2.4371995502860766E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999637172374471	WITHOUT_CLASSIFICATION	3.628276255289874E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999998236173428	WITHOUT_CLASSIFICATION	1.7638265719394852E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999936347272395	WITHOUT_CLASSIFICATION	6.36527276049E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999975144003149	WITHOUT_CLASSIFICATION	2.4855996850298435E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999779172075082	WITHOUT_CLASSIFICATION	2.2082792491842982E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999779172075082	WITHOUT_CLASSIFICATION	2.2082792491842982E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999845020837549	WITHOUT_CLASSIFICATION	1.5497916245142892E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999912298762658	WITHOUT_CLASSIFICATION	8.77012373421501E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999844805827678	WITHOUT_CLASSIFICATION	1.551941723228041E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999970976888578	WITHOUT_CLASSIFICATION	2.9023111422058672E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999478688020473	WITHOUT_CLASSIFICATION	5.2131197952608006E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999496872121392	WITHOUT_CLASSIFICATION	5.03127878608974E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999677973654825	WITHOUT_CLASSIFICATION	3.220263451754769E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998978785893109	WITHOUT_CLASSIFICATION	1.0212141068912848E-4	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999852520048732	WITHOUT_CLASSIFICATION	1.4747995126778638E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999974724738146	WITHOUT_CLASSIFICATION	2.5275261854109262E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999191430800537	WITHOUT_CLASSIFICATION	8.085691994622475E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999752564797901	WITHOUT_CLASSIFICATION	2.474352020990985E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999973633032894	WITHOUT_CLASSIFICATION	2.636696710696486E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999905385568205	WITHOUT_CLASSIFICATION	9.461443179535128E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999985791817307	WITHOUT_CLASSIFICATION	1.4208182692568434E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999077060262449	WITHOUT_CLASSIFICATION	9.229397375505648E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999998149297598	WITHOUT_CLASSIFICATION	1.8507024020431412E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999998149297598	WITHOUT_CLASSIFICATION	1.8507024020431412E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999331065261179	WITHOUT_CLASSIFICATION	6.68934738820916E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999996248502493	WITHOUT_CLASSIFICATION	3.7514975069446904E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999068623716217	WITHOUT_CLASSIFICATION	9.313762837828312E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999401153768932	WITHOUT_CLASSIFICATION	5.9884623106724805E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998749162644612	WITHOUT_CLASSIFICATION	1.2508373553885043E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998028285762466	WITHOUT_CLASSIFICATION	1.971714237534489E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999139307339222	WITHOUT_CLASSIFICATION	8.60692660777846E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999910530305242	WITHOUT_CLASSIFICATION	8.946969475945836E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999308160016441	WITHOUT_CLASSIFICATION	6.918399835582907E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9996661458217609	WITHOUT_CLASSIFICATION	3.338541782390979E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999411481796788	WITHOUT_CLASSIFICATION	5.8851820321138304E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999910530305242	WITHOUT_CLASSIFICATION	8.946969475945836E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999933447569442	WITHOUT_CLASSIFICATION	6.655243055790549E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999798408116537	WITHOUT_CLASSIFICATION	2.015918834626822E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999842217687741	WITHOUT_CLASSIFICATION	1.577823122588618E-5	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999687386568262	WITHOUT_CLASSIFICATION	3.1261343173722205E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999574479800178	WITHOUT_CLASSIFICATION	4.255201998212112E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999796525787995	WITHOUT_CLASSIFICATION	2.0347421200451098E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999720620832793	WITHOUT_CLASSIFICATION	2.793791672065093E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999768720402545	WITHOUT_CLASSIFICATION	2.312795974552858E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999940816838657	WITHOUT_CLASSIFICATION	5.918316134340522E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999834942316118	WITHOUT_CLASSIFICATION	1.650576838825111E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998325932842069	WITHOUT_CLASSIFICATION	1.6740671579305898E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999937264964489	WITHOUT_CLASSIFICATION	6.2735035510535715E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999832028183541	WITHOUT_CLASSIFICATION	1.679718164599886E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999907699577573	WITHOUT_CLASSIFICATION	9.230042242658869E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999912067065547	WITHOUT_CLASSIFICATION	8.793293445277157E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999891915735812	WITHOUT_CLASSIFICATION	1.0808426418777449E-5	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9990775464300317	WITHOUT_CLASSIFICATION	9.224535699684206E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999902627974911	WITHOUT_CLASSIFICATION	9.737202508887582E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999902627974911	WITHOUT_CLASSIFICATION	9.737202508887582E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999720620832793	WITHOUT_CLASSIFICATION	2.793791672065093E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999765023389431	WITHOUT_CLASSIFICATION	2.3497661056888342E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999651818579196	WITHOUT_CLASSIFICATION	3.4818142080442305E-5	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998214627276717	WITHOUT_CLASSIFICATION	1.7853727232834056E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999675536597071	WITHOUT_CLASSIFICATION	3.244634029288128E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999966988980188	WITHOUT_CLASSIFICATION	3.3011019812091244E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999754203935157	WITHOUT_CLASSIFICATION	2.4579606484307385E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999869517326498	WITHOUT_CLASSIFICATION	1.3048267350182199E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999219703726037	WITHOUT_CLASSIFICATION	7.802962739629465E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999954331313341	WITHOUT_CLASSIFICATION	4.566868665863963E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999648101100047	WITHOUT_CLASSIFICATION	3.5189889995196516E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999969844374993	WITHOUT_CLASSIFICATION	3.0155625006349616E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999880420437466	WITHOUT_CLASSIFICATION	1.195795625353169E-5	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999963166247268	WITHOUT_CLASSIFICATION	3.683375273194345E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999965513353959	WITHOUT_CLASSIFICATION	3.448664604096666E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999547158225133	WITHOUT_CLASSIFICATION	4.528417748675673E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999784545905391	WITHOUT_CLASSIFICATION	2.154540946081881E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999801639895196	WITHOUT_CLASSIFICATION	1.983601048035057E-5	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999916377949105	WITHOUT_CLASSIFICATION	8.362205089518758E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998956258700937	WITHOUT_CLASSIFICATION	1.0437412990620564E-4	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999884070182065	WITHOUT_CLASSIFICATION	1.1592981793548528E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998874663184554	WITHOUT_CLASSIFICATION	1.1253368154470342E-4	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999445727615659	WITHOUT_CLASSIFICATION	5.542723843401207E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999458354891683	WITHOUT_CLASSIFICATION	5.416451083180089E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999886993533048	WITHOUT_CLASSIFICATION	1.1300646695175546E-5	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999663558422783	WITHOUT_CLASSIFICATION	3.36441577217272E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999759955699374	WITHOUT_CLASSIFICATION	2.400443006261905E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9970536500006835	WITHOUT_CLASSIFICATION	0.0029463499993166243	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997747918071741	WITHOUT_CLASSIFICATION	2.252081928258357E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999671514283752	WITHOUT_CLASSIFICATION	3.284857162475496E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999655690995188	WITHOUT_CLASSIFICATION	3.44309004812282E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999537581449071	WITHOUT_CLASSIFICATION	4.624185509281658E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999775882236628	WITHOUT_CLASSIFICATION	2.2411776337235694E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999882252616699	WITHOUT_CLASSIFICATION	1.1774738330077847E-5	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999912832304267	WITHOUT_CLASSIFICATION	8.716769573301758E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999867987409528	WITHOUT_CLASSIFICATION	1.3201259047316602E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998693901361545	WITHOUT_CLASSIFICATION	1.3060986384558226E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999950861237732	WITHOUT_CLASSIFICATION	4.913876226781854E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999811163376974	WITHOUT_CLASSIFICATION	1.8883662302702494E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997171680340797	WITHOUT_CLASSIFICATION	2.828319659202599E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999791204098495	WITHOUT_CLASSIFICATION	2.087959015047578E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999663681315115	WITHOUT_CLASSIFICATION	3.363186848850515E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999765929863649	WITHOUT_CLASSIFICATION	2.340701363513806E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9997982753225864	WITHOUT_CLASSIFICATION	2.0172467741355875E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999992852262061	WITHOUT_CLASSIFICATION	7.147737939036534E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997297285291091	WITHOUT_CLASSIFICATION	2.7027147089094553E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998812928695532	WITHOUT_CLASSIFICATION	1.1870713044690533E-4	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999930160780381	WITHOUT_CLASSIFICATION	6.983921961934992E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995225158085778	WITHOUT_CLASSIFICATION	4.774841914221928E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999977518447792	WITHOUT_CLASSIFICATION	2.2481552206294633E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999227309248103	WITHOUT_CLASSIFICATION	7.726907518969683E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998975818107382	WITHOUT_CLASSIFICATION	1.0241818926183691E-4	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999308160016441	WITHOUT_CLASSIFICATION	6.918399835582907E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995105831227912	WITHOUT_CLASSIFICATION	4.894168772087619E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999547158225133	WITHOUT_CLASSIFICATION	4.528417748675673E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999809615884163	WITHOUT_CLASSIFICATION	1.9038411583608896E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999695522069236	WITHOUT_CLASSIFICATION	3.0447793076267664E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999927328868957	WITHOUT_CLASSIFICATION	7.267113104172509E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999927110976182	WITHOUT_CLASSIFICATION	7.288902381753411E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999703219881115	WITHOUT_CLASSIFICATION	2.967801188841982E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999996843363907	WITHOUT_CLASSIFICATION	3.1566360930980906E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998674604229055	WITHOUT_CLASSIFICATION	1.3253957709442066E-4	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999539735691486	WITHOUT_CLASSIFICATION	4.60264308514681E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999356088738066	WITHOUT_CLASSIFICATION	6.439112619336412E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999937886603242	WITHOUT_CLASSIFICATION	6.211339675866206E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999823063355345	WITHOUT_CLASSIFICATION	1.7693664465500257E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999973751897647	WITHOUT_CLASSIFICATION	2.6248102353134126E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999817545732231	WITHOUT_CLASSIFICATION	1.824542677679824E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999817545732231	WITHOUT_CLASSIFICATION	1.824542677679824E-5	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997952675380067	WITHOUT_CLASSIFICATION	2.0473246199323116E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9990672099879063	WITHOUT_CLASSIFICATION	9.327900120937219E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999883333438142	WITHOUT_CLASSIFICATION	1.1666656185662642E-5	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9956711513706752	WITHOUT_CLASSIFICATION	0.0043288486293248185	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999850664503167	WITHOUT_CLASSIFICATION	1.4933549683306404E-5	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999853041638334	WITHOUT_CLASSIFICATION	1.4695836166552858E-5	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999971128782014	WITHOUT_CLASSIFICATION	2.8871217986542893E-6	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999255610934314	WITHOUT_CLASSIFICATION	7.443890656849289E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999484762240851	WITHOUT_CLASSIFICATION	5.152377591490726E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999670186166262	WITHOUT_CLASSIFICATION	3.29813833737945E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999670186166262	WITHOUT_CLASSIFICATION	3.29813833737945E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999487037980413	WITHOUT_CLASSIFICATION	5.129620195859573E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994451578609	WITHOUT_CLASSIFICATION	5.548421390683794E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999743913476242	WITHOUT_CLASSIFICATION	2.5608652375720193E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999862219898719	WITHOUT_CLASSIFICATION	1.3778010128132944E-5	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999264968604928	WITHOUT_CLASSIFICATION	7.350313950716708E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9995127840288984	WITHOUT_CLASSIFICATION	4.8721597110157544E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999971574753889	WITHOUT_CLASSIFICATION	2.842524611108321E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999751473848718	WITHOUT_CLASSIFICATION	2.4852615128152925E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999437029997523	WITHOUT_CLASSIFICATION	5.6297000247552135E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999950450236641	WITHOUT_CLASSIFICATION	4.954976335956522E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999856079747471	WITHOUT_CLASSIFICATION	1.4392025252817556E-5	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999481357722223	WITHOUT_CLASSIFICATION	5.1864227777757366E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999493848850814	WITHOUT_CLASSIFICATION	5.061511491844945E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475282993427	WITHOUT_CLASSIFICATION	5.247170065715074E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999359410020381	WITHOUT_CLASSIFICATION	6.40589979618913E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999770018299213	WITHOUT_CLASSIFICATION	2.299817007870263E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999969083381379	WITHOUT_CLASSIFICATION	3.09166186210456E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999789872984705	WITHOUT_CLASSIFICATION	2.1012701529598E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999889673674706	WITHOUT_CLASSIFICATION	1.1032632529525572E-5	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999638962897714	WITHOUT_CLASSIFICATION	3.6103710228556274E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999994863618036	WITHOUT_CLASSIFICATION	5.136381963949766E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999973908892247	WITHOUT_CLASSIFICATION	2.60911077531508E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999740751900099	WITHOUT_CLASSIFICATION	2.592480999014068E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999792951930371	WITHOUT_CLASSIFICATION	2.0704806962851833E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999865405940477	WITHOUT_CLASSIFICATION	1.3459405952368683E-5	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999538099142535	WITHOUT_CLASSIFICATION	4.619008574648494E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999769562986107	WITHOUT_CLASSIFICATION	2.304370138925696E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999676021340853	WITHOUT_CLASSIFICATION	3.2397865914564724E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999995442117601	WITHOUT_CLASSIFICATION	4.557882398916541E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999662096710036	WITHOUT_CLASSIFICATION	3.379032899648649E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999248763649069	WITHOUT_CLASSIFICATION	7.512363509299858E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625040978739	WITHOUT_CLASSIFICATION	3.74959021261739E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9944385996206372	WITHOUT_CLASSIFICATION	0.005561400379362805	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999917233001026	WITHOUT_CLASSIFICATION	8.27669989753091E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9998963976334304	WITHOUT_CLASSIFICATION	1.0360236656956098E-4	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999774123391043	WITHOUT_CLASSIFICATION	2.2587660895737624E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999659321375427	WITHOUT_CLASSIFICATION	3.4067862457429635E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999980337763531	WITHOUT_CLASSIFICATION	1.966223646897331E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999601644556053	WITHOUT_CLASSIFICATION	3.98355443947264E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999741932576612	WITHOUT_CLASSIFICATION	2.5806742338713588E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999825424331746	WITHOUT_CLASSIFICATION	1.7457566825326475E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999699410921841	WITHOUT_CLASSIFICATION	3.00589078159712E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997511523480282	WITHOUT_CLASSIFICATION	2.488476519717739E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999772507936677	WITHOUT_CLASSIFICATION	2.2749206332333643E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.999975391984253	WITHOUT_CLASSIFICATION	2.460801574698124E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999756092137922	WITHOUT_CLASSIFICATION	2.4390786207769168E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998070175304014	WITHOUT_CLASSIFICATION	1.9298246959861858E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999866268303779	WITHOUT_CLASSIFICATION	1.3373169622019363E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999027263228283	WITHOUT_CLASSIFICATION	9.727367717172911E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999851138286655	WITHOUT_CLASSIFICATION	1.4886171334582426E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999493417335451	WITHOUT_CLASSIFICATION	5.065826645490563E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999905721149409	WITHOUT_CLASSIFICATION	9.42788505916929E-6	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999900382999245	WITHOUT_CLASSIFICATION	9.961700075595996E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999872284856856	WITHOUT_CLASSIFICATION	1.2771514314504934E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999808509908572	WITHOUT_CLASSIFICATION	1.914900914284379E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999478794334117	WITHOUT_CLASSIFICATION	5.212056658821187E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999808509908572	WITHOUT_CLASSIFICATION	1.914900914284379E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999668742805491	WITHOUT_CLASSIFICATION	3.3125719450852116E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999958377403495	WITHOUT_CLASSIFICATION	4.162259650508529E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999741703063367	WITHOUT_CLASSIFICATION	2.5829693663360173E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999941717976066	WITHOUT_CLASSIFICATION	5.8282023932916615E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999849325354417	WITHOUT_CLASSIFICATION	1.506746455826733E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999741703063367	WITHOUT_CLASSIFICATION	2.5829693663360173E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999983425727378	WITHOUT_CLASSIFICATION	1.6574272621956078E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995962285322082	WITHOUT_CLASSIFICATION	4.037714677917322E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999917235838732	WITHOUT_CLASSIFICATION	8.276416126862418E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999905862132424	WITHOUT_CLASSIFICATION	9.413786757521224E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999960329645297	WITHOUT_CLASSIFICATION	3.9670354702916905E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999917901913242	WITHOUT_CLASSIFICATION	8.209808675759352E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999944233208902	WITHOUT_CLASSIFICATION	5.576679109832712E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9988985389416366	WITHOUT_CLASSIFICATION	0.0011014610583633961	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999898863697971	WITHOUT_CLASSIFICATION	1.0113630202809469E-5	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999986730106538	WITHOUT_CLASSIFICATION	1.3269893461853695E-5	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999639388176602	WITHOUT_CLASSIFICATION	3.6061182339882016E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999967358481369	WITHOUT_CLASSIFICATION	3.2641518630948135E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999993256055996	WITHOUT_CLASSIFICATION	6.743944004409776E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997632934057338	WITHOUT_CLASSIFICATION	2.367065942662108E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999831259041582	WITHOUT_CLASSIFICATION	1.68740958417476E-5	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999313292393982	WITHOUT_CLASSIFICATION	6.867076060182877E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9973313566986703	WITHOUT_CLASSIFICATION	0.0026686433013295967	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999933726117741	WITHOUT_CLASSIFICATION	6.627388225865078E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.99994844343108	WITHOUT_CLASSIFICATION	5.1556568919977506E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9971858348225329	WITHOUT_CLASSIFICATION	0.0028141651774671833	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999751536407033	WITHOUT_CLASSIFICATION	2.484635929675643E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999887388396823	WITHOUT_CLASSIFICATION	1.1261160317725415E-5	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999770014730894	WITHOUT_CLASSIFICATION	2.2998526910595304E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999722451147822	WITHOUT_CLASSIFICATION	2.7754885217791757E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999788872849379	WITHOUT_CLASSIFICATION	2.111271506219906E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999438892003477	WITHOUT_CLASSIFICATION	5.611079965230412E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999979952713791	WITHOUT_CLASSIFICATION	2.0047286208881726E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999864092476751	WITHOUT_CLASSIFICATION	1.3590752324985709E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999630398899731	WITHOUT_CLASSIFICATION	3.6960110026934434E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999837781575713	WITHOUT_CLASSIFICATION	1.6221842428735856E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999770014730894	WITHOUT_CLASSIFICATION	2.2998526910595304E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999771796245439	WITHOUT_CLASSIFICATION	2.2820375456116455E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999009374031587	WITHOUT_CLASSIFICATION	9.906259684140374E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999734784368218	WITHOUT_CLASSIFICATION	2.6521563178090106E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991056709374067	WITHOUT_CLASSIFICATION	8.943290625933142E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9971858348225329	WITHOUT_CLASSIFICATION	0.0028141651774671833	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999830693434932	WITHOUT_CLASSIFICATION	1.6930656506864133E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999000014954554	WITHOUT_CLASSIFICATION	9.999850454457439E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998685086942729	WITHOUT_CLASSIFICATION	1.3149130572705917E-4	TEST
special case	WITHOUT_CLASSIFICATION	0.9999778011831097	WITHOUT_CLASSIFICATION	2.2198816890284878E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999926155659298	WITHOUT_CLASSIFICATION	7.384434070208007E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999948947485168	WITHOUT_CLASSIFICATION	5.105251483175001E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999075085209957	WITHOUT_CLASSIFICATION	9.249147900423693E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999484147256331	WITHOUT_CLASSIFICATION	5.1585274367009264E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999479790984741	WITHOUT_CLASSIFICATION	5.202090152597268E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999640414673826	WITHOUT_CLASSIFICATION	3.5958532617336666E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9994496864508704	WITHOUT_CLASSIFICATION	5.503135491295132E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999881007106356	WITHOUT_CLASSIFICATION	1.1899289364436726E-5	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999896116621937	WITHOUT_CLASSIFICATION	1.0388337806364212E-5	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999854155200604	WITHOUT_CLASSIFICATION	1.4584479939668534E-5	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999846782701012	WITHOUT_CLASSIFICATION	1.5321729898761926E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999935643977962	WITHOUT_CLASSIFICATION	6.435602203846909E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998578250735413	WITHOUT_CLASSIFICATION	1.4217492645875456E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997997117330697	WITHOUT_CLASSIFICATION	2.002882669302909E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998066393227816	WITHOUT_CLASSIFICATION	1.9336067721848198E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999620619286518	WITHOUT_CLASSIFICATION	3.7938071348282786E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999431296430745	WITHOUT_CLASSIFICATION	5.687035692533533E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999431296430745	WITHOUT_CLASSIFICATION	5.687035692533533E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999924789319353	WITHOUT_CLASSIFICATION	7.5210680646511075E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999431296430745	WITHOUT_CLASSIFICATION	5.687035692533533E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999431296430745	WITHOUT_CLASSIFICATION	5.687035692533533E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999773625493119	WITHOUT_CLASSIFICATION	2.263745068805657E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999710446902762	WITHOUT_CLASSIFICATION	2.895530972380232E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999947648532214	WITHOUT_CLASSIFICATION	5.2351467786045774E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999947648532214	WITHOUT_CLASSIFICATION	5.2351467786045774E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999757940771431	WITHOUT_CLASSIFICATION	2.4205922856958156E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999549667615882	WITHOUT_CLASSIFICATION	4.5033238411725306E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999752545154674	WITHOUT_CLASSIFICATION	2.4745484532552367E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9987198935789434	WITHOUT_CLASSIFICATION	0.001280106421056653	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999813339888343	WITHOUT_CLASSIFICATION	1.866601116569963E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998642088190226	WITHOUT_CLASSIFICATION	1.3579118097732605E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998901400636677	WITHOUT_CLASSIFICATION	1.0985993633234484E-4	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999892322951233	WITHOUT_CLASSIFICATION	1.0767704876659544E-5	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999901711169206	WITHOUT_CLASSIFICATION	9.828883079390674E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998928866748783	WITHOUT_CLASSIFICATION	1.071133251217098E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999721667269561	WITHOUT_CLASSIFICATION	2.7833273043903913E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998450544291638	WITHOUT_CLASSIFICATION	1.5494557083613845E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999838234778305	WITHOUT_CLASSIFICATION	1.6176522169476565E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999688852409216	WITHOUT_CLASSIFICATION	3.1114759078336084E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999653953696785	WITHOUT_CLASSIFICATION	3.4604630321449735E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998551387804127	WITHOUT_CLASSIFICATION	1.4486121958723528E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999976038754775	WITHOUT_CLASSIFICATION	2.3961245225377508E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999589657325038	WITHOUT_CLASSIFICATION	4.10342674961962E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999838234778305	WITHOUT_CLASSIFICATION	1.6176522169476565E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999751536407033	WITHOUT_CLASSIFICATION	2.484635929675643E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999787553395159	WITHOUT_CLASSIFICATION	2.1244660484198186E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999722975099932	WITHOUT_CLASSIFICATION	2.7702490006850705E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999603340142609	WITHOUT_CLASSIFICATION	3.966598573920435E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.999984234800865	WITHOUT_CLASSIFICATION	1.5765199135087403E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999920171088631	WITHOUT_CLASSIFICATION	7.982891136937133E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9998654203936853	WITHOUT_CLASSIFICATION	1.345796063146624E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999847194182414	WITHOUT_CLASSIFICATION	1.528058175854549E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999984442884926	WITHOUT_CLASSIFICATION	1.5557115073905622E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999923575895606	WITHOUT_CLASSIFICATION	7.642410439376824E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999803876350036	WITHOUT_CLASSIFICATION	1.9612364996350487E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999126584576311	WITHOUT_CLASSIFICATION	8.73415423688447E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999918695405017	WITHOUT_CLASSIFICATION	8.130459498385674E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999798451397882	WITHOUT_CLASSIFICATION	2.0154860211843777E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998812779507892	WITHOUT_CLASSIFICATION	1.1872204921083905E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999056041680755	WITHOUT_CLASSIFICATION	9.43958319244567E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999884040199658	WITHOUT_CLASSIFICATION	1.1595980034250142E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999916099714237	WITHOUT_CLASSIFICATION	8.390028576339302E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999448823125445	WITHOUT_CLASSIFICATION	5.511768745539007E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998958777868238	WITHOUT_CLASSIFICATION	1.0412221317629648E-4	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999775630720423	WITHOUT_CLASSIFICATION	2.243692795760384E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.999970169573826	WITHOUT_CLASSIFICATION	2.983042617407491E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999999783945048	WITHOUT_CLASSIFICATION	2.160549519958352E-7	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999984442884926	WITHOUT_CLASSIFICATION	1.5557115073905622E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999782080421528	WITHOUT_CLASSIFICATION	2.1791957847312187E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999709762608282	WITHOUT_CLASSIFICATION	2.9023739171785625E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999966564593267	WITHOUT_CLASSIFICATION	3.343540673289336E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999395257391737	WITHOUT_CLASSIFICATION	6.0474260826294235E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999704667125129	WITHOUT_CLASSIFICATION	2.95332874871244E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999870810662705	WITHOUT_CLASSIFICATION	1.2918933729496068E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999717285004968	WITHOUT_CLASSIFICATION	2.8271499503283656E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999870810662705	WITHOUT_CLASSIFICATION	1.2918933729496068E-5	TEST
hilo config	WITHOUT_CLASSIFICATION	0.999972086010385	WITHOUT_CLASSIFICATION	2.7913989614899913E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999965671354122	WITHOUT_CLASSIFICATION	3.432864587810259E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999912051658832	WITHOUT_CLASSIFICATION	8.794834116627491E-6	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999726940225249	WITHOUT_CLASSIFICATION	2.7305977475134854E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999200787991473	WITHOUT_CLASSIFICATION	7.992120085268002E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999680194093811	WITHOUT_CLASSIFICATION	3.198059061889304E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999677749191297	WITHOUT_CLASSIFICATION	3.222508087038401E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999965671354122	WITHOUT_CLASSIFICATION	3.432864587810259E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999649521595241	WITHOUT_CLASSIFICATION	3.504784047584392E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999660743877024	WITHOUT_CLASSIFICATION	3.392561229772204E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999181083335172	WITHOUT_CLASSIFICATION	8.18916664827145E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998511172649208	WITHOUT_CLASSIFICATION	1.488827350791876E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999861619328415	WITHOUT_CLASSIFICATION	1.3838067158475789E-5	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998633431777468	WITHOUT_CLASSIFICATION	1.3665682225310098E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999704413687354	WITHOUT_CLASSIFICATION	2.9558631264690078E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491414144371	WITHOUT_CLASSIFICATION	5.0858585562895915E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590091233157	WITHOUT_CLASSIFICATION	4.099087668435054E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584154563059	WITHOUT_CLASSIFICATION	4.158454369404762E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584154563059	WITHOUT_CLASSIFICATION	4.158454369404762E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584154563059	WITHOUT_CLASSIFICATION	4.158454369404762E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999968228545344	WITHOUT_CLASSIFICATION	3.1771454656002725E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999968228545344	WITHOUT_CLASSIFICATION	3.1771454656002725E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997958902878454	WITHOUT_CLASSIFICATION	2.041097121546044E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999940168468363	WITHOUT_CLASSIFICATION	5.983153163593363E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999707855488411	WITHOUT_CLASSIFICATION	2.9214451158893026E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999749452803018	WITHOUT_CLASSIFICATION	2.5054719698085816E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999135415590493	WITHOUT_CLASSIFICATION	8.645844095070075E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477003241185	WITHOUT_CLASSIFICATION	5.2299675881431364E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999499965818988	WITHOUT_CLASSIFICATION	5.0003418101337584E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999958626439766	WITHOUT_CLASSIFICATION	4.13735602344562E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630851383129	WITHOUT_CLASSIFICATION	3.691486168713585E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477003241185	WITHOUT_CLASSIFICATION	5.2299675881431364E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999499965818988	WITHOUT_CLASSIFICATION	5.0003418101337584E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999941030598481	WITHOUT_CLASSIFICATION	5.8969401519003685E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999688744532048	WITHOUT_CLASSIFICATION	3.112554679528673E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999972166699271	WITHOUT_CLASSIFICATION	2.783330072839634E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9998220217303757	WITHOUT_CLASSIFICATION	1.77978269624232E-4	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999758989178011	WITHOUT_CLASSIFICATION	2.4101082198845612E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999638057714465	WITHOUT_CLASSIFICATION	3.619422855348685E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999676117674492	WITHOUT_CLASSIFICATION	3.238823255080988E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999973963819892	WITHOUT_CLASSIFICATION	2.6036180107893822E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996242659310075	WITHOUT_CLASSIFICATION	3.75734068992404E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998441416783477	WITHOUT_CLASSIFICATION	1.558583216523768E-4	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999600568044563	WITHOUT_CLASSIFICATION	3.994319554365332E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999790886809333	WITHOUT_CLASSIFICATION	2.091131906663579E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999762698126653	WITHOUT_CLASSIFICATION	2.3730187334699346E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9915501798911515	WITHOUT_CLASSIFICATION	0.008449820108848578	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999705514618391	WITHOUT_CLASSIFICATION	2.9448538160898894E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999569199638543	WITHOUT_CLASSIFICATION	4.3080036145794014E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999421361742914	WITHOUT_CLASSIFICATION	5.786382570860358E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999943031268502	WITHOUT_CLASSIFICATION	5.696873149796346E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998789473320461	WITHOUT_CLASSIFICATION	1.2105266795396188E-4	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999236591383577	WITHOUT_CLASSIFICATION	7.634086164234123E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999909827626263	WITHOUT_CLASSIFICATION	9.017237373713711E-6	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999685037918166	WITHOUT_CLASSIFICATION	3.14962081834311E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999050921705288	WITHOUT_CLASSIFICATION	9.490782947125258E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999811212664016	WITHOUT_CLASSIFICATION	1.887873359839686E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473689233521	WITHOUT_CLASSIFICATION	5.2631076647743584E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275684773277	WITHOUT_CLASSIFICATION	7.243152267232515E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999894376981152	WITHOUT_CLASSIFICATION	1.0562301884797867E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999894376981152	WITHOUT_CLASSIFICATION	1.0562301884797867E-4	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999236967201207	WITHOUT_CLASSIFICATION	7.63032798792757E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999990692077638	WITHOUT_CLASSIFICATION	9.307922362028739E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999248428372759	WITHOUT_CLASSIFICATION	7.515716272409552E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999752564797901	WITHOUT_CLASSIFICATION	2.474352020990985E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999901396739898	WITHOUT_CLASSIFICATION	9.860326010299875E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999748105270454	WITHOUT_CLASSIFICATION	2.518947295464148E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999587467806382	WITHOUT_CLASSIFICATION	4.125321936179439E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999882185100865	WITHOUT_CLASSIFICATION	1.1781489913493035E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999898589584892	WITHOUT_CLASSIFICATION	1.014104151066397E-5	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999503363210042	WITHOUT_CLASSIFICATION	4.966367899581435E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9984365340267135	WITHOUT_CLASSIFICATION	0.0015634659732864562	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9995563769072391	WITHOUT_CLASSIFICATION	4.4362309276095477E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999959740245534	WITHOUT_CLASSIFICATION	4.025975446514587E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999234892342135	WITHOUT_CLASSIFICATION	7.651076578655774E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999307317562399	WITHOUT_CLASSIFICATION	6.926824376004226E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9998841909146158	WITHOUT_CLASSIFICATION	1.1580908538429087E-4	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999773227977017	WITHOUT_CLASSIFICATION	2.2677202298292264E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9995563769072391	WITHOUT_CLASSIFICATION	4.4362309276095477E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9995563769072391	WITHOUT_CLASSIFICATION	4.4362309276095477E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9998532182591393	WITHOUT_CLASSIFICATION	1.467817408607313E-4	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999226912132659	WITHOUT_CLASSIFICATION	7.730878673406034E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9855930118588864	WITHOUT_CLASSIFICATION	0.01440698814111359	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999810109559082	WITHOUT_CLASSIFICATION	1.898904409181774E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999756280044971	WITHOUT_CLASSIFICATION	2.4371995502860766E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999421361742914	WITHOUT_CLASSIFICATION	5.786382570860358E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9989440009338658	WITHOUT_CLASSIFICATION	0.001055999066134171	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999841374004718	WITHOUT_CLASSIFICATION	1.5862599528175933E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999704291001122	WITHOUT_CLASSIFICATION	2.9570899887709583E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999504125710795	WITHOUT_CLASSIFICATION	4.9587428920390204E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999894302880195	WITHOUT_CLASSIFICATION	1.0569711980430958E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535094229514	WITHOUT_CLASSIFICATION	4.649057704857044E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999674818169374	WITHOUT_CLASSIFICATION	3.251818306266391E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999674818169374	WITHOUT_CLASSIFICATION	3.251818306266391E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999674818169374	WITHOUT_CLASSIFICATION	3.251818306266391E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999674818169374	WITHOUT_CLASSIFICATION	3.251818306266391E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999544357065889	WITHOUT_CLASSIFICATION	4.55642934110899E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999410332767316	WITHOUT_CLASSIFICATION	5.896672326843388E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997449142378789	WITHOUT_CLASSIFICATION	2.5508576212105534E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999734277730774	WITHOUT_CLASSIFICATION	2.6572226922468543E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474682271384	WITHOUT_CLASSIFICATION	5.253177286164323E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999952892985906	WITHOUT_CLASSIFICATION	4.710701409414725E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999972718758012	WITHOUT_CLASSIFICATION	2.7281241987953037E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999816337916517	WITHOUT_CLASSIFICATION	1.8366208348348367E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999379981146496	WITHOUT_CLASSIFICATION	6.20018853505117E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999490729085366	WITHOUT_CLASSIFICATION	5.092709146329072E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999934068003745	WITHOUT_CLASSIFICATION	6.5931996254884784E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999741110064266	WITHOUT_CLASSIFICATION	2.588899357336105E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999722390922567	WITHOUT_CLASSIFICATION	2.776090774330508E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999722390922567	WITHOUT_CLASSIFICATION	2.776090774330508E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999722390922567	WITHOUT_CLASSIFICATION	2.776090774330508E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999767729112502	WITHOUT_CLASSIFICATION	2.322708874989206E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999830542562803	WITHOUT_CLASSIFICATION	1.6945743719721687E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999960829417588	WITHOUT_CLASSIFICATION	3.91705824118383E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473700857809	WITHOUT_CLASSIFICATION	5.2629914218975534E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999803402799708	WITHOUT_CLASSIFICATION	1.9659720029040835E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584154563059	WITHOUT_CLASSIFICATION	4.158454369404762E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999960087329136	WITHOUT_CLASSIFICATION	3.991267086357745E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999554005266904	WITHOUT_CLASSIFICATION	4.45994733095935E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999909603194544	WITHOUT_CLASSIFICATION	9.03968054558624E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998950893426423	WITHOUT_CLASSIFICATION	1.0491065735778172E-4	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473125061282	WITHOUT_CLASSIFICATION	5.2687493871783996E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999904656846702	WITHOUT_CLASSIFICATION	9.534315329735427E-6	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999829094504555	WITHOUT_CLASSIFICATION	1.7090549544500262E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999610633454916	WITHOUT_CLASSIFICATION	3.893665450833024E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998449740727808	WITHOUT_CLASSIFICATION	1.55025927219216E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999442144924583	WITHOUT_CLASSIFICATION	5.578550754166211E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999434842099268	WITHOUT_CLASSIFICATION	5.651579007312492E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999871192219457	WITHOUT_CLASSIFICATION	1.2880778054261732E-5	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999990445095073	WITHOUT_CLASSIFICATION	9.554904927470066E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999729394639576	WITHOUT_CLASSIFICATION	2.7060536042359363E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999983435349112	WITHOUT_CLASSIFICATION	1.6564650888808047E-6	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999868771055495	WITHOUT_CLASSIFICATION	1.3122894450505885E-4	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999893712766349	WITHOUT_CLASSIFICATION	1.0628723365157813E-5	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999039555755164	WITHOUT_CLASSIFICATION	9.604442448368249E-5	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999798495719779	WITHOUT_CLASSIFICATION	2.0150428022068958E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999711691470325	WITHOUT_CLASSIFICATION	2.8830852967369052E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999018973488866	WITHOUT_CLASSIFICATION	9.81026511135004E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999834469306171	WITHOUT_CLASSIFICATION	1.6553069382864643E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999981095009207	WITHOUT_CLASSIFICATION	1.8904990792298783E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999817458928807	WITHOUT_CLASSIFICATION	1.8254107119281407E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999245974035876	WITHOUT_CLASSIFICATION	7.54025964124476E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999801647593815	WITHOUT_CLASSIFICATION	1.9835240618619477E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9994936212655411	WITHOUT_CLASSIFICATION	5.063787344589424E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999975892475758	WITHOUT_CLASSIFICATION	2.4107524242627857E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999794924562634	WITHOUT_CLASSIFICATION	2.050754373666066E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999722225630066	WITHOUT_CLASSIFICATION	2.7777436993421807E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999811994244918	WITHOUT_CLASSIFICATION	1.880057550823027E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999607502183177	WITHOUT_CLASSIFICATION	3.924978168225522E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999632123246638	WITHOUT_CLASSIFICATION	3.678767533619752E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998561646690577	WITHOUT_CLASSIFICATION	1.438353309423065E-4	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999718209471697	WITHOUT_CLASSIFICATION	2.8179052830243627E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999899723328233	WITHOUT_CLASSIFICATION	1.0027667176743648E-5	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999329976606303	WITHOUT_CLASSIFICATION	6.700233936967328E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999960916533974	WITHOUT_CLASSIFICATION	3.9083466026215585E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999613381563282	WITHOUT_CLASSIFICATION	3.866184367192518E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999621339210589	WITHOUT_CLASSIFICATION	3.786607894102505E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999380211886703	WITHOUT_CLASSIFICATION	6.197881132971863E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999958909853599	WITHOUT_CLASSIFICATION	4.109014640077608E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996441606800889	WITHOUT_CLASSIFICATION	3.5583931991101813E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999946428363374	WITHOUT_CLASSIFICATION	5.357163662597356E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999781457329645	WITHOUT_CLASSIFICATION	2.1854267035490625E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999926737845862	WITHOUT_CLASSIFICATION	7.326215413856193E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.999981622140544	WITHOUT_CLASSIFICATION	1.8377859456038795E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998928271703748	WITHOUT_CLASSIFICATION	1.0717282962527847E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.999993799649711	WITHOUT_CLASSIFICATION	6.200350288952224E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999972518681172	WITHOUT_CLASSIFICATION	2.7481318827952056E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9990816482590544	WITHOUT_CLASSIFICATION	9.183517409456658E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999915371961816	WITHOUT_CLASSIFICATION	8.462803818358418E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999914170402227	WITHOUT_CLASSIFICATION	8.58295977727152E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997902580639211	WITHOUT_CLASSIFICATION	2.0974193607889593E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999984665406468	WITHOUT_CLASSIFICATION	1.5334593531989517E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999975357224019	WITHOUT_CLASSIFICATION	2.4642775981100386E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998721674714206	WITHOUT_CLASSIFICATION	1.278325285792707E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995399187772	WITHOUT_CLASSIFICATION	4.600812228718286E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999477123391047	WITHOUT_CLASSIFICATION	5.228766089536758E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996472410525361	WITHOUT_CLASSIFICATION	3.527589474639212E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999975211327538	WITHOUT_CLASSIFICATION	2.478867246201327E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999466310463874	WITHOUT_CLASSIFICATION	5.336895361273001E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999973918210392	WITHOUT_CLASSIFICATION	2.6081789608249345E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999456252932863	WITHOUT_CLASSIFICATION	5.437470671366788E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999918785864715	WITHOUT_CLASSIFICATION	8.121413528422336E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999858560978494	WITHOUT_CLASSIFICATION	1.41439021505032E-5	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.999976136027011	WITHOUT_CLASSIFICATION	2.3863972989063815E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999001469277295	WITHOUT_CLASSIFICATION	9.985307227051022E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999987666025715	WITHOUT_CLASSIFICATION	1.2333974285433552E-6	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999787149493379	WITHOUT_CLASSIFICATION	2.128505066212995E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999826995044049	WITHOUT_CLASSIFICATION	1.7300495595042144E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999987665410326	WITHOUT_CLASSIFICATION	1.2334589673530603E-6	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999731606754041	WITHOUT_CLASSIFICATION	2.6839324595921578E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997531183019044	WITHOUT_CLASSIFICATION	2.468816980956356E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999478441461664	WITHOUT_CLASSIFICATION	5.215585383361638E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996125782344404	WITHOUT_CLASSIFICATION	3.8742176555961564E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9986720144600504	WITHOUT_CLASSIFICATION	0.0013279855399496402	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999555987475481	WITHOUT_CLASSIFICATION	4.440125245188307E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999556380070397	WITHOUT_CLASSIFICATION	4.4361992960310456E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999843279595727	WITHOUT_CLASSIFICATION	1.5672040427293425E-5	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999660648577023	WITHOUT_CLASSIFICATION	3.393514229772881E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999844887672273	WITHOUT_CLASSIFICATION	1.551123277269503E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999775157030102	WITHOUT_CLASSIFICATION	2.2484296989797613E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999785044500101	WITHOUT_CLASSIFICATION	2.149554998998256E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999820394570255	WITHOUT_CLASSIFICATION	1.7960542974548143E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999832898194335	WITHOUT_CLASSIFICATION	1.6710180566508198E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998693305377012	WITHOUT_CLASSIFICATION	1.306694622987895E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999654771649766	WITHOUT_CLASSIFICATION	3.452283502337156E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999711372410358	WITHOUT_CLASSIFICATION	2.8862758964266033E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999713784974608	WITHOUT_CLASSIFICATION	2.8621502539273723E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999883424104078	WITHOUT_CLASSIFICATION	1.1657589592207208E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999775950225959	WITHOUT_CLASSIFICATION	2.2404977404175903E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999866959855331	WITHOUT_CLASSIFICATION	1.3304014466715887E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999866959855331	WITHOUT_CLASSIFICATION	1.3304014466715887E-5	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998666592507535	WITHOUT_CLASSIFICATION	1.3334074924651967E-4	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999569950024779	WITHOUT_CLASSIFICATION	4.3004997522086224E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999663828766888	WITHOUT_CLASSIFICATION	3.36171233111054E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9996041494492723	WITHOUT_CLASSIFICATION	3.9585055072765234E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999829963688324	WITHOUT_CLASSIFICATION	1.7003631167591715E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9993583072971389	WITHOUT_CLASSIFICATION	6.41692702861191E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.998752749985145	WITHOUT_CLASSIFICATION	0.0012472500148550886	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9996653280633151	WITHOUT_CLASSIFICATION	3.346719366849067E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999564914459553	WITHOUT_CLASSIFICATION	4.3508554044638765E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9985295823173214	WITHOUT_CLASSIFICATION	0.0014704176826787155	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999843409346855	WITHOUT_CLASSIFICATION	1.5659065314539903E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998975530842608	WITHOUT_CLASSIFICATION	1.0244691573913875E-4	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997927771106062	WITHOUT_CLASSIFICATION	2.0722288939370418E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99998616261977	WITHOUT_CLASSIFICATION	1.3837380229951733E-5	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999939532033479	WITHOUT_CLASSIFICATION	6.046796652174227E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999041581338639	WITHOUT_CLASSIFICATION	9.584186613609277E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999715123948043	WITHOUT_CLASSIFICATION	2.8487605195717224E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999715123948043	WITHOUT_CLASSIFICATION	2.8487605195717224E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999766178778117	WITHOUT_CLASSIFICATION	2.3382122188314304E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998786009067723	WITHOUT_CLASSIFICATION	1.2139909322766411E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999899262331169	WITHOUT_CLASSIFICATION	1.0073766883154778E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999424326265799	WITHOUT_CLASSIFICATION	5.756737342006305E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999644295575173	WITHOUT_CLASSIFICATION	3.557044248266045E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999759583622155	WITHOUT_CLASSIFICATION	2.4041637784531597E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999644295575173	WITHOUT_CLASSIFICATION	3.557044248266045E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999761858804281	WITHOUT_CLASSIFICATION	2.3814119571849813E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999610506441483	WITHOUT_CLASSIFICATION	3.894935585168887E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999841946558137	WITHOUT_CLASSIFICATION	1.5805344186401465E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999841946558137	WITHOUT_CLASSIFICATION	1.5805344186401465E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999391591559075	WITHOUT_CLASSIFICATION	6.084084409252724E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999191713103959	WITHOUT_CLASSIFICATION	8.082868960410184E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998975101650392	WITHOUT_CLASSIFICATION	1.0248983496081293E-4	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999473746536797	WITHOUT_CLASSIFICATION	5.262534632039834E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999994893215504	WITHOUT_CLASSIFICATION	5.106784496054017E-7	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9998816659146115	WITHOUT_CLASSIFICATION	1.1833408538853418E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999920323294003	WITHOUT_CLASSIFICATION	7.967670599715047E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999903181648825	WITHOUT_CLASSIFICATION	9.681835117433307E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999914979233119	WITHOUT_CLASSIFICATION	8.502076688116841E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998585742450782	WITHOUT_CLASSIFICATION	1.4142575492182398E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999035734417	WITHOUT_CLASSIFICATION	9.64265583007881E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9998741518433728	WITHOUT_CLASSIFICATION	1.2584815662715804E-4	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9928580200036952	WITHOUT_CLASSIFICATION	0.007141979996304883	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999768081361053	WITHOUT_CLASSIFICATION	2.319186389470341E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999969083381379	WITHOUT_CLASSIFICATION	3.09166186210456E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999929471414215	WITHOUT_CLASSIFICATION	7.05285857848494E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.999976417833439	WITHOUT_CLASSIFICATION	2.3582166561022914E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998448857690576	WITHOUT_CLASSIFICATION	1.5511423094229177E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999589069974039	WITHOUT_CLASSIFICATION	4.1093002596019965E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999481962792302	WITHOUT_CLASSIFICATION	5.18037207698652E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999639293176972	WITHOUT_CLASSIFICATION	3.6070682302799504E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999855855286325	WITHOUT_CLASSIFICATION	1.4414471367443478E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999686433371684	WITHOUT_CLASSIFICATION	3.1356662831606146E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999536384723666	WITHOUT_CLASSIFICATION	4.636152763338069E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999350037923771	WITHOUT_CLASSIFICATION	6.499620762289403E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9995415948496073	WITHOUT_CLASSIFICATION	4.5840515039274394E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999758892480749	WITHOUT_CLASSIFICATION	2.411075192516647E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999885420491066	WITHOUT_CLASSIFICATION	1.145795089346591E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999998149297598	WITHOUT_CLASSIFICATION	1.8507024020431412E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999966569798659	WITHOUT_CLASSIFICATION	3.3430201340924154E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999708734438696	WITHOUT_CLASSIFICATION	2.912655613036256E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999387276642817	WITHOUT_CLASSIFICATION	6.127233571829865E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9998861768348261	WITHOUT_CLASSIFICATION	1.1382316517396755E-4	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999541809563218	WITHOUT_CLASSIFICATION	4.5819043678184E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999626763823218	WITHOUT_CLASSIFICATION	3.732361767820244E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999790652997217	WITHOUT_CLASSIFICATION	2.0934700278300174E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999790652997217	WITHOUT_CLASSIFICATION	2.0934700278300174E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999675677441464	WITHOUT_CLASSIFICATION	3.243225585358777E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999682339674044	WITHOUT_CLASSIFICATION	3.176603259559122E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999930645260144	WITHOUT_CLASSIFICATION	6.935473985616433E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999778409625639	WITHOUT_CLASSIFICATION	2.2159037436159433E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999668320273122	WITHOUT_CLASSIFICATION	3.3167972687804755E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999879864564702	WITHOUT_CLASSIFICATION	1.2013543529791623E-5	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999265385195	WITHOUT_CLASSIFICATION	7.346148038048055E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999497427933625	WITHOUT_CLASSIFICATION	5.025720663744845E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999675677441464	WITHOUT_CLASSIFICATION	3.243225585358777E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999682339674044	WITHOUT_CLASSIFICATION	3.176603259559122E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998924805066413	WITHOUT_CLASSIFICATION	1.0751949335868962E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999263171954927	WITHOUT_CLASSIFICATION	7.368280450723534E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999923439810227	WITHOUT_CLASSIFICATION	7.656018977302434E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999419588392305	WITHOUT_CLASSIFICATION	5.804116076937784E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999779187376235	WITHOUT_CLASSIFICATION	2.2081262376476005E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9996924278324433	WITHOUT_CLASSIFICATION	3.075721675566259E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999619063238245	WITHOUT_CLASSIFICATION	3.8093676175367945E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999732293424184	WITHOUT_CLASSIFICATION	2.6770657581653476E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999990892809796	WITHOUT_CLASSIFICATION	9.107190203949997E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998838931447031	WITHOUT_CLASSIFICATION	0.0011610685529689628	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999897814221672	WITHOUT_CLASSIFICATION	1.0218577832769634E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998838931447031	WITHOUT_CLASSIFICATION	0.0011610685529689628	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9996808881182121	WITHOUT_CLASSIFICATION	3.1911188178792004E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999477123391047	WITHOUT_CLASSIFICATION	5.228766089536758E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9996808881182121	WITHOUT_CLASSIFICATION	3.1911188178792004E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641836486716	WITHOUT_CLASSIFICATION	1.3581635132841957E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999435558371416	WITHOUT_CLASSIFICATION	5.644416285837463E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999732293424184	WITHOUT_CLASSIFICATION	2.6770657581653476E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999732293424184	WITHOUT_CLASSIFICATION	2.6770657581653476E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999759689769899	WITHOUT_CLASSIFICATION	2.4031023009988975E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999759874224174	WITHOUT_CLASSIFICATION	2.401257758247971E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999759689769899	WITHOUT_CLASSIFICATION	2.4031023009988975E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999707457543721	WITHOUT_CLASSIFICATION	2.925424562786453E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999845491744686	WITHOUT_CLASSIFICATION	1.54508255314101E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999674827156335	WITHOUT_CLASSIFICATION	3.2517284366370295E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9997950559597969	WITHOUT_CLASSIFICATION	2.0494404020304324E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999718610942581	WITHOUT_CLASSIFICATION	2.8138905742044E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999207712483537	WITHOUT_CLASSIFICATION	7.922875164630923E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.999967568974051	WITHOUT_CLASSIFICATION	3.243102594902413E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999678619284367	WITHOUT_CLASSIFICATION	3.213807156339698E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999705149581765	WITHOUT_CLASSIFICATION	2.9485041823521558E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999953385568623	WITHOUT_CLASSIFICATION	4.661443137750269E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999697905971541	WITHOUT_CLASSIFICATION	3.0209402845999955E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999680934607724	WITHOUT_CLASSIFICATION	3.190653922763893E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999590890999974	WITHOUT_CLASSIFICATION	4.0910900002571966E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999975473533869	WITHOUT_CLASSIFICATION	2.452646613107741E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999665998804285	WITHOUT_CLASSIFICATION	3.34001195715768E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999901557644301	WITHOUT_CLASSIFICATION	9.844235569971298E-6	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999941913392826	WITHOUT_CLASSIFICATION	5.808660717397332E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999970544098957	WITHOUT_CLASSIFICATION	2.945590104304778E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999897844504139	WITHOUT_CLASSIFICATION	1.0215549586088439E-5	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999977058875551	WITHOUT_CLASSIFICATION	2.2941124448939207E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999705696399015	WITHOUT_CLASSIFICATION	2.943036009847613E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999197245766427	WITHOUT_CLASSIFICATION	8.027542335728792E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998635452175964	WITHOUT_CLASSIFICATION	1.364547824036985E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998689673235059	WITHOUT_CLASSIFICATION	1.3103267649411257E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998334226235671	WITHOUT_CLASSIFICATION	1.6657737643283757E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9885322731883484	WITHOUT_CLASSIFICATION	0.01146772681165155	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999823726234229	WITHOUT_CLASSIFICATION	1.762737657704974E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999718610942581	WITHOUT_CLASSIFICATION	2.8138905742044E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999794984426095	WITHOUT_CLASSIFICATION	2.0501557390514873E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9998532889069802	WITHOUT_CLASSIFICATION	1.4671109301979353E-4	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9486249963084059	WITHOUT_CLASSIFICATION	0.051375003691594034	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9998837932453971	WITHOUT_CLASSIFICATION	1.1620675460292601E-4	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999992341982911	WITHOUT_CLASSIFICATION	7.658017088907507E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999840464465852	WITHOUT_CLASSIFICATION	1.5953553414773305E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999707457543721	WITHOUT_CLASSIFICATION	2.925424562786453E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999707457543721	WITHOUT_CLASSIFICATION	2.925424562786453E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999925158943374	WITHOUT_CLASSIFICATION	7.484105662644023E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999813153595748	WITHOUT_CLASSIFICATION	1.8684640425208212E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999810479760706	WITHOUT_CLASSIFICATION	1.895202392942066E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999886086080978	WITHOUT_CLASSIFICATION	1.139139190227166E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997897534996175	WITHOUT_CLASSIFICATION	2.1024650038232662E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999883877490442	WITHOUT_CLASSIFICATION	1.1612250955773008E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999894523923719	WITHOUT_CLASSIFICATION	1.0547607628188514E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999804790401641	WITHOUT_CLASSIFICATION	1.9520959835933088E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999046574127524	WITHOUT_CLASSIFICATION	9.534258724759144E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999863060108767	WITHOUT_CLASSIFICATION	1.3693989123317326E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999906766172661	WITHOUT_CLASSIFICATION	9.323382733923263E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999590890999974	WITHOUT_CLASSIFICATION	4.0910900002571966E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999675677441464	WITHOUT_CLASSIFICATION	3.243225585358777E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999906766172661	WITHOUT_CLASSIFICATION	9.323382733923263E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999867954398758	WITHOUT_CLASSIFICATION	1.3204560124196099E-5	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999970824939225	WITHOUT_CLASSIFICATION	2.917506077454431E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999876484004067	WITHOUT_CLASSIFICATION	1.2351599593262104E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9974422154219481	WITHOUT_CLASSIFICATION	0.0025577845780519236	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999174190251621	WITHOUT_CLASSIFICATION	8.258097483795893E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999972284407151	WITHOUT_CLASSIFICATION	2.771559284894563E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999931228897545	WITHOUT_CLASSIFICATION	6.877110245545111E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999768890376897	WITHOUT_CLASSIFICATION	2.3110962310349347E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999675671304337	WITHOUT_CLASSIFICATION	3.243286956639568E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999779735982353	WITHOUT_CLASSIFICATION	2.202640176471806E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999315389877625	WITHOUT_CLASSIFICATION	6.846101223743752E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999315389877625	WITHOUT_CLASSIFICATION	6.846101223743752E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998967947081572	WITHOUT_CLASSIFICATION	1.0320529184283614E-4	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9996477679300243	WITHOUT_CLASSIFICATION	3.522320699757503E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999906766172661	WITHOUT_CLASSIFICATION	9.323382733923263E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999174190251621	WITHOUT_CLASSIFICATION	8.258097483795893E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999931228897545	WITHOUT_CLASSIFICATION	6.877110245545111E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999980461780353	WITHOUT_CLASSIFICATION	1.953821964686401E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999991256845815	WITHOUT_CLASSIFICATION	8.743154185472369E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999720652080153	WITHOUT_CLASSIFICATION	2.793479198475687E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999638784225466	WITHOUT_CLASSIFICATION	3.612157745333175E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999790742317535	WITHOUT_CLASSIFICATION	2.092576824651281E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999675675408864	WITHOUT_CLASSIFICATION	3.2432459113492236E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999867954398758	WITHOUT_CLASSIFICATION	1.3204560124196099E-5	TEST
JOINS	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999947452915443	WITHOUT_CLASSIFICATION	5.254708455699798E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999708836170539	WITHOUT_CLASSIFICATION	2.9116382946122885E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998362363131255	WITHOUT_CLASSIFICATION	1.637636868745096E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999277520043768	WITHOUT_CLASSIFICATION	7.224799562322892E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999270516210659	WITHOUT_CLASSIFICATION	7.294837893404119E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999862123475953	WITHOUT_CLASSIFICATION	1.3787652404705697E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641836486716	WITHOUT_CLASSIFICATION	1.3581635132841957E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977425535043	WITHOUT_CLASSIFICATION	2.2574464956955944E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9997584178719541	WITHOUT_CLASSIFICATION	2.4158212804593283E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999959209510469	WITHOUT_CLASSIFICATION	4.0790489531006356E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999930086035517	WITHOUT_CLASSIFICATION	6.991396448274806E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999907780522312	WITHOUT_CLASSIFICATION	9.221947768747697E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999983547133878	WITHOUT_CLASSIFICATION	1.6452866121950698E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999709090316679	WITHOUT_CLASSIFICATION	2.9090968332068407E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999413964960381	WITHOUT_CLASSIFICATION	5.8603503961848796E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999675675408864	WITHOUT_CLASSIFICATION	3.2432459113492236E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.99996614472016	WITHOUT_CLASSIFICATION	3.3855279840039874E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999106729541501	WITHOUT_CLASSIFICATION	8.932704584989112E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999912896380679	WITHOUT_CLASSIFICATION	8.71036193201463E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998936996427241	WITHOUT_CLASSIFICATION	1.0630035727593295E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999720370591941	WITHOUT_CLASSIFICATION	2.796294080588228E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998602466237013	WITHOUT_CLASSIFICATION	1.3975337629866958E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998932840637166	WITHOUT_CLASSIFICATION	1.0671593628340946E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999748903823643	WITHOUT_CLASSIFICATION	2.510961763571154E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999729720548484	WITHOUT_CLASSIFICATION	2.7027945151551818E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999925263846927	WITHOUT_CLASSIFICATION	7.4736153072849305E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999825282835395	WITHOUT_CLASSIFICATION	1.747171646045311E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999973871876567	WITHOUT_CLASSIFICATION	2.6128123433644696E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999646224743718	WITHOUT_CLASSIFICATION	3.5377525628258506E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999975947324895	WITHOUT_CLASSIFICATION	2.4052675104937756E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999870884711002	WITHOUT_CLASSIFICATION	1.2911528899745115E-5	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999341807351946	WITHOUT_CLASSIFICATION	6.581926480537645E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999584454495847	WITHOUT_CLASSIFICATION	4.155455041527106E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999234301293825	WITHOUT_CLASSIFICATION	7.65698706174708E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999575959578246	WITHOUT_CLASSIFICATION	4.240404217530106E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999822320624727	WITHOUT_CLASSIFICATION	1.776793752728779E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999121281824898	WITHOUT_CLASSIFICATION	8.787181751020219E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9954785295410608	WITHOUT_CLASSIFICATION	0.00452147045893926	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999785624814403	WITHOUT_CLASSIFICATION	2.1437518559698946E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999334510305832	WITHOUT_CLASSIFICATION	6.654896941687269E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999510068087769	WITHOUT_CLASSIFICATION	4.899319122300127E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9941937434547908	WITHOUT_CLASSIFICATION	0.005806256545209074	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999586427231083	WITHOUT_CLASSIFICATION	4.1357276891636515E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999834942316118	WITHOUT_CLASSIFICATION	1.650576838825111E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999701479449563	WITHOUT_CLASSIFICATION	2.9852055043690937E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9995105831227912	WITHOUT_CLASSIFICATION	4.894168772087619E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999700444371543	WITHOUT_CLASSIFICATION	2.9955562845597238E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999448782235321	WITHOUT_CLASSIFICATION	5.512177646803713E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999538606756239	WITHOUT_CLASSIFICATION	4.61393243760316E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997808696089149	WITHOUT_CLASSIFICATION	2.1913039108514853E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999448782235321	WITHOUT_CLASSIFICATION	5.512177646803713E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999700444371543	WITHOUT_CLASSIFICATION	2.9955562845597238E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999538606756239	WITHOUT_CLASSIFICATION	4.61393243760316E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999638962700163	WITHOUT_CLASSIFICATION	3.610372998368883E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999613969586967	WITHOUT_CLASSIFICATION	3.8603041303371316E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9987482086196995	WITHOUT_CLASSIFICATION	0.0012517913803005982	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999865925207554	WITHOUT_CLASSIFICATION	1.3407479244579733E-5	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999994115981297	WITHOUT_CLASSIFICATION	5.884018703771798E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9874518902459396	WITHOUT_CLASSIFICATION	0.012548109754060333	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999174100022837	WITHOUT_CLASSIFICATION	8.258999771628873E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999000610528274	WITHOUT_CLASSIFICATION	9.993894717263921E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999934559467617	WITHOUT_CLASSIFICATION	6.544053238192348E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999769702364578	WITHOUT_CLASSIFICATION	2.3029763542219552E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999722248065427	WITHOUT_CLASSIFICATION	2.7775193457328286E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999860810661154	WITHOUT_CLASSIFICATION	1.391893388469108E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999645605358926	WITHOUT_CLASSIFICATION	3.543946410733659E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999865925207554	WITHOUT_CLASSIFICATION	1.3407479244579733E-5	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999936709401983	WITHOUT_CLASSIFICATION	6.329059801739612E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999872127534905	WITHOUT_CLASSIFICATION	1.2787246509479855E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998969395053432	WITHOUT_CLASSIFICATION	1.0306049465677647E-4	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999985171987029	WITHOUT_CLASSIFICATION	1.4828012970914808E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999410513084336	WITHOUT_CLASSIFICATION	5.8948691566513676E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998560831335503	WITHOUT_CLASSIFICATION	1.4391686644973784E-4	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998563918504727	WITHOUT_CLASSIFICATION	1.4360814952732443E-4	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999938235354103	WITHOUT_CLASSIFICATION	6.176464589631521E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998263596845667	WITHOUT_CLASSIFICATION	1.7364031543325666E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999962092917815	WITHOUT_CLASSIFICATION	3.7907082185044165E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998560831335503	WITHOUT_CLASSIFICATION	1.4391686644973784E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998560831335503	WITHOUT_CLASSIFICATION	1.4391686644973784E-4	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999865489062985	WITHOUT_CLASSIFICATION	1.3451093701432629E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999865489062985	WITHOUT_CLASSIFICATION	1.3451093701432629E-5	TEST
not supported	WITHOUT_CLASSIFICATION	0.999908379978512	WITHOUT_CLASSIFICATION	9.162002148800234E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998969395053432	WITHOUT_CLASSIFICATION	1.0306049465677647E-4	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997609159977535	WITHOUT_CLASSIFICATION	2.3908400224646831E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999983078859032	WITHOUT_CLASSIFICATION	1.6921140968024268E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999889213586975	WITHOUT_CLASSIFICATION	1.1078641302553689E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999889213586975	WITHOUT_CLASSIFICATION	1.1078641302553689E-5	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999896684182824	WITHOUT_CLASSIFICATION	1.0331581717669452E-5	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999912466269232	WITHOUT_CLASSIFICATION	8.753373076791502E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999996364200251	WITHOUT_CLASSIFICATION	3.635799749005428E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999835014540002	WITHOUT_CLASSIFICATION	1.649854599980814E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999853820683704	WITHOUT_CLASSIFICATION	1.4617931629557081E-5	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999997501727632	WITHOUT_CLASSIFICATION	2.4982723687587197E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999884737077284	WITHOUT_CLASSIFICATION	1.152629227167281E-5	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999605620562784	WITHOUT_CLASSIFICATION	3.943794372169618E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999844297302101	WITHOUT_CLASSIFICATION	1.5570269789977114E-5	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999850760477467	WITHOUT_CLASSIFICATION	1.4923952253401702E-5	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999833546635553	WITHOUT_CLASSIFICATION	1.6645336444776275E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999550651948929	WITHOUT_CLASSIFICATION	4.493480510722648E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999661140247754	WITHOUT_CLASSIFICATION	3.3885975224553834E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999695537071591	WITHOUT_CLASSIFICATION	3.0446292840836713E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999905463466821	WITHOUT_CLASSIFICATION	9.4536533178933E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999622285741521	WITHOUT_CLASSIFICATION	3.7771425847890426E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511286190864	WITHOUT_CLASSIFICATION	4.8871380913662334E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999868647045272	WITHOUT_CLASSIFICATION	1.3135295472649815E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999764921126708	WITHOUT_CLASSIFICATION	2.350788732918499E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.99999355058877	WITHOUT_CLASSIFICATION	6.449411229973927E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999774160680981	WITHOUT_CLASSIFICATION	2.2583931901925606E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9997389507626704	WITHOUT_CLASSIFICATION	2.6104923732962726E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999922742379328	WITHOUT_CLASSIFICATION	7.725762067150196E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999780067192626	WITHOUT_CLASSIFICATION	2.199328073730629E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999752564797901	WITHOUT_CLASSIFICATION	2.474352020990985E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999780995229964	WITHOUT_CLASSIFICATION	2.19004770035131E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999729720548484	WITHOUT_CLASSIFICATION	2.7027945151551818E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999821832213289	WITHOUT_CLASSIFICATION	1.7816778671086022E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999951061862111	WITHOUT_CLASSIFICATION	4.89381378888874E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466130754123	WITHOUT_CLASSIFICATION	5.3386924587622244E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.999979446972581	WITHOUT_CLASSIFICATION	2.05530274190113E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.999979446972581	WITHOUT_CLASSIFICATION	2.05530274190113E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999899806717853	WITHOUT_CLASSIFICATION	1.0019328214707409E-4	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999716754059175	WITHOUT_CLASSIFICATION	2.8324594082481453E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999709312603401	WITHOUT_CLASSIFICATION	2.9068739659907735E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999709312603401	WITHOUT_CLASSIFICATION	2.9068739659907735E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998693901361545	WITHOUT_CLASSIFICATION	1.3060986384558226E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998444402526716	WITHOUT_CLASSIFICATION	1.5555974732837206E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999648483558663	WITHOUT_CLASSIFICATION	3.5151644133695875E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999756280044971	WITHOUT_CLASSIFICATION	2.4371995502860766E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999729589743916	WITHOUT_CLASSIFICATION	2.704102560827874E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999409873523912	WITHOUT_CLASSIFICATION	5.901264760880914E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999733732156519	WITHOUT_CLASSIFICATION	2.662678434802636E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999512822599433	WITHOUT_CLASSIFICATION	4.8717740056534806E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999512822599433	WITHOUT_CLASSIFICATION	4.8717740056534806E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999774613014324	WITHOUT_CLASSIFICATION	2.2538698567571803E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999454787854695	WITHOUT_CLASSIFICATION	5.4521214530391534E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999454787854695	WITHOUT_CLASSIFICATION	5.4521214530391534E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999559392867579	WITHOUT_CLASSIFICATION	4.406071324221831E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.999973373354951	WITHOUT_CLASSIFICATION	2.6626645049042984E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999821623595789	WITHOUT_CLASSIFICATION	1.7837640421066515E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999795526949163	WITHOUT_CLASSIFICATION	2.044730508365285E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999709795568814	WITHOUT_CLASSIFICATION	2.9020443118491004E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999222136163587	WITHOUT_CLASSIFICATION	7.778638364125152E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997912604861102	WITHOUT_CLASSIFICATION	2.0873951388979717E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999877802005827	WITHOUT_CLASSIFICATION	1.221979941736434E-5	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999158646433443	WITHOUT_CLASSIFICATION	8.413535665575408E-5	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941310247258	WITHOUT_CLASSIFICATION	5.868975274276824E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999362909247096	WITHOUT_CLASSIFICATION	6.370907529040817E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999675976283872	WITHOUT_CLASSIFICATION	3.2402371612771675E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999675976283872	WITHOUT_CLASSIFICATION	3.2402371612771675E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999675976283872	WITHOUT_CLASSIFICATION	3.2402371612771675E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999675976283872	WITHOUT_CLASSIFICATION	3.2402371612771675E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999954401950228	WITHOUT_CLASSIFICATION	4.5598049771958466E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998615011350922	WITHOUT_CLASSIFICATION	1.384988649078465E-4	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999587467806382	WITHOUT_CLASSIFICATION	4.125321936179439E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999566244477979	WITHOUT_CLASSIFICATION	4.337555220215966E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999375069156502	WITHOUT_CLASSIFICATION	6.249308434983056E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9992503488517231	WITHOUT_CLASSIFICATION	7.496511482768689E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999179966886618	WITHOUT_CLASSIFICATION	8.200331133831377E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999982099141956	WITHOUT_CLASSIFICATION	1.7900858043893046E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999787418780273	WITHOUT_CLASSIFICATION	2.125812197278877E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.99997373681707	WITHOUT_CLASSIFICATION	2.626318292993712E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998900616529185	WITHOUT_CLASSIFICATION	1.0993834708159602E-4	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9947907697793169	WITHOUT_CLASSIFICATION	0.005209230220683088	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9987210517026868	WITHOUT_CLASSIFICATION	0.0012789482973131537	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999064564568612	WITHOUT_CLASSIFICATION	9.354354313878657E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998900616529185	WITHOUT_CLASSIFICATION	1.0993834708159602E-4	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9879314891826121	WITHOUT_CLASSIFICATION	0.012068510817387995	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999938537602783	WITHOUT_CLASSIFICATION	6.1462397217697904E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998976961253647	WITHOUT_CLASSIFICATION	1.0230387463523101E-4	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9993819346813456	WITHOUT_CLASSIFICATION	6.180653186543927E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9987696489432478	WITHOUT_CLASSIFICATION	0.0012303510567521654	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998828458044098	WITHOUT_CLASSIFICATION	1.1715419559024154E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999961583808498	WITHOUT_CLASSIFICATION	3.841619150305162E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999881857876908	WITHOUT_CLASSIFICATION	1.1814212309288574E-5	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798983805279	WITHOUT_CLASSIFICATION	2.0101619472012873E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999786809405732	WITHOUT_CLASSIFICATION	2.1319059426900474E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798983805279	WITHOUT_CLASSIFICATION	2.0101619472012873E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999825210593357	WITHOUT_CLASSIFICATION	1.7478940664302295E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997745847066787	WITHOUT_CLASSIFICATION	2.254152933213279E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995503377325218	WITHOUT_CLASSIFICATION	4.4966226747828115E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999911730149293	WITHOUT_CLASSIFICATION	8.826985070655395E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999920167592928	WITHOUT_CLASSIFICATION	7.983240707159169E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999231125676539	WITHOUT_CLASSIFICATION	7.688743234610951E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999758662430492	WITHOUT_CLASSIFICATION	2.4133756950856454E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997012963701534	WITHOUT_CLASSIFICATION	2.987036298465482E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999758662430492	WITHOUT_CLASSIFICATION	2.4133756950856454E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999728204894122	WITHOUT_CLASSIFICATION	2.717951058778009E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999455582342953	WITHOUT_CLASSIFICATION	5.444176570460805E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999956086488986	WITHOUT_CLASSIFICATION	4.391351101404049E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999572830705169	WITHOUT_CLASSIFICATION	4.2716929483109745E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999702895807047	WITHOUT_CLASSIFICATION	2.9710419295366953E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997752417466071	WITHOUT_CLASSIFICATION	2.247582533928829E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999231125676539	WITHOUT_CLASSIFICATION	7.688743234610951E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997012963701534	WITHOUT_CLASSIFICATION	2.987036298465482E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999728204894122	WITHOUT_CLASSIFICATION	2.717951058778009E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999929825141633	WITHOUT_CLASSIFICATION	7.017485836694089E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999865211531224	WITHOUT_CLASSIFICATION	1.3478846877584599E-5	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999877504557746	WITHOUT_CLASSIFICATION	1.2249544225347045E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999989991179359	WITHOUT_CLASSIFICATION	1.0008820641242131E-6	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999886949344643	WITHOUT_CLASSIFICATION	1.1305065535684827E-5	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999749832099271	WITHOUT_CLASSIFICATION	2.50167900730248E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999985433429964	WITHOUT_CLASSIFICATION	1.4566570035894251E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511286190864	WITHOUT_CLASSIFICATION	4.8871380913662334E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999455582342953	WITHOUT_CLASSIFICATION	5.444176570460805E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999915317788269	WITHOUT_CLASSIFICATION	8.468221173087248E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999759689769899	WITHOUT_CLASSIFICATION	2.4031023009988975E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999128486543564	WITHOUT_CLASSIFICATION	8.715134564356362E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999679548456981	WITHOUT_CLASSIFICATION	3.204515430186726E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511286190864	WITHOUT_CLASSIFICATION	4.8871380913662334E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999825724325632	WITHOUT_CLASSIFICATION	1.7427567436852007E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511286190864	WITHOUT_CLASSIFICATION	4.8871380913662334E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999538024338156	WITHOUT_CLASSIFICATION	4.619756618430501E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999769562986107	WITHOUT_CLASSIFICATION	2.304370138925696E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999623299802524	WITHOUT_CLASSIFICATION	3.767001974771287E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999353907498622	WITHOUT_CLASSIFICATION	6.460925013790501E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999917233001026	WITHOUT_CLASSIFICATION	8.27669989753091E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.999978722169442	WITHOUT_CLASSIFICATION	2.127783055808336E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999764588936916	WITHOUT_CLASSIFICATION	2.3541106308480414E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999802568794299	WITHOUT_CLASSIFICATION	1.9743120570083804E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999658666014167	WITHOUT_CLASSIFICATION	3.413339858331605E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999493590896368	WITHOUT_CLASSIFICATION	5.064091036323992E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999918901954913	WITHOUT_CLASSIFICATION	8.109804508604432E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999421464763912	WITHOUT_CLASSIFICATION	5.785352360873919E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9995731018633062	WITHOUT_CLASSIFICATION	4.268981366938536E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999640345309002	WITHOUT_CLASSIFICATION	3.5965469099671466E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999987491233601	WITHOUT_CLASSIFICATION	1.2508766399943265E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999987969434391	WITHOUT_CLASSIFICATION	1.2030565609053935E-5	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998606778183731	WITHOUT_CLASSIFICATION	1.393221816269497E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999939121372778	WITHOUT_CLASSIFICATION	6.087862722173035E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999819050564042	WITHOUT_CLASSIFICATION	1.8094943595819183E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998759818507452	WITHOUT_CLASSIFICATION	1.2401814925478948E-4	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998759818507452	WITHOUT_CLASSIFICATION	1.2401814925478948E-4	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999835215763719	WITHOUT_CLASSIFICATION	1.6478423628033623E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999972722012395	WITHOUT_CLASSIFICATION	2.7277987605144285E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999675741891683	WITHOUT_CLASSIFICATION	3.242581083162809E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999749658789617	WITHOUT_CLASSIFICATION	2.5034121038311438E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999989875866115	WITHOUT_CLASSIFICATION	1.0124133884580838E-6	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999869898948246	WITHOUT_CLASSIFICATION	1.3010105175491925E-5	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999686365118924	WITHOUT_CLASSIFICATION	3.136348810754994E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998988180032192	WITHOUT_CLASSIFICATION	1.0118199678075737E-4	TEST
TODO	WITHOUT_CLASSIFICATION	0.9884568518932588	WITHOUT_CLASSIFICATION	0.011543148106741287	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999900382999245	WITHOUT_CLASSIFICATION	9.961700075595996E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999503537239539	WITHOUT_CLASSIFICATION	4.964627604613435E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9998954603632241	WITHOUT_CLASSIFICATION	1.0453963677588919E-4	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996447791625254	WITHOUT_CLASSIFICATION	3.552208374746573E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999967298936705	WITHOUT_CLASSIFICATION	3.270106329499213E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999941717976066	WITHOUT_CLASSIFICATION	5.8282023932916615E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999670362250684	WITHOUT_CLASSIFICATION	3.296377493150324E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999754203935157	WITHOUT_CLASSIFICATION	2.4579606484307385E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999754203935157	WITHOUT_CLASSIFICATION	2.4579606484307385E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999964260127052	WITHOUT_CLASSIFICATION	3.573987294747173E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999802568794299	WITHOUT_CLASSIFICATION	1.9743120570083804E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999307880968767	WITHOUT_CLASSIFICATION	6.92119031232526E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999473591054264	WITHOUT_CLASSIFICATION	5.264089457355195E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999898925682592	WITHOUT_CLASSIFICATION	1.0107431740756939E-5	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999800010794382	WITHOUT_CLASSIFICATION	1.9998920561802192E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999844608360458	WITHOUT_CLASSIFICATION	1.553916395423607E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999684910476083	WITHOUT_CLASSIFICATION	3.150895239178715E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999876245299424	WITHOUT_CLASSIFICATION	1.2375470057565098E-5	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999816958673067	WITHOUT_CLASSIFICATION	1.830413269329205E-4	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999872367236659	WITHOUT_CLASSIFICATION	1.2763276334179124E-5	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999919842925029	WITHOUT_CLASSIFICATION	8.01570749701548E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999799640245501	WITHOUT_CLASSIFICATION	2.0035975449797288E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999518954045106	WITHOUT_CLASSIFICATION	4.8104595489349236E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999960379447649	WITHOUT_CLASSIFICATION	3.962055235149974E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999745716302861	WITHOUT_CLASSIFICATION	2.542836971389391E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999872717906672	WITHOUT_CLASSIFICATION	1.2728209332735E-5	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999943526995242	WITHOUT_CLASSIFICATION	5.647300475807615E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999919973273369	WITHOUT_CLASSIFICATION	8.002672663107756E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999953258512758	WITHOUT_CLASSIFICATION	4.674148724176372E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999300199941477	WITHOUT_CLASSIFICATION	6.998000585236646E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9997571926975192	WITHOUT_CLASSIFICATION	2.428073024809348E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999688358193218	WITHOUT_CLASSIFICATION	3.1164180678063956E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999723577658983	WITHOUT_CLASSIFICATION	2.7642234101751846E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999610623130066	WITHOUT_CLASSIFICATION	3.893768699328252E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999786754942543	WITHOUT_CLASSIFICATION	2.1324505745679583E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999151252301548	WITHOUT_CLASSIFICATION	8.487476984523091E-5	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998833806871795	WITHOUT_CLASSIFICATION	1.166193128204819E-4	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998830879570748	WITHOUT_CLASSIFICATION	1.169120429252266E-4	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999515125104387	WITHOUT_CLASSIFICATION	4.8487489561295696E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999477328979077	WITHOUT_CLASSIFICATION	5.226710209239189E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999484350944988	WITHOUT_CLASSIFICATION	5.156490550124112E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999910249922731	WITHOUT_CLASSIFICATION	8.975007726850435E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999510119280165	WITHOUT_CLASSIFICATION	4.898807198342785E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999716003700649	WITHOUT_CLASSIFICATION	2.839962993511366E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.996936633093345	WITHOUT_CLASSIFICATION	0.003063366906654886	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998495796671008	WITHOUT_CLASSIFICATION	1.5042033289932287E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999833965536018	WITHOUT_CLASSIFICATION	1.6603446398154644E-5	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999733407681509	WITHOUT_CLASSIFICATION	2.665923184910353E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999733407681509	WITHOUT_CLASSIFICATION	2.665923184910353E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999631007585231	WITHOUT_CLASSIFICATION	3.6899241476873925E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999688462426004	WITHOUT_CLASSIFICATION	3.115375739964972E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999225681859191	WITHOUT_CLASSIFICATION	7.743181408091081E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999225681859191	WITHOUT_CLASSIFICATION	7.743181408091081E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999942919755198	WITHOUT_CLASSIFICATION	5.70802448016185E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999892322951233	WITHOUT_CLASSIFICATION	1.0767704876659544E-5	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999805657862108	WITHOUT_CLASSIFICATION	1.943421378931849E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999991565320307	WITHOUT_CLASSIFICATION	8.434679693065537E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999482700935585	WITHOUT_CLASSIFICATION	5.172990644161484E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999474043554877	WITHOUT_CLASSIFICATION	5.2595644512438394E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999900448977881	WITHOUT_CLASSIFICATION	9.955102211862316E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999900448977881	WITHOUT_CLASSIFICATION	9.955102211862316E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999474043554877	WITHOUT_CLASSIFICATION	5.2595644512438394E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999634860063771	WITHOUT_CLASSIFICATION	3.651399362287805E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999707457543721	WITHOUT_CLASSIFICATION	2.925424562786453E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999704490245996	WITHOUT_CLASSIFICATION	2.9550975400399193E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999704490245996	WITHOUT_CLASSIFICATION	2.9550975400399193E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999778366105483	WITHOUT_CLASSIFICATION	2.2163389451810175E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999922128222356	WITHOUT_CLASSIFICATION	7.787177764429806E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.99999261134361	WITHOUT_CLASSIFICATION	7.388656390032584E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999777006236725	WITHOUT_CLASSIFICATION	2.22993763274518E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999978515028114	WITHOUT_CLASSIFICATION	2.1484971886099163E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999705297489422	WITHOUT_CLASSIFICATION	2.947025105784728E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999929781825709	WITHOUT_CLASSIFICATION	7.021817429056183E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999914777663482	WITHOUT_CLASSIFICATION	8.522233651796066E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999899953862791	WITHOUT_CLASSIFICATION	1.0004613720876165E-5	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999605826918975	WITHOUT_CLASSIFICATION	3.941730810252224E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.999991294222327	WITHOUT_CLASSIFICATION	8.705777672945914E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9989625240448621	WITHOUT_CLASSIFICATION	0.0010374759551379205	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9998019285572416	WITHOUT_CLASSIFICATION	1.980714427584136E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999946625514227	WITHOUT_CLASSIFICATION	5.33744857738726E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999679102350575	WITHOUT_CLASSIFICATION	3.2089764942473964E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9994104257988515	WITHOUT_CLASSIFICATION	5.895742011485874E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999990297499442	WITHOUT_CLASSIFICATION	9.70250055806375E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999318170569726	WITHOUT_CLASSIFICATION	6.818294302733511E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.99997446903253	WITHOUT_CLASSIFICATION	2.5530967469999897E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999139633507274	WITHOUT_CLASSIFICATION	8.603664927273708E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999613996142915	WITHOUT_CLASSIFICATION	3.8600385708536856E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999487746504803	WITHOUT_CLASSIFICATION	5.1225349519808114E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9948864181023318	WITHOUT_CLASSIFICATION	0.00511358189766818	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999882374993996	WITHOUT_CLASSIFICATION	1.1762500600401124E-4	TEST
faster?	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999928967290567	WITHOUT_CLASSIFICATION	7.103270943343269E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.999986079645014	WITHOUT_CLASSIFICATION	1.3920354985916783E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999734784368218	WITHOUT_CLASSIFICATION	2.6521563178090106E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999948519341217	WITHOUT_CLASSIFICATION	5.148065878219701E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999790886809333	WITHOUT_CLASSIFICATION	2.091131906663579E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998789473320461	WITHOUT_CLASSIFICATION	1.2105266795396188E-4	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999512934966871	WITHOUT_CLASSIFICATION	4.8706503313003414E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999737183657662	WITHOUT_CLASSIFICATION	2.6281634233754143E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999704404363635	WITHOUT_CLASSIFICATION	2.9559563636444537E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999843305927713	WITHOUT_CLASSIFICATION	1.566940722879123E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999966113383555	WITHOUT_CLASSIFICATION	3.3886616445037066E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999705541358124	WITHOUT_CLASSIFICATION	2.9445864187716898E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999984523317281	WITHOUT_CLASSIFICATION	1.547668271893712E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999904810905376	WITHOUT_CLASSIFICATION	9.518909462337597E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999955503528636	WITHOUT_CLASSIFICATION	4.449647136462253E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999739572818493	WITHOUT_CLASSIFICATION	2.604271815070566E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999726295269237	WITHOUT_CLASSIFICATION	2.737047307630349E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999682949795345	WITHOUT_CLASSIFICATION	3.170502046535678E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999710645317008	WITHOUT_CLASSIFICATION	2.8935468299223977E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999956218768666	WITHOUT_CLASSIFICATION	4.3781231333155736E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999575336004888	WITHOUT_CLASSIFICATION	4.246639951109836E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999919530872716	WITHOUT_CLASSIFICATION	8.046912728401915E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999908370992668	WITHOUT_CLASSIFICATION	9.162900733264174E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999215450894207	WITHOUT_CLASSIFICATION	7.845491057941109E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999864244923332	WITHOUT_CLASSIFICATION	1.3575507666751662E-5	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9868305714510762	WITHOUT_CLASSIFICATION	0.013169428548923636	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999931970032194	WITHOUT_CLASSIFICATION	6.802996780564194E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999963975033181	WITHOUT_CLASSIFICATION	3.6024966818666464E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999642345583291	WITHOUT_CLASSIFICATION	3.5765441670927805E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999953768135526	WITHOUT_CLASSIFICATION	4.623186447432652E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999735621198311	WITHOUT_CLASSIFICATION	2.643788016876382E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999846330567403	WITHOUT_CLASSIFICATION	1.536694325972218E-5	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998328399081398	WITHOUT_CLASSIFICATION	1.6716009186024922E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999998435221804	WITHOUT_CLASSIFICATION	1.564778196006832E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999998435221804	WITHOUT_CLASSIFICATION	1.564778196006832E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999133151937728	WITHOUT_CLASSIFICATION	8.66848062271978E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999747782742121	WITHOUT_CLASSIFICATION	2.5221725787942737E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999728385394892	WITHOUT_CLASSIFICATION	2.7161460510944576E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999680441768407	WITHOUT_CLASSIFICATION	3.195582315933263E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999262523615101	WITHOUT_CLASSIFICATION	7.374763848986528E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995323609228811	WITHOUT_CLASSIFICATION	4.676390771188095E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999477884291341	WITHOUT_CLASSIFICATION	5.221157086579412E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.99999952585228	WITHOUT_CLASSIFICATION	4.7414771989760455E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999641204842308	WITHOUT_CLASSIFICATION	3.587951576915276E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999775067027074	WITHOUT_CLASSIFICATION	2.2493297292668303E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999973965599882	WITHOUT_CLASSIFICATION	2.603440011805576E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998874313595112	WITHOUT_CLASSIFICATION	1.1256864048889641E-4	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999924334711853	WITHOUT_CLASSIFICATION	7.566528814727924E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997226111521739	WITHOUT_CLASSIFICATION	2.7738884782606537E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999677749191297	WITHOUT_CLASSIFICATION	3.222508087038401E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999677749191297	WITHOUT_CLASSIFICATION	3.222508087038401E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999608428772818	WITHOUT_CLASSIFICATION	3.9157122718225106E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999591809524576	WITHOUT_CLASSIFICATION	4.0819047542414175E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999769042856377	WITHOUT_CLASSIFICATION	2.3095714362231737E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999984151888742	WITHOUT_CLASSIFICATION	1.5848111257601836E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999965671354122	WITHOUT_CLASSIFICATION	3.432864587810259E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625250850411	WITHOUT_CLASSIFICATION	3.74749149589174E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999848179443066	WITHOUT_CLASSIFICATION	1.5182055693473907E-5	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999895165209923	WITHOUT_CLASSIFICATION	1.0483479007733234E-5	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999676500749844	WITHOUT_CLASSIFICATION	3.234992501557352E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999980852964954	WITHOUT_CLASSIFICATION	1.9147035046398577E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9990681360869691	WITHOUT_CLASSIFICATION	9.318639130309435E-4	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999913142686574	WITHOUT_CLASSIFICATION	8.685731342665394E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999469646164052	WITHOUT_CLASSIFICATION	5.303538359476727E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999416848512683	WITHOUT_CLASSIFICATION	5.831514873164823E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999972346012467	WITHOUT_CLASSIFICATION	2.7653987533013582E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999364878402225	WITHOUT_CLASSIFICATION	6.351215977752724E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999732861504662	WITHOUT_CLASSIFICATION	2.6713849533786877E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998602341505534	WITHOUT_CLASSIFICATION	1.397658494466474E-4	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998686385690264	WITHOUT_CLASSIFICATION	1.3136143097360344E-4	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999966915487359	WITHOUT_CLASSIFICATION	3.3084512640902185E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998581056882259	WITHOUT_CLASSIFICATION	1.4189431177421261E-4	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999994906466769	WITHOUT_CLASSIFICATION	5.093533230920879E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999345787821226	WITHOUT_CLASSIFICATION	6.542121787751182E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990929627114	WITHOUT_CLASSIFICATION	9.070372885210458E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999824707217299	WITHOUT_CLASSIFICATION	1.7529278270141912E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999704382404637	WITHOUT_CLASSIFICATION	2.956175953624748E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996242659310075	WITHOUT_CLASSIFICATION	3.75734068992404E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999735474168671	WITHOUT_CLASSIFICATION	2.645258313300399E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999890328844181	WITHOUT_CLASSIFICATION	1.096711558189251E-5	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999856669074569	WITHOUT_CLASSIFICATION	1.4333092543099379E-5	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999606107058869	WITHOUT_CLASSIFICATION	3.93892941129982E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999526299995258	WITHOUT_CLASSIFICATION	4.737000047412222E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999177385342802	WITHOUT_CLASSIFICATION	8.226146571977342E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999997987062891	WITHOUT_CLASSIFICATION	2.0129371089669764E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999736060499576	WITHOUT_CLASSIFICATION	2.639395004244865E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999980088043997	WITHOUT_CLASSIFICATION	1.9911956003078797E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999543104182811	WITHOUT_CLASSIFICATION	4.56895817188647E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999992292803428	WITHOUT_CLASSIFICATION	7.707196571973138E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999605570981626	WITHOUT_CLASSIFICATION	3.944290183739121E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999106518015386	WITHOUT_CLASSIFICATION	8.934819846144925E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9997212168516414	WITHOUT_CLASSIFICATION	2.787831483586893E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999842787809804	WITHOUT_CLASSIFICATION	1.5721219019589507E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998843467799048	WITHOUT_CLASSIFICATION	1.1565322009524559E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998843467799048	WITHOUT_CLASSIFICATION	1.1565322009524559E-4	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999789206031119	WITHOUT_CLASSIFICATION	2.107939688813618E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999906457405952	WITHOUT_CLASSIFICATION	9.354259404739284E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.998708304342726	WITHOUT_CLASSIFICATION	0.001291695657274046	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999489336556594	WITHOUT_CLASSIFICATION	5.106634434055259E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999825850951021	WITHOUT_CLASSIFICATION	1.7414904897924255E-5	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999978895740597	WITHOUT_CLASSIFICATION	2.1104259402778474E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999502527766466	WITHOUT_CLASSIFICATION	4.974722335335305E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999047103863665	WITHOUT_CLASSIFICATION	9.528961363341975E-5	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999978644621811	WITHOUT_CLASSIFICATION	2.135537818977547E-6	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948380927499	WITHOUT_CLASSIFICATION	5.161907250087128E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9995563769072391	WITHOUT_CLASSIFICATION	4.4362309276095477E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9954299097943033	WITHOUT_CLASSIFICATION	0.004570090205696757	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999962121223454	WITHOUT_CLASSIFICATION	3.7878776547088398E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999425866561775	WITHOUT_CLASSIFICATION	5.741334382252326E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9986037283392561	WITHOUT_CLASSIFICATION	0.0013962716607438788	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999930951033505	WITHOUT_CLASSIFICATION	6.9048966494457525E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999968521778891	WITHOUT_CLASSIFICATION	3.1478221107479344E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999788291405431	WITHOUT_CLASSIFICATION	2.1170859456839538E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998559017768253	WITHOUT_CLASSIFICATION	1.440982231747134E-4	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999603462716341	WITHOUT_CLASSIFICATION	3.965372836590218E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996178104555	WITHOUT_CLASSIFICATION	3.821895444931883E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998994211057265	WITHOUT_CLASSIFICATION	1.0057889427356031E-4	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998515990284084	WITHOUT_CLASSIFICATION	1.4840097159159367E-4	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999691700103208	WITHOUT_CLASSIFICATION	3.082998967924518E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999934590766779	WITHOUT_CLASSIFICATION	6.540923322092736E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999937739893926	WITHOUT_CLASSIFICATION	6.226010607300523E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999838687863238	WITHOUT_CLASSIFICATION	1.6131213676207992E-5	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9985389881132779	WITHOUT_CLASSIFICATION	0.0014610118867221034	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9996184418234553	WITHOUT_CLASSIFICATION	3.8155817654467525E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999882327997186	WITHOUT_CLASSIFICATION	1.1767200281425492E-5	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999938786957632	WITHOUT_CLASSIFICATION	6.12130423677814E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999948068936092	WITHOUT_CLASSIFICATION	5.193106390842817E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.999995201854629	WITHOUT_CLASSIFICATION	4.798145371043993E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999937886603242	WITHOUT_CLASSIFICATION	6.211339675866206E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998724043561922	WITHOUT_CLASSIFICATION	1.2759564380781174E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999933726117741	WITHOUT_CLASSIFICATION	6.627388225865078E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999810211585286	WITHOUT_CLASSIFICATION	1.8978841471460796E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999672475563168	WITHOUT_CLASSIFICATION	3.2752443683217506E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9986963774577649	WITHOUT_CLASSIFICATION	0.0013036225422351701	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999842047050477	WITHOUT_CLASSIFICATION	1.5795294952311117E-5	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997875107709948	WITHOUT_CLASSIFICATION	2.124892290051292E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999861989436526	WITHOUT_CLASSIFICATION	1.3801056347386723E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999986883860069	WITHOUT_CLASSIFICATION	1.3116139930960918E-6	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.99999378595257	WITHOUT_CLASSIFICATION	6.214047429952945E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9996785491396799	WITHOUT_CLASSIFICATION	3.214508603201366E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9976851582035984	WITHOUT_CLASSIFICATION	0.0023148417964015703	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9998700509491256	WITHOUT_CLASSIFICATION	1.2994905087438793E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999983148573515	WITHOUT_CLASSIFICATION	1.6851426485201334E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999924334711853	WITHOUT_CLASSIFICATION	7.566528814727924E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999922526300399	WITHOUT_CLASSIFICATION	7.747369960018443E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999989698994068	WITHOUT_CLASSIFICATION	1.0301005931603336E-6	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999843899803189	WITHOUT_CLASSIFICATION	1.5610019681097136E-5	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999945836906085	WITHOUT_CLASSIFICATION	5.4163093915906E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999923291305441	WITHOUT_CLASSIFICATION	7.670869455824609E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999953832803612	WITHOUT_CLASSIFICATION	4.61671963882705E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997068989512851	WITHOUT_CLASSIFICATION	2.931010487148811E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9985426955141568	WITHOUT_CLASSIFICATION	0.0014573044858432564	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999379981146496	WITHOUT_CLASSIFICATION	6.20018853505117E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999865545455296	WITHOUT_CLASSIFICATION	1.3445454470281987E-5	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999957099347928	WITHOUT_CLASSIFICATION	4.2900652072007E-6	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9991637286367101	WITHOUT_CLASSIFICATION	8.362713632900426E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998066393227816	WITHOUT_CLASSIFICATION	1.9336067721848198E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999606400774079	WITHOUT_CLASSIFICATION	3.9359922592056334E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9996928872590283	WITHOUT_CLASSIFICATION	3.071127409717128E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999864460297497	WITHOUT_CLASSIFICATION	1.3553970250293829E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999726384056384	WITHOUT_CLASSIFICATION	2.736159436158104E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996727476234	WITHOUT_CLASSIFICATION	3.2725237662720843E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999994452696777	WITHOUT_CLASSIFICATION	5.547303223683504E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999864460297497	WITHOUT_CLASSIFICATION	1.3553970250293829E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998770345913428	WITHOUT_CLASSIFICATION	1.2296540865724845E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999975946177623	WITHOUT_CLASSIFICATION	2.405382237760422E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999967731095243	WITHOUT_CLASSIFICATION	3.2268904756604297E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999967255517692	WITHOUT_CLASSIFICATION	3.27444823080707E-5	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999638505716886	WITHOUT_CLASSIFICATION	3.6149428311406343E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998914252764551	WITHOUT_CLASSIFICATION	1.0857472354491747E-4	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.999993407771071	WITHOUT_CLASSIFICATION	6.5922289290323325E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9892510704205395	WITHOUT_CLASSIFICATION	0.01074892957946051	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997783902520622	WITHOUT_CLASSIFICATION	2.2160974793776137E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999221236065087	WITHOUT_CLASSIFICATION	7.787639349139612E-5	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998814522133818	WITHOUT_CLASSIFICATION	1.185477866182361E-4	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9992679906729498	WITHOUT_CLASSIFICATION	7.320093270501955E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999892151735733	WITHOUT_CLASSIFICATION	1.078482642663752E-5	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999141747084278	WITHOUT_CLASSIFICATION	8.582529157219033E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999967984071323	WITHOUT_CLASSIFICATION	3.2015928676237322E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999770016331808	WITHOUT_CLASSIFICATION	2.299836681914614E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999688358193218	WITHOUT_CLASSIFICATION	3.1164180678063956E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999978096102551	WITHOUT_CLASSIFICATION	2.190389744896216E-5	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999949246762093	WITHOUT_CLASSIFICATION	5.075323790700445E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994981750253095	WITHOUT_CLASSIFICATION	5.018249746904725E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999913456641838	WITHOUT_CLASSIFICATION	8.654335816128645E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999941705910134	WITHOUT_CLASSIFICATION	5.82940898659066E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999814241945236	WITHOUT_CLASSIFICATION	1.857580547644699E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999973239760419	WITHOUT_CLASSIFICATION	2.676023958090773E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999993561395102	WITHOUT_CLASSIFICATION	6.43860489801841E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999982446977878	WITHOUT_CLASSIFICATION	1.7553022122625287E-6	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999459281224871	WITHOUT_CLASSIFICATION	5.40718775128561E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9994883383985024	WITHOUT_CLASSIFICATION	5.116616014976606E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998449740727808	WITHOUT_CLASSIFICATION	1.55025927219216E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999933721654899	WITHOUT_CLASSIFICATION	6.6278345101367885E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.999940821083538	WITHOUT_CLASSIFICATION	5.9178916461896404E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999962656563108	WITHOUT_CLASSIFICATION	3.734343689175464E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999795640183543	WITHOUT_CLASSIFICATION	2.043598164567549E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999935721075658	WITHOUT_CLASSIFICATION	6.42789243426658E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999977374169808	WITHOUT_CLASSIFICATION	2.2625830191776195E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999369778010215	WITHOUT_CLASSIFICATION	6.302219897846103E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999978163695481	WITHOUT_CLASSIFICATION	2.183630451825894E-6	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999900313389382	WITHOUT_CLASSIFICATION	9.968661061895196E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999914006747601	WITHOUT_CLASSIFICATION	8.599325239873806E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999974650431386	WITHOUT_CLASSIFICATION	2.534956861416366E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999775157030102	WITHOUT_CLASSIFICATION	2.2484296989797613E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999984038714272	WITHOUT_CLASSIFICATION	1.596128572801117E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999984038714272	WITHOUT_CLASSIFICATION	1.596128572801117E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9993583072971389	WITHOUT_CLASSIFICATION	6.41692702861191E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999843409346855	WITHOUT_CLASSIFICATION	1.5659065314539903E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999424326265799	WITHOUT_CLASSIFICATION	5.756737342006305E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999847092827366	WITHOUT_CLASSIFICATION	1.529071726326331E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999756280044971	WITHOUT_CLASSIFICATION	2.4371995502860766E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999756280044971	WITHOUT_CLASSIFICATION	2.4371995502860766E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999732293424184	WITHOUT_CLASSIFICATION	2.6770657581653476E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999765127055484	WITHOUT_CLASSIFICATION	2.348729445150404E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999585748293702	WITHOUT_CLASSIFICATION	4.142517062969091E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999929471414215	WITHOUT_CLASSIFICATION	7.05285857848494E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999769672188856	WITHOUT_CLASSIFICATION	2.30327811142952E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999855855286325	WITHOUT_CLASSIFICATION	1.4414471367443478E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999223372769325	WITHOUT_CLASSIFICATION	7.766272306761605E-5	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999820735636955	WITHOUT_CLASSIFICATION	1.7926436304424715E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999971015435087	WITHOUT_CLASSIFICATION	2.8984564911892624E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997719411475566	WITHOUT_CLASSIFICATION	2.280588524434332E-4	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9983952671141225	WITHOUT_CLASSIFICATION	0.001604732885877445	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998923516394743	WITHOUT_CLASSIFICATION	1.0764836052572716E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998923516394743	WITHOUT_CLASSIFICATION	1.0764836052572716E-4	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999770016331808	WITHOUT_CLASSIFICATION	2.299836681914614E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999967550364352	WITHOUT_CLASSIFICATION	3.244963564793631E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999675671304337	WITHOUT_CLASSIFICATION	3.243286956639568E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999590954747899	WITHOUT_CLASSIFICATION	4.0904525210119366E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998479674146868	WITHOUT_CLASSIFICATION	1.5203258531317905E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977425535043	WITHOUT_CLASSIFICATION	2.2574464956955944E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999550995332714	WITHOUT_CLASSIFICATION	4.4900466728587365E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999865013262613	WITHOUT_CLASSIFICATION	1.3498673738692237E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999791692316887	WITHOUT_CLASSIFICATION	2.0830768311276222E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998606363491239	WITHOUT_CLASSIFICATION	1.393636508760656E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999221236065087	WITHOUT_CLASSIFICATION	7.787639349139612E-5	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999302283618261	WITHOUT_CLASSIFICATION	6.977163817399296E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999150653802467	WITHOUT_CLASSIFICATION	8.493461975340761E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999455175807789	WITHOUT_CLASSIFICATION	5.448241922109948E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999932488082869	WITHOUT_CLASSIFICATION	6.751191713101048E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999616618236905	WITHOUT_CLASSIFICATION	3.833817630954329E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999472959085027	WITHOUT_CLASSIFICATION	5.270409149726013E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999366271748679	WITHOUT_CLASSIFICATION	6.337282513215037E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999558933617211	WITHOUT_CLASSIFICATION	4.410663827892427E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999620813432482	WITHOUT_CLASSIFICATION	3.79186567518401E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999916469759003	WITHOUT_CLASSIFICATION	8.353024099704033E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999916469759003	WITHOUT_CLASSIFICATION	8.353024099704033E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998900616529185	WITHOUT_CLASSIFICATION	1.0993834708159602E-4	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998833031147	WITHOUT_CLASSIFICATION	1.1669688521012075E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999734568692443	WITHOUT_CLASSIFICATION	2.6543130755732667E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999212453196342	WITHOUT_CLASSIFICATION	7.87546803657907E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999564477076612	WITHOUT_CLASSIFICATION	4.3552292338791405E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999705530703261	WITHOUT_CLASSIFICATION	2.9446929673882696E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999911730149293	WITHOUT_CLASSIFICATION	8.826985070655395E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999990313534757	WITHOUT_CLASSIFICATION	9.686465243165594E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999929825141633	WITHOUT_CLASSIFICATION	7.017485836694089E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999762794734928	WITHOUT_CLASSIFICATION	2.3720526507285205E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511286190864	WITHOUT_CLASSIFICATION	4.8871380913662334E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999292148198351	WITHOUT_CLASSIFICATION	7.078518016489817E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999900262238162	WITHOUT_CLASSIFICATION	9.973776183774737E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999923677896336	WITHOUT_CLASSIFICATION	7.632210366391374E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999113051923021	WITHOUT_CLASSIFICATION	8.869480769793103E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999942835330738	WITHOUT_CLASSIFICATION	5.716466926092221E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999978389766624	WITHOUT_CLASSIFICATION	2.1610233375922416E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999936178341737	WITHOUT_CLASSIFICATION	6.382165826306062E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998771638901046	WITHOUT_CLASSIFICATION	1.228361098953492E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999895559458235	WITHOUT_CLASSIFICATION	1.0444054176549335E-5	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999900753252606	WITHOUT_CLASSIFICATION	9.92467473939662E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999988340954519	WITHOUT_CLASSIFICATION	1.1659045480912567E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.99999261134361	WITHOUT_CLASSIFICATION	7.388656390032584E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999445402906165	WITHOUT_CLASSIFICATION	5.545970938350012E-4	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999706286954574	WITHOUT_CLASSIFICATION	2.9371304542562488E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999706286954574	WITHOUT_CLASSIFICATION	2.9371304542562488E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999230272400677	WITHOUT_CLASSIFICATION	7.697275993238547E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998311823324412	WITHOUT_CLASSIFICATION	1.6881766755877454E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999274092370984	WITHOUT_CLASSIFICATION	7.259076290156556E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999934382624153	WITHOUT_CLASSIFICATION	6.561737584820372E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.999981995990871	WITHOUT_CLASSIFICATION	1.800400912900938E-5	TEST
