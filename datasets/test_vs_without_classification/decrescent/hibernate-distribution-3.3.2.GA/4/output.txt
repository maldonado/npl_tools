//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996636124782813	WITHOUT_CLASSIFICATION	3.3638752171863883E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999309262591424	WITHOUT_CLASSIFICATION	6.907374085766872E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998430761493	WITHOUT_CLASSIFICATION	1.5692385072724223E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999974650211939	WITHOUT_CLASSIFICATION	2.53497880606721E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997896178237	WITHOUT_CLASSIFICATION	2.1038217629560485E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997896178237	WITHOUT_CLASSIFICATION	2.1038217629560485E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998539780075	WITHOUT_CLASSIFICATION	1.4602199243243486E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999906888793	WITHOUT_CLASSIFICATION	9.311120689580272E-8	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999997012175839	WITHOUT_CLASSIFICATION	2.987824161397494E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998209690268	WITHOUT_CLASSIFICATION	1.7903097317394387E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994487529371	WITHOUT_CLASSIFICATION	5.512470629861362E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994487529371	WITHOUT_CLASSIFICATION	5.512470629861362E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972734247826	WITHOUT_CLASSIFICATION	2.7265752172745175E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999435712364	WITHOUT_CLASSIFICATION	5.6428763587637805E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999997818987955	WITHOUT_CLASSIFICATION	2.18101204386375E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999935352379901	WITHOUT_CLASSIFICATION	6.464762010021638E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999568748756	WITHOUT_CLASSIFICATION	4.312512445230418E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999965469038438	WITHOUT_CLASSIFICATION	3.4530961563529057E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999940484958416	WITHOUT_CLASSIFICATION	5.951504158398214E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999927155423606	WITHOUT_CLASSIFICATION	7.284457639491321E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999917210509467	WITHOUT_CLASSIFICATION	8.278949053265633E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9995386858320455	WITHOUT_CLASSIFICATION	4.6131416795452225E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999968637992854	WITHOUT_CLASSIFICATION	3.1362007146017936E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999956374482318	WITHOUT_CLASSIFICATION	4.362551768210228E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999848343015	WITHOUT_CLASSIFICATION	1.5165698505492944E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999936590496428	WITHOUT_CLASSIFICATION	6.340950357236138E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999936590496428	WITHOUT_CLASSIFICATION	6.340950357236138E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999993737172364	WITHOUT_CLASSIFICATION	6.262827636444546E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999917551742878	WITHOUT_CLASSIFICATION	8.244825712185266E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998969885301	WITHOUT_CLASSIFICATION	1.0301146993568994E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999835972939	WITHOUT_CLASSIFICATION	1.6402706145329086E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999971260151059	WITHOUT_CLASSIFICATION	2.8739848939872708E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9992487545930496	WITHOUT_CLASSIFICATION	7.512454069503765E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9992487545930496	WITHOUT_CLASSIFICATION	7.512454069503765E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999577659124	WITHOUT_CLASSIFICATION	4.2234087628019824E-8	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999799890020988	WITHOUT_CLASSIFICATION	2.001099790119363E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999996431362705	WITHOUT_CLASSIFICATION	3.568637294335751E-7	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988202119123	WITHOUT_CLASSIFICATION	1.179788087630631E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998925584589	WITHOUT_CLASSIFICATION	1.0744154099718423E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990206328885	WITHOUT_CLASSIFICATION	9.79367111526594E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989617304381	WITHOUT_CLASSIFICATION	1.0382695619427992E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998674452786	WITHOUT_CLASSIFICATION	1.3255472150052988E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999875212817378	WITHOUT_CLASSIFICATION	1.2478718262071557E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999131144456	WITHOUT_CLASSIFICATION	8.68855544379146E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999965976047689	WITHOUT_CLASSIFICATION	3.4023952310275874E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999875212817378	WITHOUT_CLASSIFICATION	1.2478718262071557E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999965976047689	WITHOUT_CLASSIFICATION	3.4023952310275874E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999973209177119	WITHOUT_CLASSIFICATION	2.6790822880926006E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9978079063837867	WITHOUT_CLASSIFICATION	0.002192093616213372	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993773640115	WITHOUT_CLASSIFICATION	6.226359884707431E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999975685325341	WITHOUT_CLASSIFICATION	2.4314674659510973E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999848550933191	WITHOUT_CLASSIFICATION	1.5144906680873255E-5	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999865671194249	WITHOUT_CLASSIFICATION	1.3432880575107704E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998960800449672	WITHOUT_CLASSIFICATION	1.0391995503271278E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999991229110993	WITHOUT_CLASSIFICATION	8.770889007099539E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999978573411177	WITHOUT_CLASSIFICATION	2.142658882375605E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999870873784434	WITHOUT_CLASSIFICATION	1.2912621556516067E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994083980438	WITHOUT_CLASSIFICATION	5.916019562058761E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999996382496578	WITHOUT_CLASSIFICATION	3.6175034215438006E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999995248920058	WITHOUT_CLASSIFICATION	4.7510799410543183E-7	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999998781114933	WITHOUT_CLASSIFICATION	1.218885067577475E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999998473775716	WITHOUT_CLASSIFICATION	1.5262242841415823E-7	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999893528844341	WITHOUT_CLASSIFICATION	1.0647115565787903E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999731257041	WITHOUT_CLASSIFICATION	2.6874295932698724E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998841538048	WITHOUT_CLASSIFICATION	1.158461952186171E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996608920078	WITHOUT_CLASSIFICATION	3.391079922423941E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997545144803	WITHOUT_CLASSIFICATION	2.4548551965415127E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999983517207566	WITHOUT_CLASSIFICATION	1.6482792434508305E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997577986284	WITHOUT_CLASSIFICATION	2.422013717013406E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999776392853	WITHOUT_CLASSIFICATION	2.236071467248883E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968341676119	WITHOUT_CLASSIFICATION	3.165832388130765E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999958240983843	WITHOUT_CLASSIFICATION	4.175901615653897E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999518351584	WITHOUT_CLASSIFICATION	4.816484148888853E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999957257444	WITHOUT_CLASSIFICATION	4.274255654816296E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999993173000274	WITHOUT_CLASSIFICATION	6.826999725510861E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999982762284003	WITHOUT_CLASSIFICATION	1.723771599574805E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999919140116316	WITHOUT_CLASSIFICATION	8.08598836846434E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999979063241955	WITHOUT_CLASSIFICATION	2.093675804563657E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999860347848	WITHOUT_CLASSIFICATION	1.3965215172804108E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999997704067028	WITHOUT_CLASSIFICATION	2.2959329717728805E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999619248716	WITHOUT_CLASSIFICATION	3.8075128379693844E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998945600634	WITHOUT_CLASSIFICATION	1.0543993654257789E-7	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999987579240548	WITHOUT_CLASSIFICATION	1.2420759451976403E-6	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999619248716	WITHOUT_CLASSIFICATION	3.8075128379693844E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997251376215	WITHOUT_CLASSIFICATION	2.7486237849869124E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998684211705	WITHOUT_CLASSIFICATION	1.3157882948116345E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999994739117598	WITHOUT_CLASSIFICATION	5.260882402045228E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997254052779	WITHOUT_CLASSIFICATION	2.745947220545155E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999998706191235	WITHOUT_CLASSIFICATION	1.2938087642990131E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999875595151	WITHOUT_CLASSIFICATION	1.2440484927261989E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999875595151	WITHOUT_CLASSIFICATION	1.2440484927261989E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999980017706398	WITHOUT_CLASSIFICATION	1.998229360135679E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999982112075506	WITHOUT_CLASSIFICATION	1.7887924493680034E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999976525551	WITHOUT_CLASSIFICATION	2.347444899989938E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999237620706	WITHOUT_CLASSIFICATION	7.623792935267186E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997878430896	WITHOUT_CLASSIFICATION	2.1215691024987597E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998786750084	WITHOUT_CLASSIFICATION	1.213249915315319E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998453468453	WITHOUT_CLASSIFICATION	1.5465315474501265E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999605101418	WITHOUT_CLASSIFICATION	3.9489858133991605E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999997275665962	WITHOUT_CLASSIFICATION	2.724334038331559E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999248031702	WITHOUT_CLASSIFICATION	7.519682975284135E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997365635628	WITHOUT_CLASSIFICATION	2.634364371753279E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997365635628	WITHOUT_CLASSIFICATION	2.634364371753279E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999969304118	WITHOUT_CLASSIFICATION	3.069588184367264E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999310006727	WITHOUT_CLASSIFICATION	6.899932719360002E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999999153638636	WITHOUT_CLASSIFICATION	8.463613639117152E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997365635628	WITHOUT_CLASSIFICATION	2.634364371753279E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999969304118	WITHOUT_CLASSIFICATION	3.069588184367264E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999969304118	WITHOUT_CLASSIFICATION	3.069588184367264E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999911847674898	WITHOUT_CLASSIFICATION	8.815232510065115E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999999561744388	WITHOUT_CLASSIFICATION	4.382556119630465E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999915826404	WITHOUT_CLASSIFICATION	8.417359600703343E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999998428805082	WITHOUT_CLASSIFICATION	1.5711949179592078E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999991873373977	WITHOUT_CLASSIFICATION	8.126626022445603E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999991873373977	WITHOUT_CLASSIFICATION	8.126626022445603E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999983705922751	WITHOUT_CLASSIFICATION	1.6294077248184668E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999973135597854	WITHOUT_CLASSIFICATION	2.686440214686592E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999996779066024	WITHOUT_CLASSIFICATION	3.2209339766368984E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999927571717	WITHOUT_CLASSIFICATION	7.242828306185222E-8	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999927571717	WITHOUT_CLASSIFICATION	7.242828306185222E-8	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999986885736092	WITHOUT_CLASSIFICATION	1.3114263908231363E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999954053002139	WITHOUT_CLASSIFICATION	4.594699786129016E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999932669752472	WITHOUT_CLASSIFICATION	6.733024752860978E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999997353995136	WITHOUT_CLASSIFICATION	2.646004864502329E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999956603023069	WITHOUT_CLASSIFICATION	4.339697693078036E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999992442046068	WITHOUT_CLASSIFICATION	7.557953931587305E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999971077695784	WITHOUT_CLASSIFICATION	2.892230421616722E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997746047845	WITHOUT_CLASSIFICATION	2.253952154440423E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999921221488203	WITHOUT_CLASSIFICATION	7.877851179769394E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999932669752472	WITHOUT_CLASSIFICATION	6.733024752860978E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999817494591517	WITHOUT_CLASSIFICATION	1.8250540848258042E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949180189607	WITHOUT_CLASSIFICATION	5.0819810392794634E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949180189607	WITHOUT_CLASSIFICATION	5.0819810392794634E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997155768683	WITHOUT_CLASSIFICATION	2.84423131704305E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999721963515723	WITHOUT_CLASSIFICATION	2.780364842762379E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996102402916	WITHOUT_CLASSIFICATION	3.8975970836301526E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999681737233198	WITHOUT_CLASSIFICATION	3.1826276680288784E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999939286621854	WITHOUT_CLASSIFICATION	6.071337814691925E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999839397554996	WITHOUT_CLASSIFICATION	1.6060244500404364E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999996555806587	WITHOUT_CLASSIFICATION	3.444193412184688E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999687357587	WITHOUT_CLASSIFICATION	3.126424122806609E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999504454399	WITHOUT_CLASSIFICATION	4.955456011586738E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999504454399	WITHOUT_CLASSIFICATION	4.955456011586738E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996636124782813	WITHOUT_CLASSIFICATION	3.3638752171863883E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.99999971291746	WITHOUT_CLASSIFICATION	2.8708253991198613E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997763289202	WITHOUT_CLASSIFICATION	2.236710797352989E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999984333202986	WITHOUT_CLASSIFICATION	1.5666797015246462E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999998357340544	WITHOUT_CLASSIFICATION	1.6426594559680644E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999993127239717	WITHOUT_CLASSIFICATION	6.872760283052209E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995240429072	WITHOUT_CLASSIFICATION	4.759570929511989E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999994802709703	WITHOUT_CLASSIFICATION	5.197290296585886E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999947524771041	WITHOUT_CLASSIFICATION	5.247522895956561E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999980453259835	WITHOUT_CLASSIFICATION	1.9546740165115857E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999975860805751	WITHOUT_CLASSIFICATION	2.413919424838436E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998430761493	WITHOUT_CLASSIFICATION	1.5692385072724223E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998172949314	WITHOUT_CLASSIFICATION	1.8270506865578615E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998172949314	WITHOUT_CLASSIFICATION	1.8270506865578615E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999992444355393	WITHOUT_CLASSIFICATION	7.555644606635303E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999968167255377	WITHOUT_CLASSIFICATION	3.183274462304947E-5	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999785010611	WITHOUT_CLASSIFICATION	2.1498938909706638E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999925094459797	WITHOUT_CLASSIFICATION	7.4905540202578415E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999991711136477	WITHOUT_CLASSIFICATION	8.288863524295787E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999995640185892	WITHOUT_CLASSIFICATION	4.359814107489971E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997896178237	WITHOUT_CLASSIFICATION	2.1038217629560485E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995348759693	WITHOUT_CLASSIFICATION	4.651240307798604E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999986846920637	WITHOUT_CLASSIFICATION	1.3153079362849092E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999991531814287	WITHOUT_CLASSIFICATION	8.468185712824934E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996566338174	WITHOUT_CLASSIFICATION	3.4336618262983385E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999992356081265	WITHOUT_CLASSIFICATION	7.64391873479437E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999988896330423	WITHOUT_CLASSIFICATION	1.110366957691025E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995592717601	WITHOUT_CLASSIFICATION	4.4072823985696226E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998936543898	WITHOUT_CLASSIFICATION	1.06345610195619E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999520220789	WITHOUT_CLASSIFICATION	4.7977921109543514E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999997941466877	WITHOUT_CLASSIFICATION	2.0585331238887124E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996936667287	WITHOUT_CLASSIFICATION	3.063332713139965E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997662454191	WITHOUT_CLASSIFICATION	2.3375458089292054E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999989922645195	WITHOUT_CLASSIFICATION	1.0077354805125808E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999980453259835	WITHOUT_CLASSIFICATION	1.9546740165115857E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998172949314	WITHOUT_CLASSIFICATION	1.8270506865578615E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995592717601	WITHOUT_CLASSIFICATION	4.4072823985696226E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998539780075	WITHOUT_CLASSIFICATION	1.4602199243243486E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999994892135836	WITHOUT_CLASSIFICATION	5.107864164358671E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999989754874625	WITHOUT_CLASSIFICATION	1.0245125374412414E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999997304552043	WITHOUT_CLASSIFICATION	2.6954479576800747E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999951471326275	WITHOUT_CLASSIFICATION	4.852867372547991E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995997737755	WITHOUT_CLASSIFICATION	4.0022622444002784E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999980700922989	WITHOUT_CLASSIFICATION	1.9299077011234096E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999159155986	WITHOUT_CLASSIFICATION	8.408440140616964E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999802770407542	WITHOUT_CLASSIFICATION	1.9722959245870038E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999859941621498	WITHOUT_CLASSIFICATION	1.400583785014446E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.99999101844851	WITHOUT_CLASSIFICATION	8.98155148995378E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.99999101844851	WITHOUT_CLASSIFICATION	8.98155148995378E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998938544544	WITHOUT_CLASSIFICATION	1.061455456422664E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999934072441	WITHOUT_CLASSIFICATION	6.5927558477394095E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999924678861682	WITHOUT_CLASSIFICATION	7.532113831644491E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999993092611746	WITHOUT_CLASSIFICATION	6.90738825224661E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999506334575	WITHOUT_CLASSIFICATION	4.936654259077017E-8	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999806874886	WITHOUT_CLASSIFICATION	1.9312511471926354E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999997449706252	WITHOUT_CLASSIFICATION	2.550293748571946E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999906888793	WITHOUT_CLASSIFICATION	9.311120689580272E-8	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.99999960211336	WITHOUT_CLASSIFICATION	3.9788663992136507E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999172569056	WITHOUT_CLASSIFICATION	8.274309437150845E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999172569056	WITHOUT_CLASSIFICATION	8.274309437150845E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999995919309901	WITHOUT_CLASSIFICATION	4.080690098369496E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999996673333957	WITHOUT_CLASSIFICATION	3.3266660424841384E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997364010411	WITHOUT_CLASSIFICATION	2.6359895896836357E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999427698139	WITHOUT_CLASSIFICATION	5.7230186026411E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999984018882625	WITHOUT_CLASSIFICATION	1.598111737495812E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998282481215	WITHOUT_CLASSIFICATION	1.7175187847614742E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999980453259835	WITHOUT_CLASSIFICATION	1.9546740165115857E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998430761493	WITHOUT_CLASSIFICATION	1.5692385072724223E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995592717601	WITHOUT_CLASSIFICATION	4.4072823985696226E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995592717601	WITHOUT_CLASSIFICATION	4.4072823985696226E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998811135447	WITHOUT_CLASSIFICATION	1.1888645523715589E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998811135447	WITHOUT_CLASSIFICATION	1.1888645523715589E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997919666047	WITHOUT_CLASSIFICATION	2.0803339535397623E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999992948125532	WITHOUT_CLASSIFICATION	7.051874467150465E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999992948125532	WITHOUT_CLASSIFICATION	7.051874467150465E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999998433490788	WITHOUT_CLASSIFICATION	1.5665092123652593E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999998629610167	WITHOUT_CLASSIFICATION	1.3703898319303873E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.99999958598789	WITHOUT_CLASSIFICATION	4.140121100725551E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999998065981208	WITHOUT_CLASSIFICATION	1.9340187917571318E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998903863245	WITHOUT_CLASSIFICATION	1.0961367550672336E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998209690268	WITHOUT_CLASSIFICATION	1.7903097317394387E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998209690268	WITHOUT_CLASSIFICATION	1.7903097317394387E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999990077458599	WITHOUT_CLASSIFICATION	9.922541400085556E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.999999756130876	WITHOUT_CLASSIFICATION	2.4386912404495646E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999986859657672	WITHOUT_CLASSIFICATION	1.3140342328187377E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999973214440061	WITHOUT_CLASSIFICATION	2.6785559939440474E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.999999375411917	WITHOUT_CLASSIFICATION	6.245880831019863E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999957630041658	WITHOUT_CLASSIFICATION	4.236995834183181E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994487529371	WITHOUT_CLASSIFICATION	5.512470629861362E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992151486657	WITHOUT_CLASSIFICATION	7.848513342115286E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992151486657	WITHOUT_CLASSIFICATION	7.848513342115286E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972734247826	WITHOUT_CLASSIFICATION	2.7265752172745175E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972734247826	WITHOUT_CLASSIFICATION	2.7265752172745175E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990699634368	WITHOUT_CLASSIFICATION	9.300365633366732E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990699634368	WITHOUT_CLASSIFICATION	9.300365633366732E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997827627961	WITHOUT_CLASSIFICATION	2.1723720389380796E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997827627961	WITHOUT_CLASSIFICATION	2.1723720389380796E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998209690268	WITHOUT_CLASSIFICATION	1.7903097317394387E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994487529371	WITHOUT_CLASSIFICATION	5.512470629861362E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992151486657	WITHOUT_CLASSIFICATION	7.848513342115286E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999992151486657	WITHOUT_CLASSIFICATION	7.848513342115286E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972734247826	WITHOUT_CLASSIFICATION	2.7265752172745175E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990699634368	WITHOUT_CLASSIFICATION	9.300365633366732E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999990699634368	WITHOUT_CLASSIFICATION	9.300365633366732E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997827627961	WITHOUT_CLASSIFICATION	2.1723720389380796E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999997030495027	WITHOUT_CLASSIFICATION	2.969504973223155E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999985518526328	WITHOUT_CLASSIFICATION	1.4481473672955515E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999967518398698	WITHOUT_CLASSIFICATION	3.248160130121619E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999987654587619	WITHOUT_CLASSIFICATION	1.2345412381748355E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999977442147323	WITHOUT_CLASSIFICATION	2.2557852677974456E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.999997759160908	WITHOUT_CLASSIFICATION	2.2408390920479054E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998346057373	WITHOUT_CLASSIFICATION	1.653942627120251E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999984759835094	WITHOUT_CLASSIFICATION	1.5240164905331224E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999991247855594	WITHOUT_CLASSIFICATION	8.752144405420305E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996147386294	WITHOUT_CLASSIFICATION	3.852613706452461E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998718997697	WITHOUT_CLASSIFICATION	1.2810023031182804E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995269067257	WITHOUT_CLASSIFICATION	4.7309327438103044E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999980017706398	WITHOUT_CLASSIFICATION	1.998229360135679E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.999997759160908	WITHOUT_CLASSIFICATION	2.2408390920479054E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999631443438968	WITHOUT_CLASSIFICATION	3.6855656103239194E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999631443438968	WITHOUT_CLASSIFICATION	3.6855656103239194E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999998382357629	WITHOUT_CLASSIFICATION	1.6176423712663087E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993456301167	WITHOUT_CLASSIFICATION	6.543698832257312E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999993456301167	WITHOUT_CLASSIFICATION	6.543698832257312E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999904399672344	WITHOUT_CLASSIFICATION	9.560032765684668E-6	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999996481487929	WITHOUT_CLASSIFICATION	3.518512071027747E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996641563133	WITHOUT_CLASSIFICATION	3.3584368672066405E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999892092119	WITHOUT_CLASSIFICATION	1.079078809572709E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999892092119	WITHOUT_CLASSIFICATION	1.079078809572709E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999568748756	WITHOUT_CLASSIFICATION	4.312512445230418E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999879631156	WITHOUT_CLASSIFICATION	1.2036884402499144E-7	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999879631156	WITHOUT_CLASSIFICATION	1.2036884402499144E-7	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999293153164751	WITHOUT_CLASSIFICATION	7.068468352483381E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999999489691078	WITHOUT_CLASSIFICATION	5.103089220489987E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999999640897189	WITHOUT_CLASSIFICATION	3.5910281103974455E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999899919208278	WITHOUT_CLASSIFICATION	1.0008079172135956E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999949724310523	WITHOUT_CLASSIFICATION	5.027568947637687E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999956886143484	WITHOUT_CLASSIFICATION	4.311385651602738E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999965469038438	WITHOUT_CLASSIFICATION	3.4530961563529057E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999961175668775	WITHOUT_CLASSIFICATION	3.882433122562352E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9985968324701313	WITHOUT_CLASSIFICATION	0.0014031675298686755	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999950590477877	WITHOUT_CLASSIFICATION	4.940952212292831E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999855641148967	WITHOUT_CLASSIFICATION	1.4435885103313504E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999917210509467	WITHOUT_CLASSIFICATION	8.278949053265633E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998006365634	WITHOUT_CLASSIFICATION	1.993634366406624E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999475961807083	WITHOUT_CLASSIFICATION	5.2403819291783944E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999177000471436	WITHOUT_CLASSIFICATION	8.22999528563674E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999917210509467	WITHOUT_CLASSIFICATION	8.278949053265633E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999903197999	WITHOUT_CLASSIFICATION	9.680200144127004E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999776969699	WITHOUT_CLASSIFICATION	2.2303030166260124E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999970422195902	WITHOUT_CLASSIFICATION	2.9577804097476453E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.999996201958029	WITHOUT_CLASSIFICATION	3.798041971150014E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999975997877076	WITHOUT_CLASSIFICATION	2.4002122922924593E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999939116878086	WITHOUT_CLASSIFICATION	6.0883121914456245E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999817666854433	WITHOUT_CLASSIFICATION	1.823331455678354E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999956374482318	WITHOUT_CLASSIFICATION	4.362551768210228E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999946811156134	WITHOUT_CLASSIFICATION	5.3188843865268705E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999848343015	WITHOUT_CLASSIFICATION	1.5165698505492944E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999990565149424	WITHOUT_CLASSIFICATION	9.434850575582093E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999998895896156	WITHOUT_CLASSIFICATION	1.1041038440267802E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999995183881239	WITHOUT_CLASSIFICATION	4.816118761005731E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999965469038438	WITHOUT_CLASSIFICATION	3.4530961563529057E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999946811156134	WITHOUT_CLASSIFICATION	5.3188843865268705E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999990565149424	WITHOUT_CLASSIFICATION	9.434850575582093E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999995183881239	WITHOUT_CLASSIFICATION	4.816118761005731E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999573530307	WITHOUT_CLASSIFICATION	4.2646969305444625E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999907580251499	WITHOUT_CLASSIFICATION	9.241974850050627E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999914053905	WITHOUT_CLASSIFICATION	8.594609501138713E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999936590496428	WITHOUT_CLASSIFICATION	6.340950357236138E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999967484940616	WITHOUT_CLASSIFICATION	3.2515059383482714E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999997467801881	WITHOUT_CLASSIFICATION	2.532198118774761E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999969207870049	WITHOUT_CLASSIFICATION	3.0792129951138665E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999992338600857	WITHOUT_CLASSIFICATION	7.661399143707943E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999973139041988	WITHOUT_CLASSIFICATION	2.6860958011722326E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999888503618	WITHOUT_CLASSIFICATION	1.1149638196097897E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993358745194	WITHOUT_CLASSIFICATION	6.641254805220969E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999989423204224	WITHOUT_CLASSIFICATION	1.0576795775091407E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999702636111	WITHOUT_CLASSIFICATION	2.9736388904831343E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998248531206	WITHOUT_CLASSIFICATION	1.7514687951370734E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999942952044972	WITHOUT_CLASSIFICATION	5.7047955027092495E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999963002016757	WITHOUT_CLASSIFICATION	3.6997983242154322E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999917551742878	WITHOUT_CLASSIFICATION	8.244825712185266E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999967656690717	WITHOUT_CLASSIFICATION	3.2343309281705946E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.999994709516054	WITHOUT_CLASSIFICATION	5.2904839460401235E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999946811156134	WITHOUT_CLASSIFICATION	5.3188843865268705E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997786539594	WITHOUT_CLASSIFICATION	2.2134604052742917E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998222990562	WITHOUT_CLASSIFICATION	1.777009438328149E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999345865764	WITHOUT_CLASSIFICATION	6.54134235582743E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.998434567570858	WITHOUT_CLASSIFICATION	0.0015654324291420297	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999993849314172	WITHOUT_CLASSIFICATION	6.150685828502928E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999995230178133	WITHOUT_CLASSIFICATION	4.769821867004453E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999974332473	WITHOUT_CLASSIFICATION	2.566752657406116E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999842791756	WITHOUT_CLASSIFICATION	1.5720824346122685E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999968196684895	WITHOUT_CLASSIFICATION	3.180331510350416E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999922460921323	WITHOUT_CLASSIFICATION	7.753907867656854E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999978650269801	WITHOUT_CLASSIFICATION	2.1349730198927502E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999933590260218	WITHOUT_CLASSIFICATION	6.6409739782633195E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999998951845646	WITHOUT_CLASSIFICATION	1.0481543543251567E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999835972939	WITHOUT_CLASSIFICATION	1.6402706145329086E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999228051124	WITHOUT_CLASSIFICATION	7.719488760046486E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999367611458	WITHOUT_CLASSIFICATION	6.323885406156147E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999963777326488	WITHOUT_CLASSIFICATION	3.6222673513014076E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998176865486	WITHOUT_CLASSIFICATION	1.823134514899895E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999484412937	WITHOUT_CLASSIFICATION	5.15587061594581E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999980130324031	WITHOUT_CLASSIFICATION	1.986967596912419E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998430433239	WITHOUT_CLASSIFICATION	1.5695667611280735E-7	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999983696951378	WITHOUT_CLASSIFICATION	1.6303048621627508E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997504738835	WITHOUT_CLASSIFICATION	2.4952611649920774E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999912146311373	WITHOUT_CLASSIFICATION	8.785368862751156E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999973013454433	WITHOUT_CLASSIFICATION	2.698654556787401E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999973013454433	WITHOUT_CLASSIFICATION	2.698654556787401E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999928641939355	WITHOUT_CLASSIFICATION	7.135806064520998E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999302943509	WITHOUT_CLASSIFICATION	6.970564921756941E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998278183811	WITHOUT_CLASSIFICATION	1.7218161888313634E-7	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995884050167	WITHOUT_CLASSIFICATION	4.115949833006895E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999962689223456	WITHOUT_CLASSIFICATION	3.7310776543319113E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999994858481761	WITHOUT_CLASSIFICATION	5.141518239078697E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998658431758	WITHOUT_CLASSIFICATION	1.3415682420621893E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999912712087236	WITHOUT_CLASSIFICATION	8.72879127653776E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999855210936135	WITHOUT_CLASSIFICATION	1.4478906386587546E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999982597913117	WITHOUT_CLASSIFICATION	1.7402086883283985E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999947886355685	WITHOUT_CLASSIFICATION	5.2113644315625095E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999999044442119	WITHOUT_CLASSIFICATION	9.555578805666618E-8	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999982570929216	WITHOUT_CLASSIFICATION	1.7429070783573235E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999997623114923	WITHOUT_CLASSIFICATION	2.376885076150317E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998463822293	WITHOUT_CLASSIFICATION	1.5361777068040667E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998278044697	WITHOUT_CLASSIFICATION	1.721955303834287E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999997641173252	WITHOUT_CLASSIFICATION	2.3588267489956077E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997423303862	WITHOUT_CLASSIFICATION	2.57669613809251E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999979499946194	WITHOUT_CLASSIFICATION	2.050005380574782E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999976029321035	WITHOUT_CLASSIFICATION	2.397067896541038E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999992837862178	WITHOUT_CLASSIFICATION	7.162137822473286E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999992837862178	WITHOUT_CLASSIFICATION	7.162137822473286E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999917870860395	WITHOUT_CLASSIFICATION	8.212913960473726E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999917870860395	WITHOUT_CLASSIFICATION	8.212913960473726E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997504738835	WITHOUT_CLASSIFICATION	2.4952611649920774E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999594207244	WITHOUT_CLASSIFICATION	4.057927558954461E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999910409977839	WITHOUT_CLASSIFICATION	8.959002216080736E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999486233157	WITHOUT_CLASSIFICATION	5.13766842978752E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999910409977839	WITHOUT_CLASSIFICATION	8.959002216080736E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999486233157	WITHOUT_CLASSIFICATION	5.13766842978752E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999962254267172	WITHOUT_CLASSIFICATION	3.774573282878091E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999033687270205	WITHOUT_CLASSIFICATION	9.663127297953849E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999575374273	WITHOUT_CLASSIFICATION	4.246257262240411E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999997375470394	WITHOUT_CLASSIFICATION	2.6245296059685246E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999959695578342	WITHOUT_CLASSIFICATION	4.030442165819725E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999963987324884	WITHOUT_CLASSIFICATION	3.601267511594638E-5	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996784542433	WITHOUT_CLASSIFICATION	3.2154575672832295E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999966975664929	WITHOUT_CLASSIFICATION	3.302433507210423E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999967148024271	WITHOUT_CLASSIFICATION	3.2851975727841314E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999911993138	WITHOUT_CLASSIFICATION	8.800686202323851E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999994927000764	WITHOUT_CLASSIFICATION	5.072999236149683E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999962063664	WITHOUT_CLASSIFICATION	3.793633670175151E-9	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998218661191	WITHOUT_CLASSIFICATION	1.781338809644926E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.99999304874197	WITHOUT_CLASSIFICATION	6.951258030020935E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999925990924202	WITHOUT_CLASSIFICATION	7.400907579790374E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997306368521696	WITHOUT_CLASSIFICATION	2.6936314783042726E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997306368521696	WITHOUT_CLASSIFICATION	2.6936314783042726E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999905686515	WITHOUT_CLASSIFICATION	9.43134849984552E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999962254267172	WITHOUT_CLASSIFICATION	3.774573282878091E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999996534344965	WITHOUT_CLASSIFICATION	3.4656550356143954E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999942938523454	WITHOUT_CLASSIFICATION	5.706147654610796E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999996250174236	WITHOUT_CLASSIFICATION	3.749825765338156E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999940688454771	WITHOUT_CLASSIFICATION	5.931154522796327E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998217842367692	WITHOUT_CLASSIFICATION	1.7821576323071164E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999962254267172	WITHOUT_CLASSIFICATION	3.774573282878091E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999940688454771	WITHOUT_CLASSIFICATION	5.931154522796327E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998217842367692	WITHOUT_CLASSIFICATION	1.7821576323071164E-4	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999806534491728	WITHOUT_CLASSIFICATION	1.9346550827222692E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999967774559135	WITHOUT_CLASSIFICATION	3.2225440865135367E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.99999991773276	WITHOUT_CLASSIFICATION	8.226723997074448E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999962254267172	WITHOUT_CLASSIFICATION	3.774573282878091E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999962254267172	WITHOUT_CLASSIFICATION	3.774573282878091E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.999999034538412	WITHOUT_CLASSIFICATION	9.654615880111274E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999993845039168	WITHOUT_CLASSIFICATION	6.154960832249414E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999986849437236	WITHOUT_CLASSIFICATION	1.3150562764867292E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999039217242	WITHOUT_CLASSIFICATION	9.607827584481745E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999995544127714	WITHOUT_CLASSIFICATION	4.4558722855894885E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998545896013	WITHOUT_CLASSIFICATION	1.4541039868420007E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999993859559592	WITHOUT_CLASSIFICATION	6.140440407080694E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999067396605	WITHOUT_CLASSIFICATION	9.326033948479656E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999590145014	WITHOUT_CLASSIFICATION	4.098549861280284E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.999997744180287	WITHOUT_CLASSIFICATION	2.255819713076242E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998170722966	WITHOUT_CLASSIFICATION	1.8292770351584864E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999999135132259	WITHOUT_CLASSIFICATION	8.648677409961205E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999984911089915	WITHOUT_CLASSIFICATION	1.5088910085275381E-6	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999995584598199	WITHOUT_CLASSIFICATION	4.4154018010554596E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997570498655	WITHOUT_CLASSIFICATION	2.429501344588557E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999863403533711	WITHOUT_CLASSIFICATION	1.3659646628819242E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988202119123	WITHOUT_CLASSIFICATION	1.179788087630631E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999963326081402	WITHOUT_CLASSIFICATION	3.667391859791394E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999885971057857	WITHOUT_CLASSIFICATION	1.1402894214213405E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998331348099	WITHOUT_CLASSIFICATION	1.6686519014646002E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999864049015477	WITHOUT_CLASSIFICATION	1.359509845241315E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999862808779789	WITHOUT_CLASSIFICATION	1.3719122021162606E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999862808779789	WITHOUT_CLASSIFICATION	1.3719122021162606E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988202119123	WITHOUT_CLASSIFICATION	1.179788087630631E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996717323129808	WITHOUT_CLASSIFICATION	3.282676870191243E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999607894946025	WITHOUT_CLASSIFICATION	3.9210505397524265E-5	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998067610581907	WITHOUT_CLASSIFICATION	1.9323894180924914E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999966495377117	WITHOUT_CLASSIFICATION	3.3504622882254276E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999895908878585	WITHOUT_CLASSIFICATION	1.0409112141331126E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998455398276	WITHOUT_CLASSIFICATION	1.5446017243989972E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999999965340164	WITHOUT_CLASSIFICATION	3.46598360569044E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999987860363911	WITHOUT_CLASSIFICATION	1.213963608750385E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999797399507	WITHOUT_CLASSIFICATION	2.026004922065879E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999167022289	WITHOUT_CLASSIFICATION	8.329777108920893E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996159750829	WITHOUT_CLASSIFICATION	3.840249171424003E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999901846420577	WITHOUT_CLASSIFICATION	9.815357942387166E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999798252974339	WITHOUT_CLASSIFICATION	2.0174702566059502E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999892490464	WITHOUT_CLASSIFICATION	1.0750953624557957E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999559065768	WITHOUT_CLASSIFICATION	4.409342310133211E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999985365562781	WITHOUT_CLASSIFICATION	1.463443721790873E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999913777885	WITHOUT_CLASSIFICATION	8.622211438501215E-9	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999968252512763	WITHOUT_CLASSIFICATION	3.174748723672441E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998522512369	WITHOUT_CLASSIFICATION	1.477487630932656E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999756578191	WITHOUT_CLASSIFICATION	2.4342180969227318E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999998660505092	WITHOUT_CLASSIFICATION	1.3394949075473575E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999503634391	WITHOUT_CLASSIFICATION	4.963656086129627E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997653322539	WITHOUT_CLASSIFICATION	2.3466774618020337E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977924362244	WITHOUT_CLASSIFICATION	2.2075637755896974E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996716261333	WITHOUT_CLASSIFICATION	3.2837386656700064E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995304944417	WITHOUT_CLASSIFICATION	4.695055583378172E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998487652987	WITHOUT_CLASSIFICATION	1.512347012923335E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991303583059	WITHOUT_CLASSIFICATION	8.696416942260799E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993539164176	WITHOUT_CLASSIFICATION	6.46083582442818E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999821891725	WITHOUT_CLASSIFICATION	1.7810827505295768E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999997520857175	WITHOUT_CLASSIFICATION	2.4791428249755025E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999287954651	WITHOUT_CLASSIFICATION	7.120453491935936E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994673251497	WITHOUT_CLASSIFICATION	5.326748504294638E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999173823457	WITHOUT_CLASSIFICATION	8.261765430559097E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999015808415	WITHOUT_CLASSIFICATION	9.841915848371082E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985196364884	WITHOUT_CLASSIFICATION	1.4803635116382916E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995825802758	WITHOUT_CLASSIFICATION	4.174197242011488E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997650463707	WITHOUT_CLASSIFICATION	2.3495362944746546E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997696621985	WITHOUT_CLASSIFICATION	2.3033780142234807E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983866407451	WITHOUT_CLASSIFICATION	1.613359254857783E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999955120453073	WITHOUT_CLASSIFICATION	4.487954692682733E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998122426781	WITHOUT_CLASSIFICATION	1.877573218524212E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999852235749566	WITHOUT_CLASSIFICATION	1.4776425043533238E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999993149902388	WITHOUT_CLASSIFICATION	6.850097613377261E-7	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999146765449	WITHOUT_CLASSIFICATION	8.532345500198843E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999901578819439	WITHOUT_CLASSIFICATION	9.842118056099522E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999949942452028	WITHOUT_CLASSIFICATION	5.005754797142449E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999982348966766	WITHOUT_CLASSIFICATION	1.7651033233864934E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999985254480395	WITHOUT_CLASSIFICATION	1.4745519605863205E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999972901753253	WITHOUT_CLASSIFICATION	2.7098246746640647E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999966758054707	WITHOUT_CLASSIFICATION	3.324194529297924E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999907455355495	WITHOUT_CLASSIFICATION	9.254464450639594E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999966245379358	WITHOUT_CLASSIFICATION	3.375462064265163E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999968093483769	WITHOUT_CLASSIFICATION	3.1906516231986756E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999991151689425	WITHOUT_CLASSIFICATION	8.848310575090406E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999993919603027	WITHOUT_CLASSIFICATION	6.080396971928643E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997228400259	WITHOUT_CLASSIFICATION	2.7715997403325566E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999926940104429	WITHOUT_CLASSIFICATION	7.3059895571955445E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999934864847	WITHOUT_CLASSIFICATION	6.51351524746239E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998307699951	WITHOUT_CLASSIFICATION	1.6923000496688922E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997947428874	WITHOUT_CLASSIFICATION	2.0525711270645645E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999285602098	WITHOUT_CLASSIFICATION	7.143979019681056E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997704030175	WITHOUT_CLASSIFICATION	2.2959698239676945E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999963369897319	WITHOUT_CLASSIFICATION	3.663010268180505E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999972744174	WITHOUT_CLASSIFICATION	2.725582605805454E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999531471891	WITHOUT_CLASSIFICATION	4.6852810820781095E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999170593914	WITHOUT_CLASSIFICATION	8.294060856191415E-8	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972643195554	WITHOUT_CLASSIFICATION	2.7356804446027513E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999821900596	WITHOUT_CLASSIFICATION	1.7809940362935783E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999809097002479	WITHOUT_CLASSIFICATION	1.9090299752105223E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999520733712	WITHOUT_CLASSIFICATION	4.792662881891471E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999960983734	WITHOUT_CLASSIFICATION	3.901626596511816E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999945197943596	WITHOUT_CLASSIFICATION	5.4802056404254365E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999132863593	WITHOUT_CLASSIFICATION	8.671364059732637E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999997476613786	WITHOUT_CLASSIFICATION	2.5233862139060604E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999973658707448	WITHOUT_CLASSIFICATION	2.6341292551120856E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999901578819439	WITHOUT_CLASSIFICATION	9.842118056099522E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999994072543023	WITHOUT_CLASSIFICATION	5.927456977883013E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999790346128	WITHOUT_CLASSIFICATION	2.0965387237295338E-8	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999589803443	WITHOUT_CLASSIFICATION	4.1019655686479346E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992512627771	WITHOUT_CLASSIFICATION	7.487372229359227E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999833783939	WITHOUT_CLASSIFICATION	1.6621606020171992E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999995505956316	WITHOUT_CLASSIFICATION	4.4940436844727305E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999805896701754	WITHOUT_CLASSIFICATION	1.9410329824502656E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999996263187396	WITHOUT_CLASSIFICATION	3.7368126041671635E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999234494399	WITHOUT_CLASSIFICATION	7.655056014400162E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999628058538	WITHOUT_CLASSIFICATION	3.71941461597009E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999839774052	WITHOUT_CLASSIFICATION	1.6022594799346713E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999870145838	WITHOUT_CLASSIFICATION	1.298541605622517E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999276556446	WITHOUT_CLASSIFICATION	7.234435542504932E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999861925941	WITHOUT_CLASSIFICATION	1.3807405949524572E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999700610652216	WITHOUT_CLASSIFICATION	2.993893477853516E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999992044121845	WITHOUT_CLASSIFICATION	7.955878155093274E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999972241537503	WITHOUT_CLASSIFICATION	2.7758462497812288E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999963095539911	WITHOUT_CLASSIFICATION	3.6904460089355274E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998526724703	WITHOUT_CLASSIFICATION	1.4732752967394885E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999912066050384	WITHOUT_CLASSIFICATION	8.793394961651702E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999904351055	WITHOUT_CLASSIFICATION	9.564894580155839E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999986082088166	WITHOUT_CLASSIFICATION	1.391791183415848E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999986146589557	WITHOUT_CLASSIFICATION	1.3853410443272737E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998974310323	WITHOUT_CLASSIFICATION	1.0256896764954517E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999992947892757	WITHOUT_CLASSIFICATION	7.052107242419039E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.999999140049163	WITHOUT_CLASSIFICATION	8.599508370416666E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9995386858320455	WITHOUT_CLASSIFICATION	4.6131416795452225E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999995065279952	WITHOUT_CLASSIFICATION	4.934720047620641E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999990154465048	WITHOUT_CLASSIFICATION	9.845534950947818E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994236636407	WITHOUT_CLASSIFICATION	5.763363593348528E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999901578819439	WITHOUT_CLASSIFICATION	9.842118056099522E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999990869811783	WITHOUT_CLASSIFICATION	9.130188217926846E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999996523335775	WITHOUT_CLASSIFICATION	3.4766642251304005E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999812392904751	WITHOUT_CLASSIFICATION	1.8760709524901165E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999901578819439	WITHOUT_CLASSIFICATION	9.842118056099522E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999988739732422	WITHOUT_CLASSIFICATION	1.1260267578654969E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999904351055	WITHOUT_CLASSIFICATION	9.564894580155839E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999958830961808	WITHOUT_CLASSIFICATION	4.1169038192323E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998932426705925	WITHOUT_CLASSIFICATION	1.0675732940743717E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999985773229018	WITHOUT_CLASSIFICATION	1.4226770981834653E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999628058538	WITHOUT_CLASSIFICATION	3.71941461597009E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999839774052	WITHOUT_CLASSIFICATION	1.6022594799346713E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999870145838	WITHOUT_CLASSIFICATION	1.298541605622517E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999970180201107	WITHOUT_CLASSIFICATION	2.981979889339497E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999991700347602	WITHOUT_CLASSIFICATION	8.299652398401032E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999986434176441	WITHOUT_CLASSIFICATION	1.3565823558678188E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997276160166	WITHOUT_CLASSIFICATION	2.723839833204121E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999994171569213	WITHOUT_CLASSIFICATION	5.828430786330732E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999901578819439	WITHOUT_CLASSIFICATION	9.842118056099522E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999276556446	WITHOUT_CLASSIFICATION	7.234435542504932E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999861925941	WITHOUT_CLASSIFICATION	1.3807405949524572E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999418390888	WITHOUT_CLASSIFICATION	5.8160911115116266E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999680700213	WITHOUT_CLASSIFICATION	3.192997875773716E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999996219563311	WITHOUT_CLASSIFICATION	3.780436689228911E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999979521700813	WITHOUT_CLASSIFICATION	2.0478299187288198E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999983870103365	WITHOUT_CLASSIFICATION	1.612989663475985E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999488410845	WITHOUT_CLASSIFICATION	5.115891554527721E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983866407451	WITHOUT_CLASSIFICATION	1.613359254857783E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999970172933865	WITHOUT_CLASSIFICATION	2.9827066135956454E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999881181635497	WITHOUT_CLASSIFICATION	1.1881836450330576E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999988061871311	WITHOUT_CLASSIFICATION	1.1938128688011881E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999914609761	WITHOUT_CLASSIFICATION	8.539024002482871E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999441071825	WITHOUT_CLASSIFICATION	5.589281751308032E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998487652987	WITHOUT_CLASSIFICATION	1.512347012923335E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991303583059	WITHOUT_CLASSIFICATION	8.696416942260799E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999173823457	WITHOUT_CLASSIFICATION	8.261765430559097E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999441071825	WITHOUT_CLASSIFICATION	5.589281751308032E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999459712816	WITHOUT_CLASSIFICATION	5.40287183993736E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999753911044	WITHOUT_CLASSIFICATION	2.4608895573377876E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996954630151	WITHOUT_CLASSIFICATION	3.045369849349908E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990793774791	WITHOUT_CLASSIFICATION	9.206225207630377E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999996256041404	WITHOUT_CLASSIFICATION	3.743958596240688E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.999971354193257	WITHOUT_CLASSIFICATION	2.8645806742967383E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999015808415	WITHOUT_CLASSIFICATION	9.841915848371082E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997650463707	WITHOUT_CLASSIFICATION	2.3495362944746546E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999960983734	WITHOUT_CLASSIFICATION	3.901626596511816E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999984027499644	WITHOUT_CLASSIFICATION	1.5972500355683628E-6	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999545486837	WITHOUT_CLASSIFICATION	4.545131630275389E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999597468263	WITHOUT_CLASSIFICATION	4.02531736538342E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999923960076801	WITHOUT_CLASSIFICATION	7.603992319974519E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.99999971165218	WITHOUT_CLASSIFICATION	2.8834781999502775E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99999974913778	WITHOUT_CLASSIFICATION	2.508622200429242E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999969648422714	WITHOUT_CLASSIFICATION	3.0351577285585557E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999797399507	WITHOUT_CLASSIFICATION	2.026004922065879E-8	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999651946775	WITHOUT_CLASSIFICATION	3.4805322516577915E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999149465455	WITHOUT_CLASSIFICATION	8.505345449089477E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999999024743924	WITHOUT_CLASSIFICATION	9.752560759321886E-8	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999987534860176	WITHOUT_CLASSIFICATION	1.246513982311762E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999775956905	WITHOUT_CLASSIFICATION	2.2404309584277867E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999959533464103	WITHOUT_CLASSIFICATION	4.0466535896435306E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997797871127	WITHOUT_CLASSIFICATION	2.202128873143638E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999122146106	WITHOUT_CLASSIFICATION	8.778538947999125E-8	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997665179681	WITHOUT_CLASSIFICATION	2.3348203196438706E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999995919847158	WITHOUT_CLASSIFICATION	4.0801528418977404E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999786271620839	WITHOUT_CLASSIFICATION	2.137283791615663E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995634331641	WITHOUT_CLASSIFICATION	4.365668359257431E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995923252557	WITHOUT_CLASSIFICATION	4.076747442945432E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999900696033	WITHOUT_CLASSIFICATION	9.930396709286156E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998746189839	WITHOUT_CLASSIFICATION	1.2538101605517362E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999997299615349	WITHOUT_CLASSIFICATION	2.700384650871966E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999995855503186	WITHOUT_CLASSIFICATION	4.1444968129598874E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998963673972	WITHOUT_CLASSIFICATION	1.0363260280624622E-7	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999992429763089	WITHOUT_CLASSIFICATION	7.5702369106068E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995795533964	WITHOUT_CLASSIFICATION	4.204466036087739E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997426721645	WITHOUT_CLASSIFICATION	2.5732783550876216E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999999804401729	WITHOUT_CLASSIFICATION	1.9559827095235612E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999958280605975	WITHOUT_CLASSIFICATION	4.171939402485115E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998260215441	WITHOUT_CLASSIFICATION	1.7397845592642196E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999385582218	WITHOUT_CLASSIFICATION	6.144177821809417E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999774370576712	WITHOUT_CLASSIFICATION	2.2562942328858362E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999684164379286	WITHOUT_CLASSIFICATION	3.158356207148724E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999979329013975	WITHOUT_CLASSIFICATION	2.067098602496737E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999118269157	WITHOUT_CLASSIFICATION	8.817308427684952E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999979891726515	WITHOUT_CLASSIFICATION	2.0108273486091954E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999318849911	WITHOUT_CLASSIFICATION	6.811500881623198E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999953824409	WITHOUT_CLASSIFICATION	4.617559052988772E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999987331934969	WITHOUT_CLASSIFICATION	1.2668065030673498E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999802681029007	WITHOUT_CLASSIFICATION	1.973189709921138E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999291620695	WITHOUT_CLASSIFICATION	7.083793057796303E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999991286388286	WITHOUT_CLASSIFICATION	8.713611713991972E-6	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999995084525162	WITHOUT_CLASSIFICATION	4.915474837632641E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999986465707307	WITHOUT_CLASSIFICATION	1.353429269299915E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999983606073108	WITHOUT_CLASSIFICATION	1.6393926891350179E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998299519398676	WITHOUT_CLASSIFICATION	1.7004806013242067E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999638768811367	WITHOUT_CLASSIFICATION	3.612311886327051E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999187180131	WITHOUT_CLASSIFICATION	8.12819868924277E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999981870538946	WITHOUT_CLASSIFICATION	1.812946105311991E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.99999995377167	WITHOUT_CLASSIFICATION	4.622833004949711E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999992127599133	WITHOUT_CLASSIFICATION	7.872400867064869E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999992914449267	WITHOUT_CLASSIFICATION	7.085550732607529E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999087622696	WITHOUT_CLASSIFICATION	9.123773030620173E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999593175908	WITHOUT_CLASSIFICATION	4.0682409237872304E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999992395027807	WITHOUT_CLASSIFICATION	7.60497219344865E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999999815592218	WITHOUT_CLASSIFICATION	1.844077821506806E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999655814892	WITHOUT_CLASSIFICATION	3.441851074733284E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999999724820391	WITHOUT_CLASSIFICATION	2.751796089196469E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999715396191	WITHOUT_CLASSIFICATION	2.846038090516335E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999759241	WITHOUT_CLASSIFICATION	2.407590008851081E-8	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999993427553158	WITHOUT_CLASSIFICATION	6.572446843024147E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999995806640495	WITHOUT_CLASSIFICATION	4.193359504845335E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999999617197277	WITHOUT_CLASSIFICATION	3.8280272289798784E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998062704253	WITHOUT_CLASSIFICATION	1.9372957466946881E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999989200802251	WITHOUT_CLASSIFICATION	1.0799197749564192E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996732809986	WITHOUT_CLASSIFICATION	3.2671900146140683E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999996897471157	WITHOUT_CLASSIFICATION	3.102528843057958E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999960217699426	WITHOUT_CLASSIFICATION	3.978230057445674E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999996225170552	WITHOUT_CLASSIFICATION	3.7748294480342436E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999979511338845	WITHOUT_CLASSIFICATION	2.0488661154775106E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999952905410844	WITHOUT_CLASSIFICATION	4.709458915646547E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999675854849811	WITHOUT_CLASSIFICATION	3.2414515019000976E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997114355094	WITHOUT_CLASSIFICATION	2.8856449057202773E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999995024442855	WITHOUT_CLASSIFICATION	4.975557144905404E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999932978115181	WITHOUT_CLASSIFICATION	6.7021884818586915E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999929663994924	WITHOUT_CLASSIFICATION	7.033600507531059E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999995249087725	WITHOUT_CLASSIFICATION	4.75091227392368E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999210277864	WITHOUT_CLASSIFICATION	7.89722136105247E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999957606301036	WITHOUT_CLASSIFICATION	4.2393698963207516E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998593647724	WITHOUT_CLASSIFICATION	1.4063522752788445E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999994756824709	WITHOUT_CLASSIFICATION	5.243175290976174E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999881151969298	WITHOUT_CLASSIFICATION	1.1884803070254915E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999981857515926	WITHOUT_CLASSIFICATION	1.8142484073177903E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997237125044062	WITHOUT_CLASSIFICATION	2.762874955937729E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999929857492327	WITHOUT_CLASSIFICATION	7.014250767374877E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999958457238436	WITHOUT_CLASSIFICATION	4.154276156413722E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999961397058492	WITHOUT_CLASSIFICATION	3.860294150777108E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967798953584	WITHOUT_CLASSIFICATION	3.2201046416238653E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997357396697	WITHOUT_CLASSIFICATION	2.642603302559492E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999899476504388	WITHOUT_CLASSIFICATION	1.0052349561107683E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999942947074978	WITHOUT_CLASSIFICATION	5.705292502232062E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999886472831617	WITHOUT_CLASSIFICATION	1.1352716838266913E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999991251507935	WITHOUT_CLASSIFICATION	8.748492063712513E-7	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999886706905412	WITHOUT_CLASSIFICATION	1.132930945877275E-5	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999999625860071	WITHOUT_CLASSIFICATION	3.741399290467424E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999999524826	WITHOUT_CLASSIFICATION	4.751739566523011E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999984292685007	WITHOUT_CLASSIFICATION	1.5707314993465496E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999855942555088	WITHOUT_CLASSIFICATION	1.4405744491259675E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999948505885538	WITHOUT_CLASSIFICATION	5.149411446252676E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999984292685007	WITHOUT_CLASSIFICATION	1.5707314993465496E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999546088465	WITHOUT_CLASSIFICATION	4.5391153507637376E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997131663516	WITHOUT_CLASSIFICATION	2.868336484271489E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999965116285865	WITHOUT_CLASSIFICATION	3.4883714134481006E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999941976444255	WITHOUT_CLASSIFICATION	5.802355574480865E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999567843402	WITHOUT_CLASSIFICATION	4.321565984623779E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999910337653	WITHOUT_CLASSIFICATION	8.966234704872009E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999578760082686	WITHOUT_CLASSIFICATION	4.212399173129599E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999676188248	WITHOUT_CLASSIFICATION	3.2381175193277045E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999391174572	WITHOUT_CLASSIFICATION	6.088254280777673E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999961030505401	WITHOUT_CLASSIFICATION	3.8969494599679425E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999821067052	WITHOUT_CLASSIFICATION	1.7893294811999242E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999999811226224	WITHOUT_CLASSIFICATION	1.8877377609538388E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999993481209232	WITHOUT_CLASSIFICATION	6.518790768186785E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999919976058468	WITHOUT_CLASSIFICATION	8.002394153273287E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998110942522	WITHOUT_CLASSIFICATION	1.8890574791502973E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999988798327454	WITHOUT_CLASSIFICATION	1.120167254553948E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999990663483956	WITHOUT_CLASSIFICATION	9.336516044000587E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999990663483956	WITHOUT_CLASSIFICATION	9.336516044000587E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999968458638	WITHOUT_CLASSIFICATION	3.15413619256504E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999766038495882	WITHOUT_CLASSIFICATION	2.3396150411752922E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999824668129534	WITHOUT_CLASSIFICATION	1.7533187046489662E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999806037792208	WITHOUT_CLASSIFICATION	1.9396220779147086E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999253974209	WITHOUT_CLASSIFICATION	7.460257914009961E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999430422001118	WITHOUT_CLASSIFICATION	5.695779988823586E-5	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999947045843778	WITHOUT_CLASSIFICATION	5.295415622181653E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999944273228	WITHOUT_CLASSIFICATION	5.5726772563243775E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999992101172486	WITHOUT_CLASSIFICATION	7.89882751449311E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.99999917499353	WITHOUT_CLASSIFICATION	8.250064698949049E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999998640869557	WITHOUT_CLASSIFICATION	1.3591304429707785E-6	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999946857628	WITHOUT_CLASSIFICATION	5.314237273864911E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998336161223	WITHOUT_CLASSIFICATION	1.6638387766096177E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999995105187085	WITHOUT_CLASSIFICATION	4.894812914720845E-7	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999904811829	WITHOUT_CLASSIFICATION	9.518817120510984E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999959533464103	WITHOUT_CLASSIFICATION	4.0466535896435306E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999836969796828	WITHOUT_CLASSIFICATION	1.6303020317203865E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999073050423	WITHOUT_CLASSIFICATION	9.269495768050027E-8	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999985709499501	WITHOUT_CLASSIFICATION	1.4290500498067133E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9969603810921586	WITHOUT_CLASSIFICATION	0.00303961890784153	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999608480826	WITHOUT_CLASSIFICATION	3.915191735946858E-8	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999952152070547	WITHOUT_CLASSIFICATION	4.7847929453821385E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999997579331624	WITHOUT_CLASSIFICATION	2.420668375471053E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999725808568	WITHOUT_CLASSIFICATION	2.741914320279582E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999933680788	WITHOUT_CLASSIFICATION	6.631921173706507E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999942009744	WITHOUT_CLASSIFICATION	5.7990256399840185E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999989616894244	WITHOUT_CLASSIFICATION	1.038310575567861E-6	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999460985819	WITHOUT_CLASSIFICATION	5.390141812491363E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999941434425645	WITHOUT_CLASSIFICATION	5.856557435384807E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999970440566822	WITHOUT_CLASSIFICATION	2.955943317866418E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999995470635306	WITHOUT_CLASSIFICATION	4.529364695210098E-7	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.99999942758969	WITHOUT_CLASSIFICATION	5.724103099332885E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999866521975876	WITHOUT_CLASSIFICATION	1.3347802412317815E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999947438633708	WITHOUT_CLASSIFICATION	5.256136629166039E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999984749364548	WITHOUT_CLASSIFICATION	1.5250635452165493E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997482056839	WITHOUT_CLASSIFICATION	2.517943160827844E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999975506705648	WITHOUT_CLASSIFICATION	2.449329435216561E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999992039833877	WITHOUT_CLASSIFICATION	7.960166122556183E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996179363547	WITHOUT_CLASSIFICATION	3.820636452641795E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999999524509566	WITHOUT_CLASSIFICATION	4.754904339387365E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999969380103638	WITHOUT_CLASSIFICATION	3.0619896362524494E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999990600085934	WITHOUT_CLASSIFICATION	9.399914066101072E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999803020588	WITHOUT_CLASSIFICATION	1.9697941185456616E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999999900608131	WITHOUT_CLASSIFICATION	9.939186890943031E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999991768454722	WITHOUT_CLASSIFICATION	8.23154527857778E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999996902304177	WITHOUT_CLASSIFICATION	3.097695823036667E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995640753256	WITHOUT_CLASSIFICATION	4.3592467440740735E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999738062512	WITHOUT_CLASSIFICATION	2.619374880580965E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996113251752	WITHOUT_CLASSIFICATION	3.8867482473586895E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999486885125	WITHOUT_CLASSIFICATION	5.131148736752771E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999970427273	WITHOUT_CLASSIFICATION	2.957272698019528E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997615976154	WITHOUT_CLASSIFICATION	2.3840238446577752E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999885002891	WITHOUT_CLASSIFICATION	1.1499710801869277E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996055274496	WITHOUT_CLASSIFICATION	3.9447255034895306E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994531043201	WITHOUT_CLASSIFICATION	5.468956798272444E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996055274496	WITHOUT_CLASSIFICATION	3.9447255034895306E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993920923543	WITHOUT_CLASSIFICATION	6.079076457324658E-7	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999997962580595	WITHOUT_CLASSIFICATION	2.0374194057896933E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999991398652559	WITHOUT_CLASSIFICATION	8.601347442294631E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998108803423	WITHOUT_CLASSIFICATION	1.8911965775140437E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999970701092222	WITHOUT_CLASSIFICATION	2.929890777767452E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999750691212641	WITHOUT_CLASSIFICATION	2.49308787359734E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998796648424	WITHOUT_CLASSIFICATION	1.2033515754533282E-7	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999997602692217	WITHOUT_CLASSIFICATION	2.3973077826998604E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997346566806	WITHOUT_CLASSIFICATION	2.6534331944493496E-7	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999767459204334	WITHOUT_CLASSIFICATION	2.3254079566517493E-5	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999810685113	WITHOUT_CLASSIFICATION	1.8931488743931755E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999779122365	WITHOUT_CLASSIFICATION	2.2087763406938113E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999933426447882	WITHOUT_CLASSIFICATION	6.657355211698562E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999903931090584	WITHOUT_CLASSIFICATION	9.60689094162504E-6	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999998906912522	WITHOUT_CLASSIFICATION	1.0930874780652165E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999934948772	WITHOUT_CLASSIFICATION	6.5051227490075235E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999725852944186	WITHOUT_CLASSIFICATION	2.7414705581497308E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999725852944186	WITHOUT_CLASSIFICATION	2.7414705581497308E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999983671130147	WITHOUT_CLASSIFICATION	1.6328869852221282E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999995895629282	WITHOUT_CLASSIFICATION	4.104370717981377E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999809548714	WITHOUT_CLASSIFICATION	1.904512857286378E-8	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998361189586	WITHOUT_CLASSIFICATION	1.6388104135506324E-7	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999995098291348	WITHOUT_CLASSIFICATION	4.901708652228964E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999968973387681	WITHOUT_CLASSIFICATION	3.1026612319633564E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999974229581625	WITHOUT_CLASSIFICATION	2.5770418373991953E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999939885449096	WITHOUT_CLASSIFICATION	6.011455090360345E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999994041456673	WITHOUT_CLASSIFICATION	5.958543326211632E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999913535498	WITHOUT_CLASSIFICATION	8.646450211657969E-9	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998717358987	WITHOUT_CLASSIFICATION	1.2826410134790426E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999996764835262	WITHOUT_CLASSIFICATION	3.2351647391381805E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999558737562	WITHOUT_CLASSIFICATION	4.412624372873648E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999995075774294	WITHOUT_CLASSIFICATION	4.924225705208674E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997435208938	WITHOUT_CLASSIFICATION	2.5647910618017954E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998708709629	WITHOUT_CLASSIFICATION	1.2912903719519394E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999998653681184	WITHOUT_CLASSIFICATION	1.3463188156599096E-7	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999965125996697	WITHOUT_CLASSIFICATION	3.4874003303520286E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999998066911417	WITHOUT_CLASSIFICATION	1.933088582442578E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999996034465	WITHOUT_CLASSIFICATION	3.965534664831378E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997661906762	WITHOUT_CLASSIFICATION	2.3380932383869916E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999465537537	WITHOUT_CLASSIFICATION	5.344624617669301E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999805371725	WITHOUT_CLASSIFICATION	1.9462827499994312E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999908269567	WITHOUT_CLASSIFICATION	9.173043436125998E-9	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999984535540896	WITHOUT_CLASSIFICATION	1.5464459104543508E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999995381451389	WITHOUT_CLASSIFICATION	4.6185486119368173E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999990891249002	WITHOUT_CLASSIFICATION	9.108750997820344E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999960798204884	WITHOUT_CLASSIFICATION	3.920179511651833E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999895112272028	WITHOUT_CLASSIFICATION	1.048877279712137E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999980880781609	WITHOUT_CLASSIFICATION	1.9119218390275133E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999979636605208	WITHOUT_CLASSIFICATION	2.0363394791977783E-5	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999996960496422	WITHOUT_CLASSIFICATION	3.039503578097047E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999294122706412	WITHOUT_CLASSIFICATION	7.058772935876237E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999912300523263	WITHOUT_CLASSIFICATION	8.769947673645227E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999986817979238	WITHOUT_CLASSIFICATION	1.3182020761087745E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999636863032	WITHOUT_CLASSIFICATION	3.631369692651334E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999705712713	WITHOUT_CLASSIFICATION	2.9428728737745932E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999968544948423	WITHOUT_CLASSIFICATION	3.145505157783596E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999633349632	WITHOUT_CLASSIFICATION	3.666503676643722E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999058693313	WITHOUT_CLASSIFICATION	9.413066872266678E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999611283901	WITHOUT_CLASSIFICATION	3.8871609981528243E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981772126977	WITHOUT_CLASSIFICATION	1.8227873023108457E-6	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999906339144436	WITHOUT_CLASSIFICATION	9.366085556319977E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999539640371	WITHOUT_CLASSIFICATION	4.603596291451097E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999999998904788	WITHOUT_CLASSIFICATION	1.0952121078357227E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999586265151	WITHOUT_CLASSIFICATION	4.1373484919364166E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999998573918275	WITHOUT_CLASSIFICATION	1.4260817242405438E-7	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999640651391	WITHOUT_CLASSIFICATION	3.593486082507575E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999999154330023	WITHOUT_CLASSIFICATION	8.45669976677315E-8	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999960745439409	WITHOUT_CLASSIFICATION	3.92545605906419E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977257463092	WITHOUT_CLASSIFICATION	2.2742536907238645E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999929770912757	WITHOUT_CLASSIFICATION	7.022908724312796E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999996090855264	WITHOUT_CLASSIFICATION	3.909144736071181E-6	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999984029470009	WITHOUT_CLASSIFICATION	1.5970529990813054E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999936807331355	WITHOUT_CLASSIFICATION	6.319266864471373E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999988739732422	WITHOUT_CLASSIFICATION	1.1260267578654969E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999988739732422	WITHOUT_CLASSIFICATION	1.1260267578654969E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999065285900514	WITHOUT_CLASSIFICATION	9.347140994867432E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999950250633179	WITHOUT_CLASSIFICATION	4.974936682106574E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999999879549432	WITHOUT_CLASSIFICATION	1.2045056803086947E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999392995199	WITHOUT_CLASSIFICATION	6.070048016232776E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999972504541	WITHOUT_CLASSIFICATION	2.7495459059954785E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997905589151	WITHOUT_CLASSIFICATION	2.0944108484054853E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999201342306	WITHOUT_CLASSIFICATION	7.986576947148362E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999993718090886	WITHOUT_CLASSIFICATION	6.281909113493294E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999918439303414	WITHOUT_CLASSIFICATION	8.156069658602569E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999131493036	WITHOUT_CLASSIFICATION	8.685069635487833E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999891498806563	WITHOUT_CLASSIFICATION	1.0850119343707784E-5	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999995269945664	WITHOUT_CLASSIFICATION	4.730054335728934E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999763482483685	WITHOUT_CLASSIFICATION	2.3651751631469136E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999675326803	WITHOUT_CLASSIFICATION	3.2467319729554574E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999998744614925	WITHOUT_CLASSIFICATION	1.2553850749670532E-6	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999958751013506	WITHOUT_CLASSIFICATION	4.124898649392146E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999956050272	WITHOUT_CLASSIFICATION	4.394972839281016E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999931139208876	WITHOUT_CLASSIFICATION	6.886079112371305E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999980832065466	WITHOUT_CLASSIFICATION	1.9167934534479562E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999991380242105	WITHOUT_CLASSIFICATION	8.619757894306301E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999997476453208	WITHOUT_CLASSIFICATION	2.5235467912336557E-7	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999988885696208	WITHOUT_CLASSIFICATION	1.1114303791652469E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999709680575779	WITHOUT_CLASSIFICATION	2.90319424220257E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999999984236218	WITHOUT_CLASSIFICATION	1.5763781920769794E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999997824363938	WITHOUT_CLASSIFICATION	2.1756360625872082E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999992156088277	WITHOUT_CLASSIFICATION	7.84391172437044E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999929652675492	WITHOUT_CLASSIFICATION	7.034732450820242E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999539871017736	WITHOUT_CLASSIFICATION	4.601289822632484E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999657585549	WITHOUT_CLASSIFICATION	3.424144513414482E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999709680575779	WITHOUT_CLASSIFICATION	2.90319424220257E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999987902501478	WITHOUT_CLASSIFICATION	1.2097498521678102E-6	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999978902607	WITHOUT_CLASSIFICATION	2.10973923719998E-9	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997777714835137	WITHOUT_CLASSIFICATION	2.2222851648628867E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999972416963495	WITHOUT_CLASSIFICATION	2.75830365045289E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999625740573	WITHOUT_CLASSIFICATION	3.742594269397775E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999193968525448	WITHOUT_CLASSIFICATION	8.060314745522196E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999579069367	WITHOUT_CLASSIFICATION	4.209306329931797E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999163875082	WITHOUT_CLASSIFICATION	8.361249182661267E-8	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999981965863942	WITHOUT_CLASSIFICATION	1.8034136058826427E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999972416963495	WITHOUT_CLASSIFICATION	2.75830365045289E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999946378035427	WITHOUT_CLASSIFICATION	5.362196457266661E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999213613673	WITHOUT_CLASSIFICATION	7.863863272868625E-8	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999995469574011	WITHOUT_CLASSIFICATION	4.5304259892871846E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999770604432641	WITHOUT_CLASSIFICATION	2.2939556735869617E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999990048329025	WITHOUT_CLASSIFICATION	9.951670975311307E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998717358987	WITHOUT_CLASSIFICATION	1.2826410134790426E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998757977969	WITHOUT_CLASSIFICATION	1.2420220305136388E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999941546616474	WITHOUT_CLASSIFICATION	5.845338352669481E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999986404490105	WITHOUT_CLASSIFICATION	1.3595509894516863E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999993860528362	WITHOUT_CLASSIFICATION	6.139471638588575E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999725519205882	WITHOUT_CLASSIFICATION	2.7448079411915587E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999982729600837	WITHOUT_CLASSIFICATION	1.7270399162581505E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999771683923219	WITHOUT_CLASSIFICATION	2.2831607678125307E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999989044353184	WITHOUT_CLASSIFICATION	1.09556468166725E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999942544110342	WITHOUT_CLASSIFICATION	5.7455889658630455E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997821151094	WITHOUT_CLASSIFICATION	2.178848905488597E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999683108574722	WITHOUT_CLASSIFICATION	3.168914252770654E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999699117605	WITHOUT_CLASSIFICATION	3.008823947113829E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999577788935	WITHOUT_CLASSIFICATION	4.2221106493094346E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999993304464782	WITHOUT_CLASSIFICATION	6.695535219139843E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999916533454	WITHOUT_CLASSIFICATION	8.346654632863566E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999996101981156	WITHOUT_CLASSIFICATION	3.8980188434133497E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999967960271876	WITHOUT_CLASSIFICATION	3.203972812337649E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999991692024764	WITHOUT_CLASSIFICATION	8.307975236477099E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999996295476036	WITHOUT_CLASSIFICATION	3.7045239649249184E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999910966227098	WITHOUT_CLASSIFICATION	8.90337729023796E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999989290011786	WITHOUT_CLASSIFICATION	1.0709988214446968E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999929134478	WITHOUT_CLASSIFICATION	7.08655215601818E-9	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999994643433585	WITHOUT_CLASSIFICATION	5.356566414711593E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999983130181471	WITHOUT_CLASSIFICATION	1.686981852928577E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999980694735473	WITHOUT_CLASSIFICATION	1.9305264526655593E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.99998918365533	WITHOUT_CLASSIFICATION	1.0816344670012225E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999987590696133	WITHOUT_CLASSIFICATION	1.240930386620459E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996773678164	WITHOUT_CLASSIFICATION	3.226321836596763E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995908798447	WITHOUT_CLASSIFICATION	4.091201554078802E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999998898797956	WITHOUT_CLASSIFICATION	1.1012020437187537E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999995459685367	WITHOUT_CLASSIFICATION	4.540314633209159E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998355300281	WITHOUT_CLASSIFICATION	1.6446997188573504E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999973327446	WITHOUT_CLASSIFICATION	2.6672553788445807E-9	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999993789947621	WITHOUT_CLASSIFICATION	6.21005237963968E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999995960572858	WITHOUT_CLASSIFICATION	4.039427141783145E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999892851227	WITHOUT_CLASSIFICATION	1.071487722453614E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999119574021	WITHOUT_CLASSIFICATION	8.804259784773965E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999992754688292	WITHOUT_CLASSIFICATION	7.245311707997667E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996853738234	WITHOUT_CLASSIFICATION	3.146261765481146E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999975917047937	WITHOUT_CLASSIFICATION	2.4082952061641428E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999996699383453	WITHOUT_CLASSIFICATION	3.3006165464999175E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999922507214	WITHOUT_CLASSIFICATION	7.749278553672302E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999985579445823	WITHOUT_CLASSIFICATION	1.4420554176832836E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999201770198	WITHOUT_CLASSIFICATION	7.982298020592127E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999611123112927	WITHOUT_CLASSIFICATION	3.8887688707344906E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999962363047552	WITHOUT_CLASSIFICATION	3.763695244771136E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999986256063601	WITHOUT_CLASSIFICATION	1.3743936399429364E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999996409700568	WITHOUT_CLASSIFICATION	3.5902994315025254E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999980564598034	WITHOUT_CLASSIFICATION	1.943540196578958E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999990124804193	WITHOUT_CLASSIFICATION	9.875195806367693E-7	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999742700005	WITHOUT_CLASSIFICATION	2.5729999420297354E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999992052383669	WITHOUT_CLASSIFICATION	7.947616330137575E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999938515496	WITHOUT_CLASSIFICATION	6.148450391565497E-9	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999578515774	WITHOUT_CLASSIFICATION	4.214842259968385E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999049741953924	WITHOUT_CLASSIFICATION	9.502580460768631E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999982936835813	WITHOUT_CLASSIFICATION	1.7063164187156384E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996773678164	WITHOUT_CLASSIFICATION	3.226321836596763E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999785491013	WITHOUT_CLASSIFICATION	2.1450898637538146E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999988789676	WITHOUT_CLASSIFICATION	1.1210324290480066E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999990121433557	WITHOUT_CLASSIFICATION	9.878566442752672E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.999986106252796	WITHOUT_CLASSIFICATION	1.3893747203978469E-5	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999997489492843	WITHOUT_CLASSIFICATION	2.51050715617794E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995049331541	WITHOUT_CLASSIFICATION	4.95066845852745E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988512732086	WITHOUT_CLASSIFICATION	1.1487267913979183E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999577377778	WITHOUT_CLASSIFICATION	4.226222217169927E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999706173712	WITHOUT_CLASSIFICATION	2.938262873716959E-8	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999967686681115	WITHOUT_CLASSIFICATION	3.2313318885072918E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999786733953	WITHOUT_CLASSIFICATION	2.132660476836434E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998369476384905	WITHOUT_CLASSIFICATION	1.6305236150939044E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999997422277647	WITHOUT_CLASSIFICATION	2.5777223537765617E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999986633439901	WITHOUT_CLASSIFICATION	1.336656009850539E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993920923543	WITHOUT_CLASSIFICATION	6.079076457324658E-7	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999944598115	WITHOUT_CLASSIFICATION	5.540188639667461E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999954849267	WITHOUT_CLASSIFICATION	4.515073314483405E-9	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998717173518	WITHOUT_CLASSIFICATION	1.2828264822171128E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999997963767656	WITHOUT_CLASSIFICATION	2.0362323442964793E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999990291312	WITHOUT_CLASSIFICATION	9.708688543684444E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999929623461221	WITHOUT_CLASSIFICATION	7.0376538779229464E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999929623461221	WITHOUT_CLASSIFICATION	7.0376538779229464E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999996623342592	WITHOUT_CLASSIFICATION	3.376657408358174E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999997887920432	WITHOUT_CLASSIFICATION	2.112079567991358E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999015314945	WITHOUT_CLASSIFICATION	9.846850545118733E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999994574148839	WITHOUT_CLASSIFICATION	5.425851160940493E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999998628269913	WITHOUT_CLASSIFICATION	1.3717300873290908E-7	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999599259979	WITHOUT_CLASSIFICATION	4.007400219069425E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999949132722997	WITHOUT_CLASSIFICATION	5.086727700187499E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998217817812	WITHOUT_CLASSIFICATION	1.7821821872799714E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998217817812	WITHOUT_CLASSIFICATION	1.7821821872799714E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999839444270325	WITHOUT_CLASSIFICATION	1.605557296751466E-5	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999988953619704	WITHOUT_CLASSIFICATION	1.1046380295975692E-6	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.99999972359883	WITHOUT_CLASSIFICATION	2.764011700410058E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996414056866	WITHOUT_CLASSIFICATION	3.5859431328863734E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996414056866	WITHOUT_CLASSIFICATION	3.5859431328863734E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996414056866	WITHOUT_CLASSIFICATION	3.5859431328863734E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997022406604	WITHOUT_CLASSIFICATION	2.9775933964123705E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999748644109	WITHOUT_CLASSIFICATION	2.513558909795246E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999988551376873	WITHOUT_CLASSIFICATION	1.1448623127127074E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999952000243056	WITHOUT_CLASSIFICATION	4.799975694369361E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999660086033	WITHOUT_CLASSIFICATION	3.3991396810423406E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999956061909	WITHOUT_CLASSIFICATION	4.393809070302786E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999668191016	WITHOUT_CLASSIFICATION	3.318089836012703E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999531365740493	WITHOUT_CLASSIFICATION	4.68634259508457E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998532082284	WITHOUT_CLASSIFICATION	1.4679177155616588E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999989863752423	WITHOUT_CLASSIFICATION	1.0136247577890513E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999993321785412	WITHOUT_CLASSIFICATION	6.678214588676153E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997175748836	WITHOUT_CLASSIFICATION	2.8242511635662844E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999421114893	WITHOUT_CLASSIFICATION	5.788851072872143E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999665566482	WITHOUT_CLASSIFICATION	3.344335172967699E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999645794303	WITHOUT_CLASSIFICATION	3.5420569631837095E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999991362476498	WITHOUT_CLASSIFICATION	8.637523502641727E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999962571884313	WITHOUT_CLASSIFICATION	3.7428115687255625E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999962571884313	WITHOUT_CLASSIFICATION	3.7428115687255625E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999969143101668	WITHOUT_CLASSIFICATION	3.0856898332119025E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999969143101668	WITHOUT_CLASSIFICATION	3.0856898332119025E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999968878964335	WITHOUT_CLASSIFICATION	3.112103566399289E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977148801862	WITHOUT_CLASSIFICATION	2.285119813748424E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977148801862	WITHOUT_CLASSIFICATION	2.285119813748424E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999984965871501	WITHOUT_CLASSIFICATION	1.503412849875225E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999963225626565	WITHOUT_CLASSIFICATION	3.677437343559715E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999684269816	WITHOUT_CLASSIFICATION	3.157301843279651E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999929623461221	WITHOUT_CLASSIFICATION	7.0376538779229464E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999447391203	WITHOUT_CLASSIFICATION	5.526087961210217E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999963225626565	WITHOUT_CLASSIFICATION	3.677437343559715E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999996056423107	WITHOUT_CLASSIFICATION	3.9435768926370685E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999996583466294	WITHOUT_CLASSIFICATION	3.4165337058895025E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999976677033011	WITHOUT_CLASSIFICATION	2.332296698818399E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.99999867568682	WITHOUT_CLASSIFICATION	1.32431318002997E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999971534136	WITHOUT_CLASSIFICATION	2.8465863985599495E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999932160320849	WITHOUT_CLASSIFICATION	6.783967915005484E-6	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999421670979	WITHOUT_CLASSIFICATION	5.783290208793687E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999988867804491	WITHOUT_CLASSIFICATION	1.1132195508802114E-6	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999169039071	WITHOUT_CLASSIFICATION	8.309609287201296E-8	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999554468322304	WITHOUT_CLASSIFICATION	4.455316776957105E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999829847195	WITHOUT_CLASSIFICATION	1.701528055372641E-8	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999973830953661	WITHOUT_CLASSIFICATION	2.6169046339743666E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995188553508	WITHOUT_CLASSIFICATION	4.811446492046216E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999971672369777	WITHOUT_CLASSIFICATION	2.832763022216481E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999945117622651	WITHOUT_CLASSIFICATION	5.4882377348666664E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999502563981	WITHOUT_CLASSIFICATION	4.974360183757721E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999648444263	WITHOUT_CLASSIFICATION	3.515557359313964E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985326953036	WITHOUT_CLASSIFICATION	1.4673046964848605E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985326953036	WITHOUT_CLASSIFICATION	1.4673046964848605E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999994635102253	WITHOUT_CLASSIFICATION	5.364897747800201E-7	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999991583636015	WITHOUT_CLASSIFICATION	8.416363985094579E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996073741921	WITHOUT_CLASSIFICATION	3.9262580792302247E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999990315531536	WITHOUT_CLASSIFICATION	9.684468464621514E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994397793903	WITHOUT_CLASSIFICATION	5.602206096356261E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999124787832	WITHOUT_CLASSIFICATION	8.75212169504932E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999914089814	WITHOUT_CLASSIFICATION	8.591018618891543E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999957117290088	WITHOUT_CLASSIFICATION	4.2882709912208575E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999998428563381	WITHOUT_CLASSIFICATION	1.5714366175745027E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999854886485	WITHOUT_CLASSIFICATION	1.4511351368493057E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997842221794	WITHOUT_CLASSIFICATION	2.1577782060832858E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998369476384905	WITHOUT_CLASSIFICATION	1.6305236150939044E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999856311902	WITHOUT_CLASSIFICATION	1.4368809821921757E-8	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994832277409	WITHOUT_CLASSIFICATION	5.167722591345301E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999996144137027	WITHOUT_CLASSIFICATION	3.855862972287701E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999998082555697	WITHOUT_CLASSIFICATION	1.917444303936462E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999740154898	WITHOUT_CLASSIFICATION	2.5984510186235652E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999740154898	WITHOUT_CLASSIFICATION	2.5984510186235652E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999945475210135	WITHOUT_CLASSIFICATION	5.45247898651213E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999994568293996	WITHOUT_CLASSIFICATION	5.431706003170489E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999992542311378	WITHOUT_CLASSIFICATION	7.457688621030472E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.999996893805535	WITHOUT_CLASSIFICATION	3.106194465047241E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999991757152494	WITHOUT_CLASSIFICATION	8.242847506468518E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999965383177187	WITHOUT_CLASSIFICATION	3.4616822811636326E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999994105592375	WITHOUT_CLASSIFICATION	5.89440762504175E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999730741672	WITHOUT_CLASSIFICATION	2.692583279117372E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999608109262	WITHOUT_CLASSIFICATION	3.9189073716758725E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999997929565192	WITHOUT_CLASSIFICATION	2.070434808854655E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998762985772	WITHOUT_CLASSIFICATION	1.2370142282906325E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999730741672	WITHOUT_CLASSIFICATION	2.692583279117372E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999371959801	WITHOUT_CLASSIFICATION	6.280401980813952E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999039665671	WITHOUT_CLASSIFICATION	9.603343292778003E-8	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999902621453	WITHOUT_CLASSIFICATION	9.737854703764423E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999966276247875	WITHOUT_CLASSIFICATION	3.3723752125032426E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999873243829	WITHOUT_CLASSIFICATION	1.2675617154708456E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999783007744	WITHOUT_CLASSIFICATION	2.1699225570365438E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999637588947	WITHOUT_CLASSIFICATION	3.624110533741859E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998218967967	WITHOUT_CLASSIFICATION	1.7810320318464525E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999231438764	WITHOUT_CLASSIFICATION	7.685612350800323E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999953630431255	WITHOUT_CLASSIFICATION	4.636956874461801E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999982474343238	WITHOUT_CLASSIFICATION	1.752565676269493E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999529310121	WITHOUT_CLASSIFICATION	4.7068987855845864E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999075290988	WITHOUT_CLASSIFICATION	9.247090114517305E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997376699535	WITHOUT_CLASSIFICATION	2.6233004646183254E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999958492975949	WITHOUT_CLASSIFICATION	4.150702405090771E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999954937970786	WITHOUT_CLASSIFICATION	4.506202921367075E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999995878830664	WITHOUT_CLASSIFICATION	4.121169335955054E-6	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999802211428801	WITHOUT_CLASSIFICATION	1.977885711989481E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999687997928517	WITHOUT_CLASSIFICATION	3.120020714841316E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999613407587	WITHOUT_CLASSIFICATION	3.865924135470611E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999999575770599	WITHOUT_CLASSIFICATION	4.2422940116123995E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999995545288365	WITHOUT_CLASSIFICATION	4.4547116352342053E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999855316604971	WITHOUT_CLASSIFICATION	1.4468339502961788E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999938928339512	WITHOUT_CLASSIFICATION	6.107166048742742E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998940181472	WITHOUT_CLASSIFICATION	1.0598185284394871E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999949180189607	WITHOUT_CLASSIFICATION	5.0819810392794634E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999650395763	WITHOUT_CLASSIFICATION	3.4960423649306244E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999880257701	WITHOUT_CLASSIFICATION	1.1974230066921298E-8	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999715144873	WITHOUT_CLASSIFICATION	2.848551267212735E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999997986812896	WITHOUT_CLASSIFICATION	2.0131871029419626E-7	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999984168881	WITHOUT_CLASSIFICATION	1.5831119208379544E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999189644796	WITHOUT_CLASSIFICATION	8.103552034562954E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999976039497517	WITHOUT_CLASSIFICATION	2.3960502481957647E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998094595436	WITHOUT_CLASSIFICATION	1.9054045639911303E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998102984734	WITHOUT_CLASSIFICATION	1.8970152662194256E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999989343195618	WITHOUT_CLASSIFICATION	1.0656804382780636E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999905541193	WITHOUT_CLASSIFICATION	9.445880824660865E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999893359517	WITHOUT_CLASSIFICATION	1.0664048329311869E-8	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995421660056	WITHOUT_CLASSIFICATION	4.5783399436565756E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999310797921	WITHOUT_CLASSIFICATION	6.892020787203546E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999980485312522	WITHOUT_CLASSIFICATION	1.9514687477372487E-6	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999985481513	WITHOUT_CLASSIFICATION	1.4518487007062398E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999889628534	WITHOUT_CLASSIFICATION	1.1037146687186789E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999835798143	WITHOUT_CLASSIFICATION	1.642018566415265E-8	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999997362216739	WITHOUT_CLASSIFICATION	2.6377832602023574E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999455114278	WITHOUT_CLASSIFICATION	5.448857223034532E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999995782197648	WITHOUT_CLASSIFICATION	4.2178023515859857E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999419507125993	WITHOUT_CLASSIFICATION	5.804928740069278E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999967101970871	WITHOUT_CLASSIFICATION	3.2898029128691496E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999994785141378	WITHOUT_CLASSIFICATION	5.214858620782189E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979893423964	WITHOUT_CLASSIFICATION	2.0106576035177435E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996129454432	WITHOUT_CLASSIFICATION	3.8705455689287747E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999392830137	WITHOUT_CLASSIFICATION	6.071698637688713E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999994929066676	WITHOUT_CLASSIFICATION	5.070933324484112E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999551662853	WITHOUT_CLASSIFICATION	4.483371484432979E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998631724517	WITHOUT_CLASSIFICATION	1.368275483898856E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999995716262797	WITHOUT_CLASSIFICATION	4.283737201467178E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999647023055	WITHOUT_CLASSIFICATION	3.529769458715063E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999994593500876	WITHOUT_CLASSIFICATION	5.406499124312496E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999988010436467	WITHOUT_CLASSIFICATION	1.198956353340126E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999999209498486	WITHOUT_CLASSIFICATION	7.905015139894721E-8	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997322911794	WITHOUT_CLASSIFICATION	2.677088205853002E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.999999911270371	WITHOUT_CLASSIFICATION	8.872962895377587E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999258405507696	WITHOUT_CLASSIFICATION	7.415944923035648E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999995915789608	WITHOUT_CLASSIFICATION	4.0842103922647746E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999974882247582	WITHOUT_CLASSIFICATION	2.5117752417656976E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979893423964	WITHOUT_CLASSIFICATION	2.0106576035177435E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999999192644616	WITHOUT_CLASSIFICATION	8.073553828633963E-8	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999998265058163	WITHOUT_CLASSIFICATION	1.7349418366932743E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999352826093	WITHOUT_CLASSIFICATION	6.471739069941331E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999128930986	WITHOUT_CLASSIFICATION	8.710690141542818E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999955499249554	WITHOUT_CLASSIFICATION	4.450075044544251E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999983106895314	WITHOUT_CLASSIFICATION	1.6893104685642255E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999608109262	WITHOUT_CLASSIFICATION	3.9189073716758725E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998237596342856	WITHOUT_CLASSIFICATION	1.7624036571447447E-4	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998102984734	WITHOUT_CLASSIFICATION	1.8970152662194256E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999977933245576	WITHOUT_CLASSIFICATION	2.2066754424163036E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999489705258	WITHOUT_CLASSIFICATION	5.102947416543979E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999979119004107	WITHOUT_CLASSIFICATION	2.0880995893582823E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999980459784424	WITHOUT_CLASSIFICATION	1.954021557547053E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999995669821103	WITHOUT_CLASSIFICATION	4.330178896001716E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999991776117548	WITHOUT_CLASSIFICATION	8.223882452720356E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988169135205	WITHOUT_CLASSIFICATION	1.183086479551119E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998071383598	WITHOUT_CLASSIFICATION	1.9286164019197228E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999937165558	WITHOUT_CLASSIFICATION	6.283444170970955E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999907106562	WITHOUT_CLASSIFICATION	9.289343887733512E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997272082036	WITHOUT_CLASSIFICATION	2.727917964106199E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998987604378	WITHOUT_CLASSIFICATION	1.0123956215292693E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999923824176	WITHOUT_CLASSIFICATION	7.617582404849415E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999923824176	WITHOUT_CLASSIFICATION	7.617582404849415E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999122002815	WITHOUT_CLASSIFICATION	8.779971851281868E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999993263788016	WITHOUT_CLASSIFICATION	6.736211983015678E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999993752938175	WITHOUT_CLASSIFICATION	6.247061824510385E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999936054722205	WITHOUT_CLASSIFICATION	6.394527779435544E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999908112676	WITHOUT_CLASSIFICATION	9.188732416898927E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998233653795	WITHOUT_CLASSIFICATION	1.7663462062378597E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999944593339	WITHOUT_CLASSIFICATION	5.54066616833782E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999982965347466	WITHOUT_CLASSIFICATION	1.70346525346172E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998484430103	WITHOUT_CLASSIFICATION	1.515569897158373E-7	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999978497549944	WITHOUT_CLASSIFICATION	2.150245005632316E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999997229448353	WITHOUT_CLASSIFICATION	2.770551646854664E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999995576549815	WITHOUT_CLASSIFICATION	4.4234501848673E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999805072276	WITHOUT_CLASSIFICATION	1.9492772416659303E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999879287204	WITHOUT_CLASSIFICATION	1.207127962307772E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999254523335	WITHOUT_CLASSIFICATION	7.454766652875058E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998280129136	WITHOUT_CLASSIFICATION	1.719870863723698E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999977695118462	WITHOUT_CLASSIFICATION	2.2304881538601516E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999540707675	WITHOUT_CLASSIFICATION	4.592923241509962E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999899038172	WITHOUT_CLASSIFICATION	1.009618283635261E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999950258069477	WITHOUT_CLASSIFICATION	4.974193052294442E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997913912777	WITHOUT_CLASSIFICATION	2.086087223239362E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999988926848526	WITHOUT_CLASSIFICATION	1.107315147338566E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999140628976	WITHOUT_CLASSIFICATION	8.59371024355407E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999310085840842	WITHOUT_CLASSIFICATION	6.899141591575236E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999048090169	WITHOUT_CLASSIFICATION	9.519098309993885E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992711086594	WITHOUT_CLASSIFICATION	7.288913407176912E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996159750829	WITHOUT_CLASSIFICATION	3.840249171424003E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999803525083	WITHOUT_CLASSIFICATION	1.9647491758145235E-8	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999943907174543	WITHOUT_CLASSIFICATION	5.609282545698263E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992395057103	WITHOUT_CLASSIFICATION	7.604942896566499E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9995386858320455	WITHOUT_CLASSIFICATION	4.6131416795452225E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999817480517701	WITHOUT_CLASSIFICATION	1.8251948229940004E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999676928858	WITHOUT_CLASSIFICATION	3.2307114149409593E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999964171578	WITHOUT_CLASSIFICATION	3.5828423303409922E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999994876890411	WITHOUT_CLASSIFICATION	5.123109588493783E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994017478067	WITHOUT_CLASSIFICATION	5.982521933542737E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999993766713796	WITHOUT_CLASSIFICATION	6.233286203990569E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999726018799	WITHOUT_CLASSIFICATION	2.7398120020973945E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999998263297653	WITHOUT_CLASSIFICATION	1.7367023477723687E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999978029210614	WITHOUT_CLASSIFICATION	2.1970789385606487E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997625769388	WITHOUT_CLASSIFICATION	2.3742306124335726E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999832645626	WITHOUT_CLASSIFICATION	1.6735437359290787E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999602493256163	WITHOUT_CLASSIFICATION	3.975067438378324E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999929908862114	WITHOUT_CLASSIFICATION	7.009113788624922E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999957629916383	WITHOUT_CLASSIFICATION	4.237008361741744E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996954630151	WITHOUT_CLASSIFICATION	3.045369849349908E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9954513558355398	WITHOUT_CLASSIFICATION	0.0045486441644601965	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999913994629	WITHOUT_CLASSIFICATION	8.600537107601756E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999803904805	WITHOUT_CLASSIFICATION	1.9609519461271714E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997469575856	WITHOUT_CLASSIFICATION	2.5304241432667325E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997500981739	WITHOUT_CLASSIFICATION	2.4990182622134695E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999822343019	WITHOUT_CLASSIFICATION	1.7765698158773922E-8	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999975884509351	WITHOUT_CLASSIFICATION	2.4115490649376094E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999998144076505	WITHOUT_CLASSIFICATION	1.8559234944177631E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997406504635	WITHOUT_CLASSIFICATION	2.593495365955959E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999997888605835	WITHOUT_CLASSIFICATION	2.111394165231285E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999996296409493	WITHOUT_CLASSIFICATION	3.703590507168079E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998818416439	WITHOUT_CLASSIFICATION	1.1815835604966421E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999612546883	WITHOUT_CLASSIFICATION	3.8745311676199223E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998930361148	WITHOUT_CLASSIFICATION	1.0696388523448946E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999980491796524	WITHOUT_CLASSIFICATION	1.9508203476031267E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998543765286	WITHOUT_CLASSIFICATION	1.456234714118277E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999990354623761	WITHOUT_CLASSIFICATION	9.645376238662956E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998183392261	WITHOUT_CLASSIFICATION	1.8166077394897757E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999996394986108	WITHOUT_CLASSIFICATION	3.6050138912160067E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998352266427	WITHOUT_CLASSIFICATION	1.6477335720346696E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999774268352453	WITHOUT_CLASSIFICATION	2.2573164754719415E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999331318467	WITHOUT_CLASSIFICATION	6.686815337310183E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999242937446	WITHOUT_CLASSIFICATION	7.570625531151986E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999117683406	WITHOUT_CLASSIFICATION	8.823165952047142E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999242937446	WITHOUT_CLASSIFICATION	7.570625531151986E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999997250226798	WITHOUT_CLASSIFICATION	2.749773202824013E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999581734549	WITHOUT_CLASSIFICATION	4.182654520021884E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999734471306	WITHOUT_CLASSIFICATION	2.655286939714148E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999570265717	WITHOUT_CLASSIFICATION	4.297342821120991E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999706124368	WITHOUT_CLASSIFICATION	2.9387563123945485E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999997758061681	WITHOUT_CLASSIFICATION	2.2419383204915293E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997939318778	WITHOUT_CLASSIFICATION	2.0606812219415526E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999844498731796	WITHOUT_CLASSIFICATION	1.555012682038228E-5	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999863086448	WITHOUT_CLASSIFICATION	1.3691355197652845E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999996179934	WITHOUT_CLASSIFICATION	3.820066080307559E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999998664779421	WITHOUT_CLASSIFICATION	1.3352205789936654E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999623334993	WITHOUT_CLASSIFICATION	3.76665006784881E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999995743934669	WITHOUT_CLASSIFICATION	4.2560653302458167E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999699674794976	WITHOUT_CLASSIFICATION	3.0032520502362196E-5	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999681475911	WITHOUT_CLASSIFICATION	3.1852408897988496E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999872365768	WITHOUT_CLASSIFICATION	1.2763423115271006E-8	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999811627882	WITHOUT_CLASSIFICATION	1.8837211803430202E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999016689071	WITHOUT_CLASSIFICATION	9.833109300109381E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999449345467	WITHOUT_CLASSIFICATION	5.5065453195688115E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999975883575102	WITHOUT_CLASSIFICATION	2.411642489763774E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996384013298	WITHOUT_CLASSIFICATION	3.615986702564196E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999986896876281	WITHOUT_CLASSIFICATION	1.3103123719420233E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998294229799182	WITHOUT_CLASSIFICATION	1.7057702008172317E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999035861952	WITHOUT_CLASSIFICATION	9.641380476625469E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999997313187237	WITHOUT_CLASSIFICATION	2.686812763077351E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999809620292703	WITHOUT_CLASSIFICATION	1.9037970729724838E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999933146904204	WITHOUT_CLASSIFICATION	6.685309579576255E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999975769718767	WITHOUT_CLASSIFICATION	2.4230281233166328E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997826849618	WITHOUT_CLASSIFICATION	2.1731503814115483E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999986661378271	WITHOUT_CLASSIFICATION	1.3338621730385357E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999946475133418	WITHOUT_CLASSIFICATION	5.352486658164935E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999943117830615	WITHOUT_CLASSIFICATION	5.688216938500153E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998744373777	WITHOUT_CLASSIFICATION	1.2556262240007423E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999994971883511	WITHOUT_CLASSIFICATION	5.028116489224596E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999987786451581	WITHOUT_CLASSIFICATION	1.221354841895196E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999873997881723	WITHOUT_CLASSIFICATION	1.2600211827816867E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999901050884524	WITHOUT_CLASSIFICATION	9.894911547572456E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997573026332	WITHOUT_CLASSIFICATION	2.426973667507183E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999700321153325	WITHOUT_CLASSIFICATION	2.9967884667420066E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999369185715	WITHOUT_CLASSIFICATION	6.30814284973515E-7	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999885954130621	WITHOUT_CLASSIFICATION	1.1404586937876051E-5	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999995849408795	WITHOUT_CLASSIFICATION	4.1505912046779856E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999812392904751	WITHOUT_CLASSIFICATION	1.8760709524901165E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999809620292703	WITHOUT_CLASSIFICATION	1.9037970729724838E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999604231970215	WITHOUT_CLASSIFICATION	3.957680297863056E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999193604165	WITHOUT_CLASSIFICATION	8.063958342493577E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999733886251728	WITHOUT_CLASSIFICATION	2.6611374827120446E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999996945245601	WITHOUT_CLASSIFICATION	3.0547543990154357E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999993456758016	WITHOUT_CLASSIFICATION	6.543241982384419E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995345392676	WITHOUT_CLASSIFICATION	4.6546073237841996E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999886308424	WITHOUT_CLASSIFICATION	1.1369157744051551E-8	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999889204391899	WITHOUT_CLASSIFICATION	1.107956081015519E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989554958456	WITHOUT_CLASSIFICATION	1.0445041543986645E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999562195357	WITHOUT_CLASSIFICATION	4.37804641887828E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999947494114909	WITHOUT_CLASSIFICATION	5.2505885090491126E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999992096783811	WITHOUT_CLASSIFICATION	7.903216190071598E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999949312134193	WITHOUT_CLASSIFICATION	5.068786580659728E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999928172192363	WITHOUT_CLASSIFICATION	7.182780763708073E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999007118691	WITHOUT_CLASSIFICATION	9.928813101516702E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999974143818	WITHOUT_CLASSIFICATION	2.5856181933677577E-8	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999996655671286	WITHOUT_CLASSIFICATION	3.3443287138681157E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999983137047144	WITHOUT_CLASSIFICATION	1.6862952855337364E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999840226729	WITHOUT_CLASSIFICATION	1.597732710846375E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999604231970215	WITHOUT_CLASSIFICATION	3.957680297863056E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999966846964555	WITHOUT_CLASSIFICATION	3.315303544524448E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997303338434	WITHOUT_CLASSIFICATION	2.6966615662428026E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999998946731039	WITHOUT_CLASSIFICATION	1.0532689610749356E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997856013578	WITHOUT_CLASSIFICATION	2.143986422446523E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999288497607	WITHOUT_CLASSIFICATION	7.115023922986888E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999963573093197	WITHOUT_CLASSIFICATION	3.6426906803578404E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999963573093197	WITHOUT_CLASSIFICATION	3.6426906803578404E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998475947037	WITHOUT_CLASSIFICATION	1.5240529635777156E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999963573093197	WITHOUT_CLASSIFICATION	3.6426906803578404E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999963573093197	WITHOUT_CLASSIFICATION	3.6426906803578404E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999954765575201	WITHOUT_CLASSIFICATION	4.5234424799647945E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999918282085131	WITHOUT_CLASSIFICATION	8.1717914869356E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999990395046172	WITHOUT_CLASSIFICATION	9.604953827981335E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999990512678587	WITHOUT_CLASSIFICATION	9.487321411871318E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999733069163	WITHOUT_CLASSIFICATION	2.6693083837433823E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999979448164585	WITHOUT_CLASSIFICATION	2.055183541477926E-6	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999957438672255	WITHOUT_CLASSIFICATION	4.25613277457517E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999653663570908	WITHOUT_CLASSIFICATION	3.463364290931427E-5	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999963932472579	WITHOUT_CLASSIFICATION	3.6067527422396237E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999540971044596	WITHOUT_CLASSIFICATION	4.590289554046624E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999925328006597	WITHOUT_CLASSIFICATION	7.467199340301193E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999992519773151	WITHOUT_CLASSIFICATION	7.480226849330972E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999997510666846	WITHOUT_CLASSIFICATION	2.489333154080057E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999887925775695	WITHOUT_CLASSIFICATION	1.1207422430432834E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999998229395173	WITHOUT_CLASSIFICATION	1.770604826879805E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997163270882526	WITHOUT_CLASSIFICATION	2.836729117474122E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997615976154	WITHOUT_CLASSIFICATION	2.3840238446577752E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999821254994451	WITHOUT_CLASSIFICATION	1.7874500554951402E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999438846337974	WITHOUT_CLASSIFICATION	5.6115366202659065E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999857675356638	WITHOUT_CLASSIFICATION	1.4232464336227864E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999981898650955	WITHOUT_CLASSIFICATION	1.8101349045738771E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.999999496019172	WITHOUT_CLASSIFICATION	5.039808279177644E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997615976154	WITHOUT_CLASSIFICATION	2.3840238446577752E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999933146904204	WITHOUT_CLASSIFICATION	6.685309579576255E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.99999181683156	WITHOUT_CLASSIFICATION	8.183168439948781E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998746189839	WITHOUT_CLASSIFICATION	1.2538101605517362E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998963673972	WITHOUT_CLASSIFICATION	1.0363260280624622E-7	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999932674715498	WITHOUT_CLASSIFICATION	6.732528450148985E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999451707757	WITHOUT_CLASSIFICATION	5.4829224194731603E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999967036869036	WITHOUT_CLASSIFICATION	3.296313096293517E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999990083367523	WITHOUT_CLASSIFICATION	9.916632477474853E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995754910749	WITHOUT_CLASSIFICATION	4.2450892509964744E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999996792207427	WITHOUT_CLASSIFICATION	3.207792571972374E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999989532287276	WITHOUT_CLASSIFICATION	1.046771272412793E-6	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998995178754	WITHOUT_CLASSIFICATION	1.004821246265891E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999993122024943	WITHOUT_CLASSIFICATION	6.877975056785817E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998964613322	WITHOUT_CLASSIFICATION	1.035386677325774E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999956277033895	WITHOUT_CLASSIFICATION	4.372296610491644E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999686183412	WITHOUT_CLASSIFICATION	3.1381658732606816E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999990937563591	WITHOUT_CLASSIFICATION	9.062436409296613E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999980417180905	WITHOUT_CLASSIFICATION	1.9582819094986062E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999997349865195	WITHOUT_CLASSIFICATION	2.6501348051180784E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999979639134584	WITHOUT_CLASSIFICATION	2.0360865415394415E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999977021817068	WITHOUT_CLASSIFICATION	2.297818293166026E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999940322767877	WITHOUT_CLASSIFICATION	5.967723212314086E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999911518345	WITHOUT_CLASSIFICATION	8.848165584837836E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995754910749	WITHOUT_CLASSIFICATION	4.2450892509964744E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999978555713671	WITHOUT_CLASSIFICATION	2.1444286329456804E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999988268828445	WITHOUT_CLASSIFICATION	1.1731171554647804E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999999097434292	WITHOUT_CLASSIFICATION	9.025657079220043E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999982970491055	WITHOUT_CLASSIFICATION	1.7029508944682786E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982651210414	WITHOUT_CLASSIFICATION	1.7348789586445997E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999862703776511	WITHOUT_CLASSIFICATION	1.3729622348984938E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999960987303331	WITHOUT_CLASSIFICATION	3.901269666913322E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999998119362475	WITHOUT_CLASSIFICATION	1.8806375240823874E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999987892567719	WITHOUT_CLASSIFICATION	1.2107432280729914E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999874800254954	WITHOUT_CLASSIFICATION	1.251997450464252E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997970381825	WITHOUT_CLASSIFICATION	2.029618173522223E-7	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998812760823	WITHOUT_CLASSIFICATION	1.1872391768232722E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999974798460249	WITHOUT_CLASSIFICATION	2.520153975179568E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999968285841967	WITHOUT_CLASSIFICATION	3.1714158031939063E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999764012501662	WITHOUT_CLASSIFICATION	2.3598749833829244E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993992266006	WITHOUT_CLASSIFICATION	6.00773399271573E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997970381825	WITHOUT_CLASSIFICATION	2.029618173522223E-7	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999983644941209	WITHOUT_CLASSIFICATION	1.6355058791129454E-6	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999948457057299	WITHOUT_CLASSIFICATION	5.15429427004965E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998448789486	WITHOUT_CLASSIFICATION	1.551210513538834E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999954569212463	WITHOUT_CLASSIFICATION	4.543078753744687E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999997854175443	WITHOUT_CLASSIFICATION	2.145824558104379E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999099256286	WITHOUT_CLASSIFICATION	9.007437138814436E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999549957734	WITHOUT_CLASSIFICATION	4.5004226535230454E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995540619543	WITHOUT_CLASSIFICATION	4.459380457013485E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998938320718	WITHOUT_CLASSIFICATION	1.06167928304223E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995877467657	WITHOUT_CLASSIFICATION	4.122532342685748E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999681631927	WITHOUT_CLASSIFICATION	3.183680730536406E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999090682953	WITHOUT_CLASSIFICATION	9.093170475574927E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999056422109	WITHOUT_CLASSIFICATION	9.435778914688011E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999056422109	WITHOUT_CLASSIFICATION	9.435778914688011E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999881437459532	WITHOUT_CLASSIFICATION	1.1856254046792686E-5	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999999920123635	WITHOUT_CLASSIFICATION	7.987636494821502E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.999999700459187	WITHOUT_CLASSIFICATION	2.9954081306000056E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997689509399	WITHOUT_CLASSIFICATION	2.3104906006798244E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999959137829605	WITHOUT_CLASSIFICATION	4.086217039459664E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995525722253	WITHOUT_CLASSIFICATION	4.4742777476268244E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981805517539	WITHOUT_CLASSIFICATION	1.8194482460744652E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987289429643	WITHOUT_CLASSIFICATION	1.2710570357673825E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999986397060386	WITHOUT_CLASSIFICATION	1.3602939612932465E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992898486166	WITHOUT_CLASSIFICATION	7.10151383389059E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995525722253	WITHOUT_CLASSIFICATION	4.4742777476268244E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981805517539	WITHOUT_CLASSIFICATION	1.8194482460744652E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987289429643	WITHOUT_CLASSIFICATION	1.2710570357673825E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999986317162199	WITHOUT_CLASSIFICATION	1.368283780046973E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.999989246834607	WITHOUT_CLASSIFICATION	1.0753165393015456E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999997410526112	WITHOUT_CLASSIFICATION	2.589473887951381E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999971169252245	WITHOUT_CLASSIFICATION	2.8830747755062306E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998588859097	WITHOUT_CLASSIFICATION	1.4111409032331365E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999601593425382	WITHOUT_CLASSIFICATION	3.984065746182975E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999977155733957	WITHOUT_CLASSIFICATION	2.2844266042516328E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999907840024046	WITHOUT_CLASSIFICATION	9.215997595465917E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999130325242475	WITHOUT_CLASSIFICATION	8.696747575251305E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999994459250685	WITHOUT_CLASSIFICATION	5.540749316110232E-7	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999993018443738	WITHOUT_CLASSIFICATION	6.981556260998653E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997640348920628	WITHOUT_CLASSIFICATION	2.3596510793727954E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999436359422839	WITHOUT_CLASSIFICATION	5.6364057716063866E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998997328543	WITHOUT_CLASSIFICATION	1.002671457744857E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999826263515	WITHOUT_CLASSIFICATION	1.737364856978064E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999985296712094	WITHOUT_CLASSIFICATION	1.4703287906049088E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9969025637216365	WITHOUT_CLASSIFICATION	0.0030974362783635486	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999749608456189	WITHOUT_CLASSIFICATION	2.503915438109644E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998587775885	WITHOUT_CLASSIFICATION	1.412224116460532E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985923588446	WITHOUT_CLASSIFICATION	1.4076411554452788E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999995096246022	WITHOUT_CLASSIFICATION	4.903753978912627E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998821599989	WITHOUT_CLASSIFICATION	1.1784000108201197E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999980839298194	WITHOUT_CLASSIFICATION	1.9160701806410968E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999836293485	WITHOUT_CLASSIFICATION	1.63706514554153E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999365044822	WITHOUT_CLASSIFICATION	6.349551790336455E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999883168171984	WITHOUT_CLASSIFICATION	1.1683182801724512E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973905552683	WITHOUT_CLASSIFICATION	2.6094447316923115E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959950085919	WITHOUT_CLASSIFICATION	4.004991408061383E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999997097698204	WITHOUT_CLASSIFICATION	2.9023017948994227E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977340304098	WITHOUT_CLASSIFICATION	2.265969590113213E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978126816714	WITHOUT_CLASSIFICATION	2.187318328648733E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967798953584	WITHOUT_CLASSIFICATION	3.2201046416238653E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999967798953584	WITHOUT_CLASSIFICATION	3.2201046416238653E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999976805174958	WITHOUT_CLASSIFICATION	2.319482504232995E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999465991420319	WITHOUT_CLASSIFICATION	5.340085796817463E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999999280921675	WITHOUT_CLASSIFICATION	7.190783246865775E-8	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998369476384905	WITHOUT_CLASSIFICATION	1.6305236150939044E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999993912604492	WITHOUT_CLASSIFICATION	6.08739550749215E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998314399741	WITHOUT_CLASSIFICATION	1.6856002603650083E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999706384102759	WITHOUT_CLASSIFICATION	2.9361589724147478E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999997948236199	WITHOUT_CLASSIFICATION	2.0517638013505862E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999999625860071	WITHOUT_CLASSIFICATION	3.741399290467424E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997048434371	WITHOUT_CLASSIFICATION	2.9515656290775343E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999854221255	WITHOUT_CLASSIFICATION	1.457787449653574E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997806832135	WITHOUT_CLASSIFICATION	2.1931678641469264E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995449900013	WITHOUT_CLASSIFICATION	4.5500999875715856E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999672275482	WITHOUT_CLASSIFICATION	3.2772451797483375E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991841193795	WITHOUT_CLASSIFICATION	8.158806205520039E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996655819351	WITHOUT_CLASSIFICATION	3.3441806487975136E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998655980367	WITHOUT_CLASSIFICATION	1.3440196323259383E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998258235694	WITHOUT_CLASSIFICATION	1.7417643062142353E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999929407147	WITHOUT_CLASSIFICATION	7.059285300427088E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994219301206	WITHOUT_CLASSIFICATION	5.780698794009608E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999621856087	WITHOUT_CLASSIFICATION	3.7814391294352366E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999840210894891	WITHOUT_CLASSIFICATION	1.5978910510878762E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999914449346064	WITHOUT_CLASSIFICATION	8.555065393597184E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998486989266	WITHOUT_CLASSIFICATION	1.513010733444962E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999990858199961	WITHOUT_CLASSIFICATION	9.141800038161541E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999176753241	WITHOUT_CLASSIFICATION	8.232467589187592E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999948632809293	WITHOUT_CLASSIFICATION	5.136719070698281E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999457640059	WITHOUT_CLASSIFICATION	5.4235994029223664E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999914449346064	WITHOUT_CLASSIFICATION	8.555065393597184E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999914449346064	WITHOUT_CLASSIFICATION	8.555065393597184E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999213217527976	WITHOUT_CLASSIFICATION	7.867824720240759E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999273945503	WITHOUT_CLASSIFICATION	7.26054495461268E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999966396444768	WITHOUT_CLASSIFICATION	3.3603555232078606E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999990620510955	WITHOUT_CLASSIFICATION	9.379489045785548E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995188553508	WITHOUT_CLASSIFICATION	4.811446492046216E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985923588446	WITHOUT_CLASSIFICATION	1.4076411554452788E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999970416081609	WITHOUT_CLASSIFICATION	2.958391838965516E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997056839441	WITHOUT_CLASSIFICATION	2.943160558132671E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999996691324208	WITHOUT_CLASSIFICATION	3.3086757927157915E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981383701176	WITHOUT_CLASSIFICATION	1.8616298823526114E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999998297615146	WITHOUT_CLASSIFICATION	1.7023848545617555E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998236616595	WITHOUT_CLASSIFICATION	1.7633834049274501E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999995601280649	WITHOUT_CLASSIFICATION	4.3987193513980846E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999995601280649	WITHOUT_CLASSIFICATION	4.3987193513980846E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999991573699585	WITHOUT_CLASSIFICATION	8.426300414492461E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999991573699585	WITHOUT_CLASSIFICATION	8.426300414492461E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996163957191	WITHOUT_CLASSIFICATION	3.836042808777358E-7	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996472020034	WITHOUT_CLASSIFICATION	3.5279799653331176E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999969521411145	WITHOUT_CLASSIFICATION	3.047858885488633E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969902867327	WITHOUT_CLASSIFICATION	3.0097132673132757E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999620464035	WITHOUT_CLASSIFICATION	3.795359641900953E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998544559499	WITHOUT_CLASSIFICATION	1.455440501074554E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988870802733	WITHOUT_CLASSIFICATION	1.1129197268067006E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997972395084	WITHOUT_CLASSIFICATION	2.0276049152902491E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999997768069249	WITHOUT_CLASSIFICATION	2.2319307518093173E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999578519628366	WITHOUT_CLASSIFICATION	4.214803716340386E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999992662113251	WITHOUT_CLASSIFICATION	7.337886749060418E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999999773489022	WITHOUT_CLASSIFICATION	2.2651097805421033E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999995075729635	WITHOUT_CLASSIFICATION	4.924270365067364E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999041693401	WITHOUT_CLASSIFICATION	9.583065984073256E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999982163337836	WITHOUT_CLASSIFICATION	1.783666216428083E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999999681991912	WITHOUT_CLASSIFICATION	3.18008088042379E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999999681991912	WITHOUT_CLASSIFICATION	3.18008088042379E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999994024224296	WITHOUT_CLASSIFICATION	5.975775703954475E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999981484099639	WITHOUT_CLASSIFICATION	1.8515900359613599E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999619526821	WITHOUT_CLASSIFICATION	3.804731783225955E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999950251241722	WITHOUT_CLASSIFICATION	4.974875827812409E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991001737041	WITHOUT_CLASSIFICATION	8.998262958604641E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981638783993	WITHOUT_CLASSIFICATION	1.8361216006012774E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999768137288	WITHOUT_CLASSIFICATION	2.3186271306880583E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999095501206	WITHOUT_CLASSIFICATION	9.044987938967521E-8	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999921724066	WITHOUT_CLASSIFICATION	7.827593291372091E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999469986361	WITHOUT_CLASSIFICATION	5.300136388424803E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999936592987	WITHOUT_CLASSIFICATION	6.340701218698811E-9	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999190515771	WITHOUT_CLASSIFICATION	8.09484229078545E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997570498655	WITHOUT_CLASSIFICATION	2.429501344588557E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998525635095	WITHOUT_CLASSIFICATION	1.4743649037066064E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996023044346	WITHOUT_CLASSIFICATION	3.976955653894818E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999972158295987	WITHOUT_CLASSIFICATION	2.784170401392396E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999666143295	WITHOUT_CLASSIFICATION	3.338567049256052E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999994918669146	WITHOUT_CLASSIFICATION	5.081330853974339E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999993500799691	WITHOUT_CLASSIFICATION	6.499200308228684E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999763944564	WITHOUT_CLASSIFICATION	2.3605543612686684E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999851920731	WITHOUT_CLASSIFICATION	1.4807926845864132E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.99999909844867	WITHOUT_CLASSIFICATION	9.015513300507136E-7	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999330560841	WITHOUT_CLASSIFICATION	6.694391583712789E-8	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990437327636	WITHOUT_CLASSIFICATION	9.562672363495375E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998120955419	WITHOUT_CLASSIFICATION	1.879044580032677E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999997069650597	WITHOUT_CLASSIFICATION	2.9303494031983376E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999984327092781	WITHOUT_CLASSIFICATION	1.5672907219128458E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999975306322628	WITHOUT_CLASSIFICATION	2.469367737218119E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997938182437	WITHOUT_CLASSIFICATION	2.0618175642553842E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999947438633708	WITHOUT_CLASSIFICATION	5.256136629166039E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999531818573	WITHOUT_CLASSIFICATION	4.6818142642912726E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999994364916399	WITHOUT_CLASSIFICATION	5.635083601799663E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999946368494979	WITHOUT_CLASSIFICATION	5.363150502187236E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999998463935825	WITHOUT_CLASSIFICATION	1.536064174237684E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999762260217403	WITHOUT_CLASSIFICATION	2.3773978259737483E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999989003968633	WITHOUT_CLASSIFICATION	1.0996031365620732E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999956050272	WITHOUT_CLASSIFICATION	4.394972839281016E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999999833018568	WITHOUT_CLASSIFICATION	1.6698143198039527E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999981648735	WITHOUT_CLASSIFICATION	1.8351264906909658E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999993598102666	WITHOUT_CLASSIFICATION	6.401897335114135E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999860139094	WITHOUT_CLASSIFICATION	1.3986090595142689E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999311981433	WITHOUT_CLASSIFICATION	6.880185658841091E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999939901742668	WITHOUT_CLASSIFICATION	6.009825733179731E-6	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999610647919	WITHOUT_CLASSIFICATION	3.8935208044186285E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999985529945841	WITHOUT_CLASSIFICATION	1.4470054159452167E-6	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999990126116457	WITHOUT_CLASSIFICATION	9.873883542656337E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999973435910513	WITHOUT_CLASSIFICATION	2.6564089486599695E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999725852944186	WITHOUT_CLASSIFICATION	2.7414705581497308E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999997670649308	WITHOUT_CLASSIFICATION	2.3293506912153501E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.998399905204245	WITHOUT_CLASSIFICATION	0.0016000947957549947	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999995850062333	WITHOUT_CLASSIFICATION	4.14993766678157E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998837855809476	WITHOUT_CLASSIFICATION	1.1621441905245523E-4	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999993455756508	WITHOUT_CLASSIFICATION	6.544243491237109E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999961372608018	WITHOUT_CLASSIFICATION	3.862739198195987E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999997042355584	WITHOUT_CLASSIFICATION	2.9576444160888487E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.999999799418706	WITHOUT_CLASSIFICATION	2.0058129410301662E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.997932196441446	WITHOUT_CLASSIFICATION	0.002067803558553952	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999967552635275	WITHOUT_CLASSIFICATION	3.244736472439262E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999995294390084	WITHOUT_CLASSIFICATION	4.705609916561134E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998535888537695	WITHOUT_CLASSIFICATION	1.464111462304862E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999560123614	WITHOUT_CLASSIFICATION	4.3987638605042206E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999997250424142	WITHOUT_CLASSIFICATION	2.749575857906229E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999973101684189	WITHOUT_CLASSIFICATION	2.6898315811775315E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999983525028169	WITHOUT_CLASSIFICATION	1.647497183092468E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999671438526	WITHOUT_CLASSIFICATION	3.285614730306984E-8	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999873499196	WITHOUT_CLASSIFICATION	1.265008041229804E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999833644106	WITHOUT_CLASSIFICATION	1.6635589345418308E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998394902121	WITHOUT_CLASSIFICATION	1.6050978786786863E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999709680575779	WITHOUT_CLASSIFICATION	2.90319424220257E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999709680575779	WITHOUT_CLASSIFICATION	2.90319424220257E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999972020981442	WITHOUT_CLASSIFICATION	2.797901855849848E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999982541533118	WITHOUT_CLASSIFICATION	1.7458466882460214E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999852231194	WITHOUT_CLASSIFICATION	1.4776880599216967E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999985625214557	WITHOUT_CLASSIFICATION	1.4374785443666072E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999589637675	WITHOUT_CLASSIFICATION	4.103623246599647E-8	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999946746569216	WITHOUT_CLASSIFICATION	5.325343078453476E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999998874503095	WITHOUT_CLASSIFICATION	1.1254969052518387E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997071888131	WITHOUT_CLASSIFICATION	2.9281118691151577E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999996951986109	WITHOUT_CLASSIFICATION	3.048013890882589E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999976489173841	WITHOUT_CLASSIFICATION	2.351082615876461E-6	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999419852348	WITHOUT_CLASSIFICATION	5.801476526078415E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999791434728	WITHOUT_CLASSIFICATION	2.08565271974909E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999987641777676	WITHOUT_CLASSIFICATION	1.2358222324390166E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999784582829	WITHOUT_CLASSIFICATION	2.1541717158457317E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999984832465122	WITHOUT_CLASSIFICATION	1.516753487813956E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999985851670213	WITHOUT_CLASSIFICATION	1.41483297865399E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999994161989211	WITHOUT_CLASSIFICATION	5.838010789194508E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999971707615581	WITHOUT_CLASSIFICATION	2.829238441822453E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994014950566	WITHOUT_CLASSIFICATION	5.985049432868517E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999981973286634	WITHOUT_CLASSIFICATION	1.8026713366305198E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999997971324008	WITHOUT_CLASSIFICATION	2.028675991300719E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999993467352901	WITHOUT_CLASSIFICATION	6.532647098740151E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999548868171234	WITHOUT_CLASSIFICATION	4.5113182876541296E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999950050243019	WITHOUT_CLASSIFICATION	4.994975698106537E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999188240508	WITHOUT_CLASSIFICATION	8.117594924169603E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999982893451236	WITHOUT_CLASSIFICATION	1.7106548764637522E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997950229279	WITHOUT_CLASSIFICATION	2.0497707215332484E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999980633283087	WITHOUT_CLASSIFICATION	1.9366716913547958E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999979648184912	WITHOUT_CLASSIFICATION	2.035181508780997E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999162225822	WITHOUT_CLASSIFICATION	8.377741781906441E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990831773979	WITHOUT_CLASSIFICATION	9.168226021319963E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999177795441	WITHOUT_CLASSIFICATION	8.222045589461854E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999993742136876	WITHOUT_CLASSIFICATION	6.257863123976242E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999992631187647	WITHOUT_CLASSIFICATION	7.368812352930902E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999993615078617	WITHOUT_CLASSIFICATION	6.384921382929845E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999993615078617	WITHOUT_CLASSIFICATION	6.384921382929845E-7	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999993821980407	WITHOUT_CLASSIFICATION	6.178019591622632E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999896589554538	WITHOUT_CLASSIFICATION	1.0341044546138115E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999998024284407	WITHOUT_CLASSIFICATION	1.9757155931966476E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999985593051691	WITHOUT_CLASSIFICATION	1.440694830905623E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999992948805916	WITHOUT_CLASSIFICATION	7.051194084548517E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999715798390539	WITHOUT_CLASSIFICATION	2.8420160946141043E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999996897082877	WITHOUT_CLASSIFICATION	3.102917122885737E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999878547612	WITHOUT_CLASSIFICATION	1.214523880600544E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998896725041988	WITHOUT_CLASSIFICATION	1.1032749580115674E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999878354819	WITHOUT_CLASSIFICATION	1.2164518111152128E-7	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999346266553	WITHOUT_CLASSIFICATION	6.537334465704379E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999998409813831	WITHOUT_CLASSIFICATION	1.590186169037163E-6	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999961049840108	WITHOUT_CLASSIFICATION	3.895015989101252E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999997503460507	WITHOUT_CLASSIFICATION	2.496539492919696E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999987919973066	WITHOUT_CLASSIFICATION	1.2080026933215446E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999908084685791	WITHOUT_CLASSIFICATION	9.191531420919072E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999908084685791	WITHOUT_CLASSIFICATION	9.191531420919072E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999992507367	WITHOUT_CLASSIFICATION	7.492632943340502E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999993824465924	WITHOUT_CLASSIFICATION	6.175534076318201E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999993419587216	WITHOUT_CLASSIFICATION	6.580412784324272E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999228854151	WITHOUT_CLASSIFICATION	7.711458504198724E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999539871017736	WITHOUT_CLASSIFICATION	4.601289822632484E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998442550887	WITHOUT_CLASSIFICATION	1.5574491125942239E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999979710900528	WITHOUT_CLASSIFICATION	2.0289099471893978E-6	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999979710900528	WITHOUT_CLASSIFICATION	2.0289099471893978E-6	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999999511955352	WITHOUT_CLASSIFICATION	4.880446480322758E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999989539359	WITHOUT_CLASSIFICATION	1.046064097767289E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999975170946388	WITHOUT_CLASSIFICATION	2.4829053611440065E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999748726788	WITHOUT_CLASSIFICATION	2.5127321232540177E-8	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999992231048517	WITHOUT_CLASSIFICATION	7.768951483985687E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999770604432641	WITHOUT_CLASSIFICATION	2.2939556735869617E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999999962760316	WITHOUT_CLASSIFICATION	3.723968411336194E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999684269816	WITHOUT_CLASSIFICATION	3.157301843279651E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999019747798	WITHOUT_CLASSIFICATION	9.802522013418817E-8	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999760127793058	WITHOUT_CLASSIFICATION	2.3987220694115373E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999996409700568	WITHOUT_CLASSIFICATION	3.5902994315025254E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.999986106252796	WITHOUT_CLASSIFICATION	1.3893747203978469E-5	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999943816599849	WITHOUT_CLASSIFICATION	5.618340015167357E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999968878964335	WITHOUT_CLASSIFICATION	3.112103566399289E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999943907174543	WITHOUT_CLASSIFICATION	5.609282545698263E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999041754432	WITHOUT_CLASSIFICATION	9.582455682342489E-8	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999993303800424	WITHOUT_CLASSIFICATION	6.696199574481344E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999986231137129	WITHOUT_CLASSIFICATION	1.3768862871397194E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999998293118036	WITHOUT_CLASSIFICATION	1.7068819639147651E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998383220866	WITHOUT_CLASSIFICATION	1.6167791348879103E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999991296471554	WITHOUT_CLASSIFICATION	8.703528446216363E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999984965871501	WITHOUT_CLASSIFICATION	1.503412849875225E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999640445877775	WITHOUT_CLASSIFICATION	3.595541222242692E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999996319661253	WITHOUT_CLASSIFICATION	3.680338747209626E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997405414164	WITHOUT_CLASSIFICATION	2.594585835571832E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999998101784136	WITHOUT_CLASSIFICATION	1.8982158635152923E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999621388190634	WITHOUT_CLASSIFICATION	3.786118093673236E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999997980678895	WITHOUT_CLASSIFICATION	2.0193211049280301E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999883031295	WITHOUT_CLASSIFICATION	1.1696870407400903E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999740154898	WITHOUT_CLASSIFICATION	2.5984510186235652E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999858551593108	WITHOUT_CLASSIFICATION	1.414484068922727E-5	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999989807923236	WITHOUT_CLASSIFICATION	1.019207676346292E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999993454153856	WITHOUT_CLASSIFICATION	6.545846142790503E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999982346058354	WITHOUT_CLASSIFICATION	1.7653941646550153E-6	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999952686614839	WITHOUT_CLASSIFICATION	4.731338516038516E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999943514852795	WITHOUT_CLASSIFICATION	5.64851472060571E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999982483504164	WITHOUT_CLASSIFICATION	1.7516495836961758E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999998239170721	WITHOUT_CLASSIFICATION	1.7608292793032493E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999991562102107	WITHOUT_CLASSIFICATION	8.437897891816033E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989154681098	WITHOUT_CLASSIFICATION	1.084531890171031E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999996669420599	WITHOUT_CLASSIFICATION	3.330579400146113E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999992532333672	WITHOUT_CLASSIFICATION	7.467666328826505E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999978800517838	WITHOUT_CLASSIFICATION	2.1199482161983745E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997543176055	WITHOUT_CLASSIFICATION	2.4568239446727575E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999972144056	WITHOUT_CLASSIFICATION	2.7855943944138683E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999986336853725	WITHOUT_CLASSIFICATION	1.3663146275501402E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999991562102107	WITHOUT_CLASSIFICATION	8.437897891816033E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989154681098	WITHOUT_CLASSIFICATION	1.084531890171031E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999973647552295	WITHOUT_CLASSIFICATION	2.635244770483413E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999997977988959	WITHOUT_CLASSIFICATION	2.0220110410425422E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998163974959	WITHOUT_CLASSIFICATION	1.8360250410543644E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999974900759107	WITHOUT_CLASSIFICATION	2.5099240893232552E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999803887781	WITHOUT_CLASSIFICATION	1.9611221799631167E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999992388436311	WITHOUT_CLASSIFICATION	7.611563689737838E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999910193859215	WITHOUT_CLASSIFICATION	8.980614078549943E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999944497243491	WITHOUT_CLASSIFICATION	5.550275650894906E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999605089782	WITHOUT_CLASSIFICATION	3.9491021648363086E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999983628275567	WITHOUT_CLASSIFICATION	1.63717244329614E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999982312377715	WITHOUT_CLASSIFICATION	1.7687622284920335E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999983628275567	WITHOUT_CLASSIFICATION	1.63717244329614E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999993572651682	WITHOUT_CLASSIFICATION	6.427348318040267E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999963742704544	WITHOUT_CLASSIFICATION	3.6257295455919716E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999987583357582	WITHOUT_CLASSIFICATION	1.2416642418070659E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979804091454	WITHOUT_CLASSIFICATION	2.0195908545380656E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999998044256266	WITHOUT_CLASSIFICATION	1.955743733930875E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9998380022237654	WITHOUT_CLASSIFICATION	1.6199777623451619E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9998380022237654	WITHOUT_CLASSIFICATION	1.6199777623451619E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999930736285594	WITHOUT_CLASSIFICATION	6.926371440642617E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999174502019	WITHOUT_CLASSIFICATION	8.25497980919829E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999998122446695	WITHOUT_CLASSIFICATION	1.8775533049483115E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999979739453005	WITHOUT_CLASSIFICATION	2.026054699453321E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999978443332824	WITHOUT_CLASSIFICATION	2.1556667174913768E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999567866117568	WITHOUT_CLASSIFICATION	4.321338824309424E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.99999812506705	WITHOUT_CLASSIFICATION	1.8749329499319946E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999989499550229	WITHOUT_CLASSIFICATION	1.0500449770421544E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.999995183881239	WITHOUT_CLASSIFICATION	4.816118761005731E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.999985355218569	WITHOUT_CLASSIFICATION	1.4644781431019009E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999918698105195	WITHOUT_CLASSIFICATION	8.130189480556479E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999985923811144	WITHOUT_CLASSIFICATION	1.4076188855695554E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.999948499313441	WITHOUT_CLASSIFICATION	5.150068655894924E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999993692308645	WITHOUT_CLASSIFICATION	6.307691354224822E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999994094282796	WITHOUT_CLASSIFICATION	5.905717205120346E-7	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999981014175	WITHOUT_CLASSIFICATION	1.8985824553635216E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999288445021	WITHOUT_CLASSIFICATION	7.115549800814205E-8	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999600055458	WITHOUT_CLASSIFICATION	3.999445424835166E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999992469422889	WITHOUT_CLASSIFICATION	7.530577110542182E-7	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.999819781030773	WITHOUT_CLASSIFICATION	1.802189692271202E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999989562616	WITHOUT_CLASSIFICATION	1.0437383941741146E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999995327047076	WITHOUT_CLASSIFICATION	4.672952923904298E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998958148464	WITHOUT_CLASSIFICATION	1.0418515363919381E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999991918122048	WITHOUT_CLASSIFICATION	8.081877953561433E-7	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999995536284645	WITHOUT_CLASSIFICATION	4.4637153545271524E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999735795004396	WITHOUT_CLASSIFICATION	2.6420499560327846E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999897593407	WITHOUT_CLASSIFICATION	1.0240659378828725E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999992368761312	WITHOUT_CLASSIFICATION	7.631238687405014E-7	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999995998070863	WITHOUT_CLASSIFICATION	4.0019291373029806E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999990613918153	WITHOUT_CLASSIFICATION	9.386081846399492E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999831952976834	WITHOUT_CLASSIFICATION	1.6804702316476806E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999904091136673	WITHOUT_CLASSIFICATION	9.590886332701982E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.99999812506705	WITHOUT_CLASSIFICATION	1.8749329499319946E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999999918788525	WITHOUT_CLASSIFICATION	8.121147505462257E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999538956753405	WITHOUT_CLASSIFICATION	4.610432465943407E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9976726685137817	WITHOUT_CLASSIFICATION	0.0023273314862183	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999232844756241	WITHOUT_CLASSIFICATION	7.67155243759688E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999999677452952	WITHOUT_CLASSIFICATION	3.2254704796184686E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999945169778534	WITHOUT_CLASSIFICATION	5.483022146565508E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999979739453005	WITHOUT_CLASSIFICATION	2.026054699453321E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999979739453005	WITHOUT_CLASSIFICATION	2.026054699453321E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999991159988941	WITHOUT_CLASSIFICATION	8.840011059504563E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999881229209078	WITHOUT_CLASSIFICATION	1.1877079092208158E-5	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.99999865175029	WITHOUT_CLASSIFICATION	1.3482497099683735E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996568407721	WITHOUT_CLASSIFICATION	3.4315922797481455E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999996230573448	WITHOUT_CLASSIFICATION	3.7694265521798386E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998183532628	WITHOUT_CLASSIFICATION	1.816467372491608E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999995345827928	WITHOUT_CLASSIFICATION	4.654172072533361E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999688897143	WITHOUT_CLASSIFICATION	3.111028575155105E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999999836106985	WITHOUT_CLASSIFICATION	1.6389301508272187E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998789550588	WITHOUT_CLASSIFICATION	1.2104494116828401E-7	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999995491948418	WITHOUT_CLASSIFICATION	4.50805158197599E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998598522213388	WITHOUT_CLASSIFICATION	1.4014777866128462E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999920004161627	WITHOUT_CLASSIFICATION	7.99958383740102E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998789550588	WITHOUT_CLASSIFICATION	1.2104494116828401E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991791731939	WITHOUT_CLASSIFICATION	8.208268059658492E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999996439987014	WITHOUT_CLASSIFICATION	3.560012986533801E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999990400965011	WITHOUT_CLASSIFICATION	9.599034989842338E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9981382007657386	WITHOUT_CLASSIFICATION	0.001861799234261413	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998598522213388	WITHOUT_CLASSIFICATION	1.4014777866128462E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999948295924264	WITHOUT_CLASSIFICATION	5.170407573650174E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999599635554	WITHOUT_CLASSIFICATION	4.0036444650605925E-8	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999305383229	WITHOUT_CLASSIFICATION	6.946167711209941E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999884687832	WITHOUT_CLASSIFICATION	1.153121678669243E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999265415341114	WITHOUT_CLASSIFICATION	7.345846588854777E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999989731624515	WITHOUT_CLASSIFICATION	1.0268375485677258E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999998620371408	WITHOUT_CLASSIFICATION	1.3796285921524703E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977880376829	WITHOUT_CLASSIFICATION	2.21196231712681E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988456280328	WITHOUT_CLASSIFICATION	1.1543719672579181E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999994573367637	WITHOUT_CLASSIFICATION	5.42663236292962E-7	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999607628415	WITHOUT_CLASSIFICATION	3.923715859754266E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999669564575	WITHOUT_CLASSIFICATION	3.3043542414531295E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998789550588	WITHOUT_CLASSIFICATION	1.2104494116828401E-7	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999948295924264	WITHOUT_CLASSIFICATION	5.170407573650174E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999305383229	WITHOUT_CLASSIFICATION	6.946167711209941E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999987385833995	WITHOUT_CLASSIFICATION	1.261416600475069E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999944181662426	WITHOUT_CLASSIFICATION	5.581833757487193E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999049773337	WITHOUT_CLASSIFICATION	9.502266638508103E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998598522213388	WITHOUT_CLASSIFICATION	1.4014777866128462E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999916364430781	WITHOUT_CLASSIFICATION	8.363556921938524E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999958618831387	WITHOUT_CLASSIFICATION	4.138116861264128E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999917210509467	WITHOUT_CLASSIFICATION	8.278949053265633E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999936590496428	WITHOUT_CLASSIFICATION	6.340950357236138E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977880376829	WITHOUT_CLASSIFICATION	2.21196231712681E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991791731939	WITHOUT_CLASSIFICATION	8.208268059658492E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999947147868884	WITHOUT_CLASSIFICATION	5.285213111649291E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999945104531834	WITHOUT_CLASSIFICATION	5.489546816597293E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999943467822535	WITHOUT_CLASSIFICATION	5.65321774651586E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999880931745243	WITHOUT_CLASSIFICATION	1.19068254757837E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999908507623124	WITHOUT_CLASSIFICATION	9.149237687581873E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999923257739094	WITHOUT_CLASSIFICATION	7.674226090601278E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999916619629986	WITHOUT_CLASSIFICATION	8.33803700136554E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979804091454	WITHOUT_CLASSIFICATION	2.0195908545380656E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999283805753	WITHOUT_CLASSIFICATION	7.161942463543652E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999997866833843	WITHOUT_CLASSIFICATION	2.1331661563304229E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997339677885825	WITHOUT_CLASSIFICATION	2.660322114174842E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999959565670102	WITHOUT_CLASSIFICATION	4.043432989832294E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995473826299	WITHOUT_CLASSIFICATION	4.526173701654753E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999872012167	WITHOUT_CLASSIFICATION	1.2798783296607944E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999992141751131	WITHOUT_CLASSIFICATION	7.858248868825727E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999421185064	WITHOUT_CLASSIFICATION	5.788149372338625E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999936590496428	WITHOUT_CLASSIFICATION	6.340950357236138E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999941599821224	WITHOUT_CLASSIFICATION	5.840017877615144E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999940494401183	WITHOUT_CLASSIFICATION	5.950559881772212E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999810106982541	WITHOUT_CLASSIFICATION	1.898930174594279E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999949398352013	WITHOUT_CLASSIFICATION	5.060164798710436E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999909335778325	WITHOUT_CLASSIFICATION	9.066422167455985E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999875520795	WITHOUT_CLASSIFICATION	1.2447920556476952E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999999828706395	WITHOUT_CLASSIFICATION	1.7129360485866942E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999919713010981	WITHOUT_CLASSIFICATION	8.028698901982449E-6	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996148206236	WITHOUT_CLASSIFICATION	3.851793763767233E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999103086181352	WITHOUT_CLASSIFICATION	8.969138186487711E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999981539496775	WITHOUT_CLASSIFICATION	1.8460503224409863E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999954264948624	WITHOUT_CLASSIFICATION	4.573505137688955E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999965972645843	WITHOUT_CLASSIFICATION	3.4027354156397956E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999990598752698	WITHOUT_CLASSIFICATION	9.401247302871985E-7	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998931886794	WITHOUT_CLASSIFICATION	1.0681132060261182E-7	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999994064883548	WITHOUT_CLASSIFICATION	5.935116451999296E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999522923266	WITHOUT_CLASSIFICATION	4.7707673349457165E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999420705049	WITHOUT_CLASSIFICATION	5.7929495139225486E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999983766870539	WITHOUT_CLASSIFICATION	1.6233129460333288E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999975753237411	WITHOUT_CLASSIFICATION	2.4246762589749086E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999974190411812	WITHOUT_CLASSIFICATION	2.5809588187710984E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999995268229882	WITHOUT_CLASSIFICATION	4.731770119118496E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996569435737	WITHOUT_CLASSIFICATION	3.4305642620805676E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999391664439	WITHOUT_CLASSIFICATION	6.083355610308112E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997442424076	WITHOUT_CLASSIFICATION	2.5575759252527685E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998757243174986	WITHOUT_CLASSIFICATION	1.2427568250144162E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999954860169502	WITHOUT_CLASSIFICATION	4.513983049793556E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999892964324172	WITHOUT_CLASSIFICATION	1.0703567582812314E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999995566789474	WITHOUT_CLASSIFICATION	4.4332105263079944E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9998565154715509	WITHOUT_CLASSIFICATION	1.4348452844915885E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998461544143	WITHOUT_CLASSIFICATION	1.5384558573292214E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999953630431255	WITHOUT_CLASSIFICATION	4.636956874461801E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998990834289	WITHOUT_CLASSIFICATION	1.0091657111497322E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998237596342856	WITHOUT_CLASSIFICATION	1.7624036571447447E-4	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999969111151806	WITHOUT_CLASSIFICATION	3.0888848193733614E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996295925545	WITHOUT_CLASSIFICATION	3.704074455808433E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998577255178	WITHOUT_CLASSIFICATION	1.422744821814168E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996022237652	WITHOUT_CLASSIFICATION	3.977762348151206E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996295925545	WITHOUT_CLASSIFICATION	3.704074455808433E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999969111151806	WITHOUT_CLASSIFICATION	3.0888848193733614E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998577255178	WITHOUT_CLASSIFICATION	1.422744821814168E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.99999966528419	WITHOUT_CLASSIFICATION	3.3471581005085836E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999994936598622	WITHOUT_CLASSIFICATION	5.063401378823977E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999987613653673	WITHOUT_CLASSIFICATION	1.2386346327093576E-6	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999992273062743	WITHOUT_CLASSIFICATION	7.726937256604569E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999753431464	WITHOUT_CLASSIFICATION	2.465685350026538E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9984679991508721	WITHOUT_CLASSIFICATION	0.0015320008491279086	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999996937475178	WITHOUT_CLASSIFICATION	3.062524821842524E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999970164927379	WITHOUT_CLASSIFICATION	2.9835072621769238E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999998563172571	WITHOUT_CLASSIFICATION	1.4368274298971866E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999988046521195	WITHOUT_CLASSIFICATION	1.195347880462976E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999993517564724	WITHOUT_CLASSIFICATION	6.482435275685865E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999981383875924	WITHOUT_CLASSIFICATION	1.8616124075916245E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998046585065	WITHOUT_CLASSIFICATION	1.9534149359804342E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999928178069033	WITHOUT_CLASSIFICATION	7.182193096658437E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999995721080484	WITHOUT_CLASSIFICATION	4.278919517349877E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999448746502	WITHOUT_CLASSIFICATION	5.5125349821922643E-8	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997440249044	WITHOUT_CLASSIFICATION	2.5597509559076635E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999423054209	WITHOUT_CLASSIFICATION	5.769457924103775E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999990016531367	WITHOUT_CLASSIFICATION	9.983468632923652E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999980506160244	WITHOUT_CLASSIFICATION	1.949383975566388E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999998505907639	WITHOUT_CLASSIFICATION	1.4940923610059971E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999935899384	WITHOUT_CLASSIFICATION	6.4100616127795564E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999998388514549	WITHOUT_CLASSIFICATION	1.611485450963207E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999997897279321	WITHOUT_CLASSIFICATION	2.1027206779542818E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999954532688674	WITHOUT_CLASSIFICATION	4.546731132664836E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999954532688674	WITHOUT_CLASSIFICATION	4.546731132664836E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999819408237	WITHOUT_CLASSIFICATION	1.8059176270924557E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999819408237	WITHOUT_CLASSIFICATION	1.8059176270924557E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999998909638133	WITHOUT_CLASSIFICATION	1.0903618669899032E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997440249044	WITHOUT_CLASSIFICATION	2.5597509559076635E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999994718672514	WITHOUT_CLASSIFICATION	5.281327487161828E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999946368592	WITHOUT_CLASSIFICATION	5.363140783860946E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999983379184775	WITHOUT_CLASSIFICATION	1.6620815225440158E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999983379184775	WITHOUT_CLASSIFICATION	1.6620815225440158E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997659047335	WITHOUT_CLASSIFICATION	2.3409526650986756E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999992755476753	WITHOUT_CLASSIFICATION	7.244523246282356E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999192865292	WITHOUT_CLASSIFICATION	8.071347077062271E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999965819137157	WITHOUT_CLASSIFICATION	3.4180862842984624E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999991471041261	WITHOUT_CLASSIFICATION	8.528958740139377E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998971537506	WITHOUT_CLASSIFICATION	1.0284624938430438E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999832703555291	WITHOUT_CLASSIFICATION	1.6729644470841285E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999963739229925	WITHOUT_CLASSIFICATION	3.626077007608122E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999983207190932	WITHOUT_CLASSIFICATION	1.6792809066994457E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.99999988123291	WITHOUT_CLASSIFICATION	1.1876709006539788E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.999999722749087	WITHOUT_CLASSIFICATION	2.772509129325841E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999988092462796	WITHOUT_CLASSIFICATION	1.190753720381006E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999994518326133	WITHOUT_CLASSIFICATION	5.481673866846952E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999975268946086	WITHOUT_CLASSIFICATION	2.47310539128316E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999997545974485	WITHOUT_CLASSIFICATION	2.45402551499879E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997854273854	WITHOUT_CLASSIFICATION	2.145726147081489E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985824837665	WITHOUT_CLASSIFICATION	1.4175162335078853E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.99999996963354	WITHOUT_CLASSIFICATION	3.0366460007532515E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999823043572	WITHOUT_CLASSIFICATION	1.769564281079887E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999993542645	WITHOUT_CLASSIFICATION	6.457354990757845E-9	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999942264509	WITHOUT_CLASSIFICATION	5.773549093860712E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999997614229879	WITHOUT_CLASSIFICATION	2.3857701209772432E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999746433017	WITHOUT_CLASSIFICATION	2.5356698277813823E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999853008064	WITHOUT_CLASSIFICATION	1.4699193655040573E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998369476384905	WITHOUT_CLASSIFICATION	1.6305236150939044E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999992864155471	WITHOUT_CLASSIFICATION	7.135844528510689E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999954264948624	WITHOUT_CLASSIFICATION	4.573505137688955E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999988435805696	WITHOUT_CLASSIFICATION	1.1564194304095235E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997431411832	WITHOUT_CLASSIFICATION	2.5685881680021694E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985895059396	WITHOUT_CLASSIFICATION	1.4104940604373535E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997268891458	WITHOUT_CLASSIFICATION	2.7311085414229255E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.99999848891436	WITHOUT_CLASSIFICATION	1.5110856399628314E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.99999848891436	WITHOUT_CLASSIFICATION	1.5110856399628314E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999998895696257	WITHOUT_CLASSIFICATION	1.1043037429488312E-6	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999994348268922	WITHOUT_CLASSIFICATION	5.651731077576382E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999955209499714	WITHOUT_CLASSIFICATION	4.4790500286641946E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999955209499714	WITHOUT_CLASSIFICATION	4.4790500286641946E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999995716262797	WITHOUT_CLASSIFICATION	4.283737201467178E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999999711406069	WITHOUT_CLASSIFICATION	2.8859393098076355E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999935393766238	WITHOUT_CLASSIFICATION	6.460623376089984E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995188553508	WITHOUT_CLASSIFICATION	4.811446492046216E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999978188054744	WITHOUT_CLASSIFICATION	2.1811945255203966E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999858480520666	WITHOUT_CLASSIFICATION	1.4151947933411364E-5	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999996277623778	WITHOUT_CLASSIFICATION	3.7223762221307384E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999997030495027	WITHOUT_CLASSIFICATION	2.969504973223155E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997811561768	WITHOUT_CLASSIFICATION	2.188438232156447E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997811561768	WITHOUT_CLASSIFICATION	2.188438232156447E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999988150293	WITHOUT_CLASSIFICATION	1.1849707217749406E-9	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998164112603	WITHOUT_CLASSIFICATION	1.8358873964748233E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998164112603	WITHOUT_CLASSIFICATION	1.8358873964748233E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999048349475	WITHOUT_CLASSIFICATION	9.51650524989868E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999995280098728	WITHOUT_CLASSIFICATION	4.7199012726396434E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9916754536349079	WITHOUT_CLASSIFICATION	0.008324546365092072	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.999999866249277	WITHOUT_CLASSIFICATION	1.3375072296463713E-7	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999999954771603	WITHOUT_CLASSIFICATION	4.5228396932422246E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999999871740604	WITHOUT_CLASSIFICATION	1.2825939595800595E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999956589496947	WITHOUT_CLASSIFICATION	4.341050305267231E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999286419493396	WITHOUT_CLASSIFICATION	7.135805066042668E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999784771674	WITHOUT_CLASSIFICATION	2.152283256106018E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999965906687108	WITHOUT_CLASSIFICATION	3.409331289213892E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999857135282	WITHOUT_CLASSIFICATION	1.4286471657119585E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999998189453031	WITHOUT_CLASSIFICATION	1.8105469684857453E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999895908878585	WITHOUT_CLASSIFICATION	1.0409112141331126E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999895908878585	WITHOUT_CLASSIFICATION	1.0409112141331126E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999895908878585	WITHOUT_CLASSIFICATION	1.0409112141331126E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999895908878585	WITHOUT_CLASSIFICATION	1.0409112141331126E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999779469969	WITHOUT_CLASSIFICATION	2.2053003100163542E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999947021499497	WITHOUT_CLASSIFICATION	5.297850050330924E-6	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999934871982565	WITHOUT_CLASSIFICATION	6.512801743525437E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999867646300598	WITHOUT_CLASSIFICATION	1.3235369940315492E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999976525946633	WITHOUT_CLASSIFICATION	2.3474053366513654E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999989285260923	WITHOUT_CLASSIFICATION	1.0714739076599061E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999856799859765	WITHOUT_CLASSIFICATION	1.432001402347859E-5	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999967440103007	WITHOUT_CLASSIFICATION	3.255989699228522E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999840623098	WITHOUT_CLASSIFICATION	1.5937690173009733E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999162982002	WITHOUT_CLASSIFICATION	8.370179986713378E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999991761598228	WITHOUT_CLASSIFICATION	8.23840177194008E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991346512515	WITHOUT_CLASSIFICATION	8.653487484798515E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9962061572431044	WITHOUT_CLASSIFICATION	0.003793842756895608	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999590212112799	WITHOUT_CLASSIFICATION	4.09787887201574E-5	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999962395264188	WITHOUT_CLASSIFICATION	3.760473581246964E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991346512515	WITHOUT_CLASSIFICATION	8.653487484798515E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999650406334326	WITHOUT_CLASSIFICATION	3.4959366567406165E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999977654577	WITHOUT_CLASSIFICATION	2.234542302539663E-9	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999183196456	WITHOUT_CLASSIFICATION	8.168035428729763E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999764676515174	WITHOUT_CLASSIFICATION	2.3532348482628856E-5	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999990812904751	WITHOUT_CLASSIFICATION	9.187095248462414E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999990458328087	WITHOUT_CLASSIFICATION	9.54167191245538E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999972981305	WITHOUT_CLASSIFICATION	2.7018694763729417E-9	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999995902614103	WITHOUT_CLASSIFICATION	4.0973858972947253E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999082698215	WITHOUT_CLASSIFICATION	9.173017853232643E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999968049379	WITHOUT_CLASSIFICATION	3.1950621081384296E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999765325641	WITHOUT_CLASSIFICATION	2.3467435888984332E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998271675036	WITHOUT_CLASSIFICATION	1.7283249634331518E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999980890707745	WITHOUT_CLASSIFICATION	1.9109292255502388E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997912360189658	WITHOUT_CLASSIFICATION	2.087639810342109E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997531143078	WITHOUT_CLASSIFICATION	2.468856922032922E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999995408122539	WITHOUT_CLASSIFICATION	4.5918774610169156E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993562617446	WITHOUT_CLASSIFICATION	6.437382552992008E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999799893441	WITHOUT_CLASSIFICATION	2.0010655905571375E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999996949404664	WITHOUT_CLASSIFICATION	3.050595336112527E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999799893441	WITHOUT_CLASSIFICATION	2.0010655905571375E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999658655637	WITHOUT_CLASSIFICATION	3.413443628617675E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999987155173325	WITHOUT_CLASSIFICATION	1.28448266751828E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999998770123876	WITHOUT_CLASSIFICATION	1.2298761236122473E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999781368765212	WITHOUT_CLASSIFICATION	2.186312347885064E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993562617446	WITHOUT_CLASSIFICATION	6.437382552992008E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999996949404664	WITHOUT_CLASSIFICATION	3.050595336112527E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999658655637	WITHOUT_CLASSIFICATION	3.413443628617675E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995433088298	WITHOUT_CLASSIFICATION	4.5669117018956137E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999997352908645	WITHOUT_CLASSIFICATION	2.647091354542046E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999925476592478	WITHOUT_CLASSIFICATION	7.45234075208875E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999965811322362	WITHOUT_CLASSIFICATION	3.4188677638090974E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999999333536969	WITHOUT_CLASSIFICATION	6.664630313320505E-8	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999023126072	WITHOUT_CLASSIFICATION	9.76873928462788E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985824837665	WITHOUT_CLASSIFICATION	1.4175162335078853E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999987155173325	WITHOUT_CLASSIFICATION	1.28448266751828E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997510022487	WITHOUT_CLASSIFICATION	2.48997751300689E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999996859482613	WITHOUT_CLASSIFICATION	3.140517387309364E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999250658386	WITHOUT_CLASSIFICATION	7.493416147856572E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985824837665	WITHOUT_CLASSIFICATION	1.4175162335078853E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999994302613708	WITHOUT_CLASSIFICATION	5.697386291435557E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985824837665	WITHOUT_CLASSIFICATION	1.4175162335078853E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999321532438	WITHOUT_CLASSIFICATION	6.784675619738382E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999978029210614	WITHOUT_CLASSIFICATION	2.1970789385606487E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999987463741093	WITHOUT_CLASSIFICATION	1.2536258905813078E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999999859359162	WITHOUT_CLASSIFICATION	1.4064083791642764E-7	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999913994629	WITHOUT_CLASSIFICATION	8.600537107601756E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999996082859048	WITHOUT_CLASSIFICATION	3.9171409519148385E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999985361353475	WITHOUT_CLASSIFICATION	1.4638646524459584E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999974024399456	WITHOUT_CLASSIFICATION	2.5975600543397814E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999967895673512	WITHOUT_CLASSIFICATION	3.2104326488076604E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999954959244177	WITHOUT_CLASSIFICATION	4.504075582331641E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999709680575779	WITHOUT_CLASSIFICATION	2.90319424220257E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999991819407148	WITHOUT_CLASSIFICATION	8.180592851163121E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9916754536349079	WITHOUT_CLASSIFICATION	0.008324546365092072	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999984709179712	WITHOUT_CLASSIFICATION	1.5290820287927503E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999835074913319	WITHOUT_CLASSIFICATION	1.6492508668126745E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999994586258071	WITHOUT_CLASSIFICATION	5.413741928991951E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999602493256163	WITHOUT_CLASSIFICATION	3.975067438378324E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998900055981	WITHOUT_CLASSIFICATION	1.0999440188043737E-7	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999075437396	WITHOUT_CLASSIFICATION	9.245626041853839E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999821042025	WITHOUT_CLASSIFICATION	1.7895797558045133E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999943856776308	WITHOUT_CLASSIFICATION	5.614322369229697E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999857178574	WITHOUT_CLASSIFICATION	1.4282142659121177E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999998265598619	WITHOUT_CLASSIFICATION	1.7344013808802871E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9896378984767766	WITHOUT_CLASSIFICATION	0.010362101523223302	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999979407472479	WITHOUT_CLASSIFICATION	2.0592527521049516E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999946324248546	WITHOUT_CLASSIFICATION	5.367575145367163E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999986167448647	WITHOUT_CLASSIFICATION	1.3832551353050488E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999988371767528	WITHOUT_CLASSIFICATION	1.162823247278497E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999631443438968	WITHOUT_CLASSIFICATION	3.6855656103239194E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999982151253923	WITHOUT_CLASSIFICATION	1.7848746076911693E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999923306284	WITHOUT_CLASSIFICATION	7.669371499560987E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999935203486	WITHOUT_CLASSIFICATION	6.4796513752215124E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999823668088945	WITHOUT_CLASSIFICATION	1.7633191105438798E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999763906057468	WITHOUT_CLASSIFICATION	2.360939425322801E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9947500394566451	WITHOUT_CLASSIFICATION	0.0052499605433550004	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999774268352453	WITHOUT_CLASSIFICATION	2.2573164754719415E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999990855289037	WITHOUT_CLASSIFICATION	9.144710962249767E-7	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999898213550265	WITHOUT_CLASSIFICATION	1.017864497357268E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999094995590266	WITHOUT_CLASSIFICATION	9.05004409734572E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999988526293744	WITHOUT_CLASSIFICATION	1.147370625653886E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9901241824972445	WITHOUT_CLASSIFICATION	0.009875817502755504	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999522900059	WITHOUT_CLASSIFICATION	4.770999402288202E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999988655459165	WITHOUT_CLASSIFICATION	1.1344540833922805E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999756001932935	WITHOUT_CLASSIFICATION	2.4399806706524336E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999756001932935	WITHOUT_CLASSIFICATION	2.4399806706524336E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998750353652	WITHOUT_CLASSIFICATION	1.249646348435715E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999974024399456	WITHOUT_CLASSIFICATION	2.5975600543397814E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999987440554648	WITHOUT_CLASSIFICATION	1.2559445351171817E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999974244326424	WITHOUT_CLASSIFICATION	2.575567357596955E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999859850542	WITHOUT_CLASSIFICATION	1.4014945719382783E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998963267166	WITHOUT_CLASSIFICATION	1.0367328343446128E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999901459492021	WITHOUT_CLASSIFICATION	9.854050797829504E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998303065885299	WITHOUT_CLASSIFICATION	1.6969341147003364E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999778578437655	WITHOUT_CLASSIFICATION	2.2142156234565455E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999978302864748	WITHOUT_CLASSIFICATION	2.1697135251392116E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999345470402	WITHOUT_CLASSIFICATION	6.545295989418627E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999763596678	WITHOUT_CLASSIFICATION	2.3640332157444057E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999996035753189	WITHOUT_CLASSIFICATION	3.96424681079271E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999123922264848	WITHOUT_CLASSIFICATION	8.760777351523804E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996790777624	WITHOUT_CLASSIFICATION	3.209222375695657E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997639927926	WITHOUT_CLASSIFICATION	2.360072072948532E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999358451488	WITHOUT_CLASSIFICATION	6.415485123131307E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999812206626	WITHOUT_CLASSIFICATION	1.8779337335528303E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999639600059	WITHOUT_CLASSIFICATION	3.6039994074212846E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998739702834	WITHOUT_CLASSIFICATION	1.2602971650845498E-7	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999955804839	WITHOUT_CLASSIFICATION	4.419516079024277E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999070513317	WITHOUT_CLASSIFICATION	9.294866824896906E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997349283392	WITHOUT_CLASSIFICATION	2.6507166086509885E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999890987776	WITHOUT_CLASSIFICATION	1.0901222398989704E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9901241824972445	WITHOUT_CLASSIFICATION	0.009875817502755504	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999997807063143	WITHOUT_CLASSIFICATION	2.1929368569353912E-7	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999842998173	WITHOUT_CLASSIFICATION	1.5700182715639638E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999734607855	WITHOUT_CLASSIFICATION	2.6539214445650992E-8	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999992029381058	WITHOUT_CLASSIFICATION	7.970618942021642E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999998558031084	WITHOUT_CLASSIFICATION	1.4419689173203619E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999998721275317	WITHOUT_CLASSIFICATION	1.2787246820284843E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999067299895122	WITHOUT_CLASSIFICATION	9.327001048784272E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999995274693234	WITHOUT_CLASSIFICATION	4.725306766204641E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999999822756248	WITHOUT_CLASSIFICATION	1.7724375206053323E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999996432031846	WITHOUT_CLASSIFICATION	3.567968153932223E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999996620123666	WITHOUT_CLASSIFICATION	3.379876333756016E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9997957459971067	WITHOUT_CLASSIFICATION	2.042540028932922E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999782836052885	WITHOUT_CLASSIFICATION	2.17163947114834E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999994764979894	WITHOUT_CLASSIFICATION	5.235020106925102E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999526345296	WITHOUT_CLASSIFICATION	4.7365470480361264E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999526345296	WITHOUT_CLASSIFICATION	4.7365470480361264E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999998432355323	WITHOUT_CLASSIFICATION	1.5676446784216763E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999996826318535	WITHOUT_CLASSIFICATION	3.173681464608351E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999919506374808	WITHOUT_CLASSIFICATION	8.049362519140278E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999919506374808	WITHOUT_CLASSIFICATION	8.049362519140278E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999890078725	WITHOUT_CLASSIFICATION	1.099212757566296E-8	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999992519773151	WITHOUT_CLASSIFICATION	7.480226849330972E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999796489365	WITHOUT_CLASSIFICATION	2.0351063460801797E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999994496091847	WITHOUT_CLASSIFICATION	5.503908153018065E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999976824360054	WITHOUT_CLASSIFICATION	2.317563994559204E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999454642279	WITHOUT_CLASSIFICATION	5.453577209230359E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999811735394	WITHOUT_CLASSIFICATION	1.882646058467683E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999811735394	WITHOUT_CLASSIFICATION	1.882646058467683E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999985503169243	WITHOUT_CLASSIFICATION	1.4496830757476768E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999996490787255	WITHOUT_CLASSIFICATION	3.509212744248317E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999986268931262	WITHOUT_CLASSIFICATION	1.3731068738099969E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999698264548	WITHOUT_CLASSIFICATION	3.017354525553654E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999698264548	WITHOUT_CLASSIFICATION	3.017354525553654E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999997797671263	WITHOUT_CLASSIFICATION	2.2023287360723522E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999567008305	WITHOUT_CLASSIFICATION	4.329916949641908E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999859317977258	WITHOUT_CLASSIFICATION	1.4068202274302491E-5	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999995447970295	WITHOUT_CLASSIFICATION	4.552029706179849E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996865693438	WITHOUT_CLASSIFICATION	3.1343065617047694E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998151359512	WITHOUT_CLASSIFICATION	1.8486404891069753E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999514361175	WITHOUT_CLASSIFICATION	4.856388238632233E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998909140166	WITHOUT_CLASSIFICATION	1.0908598338747784E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998980057581	WITHOUT_CLASSIFICATION	1.0199424198958736E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999994271182028	WITHOUT_CLASSIFICATION	5.728817972066201E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998456041581	WITHOUT_CLASSIFICATION	1.5439584186322026E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999978127435597	WITHOUT_CLASSIFICATION	2.1872564402219016E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9998610102413678	WITHOUT_CLASSIFICATION	1.3898975863225208E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999989848138473	WITHOUT_CLASSIFICATION	1.0151861528017232E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999983309278286	WITHOUT_CLASSIFICATION	1.6690721713145954E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999953576435632	WITHOUT_CLASSIFICATION	4.642356436779578E-6	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999870972756	WITHOUT_CLASSIFICATION	1.2902724338648818E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999991425930406	WITHOUT_CLASSIFICATION	8.57406959416532E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999996503708022	WITHOUT_CLASSIFICATION	3.4962919782550353E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999993727800012	WITHOUT_CLASSIFICATION	6.272199988322068E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999999875206473	WITHOUT_CLASSIFICATION	1.2479352694379812E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999996830006824	WITHOUT_CLASSIFICATION	3.1699931748472043E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999824572604248	WITHOUT_CLASSIFICATION	1.754273957521087E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999149069614588	WITHOUT_CLASSIFICATION	8.509303854122252E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999794494965307	WITHOUT_CLASSIFICATION	2.0550503469376905E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999995841829105	WITHOUT_CLASSIFICATION	4.1581708946156043E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999995427376134	WITHOUT_CLASSIFICATION	4.572623865352206E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999788154053141	WITHOUT_CLASSIFICATION	2.118459468594588E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999958530698	WITHOUT_CLASSIFICATION	4.146930325693333E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999826263515	WITHOUT_CLASSIFICATION	1.737364856978064E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998821599989	WITHOUT_CLASSIFICATION	1.1784000108201197E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999713482705	WITHOUT_CLASSIFICATION	2.8651729541325456E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999911910208	WITHOUT_CLASSIFICATION	8.808979209261914E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999974126679677	WITHOUT_CLASSIFICATION	2.5873320323663336E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999761846851	WITHOUT_CLASSIFICATION	2.3815314900855286E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999698796662387	WITHOUT_CLASSIFICATION	3.0120333761191536E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999771295002121	WITHOUT_CLASSIFICATION	2.2870499787963442E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999987039020882	WITHOUT_CLASSIFICATION	1.2960979117399626E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999993939434366	WITHOUT_CLASSIFICATION	6.060565634432692E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999613241182	WITHOUT_CLASSIFICATION	3.8675881798631825E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998781276963	WITHOUT_CLASSIFICATION	1.2187230366946152E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999994629824298	WITHOUT_CLASSIFICATION	5.370175701316833E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.999999648324044	WITHOUT_CLASSIFICATION	3.5167595603151204E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999500225019	WITHOUT_CLASSIFICATION	4.9977498284802836E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999993797241001	WITHOUT_CLASSIFICATION	6.202758998890276E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999998809446453	WITHOUT_CLASSIFICATION	1.1905535473998813E-7	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999996048419983	WITHOUT_CLASSIFICATION	3.9515800159933087E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999927377487581	WITHOUT_CLASSIFICATION	7.262251241840983E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999995848631623	WITHOUT_CLASSIFICATION	4.1513683761958174E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999910324624197	WITHOUT_CLASSIFICATION	8.967537580214147E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999995587464632	WITHOUT_CLASSIFICATION	4.4125353686421514E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999581071071	WITHOUT_CLASSIFICATION	4.189289299699812E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999934556222625	WITHOUT_CLASSIFICATION	6.544377737613887E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999846001119	WITHOUT_CLASSIFICATION	1.539988812339862E-8	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999995435448579	WITHOUT_CLASSIFICATION	4.5645514208693746E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996257002146	WITHOUT_CLASSIFICATION	3.7429978544198457E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998811405691	WITHOUT_CLASSIFICATION	1.1885943078896642E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999717027417	WITHOUT_CLASSIFICATION	2.829725829713699E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999997698585003	WITHOUT_CLASSIFICATION	2.3014149965942876E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999727331139752	WITHOUT_CLASSIFICATION	2.726688602479833E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999460932936	WITHOUT_CLASSIFICATION	5.390670639438746E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999460932936	WITHOUT_CLASSIFICATION	5.390670639438746E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998318155265082	WITHOUT_CLASSIFICATION	1.681844734916383E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999923741219971	WITHOUT_CLASSIFICATION	7.625878002910016E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999538115458	WITHOUT_CLASSIFICATION	4.6188454165930256E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999512522347	WITHOUT_CLASSIFICATION	4.874776529976371E-7	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999993044318821	WITHOUT_CLASSIFICATION	6.95568117983868E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999987729817534	WITHOUT_CLASSIFICATION	1.2270182465535502E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999998691705698	WITHOUT_CLASSIFICATION	1.3082943017951448E-7	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999960966471	WITHOUT_CLASSIFICATION	3.903352816634476E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999990334396003	WITHOUT_CLASSIFICATION	9.6656039978308E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999957098129372	WITHOUT_CLASSIFICATION	4.290187062796192E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999320960784	WITHOUT_CLASSIFICATION	6.790392150224819E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999944925853633	WITHOUT_CLASSIFICATION	5.507414636615178E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998552373534	WITHOUT_CLASSIFICATION	1.4476264669527013E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999459724177	WITHOUT_CLASSIFICATION	5.402758219767991E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993992266006	WITHOUT_CLASSIFICATION	6.00773399271573E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999993992266006	WITHOUT_CLASSIFICATION	6.00773399271573E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999210544431	WITHOUT_CLASSIFICATION	7.89455568654146E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999993797856159	WITHOUT_CLASSIFICATION	6.202143839993796E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996885899943	WITHOUT_CLASSIFICATION	3.1141000562099784E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999805837949	WITHOUT_CLASSIFICATION	1.9416205120569954E-8	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997970381825	WITHOUT_CLASSIFICATION	2.029618173522223E-7	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964799014845	WITHOUT_CLASSIFICATION	3.520098515373046E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999958666121294	WITHOUT_CLASSIFICATION	4.133387870593487E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999873822135064	WITHOUT_CLASSIFICATION	1.2617786493682694E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999971060427	WITHOUT_CLASSIFICATION	2.8939572695586568E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999213499867271	WITHOUT_CLASSIFICATION	7.865001327285115E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999972897146	WITHOUT_CLASSIFICATION	2.7102854762706234E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999977227875847	WITHOUT_CLASSIFICATION	2.277212415370776E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999791232023	WITHOUT_CLASSIFICATION	2.0876797768081298E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999995084215128	WITHOUT_CLASSIFICATION	4.915784872711712E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999974756862212	WITHOUT_CLASSIFICATION	2.5243137786970034E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999994072543023	WITHOUT_CLASSIFICATION	5.927456977883013E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999985773229018	WITHOUT_CLASSIFICATION	1.4226770981834653E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999888601607763	WITHOUT_CLASSIFICATION	1.113983922375838E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999011327111	WITHOUT_CLASSIFICATION	9.886728889514124E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999877687472	WITHOUT_CLASSIFICATION	1.2231252837610723E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999353987921	WITHOUT_CLASSIFICATION	6.46012079077348E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999791647696	WITHOUT_CLASSIFICATION	2.083523052793073E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998587121541	WITHOUT_CLASSIFICATION	1.412878458512496E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999751705479071	WITHOUT_CLASSIFICATION	2.4829452092910358E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997640348920628	WITHOUT_CLASSIFICATION	2.3596510793727954E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999994693508588	WITHOUT_CLASSIFICATION	5.306491411778274E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999884337295	WITHOUT_CLASSIFICATION	1.1566270486079539E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999613363868	WITHOUT_CLASSIFICATION	3.86636131474216E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999869331761356	WITHOUT_CLASSIFICATION	1.306682386425036E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998090378182	WITHOUT_CLASSIFICATION	1.9096218182433562E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999409182539735	WITHOUT_CLASSIFICATION	5.9081746026508506E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999111330425	WITHOUT_CLASSIFICATION	8.886695739774513E-8	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999974815088	WITHOUT_CLASSIFICATION	2.5184911997292547E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999950045929	WITHOUT_CLASSIFICATION	4.99540709382671E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999998375049126	WITHOUT_CLASSIFICATION	1.6249508739211984E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998299211642	WITHOUT_CLASSIFICATION	1.7007883584390214E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999618974258	WITHOUT_CLASSIFICATION	3.810257411795813E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999964023840551	WITHOUT_CLASSIFICATION	3.597615944905724E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999986583453867	WITHOUT_CLASSIFICATION	1.3416546132274205E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999998681298733	WITHOUT_CLASSIFICATION	1.31870126758795E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995799317404	WITHOUT_CLASSIFICATION	4.2006825963113877E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995799317404	WITHOUT_CLASSIFICATION	4.2006825963113877E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999995088749725	WITHOUT_CLASSIFICATION	4.911250275261048E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999986363086325	WITHOUT_CLASSIFICATION	1.3636913674868456E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999767483398	WITHOUT_CLASSIFICATION	2.3251660165271778E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999428008135	WITHOUT_CLASSIFICATION	5.719918641835154E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999283317742	WITHOUT_CLASSIFICATION	7.166822589947854E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999849911818	WITHOUT_CLASSIFICATION	1.5008818093047622E-8	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999997366034175	WITHOUT_CLASSIFICATION	2.633965824928376E-7	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999978592234641	WITHOUT_CLASSIFICATION	2.140776535933285E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999992064551	WITHOUT_CLASSIFICATION	7.935448873307608E-9	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995566740851	WITHOUT_CLASSIFICATION	4.4332591490036726E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999576641342	WITHOUT_CLASSIFICATION	4.233586580813728E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999914449346064	WITHOUT_CLASSIFICATION	8.555065393597184E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999481838229304	WITHOUT_CLASSIFICATION	5.181617706958496E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999995670344384	WITHOUT_CLASSIFICATION	4.329655615952864E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999978497526307	WITHOUT_CLASSIFICATION	2.1502473693025953E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999989161525699	WITHOUT_CLASSIFICATION	1.0838474301659545E-6	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999660373519	WITHOUT_CLASSIFICATION	3.39626481343525E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999980848179	WITHOUT_CLASSIFICATION	1.9151821058160813E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999986798894924	WITHOUT_CLASSIFICATION	1.3201105076187453E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999991413366615	WITHOUT_CLASSIFICATION	8.5866333848305E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996550437775	WITHOUT_CLASSIFICATION	3.4495622251094334E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998717342534	WITHOUT_CLASSIFICATION	1.2826574647698884E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999936936912819	WITHOUT_CLASSIFICATION	6.30630871808576E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999952533984588	WITHOUT_CLASSIFICATION	4.746601541205154E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999918966905634	WITHOUT_CLASSIFICATION	8.103309436529585E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999958292285076	WITHOUT_CLASSIFICATION	4.170771492365528E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999740572387	WITHOUT_CLASSIFICATION	2.5942761274488156E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.99999628220962	WITHOUT_CLASSIFICATION	3.717790380091544E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998634430255	WITHOUT_CLASSIFICATION	1.3655697449866572E-7	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999321391534	WITHOUT_CLASSIFICATION	6.786084663884667E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999393149024	WITHOUT_CLASSIFICATION	6.068509755839281E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999994765651832	WITHOUT_CLASSIFICATION	5.234348168425791E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999255209688	WITHOUT_CLASSIFICATION	7.447903108183881E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999907106562	WITHOUT_CLASSIFICATION	9.289343887733512E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999949120486277	WITHOUT_CLASSIFICATION	5.087951372332653E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999035861952	WITHOUT_CLASSIFICATION	9.641380476625469E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998208750004	WITHOUT_CLASSIFICATION	1.7912499953257764E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998129634051	WITHOUT_CLASSIFICATION	1.8703659493898369E-7	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999842186608082	WITHOUT_CLASSIFICATION	1.5781339191824483E-5	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999968662856846	WITHOUT_CLASSIFICATION	3.133714315341387E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994033808622	WITHOUT_CLASSIFICATION	5.966191377577181E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999708673508	WITHOUT_CLASSIFICATION	2.9132649082384364E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999871558648	WITHOUT_CLASSIFICATION	1.2844135072835739E-8	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998151098223695	WITHOUT_CLASSIFICATION	1.848901776304207E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999997061650374	WITHOUT_CLASSIFICATION	2.9383496253023503E-7	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999996289440335	WITHOUT_CLASSIFICATION	3.7105596655829156E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997030002469	WITHOUT_CLASSIFICATION	2.9699975309400406E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998552373534	WITHOUT_CLASSIFICATION	1.4476264669527013E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999988432288769	WITHOUT_CLASSIFICATION	1.1567711231487405E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999191756589	WITHOUT_CLASSIFICATION	8.082434103747432E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999998179576286	WITHOUT_CLASSIFICATION	1.8204237136188528E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999996719859752	WITHOUT_CLASSIFICATION	3.2801402483327175E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999970774619	WITHOUT_CLASSIFICATION	2.9225381010981886E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999752009684	WITHOUT_CLASSIFICATION	2.4799031668800502E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999939410741971	WITHOUT_CLASSIFICATION	6.058925802846641E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999488113882251	WITHOUT_CLASSIFICATION	5.118861177494431E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999992662113251	WITHOUT_CLASSIFICATION	7.337886749060418E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999996003082876	WITHOUT_CLASSIFICATION	3.996917125001141E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999151906299	WITHOUT_CLASSIFICATION	8.480937012717126E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997856013578	WITHOUT_CLASSIFICATION	2.143986422446523E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999982952314139	WITHOUT_CLASSIFICATION	1.7047685860383743E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998776870989	WITHOUT_CLASSIFICATION	1.2231290107163355E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996479444893	WITHOUT_CLASSIFICATION	3.520555107080702E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999940658416339	WITHOUT_CLASSIFICATION	5.9341583662018766E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999945114032264	WITHOUT_CLASSIFICATION	5.488596773705853E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999593199458	WITHOUT_CLASSIFICATION	4.068005423198981E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999960747710531	WITHOUT_CLASSIFICATION	3.925228946893027E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996479444893	WITHOUT_CLASSIFICATION	3.520555107080702E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9982305380233712	WITHOUT_CLASSIFICATION	0.0017694619766287843	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999995338757792	WITHOUT_CLASSIFICATION	4.661242208066056E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998604237668	WITHOUT_CLASSIFICATION	1.395762332040309E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999791601354	WITHOUT_CLASSIFICATION	2.0839864605770007E-7	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999887167103535	WITHOUT_CLASSIFICATION	1.1283289646632659E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998547682231	WITHOUT_CLASSIFICATION	1.452317769336055E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999500615723	WITHOUT_CLASSIFICATION	4.993842778346501E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999852453592342	WITHOUT_CLASSIFICATION	1.4754640765775009E-5	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999092271858	WITHOUT_CLASSIFICATION	9.077281414133032E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998517009203	WITHOUT_CLASSIFICATION	1.48299079621442E-7	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999996476307572	WITHOUT_CLASSIFICATION	3.523692427924828E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996949156477808	WITHOUT_CLASSIFICATION	3.0508435221921235E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999958919037	WITHOUT_CLASSIFICATION	4.108096378268074E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999605260648	WITHOUT_CLASSIFICATION	3.947393535903951E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999999932486426	WITHOUT_CLASSIFICATION	6.751357392536422E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999890987776	WITHOUT_CLASSIFICATION	1.0901222398989704E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999516219197	WITHOUT_CLASSIFICATION	4.837808024818696E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999789160976	WITHOUT_CLASSIFICATION	2.1083902423995117E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999935498868252	WITHOUT_CLASSIFICATION	6.45011317476726E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999283709636	WITHOUT_CLASSIFICATION	7.16290363867642E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999727768314	WITHOUT_CLASSIFICATION	2.7223168697441372E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998590652301	WITHOUT_CLASSIFICATION	1.4093476989510254E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999983959127	WITHOUT_CLASSIFICATION	1.6040873640736548E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999985268717	WITHOUT_CLASSIFICATION	1.4731283246918193E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999982174164	WITHOUT_CLASSIFICATION	1.7825836647996587E-9	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999992355427201	WITHOUT_CLASSIFICATION	7.644572798513561E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999519331347433	WITHOUT_CLASSIFICATION	4.806686525678182E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999666143295	WITHOUT_CLASSIFICATION	3.338567049256052E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999974913767502	WITHOUT_CLASSIFICATION	2.5086232497543683E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999999560421218	WITHOUT_CLASSIFICATION	4.395787817215511E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998725960825	WITHOUT_CLASSIFICATION	1.274039175068151E-7	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999981977835475	WITHOUT_CLASSIFICATION	1.8022164525958411E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999996804212243	WITHOUT_CLASSIFICATION	3.1957877563527906E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999960365954	WITHOUT_CLASSIFICATION	3.963404646064876E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999765616258	WITHOUT_CLASSIFICATION	2.3438374276317008E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998700077708	WITHOUT_CLASSIFICATION	1.299922292010825E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999918050746008	WITHOUT_CLASSIFICATION	8.194925399206828E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999994734208767	WITHOUT_CLASSIFICATION	5.265791232288262E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999621439978	WITHOUT_CLASSIFICATION	3.7856002231949814E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999188240508	WITHOUT_CLASSIFICATION	8.117594924169603E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998705737317	WITHOUT_CLASSIFICATION	1.2942626829788918E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998705737317	WITHOUT_CLASSIFICATION	1.2942626829788918E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999715798390539	WITHOUT_CLASSIFICATION	2.8420160946141043E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999878354819	WITHOUT_CLASSIFICATION	1.2164518111152128E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999228854151	WITHOUT_CLASSIFICATION	7.711458504198724E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.9992487545930496	WITHOUT_CLASSIFICATION	7.512454069503765E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995188553508	WITHOUT_CLASSIFICATION	4.811446492046216E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995188553508	WITHOUT_CLASSIFICATION	4.811446492046216E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999946774013113	WITHOUT_CLASSIFICATION	5.32259868866562E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999041754432	WITHOUT_CLASSIFICATION	9.582455682342489E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998845011510465	WITHOUT_CLASSIFICATION	1.1549884895350668E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999640445877775	WITHOUT_CLASSIFICATION	3.595541222242692E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999739089645	WITHOUT_CLASSIFICATION	2.6091035501631257E-7	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999989743135534	WITHOUT_CLASSIFICATION	1.025686446594533E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999994164276764	WITHOUT_CLASSIFICATION	5.835723235785874E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999996698680864	WITHOUT_CLASSIFICATION	3.301319135457611E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999365581230416	WITHOUT_CLASSIFICATION	6.344187695841529E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960665730728	WITHOUT_CLASSIFICATION	3.933426927227536E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960665730728	WITHOUT_CLASSIFICATION	3.933426927227536E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999965486199122	WITHOUT_CLASSIFICATION	3.4513800878842727E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977880376829	WITHOUT_CLASSIFICATION	2.21196231712681E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999989731624515	WITHOUT_CLASSIFICATION	1.0268375485677258E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999123408049273	WITHOUT_CLASSIFICATION	8.765919507269503E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999893230920576	WITHOUT_CLASSIFICATION	1.0676907942370814E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999283805753	WITHOUT_CLASSIFICATION	7.161942463543652E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902970699968	WITHOUT_CLASSIFICATION	9.70293000319055E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999996026162735	WITHOUT_CLASSIFICATION	3.973837264428861E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999989940022247	WITHOUT_CLASSIFICATION	1.0059977752810746E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999995176092341	WITHOUT_CLASSIFICATION	4.8239076588338E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999755054832	WITHOUT_CLASSIFICATION	2.4494516801762895E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999998517009203	WITHOUT_CLASSIFICATION	1.48299079621442E-7	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998638749752	WITHOUT_CLASSIFICATION	1.3612502491743207E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999564483907699	WITHOUT_CLASSIFICATION	4.35516092301419E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999437605096	WITHOUT_CLASSIFICATION	5.623949052608122E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999992512572707	WITHOUT_CLASSIFICATION	7.487427293198067E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999892119714384	WITHOUT_CLASSIFICATION	1.0788028561573251E-5	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999976975827033	WITHOUT_CLASSIFICATION	2.302417296769254E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999519425065411	WITHOUT_CLASSIFICATION	4.80574934588539E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999202716578	WITHOUT_CLASSIFICATION	7.97283421252913E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998999010611	WITHOUT_CLASSIFICATION	1.000989389110882E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999981593529707	WITHOUT_CLASSIFICATION	1.8406470293792055E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999981593529707	WITHOUT_CLASSIFICATION	1.8406470293792055E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991346512515	WITHOUT_CLASSIFICATION	8.653487484798515E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999993345905	WITHOUT_CLASSIFICATION	6.654094087466554E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999701810633738	WITHOUT_CLASSIFICATION	2.98189366262453E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999168238277	WITHOUT_CLASSIFICATION	8.317617227452213E-8	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997254052779	WITHOUT_CLASSIFICATION	2.745947220545155E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999825992889	WITHOUT_CLASSIFICATION	1.7400711103553168E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997531143078	WITHOUT_CLASSIFICATION	2.468856922032922E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999801533481	WITHOUT_CLASSIFICATION	1.9846651865838637E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995433088298	WITHOUT_CLASSIFICATION	4.5669117018956137E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999975685325341	WITHOUT_CLASSIFICATION	2.4314674659510973E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985824837665	WITHOUT_CLASSIFICATION	1.4175162335078853E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999911334277073	WITHOUT_CLASSIFICATION	8.866572292750869E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998234415675	WITHOUT_CLASSIFICATION	1.7655843259425554E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999995248920058	WITHOUT_CLASSIFICATION	4.7510799410543183E-7	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997839595512	WITHOUT_CLASSIFICATION	2.1604044870450192E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999776392853	WITHOUT_CLASSIFICATION	2.236071467248883E-8	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998957773452	WITHOUT_CLASSIFICATION	1.0422265488028914E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968341676119	WITHOUT_CLASSIFICATION	3.165832388130765E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999993272232192	WITHOUT_CLASSIFICATION	6.727767809169033E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999032207298	WITHOUT_CLASSIFICATION	9.677927018183874E-8	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998826175301	WITHOUT_CLASSIFICATION	1.1738246983095391E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995536166773	WITHOUT_CLASSIFICATION	4.4638332267185646E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999859317977258	WITHOUT_CLASSIFICATION	1.4068202274302491E-5	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998886006781	WITHOUT_CLASSIFICATION	1.1139932185057135E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999875595151	WITHOUT_CLASSIFICATION	1.2440484927261989E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999875595151	WITHOUT_CLASSIFICATION	1.2440484927261989E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999954053002139	WITHOUT_CLASSIFICATION	4.594699786129016E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996102402916	WITHOUT_CLASSIFICATION	3.8975970836301526E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999691141745	WITHOUT_CLASSIFICATION	3.088582551766624E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999619685516	WITHOUT_CLASSIFICATION	3.8031448412043514E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997536405598	WITHOUT_CLASSIFICATION	2.4635944024249703E-7	TEST
