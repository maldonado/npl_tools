test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998826978125981	WITHOUT_CLASSIFICATION	1.173021874018753E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998704313082715	WITHOUT_CLASSIFICATION	1.295686917284797E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999974971118812	WITHOUT_CLASSIFICATION	2.5028881187350705E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999957578863934	WITHOUT_CLASSIFICATION	4.242113606716928E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997980626705	WITHOUT_CLASSIFICATION	2.0193732944568139E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997980626705	WITHOUT_CLASSIFICATION	2.0193732944568139E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998062834993	WITHOUT_CLASSIFICATION	1.9371650084828526E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998684060311	WITHOUT_CLASSIFICATION	1.3159396891413121E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999991582355315	WITHOUT_CLASSIFICATION	8.417644685993856E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999963666214271	WITHOUT_CLASSIFICATION	3.6333785729012024E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999876295299444	WITHOUT_CLASSIFICATION	1.2370470055674086E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999876295299444	WITHOUT_CLASSIFICATION	1.2370470055674086E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998421511571859	WITHOUT_CLASSIFICATION	1.5784884281416463E-4	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999999952131852	WITHOUT_CLASSIFICATION	4.786814806065041E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999991202807429	WITHOUT_CLASSIFICATION	8.797192571842315E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990024754244	WITHOUT_CLASSIFICATION	9.975245756352288E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998652493048	WITHOUT_CLASSIFICATION	1.3475069523807112E-7	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9997861112791447	WITHOUT_CLASSIFICATION	2.138887208553513E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.999959969842416	WITHOUT_CLASSIFICATION	4.003015758402823E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9996562852341481	WITHOUT_CLASSIFICATION	3.437147658519297E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995116715752229	WITHOUT_CLASSIFICATION	4.883284247771675E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997252918714	WITHOUT_CLASSIFICATION	2.7470812855996585E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999518394605647	WITHOUT_CLASSIFICATION	4.816053943535725E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9998883838302969	WITHOUT_CLASSIFICATION	1.1161616970310265E-4	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994280226228	WITHOUT_CLASSIFICATION	5.719773771620003E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999067572952134	WITHOUT_CLASSIFICATION	9.324270478652413E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999067572952134	WITHOUT_CLASSIFICATION	9.324270478652413E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999968136526323	WITHOUT_CLASSIFICATION	3.1863473676443298E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9998045433728197	WITHOUT_CLASSIFICATION	1.9545662718022713E-4	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999785305769	WITHOUT_CLASSIFICATION	2.1469423168080653E-8	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999983261843	WITHOUT_CLASSIFICATION	1.673815694106927E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999946334953338	WITHOUT_CLASSIFICATION	5.366504666280713E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999997946368089	WITHOUT_CLASSIFICATION	2.053631911383081E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.999995916363287	WITHOUT_CLASSIFICATION	4.083636713033199E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999996027455528	WITHOUT_CLASSIFICATION	3.972544471873327E-7	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999622214791	WITHOUT_CLASSIFICATION	3.7778520739829694E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999971650148983	WITHOUT_CLASSIFICATION	2.8349851015267956E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998096780935	WITHOUT_CLASSIFICATION	1.9032190641866274E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999919090566923	WITHOUT_CLASSIFICATION	8.09094330769694E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999998636982906	WITHOUT_CLASSIFICATION	1.3630170941754773E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998158462948	WITHOUT_CLASSIFICATION	1.8415370521814252E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999995433783784	WITHOUT_CLASSIFICATION	4.5662162159996167E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953840145217	WITHOUT_CLASSIFICATION	4.615985478285927E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789773164766	WITHOUT_CLASSIFICATION	2.102268352337869E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998724648426	WITHOUT_CLASSIFICATION	1.2753515752554027E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994485142288	WITHOUT_CLASSIFICATION	5.514857711974844E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999940162905536	WITHOUT_CLASSIFICATION	5.983709446395296E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999799065828	WITHOUT_CLASSIFICATION	2.009341716082364E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999990676792632	WITHOUT_CLASSIFICATION	9.323207367791596E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999940162905536	WITHOUT_CLASSIFICATION	5.983709446395296E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999990676792632	WITHOUT_CLASSIFICATION	9.323207367791596E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999178097796	WITHOUT_CLASSIFICATION	8.219022040644917E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9956631671775241	WITHOUT_CLASSIFICATION	0.004336832822475879	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999967921381656	WITHOUT_CLASSIFICATION	3.207861834500799E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999964414460897	WITHOUT_CLASSIFICATION	3.558553910452585E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999842110794959	WITHOUT_CLASSIFICATION	1.578892050417467E-5	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999976926024503	WITHOUT_CLASSIFICATION	2.307397549693207E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998881420264355	WITHOUT_CLASSIFICATION	1.1185797356459808E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999968468484062	WITHOUT_CLASSIFICATION	3.1531515937873156E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999985220274163	WITHOUT_CLASSIFICATION	1.4779725837473863E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999318459266584	WITHOUT_CLASSIFICATION	6.81540733415802E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999993865186007	WITHOUT_CLASSIFICATION	6.134813993136505E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999990676792632	WITHOUT_CLASSIFICATION	9.323207367791596E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998691296258	WITHOUT_CLASSIFICATION	1.3087037418550407E-7	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999997724520074	WITHOUT_CLASSIFICATION	2.275479925550318E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.999999826693072	WITHOUT_CLASSIFICATION	1.7330692794940874E-7	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999884548870454	WITHOUT_CLASSIFICATION	1.1545112954588048E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998382998753	WITHOUT_CLASSIFICATION	1.6170012464060612E-7	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999997898680472	WITHOUT_CLASSIFICATION	2.1013195281053962E-7	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999986606696616	WITHOUT_CLASSIFICATION	1.3393303383608925E-6	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999992112989685	WITHOUT_CLASSIFICATION	7.887010315473668E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999983996626307	WITHOUT_CLASSIFICATION	1.6003373692438408E-6	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999289606057	WITHOUT_CLASSIFICATION	7.103939424491573E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999330730844	WITHOUT_CLASSIFICATION	6.692691552217544E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999922079215948	WITHOUT_CLASSIFICATION	7.792078405108778E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999986189467108	WITHOUT_CLASSIFICATION	1.3810532891402884E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999481609388	WITHOUT_CLASSIFICATION	5.183906108994468E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999969065596	WITHOUT_CLASSIFICATION	3.093440472193992E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999996156931384	WITHOUT_CLASSIFICATION	3.8430686160330454E-7	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999995935749898	WITHOUT_CLASSIFICATION	4.0642501011551944E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999997412667966	WITHOUT_CLASSIFICATION	2.587332034011376E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999988134336717	WITHOUT_CLASSIFICATION	1.1865663283136508E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999640234523	WITHOUT_CLASSIFICATION	3.597654769386225E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999994216697439	WITHOUT_CLASSIFICATION	5.783302561804772E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999749515606	WITHOUT_CLASSIFICATION	2.504843952408818E-8	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999988375033696	WITHOUT_CLASSIFICATION	1.1624966304616507E-6	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999983920117222	WITHOUT_CLASSIFICATION	1.6079882777879446E-6	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999749515606	WITHOUT_CLASSIFICATION	2.504843952408818E-8	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997682343358	WITHOUT_CLASSIFICATION	2.3176566433692507E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997112069571	WITHOUT_CLASSIFICATION	2.8879304290721983E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999940162905536	WITHOUT_CLASSIFICATION	5.983709446395296E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999995113022238	WITHOUT_CLASSIFICATION	4.886977763750054E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999998581692232	WITHOUT_CLASSIFICATION	1.4183077678039194E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999420058169	WITHOUT_CLASSIFICATION	5.799418318744741E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999420058169	WITHOUT_CLASSIFICATION	5.799418318744741E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999971939337358	WITHOUT_CLASSIFICATION	2.8060662642259415E-6	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999988957360688	WITHOUT_CLASSIFICATION	1.1042639311283673E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999997938141584	WITHOUT_CLASSIFICATION	2.0618584156231912E-7	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999962192816	WITHOUT_CLASSIFICATION	3.780718410347671E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999994349030724	WITHOUT_CLASSIFICATION	5.650969276018476E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999997327868071	WITHOUT_CLASSIFICATION	2.6721319290487053E-7	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999990644595078	WITHOUT_CLASSIFICATION	9.355404922168248E-7	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999997050529476	WITHOUT_CLASSIFICATION	2.9494705250245373E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999990568936165	WITHOUT_CLASSIFICATION	9.431063835906792E-7	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996319926041	WITHOUT_CLASSIFICATION	3.6800739579533905E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987498056189	WITHOUT_CLASSIFICATION	1.250194381162114E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987498056189	WITHOUT_CLASSIFICATION	1.250194381162114E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999159219042	WITHOUT_CLASSIFICATION	8.407809581120313E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998419910754	WITHOUT_CLASSIFICATION	1.580089245875009E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999995864869073	WITHOUT_CLASSIFICATION	4.1351309269163975E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987498056189	WITHOUT_CLASSIFICATION	1.250194381162114E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999159219042	WITHOUT_CLASSIFICATION	8.407809581120313E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999159219042	WITHOUT_CLASSIFICATION	8.407809581120313E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999483869833227	WITHOUT_CLASSIFICATION	5.161301667727642E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999986252229042	WITHOUT_CLASSIFICATION	1.3747770957789628E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999994768319523	WITHOUT_CLASSIFICATION	5.231680476547924E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999975723886035	WITHOUT_CLASSIFICATION	2.427611396408206E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999954338863034	WITHOUT_CLASSIFICATION	4.566113696597952E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999954338863034	WITHOUT_CLASSIFICATION	4.566113696597952E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999989803287752	WITHOUT_CLASSIFICATION	1.0196712247970673E-6	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999992423576278	WITHOUT_CLASSIFICATION	7.57642372038882E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999987070288501	WITHOUT_CLASSIFICATION	1.2929711498742826E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.99999958101104	WITHOUT_CLASSIFICATION	4.189889600963056E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.99999958101104	WITHOUT_CLASSIFICATION	4.189889600963056E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999995865927549	WITHOUT_CLASSIFICATION	4.134072451927546E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999918400983729	WITHOUT_CLASSIFICATION	8.159901627069191E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999997280566145	WITHOUT_CLASSIFICATION	2.719433854945928E-7	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999996017106431	WITHOUT_CLASSIFICATION	3.9828935700078785E-7	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999936816221782	WITHOUT_CLASSIFICATION	6.318377821832078E-6	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999434349407	WITHOUT_CLASSIFICATION	5.656505929408197E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999993596926707	WITHOUT_CLASSIFICATION	6.403073293114619E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997209039874	WITHOUT_CLASSIFICATION	2.790960126463654E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999966579332886	WITHOUT_CLASSIFICATION	3.342066711304133E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999997280566145	WITHOUT_CLASSIFICATION	2.719433854945928E-7	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999938736799588	WITHOUT_CLASSIFICATION	6.12632004107956E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999576261670947	WITHOUT_CLASSIFICATION	4.2373832905319946E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999576261670947	WITHOUT_CLASSIFICATION	4.2373832905319946E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999994097263003	WITHOUT_CLASSIFICATION	5.902736996932869E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999683587897449	WITHOUT_CLASSIFICATION	3.164121025514047E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999027718823	WITHOUT_CLASSIFICATION	9.722811759133554E-8	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999568853835	WITHOUT_CLASSIFICATION	4.3114616494105027E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999905686624165	WITHOUT_CLASSIFICATION	9.431337583475803E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999976450802831	WITHOUT_CLASSIFICATION	2.35491971686167E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999962760259196	WITHOUT_CLASSIFICATION	3.72397408046204E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999983378625855	WITHOUT_CLASSIFICATION	1.6621374144796815E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999999981832483	WITHOUT_CLASSIFICATION	1.816751703010898E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998598603936	WITHOUT_CLASSIFICATION	1.401396063888888E-7	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998598603936	WITHOUT_CLASSIFICATION	1.401396063888888E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998826978125981	WITHOUT_CLASSIFICATION	1.173021874018753E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992659386244	WITHOUT_CLASSIFICATION	7.34061375561964E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999962872765203	WITHOUT_CLASSIFICATION	3.712723479694056E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999934638822	WITHOUT_CLASSIFICATION	6.536117799898575E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999966249007911	WITHOUT_CLASSIFICATION	3.375099208899728E-6	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999952258856378	WITHOUT_CLASSIFICATION	4.774114362134721E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999963902174746	WITHOUT_CLASSIFICATION	3.609782525418305E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999987895967567	WITHOUT_CLASSIFICATION	1.2104032432793927E-6	TEST
new	WITHOUT_CLASSIFICATION	0.9998381765304738	WITHOUT_CLASSIFICATION	1.6182346952618525E-4	TEST
dup	WITHOUT_CLASSIFICATION	0.999885102597264	WITHOUT_CLASSIFICATION	1.1489740273595088E-4	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999953504833088	WITHOUT_CLASSIFICATION	4.649516691228482E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999974971118812	WITHOUT_CLASSIFICATION	2.5028881187350705E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999996795466102	WITHOUT_CLASSIFICATION	3.204533898058114E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999996795466102	WITHOUT_CLASSIFICATION	3.204533898058114E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999981493841763	WITHOUT_CLASSIFICATION	1.8506158237566192E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999584663355189	WITHOUT_CLASSIFICATION	4.153366448102345E-5	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999996477503011	WITHOUT_CLASSIFICATION	3.522496988078707E-7	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999939471251875	WITHOUT_CLASSIFICATION	6.052874812476226E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999975370881456	WITHOUT_CLASSIFICATION	2.462911854240003E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999990438592723	WITHOUT_CLASSIFICATION	9.56140727687957E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997980626705	WITHOUT_CLASSIFICATION	2.0193732944568139E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999991909585454	WITHOUT_CLASSIFICATION	8.090414546755553E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999929757108833	WITHOUT_CLASSIFICATION	7.024289116752627E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999976751790379	WITHOUT_CLASSIFICATION	2.324820962079937E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999999270913665	WITHOUT_CLASSIFICATION	7.290863349441018E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999919289509466	WITHOUT_CLASSIFICATION	8.071049053487832E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999621589282923	WITHOUT_CLASSIFICATION	3.7841071707708875E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999951101603679	WITHOUT_CLASSIFICATION	4.889839632203285E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999718151182	WITHOUT_CLASSIFICATION	2.818488179601533E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994550019812	WITHOUT_CLASSIFICATION	5.44998018700399E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998204723134	WITHOUT_CLASSIFICATION	1.7952768675224235E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999994818835746	WITHOUT_CLASSIFICATION	5.181164253099804E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999990070929289	WITHOUT_CLASSIFICATION	9.92907071087887E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.999963331098189	WITHOUT_CLASSIFICATION	3.6668901811060766E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.999885102597264	WITHOUT_CLASSIFICATION	1.1489740273595088E-4	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999996795466102	WITHOUT_CLASSIFICATION	3.204533898058114E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999951101603679	WITHOUT_CLASSIFICATION	4.889839632203285E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998062834993	WITHOUT_CLASSIFICATION	1.9371650084828526E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999990363658752	WITHOUT_CLASSIFICATION	9.636341249104868E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999986311922187	WITHOUT_CLASSIFICATION	1.3688077813639937E-6	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999984387618022	WITHOUT_CLASSIFICATION	1.561238197853253E-6	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999925000666648	WITHOUT_CLASSIFICATION	7.499933335161016E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996233840502	WITHOUT_CLASSIFICATION	3.766159497406806E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999634678236139	WITHOUT_CLASSIFICATION	3.653217638615646E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996372469548	WITHOUT_CLASSIFICATION	3.627530451553377E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999819308514302	WITHOUT_CLASSIFICATION	1.8069148569884696E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999644442022805	WITHOUT_CLASSIFICATION	3.555579771944107E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999707841658617	WITHOUT_CLASSIFICATION	2.9215834138210805E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999707841658617	WITHOUT_CLASSIFICATION	2.9215834138210805E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997866466862	WITHOUT_CLASSIFICATION	2.1335331384297562E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999999740582708	WITHOUT_CLASSIFICATION	2.5941729270327198E-8	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999769083415576	WITHOUT_CLASSIFICATION	2.3091658442379697E-5	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999891208517987	WITHOUT_CLASSIFICATION	1.0879148201314797E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999441079942	WITHOUT_CLASSIFICATION	5.589200577592199E-8	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999299483738	WITHOUT_CLASSIFICATION	7.00516261723423E-8	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999989500917734	WITHOUT_CLASSIFICATION	1.0499082265301512E-6	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998684060311	WITHOUT_CLASSIFICATION	1.3159396891413121E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999939073039208	WITHOUT_CLASSIFICATION	6.092696079227392E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999997831479682	WITHOUT_CLASSIFICATION	2.1685203190384937E-7	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999997831479682	WITHOUT_CLASSIFICATION	2.1685203190384937E-7	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999994422301631	WITHOUT_CLASSIFICATION	5.57769836830674E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999987311982469	WITHOUT_CLASSIFICATION	1.2688017530727308E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999993408721515	WITHOUT_CLASSIFICATION	6.591278484300856E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999209071853	WITHOUT_CLASSIFICATION	7.909281475299547E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999569936100723	WITHOUT_CLASSIFICATION	4.300638992771414E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999958072632233	WITHOUT_CLASSIFICATION	4.1927367765719566E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.999885102597264	WITHOUT_CLASSIFICATION	1.1489740273595088E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999974971118812	WITHOUT_CLASSIFICATION	2.5028881187350705E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999951101603679	WITHOUT_CLASSIFICATION	4.889839632203285E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999951101603679	WITHOUT_CLASSIFICATION	4.889839632203285E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997547365682	WITHOUT_CLASSIFICATION	2.4526343172000476E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997547365682	WITHOUT_CLASSIFICATION	2.4526343172000476E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995042144835	WITHOUT_CLASSIFICATION	4.957855164138938E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999688352813906	WITHOUT_CLASSIFICATION	3.116471860940301E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999688352813906	WITHOUT_CLASSIFICATION	3.116471860940301E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.999997944086725	WITHOUT_CLASSIFICATION	2.055913275063454E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999993871560572	WITHOUT_CLASSIFICATION	6.128439428725465E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999956606027226	WITHOUT_CLASSIFICATION	4.339397277321362E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999992927014741	WITHOUT_CLASSIFICATION	7.072985258728005E-7	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999996435752648	WITHOUT_CLASSIFICATION	3.564247351681262E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999963666214271	WITHOUT_CLASSIFICATION	3.6333785729012024E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999963666214271	WITHOUT_CLASSIFICATION	3.6333785729012024E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999968876977446	WITHOUT_CLASSIFICATION	3.1123022553139973E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999963536016311	WITHOUT_CLASSIFICATION	3.64639836886324E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999665772136273	WITHOUT_CLASSIFICATION	3.342278637267061E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999310660355535	WITHOUT_CLASSIFICATION	6.893396444650839E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999645164256301	WITHOUT_CLASSIFICATION	3.5483574369959254E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999346702789838	WITHOUT_CLASSIFICATION	6.532972101617574E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999876295299444	WITHOUT_CLASSIFICATION	1.2370470055674086E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999764120080619	WITHOUT_CLASSIFICATION	2.3587991938162207E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999764120080619	WITHOUT_CLASSIFICATION	2.3587991938162207E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998421511571859	WITHOUT_CLASSIFICATION	1.5784884281416463E-4	TEST
long	WITHOUT_CLASSIFICATION	0.9998421511571859	WITHOUT_CLASSIFICATION	1.5784884281416463E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999996484070905	WITHOUT_CLASSIFICATION	3.5159290949982728E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.999996484070905	WITHOUT_CLASSIFICATION	3.5159290949982728E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998756580014	WITHOUT_CLASSIFICATION	1.2434199860036527E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998756580014	WITHOUT_CLASSIFICATION	1.2434199860036527E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999963666214271	WITHOUT_CLASSIFICATION	3.6333785729012024E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999876295299444	WITHOUT_CLASSIFICATION	1.2370470055674086E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999764120080619	WITHOUT_CLASSIFICATION	2.3587991938162207E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999764120080619	WITHOUT_CLASSIFICATION	2.3587991938162207E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9998421511571859	WITHOUT_CLASSIFICATION	1.5784884281416463E-4	TEST
bad type	WITHOUT_CLASSIFICATION	0.999996484070905	WITHOUT_CLASSIFICATION	3.5159290949982728E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.999996484070905	WITHOUT_CLASSIFICATION	3.5159290949982728E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998756580014	WITHOUT_CLASSIFICATION	1.2434199860036527E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999990538593833	WITHOUT_CLASSIFICATION	9.46140616653303E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999996314072684	WITHOUT_CLASSIFICATION	3.6859273161742466E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999989061107732	WITHOUT_CLASSIFICATION	1.0938892268410913E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999965458644309	WITHOUT_CLASSIFICATION	3.454135569249583E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999992694002495	WITHOUT_CLASSIFICATION	7.305997504978419E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999122617089763	WITHOUT_CLASSIFICATION	8.773829102373162E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999603803444	WITHOUT_CLASSIFICATION	3.9619655639108844E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999989997222315	WITHOUT_CLASSIFICATION	1.0002777685451333E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.99999985324645	WITHOUT_CLASSIFICATION	1.4675355004459634E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999985197712055	WITHOUT_CLASSIFICATION	1.480228794521598E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999992004786771	WITHOUT_CLASSIFICATION	7.995213229494094E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999975148345838	WITHOUT_CLASSIFICATION	2.485165416207223E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999971939337358	WITHOUT_CLASSIFICATION	2.8060662642259415E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999122617089763	WITHOUT_CLASSIFICATION	8.773829102373162E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999122617089763	WITHOUT_CLASSIFICATION	8.773829102373162E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999122617089763	WITHOUT_CLASSIFICATION	8.773829102373162E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997720612871	WITHOUT_CLASSIFICATION	2.2793871291823414E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999980089027282	WITHOUT_CLASSIFICATION	1.9910972719031555E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999980089027282	WITHOUT_CLASSIFICATION	1.9910972719031555E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999965988752318	WITHOUT_CLASSIFICATION	3.4011247680966113E-6	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999996043671979	WITHOUT_CLASSIFICATION	3.956328019945523E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999498603263	WITHOUT_CLASSIFICATION	5.013967381471255E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997560150126	WITHOUT_CLASSIFICATION	2.4398498749592813E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997560150126	WITHOUT_CLASSIFICATION	2.4398498749592813E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998652493048	WITHOUT_CLASSIFICATION	1.3475069523807112E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999997856422612	WITHOUT_CLASSIFICATION	2.14357738737576E-7	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999997856422612	WITHOUT_CLASSIFICATION	2.14357738737576E-7	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9996632862946769	WITHOUT_CLASSIFICATION	3.367137053231068E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999989014269638	WITHOUT_CLASSIFICATION	1.0985730362558132E-6	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999982863456095	WITHOUT_CLASSIFICATION	1.7136543904775215E-6	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995808015335095	WITHOUT_CLASSIFICATION	4.1919846649053535E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9998613217220008	WITHOUT_CLASSIFICATION	1.3867827799908102E-4	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9997884825562919	WITHOUT_CLASSIFICATION	2.1151744370799332E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9997861112791447	WITHOUT_CLASSIFICATION	2.138887208553513E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997003130994532	WITHOUT_CLASSIFICATION	2.996869005468864E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9935540958202672	WITHOUT_CLASSIFICATION	0.006445904179732849	TEST
ID	WITHOUT_CLASSIFICATION	0.9995775671092137	WITHOUT_CLASSIFICATION	4.2243289078620395E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999454508429015	WITHOUT_CLASSIFICATION	5.45491570985412E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995116715752229	WITHOUT_CLASSIFICATION	4.883284247771675E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995497330684	WITHOUT_CLASSIFICATION	4.502669315735792E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999566598834756	WITHOUT_CLASSIFICATION	4.334011652445726E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999616458252115	WITHOUT_CLASSIFICATION	3.8354174788420526E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995116715752229	WITHOUT_CLASSIFICATION	4.883284247771675E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999786243599	WITHOUT_CLASSIFICATION	2.1375640176601602E-8	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999385878071	WITHOUT_CLASSIFICATION	6.141219297803643E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999474378167235	WITHOUT_CLASSIFICATION	5.256218327641933E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9998481670597763	WITHOUT_CLASSIFICATION	1.5183294022373577E-4	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999819147055891	WITHOUT_CLASSIFICATION	1.8085294410993178E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999646780784069	WITHOUT_CLASSIFICATION	3.532192159296391E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999138485344806	WITHOUT_CLASSIFICATION	8.615146551938227E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9998883838302969	WITHOUT_CLASSIFICATION	1.1161616970310265E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999683060752974	WITHOUT_CLASSIFICATION	3.169392470263768E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994280226228	WITHOUT_CLASSIFICATION	5.719773771620003E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999886698883652	WITHOUT_CLASSIFICATION	1.1330111634832454E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999994970773305	WITHOUT_CLASSIFICATION	5.029226694509566E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.999673104679258	WITHOUT_CLASSIFICATION	3.268953207420294E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9997861112791447	WITHOUT_CLASSIFICATION	2.138887208553513E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999683060752974	WITHOUT_CLASSIFICATION	3.169392470263768E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999886698883652	WITHOUT_CLASSIFICATION	1.1330111634832454E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.999673104679258	WITHOUT_CLASSIFICATION	3.268953207420294E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999995479261419	WITHOUT_CLASSIFICATION	4.5207385812378165E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9998558765256986	WITHOUT_CLASSIFICATION	1.4412347430141004E-4	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999442167501	WITHOUT_CLASSIFICATION	5.578324990491564E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999067572952134	WITHOUT_CLASSIFICATION	9.324270478652413E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998986034862335	WITHOUT_CLASSIFICATION	1.0139651376640339E-4	TEST
column index	WITHOUT_CLASSIFICATION	0.9999979252919201	WITHOUT_CLASSIFICATION	2.0747080798006803E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999980175839035	WITHOUT_CLASSIFICATION	1.9824160965866773E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999972220858605	WITHOUT_CLASSIFICATION	2.7779141394810675E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.999978196555038	WITHOUT_CLASSIFICATION	2.1803444962019397E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999997268751959	WITHOUT_CLASSIFICATION	2.731248040365041E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996293608621	WITHOUT_CLASSIFICATION	3.706391379331764E-7	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999974169502618	WITHOUT_CLASSIFICATION	2.5830497381390835E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999218397028	WITHOUT_CLASSIFICATION	7.816029723885393E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999200814504	WITHOUT_CLASSIFICATION	7.991854948465474E-8	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9998704334758199	WITHOUT_CLASSIFICATION	1.29566524180175E-4	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999432763108888	WITHOUT_CLASSIFICATION	5.672368911123014E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9998045433728197	WITHOUT_CLASSIFICATION	1.9545662718022713E-4	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999988854014399	WITHOUT_CLASSIFICATION	1.1145985601080579E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9997952927323315	WITHOUT_CLASSIFICATION	2.0470726766850446E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999683060752974	WITHOUT_CLASSIFICATION	3.169392470263768E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999987690020326	WITHOUT_CLASSIFICATION	1.2309979674681158E-6	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999360885634	WITHOUT_CLASSIFICATION	6.39114366300362E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999998484686564	WITHOUT_CLASSIFICATION	1.5153134364398968E-7	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9970733007789156	WITHOUT_CLASSIFICATION	0.002926699221084237	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999977664309715	WITHOUT_CLASSIFICATION	2.233569028470445E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999986496272184	WITHOUT_CLASSIFICATION	1.3503727815742249E-6	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999997902326	WITHOUT_CLASSIFICATION	2.0976747762087138E-10	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999977508014	WITHOUT_CLASSIFICATION	2.249198604923425E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999954913051963	WITHOUT_CLASSIFICATION	4.508694803805475E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9998178970559206	WITHOUT_CLASSIFICATION	1.821029440792745E-4	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999646846088739	WITHOUT_CLASSIFICATION	3.5315391126039715E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999621107991189	WITHOUT_CLASSIFICATION	3.788920088113593E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.999999130829193	WITHOUT_CLASSIFICATION	8.691708070008458E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999983261843	WITHOUT_CLASSIFICATION	1.673815694106927E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999998799325386	WITHOUT_CLASSIFICATION	1.2006746136783E-7	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999222012739	WITHOUT_CLASSIFICATION	7.779872610642673E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999850122243886	WITHOUT_CLASSIFICATION	1.4987775611402199E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999996068992175	WITHOUT_CLASSIFICATION	3.9310078239044717E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999998305849479	WITHOUT_CLASSIFICATION	1.6941505215068106E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999920139471598	WITHOUT_CLASSIFICATION	7.986052840215997E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999990866674654	WITHOUT_CLASSIFICATION	9.133325347044291E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999997711094487	WITHOUT_CLASSIFICATION	2.2889055130501107E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999332931991	WITHOUT_CLASSIFICATION	6.670680096574457E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999983798068108	WITHOUT_CLASSIFICATION	1.6201931891459289E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999992308485415	WITHOUT_CLASSIFICATION	7.691514584583926E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999992308485415	WITHOUT_CLASSIFICATION	7.691514584583926E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999974489753485	WITHOUT_CLASSIFICATION	2.551024651586192E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999997236622301	WITHOUT_CLASSIFICATION	2.763377698624055E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999456437086	WITHOUT_CLASSIFICATION	5.435629124838327E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999992444167628	WITHOUT_CLASSIFICATION	7.555832372990597E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999986389287194	WITHOUT_CLASSIFICATION	1.3610712805623475E-6	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996972768573	WITHOUT_CLASSIFICATION	3.02723142701864E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999996456544018	WITHOUT_CLASSIFICATION	3.543455981127302E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999923050953673	WITHOUT_CLASSIFICATION	7.694904632658957E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999879853175956	WITHOUT_CLASSIFICATION	1.2014682404477475E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999988023022858	WITHOUT_CLASSIFICATION	1.1976977142279264E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999811269184243	WITHOUT_CLASSIFICATION	1.887308157570817E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999928885263811	WITHOUT_CLASSIFICATION	7.111473618757902E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999983569942751	WITHOUT_CLASSIFICATION	1.6430057249289383E-6	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999996425547799	WITHOUT_CLASSIFICATION	3.5744522002909213E-7	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999994868799407	WITHOUT_CLASSIFICATION	5.131200593283404E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999968704211429	WITHOUT_CLASSIFICATION	3.129578856944086E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999999286208542	WITHOUT_CLASSIFICATION	7.137914585926131E-8	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999991743964493	WITHOUT_CLASSIFICATION	8.256035508185357E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998580145276	WITHOUT_CLASSIFICATION	1.419854724035844E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996822224304	WITHOUT_CLASSIFICATION	3.1777756958680886E-7	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991264162359	WITHOUT_CLASSIFICATION	8.735837640286224E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999965896374428	WITHOUT_CLASSIFICATION	3.4103625571290412E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999976922714714	WITHOUT_CLASSIFICATION	2.3077285286260676E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999987140304407	WITHOUT_CLASSIFICATION	1.2859695593414426E-6	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999994952029699	WITHOUT_CLASSIFICATION	5.047970300884228E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999971795449152	WITHOUT_CLASSIFICATION	2.8204550847669E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999956135203472	WITHOUT_CLASSIFICATION	4.386479652829558E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999990884629313	WITHOUT_CLASSIFICATION	9.115370687366655E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998168093219	WITHOUT_CLASSIFICATION	1.8319067816361628E-7	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999993731745298	WITHOUT_CLASSIFICATION	6.268254701934534E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996822224304	WITHOUT_CLASSIFICATION	3.1777756958680886E-7	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999959612075885	WITHOUT_CLASSIFICATION	4.038792411478414E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999996529542333	WITHOUT_CLASSIFICATION	3.4704576662573947E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999996667892389	WITHOUT_CLASSIFICATION	3.3321076109354633E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999721228474389	WITHOUT_CLASSIFICATION	2.787715256109597E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999721228474389	WITHOUT_CLASSIFICATION	2.787715256109597E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999960635372044	WITHOUT_CLASSIFICATION	3.9364627956175854E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999990347034482	WITHOUT_CLASSIFICATION	9.652965518411026E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999808079169464	WITHOUT_CLASSIFICATION	1.9192083053564702E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999808079169464	WITHOUT_CLASSIFICATION	1.9192083053564702E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999332931991	WITHOUT_CLASSIFICATION	6.670680096574457E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999785892566	WITHOUT_CLASSIFICATION	2.1410743335021697E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999986653029397	WITHOUT_CLASSIFICATION	1.3346970602999964E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998827650607	WITHOUT_CLASSIFICATION	1.1723493933661657E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999986653029397	WITHOUT_CLASSIFICATION	1.3346970602999964E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998827650607	WITHOUT_CLASSIFICATION	1.1723493933661657E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990262908589	WITHOUT_CLASSIFICATION	9.737091410848635E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999606195082906	WITHOUT_CLASSIFICATION	3.938049170933602E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999999851325441	WITHOUT_CLASSIFICATION	1.4867455902312243E-7	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999993861229941	WITHOUT_CLASSIFICATION	6.138770059259357E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999975188578284	WITHOUT_CLASSIFICATION	2.4811421715440324E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999889922549174	WITHOUT_CLASSIFICATION	1.1007745082598673E-5	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999984747067439	WITHOUT_CLASSIFICATION	1.5252932560940312E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999984747067439	WITHOUT_CLASSIFICATION	1.5252932560940312E-6	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999991683122278	WITHOUT_CLASSIFICATION	8.31687772155992E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999210024705	WITHOUT_CLASSIFICATION	7.899752957577852E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999979071390475	WITHOUT_CLASSIFICATION	2.0928609525533515E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999963589586	WITHOUT_CLASSIFICATION	3.641041402423296E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999989796153004	WITHOUT_CLASSIFICATION	1.0203846996078447E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999975200009011	WITHOUT_CLASSIFICATION	2.4799990988338958E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999980852441458	WITHOUT_CLASSIFICATION	1.9147558542043666E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999680286916823	WITHOUT_CLASSIFICATION	3.197130831765987E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999680286916823	WITHOUT_CLASSIFICATION	3.197130831765987E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999989829739	WITHOUT_CLASSIFICATION	1.0170260953023908E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990262908589	WITHOUT_CLASSIFICATION	9.737091410848635E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999971197149019	WITHOUT_CLASSIFICATION	2.8802850981312953E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999366184582414	WITHOUT_CLASSIFICATION	6.338154175865417E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999996130483969	WITHOUT_CLASSIFICATION	3.869516031240258E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999981562171577	WITHOUT_CLASSIFICATION	1.8437828422301275E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999569367982812	WITHOUT_CLASSIFICATION	4.306320171881175E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990262908589	WITHOUT_CLASSIFICATION	9.737091410848635E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999981562171577	WITHOUT_CLASSIFICATION	1.8437828422301275E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999569367982812	WITHOUT_CLASSIFICATION	4.306320171881175E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999997418810651	WITHOUT_CLASSIFICATION	2.581189349173131E-7	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999944327564138	WITHOUT_CLASSIFICATION	5.567243586320436E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999884633045	WITHOUT_CLASSIFICATION	1.153669546643397E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990262908589	WITHOUT_CLASSIFICATION	9.737091410848635E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990262908589	WITHOUT_CLASSIFICATION	9.737091410848635E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999923096660114	WITHOUT_CLASSIFICATION	7.690333988601787E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999946364257803	WITHOUT_CLASSIFICATION	5.363574219633758E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999994755345208	WITHOUT_CLASSIFICATION	5.244654791028617E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998158462948	WITHOUT_CLASSIFICATION	1.8415370521814252E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999998662629002	WITHOUT_CLASSIFICATION	1.337370997493349E-7	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999213394776	WITHOUT_CLASSIFICATION	7.866052238569737E-7	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999980808386993	WITHOUT_CLASSIFICATION	1.9191613005860405E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996424065317	WITHOUT_CLASSIFICATION	3.5759346818514064E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999545448457	WITHOUT_CLASSIFICATION	4.545515442800566E-8	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999765858536609	WITHOUT_CLASSIFICATION	2.3414146339074888E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999994886614816	WITHOUT_CLASSIFICATION	5.113385184130348E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999961176758867	WITHOUT_CLASSIFICATION	3.882324113239071E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999939181620253	WITHOUT_CLASSIFICATION	6.081837974782036E-6	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999987051700684	WITHOUT_CLASSIFICATION	1.2948299315779572E-6	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980578000621	WITHOUT_CLASSIFICATION	1.9421999379075195E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999456998631994	WITHOUT_CLASSIFICATION	5.430013680072514E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998158462948	WITHOUT_CLASSIFICATION	1.8415370521814252E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999878731042017	WITHOUT_CLASSIFICATION	1.2126895798290066E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999993974745328	WITHOUT_CLASSIFICATION	6.025254671776495E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999587152396	WITHOUT_CLASSIFICATION	4.1284760290895623E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999885903772404	WITHOUT_CLASSIFICATION	1.140962275954109E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999907516329688	WITHOUT_CLASSIFICATION	9.24836703121427E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999907516329688	WITHOUT_CLASSIFICATION	9.24836703121427E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999998158462948	WITHOUT_CLASSIFICATION	1.8415370521814252E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999599373576195	WITHOUT_CLASSIFICATION	4.006264238054587E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999973865140709	WITHOUT_CLASSIFICATION	2.6134859290905886E-6	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998236156822016	WITHOUT_CLASSIFICATION	1.7638431779838307E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999986693807312	WITHOUT_CLASSIFICATION	1.3306192687459049E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997890257724	WITHOUT_CLASSIFICATION	2.1097422759661517E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996689477993	WITHOUT_CLASSIFICATION	3.310522006556198E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999383324762	WITHOUT_CLASSIFICATION	6.16675238220497E-8	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999997894481267	WITHOUT_CLASSIFICATION	2.1055187330496985E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999994661041	WITHOUT_CLASSIFICATION	5.338959018430639E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998952399948	WITHOUT_CLASSIFICATION	1.0476000518980243E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994821195205	WITHOUT_CLASSIFICATION	5.178804795201807E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999756215278031	WITHOUT_CLASSIFICATION	2.4378472196887883E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.999892217718049	WITHOUT_CLASSIFICATION	1.0778228195105424E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999832929242	WITHOUT_CLASSIFICATION	1.6707075886507104E-8	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999954759878	WITHOUT_CLASSIFICATION	4.524012191558248E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999555634127	WITHOUT_CLASSIFICATION	4.443658729026678E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999688555581	WITHOUT_CLASSIFICATION	3.114444189090462E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999980145424381	WITHOUT_CLASSIFICATION	1.9854575618916216E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994293344945	WITHOUT_CLASSIFICATION	5.706655054631756E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999944852384	WITHOUT_CLASSIFICATION	5.514761607341305E-8	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999872313076	WITHOUT_CLASSIFICATION	1.2768692516993878E-8	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998440573973	WITHOUT_CLASSIFICATION	1.5594260263940923E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981941027248	WITHOUT_CLASSIFICATION	1.8058972751133274E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880897759672	WITHOUT_CLASSIFICATION	1.1910224032686184E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999427630079	WITHOUT_CLASSIFICATION	5.723699210001836E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973324019605	WITHOUT_CLASSIFICATION	2.667598039418739E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795059622127	WITHOUT_CLASSIFICATION	2.0494037787223993E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847034484087	WITHOUT_CLASSIFICATION	1.5296551591250432E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979431920345	WITHOUT_CLASSIFICATION	2.0568079654965553E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965734655843	WITHOUT_CLASSIFICATION	3.426534415607171E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999988739907583	WITHOUT_CLASSIFICATION	1.1260092417028962E-6	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999520381226	WITHOUT_CLASSIFICATION	4.7961877294956156E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931994365602	WITHOUT_CLASSIFICATION	6.800563439875242E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946377174936	WITHOUT_CLASSIFICATION	5.362282506376777E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992276622054	WITHOUT_CLASSIFICATION	7.723377945048492E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933082102765	WITHOUT_CLASSIFICATION	6.691789723400745E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952590346564	WITHOUT_CLASSIFICATION	4.740965343607014E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998437323933	WITHOUT_CLASSIFICATION	1.562676066964472E-6	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982122972925	WITHOUT_CLASSIFICATION	1.7877027074752653E-6	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553871114589	WITHOUT_CLASSIFICATION	4.461288854101525E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999703959502899	WITHOUT_CLASSIFICATION	2.960404971002419E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984723487996	WITHOUT_CLASSIFICATION	1.527651200459287E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999487568107195	WITHOUT_CLASSIFICATION	5.1243189280532366E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999361067751	WITHOUT_CLASSIFICATION	6.389322489159449E-7	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999863608712	WITHOUT_CLASSIFICATION	1.3639128784676092E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999206585477614	WITHOUT_CLASSIFICATION	7.934145223860629E-5	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999906377844846	WITHOUT_CLASSIFICATION	9.362215515469089E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995554549862	WITHOUT_CLASSIFICATION	4.445450137904867E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999683405834	WITHOUT_CLASSIFICATION	3.1659416658428E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999748975985429	WITHOUT_CLASSIFICATION	2.510240145713304E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999518086045264	WITHOUT_CLASSIFICATION	4.819139547365871E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999405866691672	WITHOUT_CLASSIFICATION	5.9413330832776425E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999579199578477	WITHOUT_CLASSIFICATION	4.208004215234992E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999846097868793	WITHOUT_CLASSIFICATION	1.539021312060772E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999987522466844	WITHOUT_CLASSIFICATION	1.2477533154671131E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999580796292	WITHOUT_CLASSIFICATION	4.1920370838631214E-8	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999991611414687	WITHOUT_CLASSIFICATION	8.388585312613685E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9995814583957646	WITHOUT_CLASSIFICATION	4.185416042354789E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999802324433	WITHOUT_CLASSIFICATION	1.9767556721654713E-8	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982638886442	WITHOUT_CLASSIFICATION	1.736111355804316E-6	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960130288004	WITHOUT_CLASSIFICATION	3.986971199631631E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988596513925	WITHOUT_CLASSIFICATION	1.140348607571959E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981630508561	WITHOUT_CLASSIFICATION	1.8369491439236056E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999829987517913	WITHOUT_CLASSIFICATION	1.700124820869936E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999636710468	WITHOUT_CLASSIFICATION	3.632895312589038E-8	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999998885517802	WITHOUT_CLASSIFICATION	1.1144821972166489E-7	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998865307794	WITHOUT_CLASSIFICATION	1.1346922060288938E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872552456271	WITHOUT_CLASSIFICATION	1.274475437278961E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999655957164	WITHOUT_CLASSIFICATION	3.440428363148549E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999543506575078	WITHOUT_CLASSIFICATION	4.5649342492185447E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999998206695785	WITHOUT_CLASSIFICATION	1.7933042161119298E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999995863385	WITHOUT_CLASSIFICATION	4.13661511497115E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999748490849351	WITHOUT_CLASSIFICATION	2.5150915064979016E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999996289916848	WITHOUT_CLASSIFICATION	3.7100831519272923E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999993251561227	WITHOUT_CLASSIFICATION	6.748438773228503E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999813305237613	WITHOUT_CLASSIFICATION	1.866947623865863E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999206585477614	WITHOUT_CLASSIFICATION	7.934145223860629E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995826598003	WITHOUT_CLASSIFICATION	4.1734019963250924E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999867251282	WITHOUT_CLASSIFICATION	1.327487176839819E-8	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999129907997	WITHOUT_CLASSIFICATION	8.700920033741293E-8	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999986920017436	WITHOUT_CLASSIFICATION	1.307998256356756E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999707064512	WITHOUT_CLASSIFICATION	2.9293548761320068E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999995220976751	WITHOUT_CLASSIFICATION	4.779023249918198E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999829987517913	WITHOUT_CLASSIFICATION	1.700124820869936E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998256748642	WITHOUT_CLASSIFICATION	1.7432513575543913E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999228170857	WITHOUT_CLASSIFICATION	7.718291428491383E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999304482303	WITHOUT_CLASSIFICATION	6.955176965906298E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999645048144	WITHOUT_CLASSIFICATION	3.5495185493136094E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999848115566	WITHOUT_CLASSIFICATION	1.5188443418855307E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997520773818	WITHOUT_CLASSIFICATION	2.4792261821934964E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999412367743	WITHOUT_CLASSIFICATION	5.87632258630008E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996211095084	WITHOUT_CLASSIFICATION	3.7889049164325313E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999376125435276	WITHOUT_CLASSIFICATION	6.23874564724431E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999984074944448	WITHOUT_CLASSIFICATION	1.5925055552104474E-6	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999725988603	WITHOUT_CLASSIFICATION	2.740113968686631E-8	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999997998072422	WITHOUT_CLASSIFICATION	2.0019275781082713E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999997090136055	WITHOUT_CLASSIFICATION	2.909863945948616E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999401228754284	WITHOUT_CLASSIFICATION	5.987712457163479E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999999517661025	WITHOUT_CLASSIFICATION	4.823389749920635E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997789687838	WITHOUT_CLASSIFICATION	2.2103121612304912E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999526790527	WITHOUT_CLASSIFICATION	4.7320947246529836E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999812819258	WITHOUT_CLASSIFICATION	1.8718074180566956E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998892371005	WITHOUT_CLASSIFICATION	1.1076289949871699E-7	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999950003015781	WITHOUT_CLASSIFICATION	4.9996984219162125E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999996496917207	WITHOUT_CLASSIFICATION	3.5030827930161787E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999993954529725	WITHOUT_CLASSIFICATION	6.045470276734491E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999986448218727	WITHOUT_CLASSIFICATION	1.3551781273108316E-6	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999955361089042	WITHOUT_CLASSIFICATION	4.463891095797174E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998101975668	WITHOUT_CLASSIFICATION	1.898024331651395E-7	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998213540429	WITHOUT_CLASSIFICATION	1.7864595708088146E-7	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99999961586011	WITHOUT_CLASSIFICATION	3.841398900392658E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999206585477614	WITHOUT_CLASSIFICATION	7.934145223860629E-5	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999990243908515	WITHOUT_CLASSIFICATION	9.756091485009065E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999995733816697	WITHOUT_CLASSIFICATION	4.2661833025872295E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993171702838307	WITHOUT_CLASSIFICATION	6.828297161693181E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999988850925879	WITHOUT_CLASSIFICATION	1.1149074119866318E-6	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999991443501626	WITHOUT_CLASSIFICATION	8.556498373960261E-7	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999993268041629	WITHOUT_CLASSIFICATION	6.731958371165377E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999206585477614	WITHOUT_CLASSIFICATION	7.934145223860629E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999959831192977	WITHOUT_CLASSIFICATION	4.016880702281713E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999526790527	WITHOUT_CLASSIFICATION	4.7320947246529836E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999978082049028	WITHOUT_CLASSIFICATION	2.191795097132537E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997789687838	WITHOUT_CLASSIFICATION	2.2103121612304912E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996565796389	WITHOUT_CLASSIFICATION	3.4342036109303437E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998944608227962	WITHOUT_CLASSIFICATION	1.0553917720375919E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999835287245169	WITHOUT_CLASSIFICATION	1.647127548306289E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999304482303	WITHOUT_CLASSIFICATION	6.955176965906298E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999645048144	WITHOUT_CLASSIFICATION	3.5495185493136094E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999848115566	WITHOUT_CLASSIFICATION	1.5188443418855307E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999970837341752	WITHOUT_CLASSIFICATION	2.916265824729529E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999980121649273	WITHOUT_CLASSIFICATION	1.9878350726939453E-6	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997057167471	WITHOUT_CLASSIFICATION	2.942832528297618E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997789687838	WITHOUT_CLASSIFICATION	2.2103121612304912E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996565796389	WITHOUT_CLASSIFICATION	3.4342036109303437E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999206585477614	WITHOUT_CLASSIFICATION	7.934145223860629E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997520773818	WITHOUT_CLASSIFICATION	2.4792261821934964E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999412367743	WITHOUT_CLASSIFICATION	5.87632258630008E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996211095084	WITHOUT_CLASSIFICATION	3.7889049164325313E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998587030443	WITHOUT_CLASSIFICATION	1.4129695567217448E-7	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999326865471	WITHOUT_CLASSIFICATION	6.731345292942584E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999977499969411	WITHOUT_CLASSIFICATION	2.2500030588286247E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999053518679	WITHOUT_CLASSIFICATION	9.464813205902164E-8	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999941141096054	WITHOUT_CLASSIFICATION	5.885890394636174E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999852811953	WITHOUT_CLASSIFICATION	1.471880470653035E-8	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553871114589	WITHOUT_CLASSIFICATION	4.461288854101525E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999942571719386	WITHOUT_CLASSIFICATION	5.742828061467637E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999790675051675	WITHOUT_CLASSIFICATION	2.0932494832516432E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999981212242883	WITHOUT_CLASSIFICATION	1.8787757116403762E-6	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999870853269	WITHOUT_CLASSIFICATION	1.2914673103740354E-8	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998381615383	WITHOUT_CLASSIFICATION	1.6183846182738578E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795059622127	WITHOUT_CLASSIFICATION	2.0494037787223993E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847034484087	WITHOUT_CLASSIFICATION	1.5296551591250432E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946377174936	WITHOUT_CLASSIFICATION	5.362282506376777E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998381615383	WITHOUT_CLASSIFICATION	1.6183846182738578E-7	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999998681615381	WITHOUT_CLASSIFICATION	1.318384618305959E-7	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998739128252	WITHOUT_CLASSIFICATION	1.260871748215388E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952345494063	WITHOUT_CLASSIFICATION	4.765450593634135E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995479138119	WITHOUT_CLASSIFICATION	4.520861881033266E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998977941204	WITHOUT_CLASSIFICATION	1.0220587971494965E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999821161410011	WITHOUT_CLASSIFICATION	1.7883858998865726E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992276622054	WITHOUT_CLASSIFICATION	7.723377945048492E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998437323933	WITHOUT_CLASSIFICATION	1.562676066964472E-6	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999995863385	WITHOUT_CLASSIFICATION	4.13661511497115E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999983488944761	WITHOUT_CLASSIFICATION	1.6511055239078355E-6	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999696205533	WITHOUT_CLASSIFICATION	3.037944674936588E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999333028493	WITHOUT_CLASSIFICATION	6.669715069404125E-8	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999919051595723	WITHOUT_CLASSIFICATION	8.094840427860233E-6	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997534392043	WITHOUT_CLASSIFICATION	2.4656079564630163E-7	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999660116549	WITHOUT_CLASSIFICATION	3.3988345047113594E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999995757093216	WITHOUT_CLASSIFICATION	4.2429067829554226E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999994661041	WITHOUT_CLASSIFICATION	5.338959018430639E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999998102810261	WITHOUT_CLASSIFICATION	1.8971897394272447E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999997677520631	WITHOUT_CLASSIFICATION	2.322479368707328E-7	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996890588195	WITHOUT_CLASSIFICATION	3.1094118044527076E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.99999559722677	WITHOUT_CLASSIFICATION	4.4027732300017255E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999577704066	WITHOUT_CLASSIFICATION	4.2229593341957584E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999976923944586	WITHOUT_CLASSIFICATION	2.3076055413935034E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993224254645	WITHOUT_CLASSIFICATION	6.775745355232565E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997802447063	WITHOUT_CLASSIFICATION	2.197552938376014E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984977831772	WITHOUT_CLASSIFICATION	1.5022168229282249E-6	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999983183611335	WITHOUT_CLASSIFICATION	1.6816388664437414E-6	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999971359571626	WITHOUT_CLASSIFICATION	2.8640428374931437E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999996429516929	WITHOUT_CLASSIFICATION	3.5704830710162377E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977742336709	WITHOUT_CLASSIFICATION	2.2257663291444645E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999179206936	WITHOUT_CLASSIFICATION	8.207930639514476E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995433175467	WITHOUT_CLASSIFICATION	4.5668245325758774E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999990987724816	WITHOUT_CLASSIFICATION	9.012275184126551E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999987032033425	WITHOUT_CLASSIFICATION	1.2967966575369226E-6	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992521947898	WITHOUT_CLASSIFICATION	7.478052102504058E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999997242048234	WITHOUT_CLASSIFICATION	2.757951765985654E-7	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973694792026	WITHOUT_CLASSIFICATION	2.6305207973392816E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989172221015	WITHOUT_CLASSIFICATION	1.082777898429598E-6	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999995348623966	WITHOUT_CLASSIFICATION	4.6513760341218315E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999975440424921	WITHOUT_CLASSIFICATION	2.4559575079668902E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999995469386105	WITHOUT_CLASSIFICATION	4.530613895081093E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.999999581375415	WITHOUT_CLASSIFICATION	4.18624585072111E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999963418937966	WITHOUT_CLASSIFICATION	3.6581062035282562E-6	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999946615295905	WITHOUT_CLASSIFICATION	5.338470409571636E-6	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999953619600357	WITHOUT_CLASSIFICATION	4.638039964367135E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999166250272	WITHOUT_CLASSIFICATION	8.3374972742987E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999985507617557	WITHOUT_CLASSIFICATION	1.4492382442584531E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999997252396751	WITHOUT_CLASSIFICATION	2.7476032485867453E-7	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999890032514	WITHOUT_CLASSIFICATION	1.0996748621892328E-8	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999995559777173	WITHOUT_CLASSIFICATION	4.440222826877567E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999830118479609	WITHOUT_CLASSIFICATION	1.6988152039094826E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999847858987	WITHOUT_CLASSIFICATION	1.5214101293703118E-7	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.99998239014232	WITHOUT_CLASSIFICATION	1.760985767999653E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999986767083926	WITHOUT_CLASSIFICATION	1.323291607425438E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999994041946113	WITHOUT_CLASSIFICATION	5.958053887109814E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999895269947109	WITHOUT_CLASSIFICATION	1.0473005289156179E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998312534648042	WITHOUT_CLASSIFICATION	1.687465351958091E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999573978158119	WITHOUT_CLASSIFICATION	4.260218418808841E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999679109491	WITHOUT_CLASSIFICATION	3.208905097225479E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999990944640084	WITHOUT_CLASSIFICATION	9.055359916306842E-7	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998727916996	WITHOUT_CLASSIFICATION	1.2720830047726316E-7	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999999783096698	WITHOUT_CLASSIFICATION	2.1690330193621525E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999991916034	WITHOUT_CLASSIFICATION	8.08396599965625E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997812895934	WITHOUT_CLASSIFICATION	2.1871040649962466E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999109994773	WITHOUT_CLASSIFICATION	8.90005227141935E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999982365340988	WITHOUT_CLASSIFICATION	1.763465901315466E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999997511180814	WITHOUT_CLASSIFICATION	2.488819186835237E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999998981791726	WITHOUT_CLASSIFICATION	1.0182082747789631E-7	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996264710649	WITHOUT_CLASSIFICATION	3.735289351471435E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999998982866878	WITHOUT_CLASSIFICATION	1.0171331220291666E-6	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999527979553	WITHOUT_CLASSIFICATION	4.7202044610741085E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999998648815241	WITHOUT_CLASSIFICATION	1.351184759025437E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999988707083303	WITHOUT_CLASSIFICATION	1.1292916697602194E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999986240450568	WITHOUT_CLASSIFICATION	1.3759549432005613E-6	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999994262441647	WITHOUT_CLASSIFICATION	5.737558352870599E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999997428029578	WITHOUT_CLASSIFICATION	2.571970421736164E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999935016713	WITHOUT_CLASSIFICATION	6.498328686960234E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999998974068253	WITHOUT_CLASSIFICATION	1.0259317478239932E-7	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999977918920747	WITHOUT_CLASSIFICATION	2.208107925238739E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999967449021674	WITHOUT_CLASSIFICATION	3.2550978325379364E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999835247617468	WITHOUT_CLASSIFICATION	1.6475238253219465E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999950656466055	WITHOUT_CLASSIFICATION	4.934353394472027E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999957984281377	WITHOUT_CLASSIFICATION	4.201571862415957E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998153988965	WITHOUT_CLASSIFICATION	1.8460110348810322E-7	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998795586419	WITHOUT_CLASSIFICATION	1.2044135814786243E-7	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999243618748	WITHOUT_CLASSIFICATION	7.563812530757752E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999998400998489	WITHOUT_CLASSIFICATION	1.5990015110382254E-7	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999986996039494	WITHOUT_CLASSIFICATION	1.3003960506041384E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999994104201817	WITHOUT_CLASSIFICATION	5.895798182476712E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999989868791742	WITHOUT_CLASSIFICATION	1.013120825733618E-6	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995064820579	WITHOUT_CLASSIFICATION	4.935179420373041E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999988836780536	WITHOUT_CLASSIFICATION	1.1163219464373926E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.999995733550023	WITHOUT_CLASSIFICATION	4.266449976883559E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999996090379808	WITHOUT_CLASSIFICATION	3.9096201917637404E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999266394098361	WITHOUT_CLASSIFICATION	7.336059016388681E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999960877511789	WITHOUT_CLASSIFICATION	3.91224882121086E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999986618112305	WITHOUT_CLASSIFICATION	1.338188769423205E-6	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999992242298507	WITHOUT_CLASSIFICATION	7.757701494250418E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984824033009	WITHOUT_CLASSIFICATION	1.5175966991035835E-6	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999994045569542	WITHOUT_CLASSIFICATION	5.954430457750287E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999993517080243	WITHOUT_CLASSIFICATION	6.482919757006653E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999914399112787	WITHOUT_CLASSIFICATION	8.560088721298024E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999995036932559	WITHOUT_CLASSIFICATION	4.96306744161099E-7	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999997593788467	WITHOUT_CLASSIFICATION	2.4062115340033307E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999947060782117	WITHOUT_CLASSIFICATION	5.293921788294393E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999991957023732	WITHOUT_CLASSIFICATION	8.042976268219765E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999998060691	WITHOUT_CLASSIFICATION	1.9393095947459768E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999916527012525	WITHOUT_CLASSIFICATION	8.347298747499773E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.999891425561463	WITHOUT_CLASSIFICATION	1.0857443853689985E-4	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999981534847434	WITHOUT_CLASSIFICATION	1.8465152565920977E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999916527012525	WITHOUT_CLASSIFICATION	8.347298747499773E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999994165661816	WITHOUT_CLASSIFICATION	5.834338184021227E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999997836614735	WITHOUT_CLASSIFICATION	2.163385265787886E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999835772907328	WITHOUT_CLASSIFICATION	1.6422709267202936E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999693252808892	WITHOUT_CLASSIFICATION	3.067471911087612E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999998014598029	WITHOUT_CLASSIFICATION	1.9854019715972125E-7	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998106564837	WITHOUT_CLASSIFICATION	1.8934351628432852E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999319798598448	WITHOUT_CLASSIFICATION	6.802014015509515E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993949507182	WITHOUT_CLASSIFICATION	6.050492818344681E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999998702957096	WITHOUT_CLASSIFICATION	1.2970429035071206E-7	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999594685826199	WITHOUT_CLASSIFICATION	4.053141738005801E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999022176383	WITHOUT_CLASSIFICATION	9.778236172687351E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999989518133774	WITHOUT_CLASSIFICATION	1.048186622668233E-6	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999306107954	WITHOUT_CLASSIFICATION	6.938920460387318E-7	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999956291600282	WITHOUT_CLASSIFICATION	4.370839971861923E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996998639024	WITHOUT_CLASSIFICATION	3.0013609772440647E-7	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999998846213601	WITHOUT_CLASSIFICATION	1.1537863988515249E-7	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999909954663696	WITHOUT_CLASSIFICATION	9.004533630310334E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999909954663696	WITHOUT_CLASSIFICATION	9.004533630310334E-6	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999307183157	WITHOUT_CLASSIFICATION	6.928168423059014E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.999927760681636	WITHOUT_CLASSIFICATION	7.22393183639384E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.999970935190581	WITHOUT_CLASSIFICATION	2.9064809419002826E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999900042256581	WITHOUT_CLASSIFICATION	9.995774341918709E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995090933035	WITHOUT_CLASSIFICATION	4.909066964880183E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999942399845845	WITHOUT_CLASSIFICATION	5.760015415503013E-6	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999975000798298	WITHOUT_CLASSIFICATION	2.499920170232048E-6	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999861740453	WITHOUT_CLASSIFICATION	1.3825954628454576E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999979620774114	WITHOUT_CLASSIFICATION	2.037922588464998E-6	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999996262035944	WITHOUT_CLASSIFICATION	3.737964055945039E-6	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999994381957265	WITHOUT_CLASSIFICATION	5.618042735579831E-7	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999926330448	WITHOUT_CLASSIFICATION	7.3669551865476325E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999324151314	WITHOUT_CLASSIFICATION	6.758486860235138E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999998498153654	WITHOUT_CLASSIFICATION	1.5018463471202255E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999968320012	WITHOUT_CLASSIFICATION	3.1679987718243224E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999976923944586	WITHOUT_CLASSIFICATION	2.3076055413935034E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999930802311597	WITHOUT_CLASSIFICATION	6.919768840199084E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999714043598	WITHOUT_CLASSIFICATION	2.859564025261761E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999999027086576	WITHOUT_CLASSIFICATION	9.729134236105758E-8	TEST
do the test	WITHOUT_CLASSIFICATION	0.9989095544573953	WITHOUT_CLASSIFICATION	0.00109044554260481	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999998988758585	WITHOUT_CLASSIFICATION	1.0112414153824308E-7	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999984032342504	WITHOUT_CLASSIFICATION	1.5967657495024454E-6	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999999858272211	WITHOUT_CLASSIFICATION	1.4172778902694654E-7	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998109863717	WITHOUT_CLASSIFICATION	1.8901362834513464E-7	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999779184499	WITHOUT_CLASSIFICATION	2.208155009459162E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999976277674	WITHOUT_CLASSIFICATION	2.3722325983988358E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999979701775532	WITHOUT_CLASSIFICATION	2.029822446732972E-6	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999998683613872	WITHOUT_CLASSIFICATION	1.316386128232904E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999992674268948	WITHOUT_CLASSIFICATION	7.325731052040645E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999959253683994	WITHOUT_CLASSIFICATION	4.074631600476868E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998537583353	WITHOUT_CLASSIFICATION	1.462416646539896E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999011515434	WITHOUT_CLASSIFICATION	9.884845665394475E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999876176482018	WITHOUT_CLASSIFICATION	1.238235179825136E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999973351580627	WITHOUT_CLASSIFICATION	2.6648419373628683E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999996862224474	WITHOUT_CLASSIFICATION	3.137775526401709E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999625206705	WITHOUT_CLASSIFICATION	3.747932955998282E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999999197271395	WITHOUT_CLASSIFICATION	8.027286049872353E-7	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999998782710358	WITHOUT_CLASSIFICATION	1.2172896425392906E-7	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999970850347979	WITHOUT_CLASSIFICATION	2.9149652021549924E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999988471291231	WITHOUT_CLASSIFICATION	1.1528708768032323E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999791822727436	WITHOUT_CLASSIFICATION	2.0817727256368632E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999987178848376	WITHOUT_CLASSIFICATION	1.2821151624333352E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999998590230726	WITHOUT_CLASSIFICATION	1.409769272855949E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999999797169784	WITHOUT_CLASSIFICATION	2.028302158561013E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999953176118528	WITHOUT_CLASSIFICATION	4.682388147323028E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999985934455397	WITHOUT_CLASSIFICATION	1.4065544603620962E-6	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931221140423	WITHOUT_CLASSIFICATION	6.877885957648998E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976839031779	WITHOUT_CLASSIFICATION	2.316096822051812E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973997096018	WITHOUT_CLASSIFICATION	2.600290398237188E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999999924720117	WITHOUT_CLASSIFICATION	7.527988299101753E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998019420654	WITHOUT_CLASSIFICATION	1.9805793464870845E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994251418133	WITHOUT_CLASSIFICATION	5.748581867951899E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999648026706	WITHOUT_CLASSIFICATION	3.519732931563029E-8	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999984077560194	WITHOUT_CLASSIFICATION	1.5922439806292303E-6	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929558822018	WITHOUT_CLASSIFICATION	7.044117798193143E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999984077560194	WITHOUT_CLASSIFICATION	1.5922439806292303E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993214156704	WITHOUT_CLASSIFICATION	6.7858432963911E-7	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999990173963055	WITHOUT_CLASSIFICATION	9.826036945839422E-7	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999924745143526	WITHOUT_CLASSIFICATION	7.525485647454254E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999438688009	WITHOUT_CLASSIFICATION	5.61311991018697E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999901645076553	WITHOUT_CLASSIFICATION	9.835492344735758E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9996956346991169	WITHOUT_CLASSIFICATION	3.0436530088309173E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997427655375	WITHOUT_CLASSIFICATION	2.572344625872955E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999992471179484	WITHOUT_CLASSIFICATION	7.528820515080752E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999998516898699	WITHOUT_CLASSIFICATION	1.483101301337463E-7	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999622904144333	WITHOUT_CLASSIFICATION	3.770958556670523E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999997888742389	WITHOUT_CLASSIFICATION	2.1112576095839206E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999999882128087	WITHOUT_CLASSIFICATION	1.1787191299522293E-7	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999983051049863	WITHOUT_CLASSIFICATION	1.6948950136526832E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999821463538491	WITHOUT_CLASSIFICATION	1.785364615096793E-5	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999825517476	WITHOUT_CLASSIFICATION	1.744825236114943E-8	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999786496646	WITHOUT_CLASSIFICATION	2.135033527176683E-8	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999913679699596	WITHOUT_CLASSIFICATION	8.632030040450965E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999913679699596	WITHOUT_CLASSIFICATION	8.632030040450965E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999995250087472	WITHOUT_CLASSIFICATION	4.749912528020978E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999952235460294	WITHOUT_CLASSIFICATION	4.776453970507826E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999792928191	WITHOUT_CLASSIFICATION	2.0707180865779562E-8	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999990347849668	WITHOUT_CLASSIFICATION	9.65215033334105E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999994242431129	WITHOUT_CLASSIFICATION	5.757568870121919E-7	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999987367596985	WITHOUT_CLASSIFICATION	1.2632403015204043E-6	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999986378003551	WITHOUT_CLASSIFICATION	1.3621996448638866E-6	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999977964236585	WITHOUT_CLASSIFICATION	2.2035763415493055E-6	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999980043636215	WITHOUT_CLASSIFICATION	1.9956363784838486E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999959078832	WITHOUT_CLASSIFICATION	4.092116774466133E-9	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997880614714	WITHOUT_CLASSIFICATION	2.1193852857780248E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999996954367721	WITHOUT_CLASSIFICATION	3.045632279445121E-7	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998943925765	WITHOUT_CLASSIFICATION	1.0560742340553371E-7	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999998376268533	WITHOUT_CLASSIFICATION	1.623731466962324E-6	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999995968337646	WITHOUT_CLASSIFICATION	4.031662353560161E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999330671373	WITHOUT_CLASSIFICATION	6.693286273048183E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999685989267	WITHOUT_CLASSIFICATION	3.1401073308233646E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999991051913983	WITHOUT_CLASSIFICATION	8.948086016112415E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.999999896719446	WITHOUT_CLASSIFICATION	1.032805539626029E-7	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999986655231	WITHOUT_CLASSIFICATION	1.3344768814527112E-9	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999988313158249	WITHOUT_CLASSIFICATION	1.1686841751483538E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998195991993	WITHOUT_CLASSIFICATION	1.8040080083583125E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999569139055	WITHOUT_CLASSIFICATION	4.3086094467874606E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999620555525	WITHOUT_CLASSIFICATION	3.7944447496629346E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.999998783557614	WITHOUT_CLASSIFICATION	1.2164423860177194E-6	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999985675895543	WITHOUT_CLASSIFICATION	1.4324104456963158E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997660267336	WITHOUT_CLASSIFICATION	2.3397326639829761E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999994730114218	WITHOUT_CLASSIFICATION	5.269885782209234E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999494532933664	WITHOUT_CLASSIFICATION	5.0546706633652295E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998467883455	WITHOUT_CLASSIFICATION	1.5321165446707834E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999958555668049	WITHOUT_CLASSIFICATION	4.144433195079487E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999900952486397	WITHOUT_CLASSIFICATION	9.904751360196356E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999749645924955	WITHOUT_CLASSIFICATION	2.5035407504533874E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999986459722179	WITHOUT_CLASSIFICATION	1.3540277821454684E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999994419390434	WITHOUT_CLASSIFICATION	5.580609565633379E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998882703729	WITHOUT_CLASSIFICATION	1.1172962702862781E-7	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998143973086	WITHOUT_CLASSIFICATION	1.8560269142098365E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999974301230605	WITHOUT_CLASSIFICATION	2.5698769394579323E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999999957870168	WITHOUT_CLASSIFICATION	4.212983196732858E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999995535964552	WITHOUT_CLASSIFICATION	4.4640354483762873E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999233785625	WITHOUT_CLASSIFICATION	7.662143754719106E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969036512811	WITHOUT_CLASSIFICATION	3.0963487188405373E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999952225578431	WITHOUT_CLASSIFICATION	4.777442156792066E-6	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999999990454774	WITHOUT_CLASSIFICATION	9.545226093987877E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999984000313	WITHOUT_CLASSIFICATION	1.5999686950148327E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999999091216817	WITHOUT_CLASSIFICATION	9.087831833309224E-8	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999996868116695	WITHOUT_CLASSIFICATION	3.131883305610179E-7	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999099220941	WITHOUT_CLASSIFICATION	9.007790597713597E-8	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998361890242	WITHOUT_CLASSIFICATION	1.6381097570090597E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999979867057448	WITHOUT_CLASSIFICATION	2.0132942551327325E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946869620766	WITHOUT_CLASSIFICATION	5.313037923376856E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999985368561661	WITHOUT_CLASSIFICATION	1.4631438338827694E-6	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994036376296	WITHOUT_CLASSIFICATION	5.963623704092435E-7	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999992790824892	WITHOUT_CLASSIFICATION	7.209175107468654E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999963440220974	WITHOUT_CLASSIFICATION	3.6559779027080784E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999959831192977	WITHOUT_CLASSIFICATION	4.016880702281713E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999959831192977	WITHOUT_CLASSIFICATION	4.016880702281713E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998812357049217	WITHOUT_CLASSIFICATION	1.1876429507822125E-4	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999354084970895	WITHOUT_CLASSIFICATION	6.459150291049337E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999428738585	WITHOUT_CLASSIFICATION	5.7126141361887025E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.99999983108653	WITHOUT_CLASSIFICATION	1.6891346988047048E-7	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999769979409	WITHOUT_CLASSIFICATION	2.3002059046898145E-8	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999433849632	WITHOUT_CLASSIFICATION	5.6615036759129164E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999999846012084	WITHOUT_CLASSIFICATION	1.5398791598784725E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999999952576033	WITHOUT_CLASSIFICATION	4.742396688057389E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999982994300519	WITHOUT_CLASSIFICATION	1.7005699481533946E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999734354079062	WITHOUT_CLASSIFICATION	2.6564592093842927E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999997293945707	WITHOUT_CLASSIFICATION	2.7060542927382733E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999958316500961	WITHOUT_CLASSIFICATION	4.168349903943088E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999997812600004	WITHOUT_CLASSIFICATION	2.18739999595402E-7	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999865914101143	WITHOUT_CLASSIFICATION	1.3408589885810316E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998703497199	WITHOUT_CLASSIFICATION	1.2965027999767776E-7	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999988044826542	WITHOUT_CLASSIFICATION	1.1955173457593885E-6	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999927510488654	WITHOUT_CLASSIFICATION	7.248951134517393E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999913636168	WITHOUT_CLASSIFICATION	8.636383207562453E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999899665320934	WITHOUT_CLASSIFICATION	1.0033467906583725E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999999128355543	WITHOUT_CLASSIFICATION	8.716444569328253E-7	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.999999569184971	WITHOUT_CLASSIFICATION	4.3081502894746374E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999874872079	WITHOUT_CLASSIFICATION	1.251279210815575E-7	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999981626009689	WITHOUT_CLASSIFICATION	1.8373990312081435E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999434289578238	WITHOUT_CLASSIFICATION	5.657104217617012E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999721390953	WITHOUT_CLASSIFICATION	2.7860904652018295E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999997775013305	WITHOUT_CLASSIFICATION	2.224986694064399E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999992045211973	WITHOUT_CLASSIFICATION	7.954788026100501E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999975526821819	WITHOUT_CLASSIFICATION	2.4473178181549425E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999408574499703	WITHOUT_CLASSIFICATION	5.914255002970425E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999998117776603	WITHOUT_CLASSIFICATION	1.8822233964896235E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999434289578238	WITHOUT_CLASSIFICATION	5.657104217617012E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999977647556905	WITHOUT_CLASSIFICATION	2.2352443094951732E-6	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999920524475	WITHOUT_CLASSIFICATION	7.947552460126975E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.999722712816578	WITHOUT_CLASSIFICATION	2.7728718342203947E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999984224321645	WITHOUT_CLASSIFICATION	1.5775678353981513E-6	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999906556652	WITHOUT_CLASSIFICATION	9.344334844368651E-9	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999740181800011	WITHOUT_CLASSIFICATION	2.5981819998919908E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997814786654	WITHOUT_CLASSIFICATION	2.1852133464717425E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999146465443	WITHOUT_CLASSIFICATION	8.53534557466723E-8	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999965693203723	WITHOUT_CLASSIFICATION	3.4306796278021533E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999984224321645	WITHOUT_CLASSIFICATION	1.5775678353981513E-6	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999752663193726	WITHOUT_CLASSIFICATION	2.473368062735708E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999146465443	WITHOUT_CLASSIFICATION	8.53534557466723E-8	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999218684384	WITHOUT_CLASSIFICATION	7.813156160330562E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999865935018907	WITHOUT_CLASSIFICATION	1.3406498109322784E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999620860939	WITHOUT_CLASSIFICATION	3.791390602550706E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997880614714	WITHOUT_CLASSIFICATION	2.1193852857780248E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999364668024	WITHOUT_CLASSIFICATION	6.353319758102678E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999985512971098	WITHOUT_CLASSIFICATION	1.4487028902201715E-6	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999996547973333	WITHOUT_CLASSIFICATION	3.4520266660886674E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999995638796846	WITHOUT_CLASSIFICATION	4.361203153768602E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999915013899239	WITHOUT_CLASSIFICATION	8.498610076032882E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999962935807247	WITHOUT_CLASSIFICATION	3.706419275189468E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999924985906218	WITHOUT_CLASSIFICATION	7.501409378171162E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999965082598112	WITHOUT_CLASSIFICATION	3.4917401886938606E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999966436219118	WITHOUT_CLASSIFICATION	3.356378088270628E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999995824908955	WITHOUT_CLASSIFICATION	4.1750910447052666E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99997325406583	WITHOUT_CLASSIFICATION	2.674593416996383E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999784826736	WITHOUT_CLASSIFICATION	2.1517326355143185E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999708207153	WITHOUT_CLASSIFICATION	2.9179284741320093E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999971832228853	WITHOUT_CLASSIFICATION	2.8167771146821216E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999867923356	WITHOUT_CLASSIFICATION	1.320766443156657E-8	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999984021070097	WITHOUT_CLASSIFICATION	1.5978929903228707E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999918460231959	WITHOUT_CLASSIFICATION	8.153976804194213E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999978217539354	WITHOUT_CLASSIFICATION	2.178246064624802E-6	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999984618214474	WITHOUT_CLASSIFICATION	1.538178552648098E-6	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999993555479951	WITHOUT_CLASSIFICATION	6.444520048840238E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999993340493796	WITHOUT_CLASSIFICATION	6.659506204678422E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999719891896	WITHOUT_CLASSIFICATION	2.8010810461881287E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999431652822	WITHOUT_CLASSIFICATION	5.6834717872121294E-8	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999995303845902	WITHOUT_CLASSIFICATION	4.696154098029237E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999999582300268	WITHOUT_CLASSIFICATION	4.176997320122671E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999199841819366	WITHOUT_CLASSIFICATION	8.001581806342151E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999960334621886	WITHOUT_CLASSIFICATION	3.966537811498194E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979345734159	WITHOUT_CLASSIFICATION	2.0654265841558067E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973025596933	WITHOUT_CLASSIFICATION	2.6974403066326795E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999999548463298	WITHOUT_CLASSIFICATION	4.5153670247637695E-8	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999965845454418	WITHOUT_CLASSIFICATION	3.4154545582287364E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999996995119576	WITHOUT_CLASSIFICATION	3.0048804245280614E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999943827454	WITHOUT_CLASSIFICATION	5.6172546110199425E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999992686567827	WITHOUT_CLASSIFICATION	7.313432173199736E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999989558380846	WITHOUT_CLASSIFICATION	1.0441619154207218E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999809691396	WITHOUT_CLASSIFICATION	1.9030860466383893E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999112683817	WITHOUT_CLASSIFICATION	8.87316182996352E-8	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999984886435648	WITHOUT_CLASSIFICATION	1.511356435152422E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999988761200752	WITHOUT_CLASSIFICATION	1.123879924746773E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999939951834352	WITHOUT_CLASSIFICATION	6.004816564768735E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999996681999381	WITHOUT_CLASSIFICATION	3.3180006182673624E-7	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999989273717	WITHOUT_CLASSIFICATION	1.0726282966791758E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999993349937658	WITHOUT_CLASSIFICATION	6.65006234227545E-7	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987190235684	WITHOUT_CLASSIFICATION	1.2809764316280563E-6	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999954488259962	WITHOUT_CLASSIFICATION	4.5511740037979056E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999875400857173	WITHOUT_CLASSIFICATION	1.245991428261405E-5	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999968613057072	WITHOUT_CLASSIFICATION	3.13869429284915E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999996504773894	WITHOUT_CLASSIFICATION	3.4952261064146855E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999914330455993	WITHOUT_CLASSIFICATION	8.566954400712423E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999985157215805	WITHOUT_CLASSIFICATION	1.4842784195266485E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999965134588	WITHOUT_CLASSIFICATION	3.486541192903086E-8	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999978331422804	WITHOUT_CLASSIFICATION	2.1668577195781063E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999905898262	WITHOUT_CLASSIFICATION	9.410173681664708E-9	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999998799313084	WITHOUT_CLASSIFICATION	1.2006869159968734E-6	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9997785501035404	WITHOUT_CLASSIFICATION	2.2144989645959511E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999973005859267	WITHOUT_CLASSIFICATION	2.6994140733185094E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979345734159	WITHOUT_CLASSIFICATION	2.0654265841558067E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999746261348	WITHOUT_CLASSIFICATION	2.5373865234446487E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999942633397	WITHOUT_CLASSIFICATION	5.7366602983067534E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999822659535114	WITHOUT_CLASSIFICATION	1.773404648874023E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.99982281607018	WITHOUT_CLASSIFICATION	1.7718392982009047E-4	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999995557992165	WITHOUT_CLASSIFICATION	4.442007834990834E-7	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999982894992713	WITHOUT_CLASSIFICATION	1.7105007287537323E-6	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894746870972	WITHOUT_CLASSIFICATION	1.0525312902758547E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999939905305	WITHOUT_CLASSIFICATION	6.009469497869786E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999700892463	WITHOUT_CLASSIFICATION	2.991075354263762E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999922109955793	WITHOUT_CLASSIFICATION	7.789004420640455E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999999974439085	WITHOUT_CLASSIFICATION	2.556091506598043E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9995174022325009	WITHOUT_CLASSIFICATION	4.82597767499111E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999990281908963	WITHOUT_CLASSIFICATION	9.71809103743261E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999952692621316	WITHOUT_CLASSIFICATION	4.730737868549426E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993214156704	WITHOUT_CLASSIFICATION	6.7858432963911E-7	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999925015504	WITHOUT_CLASSIFICATION	7.498449666050039E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999985219734	WITHOUT_CLASSIFICATION	1.4780265447779778E-9	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999994238453286	WITHOUT_CLASSIFICATION	5.761546714413775E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999985065623374	WITHOUT_CLASSIFICATION	1.4934376627228346E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999995993898	WITHOUT_CLASSIFICATION	4.0061019446597756E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999982584049383	WITHOUT_CLASSIFICATION	1.7415950616515445E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999982584049383	WITHOUT_CLASSIFICATION	1.7415950616515445E-6	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999996688207007	WITHOUT_CLASSIFICATION	3.3117929936188114E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999982502195642	WITHOUT_CLASSIFICATION	1.7497804357630926E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999822014518	WITHOUT_CLASSIFICATION	1.779854819649857E-7	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999987012045232	WITHOUT_CLASSIFICATION	1.2987954768315897E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999994369075714	WITHOUT_CLASSIFICATION	5.630924285959938E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998541663414	WITHOUT_CLASSIFICATION	1.4583365851955972E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999975304565695	WITHOUT_CLASSIFICATION	2.469543430510561E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998559616763	WITHOUT_CLASSIFICATION	1.4403832362079475E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998559616763	WITHOUT_CLASSIFICATION	1.4403832362079475E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999931612413213	WITHOUT_CLASSIFICATION	6.838758678734979E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999993205942269	WITHOUT_CLASSIFICATION	6.794057730670635E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999993402777461	WITHOUT_CLASSIFICATION	6.597222539663943E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991674152855	WITHOUT_CLASSIFICATION	8.32584714385402E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991674152855	WITHOUT_CLASSIFICATION	8.32584714385402E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999991674152855	WITHOUT_CLASSIFICATION	8.32584714385402E-7	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997713786165	WITHOUT_CLASSIFICATION	2.2862138351802468E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999996437016819	WITHOUT_CLASSIFICATION	3.562983181784266E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999972984887942	WITHOUT_CLASSIFICATION	2.7015112057751755E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999731715302961	WITHOUT_CLASSIFICATION	2.682846970382511E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999998129858413	WITHOUT_CLASSIFICATION	1.8701415869322648E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999927609713	WITHOUT_CLASSIFICATION	7.2390287966711676E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999859142862	WITHOUT_CLASSIFICATION	1.4085713697338655E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999981758213438	WITHOUT_CLASSIFICATION	1.824178656199537E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999997080421221	WITHOUT_CLASSIFICATION	2.919578779007845E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998537883092	WITHOUT_CLASSIFICATION	1.4621169066276776E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999953270162215	WITHOUT_CLASSIFICATION	4.672983778492541E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999970416730591	WITHOUT_CLASSIFICATION	2.9583269409401553E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999989423019483	WITHOUT_CLASSIFICATION	1.0576980517630724E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999997331466595	WITHOUT_CLASSIFICATION	2.6685334048172995E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999454700179	WITHOUT_CLASSIFICATION	5.452998206030342E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997606857101	WITHOUT_CLASSIFICATION	2.3931428996803064E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999961675987848	WITHOUT_CLASSIFICATION	3.8324012151989755E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.99994482333999	WITHOUT_CLASSIFICATION	5.517666000997549E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.99994482333999	WITHOUT_CLASSIFICATION	5.517666000997549E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999600859858776	WITHOUT_CLASSIFICATION	3.9914014122268063E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999600859858776	WITHOUT_CLASSIFICATION	3.9914014122268063E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999617721216149	WITHOUT_CLASSIFICATION	3.822787838505821E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999634710183155	WITHOUT_CLASSIFICATION	3.6528981684484895E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999634710183155	WITHOUT_CLASSIFICATION	3.6528981684484895E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999752669346008	WITHOUT_CLASSIFICATION	2.473306539922229E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999328277094592	WITHOUT_CLASSIFICATION	6.71722905407068E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997105688814	WITHOUT_CLASSIFICATION	2.894311185694653E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999982584049383	WITHOUT_CLASSIFICATION	1.7415950616515445E-6	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999534926067	WITHOUT_CLASSIFICATION	4.6507393209581915E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999328277094592	WITHOUT_CLASSIFICATION	6.71722905407068E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999947148661	WITHOUT_CLASSIFICATION	5.285133916445355E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999989031318215	WITHOUT_CLASSIFICATION	1.096868178509911E-6	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999174258542366	WITHOUT_CLASSIFICATION	8.257414576340746E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999655851907145	WITHOUT_CLASSIFICATION	3.441480928536929E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999956613564	WITHOUT_CLASSIFICATION	4.33864359009491E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999859690283625	WITHOUT_CLASSIFICATION	1.4030971637562728E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999992706358397	WITHOUT_CLASSIFICATION	7.293641603682931E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999990050060088	WITHOUT_CLASSIFICATION	9.949939912513171E-7	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998340314219	WITHOUT_CLASSIFICATION	1.6596857811173797E-7	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999850021209633	WITHOUT_CLASSIFICATION	1.4997879036713583E-5	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999325555625	WITHOUT_CLASSIFICATION	6.744443747472245E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999881033531332	WITHOUT_CLASSIFICATION	1.1896646866899752E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999946132593175	WITHOUT_CLASSIFICATION	5.386740682580147E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999893266681714	WITHOUT_CLASSIFICATION	1.0673331828513058E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999943611382804	WITHOUT_CLASSIFICATION	5.638861719545346E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999998952398435	WITHOUT_CLASSIFICATION	1.0476015650662169E-7	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999534525231	WITHOUT_CLASSIFICATION	4.654747697964336E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999948764918084	WITHOUT_CLASSIFICATION	5.123508191585561E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999948764918084	WITHOUT_CLASSIFICATION	5.123508191585561E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999991239257776	WITHOUT_CLASSIFICATION	8.76074222289947E-7	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999981428269382	WITHOUT_CLASSIFICATION	1.8571730617466172E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999993103054202	WITHOUT_CLASSIFICATION	6.896945798142038E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999947835939742	WITHOUT_CLASSIFICATION	5.216406025893976E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999963552487315	WITHOUT_CLASSIFICATION	3.6447512684983858E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998940919167	WITHOUT_CLASSIFICATION	1.0590808338534691E-7	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999866941354	WITHOUT_CLASSIFICATION	1.330586471144833E-8	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999808690786536	WITHOUT_CLASSIFICATION	1.9130921346423584E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999996082595366	WITHOUT_CLASSIFICATION	3.9174046334160227E-7	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999515158909	WITHOUT_CLASSIFICATION	4.848410915972332E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999422911966	WITHOUT_CLASSIFICATION	5.77088034053583E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9995174022325009	WITHOUT_CLASSIFICATION	4.82597767499111E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999141081148	WITHOUT_CLASSIFICATION	8.589188519196818E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999989404630227	WITHOUT_CLASSIFICATION	1.0595369772392404E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999983571734509	WITHOUT_CLASSIFICATION	1.6428265491293729E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999997069510125	WITHOUT_CLASSIFICATION	2.930489875082057E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999499767438	WITHOUT_CLASSIFICATION	5.0023256146659824E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999499767438	WITHOUT_CLASSIFICATION	5.0023256146659824E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999826156618656	WITHOUT_CLASSIFICATION	1.7384338134275603E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999996691942508	WITHOUT_CLASSIFICATION	3.3080574932172526E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999982978373396	WITHOUT_CLASSIFICATION	1.7021626604719736E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999956102634706	WITHOUT_CLASSIFICATION	4.3897365293828965E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.999998292175942	WITHOUT_CLASSIFICATION	1.7078240578923588E-6	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999628560636351	WITHOUT_CLASSIFICATION	3.7143936364777965E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998790378235	WITHOUT_CLASSIFICATION	1.209621764030678E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999583504704	WITHOUT_CLASSIFICATION	4.164952963651138E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998609279562	WITHOUT_CLASSIFICATION	1.3907204371166195E-7	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996988229982	WITHOUT_CLASSIFICATION	3.0117700183211556E-7	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997152113399	WITHOUT_CLASSIFICATION	2.8478866017668716E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999583504704	WITHOUT_CLASSIFICATION	4.164952963651138E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998745942145	WITHOUT_CLASSIFICATION	1.254057855363299E-7	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999424970094	WITHOUT_CLASSIFICATION	5.750299059135461E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999225070205	WITHOUT_CLASSIFICATION	7.749297948375937E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999843882668038	WITHOUT_CLASSIFICATION	1.561173319621167E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999977146688	WITHOUT_CLASSIFICATION	2.2853311943070608E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999423148469	WITHOUT_CLASSIFICATION	5.768515320781705E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999072154913	WITHOUT_CLASSIFICATION	9.278450881006645E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999994764819419	WITHOUT_CLASSIFICATION	5.235180580713661E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999997992937734	WITHOUT_CLASSIFICATION	2.0070622655585272E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999961287150078	WITHOUT_CLASSIFICATION	3.871284992283002E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999959440715835	WITHOUT_CLASSIFICATION	4.055928416529046E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998218639405	WITHOUT_CLASSIFICATION	1.781360594513898E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999569687434	WITHOUT_CLASSIFICATION	4.303125646744724E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995323182274	WITHOUT_CLASSIFICATION	4.6768177272315653E-7	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999926799414891	WITHOUT_CLASSIFICATION	7.3200585109924305E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999973166712783	WITHOUT_CLASSIFICATION	2.6833287216131063E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999952231737755	WITHOUT_CLASSIFICATION	4.776826224473097E-6	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998742336926314	WITHOUT_CLASSIFICATION	1.2576630736856265E-4	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999829904657883	WITHOUT_CLASSIFICATION	1.7009534211709286E-4	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999920502493	WITHOUT_CLASSIFICATION	7.94975070376792E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996490986999	WITHOUT_CLASSIFICATION	3.5090130006842E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.99999934370376	WITHOUT_CLASSIFICATION	6.562962400350508E-7	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999743137483785	WITHOUT_CLASSIFICATION	2.568625162142512E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9994739501826873	WITHOUT_CLASSIFICATION	5.260498173127217E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997071212958	WITHOUT_CLASSIFICATION	2.9287870418228125E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999576261670947	WITHOUT_CLASSIFICATION	4.2373832905319946E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999149827866	WITHOUT_CLASSIFICATION	8.501721334551799E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999551015392	WITHOUT_CLASSIFICATION	4.489846071881731E-8	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998207092168	WITHOUT_CLASSIFICATION	1.7929078315131208E-7	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999986855888388	WITHOUT_CLASSIFICATION	1.314411161223697E-6	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999958200113	WITHOUT_CLASSIFICATION	4.179988726594386E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999997774419869	WITHOUT_CLASSIFICATION	2.2255801311428854E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999936714076427	WITHOUT_CLASSIFICATION	6.328592357386428E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998200903455	WITHOUT_CLASSIFICATION	1.799096545583151E-7	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999988663677118	WITHOUT_CLASSIFICATION	1.1336322881443002E-6	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999984305678077	WITHOUT_CLASSIFICATION	1.5694321922952025E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999713435617	WITHOUT_CLASSIFICATION	2.865643832863873E-8	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999673059609	WITHOUT_CLASSIFICATION	3.269403922651447E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999966715688565	WITHOUT_CLASSIFICATION	3.328431143439984E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999998668766658	WITHOUT_CLASSIFICATION	1.3312333415835947E-7	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999941106766868	WITHOUT_CLASSIFICATION	5.8893233132511815E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999874540606	WITHOUT_CLASSIFICATION	1.2545939339106223E-8	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999742686709	WITHOUT_CLASSIFICATION	2.5731329028773034E-8	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999738456122	WITHOUT_CLASSIFICATION	2.615438773862581E-8	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999970689044921	WITHOUT_CLASSIFICATION	2.9310955079079313E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999998802745822	WITHOUT_CLASSIFICATION	1.1972541778253282E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999997001827501	WITHOUT_CLASSIFICATION	2.9981724986599115E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998880012496445	WITHOUT_CLASSIFICATION	1.119987503554926E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999962550969501	WITHOUT_CLASSIFICATION	3.7449030499411937E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999993295565909	WITHOUT_CLASSIFICATION	6.704434092610918E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921843401783	WITHOUT_CLASSIFICATION	7.815659821714428E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999977344190756	WITHOUT_CLASSIFICATION	2.2655809244713935E-6	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999994045306216	WITHOUT_CLASSIFICATION	5.954693783295524E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999986142661382	WITHOUT_CLASSIFICATION	1.3857338617399418E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999946056479	WITHOUT_CLASSIFICATION	5.394352090309282E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999995723215543	WITHOUT_CLASSIFICATION	4.2767844561078667E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999996011889082	WITHOUT_CLASSIFICATION	3.9881109172675347E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998571072333	WITHOUT_CLASSIFICATION	1.4289276664750558E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999952658049768	WITHOUT_CLASSIFICATION	4.734195023161523E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999992269498837	WITHOUT_CLASSIFICATION	7.730501162924764E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998435517911	WITHOUT_CLASSIFICATION	1.5644820905333014E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995516939176	WITHOUT_CLASSIFICATION	4.4830608242173685E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.999999842421614	WITHOUT_CLASSIFICATION	1.5757838597647375E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9996831613932954	WITHOUT_CLASSIFICATION	3.16838606704615E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999997188520976	WITHOUT_CLASSIFICATION	2.811479024790136E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999945127902565	WITHOUT_CLASSIFICATION	5.4872097434813595E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921843401783	WITHOUT_CLASSIFICATION	7.815659821714428E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998227390802	WITHOUT_CLASSIFICATION	1.7726091987815539E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999988700606985	WITHOUT_CLASSIFICATION	1.1299393014331685E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996731374958	WITHOUT_CLASSIFICATION	3.268625042286268E-7	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999997638896452	WITHOUT_CLASSIFICATION	2.3611035481346337E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999793131109732	WITHOUT_CLASSIFICATION	2.068688902677907E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999957245329212	WITHOUT_CLASSIFICATION	4.275467078788744E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999998609279562	WITHOUT_CLASSIFICATION	1.3907204371166195E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998261978923546	WITHOUT_CLASSIFICATION	1.7380210764543957E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999988663677118	WITHOUT_CLASSIFICATION	1.1336322881443002E-6	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999956411563653	WITHOUT_CLASSIFICATION	4.358843634687639E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999198222514	WITHOUT_CLASSIFICATION	8.017774856663756E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999986985475752	WITHOUT_CLASSIFICATION	1.301452424817832E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998649611794	WITHOUT_CLASSIFICATION	1.3503882059990327E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999999176665607	WITHOUT_CLASSIFICATION	8.23334393059648E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999997380140268	WITHOUT_CLASSIFICATION	2.61985973274709E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999904707320508	WITHOUT_CLASSIFICATION	9.529267949112528E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999994149479691	WITHOUT_CLASSIFICATION	5.85052030894226E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999869269384	WITHOUT_CLASSIFICATION	1.3073061638541161E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999915368541	WITHOUT_CLASSIFICATION	8.46314588162799E-9	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999994032708682	WITHOUT_CLASSIFICATION	5.967291317853645E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996457595696	WITHOUT_CLASSIFICATION	3.5424043041562737E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995723188826	WITHOUT_CLASSIFICATION	4.276811173695882E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995723188826	WITHOUT_CLASSIFICATION	4.276811173695882E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998538820171	WITHOUT_CLASSIFICATION	1.46117982969597E-7	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999987680382811	WITHOUT_CLASSIFICATION	1.231961718851751E-6	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999983649575942	WITHOUT_CLASSIFICATION	1.6350424057462794E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999794702530964	WITHOUT_CLASSIFICATION	2.0529746903656006E-5	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999680589641	WITHOUT_CLASSIFICATION	3.1941036061436464E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999555371458	WITHOUT_CLASSIFICATION	4.4462854205303436E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999832134548	WITHOUT_CLASSIFICATION	1.6786545202408244E-8	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999987407076156	WITHOUT_CLASSIFICATION	1.2592923843057601E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998365306663	WITHOUT_CLASSIFICATION	1.6346933366417075E-7	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999874460703658	WITHOUT_CLASSIFICATION	1.25539296341031E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999975069488476	WITHOUT_CLASSIFICATION	2.49305115236204E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999957580660509	WITHOUT_CLASSIFICATION	4.241933949011836E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999999826411679	WITHOUT_CLASSIFICATION	1.7358832107278473E-7	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999989421691	WITHOUT_CLASSIFICATION	1.0578308394969611E-9	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998138275438	WITHOUT_CLASSIFICATION	1.8617245614432872E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998681681904	WITHOUT_CLASSIFICATION	1.3183180966072303E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.999999722599641	WITHOUT_CLASSIFICATION	2.774003590932089E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999966734918034	WITHOUT_CLASSIFICATION	3.326508196592359E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999254405151	WITHOUT_CLASSIFICATION	7.455948483039162E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999809099515	WITHOUT_CLASSIFICATION	1.9090048617302597E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999954087250553	WITHOUT_CLASSIFICATION	4.591274944654906E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998906428412	WITHOUT_CLASSIFICATION	1.0935715877975807E-7	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999933895691989	WITHOUT_CLASSIFICATION	6.610430801085737E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999997140211021	WITHOUT_CLASSIFICATION	2.8597889787509085E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999520093207459	WITHOUT_CLASSIFICATION	4.7990679254130366E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999987615308662	WITHOUT_CLASSIFICATION	1.2384691338130055E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975632689251	WITHOUT_CLASSIFICATION	2.4367310749848657E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994821195205	WITHOUT_CLASSIFICATION	5.178804795201807E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999614742707	WITHOUT_CLASSIFICATION	3.852572915961057E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999986395502607	WITHOUT_CLASSIFICATION	1.360449739228267E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994187719188	WITHOUT_CLASSIFICATION	5.81228081194477E-7	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999996109003876	WITHOUT_CLASSIFICATION	3.8909961243267627E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999995008317307	WITHOUT_CLASSIFICATION	4.99168269305741E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999621714201	WITHOUT_CLASSIFICATION	3.7828579965568335E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999829090968	WITHOUT_CLASSIFICATION	1.709090329334236E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999067212179	WITHOUT_CLASSIFICATION	9.327878217277578E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999981043293873	WITHOUT_CLASSIFICATION	1.89567061280087E-6	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999977940000322	WITHOUT_CLASSIFICATION	2.2059999677393362E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999063750511	WITHOUT_CLASSIFICATION	9.362494888378852E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994342867073	WITHOUT_CLASSIFICATION	5.657132926260287E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999799483883873	WITHOUT_CLASSIFICATION	2.0051611612660675E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995289330977	WITHOUT_CLASSIFICATION	4.71066902296502E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999752037583	WITHOUT_CLASSIFICATION	2.47962417764335E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999856807076016	WITHOUT_CLASSIFICATION	1.4319292398269127E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.99999855049871	WITHOUT_CLASSIFICATION	1.4495012900573107E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999980615395708	WITHOUT_CLASSIFICATION	1.938460429064298E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952345494063	WITHOUT_CLASSIFICATION	4.765450593634135E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9935540958202672	WITHOUT_CLASSIFICATION	0.006445904179732849	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997153195578	WITHOUT_CLASSIFICATION	2.8468044225241777E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999997339390766	WITHOUT_CLASSIFICATION	2.660609233685099E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999992923143172	WITHOUT_CLASSIFICATION	7.076856828863285E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975474826257	WITHOUT_CLASSIFICATION	2.4525173743263105E-6	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999939730041	WITHOUT_CLASSIFICATION	6.02699595780463E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999989452601032	WITHOUT_CLASSIFICATION	1.0547398968345692E-6	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991808554813	WITHOUT_CLASSIFICATION	8.191445186694731E-7	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999984232211515	WITHOUT_CLASSIFICATION	1.576778848500787E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999998051145345	WITHOUT_CLASSIFICATION	1.9488546549934353E-7	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999804560032313	WITHOUT_CLASSIFICATION	1.9543996768778958E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999990430098302	WITHOUT_CLASSIFICATION	9.569901697163103E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999997711930887	WITHOUT_CLASSIFICATION	2.288069113648484E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999995419356066	WITHOUT_CLASSIFICATION	4.580643933437308E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999955401587493	WITHOUT_CLASSIFICATION	4.459841250803894E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997661461825	WITHOUT_CLASSIFICATION	2.3385381751606898E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999967510519574	WITHOUT_CLASSIFICATION	3.2489480426269695E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999993471652263	WITHOUT_CLASSIFICATION	6.528347737652748E-7	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999983035456578	WITHOUT_CLASSIFICATION	1.696454342244763E-6	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999735043239	WITHOUT_CLASSIFICATION	2.6495676021210463E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998807581776561	WITHOUT_CLASSIFICATION	1.192418223439159E-4	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998030955122	WITHOUT_CLASSIFICATION	1.9690448779194613E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999907599195	WITHOUT_CLASSIFICATION	9.240080504920395E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999999532844849	WITHOUT_CLASSIFICATION	4.671551509763647E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999907599195	WITHOUT_CLASSIFICATION	9.240080504920395E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999511825698	WITHOUT_CLASSIFICATION	4.881743018703867E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999652651249	WITHOUT_CLASSIFICATION	3.4734875078552806E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999630735467	WITHOUT_CLASSIFICATION	3.692645329642276E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999748433505	WITHOUT_CLASSIFICATION	2.515664957983313E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999844354437	WITHOUT_CLASSIFICATION	1.556455632774722E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998354272991	WITHOUT_CLASSIFICATION	1.6457270078531826E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993651457555	WITHOUT_CLASSIFICATION	6.348542444239277E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997531163719106	WITHOUT_CLASSIFICATION	2.4688362808935265E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999990787148724	WITHOUT_CLASSIFICATION	9.212851276952256E-7	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999962491183	WITHOUT_CLASSIFICATION	3.750881761372377E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999996181080335	WITHOUT_CLASSIFICATION	3.818919665075699E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998756006867	WITHOUT_CLASSIFICATION	1.2439931328301422E-7	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996436060653	WITHOUT_CLASSIFICATION	3.563939347588021E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998798826988604	WITHOUT_CLASSIFICATION	1.201173011395349E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999997964247706	WITHOUT_CLASSIFICATION	2.035752293973489E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999949593387	WITHOUT_CLASSIFICATION	5.040661302376344E-8	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999412008614	WITHOUT_CLASSIFICATION	5.879913856533886E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997017898645	WITHOUT_CLASSIFICATION	2.982101354483173E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999884346427	WITHOUT_CLASSIFICATION	1.1565357316835795E-8	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999966894323845	WITHOUT_CLASSIFICATION	3.3105676154323795E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999992512880016	WITHOUT_CLASSIFICATION	7.487119984768993E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999996868018973	WITHOUT_CLASSIFICATION	3.131981027465564E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996649680513455	WITHOUT_CLASSIFICATION	3.3503194865446906E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999366688774	WITHOUT_CLASSIFICATION	6.333112248323041E-8	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999976211466568	WITHOUT_CLASSIFICATION	2.3788533433216274E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999833785325845	WITHOUT_CLASSIFICATION	1.6621467415600957E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999920428640394	WITHOUT_CLASSIFICATION	7.957135960563341E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999977275199066	WITHOUT_CLASSIFICATION	2.2724800934350284E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999628258881	WITHOUT_CLASSIFICATION	3.717411197531257E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999997757336675	WITHOUT_CLASSIFICATION	2.242663325424322E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999964763544669	WITHOUT_CLASSIFICATION	3.5236455331322853E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999993906549522	WITHOUT_CLASSIFICATION	6.0934504780523275E-6	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999768311466	WITHOUT_CLASSIFICATION	2.316885347291715E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999652531437863	WITHOUT_CLASSIFICATION	3.474685621377164E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999975425698151	WITHOUT_CLASSIFICATION	2.4574301848539526E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999699812418291	WITHOUT_CLASSIFICATION	3.0018758170831292E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999974759738792	WITHOUT_CLASSIFICATION	2.524026120650244E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999568390612	WITHOUT_CLASSIFICATION	4.3160938829419405E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999573735559696	WITHOUT_CLASSIFICATION	4.262644403045037E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998372763993	WITHOUT_CLASSIFICATION	1.627236007698052E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.99988937361129	WITHOUT_CLASSIFICATION	1.1062638870993541E-4	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999998358986583	WITHOUT_CLASSIFICATION	1.6410134174919991E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993171702838307	WITHOUT_CLASSIFICATION	6.828297161693181E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999833785325845	WITHOUT_CLASSIFICATION	1.6621467415600957E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999362605241932	WITHOUT_CLASSIFICATION	6.373947580681762E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999996109479375	WITHOUT_CLASSIFICATION	3.8905206247731203E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999336490075303	WITHOUT_CLASSIFICATION	6.635099246958994E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999990611026646	WITHOUT_CLASSIFICATION	9.38897335384413E-7	TEST
special case	WITHOUT_CLASSIFICATION	0.9999990877495915	WITHOUT_CLASSIFICATION	9.122504084081548E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999965862148116	WITHOUT_CLASSIFICATION	3.4137851884671606E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999944356833	WITHOUT_CLASSIFICATION	5.564316612473961E-9	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999974658596484	WITHOUT_CLASSIFICATION	2.534140351627681E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999987896047102	WITHOUT_CLASSIFICATION	1.2103952897552921E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999997280479868	WITHOUT_CLASSIFICATION	2.719520132614447E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999967697376575	WITHOUT_CLASSIFICATION	3.230262342458022E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999986645660113	WITHOUT_CLASSIFICATION	1.3354339886900837E-6	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999959418996236	WITHOUT_CLASSIFICATION	4.058100376487683E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999989239926857	WITHOUT_CLASSIFICATION	1.0760073143006809E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999628917002	WITHOUT_CLASSIFICATION	3.710829970174606E-8	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998711123091	WITHOUT_CLASSIFICATION	1.288876909010284E-7	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998770558594	WITHOUT_CLASSIFICATION	1.2294414065383286E-7	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999104364691	WITHOUT_CLASSIFICATION	8.9563530891402E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999552369364	WITHOUT_CLASSIFICATION	4.4763063651757474E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999362605241932	WITHOUT_CLASSIFICATION	6.373947580681762E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999971489043521	WITHOUT_CLASSIFICATION	2.851095647903395E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999983778738193	WITHOUT_CLASSIFICATION	1.6221261807384113E-6	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999968333317955	WITHOUT_CLASSIFICATION	3.1666682045105207E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999308795571	WITHOUT_CLASSIFICATION	6.912044294812695E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998872713589	WITHOUT_CLASSIFICATION	1.1272864112452968E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999867905084818	WITHOUT_CLASSIFICATION	1.3209491518266428E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999867905084818	WITHOUT_CLASSIFICATION	1.3209491518266428E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999258926362	WITHOUT_CLASSIFICATION	7.410736380208473E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999867905084818	WITHOUT_CLASSIFICATION	1.3209491518266428E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999867905084818	WITHOUT_CLASSIFICATION	1.3209491518266428E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999975212081953	WITHOUT_CLASSIFICATION	2.4787918046561268E-6	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999985905038195	WITHOUT_CLASSIFICATION	1.4094961805618214E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997673085107	WITHOUT_CLASSIFICATION	2.3269148938415086E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998249763117	WITHOUT_CLASSIFICATION	1.7502368841500737E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999865091664	WITHOUT_CLASSIFICATION	1.3490833582402439E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999969168348691	WITHOUT_CLASSIFICATION	3.083165130896492E-6	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999992015091514	WITHOUT_CLASSIFICATION	7.984908486300236E-7	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999964457827575	WITHOUT_CLASSIFICATION	3.5542172425294967E-6	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999967413033276	WITHOUT_CLASSIFICATION	3.2586966724598707E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999506680271102	WITHOUT_CLASSIFICATION	4.933197288993814E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999997562148657	WITHOUT_CLASSIFICATION	2.4378513429539987E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999996618499228	WITHOUT_CLASSIFICATION	3.3815007712262433E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999990552219542	WITHOUT_CLASSIFICATION	9.447780457921734E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999974245945259	WITHOUT_CLASSIFICATION	2.5754054742045683E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997932829897	WITHOUT_CLASSIFICATION	2.067170103535646E-7	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999218418152857	WITHOUT_CLASSIFICATION	7.815818471429344E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994251418133	WITHOUT_CLASSIFICATION	5.748581867951899E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999971785033963	WITHOUT_CLASSIFICATION	2.821496603649285E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999837787133709	WITHOUT_CLASSIFICATION	1.6221286629146808E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999967221068571	WITHOUT_CLASSIFICATION	3.277893142837799E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.999996258344402	WITHOUT_CLASSIFICATION	3.741655598061312E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999944488103958	WITHOUT_CLASSIFICATION	5.551189604320827E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994251418133	WITHOUT_CLASSIFICATION	5.748581867951899E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999920428640394	WITHOUT_CLASSIFICATION	7.957135960563341E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999983421454687	WITHOUT_CLASSIFICATION	1.657854531371077E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995433175467	WITHOUT_CLASSIFICATION	4.5668245325758774E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992521947898	WITHOUT_CLASSIFICATION	7.478052102504058E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999960006816874	WITHOUT_CLASSIFICATION	3.9993183126055594E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999314941249	WITHOUT_CLASSIFICATION	6.850587510064904E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999853743061521	WITHOUT_CLASSIFICATION	1.4625693847812101E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999979162228398	WITHOUT_CLASSIFICATION	2.0837771601750614E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999968794332639	WITHOUT_CLASSIFICATION	3.120566736211829E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998958580156	WITHOUT_CLASSIFICATION	1.0414198431623565E-7	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999996596147429	WITHOUT_CLASSIFICATION	3.403852570892024E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997036612429	WITHOUT_CLASSIFICATION	2.9633875703114213E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999998138449522	WITHOUT_CLASSIFICATION	1.861550478027413E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999691139131	WITHOUT_CLASSIFICATION	3.0886086894390085E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999823195770147	WITHOUT_CLASSIFICATION	1.7680422985358145E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999291447496	WITHOUT_CLASSIFICATION	7.085525049023085E-8	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999956027779436	WITHOUT_CLASSIFICATION	4.397222056371885E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.99999505051797	WITHOUT_CLASSIFICATION	4.9494820300247436E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999985983149772	WITHOUT_CLASSIFICATION	1.4016850228061873E-6	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999950042951192	WITHOUT_CLASSIFICATION	4.995704880787695E-6	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999991162692639	WITHOUT_CLASSIFICATION	8.837307361290605E-7	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999987140245811	WITHOUT_CLASSIFICATION	1.2859754189172264E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999984369794	WITHOUT_CLASSIFICATION	1.5630206768508496E-9	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999968794332639	WITHOUT_CLASSIFICATION	3.120566736211829E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999996180296775	WITHOUT_CLASSIFICATION	3.819703225755667E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999996595103103	WITHOUT_CLASSIFICATION	3.404896895737715E-7	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999996982809808	WITHOUT_CLASSIFICATION	3.017190192703134E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999965811575104	WITHOUT_CLASSIFICATION	3.41884248954559E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934508410573	WITHOUT_CLASSIFICATION	6.549158942749311E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999855247464164	WITHOUT_CLASSIFICATION	1.4475253583541309E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999934023706567	WITHOUT_CLASSIFICATION	6.597629343345599E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999989119386337	WITHOUT_CLASSIFICATION	1.0880613663152045E-6	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999992102467787	WITHOUT_CLASSIFICATION	7.897532211675893E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999700237893503	WITHOUT_CLASSIFICATION	2.997621064977188E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994088745148	WITHOUT_CLASSIFICATION	5.911254852276424E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999610781108	WITHOUT_CLASSIFICATION	3.892188924154894E-8	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999994046264371	WITHOUT_CLASSIFICATION	5.953735628254308E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999980977986568	WITHOUT_CLASSIFICATION	1.9022013431285333E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.99998242673676	WITHOUT_CLASSIFICATION	1.7573263240038904E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999056450845	WITHOUT_CLASSIFICATION	9.435491554769677E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994088745148	WITHOUT_CLASSIFICATION	5.911254852276424E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999972053597884	WITHOUT_CLASSIFICATION	2.7946402116122597E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999988876300419	WITHOUT_CLASSIFICATION	1.1123699580789276E-6	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995560573853	WITHOUT_CLASSIFICATION	4.4394261469877237E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999938388654313	WITHOUT_CLASSIFICATION	6.161134568742882E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999990793658521	WITHOUT_CLASSIFICATION	9.206341478689289E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998082584088	WITHOUT_CLASSIFICATION	1.9174159119917013E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998219606271	WITHOUT_CLASSIFICATION	1.780393729061234E-7	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986259426857	WITHOUT_CLASSIFICATION	1.374057314271325E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999537499227	WITHOUT_CLASSIFICATION	4.6250077306803005E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974581814637	WITHOUT_CLASSIFICATION	2.5418185361807567E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997653891957	WITHOUT_CLASSIFICATION	2.3461080434228552E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997699435599	WITHOUT_CLASSIFICATION	2.3005644000697496E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998318424445	WITHOUT_CLASSIFICATION	1.6815755554719786E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998318424445	WITHOUT_CLASSIFICATION	1.6815755554719786E-7	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999960521640253	WITHOUT_CLASSIFICATION	3.947835974720981E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999997445813691	WITHOUT_CLASSIFICATION	2.5541863087322516E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999983886851662	WITHOUT_CLASSIFICATION	1.6113148337978081E-6	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999980657113926	WITHOUT_CLASSIFICATION	1.934288607458314E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999884551617133	WITHOUT_CLASSIFICATION	1.1544838286777872E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995806401727	WITHOUT_CLASSIFICATION	4.193598272981439E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488010948342	WITHOUT_CLASSIFICATION	5.1198905165876253E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804167827011	WITHOUT_CLASSIFICATION	1.958321729891457E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999984651799526	WITHOUT_CLASSIFICATION	1.5348200473106727E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867368119931	WITHOUT_CLASSIFICATION	1.3263188006769705E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995806401727	WITHOUT_CLASSIFICATION	4.193598272981439E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488010948342	WITHOUT_CLASSIFICATION	5.1198905165876253E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804167827011	WITHOUT_CLASSIFICATION	1.958321729891457E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999798238021024	WITHOUT_CLASSIFICATION	2.01761978975694E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999928576478642	WITHOUT_CLASSIFICATION	7.14235213592239E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999995846181673	WITHOUT_CLASSIFICATION	4.1538183273567986E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999990552481423	WITHOUT_CLASSIFICATION	9.447518576579359E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999990569924788	WITHOUT_CLASSIFICATION	9.430075211872093E-7	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999904010329761	WITHOUT_CLASSIFICATION	9.598967023779498E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999993126396839	WITHOUT_CLASSIFICATION	6.87360316166524E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.999996138151792	WITHOUT_CLASSIFICATION	3.861848207964425E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999371904446243	WITHOUT_CLASSIFICATION	6.280955537570548E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999960608294561	WITHOUT_CLASSIFICATION	3.939170543808593E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999970931441556	WITHOUT_CLASSIFICATION	2.9068558443899176E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9990290005030453	WITHOUT_CLASSIFICATION	9.70999496954602E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999721740792868	WITHOUT_CLASSIFICATION	2.7825920713253995E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999975408568575	WITHOUT_CLASSIFICATION	2.459143142500671E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999797302495	WITHOUT_CLASSIFICATION	2.0269750457914887E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999996001306893	WITHOUT_CLASSIFICATION	3.9986931062794203E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9988245766285568	WITHOUT_CLASSIFICATION	0.001175423371443163	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999747207824912	WITHOUT_CLASSIFICATION	2.5279217508852516E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994019129445	WITHOUT_CLASSIFICATION	5.980870556223247E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999913701340594	WITHOUT_CLASSIFICATION	8.629865940635203E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999434505249	WITHOUT_CLASSIFICATION	5.654947505880905E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998831144561	WITHOUT_CLASSIFICATION	1.1688554397188194E-7	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999995881906589	WITHOUT_CLASSIFICATION	4.1180934100826257E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999678055617	WITHOUT_CLASSIFICATION	3.219443838497234E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999997931533483	WITHOUT_CLASSIFICATION	2.0684665165756685E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999982411996876	WITHOUT_CLASSIFICATION	1.7588003123320042E-6	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999649553956512	WITHOUT_CLASSIFICATION	3.5044604348795534E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999305383193231	WITHOUT_CLASSIFICATION	6.946168067691105E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999997352548159	WITHOUT_CLASSIFICATION	2.647451841231354E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759089674013	WITHOUT_CLASSIFICATION	2.4091032598726937E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999000395308562	WITHOUT_CLASSIFICATION	9.996046914389749E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984824033009	WITHOUT_CLASSIFICATION	1.5175966991035835E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984824033009	WITHOUT_CLASSIFICATION	1.5175966991035835E-6	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999909030908068	WITHOUT_CLASSIFICATION	9.096909193148065E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999690352528015	WITHOUT_CLASSIFICATION	3.0964747198619286E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999996023493659	WITHOUT_CLASSIFICATION	3.9765063411420766E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9995174022325009	WITHOUT_CLASSIFICATION	4.82597767499111E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999985623063535	WITHOUT_CLASSIFICATION	1.4376936465317955E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999282624596	WITHOUT_CLASSIFICATION	7.173754033308269E-8	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999801012168814	WITHOUT_CLASSIFICATION	1.989878311853415E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999990889495177	WITHOUT_CLASSIFICATION	9.110504822152323E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999991957023732	WITHOUT_CLASSIFICATION	8.042976268219765E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986713624326	WITHOUT_CLASSIFICATION	1.3286375673590406E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989090537335	WITHOUT_CLASSIFICATION	1.0909462665177594E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981791485029	WITHOUT_CLASSIFICATION	1.820851497182306E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947314429973	WITHOUT_CLASSIFICATION	5.268557002767909E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998429907574	WITHOUT_CLASSIFICATION	1.5700924259663333E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915684571415	WITHOUT_CLASSIFICATION	8.431542858409828E-6	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988182540681	WITHOUT_CLASSIFICATION	1.1817459319379955E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990442722165	WITHOUT_CLASSIFICATION	9.55727783567706E-7	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998434241964	WITHOUT_CLASSIFICATION	1.565758035943687E-6	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994815228678	WITHOUT_CLASSIFICATION	5.184771321968317E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940507666095	WITHOUT_CLASSIFICATION	5.949233390554104E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999172968628	WITHOUT_CLASSIFICATION	8.270313722774478E-8	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999587094922604	WITHOUT_CLASSIFICATION	4.1290507739484665E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999715189508804	WITHOUT_CLASSIFICATION	2.848104911960268E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999999933909936	WITHOUT_CLASSIFICATION	6.609006401430942E-8	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997938317106	WITHOUT_CLASSIFICATION	2.0616828933242302E-7	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999997845738654	WITHOUT_CLASSIFICATION	2.1542613462068861E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999981451278023	WITHOUT_CLASSIFICATION	1.8548721977099871E-6	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999486036364	WITHOUT_CLASSIFICATION	5.139636353916362E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999715189508804	WITHOUT_CLASSIFICATION	2.848104911960268E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999715189508804	WITHOUT_CLASSIFICATION	2.848104911960268E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999825730135194	WITHOUT_CLASSIFICATION	1.7426986480487326E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999993768156912	WITHOUT_CLASSIFICATION	6.231843088149449E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999436660798952	WITHOUT_CLASSIFICATION	5.633392010492944E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999973105315365	WITHOUT_CLASSIFICATION	2.6894684634481646E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999946132593175	WITHOUT_CLASSIFICATION	5.386740682580147E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999913701340594	WITHOUT_CLASSIFICATION	8.629865940635203E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999884525090131	WITHOUT_CLASSIFICATION	1.1547490986841844E-5	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997450192211	WITHOUT_CLASSIFICATION	2.5498077899913083E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999991196717588	WITHOUT_CLASSIFICATION	8.803282413099405E-7	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931066232061	WITHOUT_CLASSIFICATION	6.893376794003578E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999991579276643	WITHOUT_CLASSIFICATION	8.420723358192645E-7	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917699934946	WITHOUT_CLASSIFICATION	8.230006505314907E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999979184634362	WITHOUT_CLASSIFICATION	2.0815365637606467E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999979184634362	WITHOUT_CLASSIFICATION	2.0815365637606467E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999959819580093	WITHOUT_CLASSIFICATION	4.018041990778772E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999959819580093	WITHOUT_CLASSIFICATION	4.018041990778772E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977150415064	WITHOUT_CLASSIFICATION	2.2849584935891748E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943491791979	WITHOUT_CLASSIFICATION	5.6508208020373745E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999990825485875	WITHOUT_CLASSIFICATION	9.174514123725487E-7	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999588802429004	WITHOUT_CLASSIFICATION	4.111975709964739E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999993778703933	WITHOUT_CLASSIFICATION	6.221296066398969E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998243959879	WITHOUT_CLASSIFICATION	1.756040121545174E-7	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955604975713	WITHOUT_CLASSIFICATION	4.439502428707007E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994436377814	WITHOUT_CLASSIFICATION	5.56362218536853E-7	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999989546405201	WITHOUT_CLASSIFICATION	1.04535947989724E-6	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999359367473655	WITHOUT_CLASSIFICATION	6.406325263454726E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999990579458438	WITHOUT_CLASSIFICATION	9.420541563343026E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999991382044626	WITHOUT_CLASSIFICATION	8.61795537337595E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998919197851	WITHOUT_CLASSIFICATION	1.08080214783657E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997725107861	WITHOUT_CLASSIFICATION	2.2748921398549158E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999976643254989	WITHOUT_CLASSIFICATION	2.3356745011772777E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999976643254989	WITHOUT_CLASSIFICATION	2.3356745011772777E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999976643254989	WITHOUT_CLASSIFICATION	2.3356745011772777E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996877042869	WITHOUT_CLASSIFICATION	3.122957130574651E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999949819470223	WITHOUT_CLASSIFICATION	5.0180529776438995E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999565150729	WITHOUT_CLASSIFICATION	4.3484927062948466E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999354087521886	WITHOUT_CLASSIFICATION	6.45912478114209E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962356437406	WITHOUT_CLASSIFICATION	3.7643562592331155E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902443833022	WITHOUT_CLASSIFICATION	9.755616697805707E-6	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999247685402	WITHOUT_CLASSIFICATION	7.523145981273499E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996364805585	WITHOUT_CLASSIFICATION	3.6351944149117275E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999877864292	WITHOUT_CLASSIFICATION	1.2213570825947623E-8	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999710184828	WITHOUT_CLASSIFICATION	2.898151711311811E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999994967637	WITHOUT_CLASSIFICATION	5.032363038671592E-9	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997244240205	WITHOUT_CLASSIFICATION	2.755759794527178E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980578000621	WITHOUT_CLASSIFICATION	1.9421999379075195E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999940189609	WITHOUT_CLASSIFICATION	5.981039106488673E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999988332153233	WITHOUT_CLASSIFICATION	1.1667846766617675E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999334237394	WITHOUT_CLASSIFICATION	6.657626052891947E-8	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992533022815	WITHOUT_CLASSIFICATION	7.466977185256504E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999982729553231	WITHOUT_CLASSIFICATION	1.7270446769493763E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999976806548454	WITHOUT_CLASSIFICATION	2.319345154566979E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999112868719	WITHOUT_CLASSIFICATION	8.871312807339461E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999752611939	WITHOUT_CLASSIFICATION	2.473880607483208E-8	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999989905692428	WITHOUT_CLASSIFICATION	1.0094307572036548E-6	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999582685397	WITHOUT_CLASSIFICATION	4.173146033891684E-8	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999959999472706	WITHOUT_CLASSIFICATION	4.00005272941439E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999989448557991	WITHOUT_CLASSIFICATION	1.055144200871204E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999996673567666	WITHOUT_CLASSIFICATION	3.326432333914603E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999989198138359	WITHOUT_CLASSIFICATION	1.0801861640856247E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.999998004015622	WITHOUT_CLASSIFICATION	1.9959843779716713E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997807629031	WITHOUT_CLASSIFICATION	2.1923709687338636E-7	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999973351580627	WITHOUT_CLASSIFICATION	2.6648419373628683E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999632950064	WITHOUT_CLASSIFICATION	3.6704993553151264E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999013943994	WITHOUT_CLASSIFICATION	9.860560056886446E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999973787302209	WITHOUT_CLASSIFICATION	2.6212697791440133E-6	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999999944042323	WITHOUT_CLASSIFICATION	5.595767694631333E-8	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999721876048481	WITHOUT_CLASSIFICATION	2.781239515199852E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999994504687136	WITHOUT_CLASSIFICATION	5.495312864529937E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999913636168	WITHOUT_CLASSIFICATION	8.636383207562453E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999992890321473	WITHOUT_CLASSIFICATION	7.109678525949002E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999870729251	WITHOUT_CLASSIFICATION	1.2927074901643449E-7	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999997283153709	WITHOUT_CLASSIFICATION	2.7168462910429524E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999838364722	WITHOUT_CLASSIFICATION	1.6163527889089446E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999994233106543	WITHOUT_CLASSIFICATION	5.766893457280894E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999986907146436	WITHOUT_CLASSIFICATION	1.3092853564118532E-6	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99999992154525	WITHOUT_CLASSIFICATION	7.845475005411682E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999992959141147	WITHOUT_CLASSIFICATION	7.040858852944632E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999997821940259	WITHOUT_CLASSIFICATION	2.1780597409932078E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999995328439784	WITHOUT_CLASSIFICATION	4.6715602153450625E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999913679699596	WITHOUT_CLASSIFICATION	8.632030040450965E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999987900341694	WITHOUT_CLASSIFICATION	1.2099658306364495E-6	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998598518269934	WITHOUT_CLASSIFICATION	1.401481730065946E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999399960351	WITHOUT_CLASSIFICATION	6.000396490852158E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999450720643007	WITHOUT_CLASSIFICATION	5.492793569932053E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999972911556043	WITHOUT_CLASSIFICATION	2.7088443956400422E-6	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999898853079655	WITHOUT_CLASSIFICATION	1.0114692034519985E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995646017109	WITHOUT_CLASSIFICATION	4.353982890128062E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999944782114043	WITHOUT_CLASSIFICATION	5.521788595640187E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998133555631367	WITHOUT_CLASSIFICATION	1.8664443686340336E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999990869258425	WITHOUT_CLASSIFICATION	9.130741574917044E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999978569638416	WITHOUT_CLASSIFICATION	2.1430361584538133E-6	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999970428848792	WITHOUT_CLASSIFICATION	2.9571151208174605E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999997384927126	WITHOUT_CLASSIFICATION	2.6150728739573493E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999696056102	WITHOUT_CLASSIFICATION	3.0394389835907403E-8	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999933235525258	WITHOUT_CLASSIFICATION	6.676447474253838E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999989060241299	WITHOUT_CLASSIFICATION	1.09397587012325E-6	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998704541372	WITHOUT_CLASSIFICATION	1.2954586282583133E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999900500992	WITHOUT_CLASSIFICATION	9.949900749763635E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999966982127	WITHOUT_CLASSIFICATION	3.3017874018489935E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998892964427	WITHOUT_CLASSIFICATION	1.1070355731467022E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999434289578238	WITHOUT_CLASSIFICATION	5.657104217617012E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999434289578238	WITHOUT_CLASSIFICATION	5.657104217617012E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999979039372489	WITHOUT_CLASSIFICATION	2.096062751164923E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999960355245772	WITHOUT_CLASSIFICATION	3.964475422739378E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999992033458034	WITHOUT_CLASSIFICATION	7.96654196616929E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999995525373564	WITHOUT_CLASSIFICATION	4.474626436753731E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999308099883	WITHOUT_CLASSIFICATION	6.919001169423596E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999902866214418	WITHOUT_CLASSIFICATION	9.71337855820423E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999382653605	WITHOUT_CLASSIFICATION	6.173463947383811E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999990207103681	WITHOUT_CLASSIFICATION	9.792896319029596E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999987022081661	WITHOUT_CLASSIFICATION	1.297791833806021E-6	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999967974472791	WITHOUT_CLASSIFICATION	3.2025527208507824E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999747991893	WITHOUT_CLASSIFICATION	2.5200810610330498E-8	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999845159024	WITHOUT_CLASSIFICATION	1.5484097498583084E-8	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999993037380871	WITHOUT_CLASSIFICATION	6.962619128786575E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999739473091	WITHOUT_CLASSIFICATION	2.605269082143984E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999993651298412	WITHOUT_CLASSIFICATION	6.348701586541642E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999995167129164	WITHOUT_CLASSIFICATION	4.832870835968058E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999998394712046	WITHOUT_CLASSIFICATION	1.605287953897908E-7	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999977591245284	WITHOUT_CLASSIFICATION	2.2408754716952176E-6	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999996248807459	WITHOUT_CLASSIFICATION	3.75119254160057E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999909965112606	WITHOUT_CLASSIFICATION	9.003488739376491E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999983200695193	WITHOUT_CLASSIFICATION	1.6799304806531958E-6	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999036012045	WITHOUT_CLASSIFICATION	9.639879544189407E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999972444947574	WITHOUT_CLASSIFICATION	2.755505242611601E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999979341878689	WITHOUT_CLASSIFICATION	2.0658121310933467E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999853455338	WITHOUT_CLASSIFICATION	1.4654466349114929E-8	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.999999010972689	WITHOUT_CLASSIFICATION	9.890273110205675E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999999119607663	WITHOUT_CLASSIFICATION	8.803923366026086E-8	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999995519220481	WITHOUT_CLASSIFICATION	4.4807795184022E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.999993345222627	WITHOUT_CLASSIFICATION	6.654777373097648E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999996919547871	WITHOUT_CLASSIFICATION	3.0804521287944954E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999981720013451	WITHOUT_CLASSIFICATION	1.8279986549074818E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998132640348	WITHOUT_CLASSIFICATION	1.867359652330747E-7	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999997090736834	WITHOUT_CLASSIFICATION	2.90926316639131E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999967006223331	WITHOUT_CLASSIFICATION	3.2993776667644597E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999992472074538	WITHOUT_CLASSIFICATION	7.527925462238878E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999992472074538	WITHOUT_CLASSIFICATION	7.527925462238878E-7	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999990102751901	WITHOUT_CLASSIFICATION	9.897248098779407E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999948473692856	WITHOUT_CLASSIFICATION	5.152630714487038E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999996956314829	WITHOUT_CLASSIFICATION	3.043685170380318E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999919279556383	WITHOUT_CLASSIFICATION	8.072044361669967E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999993598226838	WITHOUT_CLASSIFICATION	6.401773160947336E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999988864660373	WITHOUT_CLASSIFICATION	1.1135339627021489E-5	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999998627269605	WITHOUT_CLASSIFICATION	1.372730395030824E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999999894383319	WITHOUT_CLASSIFICATION	1.056166809045228E-7	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999997626624422	WITHOUT_CLASSIFICATION	2.373375579035046E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998561664357104	WITHOUT_CLASSIFICATION	1.4383356428963333E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997123086907	WITHOUT_CLASSIFICATION	2.8769130929412535E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999481312746	WITHOUT_CLASSIFICATION	5.186872547634351E-8	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999926753444568	WITHOUT_CLASSIFICATION	7.324655543243526E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999910746416257	WITHOUT_CLASSIFICATION	8.925358374271768E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999990737690988	WITHOUT_CLASSIFICATION	9.262309012204097E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999891028035859	WITHOUT_CLASSIFICATION	1.0897196414095115E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999665890358825	WITHOUT_CLASSIFICATION	3.341096411747984E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999665890358825	WITHOUT_CLASSIFICATION	3.341096411747984E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999843233459	WITHOUT_CLASSIFICATION	1.5676654066796086E-8	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999973343555061	WITHOUT_CLASSIFICATION	2.665644494008775E-6	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999990427673314	WITHOUT_CLASSIFICATION	9.572326684900607E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999866526561	WITHOUT_CLASSIFICATION	1.3347343887044993E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996141199441	WITHOUT_CLASSIFICATION	3.8588005594072305E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999408574499703	WITHOUT_CLASSIFICATION	5.914255002970425E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998910025991	WITHOUT_CLASSIFICATION	1.0899740090797905E-7	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993016691555	WITHOUT_CLASSIFICATION	6.983308445447217E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998268148194	WITHOUT_CLASSIFICATION	1.731851805557604E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999927631967678	WITHOUT_CLASSIFICATION	7.236803232332526E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999927631967678	WITHOUT_CLASSIFICATION	7.236803232332526E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989331188023	WITHOUT_CLASSIFICATION	1.0668811977287945E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999819289794	WITHOUT_CLASSIFICATION	1.807102057493643E-8	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999527801261	WITHOUT_CLASSIFICATION	4.7219873861602984E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999782542580768	WITHOUT_CLASSIFICATION	2.1745741923119813E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999995134684352	WITHOUT_CLASSIFICATION	4.865315648371992E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998836053703	WITHOUT_CLASSIFICATION	1.1639462982990334E-7	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999971320232637	WITHOUT_CLASSIFICATION	2.867976736279669E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999865935018907	WITHOUT_CLASSIFICATION	1.3406498109322784E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999556156921	WITHOUT_CLASSIFICATION	4.438430785631799E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997105688814	WITHOUT_CLASSIFICATION	2.894311185694653E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999283439471	WITHOUT_CLASSIFICATION	7.165605290786758E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999799926741795	WITHOUT_CLASSIFICATION	2.0007325820517373E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999996504773894	WITHOUT_CLASSIFICATION	3.4952261064146855E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.99982281607018	WITHOUT_CLASSIFICATION	1.7718392982009047E-4	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999832179094834	WITHOUT_CLASSIFICATION	1.6782090516529232E-5	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999617721216149	WITHOUT_CLASSIFICATION	3.822787838505821E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999986395502607	WITHOUT_CLASSIFICATION	1.360449739228267E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999701566447	WITHOUT_CLASSIFICATION	2.984335532840734E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999994869965088	WITHOUT_CLASSIFICATION	5.130034912282494E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.9999996319083744	WITHOUT_CLASSIFICATION	3.6809162555532E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999923506597503	WITHOUT_CLASSIFICATION	7.649340249588411E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.99999963293397	WITHOUT_CLASSIFICATION	3.670660300499909E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999969539554693	WITHOUT_CLASSIFICATION	3.046044530798623E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999752669346008	WITHOUT_CLASSIFICATION	2.473306539922229E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999985121154581	WITHOUT_CLASSIFICATION	1.487884541893394E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999989931396525	WITHOUT_CLASSIFICATION	1.0068603475125558E-6	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999996026194448	WITHOUT_CLASSIFICATION	3.9738055523979765E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.99999967437109	WITHOUT_CLASSIFICATION	3.2562891002130833E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999497940355685	WITHOUT_CLASSIFICATION	5.020596443144116E-5	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999997903068225	WITHOUT_CLASSIFICATION	2.0969317752008752E-7	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999634219766	WITHOUT_CLASSIFICATION	3.657802341457289E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999499767438	WITHOUT_CLASSIFICATION	5.0023256146659824E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999993699867426	WITHOUT_CLASSIFICATION	6.300132573972617E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999985957481107	WITHOUT_CLASSIFICATION	1.4042518892434753E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999965169715146	WITHOUT_CLASSIFICATION	3.483028485382665E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999984377451206	WITHOUT_CLASSIFICATION	1.5622548793971638E-6	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999972053696463	WITHOUT_CLASSIFICATION	2.794630353748276E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999870572134419	WITHOUT_CLASSIFICATION	1.2942786558114635E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999973750561909	WITHOUT_CLASSIFICATION	2.6249438090654228E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999973750561909	WITHOUT_CLASSIFICATION	2.6249438090654228E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999975325091568	WITHOUT_CLASSIFICATION	2.4674908431638196E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995497330684	WITHOUT_CLASSIFICATION	4.502669315735792E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999995465772106	WITHOUT_CLASSIFICATION	4.5342278947197486E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.999996362304012	WITHOUT_CLASSIFICATION	3.637695987991795E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999994786953126	WITHOUT_CLASSIFICATION	5.213046874138649E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999822042782	WITHOUT_CLASSIFICATION	1.7795721782087103E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999965651409	WITHOUT_CLASSIFICATION	3.4348589758531433E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999997038801445	WITHOUT_CLASSIFICATION	2.961198555331752E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999975325091568	WITHOUT_CLASSIFICATION	2.4674908431638196E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995497330684	WITHOUT_CLASSIFICATION	4.502669315735792E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999991616992839	WITHOUT_CLASSIFICATION	8.383007159842126E-7	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999993972491722	WITHOUT_CLASSIFICATION	6.027508278425284E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999990378953222	WITHOUT_CLASSIFICATION	9.621046778082547E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999942878989883	WITHOUT_CLASSIFICATION	5.712101011716283E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999949776214	WITHOUT_CLASSIFICATION	5.02237873325239E-9	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999990258579463	WITHOUT_CLASSIFICATION	9.741420537356567E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999998282919695	WITHOUT_CLASSIFICATION	1.7170803045652839E-7	TEST
}	WITHOUT_CLASSIFICATION	0.9995309612643597	WITHOUT_CLASSIFICATION	4.690387356402495E-4	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998505484922	WITHOUT_CLASSIFICATION	1.4945150783277166E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999990665480198	WITHOUT_CLASSIFICATION	9.334519802057367E-6	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999962041619742	WITHOUT_CLASSIFICATION	3.7958380256600465E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999990665480198	WITHOUT_CLASSIFICATION	9.334519802057367E-6	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999913201396128	WITHOUT_CLASSIFICATION	8.67986038721109E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987881018709	WITHOUT_CLASSIFICATION	1.211898129067663E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999615812986083	WITHOUT_CLASSIFICATION	3.841870139173742E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996872645272	WITHOUT_CLASSIFICATION	3.1273547280038053E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999993804191075	WITHOUT_CLASSIFICATION	6.195808925045194E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9995309612643597	WITHOUT_CLASSIFICATION	4.690387356402495E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9995309612643597	WITHOUT_CLASSIFICATION	4.690387356402495E-4	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999967171585044	WITHOUT_CLASSIFICATION	3.2828414955476585E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999996732002352	WITHOUT_CLASSIFICATION	3.2679976473653885E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999978272979075	WITHOUT_CLASSIFICATION	2.17270209240028E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997820988406	WITHOUT_CLASSIFICATION	2.1790115940909048E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998270769512	WITHOUT_CLASSIFICATION	1.72923048756326E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999989932377961	WITHOUT_CLASSIFICATION	1.00676220401658E-6	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999548357062181	WITHOUT_CLASSIFICATION	4.5164293781848976E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990899111595	WITHOUT_CLASSIFICATION	9.10088840421791E-7	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994340637669	WITHOUT_CLASSIFICATION	5.659362331234269E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.999673104679258	WITHOUT_CLASSIFICATION	3.268953207420294E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.9999888870638721	WITHOUT_CLASSIFICATION	1.1112936127996292E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.999995862794999	WITHOUT_CLASSIFICATION	4.13720500097535E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999996283084397	WITHOUT_CLASSIFICATION	3.716915604048755E-7	TEST
types	WITHOUT_CLASSIFICATION	0.9999597688633736	WITHOUT_CLASSIFICATION	4.0231136626470725E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999978401890782	WITHOUT_CLASSIFICATION	2.1598109217654283E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998479882085	WITHOUT_CLASSIFICATION	1.5201179143665836E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999927695888	WITHOUT_CLASSIFICATION	7.230411068895171E-9	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999997069867136	WITHOUT_CLASSIFICATION	2.930132863724098E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998957625372	WITHOUT_CLASSIFICATION	1.0423746278720157E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998738046069	WITHOUT_CLASSIFICATION	1.2619539311394827E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9997980880293217	WITHOUT_CLASSIFICATION	2.0191197067838976E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999763528248	WITHOUT_CLASSIFICATION	2.36471751870347E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999689632057361	WITHOUT_CLASSIFICATION	3.103679426398098E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997283805374	WITHOUT_CLASSIFICATION	2.7161946249518827E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998405350717	WITHOUT_CLASSIFICATION	1.5946492823107039E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998717629495	WITHOUT_CLASSIFICATION	1.2823705055291506E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999448935244756	WITHOUT_CLASSIFICATION	5.510647552444323E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999925366927	WITHOUT_CLASSIFICATION	7.463307219264643E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999993571451142	WITHOUT_CLASSIFICATION	6.428548858705882E-7	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999978294596717	WITHOUT_CLASSIFICATION	2.170540328197985E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999997295582127	WITHOUT_CLASSIFICATION	2.704417872949146E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999961755013063	WITHOUT_CLASSIFICATION	3.824498693738995E-6	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999956189429492	WITHOUT_CLASSIFICATION	4.381057050820538E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990899111595	WITHOUT_CLASSIFICATION	9.10088840421791E-7	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999993708862697	WITHOUT_CLASSIFICATION	6.291137303684063E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999440748818239	WITHOUT_CLASSIFICATION	5.5925118176067216E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9980734323493895	WITHOUT_CLASSIFICATION	0.0019265676506105831	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999103718659544	WITHOUT_CLASSIFICATION	8.962813404552929E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999995617341141	WITHOUT_CLASSIFICATION	4.382658858595076E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999981293915846	WITHOUT_CLASSIFICATION	1.8706084154306752E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997820988406	WITHOUT_CLASSIFICATION	2.1790115940909048E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999997820988406	WITHOUT_CLASSIFICATION	2.1790115940909048E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999997769729672	WITHOUT_CLASSIFICATION	2.2302703290243582E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.999993879779363	WITHOUT_CLASSIFICATION	6.120220636928154E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999988903425493	WITHOUT_CLASSIFICATION	1.1096574506879641E-6	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999287173809	WITHOUT_CLASSIFICATION	7.128261917762298E-8	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999998492846399	WITHOUT_CLASSIFICATION	1.5071536013230807E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995888425204	WITHOUT_CLASSIFICATION	4.111574797022993E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999971773861027	WITHOUT_CLASSIFICATION	2.822613897309503E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999119221009	WITHOUT_CLASSIFICATION	8.807789903566416E-8	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999811967584	WITHOUT_CLASSIFICATION	1.8803241624405002E-8	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999157782065	WITHOUT_CLASSIFICATION	8.422179346371457E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998103018664	WITHOUT_CLASSIFICATION	1.8969813370711704E-7	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999975955567172	WITHOUT_CLASSIFICATION	2.4044432828366986E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999674986004584	WITHOUT_CLASSIFICATION	3.2501399541593807E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999975325091568	WITHOUT_CLASSIFICATION	2.4674908431638196E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998103018664	WITHOUT_CLASSIFICATION	1.8969813370711704E-7	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999952690709585	WITHOUT_CLASSIFICATION	4.730929041537793E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999993591271267	WITHOUT_CLASSIFICATION	6.408728734489741E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999997916068845	WITHOUT_CLASSIFICATION	2.0839311546367978E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.998218955534123	WITHOUT_CLASSIFICATION	0.0017810444658768949	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999674986004584	WITHOUT_CLASSIFICATION	3.2501399541593807E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999728014816602	WITHOUT_CLASSIFICATION	2.719851833979783E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999282003403	WITHOUT_CLASSIFICATION	7.17996596076921E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998777567045	WITHOUT_CLASSIFICATION	1.2224329548388364E-7	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999874718011	WITHOUT_CLASSIFICATION	1.2528198865655564E-8	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9996620455297993	WITHOUT_CLASSIFICATION	3.379544702007411E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999966623219531	WITHOUT_CLASSIFICATION	3.3376780469164236E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999994525402168	WITHOUT_CLASSIFICATION	5.474597831400806E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998939069799959	WITHOUT_CLASSIFICATION	1.0609302000411424E-4	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999995365192723	WITHOUT_CLASSIFICATION	4.6348072772461907E-7	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998771679902	WITHOUT_CLASSIFICATION	1.228320097540172E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999997248636526	WITHOUT_CLASSIFICATION	2.7513634739425117E-7	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999998368764256	WITHOUT_CLASSIFICATION	1.6312357449194913E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998103018664	WITHOUT_CLASSIFICATION	1.8969813370711704E-7	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999728014816602	WITHOUT_CLASSIFICATION	2.719851833979783E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998777567045	WITHOUT_CLASSIFICATION	1.2224329548388364E-7	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999997595600036	WITHOUT_CLASSIFICATION	2.404399963519239E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999981556902321	WITHOUT_CLASSIFICATION	1.8443097678572376E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999996899430935	WITHOUT_CLASSIFICATION	3.1005690654149007E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999674986004584	WITHOUT_CLASSIFICATION	3.2501399541593807E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999998726064736	WITHOUT_CLASSIFICATION	1.2739352639470086E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998839599411465	WITHOUT_CLASSIFICATION	1.1604005885353315E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995116715752229	WITHOUT_CLASSIFICATION	4.883284247771675E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999067572952134	WITHOUT_CLASSIFICATION	9.324270478652413E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998939069799959	WITHOUT_CLASSIFICATION	1.0609302000411424E-4	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999952690709585	WITHOUT_CLASSIFICATION	4.730929041537793E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9998270518188374	WITHOUT_CLASSIFICATION	1.7294818116261906E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999983191188512	WITHOUT_CLASSIFICATION	1.680881148751652E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999957927811021	WITHOUT_CLASSIFICATION	4.2072188979804326E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999974778898563	WITHOUT_CLASSIFICATION	2.5221101437980067E-6	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999981595738254	WITHOUT_CLASSIFICATION	1.8404261745482273E-6	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999987224209818	WITHOUT_CLASSIFICATION	1.2775790182242335E-6	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999933205373539	WITHOUT_CLASSIFICATION	6.679462646165885E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996872645272	WITHOUT_CLASSIFICATION	3.1273547280038053E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997944332537	WITHOUT_CLASSIFICATION	2.055667464150199E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995754717016	WITHOUT_CLASSIFICATION	4.2452829843924325E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999881532040178	WITHOUT_CLASSIFICATION	1.1846795982194373E-4	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999998905763779	WITHOUT_CLASSIFICATION	1.0942362209160487E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998518512291	WITHOUT_CLASSIFICATION	1.481487710027755E-7	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999986559812	WITHOUT_CLASSIFICATION	1.3440187853669778E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999906993154056	WITHOUT_CLASSIFICATION	9.300684594485261E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998448529422	WITHOUT_CLASSIFICATION	1.5514705780028462E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999067572952134	WITHOUT_CLASSIFICATION	9.324270478652413E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997991072144612	WITHOUT_CLASSIFICATION	2.0089278553888957E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9998903970973243	WITHOUT_CLASSIFICATION	1.0960290267578123E-4	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999633316470405	WITHOUT_CLASSIFICATION	3.666835295948764E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999931781486603	WITHOUT_CLASSIFICATION	6.821851339702653E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999936417361398	WITHOUT_CLASSIFICATION	6.358263860206444E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999999973029968	WITHOUT_CLASSIFICATION	2.697003193119931E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997527897685	WITHOUT_CLASSIFICATION	2.4721023152394673E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999961246869131	WITHOUT_CLASSIFICATION	3.8753130869097255E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999997631079781	WITHOUT_CLASSIFICATION	2.3689202178859622E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999487036484332	WITHOUT_CLASSIFICATION	5.129635156674699E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999989971305465	WITHOUT_CLASSIFICATION	1.0028694534938596E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999966549583134	WITHOUT_CLASSIFICATION	3.34504168664537E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999983722915412	WITHOUT_CLASSIFICATION	1.6277084588618135E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999986351771859	WITHOUT_CLASSIFICATION	1.3648228141697914E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998656128632	WITHOUT_CLASSIFICATION	1.343871366805578E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999985550652549	WITHOUT_CLASSIFICATION	1.4449347450933177E-6	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999619820181	WITHOUT_CLASSIFICATION	3.8017981893153965E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998804337483	WITHOUT_CLASSIFICATION	1.1956625164958373E-7	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999959569436555	WITHOUT_CLASSIFICATION	4.0430563445598264E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999994692392098	WITHOUT_CLASSIFICATION	5.307607902406328E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9998680833644839	WITHOUT_CLASSIFICATION	1.3191663551617114E-4	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999944865718898	WITHOUT_CLASSIFICATION	5.5134281100762416E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999990863791854	WITHOUT_CLASSIFICATION	9.136208146494347E-7	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999338072881	WITHOUT_CLASSIFICATION	6.619271188372795E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999981387045564	WITHOUT_CLASSIFICATION	1.8612954435864072E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9999261061445442	WITHOUT_CLASSIFICATION	7.38938554558191E-5	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999980420613943	WITHOUT_CLASSIFICATION	1.957938605737195E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999982165694774	WITHOUT_CLASSIFICATION	1.7834305225604524E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999983730940106	WITHOUT_CLASSIFICATION	1.6269059894133553E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999313299417856	WITHOUT_CLASSIFICATION	6.867005821439005E-5	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999997714647259	WITHOUT_CLASSIFICATION	2.2853527422020963E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999961287150078	WITHOUT_CLASSIFICATION	3.871284992283002E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997984915229	WITHOUT_CLASSIFICATION	2.0150847726682633E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998261978923546	WITHOUT_CLASSIFICATION	1.7380210764543957E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999934597180151	WITHOUT_CLASSIFICATION	6.540281984794789E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999986891383069	WITHOUT_CLASSIFICATION	1.3108616930895444E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995780097579	WITHOUT_CLASSIFICATION	4.2199024206504023E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999994884467778	WITHOUT_CLASSIFICATION	5.115532222638384E-7	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999986891383069	WITHOUT_CLASSIFICATION	1.3108616930895444E-6	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999934597180151	WITHOUT_CLASSIFICATION	6.540281984794789E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995780097579	WITHOUT_CLASSIFICATION	4.2199024206504023E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999990059550818	WITHOUT_CLASSIFICATION	9.940449181114473E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999989076651694	WITHOUT_CLASSIFICATION	1.0923348305805151E-6	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999977464130416	WITHOUT_CLASSIFICATION	2.2535869584073917E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999976212268447	WITHOUT_CLASSIFICATION	2.3787731553483767E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999940549902	WITHOUT_CLASSIFICATION	5.9450097951602476E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997022272388382	WITHOUT_CLASSIFICATION	2.977727611617578E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999999375912968	WITHOUT_CLASSIFICATION	6.240870321002741E-7	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999990473127505	WITHOUT_CLASSIFICATION	9.526872495580376E-7	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999661311954	WITHOUT_CLASSIFICATION	3.386880469895792E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999996343437577	WITHOUT_CLASSIFICATION	3.6565624229896206E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999970762044821	WITHOUT_CLASSIFICATION	2.9237955177887346E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999996381951848	WITHOUT_CLASSIFICATION	3.6180481529175E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999989875186395	WITHOUT_CLASSIFICATION	1.0124813604585449E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999976212268447	WITHOUT_CLASSIFICATION	2.3787731553483767E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997127219348	WITHOUT_CLASSIFICATION	2.872780651983859E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998572543521	WITHOUT_CLASSIFICATION	1.4274564782296087E-7	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998315168251	WITHOUT_CLASSIFICATION	1.6848317482371872E-7	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999432399272	WITHOUT_CLASSIFICATION	5.67600726648538E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999996943038906	WITHOUT_CLASSIFICATION	3.0569610952983775E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999995575949896	WITHOUT_CLASSIFICATION	4.424050104163426E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999963176526575	WITHOUT_CLASSIFICATION	3.68234734240529E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999955565474	WITHOUT_CLASSIFICATION	4.443452635973215E-9	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999941264612097	WITHOUT_CLASSIFICATION	5.873538790409508E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999991377853934	WITHOUT_CLASSIFICATION	8.622146065852341E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999988955269689	WITHOUT_CLASSIFICATION	1.1044730311570705E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999988955269689	WITHOUT_CLASSIFICATION	1.1044730311570705E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999793670555	WITHOUT_CLASSIFICATION	2.0632944526960073E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999793670555	WITHOUT_CLASSIFICATION	2.0632944526960073E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999958990130325	WITHOUT_CLASSIFICATION	4.100986967430737E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998315168251	WITHOUT_CLASSIFICATION	1.6848317482371872E-7	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999986393801075	WITHOUT_CLASSIFICATION	1.3606198926117048E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999897744398	WITHOUT_CLASSIFICATION	1.0225560183992575E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999994483663593	WITHOUT_CLASSIFICATION	5.516336407067328E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999994483663593	WITHOUT_CLASSIFICATION	5.516336407067328E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998673547851	WITHOUT_CLASSIFICATION	1.3264521497963002E-7	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999999499427108	WITHOUT_CLASSIFICATION	5.005728920416573E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999858473962	WITHOUT_CLASSIFICATION	1.4152603662924713E-8	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999983770040592	WITHOUT_CLASSIFICATION	1.6229959406811672E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998335462817	WITHOUT_CLASSIFICATION	1.6645371830881024E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999575817323	WITHOUT_CLASSIFICATION	4.241826758451516E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999908879910097	WITHOUT_CLASSIFICATION	9.11200899034568E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999978507660374	WITHOUT_CLASSIFICATION	2.149233962477971E-6	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999994483078072	WITHOUT_CLASSIFICATION	5.516921927480542E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998428668516	WITHOUT_CLASSIFICATION	1.571331484735473E-7	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999998837916714	WITHOUT_CLASSIFICATION	1.1620832861377318E-7	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999988763478436	WITHOUT_CLASSIFICATION	1.1236521563506088E-6	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998484347137	WITHOUT_CLASSIFICATION	1.5156528634281258E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999992226302329	WITHOUT_CLASSIFICATION	7.773697671872993E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999998752416048	WITHOUT_CLASSIFICATION	1.2475839520518439E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999990632926024	WITHOUT_CLASSIFICATION	9.367073976764135E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991502218045	WITHOUT_CLASSIFICATION	8.497781954961712E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999518872307	WITHOUT_CLASSIFICATION	4.811276932963615E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999940136531	WITHOUT_CLASSIFICATION	5.986346920924574E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999855473306	WITHOUT_CLASSIFICATION	1.4452669300936174E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999909802871	WITHOUT_CLASSIFICATION	9.01971290837177E-9	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.999991308580697	WITHOUT_CLASSIFICATION	8.69141930312519E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999618690185	WITHOUT_CLASSIFICATION	3.8130981513467425E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999726915079	WITHOUT_CLASSIFICATION	2.7308492195182656E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9995174022325009	WITHOUT_CLASSIFICATION	4.82597767499111E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999989911792424	WITHOUT_CLASSIFICATION	1.0088207576417446E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999966549583134	WITHOUT_CLASSIFICATION	3.34504168664537E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999996976065538	WITHOUT_CLASSIFICATION	3.0239344614727394E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997994609031	WITHOUT_CLASSIFICATION	2.0053909679788743E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762131134616	WITHOUT_CLASSIFICATION	2.3786886538296678E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966244373738	WITHOUT_CLASSIFICATION	3.3755626260786543E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999984526880339	WITHOUT_CLASSIFICATION	1.5473119661706826E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999984526880339	WITHOUT_CLASSIFICATION	1.5473119661706826E-6	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999967403910686	WITHOUT_CLASSIFICATION	3.259608931463697E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999974144133162	WITHOUT_CLASSIFICATION	2.5855866836376718E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999674752001617	WITHOUT_CLASSIFICATION	3.252479983833484E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999674752001617	WITHOUT_CLASSIFICATION	3.252479983833484E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999996011889082	WITHOUT_CLASSIFICATION	3.9881109172675347E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999995006023604	WITHOUT_CLASSIFICATION	4.99397639576957E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999732124392525	WITHOUT_CLASSIFICATION	2.6787560747480892E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999946132593175	WITHOUT_CLASSIFICATION	5.386740682580147E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999988763669364	WITHOUT_CLASSIFICATION	1.1236330634931232E-6	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999935448858206	WITHOUT_CLASSIFICATION	6.455114179422692E-6	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999975441350709	WITHOUT_CLASSIFICATION	2.4558649291190007E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999990538593833	WITHOUT_CLASSIFICATION	9.46140616653303E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993296548595	WITHOUT_CLASSIFICATION	6.703451404308397E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993296548595	WITHOUT_CLASSIFICATION	6.703451404308397E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999998734156	WITHOUT_CLASSIFICATION	1.2658439206625127E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.999999476036062	WITHOUT_CLASSIFICATION	5.239639380142257E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.999999476036062	WITHOUT_CLASSIFICATION	5.239639380142257E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999996990430315	WITHOUT_CLASSIFICATION	3.0095696843817954E-7	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999995393295044	WITHOUT_CLASSIFICATION	4.6067049570690676E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9936993513362411	WITHOUT_CLASSIFICATION	0.006300648663758941	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999983342147699	WITHOUT_CLASSIFICATION	1.665785230024367E-6	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998015256967	WITHOUT_CLASSIFICATION	1.9847430338307456E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999870600415	WITHOUT_CLASSIFICATION	1.2939958613711206E-8	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999974782503785	WITHOUT_CLASSIFICATION	2.5217496214951605E-6	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999732728727004	WITHOUT_CLASSIFICATION	2.6727127299510116E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999962941903	WITHOUT_CLASSIFICATION	3.705809734857459E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999973078683174	WITHOUT_CLASSIFICATION	2.6921316826662303E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999980560527	WITHOUT_CLASSIFICATION	1.9439473265761357E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999655686746	WITHOUT_CLASSIFICATION	3.44313254062976E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997890257724	WITHOUT_CLASSIFICATION	2.1097422759661517E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997890257724	WITHOUT_CLASSIFICATION	2.1097422759661517E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997890257724	WITHOUT_CLASSIFICATION	2.1097422759661517E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997890257724	WITHOUT_CLASSIFICATION	2.1097422759661517E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999013362976	WITHOUT_CLASSIFICATION	9.866370239452267E-7	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999874012030199	WITHOUT_CLASSIFICATION	1.25987969800743E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999948549681272	WITHOUT_CLASSIFICATION	5.145031872747703E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999902511400224	WITHOUT_CLASSIFICATION	9.748859977617923E-6	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983918938387	WITHOUT_CLASSIFICATION	1.6081061612843343E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999991744540325	WITHOUT_CLASSIFICATION	8.255459675576293E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999934964921082	WITHOUT_CLASSIFICATION	6.503507891783509E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999976091149436	WITHOUT_CLASSIFICATION	2.3908850564831995E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999749947818	WITHOUT_CLASSIFICATION	2.5005218292186475E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997325284822	WITHOUT_CLASSIFICATION	2.6747151791977163E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999983124879748	WITHOUT_CLASSIFICATION	1.6875120251770107E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994410952161	WITHOUT_CLASSIFICATION	5.589047839321925E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9993714089695719	WITHOUT_CLASSIFICATION	6.285910304281798E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999802973654333	WITHOUT_CLASSIFICATION	1.9702634566824734E-5	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999974356945848	WITHOUT_CLASSIFICATION	2.5643054152299233E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994410952161	WITHOUT_CLASSIFICATION	5.589047839321925E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999991522595517	WITHOUT_CLASSIFICATION	8.477404483618961E-7	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999933290681	WITHOUT_CLASSIFICATION	6.670931962243779E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999208717896	WITHOUT_CLASSIFICATION	7.912821044223016E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999436792689237	WITHOUT_CLASSIFICATION	5.6320731076331474E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999988741104294	WITHOUT_CLASSIFICATION	1.1258895705838706E-6	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999983815645833	WITHOUT_CLASSIFICATION	1.618435416699063E-6	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999960593088	WITHOUT_CLASSIFICATION	3.940691219197755E-9	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999999056981306	WITHOUT_CLASSIFICATION	9.430186941819514E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997783820429	WITHOUT_CLASSIFICATION	2.2161795695092444E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998918113975	WITHOUT_CLASSIFICATION	1.0818860242569233E-7	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993752703967	WITHOUT_CLASSIFICATION	6.24729603248049E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996092169289	WITHOUT_CLASSIFICATION	3.907830711180029E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999969033072126	WITHOUT_CLASSIFICATION	3.096692787438114E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998877528272475	WITHOUT_CLASSIFICATION	1.1224717275250808E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995035836136	WITHOUT_CLASSIFICATION	4.964163864309994E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999810018807461	WITHOUT_CLASSIFICATION	1.899811925392651E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999983508197439	WITHOUT_CLASSIFICATION	1.6491802560300633E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996007128866	WITHOUT_CLASSIFICATION	3.9928711347917245E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999891537785934	WITHOUT_CLASSIFICATION	1.0846221406595519E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996007128866	WITHOUT_CLASSIFICATION	3.9928711347917245E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999932413683	WITHOUT_CLASSIFICATION	6.758631695119708E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999947390734517	WITHOUT_CLASSIFICATION	5.260926548335772E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999335169318	WITHOUT_CLASSIFICATION	6.64830681413587E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999991831315108	WITHOUT_CLASSIFICATION	8.168684891473697E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999998738610741	WITHOUT_CLASSIFICATION	1.2613892595207026E-7	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999911907004272	WITHOUT_CLASSIFICATION	8.809299572858734E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999990856497744	WITHOUT_CLASSIFICATION	9.143502255917051E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999983508197439	WITHOUT_CLASSIFICATION	1.6491802560300633E-6	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999891537785934	WITHOUT_CLASSIFICATION	1.0846221406595519E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999932413683	WITHOUT_CLASSIFICATION	6.758631695119708E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991508024413	WITHOUT_CLASSIFICATION	8.491975586446132E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999997275683014	WITHOUT_CLASSIFICATION	2.724316986556076E-7	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999970734931792	WITHOUT_CLASSIFICATION	2.926506820743846E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997427312929	WITHOUT_CLASSIFICATION	2.5726870714182174E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.999998534529496	WITHOUT_CLASSIFICATION	1.46547050391913E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.99999988049291	WITHOUT_CLASSIFICATION	1.1950709003791054E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999994817497122	WITHOUT_CLASSIFICATION	5.182502878268546E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991502218045	WITHOUT_CLASSIFICATION	8.497781954961712E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999947390734517	WITHOUT_CLASSIFICATION	5.260926548335772E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999995293692041	WITHOUT_CLASSIFICATION	4.706307958087479E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998667624704	WITHOUT_CLASSIFICATION	1.332375295978379E-7	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999996837622733	WITHOUT_CLASSIFICATION	3.1623772665268625E-7	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998373696645	WITHOUT_CLASSIFICATION	1.6263033560003331E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991502218045	WITHOUT_CLASSIFICATION	8.497781954961712E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998502288886	WITHOUT_CLASSIFICATION	1.497711113302503E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991502218045	WITHOUT_CLASSIFICATION	8.497781954961712E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998227542857	WITHOUT_CLASSIFICATION	1.7724571426551557E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999799483883873	WITHOUT_CLASSIFICATION	2.0051611612660675E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999992717219337	WITHOUT_CLASSIFICATION	7.282780661828162E-7	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999995892961662	WITHOUT_CLASSIFICATION	4.107038337921361E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997153195578	WITHOUT_CLASSIFICATION	2.8468044225241777E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999986634442372	WITHOUT_CLASSIFICATION	1.3365557627875328E-6	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999911990178451	WITHOUT_CLASSIFICATION	8.800982154957556E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999993579613877	WITHOUT_CLASSIFICATION	6.420386122796919E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987040242202	WITHOUT_CLASSIFICATION	1.2959757797661316E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999979351934347	WITHOUT_CLASSIFICATION	2.064806565262101E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999434289578238	WITHOUT_CLASSIFICATION	5.657104217617012E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999993590760634	WITHOUT_CLASSIFICATION	6.409239365765852E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9936993513362411	WITHOUT_CLASSIFICATION	0.006300648663758941	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999899082423561	WITHOUT_CLASSIFICATION	1.0091757643962085E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999801532343779	WITHOUT_CLASSIFICATION	1.984676562214061E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999983786175688	WITHOUT_CLASSIFICATION	1.6213824311564603E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999856807076016	WITHOUT_CLASSIFICATION	1.4319292398269127E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998108539042	WITHOUT_CLASSIFICATION	1.8914609572820983E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999904637365	WITHOUT_CLASSIFICATION	9.536263509199803E-8	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999614557353	WITHOUT_CLASSIFICATION	3.8544264755524195E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999998548547261	WITHOUT_CLASSIFICATION	1.4514527386218187E-7	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999846094204	WITHOUT_CLASSIFICATION	1.5390579568067546E-8	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999991376324435	WITHOUT_CLASSIFICATION	8.623675564338014E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9928124288645176	WITHOUT_CLASSIFICATION	0.0071875711354824155	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999956993279194	WITHOUT_CLASSIFICATION	4.300672080543506E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999988627121552	WITHOUT_CLASSIFICATION	1.1372878447478988E-6	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999803304700091	WITHOUT_CLASSIFICATION	1.9669529990846112E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999959902716278	WITHOUT_CLASSIFICATION	4.0097283721845735E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999122617089763	WITHOUT_CLASSIFICATION	8.773829102373162E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984995094983	WITHOUT_CLASSIFICATION	1.5004905017656102E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999944640909	WITHOUT_CLASSIFICATION	5.535909082429611E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999736642203	WITHOUT_CLASSIFICATION	2.6335779665789364E-8	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999933924441777	WITHOUT_CLASSIFICATION	6.607555822171484E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999950416691212	WITHOUT_CLASSIFICATION	4.958330878797307E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9906546998173221	WITHOUT_CLASSIFICATION	0.009345300182677903	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998807581776561	WITHOUT_CLASSIFICATION	1.192418223439159E-4	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999997091405157	WITHOUT_CLASSIFICATION	2.9085948423024503E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999972083826724	WITHOUT_CLASSIFICATION	2.791617327544712E-6	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999206148901234	WITHOUT_CLASSIFICATION	7.938510987650544E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999989300995351	WITHOUT_CLASSIFICATION	1.0699004648999377E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.971935740895777	WITHOUT_CLASSIFICATION	0.028064259104223076	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999470002904	WITHOUT_CLASSIFICATION	5.299970960829159E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999998596976244	WITHOUT_CLASSIFICATION	1.4030237561071734E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999576261670947	WITHOUT_CLASSIFICATION	4.2373832905319946E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999576261670947	WITHOUT_CLASSIFICATION	4.2373832905319946E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999161247785	WITHOUT_CLASSIFICATION	8.387522155797793E-8	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999993579613877	WITHOUT_CLASSIFICATION	6.420386122796919E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999998943284053	WITHOUT_CLASSIFICATION	1.0567159468969708E-6	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999984710512653	WITHOUT_CLASSIFICATION	1.528948734679112E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999505627086	WITHOUT_CLASSIFICATION	4.943729146087441E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998147383737	WITHOUT_CLASSIFICATION	1.8526162623719278E-7	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999927824066333	WITHOUT_CLASSIFICATION	7.2175933668586305E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9998780734147079	WITHOUT_CLASSIFICATION	1.219265852920475E-4	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999936852018166	WITHOUT_CLASSIFICATION	6.31479818331811E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999993586888268	WITHOUT_CLASSIFICATION	6.413111731801909E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999996708405731	WITHOUT_CLASSIFICATION	3.291594269559818E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999998363933819	WITHOUT_CLASSIFICATION	1.636066181553563E-7	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999993530124892	WITHOUT_CLASSIFICATION	6.469875107188351E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999922209447704	WITHOUT_CLASSIFICATION	7.77905522962477E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999985610406124	WITHOUT_CLASSIFICATION	1.4389593875831784E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997985112701	WITHOUT_CLASSIFICATION	2.0148872985546009E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999833666745	WITHOUT_CLASSIFICATION	1.6633325486238875E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998976491962	WITHOUT_CLASSIFICATION	1.0235080388048023E-7	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999226385463	WITHOUT_CLASSIFICATION	7.736145367081964E-8	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999137384263	WITHOUT_CLASSIFICATION	8.626157374190635E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999893689732	WITHOUT_CLASSIFICATION	1.0631026738624634E-8	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999996826589524	WITHOUT_CLASSIFICATION	3.173410475501804E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999995329087658	WITHOUT_CLASSIFICATION	4.67091234137483E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998593745395	WITHOUT_CLASSIFICATION	1.4062546042444287E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.971935740895777	WITHOUT_CLASSIFICATION	0.028064259104223076	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999998005357935	WITHOUT_CLASSIFICATION	1.9946420649196335E-6	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999282758116	WITHOUT_CLASSIFICATION	7.172418831801416E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999074467474	WITHOUT_CLASSIFICATION	9.25532526382735E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999985785627067	WITHOUT_CLASSIFICATION	1.421437293299631E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999996687544684	WITHOUT_CLASSIFICATION	3.3124553161128445E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997075498548	WITHOUT_CLASSIFICATION	2.9245014518545744E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999599396532661	WITHOUT_CLASSIFICATION	4.0060346733878974E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999981268777371	WITHOUT_CLASSIFICATION	1.8731222628733248E-6	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999994551512871	WITHOUT_CLASSIFICATION	5.448487129073715E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999509987824	WITHOUT_CLASSIFICATION	4.900121758770647E-8	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999999109233947	WITHOUT_CLASSIFICATION	8.907660531080163E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999985631127651	WITHOUT_CLASSIFICATION	1.4368872348133482E-6	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999128181872511	WITHOUT_CLASSIFICATION	8.718181274890332E-4	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999958883188766	WITHOUT_CLASSIFICATION	4.111681123349799E-6	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999992299062708	WITHOUT_CLASSIFICATION	7.700937291592839E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999420766107	WITHOUT_CLASSIFICATION	5.792338917438934E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999420766107	WITHOUT_CLASSIFICATION	5.792338917438934E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999998386915056	WITHOUT_CLASSIFICATION	1.6130849440253295E-6	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999986956612739	WITHOUT_CLASSIFICATION	1.304338726198723E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999959455510596	WITHOUT_CLASSIFICATION	4.0544489402973346E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999959455510596	WITHOUT_CLASSIFICATION	4.0544489402973346E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999826866077	WITHOUT_CLASSIFICATION	1.731339227733353E-8	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999996618499228	WITHOUT_CLASSIFICATION	3.3815007712262433E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999772714474	WITHOUT_CLASSIFICATION	2.2728552511389436E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999973947465743	WITHOUT_CLASSIFICATION	2.605253425649048E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999747715343438	WITHOUT_CLASSIFICATION	2.522846565624439E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999950583366073	WITHOUT_CLASSIFICATION	4.9416633926623E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999733603029	WITHOUT_CLASSIFICATION	2.6639697147481517E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999733603029	WITHOUT_CLASSIFICATION	2.6639697147481517E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999934873112288	WITHOUT_CLASSIFICATION	6.512688771172717E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999997892748551	WITHOUT_CLASSIFICATION	2.1072514483431985E-7	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999963187497061	WITHOUT_CLASSIFICATION	3.681250293871297E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997184491235	WITHOUT_CLASSIFICATION	2.81550876579549E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997184491235	WITHOUT_CLASSIFICATION	2.81550876579549E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999994905119427	WITHOUT_CLASSIFICATION	5.094880572360439E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997187801111	WITHOUT_CLASSIFICATION	2.8121988898941674E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999796723709251	WITHOUT_CLASSIFICATION	2.0327629074934587E-5	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999988355274135	WITHOUT_CLASSIFICATION	1.1644725864448777E-6	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999990297006437	WITHOUT_CLASSIFICATION	9.702993563345971E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994199654956	WITHOUT_CLASSIFICATION	5.800345044179561E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999346429927	WITHOUT_CLASSIFICATION	6.535700718216525E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.99999988795506	WITHOUT_CLASSIFICATION	1.1204493997012835E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998205841192	WITHOUT_CLASSIFICATION	1.7941588073962188E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999979755048988	WITHOUT_CLASSIFICATION	2.024495101165209E-6	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999994027579	WITHOUT_CLASSIFICATION	5.97242078688568E-10	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999982126922983	WITHOUT_CLASSIFICATION	1.7873077016997425E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9998845428263647	WITHOUT_CLASSIFICATION	1.1545717363530216E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999984229998357	WITHOUT_CLASSIFICATION	1.5770001643854079E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999938503762837	WITHOUT_CLASSIFICATION	6.14962371624709E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999879696041548	WITHOUT_CLASSIFICATION	1.2030395845180082E-5	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999804506025	WITHOUT_CLASSIFICATION	1.9549397544939007E-8	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999980303509564	WITHOUT_CLASSIFICATION	1.9696490435307575E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999997939016441	WITHOUT_CLASSIFICATION	2.0609835594660632E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999970209220104	WITHOUT_CLASSIFICATION	2.9790779896718065E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999999578559674	WITHOUT_CLASSIFICATION	4.214403259055576E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999971892311224	WITHOUT_CLASSIFICATION	2.8107688776453255E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999115078710488	WITHOUT_CLASSIFICATION	8.84921289511622E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999699611834348	WITHOUT_CLASSIFICATION	3.003881656519838E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999931687218607	WITHOUT_CLASSIFICATION	6.83127813932623E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999989540961887	WITHOUT_CLASSIFICATION	1.045903811372948E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999975848272268	WITHOUT_CLASSIFICATION	2.4151727732542416E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999590613215577	WITHOUT_CLASSIFICATION	4.0938678442277584E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999887003801	WITHOUT_CLASSIFICATION	1.1299619927628812E-8	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999797302495	WITHOUT_CLASSIFICATION	2.0269750457914887E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998831144561	WITHOUT_CLASSIFICATION	1.1688554397188194E-7	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999385097343	WITHOUT_CLASSIFICATION	6.149026559224799E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998077464517	WITHOUT_CLASSIFICATION	1.9225354829071777E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999993149222118	WITHOUT_CLASSIFICATION	6.850777882663385E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998969345788	WITHOUT_CLASSIFICATION	1.0306542121675555E-7	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999974813980221	WITHOUT_CLASSIFICATION	2.5186019778974895E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999929058830532	WITHOUT_CLASSIFICATION	7.094116946885341E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999996745852477	WITHOUT_CLASSIFICATION	3.2541475222121036E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999963005236108	WITHOUT_CLASSIFICATION	3.6994763893339285E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999991556903403	WITHOUT_CLASSIFICATION	8.443096596673856E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998308695464	WITHOUT_CLASSIFICATION	1.6913045372226455E-7	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984831700393	WITHOUT_CLASSIFICATION	1.516829960750286E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999985089728962	WITHOUT_CLASSIFICATION	1.491027103788003E-6	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999997260892786	WITHOUT_CLASSIFICATION	2.739107214179325E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999993303273089	WITHOUT_CLASSIFICATION	6.696726909984715E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.999999125173194	WITHOUT_CLASSIFICATION	8.748268060878638E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999983032398024	WITHOUT_CLASSIFICATION	1.6967601975223535E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999985363807978	WITHOUT_CLASSIFICATION	1.4636192021994236E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999988577203428	WITHOUT_CLASSIFICATION	1.1422796571811514E-6	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999958314293347	WITHOUT_CLASSIFICATION	4.168570665289917E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999981602123225	WITHOUT_CLASSIFICATION	1.8397876774414012E-6	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999500639104	WITHOUT_CLASSIFICATION	4.993608966582845E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999964003978072	WITHOUT_CLASSIFICATION	3.599602192805874E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999667891669	WITHOUT_CLASSIFICATION	3.3210833154402276E-8	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.999998407227145	WITHOUT_CLASSIFICATION	1.5927728550590997E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999989632262886	WITHOUT_CLASSIFICATION	1.036773711357305E-6	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999996554763665	WITHOUT_CLASSIFICATION	3.4452363354198707E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999989615067053	WITHOUT_CLASSIFICATION	1.038493294745065E-6	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999995805553501	WITHOUT_CLASSIFICATION	4.194446499815197E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9996931699234566	WITHOUT_CLASSIFICATION	3.068300765434197E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997512829601	WITHOUT_CLASSIFICATION	2.487170398705323E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997512829601	WITHOUT_CLASSIFICATION	2.487170398705323E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9997300265362032	WITHOUT_CLASSIFICATION	2.699734637967956E-4	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999336931309856	WITHOUT_CLASSIFICATION	6.630686901448472E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999669802984	WITHOUT_CLASSIFICATION	3.301970168843025E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999993233448717	WITHOUT_CLASSIFICATION	6.766551282526445E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999976263739324	WITHOUT_CLASSIFICATION	2.3736260674521295E-6	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999952450255228	WITHOUT_CLASSIFICATION	4.7549744771417525E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999994543518363	WITHOUT_CLASSIFICATION	5.456481637443401E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999999032886	WITHOUT_CLASSIFICATION	9.671139945124526E-10	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999988322853564	WITHOUT_CLASSIFICATION	1.167714643638928E-6	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999795942838214	WITHOUT_CLASSIFICATION	2.0405716178634435E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999200977439	WITHOUT_CLASSIFICATION	7.99022562209739E-8	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999965184006211	WITHOUT_CLASSIFICATION	3.481599378832582E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999502984663	WITHOUT_CLASSIFICATION	4.970153363157282E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999996894313423	WITHOUT_CLASSIFICATION	3.105686577173762E-7	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999056450845	WITHOUT_CLASSIFICATION	9.435491554769677E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999056450845	WITHOUT_CLASSIFICATION	9.435491554769677E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999244900858	WITHOUT_CLASSIFICATION	7.550991421424749E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999987227463981	WITHOUT_CLASSIFICATION	1.2772536018530996E-6	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999123829435	WITHOUT_CLASSIFICATION	8.761705642389698E-8	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999985310501	WITHOUT_CLASSIFICATION	1.468949771770798E-9	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994088745148	WITHOUT_CLASSIFICATION	5.911254852276424E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999469792719166	WITHOUT_CLASSIFICATION	5.302072808346166E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999533007786	WITHOUT_CLASSIFICATION	4.6699221400286935E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.999998853511903	WITHOUT_CLASSIFICATION	1.1464880970237136E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999918963976675	WITHOUT_CLASSIFICATION	8.103602332544087E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999970369313	WITHOUT_CLASSIFICATION	2.963068725103906E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999411334678961	WITHOUT_CLASSIFICATION	5.8866532103897926E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999985832593	WITHOUT_CLASSIFICATION	1.4167407244808292E-9	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999996574643688	WITHOUT_CLASSIFICATION	3.425356311810722E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999930469853	WITHOUT_CLASSIFICATION	6.953014788816253E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999326682953	WITHOUT_CLASSIFICATION	6.733170467188952E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999998341987554	WITHOUT_CLASSIFICATION	1.6580124459674858E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999995826598003	WITHOUT_CLASSIFICATION	4.1734019963250924E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999835287245169	WITHOUT_CLASSIFICATION	1.647127548306289E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999741550966184	WITHOUT_CLASSIFICATION	2.584490338172988E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996565796389	WITHOUT_CLASSIFICATION	3.4342036109303437E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999998135723739	WITHOUT_CLASSIFICATION	1.8642762602568919E-7	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998160629	WITHOUT_CLASSIFICATION	1.8393700817026266E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999443294785	WITHOUT_CLASSIFICATION	5.567052146681497E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999974994959	WITHOUT_CLASSIFICATION	2.500504198181491E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999999890608098	WITHOUT_CLASSIFICATION	1.0939190195060598E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999854705826143	WITHOUT_CLASSIFICATION	1.4529417385758501E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9990290005030453	WITHOUT_CLASSIFICATION	9.70999496954602E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999995130346166	WITHOUT_CLASSIFICATION	4.869653833596576E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999719648837	WITHOUT_CLASSIFICATION	2.8035116260871877E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999622490571	WITHOUT_CLASSIFICATION	3.775094291198641E-8	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999932809726177	WITHOUT_CLASSIFICATION	6.719027382261632E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996045829467	WITHOUT_CLASSIFICATION	3.9541705334860015E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999868502114907	WITHOUT_CLASSIFICATION	1.3149788509166063E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999775899598	WITHOUT_CLASSIFICATION	2.2410040127005758E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999975271762	WITHOUT_CLASSIFICATION	2.4728238013235805E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999052547776	WITHOUT_CLASSIFICATION	9.474522251725286E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999996388424383	WITHOUT_CLASSIFICATION	3.611575617171278E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999040197086	WITHOUT_CLASSIFICATION	9.598029148253316E-8	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998397759233	WITHOUT_CLASSIFICATION	1.6022407655191323E-7	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999886197719065	WITHOUT_CLASSIFICATION	1.1380228093491355E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.999998861445033	WITHOUT_CLASSIFICATION	1.1385549669883717E-6	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999203801097	WITHOUT_CLASSIFICATION	7.961989036020508E-8	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998263968893	WITHOUT_CLASSIFICATION	1.7360311055058282E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998263968893	WITHOUT_CLASSIFICATION	1.7360311055058282E-7	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999991783287475	WITHOUT_CLASSIFICATION	8.216712525180675E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995299247804	WITHOUT_CLASSIFICATION	4.7007521969704904E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999726634865	WITHOUT_CLASSIFICATION	2.7336513513990622E-8	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999998147973923	WITHOUT_CLASSIFICATION	1.8520260773008165E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998620378793	WITHOUT_CLASSIFICATION	1.3796212071164488E-7	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999988944555	WITHOUT_CLASSIFICATION	1.1055444763602243E-9	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999997146807593	WITHOUT_CLASSIFICATION	2.853192407510472E-7	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997777456586	WITHOUT_CLASSIFICATION	2.2225434132208062E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999987773831	WITHOUT_CLASSIFICATION	1.2226169230439425E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952943412667	WITHOUT_CLASSIFICATION	4.7056587333175245E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961371275276	WITHOUT_CLASSIFICATION	3.862872472361563E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999715189508804	WITHOUT_CLASSIFICATION	2.848104911960268E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999852172013213	WITHOUT_CLASSIFICATION	1.4782798678761058E-5	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999994865720471	WITHOUT_CLASSIFICATION	5.134279529118234E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999998872258444	WITHOUT_CLASSIFICATION	1.1277415560099247E-6	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999995657785027	WITHOUT_CLASSIFICATION	4.3422149731973536E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999999945242554	WITHOUT_CLASSIFICATION	5.47574460872751E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999961654594	WITHOUT_CLASSIFICATION	3.834540653454323E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999644258991	WITHOUT_CLASSIFICATION	3.557410094081837E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999951834963587	WITHOUT_CLASSIFICATION	4.816503641229181E-6	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999992386659337	WITHOUT_CLASSIFICATION	7.613340663560737E-7	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998056118716	WITHOUT_CLASSIFICATION	1.943881284059121E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999585185065	WITHOUT_CLASSIFICATION	4.148149345882049E-8	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999958714861023	WITHOUT_CLASSIFICATION	4.128513897799134E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999998201743799	WITHOUT_CLASSIFICATION	1.7982561996252081E-7	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999998743364595	WITHOUT_CLASSIFICATION	1.2566354049322856E-6	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999982011258165	WITHOUT_CLASSIFICATION	1.7988741834565574E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999924474107	WITHOUT_CLASSIFICATION	7.552589321397935E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999895016587412	WITHOUT_CLASSIFICATION	1.0498341258691473E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998806982469	WITHOUT_CLASSIFICATION	1.1930175324327882E-7	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998594154114	WITHOUT_CLASSIFICATION	1.4058458874347155E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999659785452	WITHOUT_CLASSIFICATION	3.4021454768217964E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999994222309048	WITHOUT_CLASSIFICATION	5.777690952101366E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999502042418	WITHOUT_CLASSIFICATION	4.979575826532707E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999915368541	WITHOUT_CLASSIFICATION	8.46314588162799E-9	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999670717517226	WITHOUT_CLASSIFICATION	3.2928248277398634E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999366688774	WITHOUT_CLASSIFICATION	6.333112248323041E-8	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999148749388	WITHOUT_CLASSIFICATION	8.51250612414665E-8	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999972351905867	WITHOUT_CLASSIFICATION	2.764809413334714E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999997468884791	WITHOUT_CLASSIFICATION	2.531115207973524E-7	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999927169767416	WITHOUT_CLASSIFICATION	7.283023258308817E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999986380768569	WITHOUT_CLASSIFICATION	1.361923143083664E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998779784736	WITHOUT_CLASSIFICATION	1.2202152647677217E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999482865126	WITHOUT_CLASSIFICATION	5.171348739200329E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999874962567	WITHOUT_CLASSIFICATION	1.2503743286541523E-8	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998973307822561	WITHOUT_CLASSIFICATION	1.0266921774385832E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998643553525	WITHOUT_CLASSIFICATION	1.3564464743649724E-7	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999988843835189	WITHOUT_CLASSIFICATION	1.1156164811023228E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998270916398	WITHOUT_CLASSIFICATION	1.7290836027266998E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999502984663	WITHOUT_CLASSIFICATION	4.970153363157282E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999967911675921	WITHOUT_CLASSIFICATION	3.208832407811797E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999862559391	WITHOUT_CLASSIFICATION	1.3744060897312095E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999863798319	WITHOUT_CLASSIFICATION	1.3620168144648891E-8	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999388898079	WITHOUT_CLASSIFICATION	6.111019219370544E-8	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999958761675	WITHOUT_CLASSIFICATION	4.123832492174655E-8	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999936145817	WITHOUT_CLASSIFICATION	6.3854182817543825E-9	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999977391001926	WITHOUT_CLASSIFICATION	2.2608998074154926E-6	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998975845989789	WITHOUT_CLASSIFICATION	1.02415401021083E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999990579458438	WITHOUT_CLASSIFICATION	9.420541563343026E-7	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999985880660266	WITHOUT_CLASSIFICATION	1.411933973398478E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999973499605	WITHOUT_CLASSIFICATION	2.6500394867715514E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997678667893	WITHOUT_CLASSIFICATION	2.3213321074437758E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999308795571	WITHOUT_CLASSIFICATION	6.912044294812695E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999979664810716	WITHOUT_CLASSIFICATION	2.0335189284821576E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998796496761	WITHOUT_CLASSIFICATION	1.203503239453159E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999771990999	WITHOUT_CLASSIFICATION	2.2800900099252596E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999966586235352	WITHOUT_CLASSIFICATION	3.3413764649305615E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999950655980284	WITHOUT_CLASSIFICATION	4.934401971505967E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999777743758	WITHOUT_CLASSIFICATION	2.222562428048453E-8	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999988607009407	WITHOUT_CLASSIFICATION	1.1392990592645315E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999771990999	WITHOUT_CLASSIFICATION	2.2800900099252596E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994220160522957	WITHOUT_CLASSIFICATION	5.779839477041585E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999986269568614	WITHOUT_CLASSIFICATION	1.3730431386980166E-6	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999997929407963	WITHOUT_CLASSIFICATION	2.070592036011454E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998234666486	WITHOUT_CLASSIFICATION	1.7653335140935177E-7	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999977752422236	WITHOUT_CLASSIFICATION	2.22475777644599E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99999991082899	WITHOUT_CLASSIFICATION	8.917101008940029E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999819918376	WITHOUT_CLASSIFICATION	1.800816241642909E-8	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999385341165945	WITHOUT_CLASSIFICATION	6.14658834054577E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998926350677	WITHOUT_CLASSIFICATION	1.0736493238013342E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999999837670135	WITHOUT_CLASSIFICATION	1.6232986494288593E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999999174013325	WITHOUT_CLASSIFICATION	8.259866741117374E-8	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998957180312884	WITHOUT_CLASSIFICATION	1.0428196871158271E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999951011115	WITHOUT_CLASSIFICATION	4.898888459307709E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999121605239	WITHOUT_CLASSIFICATION	8.783947613338976E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999943258177	WITHOUT_CLASSIFICATION	5.674182252218464E-9	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999999442614821	WITHOUT_CLASSIFICATION	5.573851790446332E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998593745395	WITHOUT_CLASSIFICATION	1.4062546042444287E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999318506458	WITHOUT_CLASSIFICATION	6.814935412223162E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999744416571	WITHOUT_CLASSIFICATION	2.5558342882483046E-8	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999988047465214	WITHOUT_CLASSIFICATION	1.1952534785884688E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999745674976	WITHOUT_CLASSIFICATION	2.5432502425817227E-8	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999825060388	WITHOUT_CLASSIFICATION	1.7493961202217607E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999999496078108	WITHOUT_CLASSIFICATION	5.039218920131938E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999999636577	WITHOUT_CLASSIFICATION	3.6342296451826086E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999971635046	WITHOUT_CLASSIFICATION	2.8364953387354565E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999997071942	WITHOUT_CLASSIFICATION	2.9280579728836465E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999970956470496	WITHOUT_CLASSIFICATION	2.904352950320698E-6	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999251816748441	WITHOUT_CLASSIFICATION	7.481832515595431E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992533022815	WITHOUT_CLASSIFICATION	7.466977185256504E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999986672136969	WITHOUT_CLASSIFICATION	1.3327863031059828E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999999560243684	WITHOUT_CLASSIFICATION	4.3975631580174484E-8	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999998046119477	WITHOUT_CLASSIFICATION	1.9538805237911544E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999991415259738	WITHOUT_CLASSIFICATION	8.58474026147186E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.99999989228146	WITHOUT_CLASSIFICATION	1.0771853992043125E-7	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999992572616	WITHOUT_CLASSIFICATION	7.427384037970965E-9	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999550000642	WITHOUT_CLASSIFICATION	4.499993580796406E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999506403979	WITHOUT_CLASSIFICATION	4.9359602058142425E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999986252825303	WITHOUT_CLASSIFICATION	1.3747174697194205E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993259899798	WITHOUT_CLASSIFICATION	6.74010020154279E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999596521048	WITHOUT_CLASSIFICATION	4.0347895215688167E-8	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999853455338	WITHOUT_CLASSIFICATION	1.4654466349114929E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998830082387	WITHOUT_CLASSIFICATION	1.1699176128407762E-7	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998830082387	WITHOUT_CLASSIFICATION	1.1699176128407762E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999988864660373	WITHOUT_CLASSIFICATION	1.1135339627021489E-5	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997123086907	WITHOUT_CLASSIFICATION	2.8769130929412535E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999866526561	WITHOUT_CLASSIFICATION	1.3347343887044993E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999998959731908	WITHOUT_CLASSIFICATION	1.0402680904209107E-7	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999946132593175	WITHOUT_CLASSIFICATION	5.386740682580147E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999946132593175	WITHOUT_CLASSIFICATION	5.386740682580147E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9995309612643597	WITHOUT_CLASSIFICATION	4.690387356402495E-4	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999997642031325	WITHOUT_CLASSIFICATION	2.357968675449272E-7	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999143551976	WITHOUT_CLASSIFICATION	8.564480237680132E-8	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999701566447	WITHOUT_CLASSIFICATION	2.984335532840734E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998744922142	WITHOUT_CLASSIFICATION	1.2550778577418404E-7	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999985121154581	WITHOUT_CLASSIFICATION	1.487884541893394E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999997030988205	WITHOUT_CLASSIFICATION	2.9690117952462013E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999981808931652	WITHOUT_CLASSIFICATION	1.8191068348408844E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999991786111031	WITHOUT_CLASSIFICATION	8.213888968065424E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999988121330703	WITHOUT_CLASSIFICATION	1.1878669297651995E-6	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9991415591827797	WITHOUT_CLASSIFICATION	8.58440817220285E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997239232606	WITHOUT_CLASSIFICATION	2.7607673941396287E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997239232606	WITHOUT_CLASSIFICATION	2.7607673941396287E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999933209958	WITHOUT_CLASSIFICATION	6.67900431609396E-9	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998939069799959	WITHOUT_CLASSIFICATION	1.0609302000411424E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999966623219531	WITHOUT_CLASSIFICATION	3.3376780469164236E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999971541931706	WITHOUT_CLASSIFICATION	2.8458068294494366E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999980075761064	WITHOUT_CLASSIFICATION	1.9924238937399162E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997944332537	WITHOUT_CLASSIFICATION	2.055667464150199E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933738873374327	WITHOUT_CLASSIFICATION	0.006626112662567248	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990915789324	WITHOUT_CLASSIFICATION	9.08421067544706E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998780606516	WITHOUT_CLASSIFICATION	1.2193934841391232E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999999130017982	WITHOUT_CLASSIFICATION	8.699820177045713E-8	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999608533206	WITHOUT_CLASSIFICATION	3.914667939274672E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999999837670135	WITHOUT_CLASSIFICATION	1.6232986494288593E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997675770786	WITHOUT_CLASSIFICATION	2.324229213263905E-7	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999985020514956	WITHOUT_CLASSIFICATION	1.4979485044006435E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999998849793337	WITHOUT_CLASSIFICATION	1.1502066624600734E-7	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999997762428056	WITHOUT_CLASSIFICATION	2.237571943682397E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999961285682477	WITHOUT_CLASSIFICATION	3.871431752376056E-6	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999990821486923	WITHOUT_CLASSIFICATION	9.178513076700098E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999936354470105	WITHOUT_CLASSIFICATION	6.364552989514854E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998979602011	WITHOUT_CLASSIFICATION	1.0203979890399128E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999844109603	WITHOUT_CLASSIFICATION	1.5589039760556072E-8	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999780553359281	WITHOUT_CLASSIFICATION	2.194466407185199E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999780553359281	WITHOUT_CLASSIFICATION	2.194466407185199E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994410952161	WITHOUT_CLASSIFICATION	5.589047839321925E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999998957174	WITHOUT_CLASSIFICATION	1.0428258309181966E-10	TEST
package	WITHOUT_CLASSIFICATION	0.9999779842009396	WITHOUT_CLASSIFICATION	2.2015799060470767E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999879032531	WITHOUT_CLASSIFICATION	1.2096747032816595E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999995113022238	WITHOUT_CLASSIFICATION	4.886977763750054E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999905895013	WITHOUT_CLASSIFICATION	9.410498666891364E-9	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999995035836136	WITHOUT_CLASSIFICATION	4.964163864309994E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999712287971	WITHOUT_CLASSIFICATION	2.877120276396334E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991508024413	WITHOUT_CLASSIFICATION	8.491975586446132E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999964414460897	WITHOUT_CLASSIFICATION	3.558553910452585E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991502218045	WITHOUT_CLASSIFICATION	8.497781954961712E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999951440042085	WITHOUT_CLASSIFICATION	4.855995791510453E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998248210501	WITHOUT_CLASSIFICATION	1.7517894990952512E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998691296258	WITHOUT_CLASSIFICATION	1.3087037418550407E-7	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999995678568593	WITHOUT_CLASSIFICATION	4.3214314074518847E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999330730844	WITHOUT_CLASSIFICATION	6.692691552217544E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999805585632	WITHOUT_CLASSIFICATION	1.944143687533539E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999922079215948	WITHOUT_CLASSIFICATION	7.792078405108778E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999978451855658	WITHOUT_CLASSIFICATION	2.1548144343280717E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998186847691	WITHOUT_CLASSIFICATION	1.8131523101914808E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998810261302	WITHOUT_CLASSIFICATION	1.1897386967872066E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999998124383597	WITHOUT_CLASSIFICATION	1.8756164031453762E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999796723709251	WITHOUT_CLASSIFICATION	2.0327629074934587E-5	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999989953803549	WITHOUT_CLASSIFICATION	1.004619645160724E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999420058169	WITHOUT_CLASSIFICATION	5.799418318744741E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999420058169	WITHOUT_CLASSIFICATION	5.799418318744741E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999918400983729	WITHOUT_CLASSIFICATION	8.159901627069191E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999568853835	WITHOUT_CLASSIFICATION	4.3114616494105027E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999749646504	WITHOUT_CLASSIFICATION	2.5035349521965106E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999932265045	WITHOUT_CLASSIFICATION	6.773495458362369E-9	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999994239435045	WITHOUT_CLASSIFICATION	5.760564954542837E-7	TEST
