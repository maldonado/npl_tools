test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996531010241749	WITHOUT_CLASSIFICATION	3.468989758250494E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999757972915497	WITHOUT_CLASSIFICATION	2.4202708450240397E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986773712598	WITHOUT_CLASSIFICATION	1.3226287400938152E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999981867361267	WITHOUT_CLASSIFICATION	1.8132638733343015E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998596834436	WITHOUT_CLASSIFICATION	1.4031655635830434E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998596834436	WITHOUT_CLASSIFICATION	1.4031655635830434E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999298623101	WITHOUT_CLASSIFICATION	7.013768989422552E-8	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999790088975	WITHOUT_CLASSIFICATION	2.0991102494114115E-7	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999965502937704	WITHOUT_CLASSIFICATION	3.4497062296357243E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993423633604	WITHOUT_CLASSIFICATION	6.576366396651221E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999951777456993	WITHOUT_CLASSIFICATION	4.822254300657219E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999951777456993	WITHOUT_CLASSIFICATION	4.822254300657219E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999618503105757	WITHOUT_CLASSIFICATION	3.8149689424204164E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999893802037	WITHOUT_CLASSIFICATION	1.061979628212729E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999997970631599	WITHOUT_CLASSIFICATION	2.029368401523313E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999997175144584	WITHOUT_CLASSIFICATION	2.8248554158009105E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999317371419	WITHOUT_CLASSIFICATION	6.82628580990313E-8	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999453912867988	WITHOUT_CLASSIFICATION	5.4608713201247425E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.999986663017002	WITHOUT_CLASSIFICATION	1.3336982997962548E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998706278183127	WITHOUT_CLASSIFICATION	1.2937218168723386E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.99985350522653	WITHOUT_CLASSIFICATION	1.4649477346997182E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999999757263113	WITHOUT_CLASSIFICATION	2.427368870165794E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999832466971322	WITHOUT_CLASSIFICATION	1.675330286768107E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999700991892516	WITHOUT_CLASSIFICATION	2.9900810748291973E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999997011308567	WITHOUT_CLASSIFICATION	2.9886914333038853E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999740294220503	WITHOUT_CLASSIFICATION	2.597057794984792E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999740294220503	WITHOUT_CLASSIFICATION	2.597057794984792E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999997107356084	WITHOUT_CLASSIFICATION	2.8926439158212724E-7	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999652075180724	WITHOUT_CLASSIFICATION	3.479248192760231E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999961310383	WITHOUT_CLASSIFICATION	3.868961629677065E-9	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999863923332	WITHOUT_CLASSIFICATION	1.3607666691298033E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999987010079261	WITHOUT_CLASSIFICATION	1.2989920739083517E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998534615218	WITHOUT_CLASSIFICATION	1.4653847814346496E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999986154233454	WITHOUT_CLASSIFICATION	1.3845766545536236E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999438531549	WITHOUT_CLASSIFICATION	5.6146845108061E-8	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999389668164	WITHOUT_CLASSIFICATION	6.103318356786717E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999965834804869	WITHOUT_CLASSIFICATION	3.416519513134926E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995124986014	WITHOUT_CLASSIFICATION	4.875013985961197E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999992966175612	WITHOUT_CLASSIFICATION	7.03382438827979E-7	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999964957084	WITHOUT_CLASSIFICATION	3.5042916732044926E-9	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999882611534	WITHOUT_CLASSIFICATION	1.1738846601971411E-7	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.99999984151602	WITHOUT_CLASSIFICATION	1.5848397998477393E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982137318858	WITHOUT_CLASSIFICATION	1.786268114139608E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903386540921	WITHOUT_CLASSIFICATION	9.661345907793487E-6	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999999954505793	WITHOUT_CLASSIFICATION	4.549420706950797E-8	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998682966107	WITHOUT_CLASSIFICATION	1.3170338935125313E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999977451726354	WITHOUT_CLASSIFICATION	2.2548273646184854E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999952681529	WITHOUT_CLASSIFICATION	4.731847036059448E-9	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998616343679	WITHOUT_CLASSIFICATION	1.3836563210652943E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999977451726354	WITHOUT_CLASSIFICATION	2.2548273646184854E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998616343679	WITHOUT_CLASSIFICATION	1.3836563210652943E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998826152351	WITHOUT_CLASSIFICATION	1.1738476489660582E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9988850553748552	WITHOUT_CLASSIFICATION	0.0011149446251448544	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999985054829402	WITHOUT_CLASSIFICATION	1.4945170597730967E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999537400498	WITHOUT_CLASSIFICATION	4.625995020774462E-7	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999982691672118	WITHOUT_CLASSIFICATION	1.730832788251136E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999965318451182	WITHOUT_CLASSIFICATION	3.46815488196583E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999431605073372	WITHOUT_CLASSIFICATION	5.683949266284337E-5	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999986936644409	WITHOUT_CLASSIFICATION	1.3063355590231693E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998787997887	WITHOUT_CLASSIFICATION	1.2120021126824628E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999500777585391	WITHOUT_CLASSIFICATION	4.992224146103895E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994412474215	WITHOUT_CLASSIFICATION	5.587525784853073E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999998616343679	WITHOUT_CLASSIFICATION	1.3836563210652943E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999869118328	WITHOUT_CLASSIFICATION	1.3088167158878651E-8	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999401126054	WITHOUT_CLASSIFICATION	5.98873945868669E-8	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999999769757332	WITHOUT_CLASSIFICATION	2.3024266927974056E-8	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999973011396407	WITHOUT_CLASSIFICATION	2.6988603593258692E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998743760723	WITHOUT_CLASSIFICATION	1.2562392777948923E-7	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999667568288	WITHOUT_CLASSIFICATION	3.3243171153449243E-8	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997799437857	WITHOUT_CLASSIFICATION	2.2005621421908148E-7	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998773303475	WITHOUT_CLASSIFICATION	1.226696524336785E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999998212401427	WITHOUT_CLASSIFICATION	1.7875985716836922E-7	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999944436793	WITHOUT_CLASSIFICATION	5.556320737437642E-9	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999889093021	WITHOUT_CLASSIFICATION	1.1090697778115778E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999963967199138	WITHOUT_CLASSIFICATION	3.6032800863313617E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999988798738707	WITHOUT_CLASSIFICATION	1.1201261292018843E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999840753179	WITHOUT_CLASSIFICATION	1.5924682107236227E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999990222824	WITHOUT_CLASSIFICATION	9.777175177876932E-10	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999993522649594	WITHOUT_CLASSIFICATION	6.477350406570802E-7	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999995719307408	WITHOUT_CLASSIFICATION	4.2806925906394776E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999992910760769	WITHOUT_CLASSIFICATION	7.08923923218767E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999995669003601	WITHOUT_CLASSIFICATION	4.330996399290941E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999847959425	WITHOUT_CLASSIFICATION	1.520405744652544E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999997267432023	WITHOUT_CLASSIFICATION	2.7325679773607886E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999968690063	WITHOUT_CLASSIFICATION	3.1309936147425366E-9	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999992251593136	WITHOUT_CLASSIFICATION	7.74840686316713E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998328197272	WITHOUT_CLASSIFICATION	1.6718027280030362E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999968690063	WITHOUT_CLASSIFICATION	3.1309936147425366E-9	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999932308965	WITHOUT_CLASSIFICATION	6.769103565650393E-9	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999951150564	WITHOUT_CLASSIFICATION	4.884943602643528E-8	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999977451726354	WITHOUT_CLASSIFICATION	2.2548273646184854E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999998705811378	WITHOUT_CLASSIFICATION	1.2941886220418452E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999999459677188	WITHOUT_CLASSIFICATION	5.4032281233901025E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999861634	WITHOUT_CLASSIFICATION	1.3836599938497312E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999861634	WITHOUT_CLASSIFICATION	1.3836599938497312E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999992680184501	WITHOUT_CLASSIFICATION	7.319815500289232E-7	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999995874956806	WITHOUT_CLASSIFICATION	4.125043194093662E-7	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999999917847603	WITHOUT_CLASSIFICATION	8.215239703097039E-8	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999895780509	WITHOUT_CLASSIFICATION	1.0421949174727982E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998667736565	WITHOUT_CLASSIFICATION	1.3322634344758923E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999999944091739	WITHOUT_CLASSIFICATION	5.5908261079428795E-8	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996604977464	WITHOUT_CLASSIFICATION	3.39502253745499E-7	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999998734821541	WITHOUT_CLASSIFICATION	1.2651784581326967E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999996940589989	WITHOUT_CLASSIFICATION	3.0594100108134966E-7	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996788548826	WITHOUT_CLASSIFICATION	3.2114511743479907E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995732501714	WITHOUT_CLASSIFICATION	4.2674982856903344E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995732501714	WITHOUT_CLASSIFICATION	4.2674982856903344E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999499161432	WITHOUT_CLASSIFICATION	5.008385671293625E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999334167059	WITHOUT_CLASSIFICATION	6.658329404194245E-8	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999978864338712	WITHOUT_CLASSIFICATION	2.1135661287358653E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995732501714	WITHOUT_CLASSIFICATION	4.2674982856903344E-7	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999499161432	WITHOUT_CLASSIFICATION	5.008385671293625E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999499161432	WITHOUT_CLASSIFICATION	5.008385671293625E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999831092702506	WITHOUT_CLASSIFICATION	1.6890729749472285E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999999220070236	WITHOUT_CLASSIFICATION	7.799297639107417E-7	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999847505213	WITHOUT_CLASSIFICATION	1.5249478696902897E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999989440985833	WITHOUT_CLASSIFICATION	1.0559014167187777E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999989733339841	WITHOUT_CLASSIFICATION	1.026666015805329E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999989733339841	WITHOUT_CLASSIFICATION	1.026666015805329E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999998899668419	WITHOUT_CLASSIFICATION	1.1003315816822383E-7	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999999586495806	WITHOUT_CLASSIFICATION	4.135041939044789E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999991021253514	WITHOUT_CLASSIFICATION	8.978746487258672E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996359177203	WITHOUT_CLASSIFICATION	3.6408227961500174E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996359177203	WITHOUT_CLASSIFICATION	3.6408227961500174E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998025560922	WITHOUT_CLASSIFICATION	1.9744390786086927E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970502738647	WITHOUT_CLASSIFICATION	2.9497261354423925E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999969838915087	WITHOUT_CLASSIFICATION	3.016108491335906E-6	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999558056947	WITHOUT_CLASSIFICATION	4.4194305271700396E-8	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999991119762349	WITHOUT_CLASSIFICATION	8.880237651733851E-7	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999650481766	WITHOUT_CLASSIFICATION	3.4951823403249385E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999996241789125	WITHOUT_CLASSIFICATION	3.7582108751197833E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999995894249837	WITHOUT_CLASSIFICATION	4.105750162633259E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999968874576683	WITHOUT_CLASSIFICATION	3.11254233160643E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999969838915087	WITHOUT_CLASSIFICATION	3.016108491335906E-6	TEST
then by fk	WITHOUT_CLASSIFICATION	0.999997295036327	WITHOUT_CLASSIFICATION	2.704963673046481E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999867967581275	WITHOUT_CLASSIFICATION	1.3203241872480273E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999867967581275	WITHOUT_CLASSIFICATION	1.3203241872480273E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998350555976	WITHOUT_CLASSIFICATION	1.6494440238531E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999967940940642	WITHOUT_CLASSIFICATION	3.205905935880949E-6	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999998953863217	WITHOUT_CLASSIFICATION	1.0461367824376501E-7	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997538435275	WITHOUT_CLASSIFICATION	2.461564724656552E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999989867832895	WITHOUT_CLASSIFICATION	1.0132167105444422E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999986022555999	WITHOUT_CLASSIFICATION	1.3977444001355792E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999982350927624	WITHOUT_CLASSIFICATION	1.7649072374874098E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999998135748462	WITHOUT_CLASSIFICATION	1.8642515380967716E-7	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999937105494	WITHOUT_CLASSIFICATION	6.2894506861509044E-9	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999827603354	WITHOUT_CLASSIFICATION	1.7239664591474167E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999827603354	WITHOUT_CLASSIFICATION	1.7239664591474167E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996531010241749	WITHOUT_CLASSIFICATION	3.468989758250494E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994302963874	WITHOUT_CLASSIFICATION	5.697036125519455E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999978129134725	WITHOUT_CLASSIFICATION	2.187086527559767E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999967414737709	WITHOUT_CLASSIFICATION	3.2585262291007063E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999992738201873	WITHOUT_CLASSIFICATION	7.261798126583084E-7	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999990697159266	WITHOUT_CLASSIFICATION	9.302840734112513E-7	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999983726561059	WITHOUT_CLASSIFICATION	1.6273438941433729E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996861135021	WITHOUT_CLASSIFICATION	3.138864978632891E-7	TEST
new	WITHOUT_CLASSIFICATION	0.9999646644208093	WITHOUT_CLASSIFICATION	3.533557919072209E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999587312099099	WITHOUT_CLASSIFICATION	4.126879009003182E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999976885850584	WITHOUT_CLASSIFICATION	2.3114149415600708E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986773712598	WITHOUT_CLASSIFICATION	1.3226287400938152E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999972814141178	WITHOUT_CLASSIFICATION	2.7185858822438815E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999972814141178	WITHOUT_CLASSIFICATION	2.7185858822438815E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999992677602086	WITHOUT_CLASSIFICATION	7.322397914078837E-7	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999993994253547	WITHOUT_CLASSIFICATION	6.0057464530760684E-6	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999999764328582	WITHOUT_CLASSIFICATION	2.3567141748509215E-8	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999979265435446	WITHOUT_CLASSIFICATION	2.0734564553923057E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999998260305026	WITHOUT_CLASSIFICATION	1.7396949740116967E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999462146346	WITHOUT_CLASSIFICATION	5.378536535495984E-8	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998596834436	WITHOUT_CLASSIFICATION	1.4031655635830434E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997243859725	WITHOUT_CLASSIFICATION	2.756140275552771E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976993387888	WITHOUT_CLASSIFICATION	2.3006612112754126E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999986516840627	WITHOUT_CLASSIFICATION	1.3483159373213077E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999992674174321	WITHOUT_CLASSIFICATION	7.325825680196449E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999980105154267	WITHOUT_CLASSIFICATION	1.98948457327009E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999818022036021	WITHOUT_CLASSIFICATION	1.819779639791353E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999984231561863	WITHOUT_CLASSIFICATION	1.5768438138074228E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998291645729	WITHOUT_CLASSIFICATION	1.708354272494418E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999728759054	WITHOUT_CLASSIFICATION	2.7124094595231636E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998736260487	WITHOUT_CLASSIFICATION	1.2637395132901886E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998680821166	WITHOUT_CLASSIFICATION	1.3191788336517084E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999995047884667	WITHOUT_CLASSIFICATION	4.952115332500876E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999851769947442	WITHOUT_CLASSIFICATION	1.4823005255739032E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999587312099099	WITHOUT_CLASSIFICATION	4.126879009003182E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999972814141178	WITHOUT_CLASSIFICATION	2.7185858822438815E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999984231561863	WITHOUT_CLASSIFICATION	1.5768438138074228E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999298623101	WITHOUT_CLASSIFICATION	7.013768989422552E-8	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999996033191624	WITHOUT_CLASSIFICATION	3.9668083765445497E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999994734175182	WITHOUT_CLASSIFICATION	5.265824817373776E-7	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999999064200227	WITHOUT_CLASSIFICATION	9.357997730359639E-7	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999960487504442	WITHOUT_CLASSIFICATION	3.951249555812905E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998611443021	WITHOUT_CLASSIFICATION	1.3885569802712911E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999861824139141	WITHOUT_CLASSIFICATION	1.3817586085733363E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998071883002	WITHOUT_CLASSIFICATION	1.9281169981936667E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999903465355964	WITHOUT_CLASSIFICATION	9.653464403535883E-6	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999911079322269	WITHOUT_CLASSIFICATION	8.892067773013308E-6	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999852444912055	WITHOUT_CLASSIFICATION	1.4755508794511883E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999852444912055	WITHOUT_CLASSIFICATION	1.4755508794511883E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997162563878	WITHOUT_CLASSIFICATION	2.837436122307096E-7	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999998549938964	WITHOUT_CLASSIFICATION	1.4500610353734166E-7	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999946402131727	WITHOUT_CLASSIFICATION	5.359786827321442E-6	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999891070752785	WITHOUT_CLASSIFICATION	1.08929247214272E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999022573158	WITHOUT_CLASSIFICATION	9.774268411170513E-8	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998710800142	WITHOUT_CLASSIFICATION	1.289199857417367E-7	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.999994340322061	WITHOUT_CLASSIFICATION	5.659677938963874E-6	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999790088975	WITHOUT_CLASSIFICATION	2.0991102494114115E-7	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999967987138983	WITHOUT_CLASSIFICATION	3.2012861016630375E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999369389287	WITHOUT_CLASSIFICATION	6.306107126132125E-8	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999999369389287	WITHOUT_CLASSIFICATION	6.306107126132125E-8	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999998158883754	WITHOUT_CLASSIFICATION	1.8411162459571363E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999970341041949	WITHOUT_CLASSIFICATION	2.96589580508051E-6	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999997797146131	WITHOUT_CLASSIFICATION	2.2028538686911937E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999600961175	WITHOUT_CLASSIFICATION	3.990388256918477E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999883781363796	WITHOUT_CLASSIFICATION	1.162186362048218E-5	TEST
return	WITHOUT_CLASSIFICATION	0.999998640083665	WITHOUT_CLASSIFICATION	1.3599163349973542E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999587312099099	WITHOUT_CLASSIFICATION	4.126879009003182E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986773712598	WITHOUT_CLASSIFICATION	1.3226287400938152E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999984231561863	WITHOUT_CLASSIFICATION	1.5768438138074228E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999984231561863	WITHOUT_CLASSIFICATION	1.5768438138074228E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996740979578	WITHOUT_CLASSIFICATION	3.2590204214196004E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996740979578	WITHOUT_CLASSIFICATION	3.2590204214196004E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997458425447	WITHOUT_CLASSIFICATION	2.5415745527097206E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999859114066338	WITHOUT_CLASSIFICATION	1.4088593366110132E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999859114066338	WITHOUT_CLASSIFICATION	1.4088593366110132E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999972250965303	WITHOUT_CLASSIFICATION	2.7749034696073617E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999998537271789	WITHOUT_CLASSIFICATION	1.462728210890788E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999919094914319	WITHOUT_CLASSIFICATION	8.09050856807044E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999928082694813	WITHOUT_CLASSIFICATION	7.191730518704161E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999999894397699	WITHOUT_CLASSIFICATION	1.0560230090222233E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993423633604	WITHOUT_CLASSIFICATION	6.576366396651221E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993423633604	WITHOUT_CLASSIFICATION	6.576366396651221E-7	TEST
not array	WITHOUT_CLASSIFICATION	0.9999989406882794	WITHOUT_CLASSIFICATION	1.0593117205474797E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999985866480803	WITHOUT_CLASSIFICATION	1.4133519196423833E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999887272218063	WITHOUT_CLASSIFICATION	1.1272778193738578E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999832964534665	WITHOUT_CLASSIFICATION	1.6703546533576173E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999884013839812	WITHOUT_CLASSIFICATION	1.159861601882722E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999797792137032	WITHOUT_CLASSIFICATION	2.0220786296814524E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999951777456993	WITHOUT_CLASSIFICATION	4.822254300657219E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999880931361403	WITHOUT_CLASSIFICATION	1.1906863859705663E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999880931361403	WITHOUT_CLASSIFICATION	1.1906863859705663E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999618503105757	WITHOUT_CLASSIFICATION	3.8149689424204164E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999618503105757	WITHOUT_CLASSIFICATION	3.8149689424204164E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999992097651595	WITHOUT_CLASSIFICATION	7.902348405472247E-7	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999992097651595	WITHOUT_CLASSIFICATION	7.902348405472247E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995605794224	WITHOUT_CLASSIFICATION	4.3942057767468686E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995605794224	WITHOUT_CLASSIFICATION	4.3942057767468686E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999993423633604	WITHOUT_CLASSIFICATION	6.576366396651221E-7	TEST
double	WITHOUT_CLASSIFICATION	0.9999951777456993	WITHOUT_CLASSIFICATION	4.822254300657219E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999880931361403	WITHOUT_CLASSIFICATION	1.1906863859705663E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999880931361403	WITHOUT_CLASSIFICATION	1.1906863859705663E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999618503105757	WITHOUT_CLASSIFICATION	3.8149689424204164E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999992097651595	WITHOUT_CLASSIFICATION	7.902348405472247E-7	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999992097651595	WITHOUT_CLASSIFICATION	7.902348405472247E-7	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995605794224	WITHOUT_CLASSIFICATION	4.3942057767468686E-7	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993911966554	WITHOUT_CLASSIFICATION	6.088033446088576E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999996762724672	WITHOUT_CLASSIFICATION	3.237275328395844E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999995039486225	WITHOUT_CLASSIFICATION	4.960513774916432E-7	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999986112020823	WITHOUT_CLASSIFICATION	1.3887979176343488E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999991454420468	WITHOUT_CLASSIFICATION	8.545579531628142E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999740894783209	WITHOUT_CLASSIFICATION	2.5910521679048963E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999803544886	WITHOUT_CLASSIFICATION	1.9645511402294403E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999994034921091	WITHOUT_CLASSIFICATION	5.965078909564246E-7	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999998421391176	WITHOUT_CLASSIFICATION	1.5786088226216782E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999994122583135	WITHOUT_CLASSIFICATION	5.877416866000172E-7	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999996398975968	WITHOUT_CLASSIFICATION	3.601024032957089E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999998591078938	WITHOUT_CLASSIFICATION	1.4089210619957059E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999992680184501	WITHOUT_CLASSIFICATION	7.319815500289232E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999740894783209	WITHOUT_CLASSIFICATION	2.5910521679048963E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999740894783209	WITHOUT_CLASSIFICATION	2.5910521679048963E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999740894783209	WITHOUT_CLASSIFICATION	2.5910521679048963E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999996317095983	WITHOUT_CLASSIFICATION	3.6829040180008074E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996916692595	WITHOUT_CLASSIFICATION	3.0833074048568715E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996916692595	WITHOUT_CLASSIFICATION	3.0833074048568715E-7	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999999918433675	WITHOUT_CLASSIFICATION	8.15663250931438E-8	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999845150954	WITHOUT_CLASSIFICATION	1.5484904599176448E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999453370236	WITHOUT_CLASSIFICATION	5.466297624883939E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999477551176	WITHOUT_CLASSIFICATION	5.2244882390165886E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999477551176	WITHOUT_CLASSIFICATION	5.2244882390165886E-8	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999317371419	WITHOUT_CLASSIFICATION	6.82628580990313E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999852997215	WITHOUT_CLASSIFICATION	1.4700278574575957E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999852997215	WITHOUT_CLASSIFICATION	1.4700278574575957E-8	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999868924433063	WITHOUT_CLASSIFICATION	1.3107556693737964E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999993212563905	WITHOUT_CLASSIFICATION	6.787436095407241E-7	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999992038650182	WITHOUT_CLASSIFICATION	7.961349817046496E-7	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998674893775165	WITHOUT_CLASSIFICATION	1.3251062248347735E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999691790202456	WITHOUT_CLASSIFICATION	3.08209797542498E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999373187599837	WITHOUT_CLASSIFICATION	6.268124001623951E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999453912867988	WITHOUT_CLASSIFICATION	5.4608713201247425E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999122792345658	WITHOUT_CLASSIFICATION	8.772076543414121E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.995829567847753	WITHOUT_CLASSIFICATION	0.004170432152247029	TEST
ID	WITHOUT_CLASSIFICATION	0.9998584502278272	WITHOUT_CLASSIFICATION	1.4154977217283995E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999850835833188	WITHOUT_CLASSIFICATION	1.4916416681200637E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.99985350522653	WITHOUT_CLASSIFICATION	1.4649477346997182E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998827823662	WITHOUT_CLASSIFICATION	1.172176337572221E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999883307740465	WITHOUT_CLASSIFICATION	1.1669225953649288E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999843044606131	WITHOUT_CLASSIFICATION	1.5695539386800312E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.99985350522653	WITHOUT_CLASSIFICATION	1.4649477346997182E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999946609432	WITHOUT_CLASSIFICATION	5.339056826747957E-9	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999852869276	WITHOUT_CLASSIFICATION	1.4713072329070487E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999807952096657	WITHOUT_CLASSIFICATION	1.9204790334427414E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999590647233149	WITHOUT_CLASSIFICATION	4.0935276685171194E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999968961866023	WITHOUT_CLASSIFICATION	3.103813397651122E-6	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999924800064086	WITHOUT_CLASSIFICATION	7.519993591470323E-6	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999726699010199	WITHOUT_CLASSIFICATION	2.733009898013576E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999700991892516	WITHOUT_CLASSIFICATION	2.9900810748291973E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931579674883	WITHOUT_CLASSIFICATION	6.8420325116491175E-6	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999997011308567	WITHOUT_CLASSIFICATION	2.9886914333038853E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.999996781005778	WITHOUT_CLASSIFICATION	3.2189942219851685E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999997782165465	WITHOUT_CLASSIFICATION	2.2178345350561728E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999041054126016	WITHOUT_CLASSIFICATION	9.589458739848433E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999453912867988	WITHOUT_CLASSIFICATION	5.4608713201247425E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931579674883	WITHOUT_CLASSIFICATION	6.8420325116491175E-6	TEST
properties	WITHOUT_CLASSIFICATION	0.999996781005778	WITHOUT_CLASSIFICATION	3.2189942219851685E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999041054126016	WITHOUT_CLASSIFICATION	9.589458739848433E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999233601778	WITHOUT_CLASSIFICATION	7.663982211203326E-8	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.999963027426673	WITHOUT_CLASSIFICATION	3.697257332697179E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999876704642	WITHOUT_CLASSIFICATION	1.2329535766556042E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999740294220503	WITHOUT_CLASSIFICATION	2.597057794984792E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999579927268093	WITHOUT_CLASSIFICATION	4.200727319069676E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999994254919546	WITHOUT_CLASSIFICATION	5.745080453998974E-7	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999987426518012	WITHOUT_CLASSIFICATION	1.2573481987616145E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999976387495274	WITHOUT_CLASSIFICATION	2.3612504726428113E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999914413874962	WITHOUT_CLASSIFICATION	8.55861250379934E-6	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999188332972	WITHOUT_CLASSIFICATION	8.116670269983103E-8	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999986532386703	WITHOUT_CLASSIFICATION	1.3467613296252975E-6	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999999196760476	WITHOUT_CLASSIFICATION	8.032395240813195E-7	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999886259877	WITHOUT_CLASSIFICATION	1.1374012196253099E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993752812236	WITHOUT_CLASSIFICATION	6.247187763563026E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999612450089436	WITHOUT_CLASSIFICATION	3.875499105643767E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999919008610906	WITHOUT_CLASSIFICATION	8.099138909473752E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999652075180724	WITHOUT_CLASSIFICATION	3.479248192760231E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999989828950758	WITHOUT_CLASSIFICATION	1.017104924146698E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999458068800273	WITHOUT_CLASSIFICATION	5.419311997265035E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931579674883	WITHOUT_CLASSIFICATION	6.8420325116491175E-6	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999996017943958	WITHOUT_CLASSIFICATION	3.9820560408340543E-7	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999738964098	WITHOUT_CLASSIFICATION	2.6103590198993955E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999999092826419	WITHOUT_CLASSIFICATION	9.071735815013619E-8	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9976758749519905	WITHOUT_CLASSIFICATION	0.002324125048009511	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999969316334697	WITHOUT_CLASSIFICATION	3.068366530349342E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999993888955463	WITHOUT_CLASSIFICATION	6.111044536424668E-7	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999999767327	WITHOUT_CLASSIFICATION	2.3267274070781177E-11	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999715338459	WITHOUT_CLASSIFICATION	2.8466154112300056E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999980870691613	WITHOUT_CLASSIFICATION	1.912930838844696E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999608569282843	WITHOUT_CLASSIFICATION	3.9143071715748724E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999833861975448	WITHOUT_CLASSIFICATION	1.6613802455255038E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999750166704521	WITHOUT_CLASSIFICATION	2.4983329547935545E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999996389560528	WITHOUT_CLASSIFICATION	3.61043947241445E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999863923332	WITHOUT_CLASSIFICATION	1.3607666691298033E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999999597305129	WITHOUT_CLASSIFICATION	4.026948700499126E-8	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999688923348	WITHOUT_CLASSIFICATION	3.1107665179796486E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999938168427145	WITHOUT_CLASSIFICATION	6.183157285604454E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999997388725478	WITHOUT_CLASSIFICATION	2.611274522362992E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999998385234624	WITHOUT_CLASSIFICATION	1.6147653771985841E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999980617962475	WITHOUT_CLASSIFICATION	1.938203752489546E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997835472698	WITHOUT_CLASSIFICATION	2.1645273007681727E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999996642065084	WITHOUT_CLASSIFICATION	3.3579349152292164E-7	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999967383239	WITHOUT_CLASSIFICATION	3.261676100939962E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999996700192714	WITHOUT_CLASSIFICATION	3.2998072867790385E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999996909009808	WITHOUT_CLASSIFICATION	3.090990191208863E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999996909009808	WITHOUT_CLASSIFICATION	3.090990191208863E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999944022145543	WITHOUT_CLASSIFICATION	5.597785445726294E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999999872036531	WITHOUT_CLASSIFICATION	1.2796346915060394E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.999999961303615	WITHOUT_CLASSIFICATION	3.869638493431497E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997133038058	WITHOUT_CLASSIFICATION	2.8669619418519386E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999993705948934	WITHOUT_CLASSIFICATION	6.294051065102565E-7	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997107457013	WITHOUT_CLASSIFICATION	2.8925429867593436E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999997012760989	WITHOUT_CLASSIFICATION	2.9872390102660957E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999941367320346	WITHOUT_CLASSIFICATION	5.863267965388451E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999955806170713	WITHOUT_CLASSIFICATION	4.419382928671136E-6	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999990571874644	WITHOUT_CLASSIFICATION	9.428125356997576E-7	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999921305750098	WITHOUT_CLASSIFICATION	7.869424990136059E-6	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999980705064312	WITHOUT_CLASSIFICATION	1.9294935688534508E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.999999709304251	WITHOUT_CLASSIFICATION	2.906957490053111E-7	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999999561316257	WITHOUT_CLASSIFICATION	4.386837431777777E-8	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999995964382383	WITHOUT_CLASSIFICATION	4.035617616887251E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999988141983039	WITHOUT_CLASSIFICATION	1.1858016961134204E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999999233119955	WITHOUT_CLASSIFICATION	7.66880045313657E-8	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999998763569112	WITHOUT_CLASSIFICATION	1.2364308884137963E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998786029173	WITHOUT_CLASSIFICATION	1.2139708269646253E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999771619549	WITHOUT_CLASSIFICATION	2.283804516036488E-8	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993006562098	WITHOUT_CLASSIFICATION	6.993437900879644E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999997526138544	WITHOUT_CLASSIFICATION	2.4738614547561666E-7	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999998155959995	WITHOUT_CLASSIFICATION	1.8440400056999718E-7	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999996206794999	WITHOUT_CLASSIFICATION	3.7932050010405376E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999998825836354	WITHOUT_CLASSIFICATION	1.1741636462912812E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999977078088401	WITHOUT_CLASSIFICATION	2.292191159816864E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994644776375	WITHOUT_CLASSIFICATION	5.355223625612849E-7	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999999060451915	WITHOUT_CLASSIFICATION	9.395480852812033E-8	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999304254868	WITHOUT_CLASSIFICATION	6.957451314338057E-8	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999999538982471	WITHOUT_CLASSIFICATION	4.610175290871482E-7	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999771619549	WITHOUT_CLASSIFICATION	2.283804516036488E-8	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999994829007326	WITHOUT_CLASSIFICATION	5.170992673670686E-7	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999999707799176	WITHOUT_CLASSIFICATION	2.922008239239415E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999995992724392	WITHOUT_CLASSIFICATION	4.007275607329713E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999863366803595	WITHOUT_CLASSIFICATION	1.3663319640454926E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999863366803595	WITHOUT_CLASSIFICATION	1.3663319640454926E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999991349743489	WITHOUT_CLASSIFICATION	8.650256510205482E-7	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999994824450105	WITHOUT_CLASSIFICATION	5.175549894568661E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999949315796886	WITHOUT_CLASSIFICATION	5.06842031145793E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999949315796886	WITHOUT_CLASSIFICATION	5.06842031145793E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999967383239	WITHOUT_CLASSIFICATION	3.261676100939962E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999871983207	WITHOUT_CLASSIFICATION	1.2801679187102029E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999990299523399	WITHOUT_CLASSIFICATION	9.700476600936638E-7	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993265999754	WITHOUT_CLASSIFICATION	6.734000245851591E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999990299523399	WITHOUT_CLASSIFICATION	9.700476600936638E-7	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993265999754	WITHOUT_CLASSIFICATION	6.734000245851591E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991141575286	WITHOUT_CLASSIFICATION	8.858424713002252E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999997000117949	WITHOUT_CLASSIFICATION	2.9998820509287206E-6	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999580760376	WITHOUT_CLASSIFICATION	4.192396232445248E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999995797878609	WITHOUT_CLASSIFICATION	4.2021213899956304E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999991863330704	WITHOUT_CLASSIFICATION	8.13666929519609E-7	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999982742356903	WITHOUT_CLASSIFICATION	1.7257643096506016E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996138725823	WITHOUT_CLASSIFICATION	3.8612741770128423E-7	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996138725823	WITHOUT_CLASSIFICATION	3.8612741770128423E-7	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999991217165894	WITHOUT_CLASSIFICATION	8.782834105476624E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999979386751	WITHOUT_CLASSIFICATION	2.061324900430025E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999995476027418	WITHOUT_CLASSIFICATION	4.523972582133088E-7	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999988053674	WITHOUT_CLASSIFICATION	1.1946326236858088E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999950689078311	WITHOUT_CLASSIFICATION	4.931092168878657E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999972810642339	WITHOUT_CLASSIFICATION	2.7189357661359694E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999998246540167	WITHOUT_CLASSIFICATION	1.7534598329628478E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999944645243677	WITHOUT_CLASSIFICATION	5.535475632294397E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999944645243677	WITHOUT_CLASSIFICATION	5.535475632294397E-6	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999947618543	WITHOUT_CLASSIFICATION	5.238145668806878E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991141575286	WITHOUT_CLASSIFICATION	8.858424713002252E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999962743877704	WITHOUT_CLASSIFICATION	3.725612229570143E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999764526836084	WITHOUT_CLASSIFICATION	2.3547316391627656E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999998080847061	WITHOUT_CLASSIFICATION	1.9191529396225943E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999999343149501	WITHOUT_CLASSIFICATION	6.568504989304833E-7	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999846897116478	WITHOUT_CLASSIFICATION	1.5310288352268394E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991141575286	WITHOUT_CLASSIFICATION	8.858424713002252E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999999343149501	WITHOUT_CLASSIFICATION	6.568504989304833E-7	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999846897116478	WITHOUT_CLASSIFICATION	1.5310288352268394E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999844325856	WITHOUT_CLASSIFICATION	1.5567414423326645E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999977984101646	WITHOUT_CLASSIFICATION	2.201589835457231E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999953698574	WITHOUT_CLASSIFICATION	4.630142590436335E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991141575286	WITHOUT_CLASSIFICATION	8.858424713002252E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991141575286	WITHOUT_CLASSIFICATION	8.858424713002252E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999966958880695	WITHOUT_CLASSIFICATION	3.3041119305769545E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999974178386446	WITHOUT_CLASSIFICATION	2.5821613555043176E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999997749513518	WITHOUT_CLASSIFICATION	2.2504864816697744E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999882611534	WITHOUT_CLASSIFICATION	1.1738846601971411E-7	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999999422548975	WITHOUT_CLASSIFICATION	5.774510258323072E-8	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999997400039854	WITHOUT_CLASSIFICATION	2.599960146758132E-7	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999971019844944	WITHOUT_CLASSIFICATION	2.8980155055411955E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997095203812	WITHOUT_CLASSIFICATION	2.904796188179595E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999930763189	WITHOUT_CLASSIFICATION	6.923681038473852E-9	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999882036154867	WITHOUT_CLASSIFICATION	1.1796384513281828E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999184040915	WITHOUT_CLASSIFICATION	8.15959084522134E-8	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999991382117521	WITHOUT_CLASSIFICATION	8.617882478453593E-7	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999996925340864	WITHOUT_CLASSIFICATION	3.0746591358748314E-7	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993421562591	WITHOUT_CLASSIFICATION	6.578437409624911E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996713559494	WITHOUT_CLASSIFICATION	3.286440507081904E-7	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999954372679803	WITHOUT_CLASSIFICATION	4.562732019602475E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999882611534	WITHOUT_CLASSIFICATION	1.1738846601971411E-7	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999891836185617	WITHOUT_CLASSIFICATION	1.0816381438286312E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999998812212044	WITHOUT_CLASSIFICATION	1.1877879557555778E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999674946335	WITHOUT_CLASSIFICATION	3.250536663645257E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999957712601341	WITHOUT_CLASSIFICATION	4.228739865949799E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999958843010724	WITHOUT_CLASSIFICATION	4.115698927514191E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999958843010724	WITHOUT_CLASSIFICATION	4.115698927514191E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999999882611534	WITHOUT_CLASSIFICATION	1.1738846601971411E-7	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999211902262418	WITHOUT_CLASSIFICATION	7.880977375827228E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999993051282625	WITHOUT_CLASSIFICATION	6.948717375423255E-7	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999201268433157	WITHOUT_CLASSIFICATION	7.987315668439766E-5	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999984457892039	WITHOUT_CLASSIFICATION	1.5542107960630039E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986646058995	WITHOUT_CLASSIFICATION	1.3353941005498152E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997921609112	WITHOUT_CLASSIFICATION	2.078390888631205E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998630820404	WITHOUT_CLASSIFICATION	1.3691795956908363E-7	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999988944020218	WITHOUT_CLASSIFICATION	1.1055979781425261E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999989067445	WITHOUT_CLASSIFICATION	1.093255504249932E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999467058484	WITHOUT_CLASSIFICATION	5.329415163084757E-8	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998479306244	WITHOUT_CLASSIFICATION	1.5206937566931995E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999992027504479	WITHOUT_CLASSIFICATION	7.972495520911154E-6	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998646070472124	WITHOUT_CLASSIFICATION	1.353929527876592E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999997980429	WITHOUT_CLASSIFICATION	2.0195709850649196E-9	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999849126439	WITHOUT_CLASSIFICATION	1.5087356079942386E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999998750548714	WITHOUT_CLASSIFICATION	1.2494512855139902E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999471619414	WITHOUT_CLASSIFICATION	5.283805867029703E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999999012311283	WITHOUT_CLASSIFICATION	9.876887167710539E-8	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998899668661	WITHOUT_CLASSIFICATION	1.1003313399659194E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999907376558	WITHOUT_CLASSIFICATION	9.262344251390572E-9	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999978791959	WITHOUT_CLASSIFICATION	2.1208039998517485E-9	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999113309005	WITHOUT_CLASSIFICATION	8.866909941155618E-8	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994546466684	WITHOUT_CLASSIFICATION	5.453533315690683E-7	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946063769882	WITHOUT_CLASSIFICATION	5.393623011805373E-6	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976798981876	WITHOUT_CLASSIFICATION	2.320101812392764E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990468459793	WITHOUT_CLASSIFICATION	9.531540206450858E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902790847696	WITHOUT_CLASSIFICATION	9.720915230392933E-6	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926337985588	WITHOUT_CLASSIFICATION	7.3662014412131155E-6	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897134686055	WITHOUT_CLASSIFICATION	1.0286531394582784E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985831869891	WITHOUT_CLASSIFICATION	1.4168130109892463E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999998383369847	WITHOUT_CLASSIFICATION	1.61663015226621E-7	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999843494137	WITHOUT_CLASSIFICATION	1.5650586289841247E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985441022101	WITHOUT_CLASSIFICATION	1.4558977898813793E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989757270985	WITHOUT_CLASSIFICATION	1.0242729015138542E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997861555459	WITHOUT_CLASSIFICATION	2.138444542453968E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963296614417	WITHOUT_CLASSIFICATION	3.6703385583565337E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991467772761	WITHOUT_CLASSIFICATION	8.532227238523278E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999616102635	WITHOUT_CLASSIFICATION	3.838973650112539E-7	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990810348603	WITHOUT_CLASSIFICATION	9.189651395166237E-7	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852307191435	WITHOUT_CLASSIFICATION	1.4769280856479426E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999958953150796	WITHOUT_CLASSIFICATION	4.104684920433052E-6	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995676752848	WITHOUT_CLASSIFICATION	4.323247152619712E-7	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999905608640386	WITHOUT_CLASSIFICATION	9.439135961463753E-6	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999796231503	WITHOUT_CLASSIFICATION	2.0376849648838444E-8	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999978398308	WITHOUT_CLASSIFICATION	2.1601691580003272E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998699783862305	WITHOUT_CLASSIFICATION	1.300216137695816E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999984466711138	WITHOUT_CLASSIFICATION	1.553328886290833E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999998875395703	WITHOUT_CLASSIFICATION	1.1246042977921443E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999944384477	WITHOUT_CLASSIFICATION	5.5615523044348734E-9	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999940186714532	WITHOUT_CLASSIFICATION	5.9813285468060796E-6	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999986028356301	WITHOUT_CLASSIFICATION	1.3971643698944603E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999779041653998	WITHOUT_CLASSIFICATION	2.2095834600172106E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999654856629596	WITHOUT_CLASSIFICATION	3.4514337040342015E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999969662915945	WITHOUT_CLASSIFICATION	3.0337084054953823E-6	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999990104718756	WITHOUT_CLASSIFICATION	9.895281243729477E-7	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999924411132	WITHOUT_CLASSIFICATION	7.558886755707016E-9	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999994671924234	WITHOUT_CLASSIFICATION	5.328075765404331E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999271032673767	WITHOUT_CLASSIFICATION	7.289673262340271E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999965408196	WITHOUT_CLASSIFICATION	3.4591803417200244E-9	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996894543172	WITHOUT_CLASSIFICATION	3.1054568288628704E-7	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991251800605	WITHOUT_CLASSIFICATION	8.748199394615648E-7	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996410458624	WITHOUT_CLASSIFICATION	3.5895413756613474E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999195142139	WITHOUT_CLASSIFICATION	8.048578610561635E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999804744951628	WITHOUT_CLASSIFICATION	1.9525504837180916E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999960478103	WITHOUT_CLASSIFICATION	3.952189659612345E-9	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999999905778166	WITHOUT_CLASSIFICATION	9.422183406667047E-8	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999997478437785	WITHOUT_CLASSIFICATION	2.5215622152805575E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972302425582	WITHOUT_CLASSIFICATION	2.769757441805787E-6	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999614202599	WITHOUT_CLASSIFICATION	3.857973995915537E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999971632202193	WITHOUT_CLASSIFICATION	2.8367797807243546E-6	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999281531462	WITHOUT_CLASSIFICATION	7.184685374304608E-8	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999994952611	WITHOUT_CLASSIFICATION	5.047388326647018E-10	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999717468297602	WITHOUT_CLASSIFICATION	2.825317023971839E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999997944511171	WITHOUT_CLASSIFICATION	2.055488829629073E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999226083306	WITHOUT_CLASSIFICATION	7.739166947821941E-8	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999970767646224	WITHOUT_CLASSIFICATION	2.9232353775806603E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998699783862305	WITHOUT_CLASSIFICATION	1.300216137695816E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997552334181	WITHOUT_CLASSIFICATION	2.4476658184330444E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999979442297	WITHOUT_CLASSIFICATION	2.055770404839669E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999998567685502	WITHOUT_CLASSIFICATION	1.4323144976796807E-7	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997960656218	WITHOUT_CLASSIFICATION	2.0393437816080807E-7	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999705380117	WITHOUT_CLASSIFICATION	2.946198833934694E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999997729649666	WITHOUT_CLASSIFICATION	2.2703503357220398E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999804744951628	WITHOUT_CLASSIFICATION	1.9525504837180916E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998851117219	WITHOUT_CLASSIFICATION	1.1488827804130498E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999796493262	WITHOUT_CLASSIFICATION	2.0350673899738758E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999465355333	WITHOUT_CLASSIFICATION	5.346446676079304E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999819411843	WITHOUT_CLASSIFICATION	1.8058815743936524E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999808055119	WITHOUT_CLASSIFICATION	1.919448803790589E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999258419948	WITHOUT_CLASSIFICATION	7.41580052158918E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999984811369	WITHOUT_CLASSIFICATION	1.5188630979764865E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998125350479	WITHOUT_CLASSIFICATION	1.874649520996485E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999857380531806	WITHOUT_CLASSIFICATION	1.4261946819470359E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999995951921331	WITHOUT_CLASSIFICATION	4.048078669107855E-7	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999999992622234	WITHOUT_CLASSIFICATION	7.377765984864401E-9	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999511797958	WITHOUT_CLASSIFICATION	4.88202041907849E-8	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999997189951618	WITHOUT_CLASSIFICATION	2.810048381746726E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999929365775622	WITHOUT_CLASSIFICATION	7.0634224379043355E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999998258789465	WITHOUT_CLASSIFICATION	1.7412105338493733E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997272746848	WITHOUT_CLASSIFICATION	2.7272531515503104E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999684894301	WITHOUT_CLASSIFICATION	3.151056989841162E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999904672098	WITHOUT_CLASSIFICATION	9.532790287088627E-9	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999999282330557	WITHOUT_CLASSIFICATION	7.176694425300124E-8	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999998414912234	WITHOUT_CLASSIFICATION	1.5850877660703183E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999999775324679	WITHOUT_CLASSIFICATION	2.246753210033609E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999992770920862	WITHOUT_CLASSIFICATION	7.229079137093409E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999997129228589	WITHOUT_CLASSIFICATION	2.870771410416504E-7	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999991483872798	WITHOUT_CLASSIFICATION	8.516127203239739E-7	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999999612219101	WITHOUT_CLASSIFICATION	3.877808980713697E-8	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999517937802	WITHOUT_CLASSIFICATION	4.820621968020965E-8	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999917580963	WITHOUT_CLASSIFICATION	8.241903684818249E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998699783862305	WITHOUT_CLASSIFICATION	1.300216137695816E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999998092222702	WITHOUT_CLASSIFICATION	1.9077772983096562E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999831363033	WITHOUT_CLASSIFICATION	1.6863696656768152E-8	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998218613298414	WITHOUT_CLASSIFICATION	1.7813867015850228E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999999524521206	WITHOUT_CLASSIFICATION	4.7547879401336696E-7	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999996206729133	WITHOUT_CLASSIFICATION	3.793270866607963E-7	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999997766045002	WITHOUT_CLASSIFICATION	2.2339549975849305E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998699783862305	WITHOUT_CLASSIFICATION	1.300216137695816E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999989822214737	WITHOUT_CLASSIFICATION	1.017778526279365E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999684894301	WITHOUT_CLASSIFICATION	3.151056989841162E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999990001774518	WITHOUT_CLASSIFICATION	9.998225482055048E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997272746848	WITHOUT_CLASSIFICATION	2.7272531515503104E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996457600738	WITHOUT_CLASSIFICATION	3.5423992608016714E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999617774954428	WITHOUT_CLASSIFICATION	3.822250455718651E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999980877827244	WITHOUT_CLASSIFICATION	1.9122172757253623E-6	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999465355333	WITHOUT_CLASSIFICATION	5.346446676079304E-8	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999819411843	WITHOUT_CLASSIFICATION	1.8058815743936524E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999808055119	WITHOUT_CLASSIFICATION	1.919448803790589E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999968097480441	WITHOUT_CLASSIFICATION	3.1902519558193854E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999993654569153	WITHOUT_CLASSIFICATION	6.345430847585448E-7	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998718983589	WITHOUT_CLASSIFICATION	1.2810164119984862E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997272746848	WITHOUT_CLASSIFICATION	2.7272531515503104E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996457600738	WITHOUT_CLASSIFICATION	3.5423992608016714E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998699783862305	WITHOUT_CLASSIFICATION	1.300216137695816E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999258419948	WITHOUT_CLASSIFICATION	7.41580052158918E-8	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999984811369	WITHOUT_CLASSIFICATION	1.5188630979764865E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998125350479	WITHOUT_CLASSIFICATION	1.874649520996485E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999461586914	WITHOUT_CLASSIFICATION	5.3841308782849487E-8	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999862555919	WITHOUT_CLASSIFICATION	1.3744408088406865E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999988039644492	WITHOUT_CLASSIFICATION	1.1960355508740472E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999387580486	WITHOUT_CLASSIFICATION	6.124195135474655E-8	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999980541870567	WITHOUT_CLASSIFICATION	1.9458129433392876E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.99999999790007	WITHOUT_CLASSIFICATION	2.0999299381698926E-9	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852307191435	WITHOUT_CLASSIFICATION	1.4769280856479426E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999975226720189	WITHOUT_CLASSIFICATION	2.4773279810514646E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999849861091384	WITHOUT_CLASSIFICATION	1.501389086149285E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999999042318767	WITHOUT_CLASSIFICATION	9.576812329926693E-7	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999987343885	WITHOUT_CLASSIFICATION	1.2656114643506675E-9	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999297311707	WITHOUT_CLASSIFICATION	7.026882928397688E-8	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902790847696	WITHOUT_CLASSIFICATION	9.720915230392933E-6	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926337985588	WITHOUT_CLASSIFICATION	7.3662014412131155E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989757270985	WITHOUT_CLASSIFICATION	1.0242729015138542E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999297311707	WITHOUT_CLASSIFICATION	7.026882928397688E-8	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999926825648	WITHOUT_CLASSIFICATION	7.3174352423301655E-9	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999074803563	WITHOUT_CLASSIFICATION	9.251964373156E-8	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989130256094	WITHOUT_CLASSIFICATION	1.086974390624212E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983697296676	WITHOUT_CLASSIFICATION	1.6302703324299184E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999841032351	WITHOUT_CLASSIFICATION	1.5896764914140503E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999949318209151	WITHOUT_CLASSIFICATION	5.06817908490621E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997861555459	WITHOUT_CLASSIFICATION	2.138444542453968E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999616102635	WITHOUT_CLASSIFICATION	3.838973650112539E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999994952611	WITHOUT_CLASSIFICATION	5.047388326647018E-10	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999998318888194	WITHOUT_CLASSIFICATION	1.6811118053379715E-7	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999457293433	WITHOUT_CLASSIFICATION	5.4270656771549586E-8	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999950381618	WITHOUT_CLASSIFICATION	4.96183820425559E-9	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999923694236765	WITHOUT_CLASSIFICATION	7.630576323507848E-6	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999517939584	WITHOUT_CLASSIFICATION	4.820604160401825E-8	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999949348523	WITHOUT_CLASSIFICATION	5.065147847328894E-9	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999998579333388	WITHOUT_CLASSIFICATION	1.420666612217301E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999989067445	WITHOUT_CLASSIFICATION	1.093255504249932E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999998342384929	WITHOUT_CLASSIFICATION	1.6576150704100588E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999409579606	WITHOUT_CLASSIFICATION	5.9042039430480206E-8	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999997751708479	WITHOUT_CLASSIFICATION	2.2482915197191996E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999964841220461	WITHOUT_CLASSIFICATION	3.5158779538410665E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999993341856012	WITHOUT_CLASSIFICATION	6.658143987704682E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999999474969372	WITHOUT_CLASSIFICATION	5.250306279055389E-7	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998757896498	WITHOUT_CLASSIFICATION	1.2421035018950745E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998686627088	WITHOUT_CLASSIFICATION	1.313372911349953E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991336937576	WITHOUT_CLASSIFICATION	8.663062423539057E-7	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999995940148144	WITHOUT_CLASSIFICATION	4.059851856161523E-7	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999990040691321	WITHOUT_CLASSIFICATION	9.959308678482428E-7	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999975643559509	WITHOUT_CLASSIFICATION	2.435644049126479E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984775441547	WITHOUT_CLASSIFICATION	1.5224558453190469E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994634479092	WITHOUT_CLASSIFICATION	5.365520906865065E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992075960115	WITHOUT_CLASSIFICATION	7.924039886051984E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999996308695277	WITHOUT_CLASSIFICATION	3.6913047238057544E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999992363328291	WITHOUT_CLASSIFICATION	7.636671708697344E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999510469946	WITHOUT_CLASSIFICATION	4.895300540359167E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999999975597439	WITHOUT_CLASSIFICATION	2.4402560967286197E-8	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982639754632	WITHOUT_CLASSIFICATION	1.7360245367485447E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999836572903	WITHOUT_CLASSIFICATION	1.634270970521078E-7	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999996979982694	WITHOUT_CLASSIFICATION	3.0200173057228146E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999958632158017	WITHOUT_CLASSIFICATION	4.136784198329545E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999468250693	WITHOUT_CLASSIFICATION	5.317493068666698E-8	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999998947660648	WITHOUT_CLASSIFICATION	1.052339351845964E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999821676737828	WITHOUT_CLASSIFICATION	1.7832326217163103E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999781881558371	WITHOUT_CLASSIFICATION	2.1811844162871443E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999974231114193	WITHOUT_CLASSIFICATION	2.5768885806662333E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999713991851	WITHOUT_CLASSIFICATION	2.860081496130736E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999997129870251	WITHOUT_CLASSIFICATION	2.870129749830008E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999145643964	WITHOUT_CLASSIFICATION	8.543560359291482E-8	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999906019236	WITHOUT_CLASSIFICATION	9.39807651423621E-9	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999970581056452	WITHOUT_CLASSIFICATION	2.9418943547650175E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999944287163477	WITHOUT_CLASSIFICATION	5.571283652247583E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999551159421	WITHOUT_CLASSIFICATION	4.488405787733092E-8	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999841523392293	WITHOUT_CLASSIFICATION	1.584766077069788E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999987985840112	WITHOUT_CLASSIFICATION	1.201415988865094E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999962124595162	WITHOUT_CLASSIFICATION	3.787540483764972E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999964325239853	WITHOUT_CLASSIFICATION	3.567476014617666E-6	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999648862217105	WITHOUT_CLASSIFICATION	3.511377828949609E-4	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999624438584838	WITHOUT_CLASSIFICATION	3.755614151623792E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999933195027	WITHOUT_CLASSIFICATION	6.680497144348891E-9	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999993507600877	WITHOUT_CLASSIFICATION	6.492399122818636E-7	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999891520586	WITHOUT_CLASSIFICATION	1.0847941489500527E-8	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999999125906763	WITHOUT_CLASSIFICATION	8.740932364828521E-8	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999994471345066	WITHOUT_CLASSIFICATION	5.528654934369786E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999406463242	WITHOUT_CLASSIFICATION	5.935367579582865E-8	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999733716799	WITHOUT_CLASSIFICATION	2.662832010512065E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999988532284526	WITHOUT_CLASSIFICATION	1.1467715473926154E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999998776804957	WITHOUT_CLASSIFICATION	1.223195043723696E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999713470754	WITHOUT_CLASSIFICATION	2.865292463056782E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998160774287	WITHOUT_CLASSIFICATION	1.839225713820789E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997774627924	WITHOUT_CLASSIFICATION	2.2253720755773603E-7	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999913970137	WITHOUT_CLASSIFICATION	8.602986444002046E-9	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998638044664	WITHOUT_CLASSIFICATION	1.36195533743635E-7	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999973904344879	WITHOUT_CLASSIFICATION	2.6095655121034416E-6	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999996169933162	WITHOUT_CLASSIFICATION	3.830066838291175E-7	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999996781460792	WITHOUT_CLASSIFICATION	3.218539208784435E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999999261823573	WITHOUT_CLASSIFICATION	7.381764258872532E-8	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999938639558	WITHOUT_CLASSIFICATION	6.136044197363626E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999999074070893	WITHOUT_CLASSIFICATION	9.259291065629766E-8	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999988319081886	WITHOUT_CLASSIFICATION	1.1680918113769442E-6	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999990767663828	WITHOUT_CLASSIFICATION	9.232336172403293E-7	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999984482488277	WITHOUT_CLASSIFICATION	1.5517511723073716E-5	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999995428457109	WITHOUT_CLASSIFICATION	4.571542890426832E-7	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999999283800573	WITHOUT_CLASSIFICATION	7.161994269422288E-7	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999333441784	WITHOUT_CLASSIFICATION	6.665582162062423E-8	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999496670695	WITHOUT_CLASSIFICATION	5.033293043022718E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999884370805	WITHOUT_CLASSIFICATION	1.1562919498075478E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999704419265	WITHOUT_CLASSIFICATION	2.955807356931592E-8	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999958664218859	WITHOUT_CLASSIFICATION	4.133578114169642E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999994576275385	WITHOUT_CLASSIFICATION	5.423724615536036E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999996235532123	WITHOUT_CLASSIFICATION	3.7644678777606207E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998362961394	WITHOUT_CLASSIFICATION	1.6370386056516144E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999997750812611	WITHOUT_CLASSIFICATION	2.2491873883835764E-7	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999989153604494	WITHOUT_CLASSIFICATION	1.0846395506464228E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999995261437152	WITHOUT_CLASSIFICATION	4.738562847834264E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999887190501315	WITHOUT_CLASSIFICATION	1.1280949868476689E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999987968052632	WITHOUT_CLASSIFICATION	1.2031947368379146E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991560864325	WITHOUT_CLASSIFICATION	8.439135675293506E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999995233676315	WITHOUT_CLASSIFICATION	4.766323684534292E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993055055358	WITHOUT_CLASSIFICATION	6.944944642128058E-7	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999990745632636	WITHOUT_CLASSIFICATION	9.254367362927397E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999998249816345	WITHOUT_CLASSIFICATION	1.7501836549834878E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999740413297497	WITHOUT_CLASSIFICATION	2.595867025030963E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999996570480465	WITHOUT_CLASSIFICATION	3.429519534798243E-7	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999992602060737	WITHOUT_CLASSIFICATION	7.397939262831401E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.999998346664824	WITHOUT_CLASSIFICATION	1.6533351759529948E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999998909162557	WITHOUT_CLASSIFICATION	1.0908374424464359E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999996455732	WITHOUT_CLASSIFICATION	3.544267294817269E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999980694485042	WITHOUT_CLASSIFICATION	1.930551495709339E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999089197905202	WITHOUT_CLASSIFICATION	9.108020947989213E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999913739535025	WITHOUT_CLASSIFICATION	8.626046497600266E-6	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999980694485042	WITHOUT_CLASSIFICATION	1.930551495709339E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.999999748828491	WITHOUT_CLASSIFICATION	2.5117150901893676E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999998696870974	WITHOUT_CLASSIFICATION	1.303129026107415E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999984828126972	WITHOUT_CLASSIFICATION	1.5171873027961908E-6	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999924250184556	WITHOUT_CLASSIFICATION	7.5749815444065964E-6	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999999121740917	WITHOUT_CLASSIFICATION	8.782590828725311E-8	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998930072967	WITHOUT_CLASSIFICATION	1.0699270330333786E-7	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999974011238414	WITHOUT_CLASSIFICATION	2.59887615859915E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999994933960689	WITHOUT_CLASSIFICATION	5.066039311503127E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999626036873	WITHOUT_CLASSIFICATION	3.739631275914489E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999878617372294	WITHOUT_CLASSIFICATION	1.2138262770550044E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999999948868061	WITHOUT_CLASSIFICATION	5.1131938947728566E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999993499655211	WITHOUT_CLASSIFICATION	6.500344788429706E-7	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999781938968	WITHOUT_CLASSIFICATION	2.1806103195518674E-7	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999994103588142	WITHOUT_CLASSIFICATION	5.896411858574108E-7	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999272655467	WITHOUT_CLASSIFICATION	7.273445330999214E-8	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999970384917829	WITHOUT_CLASSIFICATION	2.961508217123306E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999991081861779	WITHOUT_CLASSIFICATION	8.91813822106332E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999991081861779	WITHOUT_CLASSIFICATION	8.91813822106332E-6	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999977652558	WITHOUT_CLASSIFICATION	2.2347442052072217E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999812228346924	WITHOUT_CLASSIFICATION	1.8777165307596445E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999879756341536	WITHOUT_CLASSIFICATION	1.2024365846399764E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.999995808842391	WITHOUT_CLASSIFICATION	4.1911576089859135E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999997872446139	WITHOUT_CLASSIFICATION	2.127553859857387E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999313016511706	WITHOUT_CLASSIFICATION	6.869834882941433E-5	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999993342690527	WITHOUT_CLASSIFICATION	6.657309471750316E-7	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999976379197	WITHOUT_CLASSIFICATION	2.362080305261633E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999992911887153	WITHOUT_CLASSIFICATION	7.088112846797478E-7	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999987937001938	WITHOUT_CLASSIFICATION	1.206299806167384E-6	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999756251146	WITHOUT_CLASSIFICATION	2.4374885419988113E-8	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999952082101	WITHOUT_CLASSIFICATION	4.79178983479489E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999747425896	WITHOUT_CLASSIFICATION	2.5257410297440305E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999997727395201	WITHOUT_CLASSIFICATION	2.2726047977299798E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999983721612	WITHOUT_CLASSIFICATION	1.6278387145575004E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999999474969372	WITHOUT_CLASSIFICATION	5.250306279055389E-7	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999980035966045	WITHOUT_CLASSIFICATION	1.996403395516311E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999987598988	WITHOUT_CLASSIFICATION	1.2401012044257343E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999999926628452	WITHOUT_CLASSIFICATION	7.337154791709535E-8	TEST
do the test	WITHOUT_CLASSIFICATION	0.9991762798542662	WITHOUT_CLASSIFICATION	8.237201457338379E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999556009621	WITHOUT_CLASSIFICATION	4.439903781655533E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.999999344928917	WITHOUT_CLASSIFICATION	6.550710829635091E-7	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999543071822	WITHOUT_CLASSIFICATION	4.5692817636384346E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999674860248	WITHOUT_CLASSIFICATION	3.251397526693284E-8	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999907330441	WITHOUT_CLASSIFICATION	9.266955867383415E-9	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999730476558	WITHOUT_CLASSIFICATION	2.6952344327314686E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999993850344305	WITHOUT_CLASSIFICATION	6.149655694621258E-7	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999998865510866	WITHOUT_CLASSIFICATION	1.1344891334974879E-7	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999931800382594	WITHOUT_CLASSIFICATION	6.8199617405004335E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999990864956627	WITHOUT_CLASSIFICATION	9.135043372175066E-7	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999993439735652	WITHOUT_CLASSIFICATION	6.560264348140706E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999999971575744	WITHOUT_CLASSIFICATION	2.84242559550617E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999964784969888	WITHOUT_CLASSIFICATION	3.5215030112892826E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999980264324029	WITHOUT_CLASSIFICATION	1.9735675970807766E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999997534598635	WITHOUT_CLASSIFICATION	2.4654013658273866E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999357931181	WITHOUT_CLASSIFICATION	6.420688188221588E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999977604348389	WITHOUT_CLASSIFICATION	2.2395651610985843E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999998926014176	WITHOUT_CLASSIFICATION	1.073985823924797E-7	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999998569282895	WITHOUT_CLASSIFICATION	1.430717105029902E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999980063733025	WITHOUT_CLASSIFICATION	1.9936266975307725E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.999986801542975	WITHOUT_CLASSIFICATION	1.3198457024889372E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.9999998195920061	WITHOUT_CLASSIFICATION	1.8040799384198533E-7	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999731892812	WITHOUT_CLASSIFICATION	2.6810718719895552E-8	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999856216315	WITHOUT_CLASSIFICATION	1.437836848667146E-8	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999984687038183	WITHOUT_CLASSIFICATION	1.5312961816556027E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998507720371	WITHOUT_CLASSIFICATION	1.4922796284144114E-7	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982061168945	WITHOUT_CLASSIFICATION	1.7938831055313886E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990944918177	WITHOUT_CLASSIFICATION	9.055081822850182E-7	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991742856371	WITHOUT_CLASSIFICATION	8.257143628066162E-7	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999834783911	WITHOUT_CLASSIFICATION	1.652160884500486E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999367641388	WITHOUT_CLASSIFICATION	6.323586119256275E-8	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997591136258	WITHOUT_CLASSIFICATION	2.4088637421517433E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999954315075	WITHOUT_CLASSIFICATION	4.568492524709919E-9	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999996592764221	WITHOUT_CLASSIFICATION	3.4072357781930067E-7	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992617995213	WITHOUT_CLASSIFICATION	7.382004786187832E-7	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999996592764221	WITHOUT_CLASSIFICATION	3.4072357781930067E-7	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999954105256156	WITHOUT_CLASSIFICATION	4.589474384384778E-6	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999982527494607	WITHOUT_CLASSIFICATION	1.7472505392070973E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999967682959469	WITHOUT_CLASSIFICATION	3.2317040532075143E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998771744585	WITHOUT_CLASSIFICATION	1.2282554141213248E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999976054896524	WITHOUT_CLASSIFICATION	2.394510347644778E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999264781740969	WITHOUT_CLASSIFICATION	7.35218259031747E-5	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998880222369	WITHOUT_CLASSIFICATION	1.1197776308428053E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999993929718398	WITHOUT_CLASSIFICATION	6.070281601830839E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999772808805	WITHOUT_CLASSIFICATION	2.2719119447284557E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999940986247284	WITHOUT_CLASSIFICATION	5.901375271577E-6	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.999999488291513	WITHOUT_CLASSIFICATION	5.117084869873146E-7	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999947447864	WITHOUT_CLASSIFICATION	5.255213604342241E-9	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999997775954671	WITHOUT_CLASSIFICATION	2.2240453289416587E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999961444250675	WITHOUT_CLASSIFICATION	3.855574932528782E-6	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999769665561	WITHOUT_CLASSIFICATION	2.303344395430127E-8	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999970329118	WITHOUT_CLASSIFICATION	2.967088314827748E-9	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977792870359	WITHOUT_CLASSIFICATION	2.220712964108753E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977792870359	WITHOUT_CLASSIFICATION	2.220712964108753E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999998769406298	WITHOUT_CLASSIFICATION	1.2305937023330105E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999973248036856	WITHOUT_CLASSIFICATION	2.6751963143946574E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999936529105	WITHOUT_CLASSIFICATION	6.347089552192554E-9	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997872796941	WITHOUT_CLASSIFICATION	2.1272030598642316E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999263032889	WITHOUT_CLASSIFICATION	7.369671107095437E-8	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995313868458	WITHOUT_CLASSIFICATION	4.6861315423350974E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999994045969864	WITHOUT_CLASSIFICATION	5.954030135960977E-7	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999994363367279	WITHOUT_CLASSIFICATION	5.636632720906515E-7	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999988579986843	WITHOUT_CLASSIFICATION	1.1420013157927344E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999781295905	WITHOUT_CLASSIFICATION	2.187040940891564E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999394041073	WITHOUT_CLASSIFICATION	6.059589267884785E-8	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999291278655	WITHOUT_CLASSIFICATION	7.087213449617121E-8	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999682535549	WITHOUT_CLASSIFICATION	3.1746445060636486E-8	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996989013149	WITHOUT_CLASSIFICATION	3.0109868502605766E-7	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998564796505	WITHOUT_CLASSIFICATION	1.4352034949464784E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999719028404	WITHOUT_CLASSIFICATION	2.8097159653115154E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999831609848	WITHOUT_CLASSIFICATION	1.683901515635229E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999997365606563	WITHOUT_CLASSIFICATION	2.634393436531319E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999999479441529	WITHOUT_CLASSIFICATION	5.205584710483664E-8	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999990396444	WITHOUT_CLASSIFICATION	9.60355574648153E-10	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999957583681638	WITHOUT_CLASSIFICATION	4.241631836233986E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998278326783	WITHOUT_CLASSIFICATION	1.7216732169683035E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999487219664	WITHOUT_CLASSIFICATION	5.127803361547769E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999519602294	WITHOUT_CLASSIFICATION	4.8039770655179526E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999994838016527	WITHOUT_CLASSIFICATION	5.161983472570789E-7	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999986946015264	WITHOUT_CLASSIFICATION	1.3053984737220438E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999606207826	WITHOUT_CLASSIFICATION	3.9379217498228126E-8	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999997756931998	WITHOUT_CLASSIFICATION	2.243068003037551E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999906689971699	WITHOUT_CLASSIFICATION	9.331002829972225E-6	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999999932115719	WITHOUT_CLASSIFICATION	6.788428100871576E-8	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999999326216067	WITHOUT_CLASSIFICATION	6.737839329062145E-7	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999990625548173	WITHOUT_CLASSIFICATION	9.374451827847679E-7	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999740538345918	WITHOUT_CLASSIFICATION	2.5946165408193387E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999995979081063	WITHOUT_CLASSIFICATION	4.0209189361624723E-7	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999996461161976	WITHOUT_CLASSIFICATION	3.5388380231946993E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999665638805	WITHOUT_CLASSIFICATION	3.3436119627109515E-8	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997715925453	WITHOUT_CLASSIFICATION	2.284074548602561E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999989174324454	WITHOUT_CLASSIFICATION	1.0825675545686414E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999873700519	WITHOUT_CLASSIFICATION	1.262994808148924E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998917049703	WITHOUT_CLASSIFICATION	1.0829502975697461E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999628527259	WITHOUT_CLASSIFICATION	3.714727422055182E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994632984242	WITHOUT_CLASSIFICATION	5.367015759088337E-7	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999992828208637	WITHOUT_CLASSIFICATION	7.171791362275852E-7	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999950812329	WITHOUT_CLASSIFICATION	4.918766996068387E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.99999999836807	WITHOUT_CLASSIFICATION	1.6319300788094051E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999999580843241	WITHOUT_CLASSIFICATION	4.191567581981451E-8	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999712596576	WITHOUT_CLASSIFICATION	2.8740342433127354E-8	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998379907257	WITHOUT_CLASSIFICATION	1.620092743583477E-7	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996179268049	WITHOUT_CLASSIFICATION	3.820731951238043E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999989363769108	WITHOUT_CLASSIFICATION	1.0636230892134371E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986448615376	WITHOUT_CLASSIFICATION	1.3551384625237884E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999993765024809	WITHOUT_CLASSIFICATION	6.234975191325532E-7	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999187951484	WITHOUT_CLASSIFICATION	8.120485161805908E-8	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999997071388786	WITHOUT_CLASSIFICATION	2.9286112132155936E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999990423058841	WITHOUT_CLASSIFICATION	9.576941159845287E-7	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999989822214737	WITHOUT_CLASSIFICATION	1.017778526279365E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999989822214737	WITHOUT_CLASSIFICATION	1.017778526279365E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999356692077116	WITHOUT_CLASSIFICATION	6.433079228832307E-5	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999827827423704	WITHOUT_CLASSIFICATION	1.7217257629645002E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999393262144	WITHOUT_CLASSIFICATION	6.067378553391484E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999514382351	WITHOUT_CLASSIFICATION	4.856176501622304E-8	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999906981064	WITHOUT_CLASSIFICATION	9.301893584017705E-9	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999617350882	WITHOUT_CLASSIFICATION	3.826491178374821E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999999361925773	WITHOUT_CLASSIFICATION	6.380742269568227E-8	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999870934677	WITHOUT_CLASSIFICATION	1.2906532364012031E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999982191776916	WITHOUT_CLASSIFICATION	1.7808223083527443E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999955942084739	WITHOUT_CLASSIFICATION	4.4057915260985655E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998270885374	WITHOUT_CLASSIFICATION	1.7291146267604425E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999975495468565	WITHOUT_CLASSIFICATION	2.450453143442913E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999999222009219	WITHOUT_CLASSIFICATION	7.779907804880538E-8	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999933512309391	WITHOUT_CLASSIFICATION	6.648769060818703E-6	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999521812069	WITHOUT_CLASSIFICATION	4.781879319491948E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999987783045198	WITHOUT_CLASSIFICATION	1.2216954802423677E-6	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999975371528993	WITHOUT_CLASSIFICATION	2.462847100709563E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999971817473	WITHOUT_CLASSIFICATION	2.818252855153959E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.99999593972713	WITHOUT_CLASSIFICATION	4.060272870056867E-6	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999982380524275	WITHOUT_CLASSIFICATION	1.7619475725953526E-6	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997397587461	WITHOUT_CLASSIFICATION	2.6024125388519294E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999952843597	WITHOUT_CLASSIFICATION	4.7156403514755465E-9	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999999180018432	WITHOUT_CLASSIFICATION	8.199815679147956E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999847374660299	WITHOUT_CLASSIFICATION	1.5262533970092684E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999887108949	WITHOUT_CLASSIFICATION	1.1289105096854447E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999626316978	WITHOUT_CLASSIFICATION	3.7368302124813234E-8	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999996961928076	WITHOUT_CLASSIFICATION	3.0380719249276427E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997650325776	WITHOUT_CLASSIFICATION	2.3496742247051252E-7	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999603545653714	WITHOUT_CLASSIFICATION	3.96454346285534E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999997175812335	WITHOUT_CLASSIFICATION	2.8241876646579213E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999847374660299	WITHOUT_CLASSIFICATION	1.5262533970092684E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999995828761101	WITHOUT_CLASSIFICATION	4.171238897720394E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999973722002	WITHOUT_CLASSIFICATION	2.6277997615752515E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999196227108269	WITHOUT_CLASSIFICATION	8.037728917313928E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999995290754619	WITHOUT_CLASSIFICATION	4.7092453810378815E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999836863986	WITHOUT_CLASSIFICATION	1.6313601369788047E-8	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999674296596107	WITHOUT_CLASSIFICATION	3.25703403893802E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999998905005792	WITHOUT_CLASSIFICATION	1.0949942080149529E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998163153512	WITHOUT_CLASSIFICATION	1.8368464880061436E-7	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999954212332395	WITHOUT_CLASSIFICATION	4.578766760521233E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999995290754619	WITHOUT_CLASSIFICATION	4.7092453810378815E-7	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999657225939151	WITHOUT_CLASSIFICATION	3.427740608489856E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998163153512	WITHOUT_CLASSIFICATION	1.8368464880061436E-7	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999611365012	WITHOUT_CLASSIFICATION	3.886349874184139E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999970541812453	WITHOUT_CLASSIFICATION	2.9458187547306988E-6	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999946413317	WITHOUT_CLASSIFICATION	5.3586682936392685E-9	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999394041073	WITHOUT_CLASSIFICATION	6.059589267884785E-8	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999780354172	WITHOUT_CLASSIFICATION	2.1964582799066677E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998166196787	WITHOUT_CLASSIFICATION	1.8338032139534897E-7	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999604945378	WITHOUT_CLASSIFICATION	3.950546215342686E-8	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998688431198	WITHOUT_CLASSIFICATION	1.3115688033229706E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999961233536337	WITHOUT_CLASSIFICATION	3.8766463663062805E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999948285703054	WITHOUT_CLASSIFICATION	5.1714296945104E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999959608652949	WITHOUT_CLASSIFICATION	4.039134705140196E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999980481174949	WITHOUT_CLASSIFICATION	1.951882504986591E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999998126631983	WITHOUT_CLASSIFICATION	1.8733680170247417E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996149094125	WITHOUT_CLASSIFICATION	3.850905875252621E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999838554310194	WITHOUT_CLASSIFICATION	1.6144568980585107E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999902416314	WITHOUT_CLASSIFICATION	9.758368571939692E-9	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999693308969	WITHOUT_CLASSIFICATION	3.066910310705526E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.999999555082778	WITHOUT_CLASSIFICATION	4.449172220245149E-7	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999979973845	WITHOUT_CLASSIFICATION	2.0026155040989244E-9	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999994598215376	WITHOUT_CLASSIFICATION	5.401784623364512E-7	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999963297049015	WITHOUT_CLASSIFICATION	3.6702950985761743E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999996202343139	WITHOUT_CLASSIFICATION	3.7976568611016694E-7	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999996181743391	WITHOUT_CLASSIFICATION	3.8182566085281554E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999997346669357	WITHOUT_CLASSIFICATION	2.6533306429827567E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999992345670574	WITHOUT_CLASSIFICATION	7.654329426498387E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999348442167	WITHOUT_CLASSIFICATION	6.515578334632114E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999090398305	WITHOUT_CLASSIFICATION	9.096016957384548E-8	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999947300495229	WITHOUT_CLASSIFICATION	5.269950477117299E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999997711754952	WITHOUT_CLASSIFICATION	2.288245048244888E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999495006153377	WITHOUT_CLASSIFICATION	5.049938466223433E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999995172136678	WITHOUT_CLASSIFICATION	4.827863321190466E-7	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992341906164	WITHOUT_CLASSIFICATION	7.658093835368321E-7	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994006336013	WITHOUT_CLASSIFICATION	5.99366398689465E-7	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999994703213858	WITHOUT_CLASSIFICATION	5.296786141688246E-7	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999996754063435	WITHOUT_CLASSIFICATION	3.2459365649652324E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998760979089	WITHOUT_CLASSIFICATION	1.23902091260729E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999985602941	WITHOUT_CLASSIFICATION	1.4397058691860692E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999995958920145	WITHOUT_CLASSIFICATION	4.041079855428416E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999994625784754	WITHOUT_CLASSIFICATION	5.374215245755852E-7	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999958391329	WITHOUT_CLASSIFICATION	4.1608670853808304E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999310393087	WITHOUT_CLASSIFICATION	6.896069128497917E-8	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999986884691477	WITHOUT_CLASSIFICATION	1.3115308522024525E-6	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999999721830471	WITHOUT_CLASSIFICATION	2.7816952893858455E-7	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999986858901403	WITHOUT_CLASSIFICATION	1.3141098597040912E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999202140618	WITHOUT_CLASSIFICATION	7.978593811599992E-8	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999980167393	WITHOUT_CLASSIFICATION	1.983260709696003E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999989188391649	WITHOUT_CLASSIFICATION	1.0811608350934947E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999992290747002	WITHOUT_CLASSIFICATION	7.70925299937766E-7	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999357195613293	WITHOUT_CLASSIFICATION	6.428043867069889E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999953405844783	WITHOUT_CLASSIFICATION	4.659415521773374E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999992052756044	WITHOUT_CLASSIFICATION	7.94724395685282E-7	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999991641173285	WITHOUT_CLASSIFICATION	8.358826715679181E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999997547420071	WITHOUT_CLASSIFICATION	2.4525799290177237E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999985595690847	WITHOUT_CLASSIFICATION	1.440430915300532E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999931188295	WITHOUT_CLASSIFICATION	6.881170516787669E-9	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999986763529936	WITHOUT_CLASSIFICATION	1.3236470064722202E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999838444403	WITHOUT_CLASSIFICATION	1.615555965117286E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999994266751238	WITHOUT_CLASSIFICATION	5.733248763138855E-7	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999252023015879	WITHOUT_CLASSIFICATION	7.479769841214379E-5	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999899482444427	WITHOUT_CLASSIFICATION	1.005175555725401E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992341906164	WITHOUT_CLASSIFICATION	7.658093835368321E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999930575878	WITHOUT_CLASSIFICATION	6.942412229732197E-9	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999990063171	WITHOUT_CLASSIFICATION	9.936829076106983E-10	TEST
switch	WITHOUT_CLASSIFICATION	0.9999944060644468	WITHOUT_CLASSIFICATION	5.5939355531357205E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999846818095984	WITHOUT_CLASSIFICATION	1.531819040156564E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999908005568	WITHOUT_CLASSIFICATION	9.199443188682475E-8	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999993577285518	WITHOUT_CLASSIFICATION	6.422714482817572E-7	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982708123086	WITHOUT_CLASSIFICATION	1.7291876913434929E-6	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999897890616	WITHOUT_CLASSIFICATION	1.0210938478066292E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999908928272	WITHOUT_CLASSIFICATION	9.107172848026218E-9	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999987038561102	WITHOUT_CLASSIFICATION	1.2961438897149875E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999968981482	WITHOUT_CLASSIFICATION	3.1018517972070306E-9	TEST
/	WITHOUT_CLASSIFICATION	0.999883860256116	WITHOUT_CLASSIFICATION	1.1613974388392765E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.99999937518521	WITHOUT_CLASSIFICATION	6.248147899435462E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999983217039675	WITHOUT_CLASSIFICATION	1.6782960324047944E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999954105256156	WITHOUT_CLASSIFICATION	4.589474384384778E-6	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999980430436	WITHOUT_CLASSIFICATION	1.9569563306530858E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999997659926	WITHOUT_CLASSIFICATION	2.3400740051962664E-10	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998978020357	WITHOUT_CLASSIFICATION	1.0219796437776513E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999993714336676	WITHOUT_CLASSIFICATION	6.285663324224619E-7	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999979221402	WITHOUT_CLASSIFICATION	2.0778597694132437E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999993704854738	WITHOUT_CLASSIFICATION	6.29514526240599E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999993704854738	WITHOUT_CLASSIFICATION	6.29514526240599E-7	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999999770934411	WITHOUT_CLASSIFICATION	2.290655891828077E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999977731009743	WITHOUT_CLASSIFICATION	2.226899025764044E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999972434868	WITHOUT_CLASSIFICATION	2.7565132021580955E-8	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999994743877187	WITHOUT_CLASSIFICATION	5.256122813181112E-7	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999336179239	WITHOUT_CLASSIFICATION	6.63820760188737E-8	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999446248886	WITHOUT_CLASSIFICATION	5.537511142446853E-8	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999988760343563	WITHOUT_CLASSIFICATION	1.1239656437034345E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998381172608	WITHOUT_CLASSIFICATION	1.6188273919527447E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998381172608	WITHOUT_CLASSIFICATION	1.6188273919527447E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999994664571034	WITHOUT_CLASSIFICATION	5.335428967226112E-7	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997822951624	WITHOUT_CLASSIFICATION	2.1770483755903967E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999651119746	WITHOUT_CLASSIFICATION	3.4888025381414277E-8	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999988998630082	WITHOUT_CLASSIFICATION	1.1001369918527446E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999988998630082	WITHOUT_CLASSIFICATION	1.1001369918527446E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999988998630082	WITHOUT_CLASSIFICATION	1.1001369918527446E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997965135671	WITHOUT_CLASSIFICATION	2.0348643298491523E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998397342196	WITHOUT_CLASSIFICATION	1.6026578044055977E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999986258587537	WITHOUT_CLASSIFICATION	1.3741412463327313E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999772986162427	WITHOUT_CLASSIFICATION	2.270138375718815E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999428538259	WITHOUT_CLASSIFICATION	5.7146174261038736E-8	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999941995298	WITHOUT_CLASSIFICATION	5.800470119239225E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999790601106	WITHOUT_CLASSIFICATION	2.093988940764466E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999882674345867	WITHOUT_CLASSIFICATION	1.1732565413243734E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999999380139489	WITHOUT_CLASSIFICATION	6.198605112258631E-8	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999265392137	WITHOUT_CLASSIFICATION	7.346078636839479E-8	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999984356691103	WITHOUT_CLASSIFICATION	1.5643308896942717E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999987964099318	WITHOUT_CLASSIFICATION	1.2035900681209959E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999986838063327	WITHOUT_CLASSIFICATION	1.3161936672669604E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998766854309	WITHOUT_CLASSIFICATION	1.2331456916104017E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.99999997210582	WITHOUT_CLASSIFICATION	2.7894179939197963E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997133225972	WITHOUT_CLASSIFICATION	2.866774028324252E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999981987621636	WITHOUT_CLASSIFICATION	1.8012378364839375E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999474990216836	WITHOUT_CLASSIFICATION	5.250097831648645E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999474990216836	WITHOUT_CLASSIFICATION	5.250097831648645E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999641822097132	WITHOUT_CLASSIFICATION	3.581779028685762E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999641822097132	WITHOUT_CLASSIFICATION	3.581779028685762E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999663072401103	WITHOUT_CLASSIFICATION	3.369275988967023E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999978431478056	WITHOUT_CLASSIFICATION	2.1568521944067564E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999978431478056	WITHOUT_CLASSIFICATION	2.1568521944067564E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999861928462443	WITHOUT_CLASSIFICATION	1.3807153755758591E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999633655748426	WITHOUT_CLASSIFICATION	3.6634425157501465E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996913651368	WITHOUT_CLASSIFICATION	3.086348632654599E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999993704854738	WITHOUT_CLASSIFICATION	6.29514526240599E-7	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999766945687	WITHOUT_CLASSIFICATION	2.3305431210772106E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999633655748426	WITHOUT_CLASSIFICATION	3.6634425157501465E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999962422536	WITHOUT_CLASSIFICATION	3.7577464951876575E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999994248111475	WITHOUT_CLASSIFICATION	5.751888526238156E-7	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999366225259598	WITHOUT_CLASSIFICATION	6.337747404020826E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999816829257087	WITHOUT_CLASSIFICATION	1.831707429134381E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999971674528	WITHOUT_CLASSIFICATION	2.8325471635385127E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998683576367302	WITHOUT_CLASSIFICATION	1.3164236326982499E-4	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999997170065327	WITHOUT_CLASSIFICATION	2.829934673173671E-7	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999988197705423	WITHOUT_CLASSIFICATION	1.1802294577699931E-6	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999975750064211	WITHOUT_CLASSIFICATION	2.4249935789576875E-6	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999967183090964	WITHOUT_CLASSIFICATION	3.2816909036257536E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999804497853	WITHOUT_CLASSIFICATION	1.955021464989385E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999961365235991	WITHOUT_CLASSIFICATION	3.863476400899416E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999982608325383	WITHOUT_CLASSIFICATION	1.7391674617695017E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999979046622312	WITHOUT_CLASSIFICATION	2.095337768874733E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999995182669763	WITHOUT_CLASSIFICATION	4.817330236862703E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999437207644	WITHOUT_CLASSIFICATION	5.627923559807446E-8	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999562879743	WITHOUT_CLASSIFICATION	4.371202572239911E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99999766939838	WITHOUT_CLASSIFICATION	2.3306016200619386E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99999766939838	WITHOUT_CLASSIFICATION	2.3306016200619386E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999966318533815	WITHOUT_CLASSIFICATION	3.368146618474235E-6	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999980709330011	WITHOUT_CLASSIFICATION	1.9290669989392835E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999990318108202	WITHOUT_CLASSIFICATION	9.68189179885164E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999928817298556	WITHOUT_CLASSIFICATION	7.1182701444645275E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999962228177448	WITHOUT_CLASSIFICATION	3.7771822550498683E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999661356366	WITHOUT_CLASSIFICATION	3.3864363379256916E-8	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999968193317	WITHOUT_CLASSIFICATION	3.1806683096206253E-9	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999932764071697	WITHOUT_CLASSIFICATION	6.7235928302043026E-6	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999998937516432	WITHOUT_CLASSIFICATION	1.062483568061586E-6	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999429690718	WITHOUT_CLASSIFICATION	5.703092817813943E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998509658274	WITHOUT_CLASSIFICATION	1.4903417247263697E-7	TEST
/	WITHOUT_CLASSIFICATION	0.999883860256116	WITHOUT_CLASSIFICATION	1.1613974388392765E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999714301439	WITHOUT_CLASSIFICATION	2.8569856244011634E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999992923588694	WITHOUT_CLASSIFICATION	7.076411305564424E-7	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999978476139086	WITHOUT_CLASSIFICATION	2.152386091383648E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999990492600944	WITHOUT_CLASSIFICATION	9.507399055573478E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999772182897	WITHOUT_CLASSIFICATION	2.2781710303020027E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999772182897	WITHOUT_CLASSIFICATION	2.2781710303020027E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999917556676373	WITHOUT_CLASSIFICATION	8.244332362698647E-6	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999733771023	WITHOUT_CLASSIFICATION	2.6622897569195678E-8	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999992400953385	WITHOUT_CLASSIFICATION	7.599046615169824E-7	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999983038755718	WITHOUT_CLASSIFICATION	1.6961244282881314E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999991747926561	WITHOUT_CLASSIFICATION	8.252073438418447E-7	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999935477545217	WITHOUT_CLASSIFICATION	6.452245478455599E-6	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998988355719	WITHOUT_CLASSIFICATION	1.0116442803925211E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999684136252	WITHOUT_CLASSIFICATION	3.158637480380745E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999655338861	WITHOUT_CLASSIFICATION	3.446611390065249E-8	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999780675075	WITHOUT_CLASSIFICATION	2.1932492529874796E-8	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998834942861	WITHOUT_CLASSIFICATION	1.1650571380285031E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999684136252	WITHOUT_CLASSIFICATION	3.158637480380745E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999868556166	WITHOUT_CLASSIFICATION	1.3144383327422304E-8	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999523504697	WITHOUT_CLASSIFICATION	4.764953035770511E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999870124584	WITHOUT_CLASSIFICATION	1.2987541496717054E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999835591719655	WITHOUT_CLASSIFICATION	1.644082803451297E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999751850704	WITHOUT_CLASSIFICATION	2.4814929555426484E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999967008118	WITHOUT_CLASSIFICATION	3.299188189046781E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999818307599	WITHOUT_CLASSIFICATION	1.8169240065642343E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997647501278	WITHOUT_CLASSIFICATION	2.3524987215703782E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999204569799	WITHOUT_CLASSIFICATION	7.954302000794091E-8	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999982095238833	WITHOUT_CLASSIFICATION	1.7904761167189245E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999991454152881	WITHOUT_CLASSIFICATION	8.545847117577536E-7	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998713851603	WITHOUT_CLASSIFICATION	1.286148396147855E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999831724236	WITHOUT_CLASSIFICATION	1.6827576447238635E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999992256208698	WITHOUT_CLASSIFICATION	7.743791301780067E-7	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999955668201818	WITHOUT_CLASSIFICATION	4.433179818229028E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999988106122866	WITHOUT_CLASSIFICATION	1.1893877133410735E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999992774065126	WITHOUT_CLASSIFICATION	7.225934873082804E-7	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999551538666271	WITHOUT_CLASSIFICATION	4.484613337271675E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999361842021663	WITHOUT_CLASSIFICATION	6.381579783370024E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999868032118	WITHOUT_CLASSIFICATION	1.3196788263781287E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998459052408	WITHOUT_CLASSIFICATION	1.5409475912542626E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999787695556	WITHOUT_CLASSIFICATION	2.1230444349367568E-8	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999636832051145	WITHOUT_CLASSIFICATION	3.631679488549273E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9998700636922934	WITHOUT_CLASSIFICATION	1.2993630770660603E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999687342515	WITHOUT_CLASSIFICATION	3.126574859904016E-8	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999867967581275	WITHOUT_CLASSIFICATION	1.3203241872480273E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999621691652	WITHOUT_CLASSIFICATION	3.783083479636444E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999948026513	WITHOUT_CLASSIFICATION	5.197348609396569E-9	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999762130798	WITHOUT_CLASSIFICATION	2.3786920187576615E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999994689875349	WITHOUT_CLASSIFICATION	5.310124650831742E-7	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999974712166	WITHOUT_CLASSIFICATION	2.5287833892252958E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999998872931313	WITHOUT_CLASSIFICATION	1.1270686863185161E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999990661504194	WITHOUT_CLASSIFICATION	9.338495806521411E-7	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999459728262	WITHOUT_CLASSIFICATION	5.4027173832052015E-8	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998607001763	WITHOUT_CLASSIFICATION	1.3929982359676193E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999997115307819	WITHOUT_CLASSIFICATION	2.884692180921336E-7	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999962888596	WITHOUT_CLASSIFICATION	3.7111403441270327E-9	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999924815655	WITHOUT_CLASSIFICATION	7.518434561330682E-9	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999987848888567	WITHOUT_CLASSIFICATION	1.2151111432679994E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999490458006	WITHOUT_CLASSIFICATION	5.0954199423844336E-8	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999996804887097	WITHOUT_CLASSIFICATION	3.1951129036875474E-7	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999862738317	WITHOUT_CLASSIFICATION	1.3726168245378075E-8	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999967220434	WITHOUT_CLASSIFICATION	3.277956564211069E-9	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999914902802	WITHOUT_CLASSIFICATION	8.509719716856192E-9	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999991153425901	WITHOUT_CLASSIFICATION	8.846574098747922E-7	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999980999769	WITHOUT_CLASSIFICATION	1.9000231011512255E-8	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999995235869481	WITHOUT_CLASSIFICATION	4.764130519828958E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999870683829001	WITHOUT_CLASSIFICATION	1.2931617099809394E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999987860134196	WITHOUT_CLASSIFICATION	1.213986580447146E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998384542488	WITHOUT_CLASSIFICATION	1.6154575119822377E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953907998022	WITHOUT_CLASSIFICATION	4.60920019787785E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996765756373	WITHOUT_CLASSIFICATION	3.2342436265656167E-7	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.99999980626147	WITHOUT_CLASSIFICATION	1.937385300884512E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999769686256	WITHOUT_CLASSIFICATION	2.3031374399411723E-7	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999951525628	WITHOUT_CLASSIFICATION	4.847437168389555E-9	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999997233523977	WITHOUT_CLASSIFICATION	2.7664760229472666E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998100990737	WITHOUT_CLASSIFICATION	1.899009263595982E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998577009911	WITHOUT_CLASSIFICATION	1.422990088633245E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999988103273326	WITHOUT_CLASSIFICATION	1.1896726673983434E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999951162918912	WITHOUT_CLASSIFICATION	4.883708108816995E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999997535307182	WITHOUT_CLASSIFICATION	2.4646928178988903E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995959877286	WITHOUT_CLASSIFICATION	4.040122714588518E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999998834438041	WITHOUT_CLASSIFICATION	1.1655619593052927E-7	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999168526785529	WITHOUT_CLASSIFICATION	8.314732144717892E-5	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999123936933	WITHOUT_CLASSIFICATION	8.760630658756704E-8	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999960609858136	WITHOUT_CLASSIFICATION	3.939014186393914E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953907998022	WITHOUT_CLASSIFICATION	4.60920019787785E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998330238744	WITHOUT_CLASSIFICATION	1.6697612564596715E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999988115381977	WITHOUT_CLASSIFICATION	1.188461802333167E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998863651778	WITHOUT_CLASSIFICATION	1.136348222180535E-7	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999203320276	WITHOUT_CLASSIFICATION	7.96679724295959E-8	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999911477044493	WITHOUT_CLASSIFICATION	8.852295550796054E-6	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999991539632872	WITHOUT_CLASSIFICATION	8.460367128835939E-7	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999655338861	WITHOUT_CLASSIFICATION	3.446611390065249E-8	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999821199693316	WITHOUT_CLASSIFICATION	1.7880030668374238E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998607001763	WITHOUT_CLASSIFICATION	1.3929982359676193E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999964621732929	WITHOUT_CLASSIFICATION	3.5378267071469643E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999818954405	WITHOUT_CLASSIFICATION	1.8104559571749665E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995689631949	WITHOUT_CLASSIFICATION	4.310368051608182E-7	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995145827189	WITHOUT_CLASSIFICATION	4.854172811266124E-7	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994861168493	WITHOUT_CLASSIFICATION	5.138831506996795E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998559300353	WITHOUT_CLASSIFICATION	1.4406996472323333E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999941808586577	WITHOUT_CLASSIFICATION	5.819141342398362E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999992994856304	WITHOUT_CLASSIFICATION	7.005143695914707E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999886193894	WITHOUT_CLASSIFICATION	1.1380610574914351E-8	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999932439214	WITHOUT_CLASSIFICATION	6.756078608675604E-9	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997918188192	WITHOUT_CLASSIFICATION	2.0818118077433007E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999035368865	WITHOUT_CLASSIFICATION	9.646311353813223E-8	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999900965409	WITHOUT_CLASSIFICATION	9.903459101097655E-8	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999900965409	WITHOUT_CLASSIFICATION	9.903459101097655E-8	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999375177875	WITHOUT_CLASSIFICATION	6.248221246140148E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999995126362125	WITHOUT_CLASSIFICATION	4.873637875376913E-7	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999931704288	WITHOUT_CLASSIFICATION	6.829571203010012E-8	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999981941878607	WITHOUT_CLASSIFICATION	1.805812139222093E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999876570915	WITHOUT_CLASSIFICATION	1.23429084672251E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998566229082	WITHOUT_CLASSIFICATION	1.4337709173409438E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999984124492	WITHOUT_CLASSIFICATION	1.5875508109202685E-9	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999979024855774	WITHOUT_CLASSIFICATION	2.097514422649986E-6	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999735473084	WITHOUT_CLASSIFICATION	2.645269167616865E-8	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999972770091423	WITHOUT_CLASSIFICATION	2.722990857740963E-6	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999994228906315	WITHOUT_CLASSIFICATION	5.77109368643043E-7	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999992892072753	WITHOUT_CLASSIFICATION	7.107927246258688E-7	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999784891371	WITHOUT_CLASSIFICATION	2.151086290896897E-8	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999997964792	WITHOUT_CLASSIFICATION	2.035206610821095E-10	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998925352216	WITHOUT_CLASSIFICATION	1.074647783145167E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999611776033	WITHOUT_CLASSIFICATION	3.8822396684344615E-8	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999994443972935	WITHOUT_CLASSIFICATION	5.556027065831479E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999983300595197	WITHOUT_CLASSIFICATION	1.669940480410961E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999698558764	WITHOUT_CLASSIFICATION	3.014412358001968E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999792750934	WITHOUT_CLASSIFICATION	2.0724906550681575E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999981398551246	WITHOUT_CLASSIFICATION	1.8601448752377291E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999999977268332	WITHOUT_CLASSIFICATION	2.273166798334588E-8	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999974437325836	WITHOUT_CLASSIFICATION	2.556267416342667E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999329538726	WITHOUT_CLASSIFICATION	6.704612736480902E-8	TEST
implied	WITHOUT_CLASSIFICATION	0.9999736498679823	WITHOUT_CLASSIFICATION	2.6350132017664287E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990484656436	WITHOUT_CLASSIFICATION	9.515343564262885E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995831631144	WITHOUT_CLASSIFICATION	4.1683688560934824E-7	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998479306244	WITHOUT_CLASSIFICATION	1.5206937566931995E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999936464239	WITHOUT_CLASSIFICATION	6.353576184715397E-9	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999990598953951	WITHOUT_CLASSIFICATION	9.401046050143771E-7	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999852567775	WITHOUT_CLASSIFICATION	1.4743222478994984E-8	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999997551672468	WITHOUT_CLASSIFICATION	2.448327530948092E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999136920905	WITHOUT_CLASSIFICATION	8.63079094454508E-8	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999806019664	WITHOUT_CLASSIFICATION	1.9398033641627405E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999999988195867	WITHOUT_CLASSIFICATION	1.1804133117670939E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999744403194	WITHOUT_CLASSIFICATION	2.5559680561217448E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998133996565	WITHOUT_CLASSIFICATION	1.866003434366979E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999983747242148	WITHOUT_CLASSIFICATION	1.625275785234242E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999780942866	WITHOUT_CLASSIFICATION	2.1905713387181476E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996310711263	WITHOUT_CLASSIFICATION	3.689288736313231E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999968598673853	WITHOUT_CLASSIFICATION	3.140132614647178E-6	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986819635018	WITHOUT_CLASSIFICATION	1.3180364981309233E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999952758282	WITHOUT_CLASSIFICATION	4.724171884752338E-9	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999932224902603	WITHOUT_CLASSIFICATION	6.777509739740359E-6	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999990846389155	WITHOUT_CLASSIFICATION	9.153610845902875E-7	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999995724653004	WITHOUT_CLASSIFICATION	4.2753469965285564E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989130256094	WITHOUT_CLASSIFICATION	1.086974390624212E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.995829567847753	WITHOUT_CLASSIFICATION	0.004170432152247029	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999021768626	WITHOUT_CLASSIFICATION	9.782313733898463E-8	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999997930899779	WITHOUT_CLASSIFICATION	2.069100221434938E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997111606793	WITHOUT_CLASSIFICATION	2.8883932072231217E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995672533709	WITHOUT_CLASSIFICATION	4.327466289979388E-7	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999998159845	WITHOUT_CLASSIFICATION	1.8401550422750403E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999996986993068	WITHOUT_CLASSIFICATION	3.0130069316518683E-7	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999986194117545	WITHOUT_CLASSIFICATION	1.3805882454354327E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999989380943791	WITHOUT_CLASSIFICATION	1.0619056208570597E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999970758024	WITHOUT_CLASSIFICATION	2.924197530567188E-9	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999957580002877	WITHOUT_CLASSIFICATION	4.241999712208223E-6	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.999999521831665	WITHOUT_CLASSIFICATION	4.781683349265957E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999997729966342	WITHOUT_CLASSIFICATION	2.2700336566414843E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.99999951645471	WITHOUT_CLASSIFICATION	4.835452899752341E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999986971703966	WITHOUT_CLASSIFICATION	1.302829603444768E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999174153922	WITHOUT_CLASSIFICATION	8.258460783502322E-8	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999993062884532	WITHOUT_CLASSIFICATION	6.937115466439021E-7	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999993431933666	WITHOUT_CLASSIFICATION	6.568066333041835E-7	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999995678909654	WITHOUT_CLASSIFICATION	4.3210903447566677E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999771015499	WITHOUT_CLASSIFICATION	2.289845013538693E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999123199619829	WITHOUT_CLASSIFICATION	8.768003801700892E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999583376612	WITHOUT_CLASSIFICATION	4.166233876172743E-8	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999648198123	WITHOUT_CLASSIFICATION	3.5180187666155095E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999067163784	WITHOUT_CLASSIFICATION	9.328362163119562E-8	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999648198123	WITHOUT_CLASSIFICATION	3.5180187666155095E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998522024608	WITHOUT_CLASSIFICATION	1.477975392849773E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999940198528	WITHOUT_CLASSIFICATION	5.980147164499237E-9	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998831582562	WITHOUT_CLASSIFICATION	1.1684174376836647E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999854780579	WITHOUT_CLASSIFICATION	1.45219421211862E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999841624696	WITHOUT_CLASSIFICATION	1.5837530474934972E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999932588098	WITHOUT_CLASSIFICATION	6.741190194590213E-8	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999992045172497	WITHOUT_CLASSIFICATION	7.9548275030182E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999435456033684	WITHOUT_CLASSIFICATION	5.645439663159491E-5	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999992615784836	WITHOUT_CLASSIFICATION	7.384215163364069E-7	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999919160718	WITHOUT_CLASSIFICATION	8.083928169320205E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999972110661062	WITHOUT_CLASSIFICATION	2.7889338937746757E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999207451916	WITHOUT_CLASSIFICATION	7.925480838249106E-8	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997964280379	WITHOUT_CLASSIFICATION	2.0357196210398667E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999962733925646	WITHOUT_CLASSIFICATION	3.726607435438765E-6	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999996734104639	WITHOUT_CLASSIFICATION	3.265895361278058E-7	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999997165123	WITHOUT_CLASSIFICATION	2.834877061355681E-9	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999920180485	WITHOUT_CLASSIFICATION	7.981951587656658E-9	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999996959337287	WITHOUT_CLASSIFICATION	3.0406627133012667E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999962411529	WITHOUT_CLASSIFICATION	3.7588471365759266E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999955842886684	WITHOUT_CLASSIFICATION	4.415711331650671E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996616008732	WITHOUT_CLASSIFICATION	3.3839912680006605E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999999801932953	WITHOUT_CLASSIFICATION	1.9806704703221828E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997521290691711	WITHOUT_CLASSIFICATION	2.478709308289363E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999934707656	WITHOUT_CLASSIFICATION	6.529234443594251E-9	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990328820473	WITHOUT_CLASSIFICATION	9.671179527804218E-7	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999882577599194	WITHOUT_CLASSIFICATION	1.174224008055417E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999993339331554	WITHOUT_CLASSIFICATION	6.660668445938639E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999992408111585	WITHOUT_CLASSIFICATION	7.591888414431502E-7	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999936115279	WITHOUT_CLASSIFICATION	6.3884720868688575E-9	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999992474077121	WITHOUT_CLASSIFICATION	7.525922878551951E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999952002623621	WITHOUT_CLASSIFICATION	4.799737637935324E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999995350064003	WITHOUT_CLASSIFICATION	4.649935997203018E-7	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999556487686	WITHOUT_CLASSIFICATION	4.4351231424619974E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999826902671256	WITHOUT_CLASSIFICATION	1.730973287439924E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999989613108283	WITHOUT_CLASSIFICATION	1.0386891717465362E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999904261865953	WITHOUT_CLASSIFICATION	9.573813404678715E-6	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999966571871058	WITHOUT_CLASSIFICATION	3.3428128941213485E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999934619227	WITHOUT_CLASSIFICATION	6.538077325853759E-9	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999875285311149	WITHOUT_CLASSIFICATION	1.2471468885007752E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997944402073	WITHOUT_CLASSIFICATION	2.0555979270659365E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999680613998212	WITHOUT_CLASSIFICATION	3.1938600178791436E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999997215897726	WITHOUT_CLASSIFICATION	2.7841022743448374E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998218613298414	WITHOUT_CLASSIFICATION	1.7813867015850228E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999882577599194	WITHOUT_CLASSIFICATION	1.174224008055417E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999795969115901	WITHOUT_CLASSIFICATION	2.0403088409931995E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999996052492853	WITHOUT_CLASSIFICATION	3.947507147017062E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999941523627967	WITHOUT_CLASSIFICATION	5.847637203438369E-6	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999995329393334	WITHOUT_CLASSIFICATION	4.670606665603595E-7	TEST
special case	WITHOUT_CLASSIFICATION	0.9999997063736644	WITHOUT_CLASSIFICATION	2.936263356366656E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999983232989902	WITHOUT_CLASSIFICATION	1.6767010098866E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999991904422	WITHOUT_CLASSIFICATION	8.095578165903704E-10	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999979771657174	WITHOUT_CLASSIFICATION	2.0228342825693184E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999994995030617	WITHOUT_CLASSIFICATION	5.004969383656821E-7	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999999872058855	WITHOUT_CLASSIFICATION	1.2794114492597458E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999972634409178	WITHOUT_CLASSIFICATION	2.7365590822892027E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999997264602424	WITHOUT_CLASSIFICATION	2.735397576094151E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999959436620953	WITHOUT_CLASSIFICATION	4.056337904644528E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999949852442369	WITHOUT_CLASSIFICATION	5.014755763067315E-6	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999923266819	WITHOUT_CLASSIFICATION	7.673318060801214E-9	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999625603135	WITHOUT_CLASSIFICATION	3.743968632820601E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999712785297	WITHOUT_CLASSIFICATION	2.872147027681959E-8	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998596968943	WITHOUT_CLASSIFICATION	1.4030310571839383E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999875926863	WITHOUT_CLASSIFICATION	1.240731376996575E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999795969115901	WITHOUT_CLASSIFICATION	2.0403088409931995E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999986585105577	WITHOUT_CLASSIFICATION	1.3414894423065143E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999998186851415	WITHOUT_CLASSIFICATION	1.8131485837663793E-7	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999994805101979	WITHOUT_CLASSIFICATION	5.194898019429443E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999544524693	WITHOUT_CLASSIFICATION	4.554753079872036E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998319613522	WITHOUT_CLASSIFICATION	1.6803864777293792E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999940100483065	WITHOUT_CLASSIFICATION	5.989951693498765E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999940100483065	WITHOUT_CLASSIFICATION	5.989951693498765E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999551916132	WITHOUT_CLASSIFICATION	4.480838686370649E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999940100483065	WITHOUT_CLASSIFICATION	5.989951693498765E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999940100483065	WITHOUT_CLASSIFICATION	5.989951693498765E-6	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999983952689586	WITHOUT_CLASSIFICATION	1.6047310413694829E-6	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999992321667799	WITHOUT_CLASSIFICATION	7.678332199740586E-7	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999894020657	WITHOUT_CLASSIFICATION	1.0597934303609674E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999932365225	WITHOUT_CLASSIFICATION	6.763477500861283E-8	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999695731226	WITHOUT_CLASSIFICATION	3.0426877380775776E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999994137081755	WITHOUT_CLASSIFICATION	5.862918245020273E-7	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999999001763691	WITHOUT_CLASSIFICATION	9.982363098284072E-8	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999995979460782	WITHOUT_CLASSIFICATION	4.0205392186853346E-7	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999999004881407	WITHOUT_CLASSIFICATION	9.951185930196817E-7	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999848743076392	WITHOUT_CLASSIFICATION	1.512569236086588E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999997978932447	WITHOUT_CLASSIFICATION	2.0210675521622608E-7	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995515346931	WITHOUT_CLASSIFICATION	4.484653069619054E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996261005437	WITHOUT_CLASSIFICATION	3.738994562929623E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999972728946569	WITHOUT_CLASSIFICATION	2.7271053430678174E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999953059157	WITHOUT_CLASSIFICATION	4.694084304600224E-8	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999734051730518	WITHOUT_CLASSIFICATION	2.6594826948177205E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997591136258	WITHOUT_CLASSIFICATION	2.4088637421517433E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999995467782594	WITHOUT_CLASSIFICATION	4.532217406243543E-7	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999972750795001	WITHOUT_CLASSIFICATION	2.7249204998839846E-6	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999966313942339	WITHOUT_CLASSIFICATION	3.3686057660275965E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999993741329106	WITHOUT_CLASSIFICATION	6.258670892344015E-7	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999980084793261	WITHOUT_CLASSIFICATION	1.9915206738895005E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997591136258	WITHOUT_CLASSIFICATION	2.4088637421517433E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.999993339331554	WITHOUT_CLASSIFICATION	6.660668445938639E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999996500838992	WITHOUT_CLASSIFICATION	3.499161007281929E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992075960115	WITHOUT_CLASSIFICATION	7.924039886051984E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999510469946	WITHOUT_CLASSIFICATION	4.895300540359167E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999990200529728	WITHOUT_CLASSIFICATION	9.799470271609544E-7	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999624836239	WITHOUT_CLASSIFICATION	3.751637620415153E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999918511434126	WITHOUT_CLASSIFICATION	8.14885658732643E-6	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999992903599114	WITHOUT_CLASSIFICATION	7.096400885000544E-7	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999968516369416	WITHOUT_CLASSIFICATION	3.148363058327283E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999401529397	WITHOUT_CLASSIFICATION	5.984706033932688E-8	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999998879880843	WITHOUT_CLASSIFICATION	1.120119156759459E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997645261463	WITHOUT_CLASSIFICATION	2.3547385377337986E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999996127503156	WITHOUT_CLASSIFICATION	3.8724968437304225E-7	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996048371514	WITHOUT_CLASSIFICATION	3.951628485615532E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999953532849558	WITHOUT_CLASSIFICATION	4.646715044145093E-6	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999355634486	WITHOUT_CLASSIFICATION	6.443655140118303E-8	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.999999582193959	WITHOUT_CLASSIFICATION	4.1780604098449775E-7	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999993018327322	WITHOUT_CLASSIFICATION	6.981672677652534E-7	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998012049988	WITHOUT_CLASSIFICATION	1.987950011229535E-7	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999995307782958	WITHOUT_CLASSIFICATION	4.692217042278827E-7	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999993123013156	WITHOUT_CLASSIFICATION	6.876986843433412E-7	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999983808688142	WITHOUT_CLASSIFICATION	1.6191311858009436E-6	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999997280529	WITHOUT_CLASSIFICATION	2.719470907465415E-10	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999968516369416	WITHOUT_CLASSIFICATION	3.148363058327283E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998732072646	WITHOUT_CLASSIFICATION	1.2679273544493945E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999999289791578	WITHOUT_CLASSIFICATION	7.102084222498354E-8	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998899453633	WITHOUT_CLASSIFICATION	1.1005463676881651E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999950605209157	WITHOUT_CLASSIFICATION	4.939479084267817E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961346518306	WITHOUT_CLASSIFICATION	3.865348169446969E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999939869663446	WITHOUT_CLASSIFICATION	6.01303365545018E-6	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999987561829476	WITHOUT_CLASSIFICATION	1.2438170523546102E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999997527560157	WITHOUT_CLASSIFICATION	2.472439843104143E-7	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999995659642547	WITHOUT_CLASSIFICATION	4.3403574528914593E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999923422764029	WITHOUT_CLASSIFICATION	7.657723597132477E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999209652978	WITHOUT_CLASSIFICATION	7.903470217371593E-8	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999988871515848	WITHOUT_CLASSIFICATION	1.1128484152003302E-6	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999997343619142	WITHOUT_CLASSIFICATION	2.6563808575843524E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999993392339507	WITHOUT_CLASSIFICATION	6.607660493365598E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999976627869346	WITHOUT_CLASSIFICATION	2.3372130654288546E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921765046	WITHOUT_CLASSIFICATION	7.823495394170004E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999209652978	WITHOUT_CLASSIFICATION	7.903470217371593E-8	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999998487915284	WITHOUT_CLASSIFICATION	1.5120847160246715E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999997790688206	WITHOUT_CLASSIFICATION	2.2093117941121205E-7	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998882088579	WITHOUT_CLASSIFICATION	1.1179114219836594E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999994636506082	WITHOUT_CLASSIFICATION	5.363493917978218E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.999999725444052	WITHOUT_CLASSIFICATION	2.745559480066685E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999637275694	WITHOUT_CLASSIFICATION	3.6272430575226884E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999670945049	WITHOUT_CLASSIFICATION	3.290549509265386E-8	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999272315225	WITHOUT_CLASSIFICATION	7.276847748869246E-7	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998527820138	WITHOUT_CLASSIFICATION	1.472179862160383E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992281423219	WITHOUT_CLASSIFICATION	7.718576780864268E-7	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997847488127	WITHOUT_CLASSIFICATION	2.1525118733330338E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997166758545	WITHOUT_CLASSIFICATION	2.8332414550241513E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999277523611	WITHOUT_CLASSIFICATION	7.22476388914589E-8	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999277523611	WITHOUT_CLASSIFICATION	7.22476388914589E-8	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999985247490983	WITHOUT_CLASSIFICATION	1.4752509016203165E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998696608745	WITHOUT_CLASSIFICATION	1.3033912552678013E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.999999526942273	WITHOUT_CLASSIFICATION	4.730577269672371E-7	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999991888668934	WITHOUT_CLASSIFICATION	8.111331066677265E-7	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999930410531247	WITHOUT_CLASSIFICATION	6.958946875180327E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989500016906	WITHOUT_CLASSIFICATION	1.049998309358119E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820374349595	WITHOUT_CLASSIFICATION	1.7962565040580773E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942357666093	WITHOUT_CLASSIFICATION	5.7642333907136E-6	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999971847847391	WITHOUT_CLASSIFICATION	2.8152152608474053E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974102893802	WITHOUT_CLASSIFICATION	2.58971061992032E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989500016906	WITHOUT_CLASSIFICATION	1.049998309358119E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820374349595	WITHOUT_CLASSIFICATION	1.7962565040580773E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942357666093	WITHOUT_CLASSIFICATION	5.7642333907136E-6	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999947844372882	WITHOUT_CLASSIFICATION	5.215562711888955E-6	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999970267915187	WITHOUT_CLASSIFICATION	2.9732084813140747E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998911089295	WITHOUT_CLASSIFICATION	1.0889107051574364E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999994444592161	WITHOUT_CLASSIFICATION	5.555407839956031E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999992211040433	WITHOUT_CLASSIFICATION	7.788959567014092E-7	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.999996725320769	WITHOUT_CLASSIFICATION	3.274679231020069E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995312417361	WITHOUT_CLASSIFICATION	4.68758263861416E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999959266286158	WITHOUT_CLASSIFICATION	4.073371384286369E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999849463394188	WITHOUT_CLASSIFICATION	1.5053660581314517E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999904413054292	WITHOUT_CLASSIFICATION	9.558694570764433E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999989256794648	WITHOUT_CLASSIFICATION	1.0743205351312394E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999214558459965	WITHOUT_CLASSIFICATION	7.85441540035142E-5	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999950965264048	WITHOUT_CLASSIFICATION	4.90347359506914E-6	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999994436608504	WITHOUT_CLASSIFICATION	5.563391496329688E-7	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999456394925	WITHOUT_CLASSIFICATION	5.436050745791799E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998863622969	WITHOUT_CLASSIFICATION	1.1363770307477093E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997528800401625	WITHOUT_CLASSIFICATION	2.4711995983742993E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999868874219592	WITHOUT_CLASSIFICATION	1.3112578040889972E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.999999357511681	WITHOUT_CLASSIFICATION	6.424883190451515E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999950038790774	WITHOUT_CLASSIFICATION	4.996120922642938E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999999978463632	WITHOUT_CLASSIFICATION	2.1536367984885726E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999447894456	WITHOUT_CLASSIFICATION	5.521055437354107E-8	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999738883719	WITHOUT_CLASSIFICATION	2.6111628096850367E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999398295946	WITHOUT_CLASSIFICATION	6.017040538177002E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999998745030055	WITHOUT_CLASSIFICATION	1.2549699434660168E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999993066815658	WITHOUT_CLASSIFICATION	6.933184342728458E-7	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895554302682	WITHOUT_CLASSIFICATION	1.0444569731714889E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700770291328	WITHOUT_CLASSIFICATION	2.9922970867281784E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999183882976	WITHOUT_CLASSIFICATION	8.161170231815256E-8	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796326080115	WITHOUT_CLASSIFICATION	2.0367391988460994E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317209736954	WITHOUT_CLASSIFICATION	6.827902630461459E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993055055358	WITHOUT_CLASSIFICATION	6.944944642128058E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993055055358	WITHOUT_CLASSIFICATION	6.944944642128058E-7	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999954321956616	WITHOUT_CLASSIFICATION	4.567804338366852E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999902275656506	WITHOUT_CLASSIFICATION	9.772434349479061E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999992561714058	WITHOUT_CLASSIFICATION	7.438285941344786E-7	TEST
/	WITHOUT_CLASSIFICATION	0.999883860256116	WITHOUT_CLASSIFICATION	1.1613974388392765E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999997145752365	WITHOUT_CLASSIFICATION	2.85424763438201E-7	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999272316711	WITHOUT_CLASSIFICATION	7.276832892370072E-8	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999911956455442	WITHOUT_CLASSIFICATION	8.804354455725536E-6	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999996848045759	WITHOUT_CLASSIFICATION	3.1519542408061714E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999998909162557	WITHOUT_CLASSIFICATION	1.0908374424464359E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985541283155	WITHOUT_CLASSIFICATION	1.4458716844254267E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988242388274	WITHOUT_CLASSIFICATION	1.1757611725615676E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992140903222	WITHOUT_CLASSIFICATION	7.85909677685152E-7	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997935837529	WITHOUT_CLASSIFICATION	2.0641624709514332E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993634397014	WITHOUT_CLASSIFICATION	6.36560298513569E-7	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965963549422	WITHOUT_CLASSIFICATION	3.4036450578789587E-6	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989939180419	WITHOUT_CLASSIFICATION	1.0060819580552363E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993884689821	WITHOUT_CLASSIFICATION	6.115310179678249E-7	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992925492296	WITHOUT_CLASSIFICATION	7.074507703247862E-7	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971283716024	WITHOUT_CLASSIFICATION	2.8716283975768317E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970438216977	WITHOUT_CLASSIFICATION	2.9561783022620775E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999901142799	WITHOUT_CLASSIFICATION	9.885720013261942E-9	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999737714360475	WITHOUT_CLASSIFICATION	2.622856395245732E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999836659061779	WITHOUT_CLASSIFICATION	1.633409382206979E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999965790894	WITHOUT_CLASSIFICATION	3.420910704470937E-9	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999700111412	WITHOUT_CLASSIFICATION	2.998885884509178E-8	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999992982806502	WITHOUT_CLASSIFICATION	7.017193498769089E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999996121315589	WITHOUT_CLASSIFICATION	3.8786844113517947E-7	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999662736843	WITHOUT_CLASSIFICATION	3.3726315812269436E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999836659061779	WITHOUT_CLASSIFICATION	1.633409382206979E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999836659061779	WITHOUT_CLASSIFICATION	1.633409382206979E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999968480787693	WITHOUT_CLASSIFICATION	3.1519212307170947E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999990561056177	WITHOUT_CLASSIFICATION	9.438943823880247E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999935510489566	WITHOUT_CLASSIFICATION	6.448951043351738E-6	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999999567174291	WITHOUT_CLASSIFICATION	4.3282570906580286E-7	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999982608325383	WITHOUT_CLASSIFICATION	1.7391674617695017E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999950038790774	WITHOUT_CLASSIFICATION	4.996120922642938E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999990362689158	WITHOUT_CLASSIFICATION	9.63731084175528E-7	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998005921393	WITHOUT_CLASSIFICATION	1.9940786064886006E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.999998547965009	WITHOUT_CLASSIFICATION	1.4520349909769707E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958496567589	WITHOUT_CLASSIFICATION	4.150343241049606E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999984087668193	WITHOUT_CLASSIFICATION	1.5912331806277912E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991650849511	WITHOUT_CLASSIFICATION	8.349150488994843E-7	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997796918516	WITHOUT_CLASSIFICATION	2.2030814844284624E-7	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997796918516	WITHOUT_CLASSIFICATION	2.2030814844284624E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992917254694	WITHOUT_CLASSIFICATION	7.082745305800917E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992917254694	WITHOUT_CLASSIFICATION	7.082745305800917E-7	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969518623785	WITHOUT_CLASSIFICATION	3.0481376214299066E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999808754422	WITHOUT_CLASSIFICATION	1.912455779896354E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999990008726535	WITHOUT_CLASSIFICATION	9.99127346496656E-7	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637814873802	WITHOUT_CLASSIFICATION	3.621851261969581E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999995188856802	WITHOUT_CLASSIFICATION	4.811143197692585E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999377155969	WITHOUT_CLASSIFICATION	6.228440315685814E-8	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992658033352	WITHOUT_CLASSIFICATION	7.341966647948232E-7	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999454746759	WITHOUT_CLASSIFICATION	5.4525324122541776E-8	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999997046622094	WITHOUT_CLASSIFICATION	2.953377905837172E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.999922596615041	WITHOUT_CLASSIFICATION	7.74033849589736E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996943033357	WITHOUT_CLASSIFICATION	3.0569666435488437E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996883002099	WITHOUT_CLASSIFICATION	3.1169979005365085E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998953244411	WITHOUT_CLASSIFICATION	1.0467555887218406E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999358865206	WITHOUT_CLASSIFICATION	6.411347943411686E-8	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999994738556801	WITHOUT_CLASSIFICATION	5.261443199515727E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999994738556801	WITHOUT_CLASSIFICATION	5.261443199515727E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999994738556801	WITHOUT_CLASSIFICATION	5.261443199515727E-7	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997390738443	WITHOUT_CLASSIFICATION	2.6092615571965176E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999994276008468	WITHOUT_CLASSIFICATION	5.723991532858485E-7	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999792013855	WITHOUT_CLASSIFICATION	2.0798614486779805E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999982782837354	WITHOUT_CLASSIFICATION	1.7217162645948926E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976651481935	WITHOUT_CLASSIFICATION	2.334851806403068E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763828196674	WITHOUT_CLASSIFICATION	2.361718033257909E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999668307491	WITHOUT_CLASSIFICATION	3.3169250989412315E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998016612607	WITHOUT_CLASSIFICATION	1.9833873927271909E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999971423172	WITHOUT_CLASSIFICATION	2.8576828280332263E-9	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999853214492	WITHOUT_CLASSIFICATION	1.467855077585057E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999999221451	WITHOUT_CLASSIFICATION	7.785489685987731E-10	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999997458608322	WITHOUT_CLASSIFICATION	2.5413916787116737E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996713559494	WITHOUT_CLASSIFICATION	3.286440507081904E-7	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999409557462	WITHOUT_CLASSIFICATION	5.904425375052572E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999976162166172	WITHOUT_CLASSIFICATION	2.3837833827990676E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999118516567	WITHOUT_CLASSIFICATION	8.81483433437361E-8	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999977014605219	WITHOUT_CLASSIFICATION	2.2985394780508495E-6	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999981910451802	WITHOUT_CLASSIFICATION	1.80895481990566E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999980574205942	WITHOUT_CLASSIFICATION	1.9425794057962597E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999852994939	WITHOUT_CLASSIFICATION	1.4700506098412212E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998810841241	WITHOUT_CLASSIFICATION	1.1891587594391642E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999964653178229	WITHOUT_CLASSIFICATION	3.5346821770255955E-6	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999099833821	WITHOUT_CLASSIFICATION	9.001661800106345E-8	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999987438881442	WITHOUT_CLASSIFICATION	1.2561118558044573E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999991637139691	WITHOUT_CLASSIFICATION	8.362860308938395E-7	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999990393785281	WITHOUT_CLASSIFICATION	9.606214719607224E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999998922688952	WITHOUT_CLASSIFICATION	1.0773110481332597E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999988593249763	WITHOUT_CLASSIFICATION	1.1406750237671398E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999520954792	WITHOUT_CLASSIFICATION	4.790452078995641E-8	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999980264324029	WITHOUT_CLASSIFICATION	1.9735675970807766E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999792355864	WITHOUT_CLASSIFICATION	2.076441367243993E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999436575691	WITHOUT_CLASSIFICATION	5.6342430931804164E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999992012878176	WITHOUT_CLASSIFICATION	7.987121823721266E-7	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999973607286	WITHOUT_CLASSIFICATION	2.639271468793541E-9	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999823834746252	WITHOUT_CLASSIFICATION	1.7616525374809868E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999999869567288	WITHOUT_CLASSIFICATION	1.3043271184827962E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999971817473	WITHOUT_CLASSIFICATION	2.818252855153959E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.999999711729677	WITHOUT_CLASSIFICATION	2.882703229579942E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999866691445	WITHOUT_CLASSIFICATION	1.3330855599080384E-8	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998999720241	WITHOUT_CLASSIFICATION	1.0002797590549103E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999894697542	WITHOUT_CLASSIFICATION	1.053024575458048E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997580737414	WITHOUT_CLASSIFICATION	2.4192625860466874E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999999215343438	WITHOUT_CLASSIFICATION	7.846565618315337E-8	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999797547511	WITHOUT_CLASSIFICATION	2.0245248987593006E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996906948162	WITHOUT_CLASSIFICATION	3.093051838330208E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999998942415047	WITHOUT_CLASSIFICATION	1.0575849525614235E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999996523402306	WITHOUT_CLASSIFICATION	3.4765976936000974E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999977792870359	WITHOUT_CLASSIFICATION	2.220712964108753E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999996022794237	WITHOUT_CLASSIFICATION	3.977205762180711E-7	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9996890278510071	WITHOUT_CLASSIFICATION	3.1097214899286277E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999715280031	WITHOUT_CLASSIFICATION	2.8471996796280487E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999837734562058	WITHOUT_CLASSIFICATION	1.622654379418458E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999993038920523	WITHOUT_CLASSIFICATION	6.961079478203711E-7	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999849251763966	WITHOUT_CLASSIFICATION	1.507482360341044E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999999833074035	WITHOUT_CLASSIFICATION	1.669259651303671E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999970130066499	WITHOUT_CLASSIFICATION	2.986993350234668E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998883801676376	WITHOUT_CLASSIFICATION	1.1161983236246387E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999995549137963	WITHOUT_CLASSIFICATION	4.450862036439773E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999995225516441	WITHOUT_CLASSIFICATION	4.774483558444682E-7	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999746512903696	WITHOUT_CLASSIFICATION	2.534870963049747E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998967330774	WITHOUT_CLASSIFICATION	1.0326692247719916E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999927998515	WITHOUT_CLASSIFICATION	7.200148411656824E-9	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999985303693414	WITHOUT_CLASSIFICATION	1.4696306586092199E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999594930745	WITHOUT_CLASSIFICATION	4.0506925511918067E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999996712930419	WITHOUT_CLASSIFICATION	3.2870695809250533E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999976463733	WITHOUT_CLASSIFICATION	2.3536267389006673E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999986703138	WITHOUT_CLASSIFICATION	1.3296862434964327E-9	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999920335152	WITHOUT_CLASSIFICATION	7.966484799458264E-8	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999847374660299	WITHOUT_CLASSIFICATION	1.5262533970092684E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999847374660299	WITHOUT_CLASSIFICATION	1.5262533970092684E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999995669662031	WITHOUT_CLASSIFICATION	4.330337970132576E-7	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999995022891786	WITHOUT_CLASSIFICATION	4.977108215048224E-7	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999998555184638	WITHOUT_CLASSIFICATION	1.4448153624403847E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999999120044689	WITHOUT_CLASSIFICATION	8.79955310326923E-8	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999898271286	WITHOUT_CLASSIFICATION	1.0172871449083723E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999985658068348	WITHOUT_CLASSIFICATION	1.4341931651646705E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999859454818	WITHOUT_CLASSIFICATION	1.4054518267582252E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994760482759	WITHOUT_CLASSIFICATION	5.239517241939911E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999990956291274	WITHOUT_CLASSIFICATION	9.043708727073939E-7	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999995374774313	WITHOUT_CLASSIFICATION	4.625225687323257E-7	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999945125829	WITHOUT_CLASSIFICATION	5.487417119058703E-9	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999952910401	WITHOUT_CLASSIFICATION	4.708959938861229E-9	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999998410041582	WITHOUT_CLASSIFICATION	1.5899584188988472E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999934497501	WITHOUT_CLASSIFICATION	6.550249929932031E-9	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999998061828005	WITHOUT_CLASSIFICATION	1.938171996382177E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999941749505957	WITHOUT_CLASSIFICATION	5.825049404220998E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999999657378854	WITHOUT_CLASSIFICATION	3.426211465147653E-8	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999998851474965	WITHOUT_CLASSIFICATION	1.1485250352113284E-7	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999993263010303	WITHOUT_CLASSIFICATION	6.736989697519321E-7	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999935418841805	WITHOUT_CLASSIFICATION	6.45811581937022E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999992540528911	WITHOUT_CLASSIFICATION	7.459471087593422E-7	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999638435965	WITHOUT_CLASSIFICATION	3.615640352612832E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999975629984922	WITHOUT_CLASSIFICATION	2.437001507769977E-6	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999867987898873	WITHOUT_CLASSIFICATION	1.3201210112781963E-5	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999945680542	WITHOUT_CLASSIFICATION	5.431945840588284E-9	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999994630060203	WITHOUT_CLASSIFICATION	5.369939797024089E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998632004015	WITHOUT_CLASSIFICATION	1.3679959840843275E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999998004261144	WITHOUT_CLASSIFICATION	1.9957388560066216E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999972895402495	WITHOUT_CLASSIFICATION	2.710459750484275E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999997029425012	WITHOUT_CLASSIFICATION	2.9705749888155956E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990626446892	WITHOUT_CLASSIFICATION	9.373553109075092E-7	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999221765872	WITHOUT_CLASSIFICATION	7.782341279818634E-8	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999999040837759	WITHOUT_CLASSIFICATION	9.591622407074732E-8	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999993886627171	WITHOUT_CLASSIFICATION	6.11337282951304E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999984957259325	WITHOUT_CLASSIFICATION	1.5042740674806433E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999984957259325	WITHOUT_CLASSIFICATION	1.5042740674806433E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998534603799	WITHOUT_CLASSIFICATION	1.4653962015149416E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999974403030629	WITHOUT_CLASSIFICATION	2.559696937142768E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997384158312	WITHOUT_CLASSIFICATION	2.6158416876029076E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999974123236713	WITHOUT_CLASSIFICATION	2.5876763286117254E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999400799539	WITHOUT_CLASSIFICATION	5.992004621224543E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999978288400322	WITHOUT_CLASSIFICATION	2.1711599677908232E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999996805836817	WITHOUT_CLASSIFICATION	3.1941631829704367E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999999484019331	WITHOUT_CLASSIFICATION	5.159806695001445E-8	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999998997124868	WITHOUT_CLASSIFICATION	1.0028751313409771E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998262073177382	WITHOUT_CLASSIFICATION	1.7379268226186374E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999939132858	WITHOUT_CLASSIFICATION	6.086714190520719E-8	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998453571557	WITHOUT_CLASSIFICATION	1.5464284427599196E-7	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999999030288597	WITHOUT_CLASSIFICATION	9.697114029846342E-7	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999992198116404	WITHOUT_CLASSIFICATION	7.801883596126662E-7	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999996232114933	WITHOUT_CLASSIFICATION	3.7678850674764836E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999980911103593	WITHOUT_CLASSIFICATION	1.908889640576196E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999961383581194	WITHOUT_CLASSIFICATION	3.8616418805898E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999961383581194	WITHOUT_CLASSIFICATION	3.8616418805898E-6	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999906677983	WITHOUT_CLASSIFICATION	9.332201613670834E-9	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999995240859181	WITHOUT_CLASSIFICATION	4.7591408188878464E-7	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999987335073613	WITHOUT_CLASSIFICATION	1.2664926386165187E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996420317191	WITHOUT_CLASSIFICATION	3.5796828091313395E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999110334239	WITHOUT_CLASSIFICATION	8.896657607387957E-8	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999603545653714	WITHOUT_CLASSIFICATION	3.96454346285534E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999821830362	WITHOUT_CLASSIFICATION	1.7816963766996815E-8	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999994367146309	WITHOUT_CLASSIFICATION	5.632853691014086E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999391810039	WITHOUT_CLASSIFICATION	6.081899606900883E-8	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999956663892848	WITHOUT_CLASSIFICATION	4.3336107152317765E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999956663892848	WITHOUT_CLASSIFICATION	4.3336107152317765E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999987616336556	WITHOUT_CLASSIFICATION	1.2383663444040226E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999940996047	WITHOUT_CLASSIFICATION	5.9003953180033786E-9	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999856838881	WITHOUT_CLASSIFICATION	1.4316111746678508E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999882910422858	WITHOUT_CLASSIFICATION	1.1708957714217405E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999998504635293	WITHOUT_CLASSIFICATION	1.4953647068335024E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999934988616	WITHOUT_CLASSIFICATION	6.5011384684245425E-9	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999988341720527	WITHOUT_CLASSIFICATION	1.1658279473462274E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999970541812453	WITHOUT_CLASSIFICATION	2.9458187547306988E-6	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999952156294	WITHOUT_CLASSIFICATION	4.784370585599963E-9	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996913651368	WITHOUT_CLASSIFICATION	3.086348632654599E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995245928581	WITHOUT_CLASSIFICATION	4.7540714188025495E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999822615237144	WITHOUT_CLASSIFICATION	1.7738476285617406E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999991641173285	WITHOUT_CLASSIFICATION	8.358826715679181E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999846818095984	WITHOUT_CLASSIFICATION	1.531819040156564E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999897583447465	WITHOUT_CLASSIFICATION	1.0241655253523169E-5	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999663072401103	WITHOUT_CLASSIFICATION	3.369275988967023E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999990598953951	WITHOUT_CLASSIFICATION	9.401046050143771E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999724207317	WITHOUT_CLASSIFICATION	2.7579268321658635E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999998983898478	WITHOUT_CLASSIFICATION	1.016101521608363E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.9999998794213862	WITHOUT_CLASSIFICATION	1.2057861372423335E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999972160695418	WITHOUT_CLASSIFICATION	2.7839304580526476E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999997565517661	WITHOUT_CLASSIFICATION	2.43448233905179E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999983603622282	WITHOUT_CLASSIFICATION	1.6396377718633583E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999861928462443	WITHOUT_CLASSIFICATION	1.3807153755758591E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999963983005654	WITHOUT_CLASSIFICATION	3.6016994346766354E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998859613906	WITHOUT_CLASSIFICATION	1.1403860943777472E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999265556935	WITHOUT_CLASSIFICATION	7.344430658464728E-8	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999999056377602	WITHOUT_CLASSIFICATION	9.436223988437814E-8	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998383047188076	WITHOUT_CLASSIFICATION	1.6169528119244474E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999198838015	WITHOUT_CLASSIFICATION	8.011619853583101E-8	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999947230834	WITHOUT_CLASSIFICATION	5.276916588581757E-9	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999772182897	WITHOUT_CLASSIFICATION	2.2781710303020027E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999984267896588	WITHOUT_CLASSIFICATION	1.573210341168967E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999972183863837	WITHOUT_CLASSIFICATION	2.7816136163293086E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999984367687412	WITHOUT_CLASSIFICATION	1.5632312588311623E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999286387938	WITHOUT_CLASSIFICATION	7.136120614924157E-8	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999991777686519	WITHOUT_CLASSIFICATION	8.222313481280087E-7	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999951020107661	WITHOUT_CLASSIFICATION	4.897989233859585E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999991122664919	WITHOUT_CLASSIFICATION	8.877335081508739E-7	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999991122664919	WITHOUT_CLASSIFICATION	8.877335081508739E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.999999320725536	WITHOUT_CLASSIFICATION	6.79274464001882E-7	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998827823662	WITHOUT_CLASSIFICATION	1.172176337572221E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998945006544	WITHOUT_CLASSIFICATION	1.0549934554871634E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999991898948835	WITHOUT_CLASSIFICATION	8.101051165325817E-7	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999999762263005	WITHOUT_CLASSIFICATION	2.3773699490972687E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999890684789	WITHOUT_CLASSIFICATION	1.093152118596803E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999996416777	WITHOUT_CLASSIFICATION	3.5832230837933327E-10	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999999910944941	WITHOUT_CLASSIFICATION	8.905505901840117E-8	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.999999320725536	WITHOUT_CLASSIFICATION	6.79274464001882E-7	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998827823662	WITHOUT_CLASSIFICATION	1.172176337572221E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999990076750191	WITHOUT_CLASSIFICATION	9.92324980841612E-7	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999992890443069	WITHOUT_CLASSIFICATION	7.109556931124254E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997989525304	WITHOUT_CLASSIFICATION	2.0104746950215485E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.99999779288877	WITHOUT_CLASSIFICATION	2.2071112299332346E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999991281859	WITHOUT_CLASSIFICATION	8.718139114551791E-10	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999998351807907	WITHOUT_CLASSIFICATION	1.6481920933730552E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999999994121965	WITHOUT_CLASSIFICATION	5.878035022612541E-9	TEST
}	WITHOUT_CLASSIFICATION	0.999931265245753	WITHOUT_CLASSIFICATION	6.873475424700444E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999653585487	WITHOUT_CLASSIFICATION	3.4641451230966304E-8	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999948608524122	WITHOUT_CLASSIFICATION	5.139147587828149E-6	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999995717076675	WITHOUT_CLASSIFICATION	4.2829233241455245E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999948608524122	WITHOUT_CLASSIFICATION	5.139147587828149E-6	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.99999508576539	WITHOUT_CLASSIFICATION	4.9142346101138085E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999992676253261	WITHOUT_CLASSIFICATION	7.32374673908161E-7	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999892406687573	WITHOUT_CLASSIFICATION	1.075933124271672E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982177972698	WITHOUT_CLASSIFICATION	1.7822027301471307E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999990646163458	WITHOUT_CLASSIFICATION	9.353836542747346E-7	TEST
}	WITHOUT_CLASSIFICATION	0.999931265245753	WITHOUT_CLASSIFICATION	6.873475424700444E-5	TEST
}	WITHOUT_CLASSIFICATION	0.999931265245753	WITHOUT_CLASSIFICATION	6.873475424700444E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999966203113443	WITHOUT_CLASSIFICATION	3.379688655663039E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999994424732658	WITHOUT_CLASSIFICATION	5.575267342884958E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990444488042	WITHOUT_CLASSIFICATION	9.555511958324645E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999073327626	WITHOUT_CLASSIFICATION	9.266723742141253E-8	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998496838234	WITHOUT_CLASSIFICATION	1.5031617665642519E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996663889091	WITHOUT_CLASSIFICATION	3.336110908275712E-7	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999923300362259	WITHOUT_CLASSIFICATION	7.669963774034643E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994101578905	WITHOUT_CLASSIFICATION	5.898421095866327E-7	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998588421235	WITHOUT_CLASSIFICATION	1.411578764817544E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999041054126016	WITHOUT_CLASSIFICATION	9.589458739848433E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999968943843011	WITHOUT_CLASSIFICATION	3.1056156989935285E-6	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999992973689523	WITHOUT_CLASSIFICATION	7.026310476745056E-7	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999998794051941	WITHOUT_CLASSIFICATION	1.2059480582689157E-7	TEST
types	WITHOUT_CLASSIFICATION	0.9999913340235748	WITHOUT_CLASSIFICATION	8.665976425242458E-6	TEST
custom sql	WITHOUT_CLASSIFICATION	0.999999452415007	WITHOUT_CLASSIFICATION	5.475849931264504E-7	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999996857394975	WITHOUT_CLASSIFICATION	3.142605024561777E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999922700382	WITHOUT_CLASSIFICATION	7.729961859319451E-9	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999997484061643	WITHOUT_CLASSIFICATION	2.5159383562058545E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997952048385	WITHOUT_CLASSIFICATION	2.047951615054201E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999844973018	WITHOUT_CLASSIFICATION	1.5502698198219295E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999219570637234	WITHOUT_CLASSIFICATION	7.80429362766688E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999633444439	WITHOUT_CLASSIFICATION	3.665555616922598E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999900829019402	WITHOUT_CLASSIFICATION	9.91709805979612E-6	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997539463478	WITHOUT_CLASSIFICATION	2.460536521709524E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998409437318	WITHOUT_CLASSIFICATION	1.590562681399165E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998730377322	WITHOUT_CLASSIFICATION	1.2696226770358454E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999857473907205	WITHOUT_CLASSIFICATION	1.425260927936017E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999978134813	WITHOUT_CLASSIFICATION	2.186518625866834E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999978432726427	WITHOUT_CLASSIFICATION	2.1567273573067886E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.99999812052001	WITHOUT_CLASSIFICATION	1.8794799899534145E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999979633344502	WITHOUT_CLASSIFICATION	2.0366655497209874E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999889038229431	WITHOUT_CLASSIFICATION	1.109617705681321E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999983905507583	WITHOUT_CLASSIFICATION	1.6094492415888526E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994101578905	WITHOUT_CLASSIFICATION	5.898421095866327E-7	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999997319655387	WITHOUT_CLASSIFICATION	2.680344612546843E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999776285625092	WITHOUT_CLASSIFICATION	2.2371437490865356E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9987042257727256	WITHOUT_CLASSIFICATION	0.0012957742272744113	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999722950869003	WITHOUT_CLASSIFICATION	2.770491309965973E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994487400368	WITHOUT_CLASSIFICATION	5.512599633080911E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999995809133567	WITHOUT_CLASSIFICATION	4.1908664324690404E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999073327626	WITHOUT_CLASSIFICATION	9.266723742141253E-8	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999999073327626	WITHOUT_CLASSIFICATION	9.266723742141253E-8	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998277310845	WITHOUT_CLASSIFICATION	1.7226891553428154E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999981021675828	WITHOUT_CLASSIFICATION	1.8978324172714447E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999997185104886	WITHOUT_CLASSIFICATION	2.814895113289251E-7	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998879864695	WITHOUT_CLASSIFICATION	1.1201353039090002E-7	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999899241003	WITHOUT_CLASSIFICATION	1.0075899701406973E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999994542177741	WITHOUT_CLASSIFICATION	5.457822258490086E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999994302002602	WITHOUT_CLASSIFICATION	5.697997399098383E-7	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.99999978482562	WITHOUT_CLASSIFICATION	2.151743799504732E-7	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999943737495	WITHOUT_CLASSIFICATION	5.626250455237173E-9	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999753937523	WITHOUT_CLASSIFICATION	2.4606247759604365E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999054106402	WITHOUT_CLASSIFICATION	9.458935969349729E-8	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999985651177381	WITHOUT_CLASSIFICATION	1.4348822618500612E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998975249199842	WITHOUT_CLASSIFICATION	1.0247508001577172E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.999999320725536	WITHOUT_CLASSIFICATION	6.79274464001882E-7	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999054106402	WITHOUT_CLASSIFICATION	9.458935969349729E-8	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988590075941	WITHOUT_CLASSIFICATION	1.1409924058902884E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999998740435851	WITHOUT_CLASSIFICATION	1.2595641489641726E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999997577945441	WITHOUT_CLASSIFICATION	2.4220545590776905E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9991277018267426	WITHOUT_CLASSIFICATION	8.722981732573616E-4	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998975249199842	WITHOUT_CLASSIFICATION	1.0247508001577172E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999940521499708	WITHOUT_CLASSIFICATION	5.9478500292082415E-6	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999799049757	WITHOUT_CLASSIFICATION	2.0095024296855094E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999561839309	WITHOUT_CLASSIFICATION	4.381606906207281E-8	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999972025576	WITHOUT_CLASSIFICATION	2.797442353802563E-9	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999148609212541	WITHOUT_CLASSIFICATION	8.513907874579051E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999990744026551	WITHOUT_CLASSIFICATION	9.255973449130897E-7	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999997152376637	WITHOUT_CLASSIFICATION	2.8476233632595354E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999763960468271	WITHOUT_CLASSIFICATION	2.3603953172908028E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999992587008372	WITHOUT_CLASSIFICATION	7.412991628125961E-7	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999998242991153	WITHOUT_CLASSIFICATION	1.7570088480398392E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999755594804	WITHOUT_CLASSIFICATION	2.4440519616806417E-8	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999547137911	WITHOUT_CLASSIFICATION	4.528620893628987E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999054106402	WITHOUT_CLASSIFICATION	9.458935969349729E-8	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999940521499708	WITHOUT_CLASSIFICATION	5.9478500292082415E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999561839309	WITHOUT_CLASSIFICATION	4.381606906207281E-8	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998807119177	WITHOUT_CLASSIFICATION	1.1928808228972374E-7	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999946329422332	WITHOUT_CLASSIFICATION	5.367057766800179E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999998938154745	WITHOUT_CLASSIFICATION	1.0618452549762776E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998975249199842	WITHOUT_CLASSIFICATION	1.0247508001577172E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993905610568	WITHOUT_CLASSIFICATION	6.094389430958068E-7	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999742147249187	WITHOUT_CLASSIFICATION	2.5785275081289003E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.99985350522653	WITHOUT_CLASSIFICATION	1.4649477346997182E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999740294220503	WITHOUT_CLASSIFICATION	2.597057794984792E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999763960468271	WITHOUT_CLASSIFICATION	2.3603953172908028E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988590075941	WITHOUT_CLASSIFICATION	1.1409924058902884E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.999934262767099	WITHOUT_CLASSIFICATION	6.573723290106634E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999997655673377	WITHOUT_CLASSIFICATION	2.344326623132714E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999990868587062	WITHOUT_CLASSIFICATION	9.131412938746817E-7	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999999371718144	WITHOUT_CLASSIFICATION	6.282818559845946E-7	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999993947825768	WITHOUT_CLASSIFICATION	6.05217423111014E-7	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999995556188431	WITHOUT_CLASSIFICATION	4.443811568419544E-7	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999990781533971	WITHOUT_CLASSIFICATION	9.218466029460513E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982177972698	WITHOUT_CLASSIFICATION	1.7822027301471307E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999051700594	WITHOUT_CLASSIFICATION	9.482994062407433E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999201139803	WITHOUT_CLASSIFICATION	7.988601964573745E-8	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999751137886023	WITHOUT_CLASSIFICATION	2.4886211397725492E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997850112297	WITHOUT_CLASSIFICATION	2.1498877019924426E-7	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999725516648	WITHOUT_CLASSIFICATION	2.7448335209718842E-8	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999884762286	WITHOUT_CLASSIFICATION	1.1523771433811687E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999977167713391	WITHOUT_CLASSIFICATION	2.283228661027735E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998561713197	WITHOUT_CLASSIFICATION	1.4382868021990483E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999740294220503	WITHOUT_CLASSIFICATION	2.597057794984792E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999284781090007	WITHOUT_CLASSIFICATION	7.152189099938912E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999578210473332	WITHOUT_CLASSIFICATION	4.21789526667136E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999857074067767	WITHOUT_CLASSIFICATION	1.4292593223205006E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999674589614704	WITHOUT_CLASSIFICATION	3.2541038529465736E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999971039081608	WITHOUT_CLASSIFICATION	2.8960918392490995E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999480125329	WITHOUT_CLASSIFICATION	5.198746718378987E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996674996842	WITHOUT_CLASSIFICATION	3.3250031581558804E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999946626267563	WITHOUT_CLASSIFICATION	5.3373732437246184E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999920243722	WITHOUT_CLASSIFICATION	7.975627797635501E-8	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999738972680163	WITHOUT_CLASSIFICATION	2.6102731983701553E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999993259555486	WITHOUT_CLASSIFICATION	6.740444513627279E-7	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999978343365106	WITHOUT_CLASSIFICATION	2.1656634894577873E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999979120880843	WITHOUT_CLASSIFICATION	2.0879119156938954E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999978570994839	WITHOUT_CLASSIFICATION	2.142900516116857E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999665099304	WITHOUT_CLASSIFICATION	3.3490069666714664E-8	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998581173082	WITHOUT_CLASSIFICATION	1.418826917441088E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999804629357	WITHOUT_CLASSIFICATION	1.953706427301772E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999784796642	WITHOUT_CLASSIFICATION	2.1520335869292938E-8	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999974397960669	WITHOUT_CLASSIFICATION	2.560203933183544E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999997386986522	WITHOUT_CLASSIFICATION	2.613013476827074E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999687345104499	WITHOUT_CLASSIFICATION	3.126548955011656E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999978702971805	WITHOUT_CLASSIFICATION	2.1297028195492347E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999989447196896	WITHOUT_CLASSIFICATION	1.0552803102880772E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999821980781	WITHOUT_CLASSIFICATION	1.7801921880706796E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999995294741837	WITHOUT_CLASSIFICATION	4.705258162901608E-7	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998968692301751	WITHOUT_CLASSIFICATION	1.0313076982497217E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999989214296993	WITHOUT_CLASSIFICATION	1.0785703006589116E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999986048171065	WITHOUT_CLASSIFICATION	1.3951828935899827E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999991850270227	WITHOUT_CLASSIFICATION	8.149729773942739E-7	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9993757463740941	WITHOUT_CLASSIFICATION	6.242536259059937E-4	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999996439259595	WITHOUT_CLASSIFICATION	3.5607404048461E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999982095238833	WITHOUT_CLASSIFICATION	1.7904761167189245E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998834411032	WITHOUT_CLASSIFICATION	1.1655889668821572E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999821199693316	WITHOUT_CLASSIFICATION	1.7880030668374238E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999972951639636	WITHOUT_CLASSIFICATION	2.704836036443577E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999994322234999	WITHOUT_CLASSIFICATION	5.677765001122202E-7	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997842616448	WITHOUT_CLASSIFICATION	2.1573835513385756E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999985776605461	WITHOUT_CLASSIFICATION	1.4223394539221707E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999994322234999	WITHOUT_CLASSIFICATION	5.677765001122202E-7	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999972951639636	WITHOUT_CLASSIFICATION	2.704836036443577E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997842616448	WITHOUT_CLASSIFICATION	2.1573835513385756E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999993816440813	WITHOUT_CLASSIFICATION	6.18355918621305E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999995622121134	WITHOUT_CLASSIFICATION	4.3778788654213297E-7	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999997028640436	WITHOUT_CLASSIFICATION	2.971359564729852E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999996345149743	WITHOUT_CLASSIFICATION	3.6548502567957123E-7	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999929406974	WITHOUT_CLASSIFICATION	7.059302606440532E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999359862980326	WITHOUT_CLASSIFICATION	6.401370196743658E-5	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999984579575179	WITHOUT_CLASSIFICATION	1.54204248209024E-6	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999992950180555	WITHOUT_CLASSIFICATION	7.049819445818174E-7	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999534571629	WITHOUT_CLASSIFICATION	4.654283712170237E-8	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999995001296214	WITHOUT_CLASSIFICATION	4.998703786366456E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999993723149129	WITHOUT_CLASSIFICATION	6.276850871738362E-7	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999995224213001	WITHOUT_CLASSIFICATION	4.775787000186101E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999996280613026	WITHOUT_CLASSIFICATION	3.7193869741724416E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999996345149743	WITHOUT_CLASSIFICATION	3.6548502567957123E-7	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999999930883582	WITHOUT_CLASSIFICATION	6.91164180467271E-8	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999991669136364	WITHOUT_CLASSIFICATION	8.330863634908745E-7	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999106158914	WITHOUT_CLASSIFICATION	8.938410849929637E-8	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999688369356	WITHOUT_CLASSIFICATION	3.1163064309958816E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999996869596758	WITHOUT_CLASSIFICATION	3.1304032414101416E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997694701395	WITHOUT_CLASSIFICATION	2.3052986062404333E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999986526059454	WITHOUT_CLASSIFICATION	1.347394054514527E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999990062173	WITHOUT_CLASSIFICATION	9.93782771501141E-10	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999933106581022	WITHOUT_CLASSIFICATION	6.689341897848764E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999997406610079	WITHOUT_CLASSIFICATION	2.5933899207508157E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993673739239	WITHOUT_CLASSIFICATION	6.326260760148348E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993673739239	WITHOUT_CLASSIFICATION	6.326260760148348E-7	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999955663107	WITHOUT_CLASSIFICATION	4.433689357350995E-9	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999955663107	WITHOUT_CLASSIFICATION	4.433689357350995E-9	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999978563543207	WITHOUT_CLASSIFICATION	2.143645679308954E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999106158914	WITHOUT_CLASSIFICATION	8.938410849929637E-8	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999995927553507	WITHOUT_CLASSIFICATION	4.072446493308324E-7	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999953317464	WITHOUT_CLASSIFICATION	4.66825350073622E-9	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997981258733	WITHOUT_CLASSIFICATION	2.0187412663811712E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997981258733	WITHOUT_CLASSIFICATION	2.0187412663811712E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999404932303	WITHOUT_CLASSIFICATION	5.950676972553901E-8	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999998305692639	WITHOUT_CLASSIFICATION	1.6943073608277095E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.99999999930648	WITHOUT_CLASSIFICATION	6.935199564545922E-10	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999993476540434	WITHOUT_CLASSIFICATION	6.523459565428033E-7	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998845385607	WITHOUT_CLASSIFICATION	1.1546143920137254E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999931473992	WITHOUT_CLASSIFICATION	6.852600847856954E-9	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999982646686294	WITHOUT_CLASSIFICATION	1.735331370640345E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999999604700653	WITHOUT_CLASSIFICATION	3.952993469887232E-7	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999998688158936	WITHOUT_CLASSIFICATION	1.3118410624174734E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999999963494534	WITHOUT_CLASSIFICATION	3.650546588574974E-8	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.999999963190493	WITHOUT_CLASSIFICATION	3.680950704957613E-8	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.999998831573258	WITHOUT_CLASSIFICATION	1.1684267420502917E-6	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998180768949	WITHOUT_CLASSIFICATION	1.8192310512427823E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999998004497457	WITHOUT_CLASSIFICATION	1.995502542822568E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999994969601855	WITHOUT_CLASSIFICATION	5.03039814521353E-7	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999978966731357	WITHOUT_CLASSIFICATION	2.103326864437575E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977104989031	WITHOUT_CLASSIFICATION	2.289501096938024E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999368139055	WITHOUT_CLASSIFICATION	6.318609446930225E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999964768476	WITHOUT_CLASSIFICATION	3.5231523989465045E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999683409618	WITHOUT_CLASSIFICATION	3.165903827295712E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999904124537	WITHOUT_CLASSIFICATION	9.587546227777376E-9	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999942563835056	WITHOUT_CLASSIFICATION	5.7436164944596884E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999998968519888	WITHOUT_CLASSIFICATION	1.0314801125705768E-7	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999909184396	WITHOUT_CLASSIFICATION	9.081560349000516E-9	TEST
/	WITHOUT_CLASSIFICATION	0.999883860256116	WITHOUT_CLASSIFICATION	1.1613974388392765E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995903508941	WITHOUT_CLASSIFICATION	4.09649105829761E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999978343365106	WITHOUT_CLASSIFICATION	2.1656634894577873E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998940235051	WITHOUT_CLASSIFICATION	1.0597649483286978E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999998265970622	WITHOUT_CLASSIFICATION	1.7340293771285493E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941289079167	WITHOUT_CLASSIFICATION	5.87109208317592E-6	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987952744694	WITHOUT_CLASSIFICATION	1.204725530606723E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999995105766646	WITHOUT_CLASSIFICATION	4.894233354171656E-7	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999995105766646	WITHOUT_CLASSIFICATION	4.894233354171656E-7	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997464685507	WITHOUT_CLASSIFICATION	2.5353144927119717E-7	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999993451265841	WITHOUT_CLASSIFICATION	6.548734160005484E-7	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999993074461681	WITHOUT_CLASSIFICATION	6.925538319098274E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999993074461681	WITHOUT_CLASSIFICATION	6.925538319098274E-6	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998100990737	WITHOUT_CLASSIFICATION	1.899009263595982E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999992676232545	WITHOUT_CLASSIFICATION	7.32376745557449E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999937558039977	WITHOUT_CLASSIFICATION	6.244196002227169E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999982608325383	WITHOUT_CLASSIFICATION	1.7391674617695017E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999996956746203	WITHOUT_CLASSIFICATION	3.04325379615118E-7	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999992484560436	WITHOUT_CLASSIFICATION	7.515439563694396E-7	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999986842378563	WITHOUT_CLASSIFICATION	1.3157621437840198E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993911966554	WITHOUT_CLASSIFICATION	6.088033446088576E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997916940605	WITHOUT_CLASSIFICATION	2.083059395121072E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997916940605	WITHOUT_CLASSIFICATION	2.083059395121072E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999996040841	WITHOUT_CLASSIFICATION	3.9591586163106475E-10	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996044774403	WITHOUT_CLASSIFICATION	3.9552255973833157E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996044774403	WITHOUT_CLASSIFICATION	3.9552255973833157E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999273004403	WITHOUT_CLASSIFICATION	7.269955967746277E-8	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999998741530863	WITHOUT_CLASSIFICATION	1.2584691365766667E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9983367528847273	WITHOUT_CLASSIFICATION	0.0016632471152726435	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999992683843506	WITHOUT_CLASSIFICATION	7.316156493514621E-7	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.999999816673976	WITHOUT_CLASSIFICATION	1.833260240430459E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999982211351	WITHOUT_CLASSIFICATION	1.7788650002527077E-9	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999987132456958	WITHOUT_CLASSIFICATION	1.2867543042149392E-6	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999804465410964	WITHOUT_CLASSIFICATION	1.9553458903580498E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999955125304	WITHOUT_CLASSIFICATION	4.487469609326774E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999903770164982	WITHOUT_CLASSIFICATION	9.622983501804284E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999990784023	WITHOUT_CLASSIFICATION	9.21597572530159E-10	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999997647095918	WITHOUT_CLASSIFICATION	2.352904081716728E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986646058995	WITHOUT_CLASSIFICATION	1.3353941005498152E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986646058995	WITHOUT_CLASSIFICATION	1.3353941005498152E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986646058995	WITHOUT_CLASSIFICATION	1.3353941005498152E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986646058995	WITHOUT_CLASSIFICATION	1.3353941005498152E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999975141288182	WITHOUT_CLASSIFICATION	2.4858711817843827E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999990344617382	WITHOUT_CLASSIFICATION	9.655382617947914E-7	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999984477113152	WITHOUT_CLASSIFICATION	1.5522886847825233E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999947583638763	WITHOUT_CLASSIFICATION	5.241636123696521E-6	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996997482036	WITHOUT_CLASSIFICATION	3.0025179644636535E-7	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999994110315643	WITHOUT_CLASSIFICATION	5.889684355958496E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999989748233123	WITHOUT_CLASSIFICATION	1.0251766876504743E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999990154942482	WITHOUT_CLASSIFICATION	9.845057518768556E-7	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999291266598	WITHOUT_CLASSIFICATION	7.087334010922411E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.999999912630296	WITHOUT_CLASSIFICATION	8.736970413558243E-8	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999996500876965	WITHOUT_CLASSIFICATION	3.499123034671985E-7	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997973705113	WITHOUT_CLASSIFICATION	2.026294887932344E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9870011385715225	WITHOUT_CLASSIFICATION	0.012998861428477539	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999978686760097	WITHOUT_CLASSIFICATION	2.1313239903080704E-6	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999967049960428	WITHOUT_CLASSIFICATION	3.2950039571903936E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997973705113	WITHOUT_CLASSIFICATION	2.026294887932344E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999991332754857	WITHOUT_CLASSIFICATION	8.667245142312038E-7	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999999998499568	WITHOUT_CLASSIFICATION	1.5004320375824294E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999827389939	WITHOUT_CLASSIFICATION	1.7261006090627748E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999956580833815	WITHOUT_CLASSIFICATION	4.341916618543264E-6	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997819012216	WITHOUT_CLASSIFICATION	2.180987783843367E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998543698053	WITHOUT_CLASSIFICATION	1.4563019466963296E-7	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999992640328	WITHOUT_CLASSIFICATION	7.359671711447386E-10	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999999597375354	WITHOUT_CLASSIFICATION	4.0262464599839487E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999981022425	WITHOUT_CLASSIFICATION	1.8977574941565496E-8	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999146051004	WITHOUT_CLASSIFICATION	8.539489960525979E-8	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999458909921	WITHOUT_CLASSIFICATION	5.410900792569036E-8	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995742559608	WITHOUT_CLASSIFICATION	4.2574403927001297E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999969278357574	WITHOUT_CLASSIFICATION	3.0721642425070823E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999633295877333	WITHOUT_CLASSIFICATION	3.6670412266749344E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997489741482	WITHOUT_CLASSIFICATION	2.5102585178256424E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999984128408985	WITHOUT_CLASSIFICATION	1.5871591015266902E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993358065034	WITHOUT_CLASSIFICATION	6.641934965950008E-7	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996909006188	WITHOUT_CLASSIFICATION	3.0909938129231087E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999995654260328	WITHOUT_CLASSIFICATION	4.345739672059198E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999996909006188	WITHOUT_CLASSIFICATION	3.0909938129231087E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999724132369	WITHOUT_CLASSIFICATION	2.7586763006940017E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989953602658	WITHOUT_CLASSIFICATION	1.0046397341314523E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999999702742028	WITHOUT_CLASSIFICATION	2.972579717075305E-8	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999999134424932	WITHOUT_CLASSIFICATION	8.655750679435269E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999999732910352	WITHOUT_CLASSIFICATION	2.670896491284797E-8	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999989116178739	WITHOUT_CLASSIFICATION	1.0883821260374892E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999997740420354	WITHOUT_CLASSIFICATION	2.2595796460170046E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993358065034	WITHOUT_CLASSIFICATION	6.641934965950008E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999995654260328	WITHOUT_CLASSIFICATION	4.345739672059198E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999724132369	WITHOUT_CLASSIFICATION	2.7586763006940017E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997833718726	WITHOUT_CLASSIFICATION	2.1662812750969547E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999999324771442	WITHOUT_CLASSIFICATION	6.752285578001647E-8	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999982837409896	WITHOUT_CLASSIFICATION	1.7162590103310327E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999569562812	WITHOUT_CLASSIFICATION	4.304371880722447E-8	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999993582441614	WITHOUT_CLASSIFICATION	6.417558385413376E-7	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999996973636829	WITHOUT_CLASSIFICATION	3.0263631712162355E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999544497394	WITHOUT_CLASSIFICATION	4.555026051295368E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977104989031	WITHOUT_CLASSIFICATION	2.289501096938024E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989953602658	WITHOUT_CLASSIFICATION	1.0046397341314523E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999993124459748	WITHOUT_CLASSIFICATION	6.87554025257126E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999683552943	WITHOUT_CLASSIFICATION	3.1644705718077434E-8	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999519219767	WITHOUT_CLASSIFICATION	4.807802326459199E-8	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999491395177	WITHOUT_CLASSIFICATION	5.0860482310578125E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977104989031	WITHOUT_CLASSIFICATION	2.289501096938024E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998328373514	WITHOUT_CLASSIFICATION	1.6716264862861432E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977104989031	WITHOUT_CLASSIFICATION	2.289501096938024E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998921364419	WITHOUT_CLASSIFICATION	1.0786355814944486E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999968598673853	WITHOUT_CLASSIFICATION	3.140132614647178E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999988609714411	WITHOUT_CLASSIFICATION	1.1390285589767498E-6	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999988495449932	WITHOUT_CLASSIFICATION	1.1504550068398976E-6	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999021768626	WITHOUT_CLASSIFICATION	9.782313733898463E-8	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999995997500758	WITHOUT_CLASSIFICATION	4.0024992418504937E-7	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999994961530079	WITHOUT_CLASSIFICATION	5.038469920538782E-7	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998835079436	WITHOUT_CLASSIFICATION	1.1649205635995308E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999985369782199	WITHOUT_CLASSIFICATION	1.4630217799836063E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999970978477095	WITHOUT_CLASSIFICATION	2.902152290503069E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999847374660299	WITHOUT_CLASSIFICATION	1.5262533970092684E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999994177236955	WITHOUT_CLASSIFICATION	5.822763045250421E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9983367528847273	WITHOUT_CLASSIFICATION	0.0016632471152726435	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999941862891608	WITHOUT_CLASSIFICATION	5.813710839133989E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999898518227275	WITHOUT_CLASSIFICATION	1.0148177272441216E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999986335374711	WITHOUT_CLASSIFICATION	1.3664625288908394E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999932224902603	WITHOUT_CLASSIFICATION	6.777509739740359E-6	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998624273213	WITHOUT_CLASSIFICATION	1.3757267859256374E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999660061493	WITHOUT_CLASSIFICATION	3.399385072902578E-8	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999798473449	WITHOUT_CLASSIFICATION	2.015265512677521E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999998371616751	WITHOUT_CLASSIFICATION	1.6283832492259565E-7	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999988133563	WITHOUT_CLASSIFICATION	1.1866437201786679E-9	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999998177761841	WITHOUT_CLASSIFICATION	1.82223815963313E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9981241312084218	WITHOUT_CLASSIFICATION	0.0018758687915782707	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999983796099928	WITHOUT_CLASSIFICATION	1.6203900071703045E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999996594318721	WITHOUT_CLASSIFICATION	3.4056812797967266E-7	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.999991192667735	WITHOUT_CLASSIFICATION	8.807332264976767E-6	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999929475734857	WITHOUT_CLASSIFICATION	7.052426514353323E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999740894783209	WITHOUT_CLASSIFICATION	2.5910521679048963E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999980738170724	WITHOUT_CLASSIFICATION	1.9261829275393634E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999999999238509	WITHOUT_CLASSIFICATION	7.61491088709464E-10	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999959863277	WITHOUT_CLASSIFICATION	4.013672310621648E-9	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999967942256033	WITHOUT_CLASSIFICATION	3.2057743966533107E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999933393507988	WITHOUT_CLASSIFICATION	6.66064920127676E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9982920932718383	WITHOUT_CLASSIFICATION	0.001707906728161649	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999123199619829	WITHOUT_CLASSIFICATION	8.768003801700892E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999997562693684	WITHOUT_CLASSIFICATION	2.437306315448622E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.999999321772831	WITHOUT_CLASSIFICATION	6.782271689751077E-7	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999736983412513	WITHOUT_CLASSIFICATION	2.6301658748738993E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999990698517922	WITHOUT_CLASSIFICATION	9.301482077962927E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9921534160976878	WITHOUT_CLASSIFICATION	0.007846583902312142	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999767210831	WITHOUT_CLASSIFICATION	2.327891683075448E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999389469275	WITHOUT_CLASSIFICATION	6.105307250864237E-8	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999867967581275	WITHOUT_CLASSIFICATION	1.3203241872480273E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999867967581275	WITHOUT_CLASSIFICATION	1.3203241872480273E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999999922469848	WITHOUT_CLASSIFICATION	7.753015198853341E-8	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998835079436	WITHOUT_CLASSIFICATION	1.1649205635995308E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999995418499262	WITHOUT_CLASSIFICATION	4.5815007383912733E-7	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999990712215331	WITHOUT_CLASSIFICATION	9.287784669864945E-7	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999806306383	WITHOUT_CLASSIFICATION	1.9369361652464343E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999516555486	WITHOUT_CLASSIFICATION	4.8344451468035117E-8	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999947416306119	WITHOUT_CLASSIFICATION	5.258369388140012E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999357296009475	WITHOUT_CLASSIFICATION	6.427039905262462E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999994000138905	WITHOUT_CLASSIFICATION	5.999861094940188E-6	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999997538515754	WITHOUT_CLASSIFICATION	2.461484246351787E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999998069464452	WITHOUT_CLASSIFICATION	1.9305355473171746E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999999514117011	WITHOUT_CLASSIFICATION	4.858829890105957E-8	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999118424048	WITHOUT_CLASSIFICATION	8.815759514953361E-8	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999936803292961	WITHOUT_CLASSIFICATION	6.319670703793127E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999980329410977	WITHOUT_CLASSIFICATION	1.967058902322572E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999514147141	WITHOUT_CLASSIFICATION	4.858528594045281E-8	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999807553068	WITHOUT_CLASSIFICATION	1.9244693078765874E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999877706783	WITHOUT_CLASSIFICATION	1.2229321630593975E-8	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999643418152	WITHOUT_CLASSIFICATION	3.565818479108573E-8	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999861600168	WITHOUT_CLASSIFICATION	1.3839983146232597E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999980990291	WITHOUT_CLASSIFICATION	1.900970888873146E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999996766577463	WITHOUT_CLASSIFICATION	3.233422536693586E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999994325357008	WITHOUT_CLASSIFICATION	5.674642993170483E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999773993206	WITHOUT_CLASSIFICATION	2.260067938215918E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9921534160976878	WITHOUT_CLASSIFICATION	0.007846583902312142	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998827184001	WITHOUT_CLASSIFICATION	1.172815998300664E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999711532055	WITHOUT_CLASSIFICATION	2.8846794501517968E-8	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999770147344	WITHOUT_CLASSIFICATION	2.298526559093931E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999978443751727	WITHOUT_CLASSIFICATION	2.155624827206703E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999998636942217	WITHOUT_CLASSIFICATION	1.363057783326962E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999993066985873	WITHOUT_CLASSIFICATION	6.933014126888868E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999607945213308	WITHOUT_CLASSIFICATION	3.920547866921597E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999996141002856	WITHOUT_CLASSIFICATION	3.858997144114678E-7	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999441516797	WITHOUT_CLASSIFICATION	5.5848320309716824E-8	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999980444979	WITHOUT_CLASSIFICATION	1.955502024835583E-9	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999997946720472	WITHOUT_CLASSIFICATION	2.05327952833101E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995627501976	WITHOUT_CLASSIFICATION	4.372498023359802E-7	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995731968730557	WITHOUT_CLASSIFICATION	4.2680312694437565E-4	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999994621630102	WITHOUT_CLASSIFICATION	5.378369898073108E-7	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999993968630413	WITHOUT_CLASSIFICATION	6.031369586857036E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999763515517	WITHOUT_CLASSIFICATION	2.3648448326009014E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999763515517	WITHOUT_CLASSIFICATION	2.3648448326009014E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999989324992415	WITHOUT_CLASSIFICATION	1.0675007584763734E-6	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999986125609601	WITHOUT_CLASSIFICATION	1.3874390399362942E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998952342058	WITHOUT_CLASSIFICATION	1.0476579419216988E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998952342058	WITHOUT_CLASSIFICATION	1.0476579419216988E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999944603364	WITHOUT_CLASSIFICATION	5.539663592486891E-9	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995515346931	WITHOUT_CLASSIFICATION	4.484653069619054E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999878532218	WITHOUT_CLASSIFICATION	1.2146778157817873E-8	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996438629574	WITHOUT_CLASSIFICATION	3.5613704266166527E-7	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999954542862266	WITHOUT_CLASSIFICATION	4.545713773374103E-6	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999987987824975	WITHOUT_CLASSIFICATION	1.2012175024862335E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999674356268	WITHOUT_CLASSIFICATION	3.256437326336434E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999674356268	WITHOUT_CLASSIFICATION	3.256437326336434E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999998276547214	WITHOUT_CLASSIFICATION	1.7234527860750166E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999999881224306	WITHOUT_CLASSIFICATION	1.1877569456122136E-8	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999990017126689	WITHOUT_CLASSIFICATION	9.98287331111619E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998901311381	WITHOUT_CLASSIFICATION	1.0986886185886022E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999998901311381	WITHOUT_CLASSIFICATION	1.0986886185886022E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999997633726295	WITHOUT_CLASSIFICATION	2.366273703898687E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998524223447	WITHOUT_CLASSIFICATION	1.4757765527848028E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999911176637378	WITHOUT_CLASSIFICATION	8.882336262197292E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999992116382271	WITHOUT_CLASSIFICATION	7.883617727544013E-7	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999999842417282	WITHOUT_CLASSIFICATION	1.575827179742668E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999995538054457	WITHOUT_CLASSIFICATION	4.4619455426329204E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999617515268	WITHOUT_CLASSIFICATION	3.824847310492411E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999998843128779	WITHOUT_CLASSIFICATION	1.1568712214505654E-7	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999995785318494	WITHOUT_CLASSIFICATION	4.214681506543616E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999999647572381	WITHOUT_CLASSIFICATION	3.5242761905573485E-7	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999999503061	WITHOUT_CLASSIFICATION	4.9693971140273615E-11	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9999967196793834	WITHOUT_CLASSIFICATION	3.2803206166009593E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999680498556477	WITHOUT_CLASSIFICATION	3.195014435234627E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999990868072851	WITHOUT_CLASSIFICATION	9.131927149358929E-7	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999982585659828	WITHOUT_CLASSIFICATION	1.7414340172353144E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999984318271334	WITHOUT_CLASSIFICATION	1.5681728665787572E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999929824258	WITHOUT_CLASSIFICATION	7.01757420214222E-9	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999972827055118	WITHOUT_CLASSIFICATION	2.7172944882780675E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.999999946139521	WITHOUT_CLASSIFICATION	5.3860478952398526E-8	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999985750701155	WITHOUT_CLASSIFICATION	1.4249298845487997E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999997320471138	WITHOUT_CLASSIFICATION	2.6795288623997677E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999985242896695	WITHOUT_CLASSIFICATION	1.4757103305036218E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999445877285	WITHOUT_CLASSIFICATION	5.5412271499865976E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999952392088994	WITHOUT_CLASSIFICATION	4.760791100616815E-6	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999957192031844	WITHOUT_CLASSIFICATION	4.280796815650311E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999998719203551	WITHOUT_CLASSIFICATION	1.2807964486035969E-7	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988221548952	WITHOUT_CLASSIFICATION	1.1778451048485427E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999662620446083	WITHOUT_CLASSIFICATION	3.373795539166828E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999957090078	WITHOUT_CLASSIFICATION	4.290992275495692E-9	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999456394925	WITHOUT_CLASSIFICATION	5.436050745791799E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999447894456	WITHOUT_CLASSIFICATION	5.521055437354107E-8	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.99999995365028	WITHOUT_CLASSIFICATION	4.634971993528613E-8	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999516483564	WITHOUT_CLASSIFICATION	4.835164358768683E-8	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999996206506452	WITHOUT_CLASSIFICATION	3.793493547391138E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999994053988064	WITHOUT_CLASSIFICATION	5.94601193670015E-7	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999752150480408	WITHOUT_CLASSIFICATION	2.478495195917102E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999989072482867	WITHOUT_CLASSIFICATION	1.092751713347464E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999997775186694	WITHOUT_CLASSIFICATION	2.224813305445974E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999998736487368	WITHOUT_CLASSIFICATION	1.26351263201448E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999813981175	WITHOUT_CLASSIFICATION	1.8601882499753113E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999442773919	WITHOUT_CLASSIFICATION	5.5722608016151095E-8	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999993877070864	WITHOUT_CLASSIFICATION	6.12292913646717E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999997215990272	WITHOUT_CLASSIFICATION	2.7840097275182484E-7	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.999999931336045	WITHOUT_CLASSIFICATION	6.866395489559089E-8	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999998721349219	WITHOUT_CLASSIFICATION	1.2786507809262764E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999995448504795	WITHOUT_CLASSIFICATION	4.5514952050215565E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999988728817165	WITHOUT_CLASSIFICATION	1.127118283562033E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999978590819619	WITHOUT_CLASSIFICATION	2.140918038076936E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999116292592	WITHOUT_CLASSIFICATION	8.837074080279779E-8	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999775113725303	WITHOUT_CLASSIFICATION	2.2488627469632197E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999997986845229	WITHOUT_CLASSIFICATION	2.0131547720383767E-7	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999856839404	WITHOUT_CLASSIFICATION	1.431605950854797E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999950935019567	WITHOUT_CLASSIFICATION	4.906498043343746E-6	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999974233335	WITHOUT_CLASSIFICATION	2.5766666219486508E-9	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999977710489213	WITHOUT_CLASSIFICATION	2.228951078674891E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999998095724598	WITHOUT_CLASSIFICATION	1.9042754008224848E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999854204465	WITHOUT_CLASSIFICATION	1.4579553500306385E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999995662413981	WITHOUT_CLASSIFICATION	4.337586019024206E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999999293150519	WITHOUT_CLASSIFICATION	7.06849481320226E-8	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999526840522015	WITHOUT_CLASSIFICATION	4.7315947798512787E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997566997401	WITHOUT_CLASSIFICATION	2.433002599633443E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997566997401	WITHOUT_CLASSIFICATION	2.433002599633443E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999933494957932	WITHOUT_CLASSIFICATION	6.6505042068234044E-6	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.999982136562493	WITHOUT_CLASSIFICATION	1.786343750706557E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999993458012	WITHOUT_CLASSIFICATION	6.5419879362282165E-9	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999997977962242	WITHOUT_CLASSIFICATION	2.022037757719643E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999996799845559	WITHOUT_CLASSIFICATION	3.200154441631723E-7	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999958086389826	WITHOUT_CLASSIFICATION	4.1913610174323525E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999997966648126	WITHOUT_CLASSIFICATION	2.0333518726400906E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999993861088	WITHOUT_CLASSIFICATION	6.138912558907916E-10	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999997864336466	WITHOUT_CLASSIFICATION	2.135663534887271E-7	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999981461100566	WITHOUT_CLASSIFICATION	1.853889943468095E-6	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999943187848	WITHOUT_CLASSIFICATION	5.681215282100896E-9	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999997771602793	WITHOUT_CLASSIFICATION	2.228397206939331E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999176103201	WITHOUT_CLASSIFICATION	8.238967987374233E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999522007483	WITHOUT_CLASSIFICATION	4.7799251651451055E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921765046	WITHOUT_CLASSIFICATION	7.823495394170004E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999921765046	WITHOUT_CLASSIFICATION	7.823495394170004E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999627191866	WITHOUT_CLASSIFICATION	3.728081337700099E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999996209624434	WITHOUT_CLASSIFICATION	3.790375565241368E-7	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999663898959	WITHOUT_CLASSIFICATION	3.36101041935708E-8	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999996805603	WITHOUT_CLASSIFICATION	3.194396865720759E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999209652978	WITHOUT_CLASSIFICATION	7.903470217371593E-8	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812003949616	WITHOUT_CLASSIFICATION	1.8799605038446726E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996992556792	WITHOUT_CLASSIFICATION	3.007443208221328E-7	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999994325974251	WITHOUT_CLASSIFICATION	5.674025749831998E-7	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999701012712569	WITHOUT_CLASSIFICATION	2.9898728743095837E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999985151454	WITHOUT_CLASSIFICATION	1.484854493003844E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999581090957689	WITHOUT_CLASSIFICATION	4.1890904231165225E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999972812409	WITHOUT_CLASSIFICATION	2.718759004041419E-9	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999998880071528	WITHOUT_CLASSIFICATION	1.1199284722749303E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999970626889	WITHOUT_CLASSIFICATION	2.937311122784246E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999891261074	WITHOUT_CLASSIFICATION	1.0873892652896237E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999998977214856	WITHOUT_CLASSIFICATION	1.0227851440435369E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997552334181	WITHOUT_CLASSIFICATION	2.4476658184330444E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999980877827244	WITHOUT_CLASSIFICATION	1.9122172757253623E-6	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999996893003976	WITHOUT_CLASSIFICATION	3.106996023937876E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996457600738	WITHOUT_CLASSIFICATION	3.5423992608016714E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999807093338	WITHOUT_CLASSIFICATION	1.929066612569561E-8	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.99999999981346	WITHOUT_CLASSIFICATION	1.8654009081315426E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999888379315	WITHOUT_CLASSIFICATION	1.116206835876227E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999985265109	WITHOUT_CLASSIFICATION	1.4734891181236052E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998908789797	WITHOUT_CLASSIFICATION	1.0912102028687452E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999898503539701	WITHOUT_CLASSIFICATION	1.0149646029898802E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999214558459965	WITHOUT_CLASSIFICATION	7.85441540035142E-5	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998164928372	WITHOUT_CLASSIFICATION	1.8350716271679174E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999568776985	WITHOUT_CLASSIFICATION	4.312230157888041E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999120826627	WITHOUT_CLASSIFICATION	8.791733737821122E-8	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999999079820941	WITHOUT_CLASSIFICATION	9.20179058980222E-7	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996689828389	WITHOUT_CLASSIFICATION	3.310171610657907E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999934547561571	WITHOUT_CLASSIFICATION	6.545243842944295E-6	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999651431211	WITHOUT_CLASSIFICATION	3.4856878883107776E-8	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999977046874	WITHOUT_CLASSIFICATION	2.2953126609579048E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999835108596	WITHOUT_CLASSIFICATION	1.6489140348303986E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999996377619503	WITHOUT_CLASSIFICATION	3.622380496877461E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999353984977	WITHOUT_CLASSIFICATION	6.460150235405139E-8	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999959140667	WITHOUT_CLASSIFICATION	4.085933300984542E-8	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999964646062257	WITHOUT_CLASSIFICATION	3.5353937743177565E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999995524996655	WITHOUT_CLASSIFICATION	4.4750033451464806E-7	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.99999985176277	WITHOUT_CLASSIFICATION	1.4823723006861554E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999998755894253	WITHOUT_CLASSIFICATION	1.2441057470163315E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999998755894253	WITHOUT_CLASSIFICATION	1.2441057470163315E-6	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999997594978389	WITHOUT_CLASSIFICATION	2.4050216113797285E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999867367292	WITHOUT_CLASSIFICATION	1.326327080494575E-7	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.999999991486776	WITHOUT_CLASSIFICATION	8.513223959633422E-9	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999998555431415	WITHOUT_CLASSIFICATION	1.4445685846132085E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999010999105	WITHOUT_CLASSIFICATION	9.890008940707522E-8	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999993044896	WITHOUT_CLASSIFICATION	6.955104477508295E-10	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999725749845	WITHOUT_CLASSIFICATION	2.742501546576653E-8	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997871830594	WITHOUT_CLASSIFICATION	2.1281694057265633E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999992035812	WITHOUT_CLASSIFICATION	7.964187530651902E-10	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977058192998	WITHOUT_CLASSIFICATION	2.294180700260719E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987828202063	WITHOUT_CLASSIFICATION	1.2171797936992234E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999836659061779	WITHOUT_CLASSIFICATION	1.633409382206979E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999966608250047	WITHOUT_CLASSIFICATION	3.33917499536804E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999999646555986	WITHOUT_CLASSIFICATION	3.5344401399126584E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999857955086	WITHOUT_CLASSIFICATION	1.4204491265318567E-8	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999999123615863	WITHOUT_CLASSIFICATION	8.763841365412314E-8	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999633740481	WITHOUT_CLASSIFICATION	3.6625951981543196E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999995065486	WITHOUT_CLASSIFICATION	4.934513447665612E-10	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999780621931	WITHOUT_CLASSIFICATION	2.193780683166409E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999963242504807	WITHOUT_CLASSIFICATION	3.675749519294888E-6	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999981966108821	WITHOUT_CLASSIFICATION	1.8033891179069798E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999332167248	WITHOUT_CLASSIFICATION	6.678327522733484E-8	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999972036712	WITHOUT_CLASSIFICATION	2.7963287208448666E-9	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999981036915012	WITHOUT_CLASSIFICATION	1.8963084987668482E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999251928595	WITHOUT_CLASSIFICATION	7.480714052977572E-8	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999990495509927	WITHOUT_CLASSIFICATION	9.504490071287816E-7	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999984774885219	WITHOUT_CLASSIFICATION	1.5225114781874267E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999992964315	WITHOUT_CLASSIFICATION	7.035685717956536E-10	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999831060275157	WITHOUT_CLASSIFICATION	1.6893972484198163E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999829868024	WITHOUT_CLASSIFICATION	1.701319762999006E-8	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999090464448	WITHOUT_CLASSIFICATION	9.095355523229756E-8	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999849658318	WITHOUT_CLASSIFICATION	1.503416823148795E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999106070325	WITHOUT_CLASSIFICATION	8.939296753725617E-8	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999940522991	WITHOUT_CLASSIFICATION	5.9477008389489525E-9	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999932439214	WITHOUT_CLASSIFICATION	6.756078608675604E-9	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999937570505569	WITHOUT_CLASSIFICATION	6.24294944309328E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999934707656	WITHOUT_CLASSIFICATION	6.529234443594251E-9	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999103396938	WITHOUT_CLASSIFICATION	8.96603061628499E-8	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999996000195444	WITHOUT_CLASSIFICATION	3.999804556608532E-7	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999750775785	WITHOUT_CLASSIFICATION	2.49224214776199E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999993394945271	WITHOUT_CLASSIFICATION	6.605054728340592E-7	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999947457210724	WITHOUT_CLASSIFICATION	5.25427892764119E-6	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999952173807	WITHOUT_CLASSIFICATION	4.7826193065741906E-8	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999860014835	WITHOUT_CLASSIFICATION	1.3998516376508851E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997250269829	WITHOUT_CLASSIFICATION	2.749730171370668E-7	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999842690265037	WITHOUT_CLASSIFICATION	1.5730973496309023E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999990375164	WITHOUT_CLASSIFICATION	9.62483604149441E-9	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999994658461304	WITHOUT_CLASSIFICATION	5.341538696024036E-7	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999370437358	WITHOUT_CLASSIFICATION	6.295626423406725E-8	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999176103201	WITHOUT_CLASSIFICATION	8.238967987374233E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999996961004357	WITHOUT_CLASSIFICATION	3.038995643453621E-7	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999984494185	WITHOUT_CLASSIFICATION	1.550581493801982E-8	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999977191479	WITHOUT_CLASSIFICATION	2.2808521460744195E-9	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999997959037	WITHOUT_CLASSIFICATION	2.0409630077959073E-9	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997985109549	WITHOUT_CLASSIFICATION	2.0148904521942313E-7	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999831036273	WITHOUT_CLASSIFICATION	1.689637279578461E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999996968423903	WITHOUT_CLASSIFICATION	3.0315760958211204E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999860037348554	WITHOUT_CLASSIFICATION	1.3996265144680149E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996943033357	WITHOUT_CLASSIFICATION	3.0569666435488437E-7	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999996219852867	WITHOUT_CLASSIFICATION	3.7801471328974613E-7	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999830166936	WITHOUT_CLASSIFICATION	1.698330638925933E-8	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999921466344	WITHOUT_CLASSIFICATION	7.853365595262815E-8	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999544524693	WITHOUT_CLASSIFICATION	4.554753079872036E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999003140487	WITHOUT_CLASSIFICATION	9.968595130816719E-8	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999773136655	WITHOUT_CLASSIFICATION	2.2686334554447792E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997166472956	WITHOUT_CLASSIFICATION	2.833527044003522E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999988905448851	WITHOUT_CLASSIFICATION	1.1094551148838536E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999984245839498	WITHOUT_CLASSIFICATION	1.5754160502009467E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999709396071	WITHOUT_CLASSIFICATION	2.9060392922556816E-8	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999997252614686	WITHOUT_CLASSIFICATION	2.747385313704077E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997166472956	WITHOUT_CLASSIFICATION	2.833527044003522E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998999553138745	WITHOUT_CLASSIFICATION	1.0004468612543532E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998359121954	WITHOUT_CLASSIFICATION	1.6408780459030362E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999571872151	WITHOUT_CLASSIFICATION	4.281278487547135E-8	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999635329743	WITHOUT_CLASSIFICATION	3.6467025816286806E-8	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999992278412656	WITHOUT_CLASSIFICATION	7.721587343479479E-7	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999469872365	WITHOUT_CLASSIFICATION	5.301276348203149E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999990609474	WITHOUT_CLASSIFICATION	9.390526368537866E-10	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999967429055153	WITHOUT_CLASSIFICATION	3.2570944845955552E-6	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999891709894	WITHOUT_CLASSIFICATION	1.0829010605806101E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999973863349312	WITHOUT_CLASSIFICATION	2.6136650687617833E-6	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999998506827512	WITHOUT_CLASSIFICATION	1.4931724883408945E-7	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998923738023079	WITHOUT_CLASSIFICATION	1.0762619769208214E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999964749725	WITHOUT_CLASSIFICATION	3.5250274969734448E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999999903955451	WITHOUT_CLASSIFICATION	9.604454969841004E-9	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999952563385	WITHOUT_CLASSIFICATION	4.743661464948239E-9	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999999443842633	WITHOUT_CLASSIFICATION	5.561573670065411E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999773993206	WITHOUT_CLASSIFICATION	2.260067938215918E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999691650397	WITHOUT_CLASSIFICATION	3.083496025496783E-8	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999938968909	WITHOUT_CLASSIFICATION	6.103109056683694E-9	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999989747531675	WITHOUT_CLASSIFICATION	1.0252468325848513E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999922358407	WITHOUT_CLASSIFICATION	7.764159305189091E-9	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999900169461	WITHOUT_CLASSIFICATION	9.983053950531661E-9	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998708786934	WITHOUT_CLASSIFICATION	1.2912130661548038E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999995066413	WITHOUT_CLASSIFICATION	4.933586836184721E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999983304517	WITHOUT_CLASSIFICATION	1.6695482951006795E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999937984363	WITHOUT_CLASSIFICATION	6.201563791585274E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999993034418487	WITHOUT_CLASSIFICATION	6.965581512115579E-7	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999888358689348	WITHOUT_CLASSIFICATION	1.1164131065260948E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999977014605219	WITHOUT_CLASSIFICATION	2.2985394780508495E-6	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999997861635306	WITHOUT_CLASSIFICATION	2.1383646944733948E-7	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.999999652494302	WITHOUT_CLASSIFICATION	3.475056980728606E-7	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.999999894404199	WITHOUT_CLASSIFICATION	1.0559580105414096E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999995597408832	WITHOUT_CLASSIFICATION	4.402591168619751E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999232245275	WITHOUT_CLASSIFICATION	7.677547251778905E-8	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999977653681	WITHOUT_CLASSIFICATION	2.234631871366906E-9	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999332593756	WITHOUT_CLASSIFICATION	6.674062438505876E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999209897532	WITHOUT_CLASSIFICATION	7.901024671424062E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999995356166685	WITHOUT_CLASSIFICATION	4.643833314677629E-7	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999998808177508	WITHOUT_CLASSIFICATION	1.1918224916639268E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999956302197	WITHOUT_CLASSIFICATION	4.3697803523867725E-9	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999945680542	WITHOUT_CLASSIFICATION	5.431945840588284E-9	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999982084235	WITHOUT_CLASSIFICATION	1.7915764977812698E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999982084235	WITHOUT_CLASSIFICATION	1.7915764977812698E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999978288400322	WITHOUT_CLASSIFICATION	2.1711599677908232E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999939132858	WITHOUT_CLASSIFICATION	6.086714190520719E-8	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996420317191	WITHOUT_CLASSIFICATION	3.5796828091313395E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999411059052	WITHOUT_CLASSIFICATION	5.889409495372474E-8	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999982608325383	WITHOUT_CLASSIFICATION	1.7391674617695017E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999982608325383	WITHOUT_CLASSIFICATION	1.7391674617695017E-6	TEST
}	WITHOUT_CLASSIFICATION	0.999931265245753	WITHOUT_CLASSIFICATION	6.873475424700444E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999999963763247	WITHOUT_CLASSIFICATION	3.623675302260846E-8	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999917519827	WITHOUT_CLASSIFICATION	8.24801729220433E-8	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999724207317	WITHOUT_CLASSIFICATION	2.7579268321658635E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999999485243476	WITHOUT_CLASSIFICATION	5.147565237765575E-8	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999963983005654	WITHOUT_CLASSIFICATION	3.6016994346766354E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999624434357	WITHOUT_CLASSIFICATION	3.755656433162795E-8	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999992852345309	WITHOUT_CLASSIFICATION	7.147654691540547E-7	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999997673895316	WITHOUT_CLASSIFICATION	2.3261046828305045E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997167639446	WITHOUT_CLASSIFICATION	2.8323605540977053E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9984725991092348	WITHOUT_CLASSIFICATION	0.0015274008907652163	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981236707137	WITHOUT_CLASSIFICATION	1.876329286303139E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981236707137	WITHOUT_CLASSIFICATION	1.876329286303139E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999879026983	WITHOUT_CLASSIFICATION	1.2097301653819093E-8	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999763960468271	WITHOUT_CLASSIFICATION	2.3603953172908028E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999990744026551	WITHOUT_CLASSIFICATION	9.255973449130897E-7	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999995132162771	WITHOUT_CLASSIFICATION	4.867837229463189E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999939501755736	WITHOUT_CLASSIFICATION	6.049824426437246E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999051700594	WITHOUT_CLASSIFICATION	9.482994062407433E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980572113554774	WITHOUT_CLASSIFICATION	0.001942788644522671	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998135636545	WITHOUT_CLASSIFICATION	1.8643634551055215E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999997146508677	WITHOUT_CLASSIFICATION	2.853491323785237E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999999037415717	WITHOUT_CLASSIFICATION	9.6258428322031E-8	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999909766002	WITHOUT_CLASSIFICATION	9.023399803717882E-8	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999973863349312	WITHOUT_CLASSIFICATION	2.6136650687617833E-6	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999701374152	WITHOUT_CLASSIFICATION	2.9862584853420384E-8	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999884178915056	WITHOUT_CLASSIFICATION	1.1582108494397033E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999913395498	WITHOUT_CLASSIFICATION	8.66045020520439E-9	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998505263085	WITHOUT_CLASSIFICATION	1.4947369150849569E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994981555549	WITHOUT_CLASSIFICATION	5.018444451513554E-7	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999996774720239	WITHOUT_CLASSIFICATION	3.225279761531025E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999977571222788	WITHOUT_CLASSIFICATION	2.2428777211766764E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998760653828	WITHOUT_CLASSIFICATION	1.2393461716116998E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999951449355	WITHOUT_CLASSIFICATION	4.855064417067454E-9	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999982991526385	WITHOUT_CLASSIFICATION	1.7008473615346165E-6	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999982991526385	WITHOUT_CLASSIFICATION	1.7008473615346165E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997973705113	WITHOUT_CLASSIFICATION	2.026294887932344E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999884719	WITHOUT_CLASSIFICATION	1.1527990427909804E-11	TEST
package	WITHOUT_CLASSIFICATION	0.999995264188783	WITHOUT_CLASSIFICATION	4.735811216955428E-6	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999691521315	WITHOUT_CLASSIFICATION	3.084786852432091E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999998705811378	WITHOUT_CLASSIFICATION	1.2941886220418452E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999954145894	WITHOUT_CLASSIFICATION	4.5854106735973945E-9	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997489741482	WITHOUT_CLASSIFICATION	2.5102585178256424E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999995250077	WITHOUT_CLASSIFICATION	4.74992256684124E-10	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997833718726	WITHOUT_CLASSIFICATION	2.1662812750969547E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999537400498	WITHOUT_CLASSIFICATION	4.625995020774462E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977104989031	WITHOUT_CLASSIFICATION	2.289501096938024E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999972733844623	WITHOUT_CLASSIFICATION	2.726615537661506E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999356569801	WITHOUT_CLASSIFICATION	6.434301986312407E-8	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999869118328	WITHOUT_CLASSIFICATION	1.3088167158878651E-8	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997265342327	WITHOUT_CLASSIFICATION	2.7346576717727047E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999889093021	WITHOUT_CLASSIFICATION	1.1090697778115778E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999885107491	WITHOUT_CLASSIFICATION	1.1489250982174486E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999963967199138	WITHOUT_CLASSIFICATION	3.6032800863313617E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999988005494469	WITHOUT_CLASSIFICATION	1.1994505531116216E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999990577445312	WITHOUT_CLASSIFICATION	9.422554687073931E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.99999901437371	WITHOUT_CLASSIFICATION	9.85626290030022E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999999891134011	WITHOUT_CLASSIFICATION	1.0886598911186068E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999911176637378	WITHOUT_CLASSIFICATION	8.882336262197292E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999992156377675	WITHOUT_CLASSIFICATION	7.843622325293797E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999861634	WITHOUT_CLASSIFICATION	1.3836599938497312E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999861634	WITHOUT_CLASSIFICATION	1.3836599938497312E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970502738647	WITHOUT_CLASSIFICATION	2.9497261354423925E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999997538435275	WITHOUT_CLASSIFICATION	2.461564724656552E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999745328595	WITHOUT_CLASSIFICATION	2.546714059290042E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999989589257	WITHOUT_CLASSIFICATION	1.0410743549166108E-9	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996067748427	WITHOUT_CLASSIFICATION	3.9322515734937736E-7	TEST
