test out the optimizer:	WITHOUT_CLASSIFICATION	0.999819525529958	WITHOUT_CLASSIFICATION	1.8047447004206356E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999542670910864	WITHOUT_CLASSIFICATION	4.573290891362377E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986352061593	WITHOUT_CLASSIFICATION	1.3647938407005267E-6	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999986243598251	WITHOUT_CLASSIFICATION	1.3756401748900273E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997934880318	WITHOUT_CLASSIFICATION	2.06511968101062E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997934880318	WITHOUT_CLASSIFICATION	2.06511968101062E-7	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997804781285	WITHOUT_CLASSIFICATION	2.1952187149068431E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999313853201	WITHOUT_CLASSIFICATION	6.861467991644508E-8	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999998765114644	WITHOUT_CLASSIFICATION	1.2348853560105897E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999987309671063	WITHOUT_CLASSIFICATION	1.2690328936176215E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999934791351719	WITHOUT_CLASSIFICATION	6.5208648280448805E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999934791351719	WITHOUT_CLASSIFICATION	6.5208648280448805E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999244988892115	WITHOUT_CLASSIFICATION	7.550111078850555E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999999952962479	WITHOUT_CLASSIFICATION	4.703752096998781E-8	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.999999626419758	WITHOUT_CLASSIFICATION	3.7358024197578186E-7	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999984621645363	WITHOUT_CLASSIFICATION	1.5378354637772124E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999415700029	WITHOUT_CLASSIFICATION	5.842999716775924E-8	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998903657263631	WITHOUT_CLASSIFICATION	1.0963427363685329E-4	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.999978016258453	WITHOUT_CLASSIFICATION	2.1983741547061345E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997203334808663	WITHOUT_CLASSIFICATION	2.796665191336615E-4	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999711264206054	WITHOUT_CLASSIFICATION	2.887357939458829E-4	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999992589658796	WITHOUT_CLASSIFICATION	7.4103412051484E-7	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999705095073232	WITHOUT_CLASSIFICATION	2.9490492676809777E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999393770693668	WITHOUT_CLASSIFICATION	6.06229306333436E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999661813351	WITHOUT_CLASSIFICATION	3.381866489852046E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999452223562959	WITHOUT_CLASSIFICATION	5.477764370413317E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999452223562959	WITHOUT_CLASSIFICATION	5.477764370413317E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999988123502316	WITHOUT_CLASSIFICATION	1.187649768431646E-6	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999117389647794	WITHOUT_CLASSIFICATION	8.826103522057826E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999819819803	WITHOUT_CLASSIFICATION	1.8018019816523796E-8	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999682269793	WITHOUT_CLASSIFICATION	3.1773020614625744E-8	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.999995483276009	WITHOUT_CLASSIFICATION	4.516723990938282E-6	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999995616125871	WITHOUT_CLASSIFICATION	4.3838741287429675E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999975049718439	WITHOUT_CLASSIFICATION	2.4950281560889574E-6	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999407027828	WITHOUT_CLASSIFICATION	5.9297217315169754E-8	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999334884997	WITHOUT_CLASSIFICATION	6.651150035160173E-8	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999974918113659	WITHOUT_CLASSIFICATION	2.5081886342087907E-6	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998468603419	WITHOUT_CLASSIFICATION	1.5313965812188265E-7	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999946413691458	WITHOUT_CLASSIFICATION	5.358630854078426E-6	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999610707527	WITHOUT_CLASSIFICATION	3.892924727261531E-8	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999354543154	WITHOUT_CLASSIFICATION	6.454568457246726E-8	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999996664175163	WITHOUT_CLASSIFICATION	3.335824837890306E-7	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956296827018	WITHOUT_CLASSIFICATION	4.37031729816442E-6	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804299331354	WITHOUT_CLASSIFICATION	1.9570066864584793E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998841934303	WITHOUT_CLASSIFICATION	1.158065696207402E-7	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999997905722305	WITHOUT_CLASSIFICATION	2.0942776939682657E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999962617733453	WITHOUT_CLASSIFICATION	3.738226654707165E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999858478561	WITHOUT_CLASSIFICATION	1.4152143918894878E-8	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997315821981	WITHOUT_CLASSIFICATION	2.684178018440488E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999962617733453	WITHOUT_CLASSIFICATION	3.738226654707165E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997315821981	WITHOUT_CLASSIFICATION	2.684178018440488E-7	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999997466694933	WITHOUT_CLASSIFICATION	2.533305065805486E-7	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9968140902106921	WITHOUT_CLASSIFICATION	0.003185909789307831	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999997838016985	WITHOUT_CLASSIFICATION	2.1619830149519988E-6	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999998726472239	WITHOUT_CLASSIFICATION	1.2735277610476784E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999917215648562	WITHOUT_CLASSIFICATION	8.278435143753491E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999960462244663	WITHOUT_CLASSIFICATION	3.953775533797436E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999235165254853	WITHOUT_CLASSIFICATION	7.648347451481024E-5	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999984667045402	WITHOUT_CLASSIFICATION	1.533295459880835E-6	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999995291792084	WITHOUT_CLASSIFICATION	4.708207916738374E-7	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999782274545689	WITHOUT_CLASSIFICATION	2.1772545431172942E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999996364687526	WITHOUT_CLASSIFICATION	3.635312475067452E-7	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999997315821981	WITHOUT_CLASSIFICATION	2.684178018440488E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999306888138	WITHOUT_CLASSIFICATION	6.931118620894944E-8	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999999854669407	WITHOUT_CLASSIFICATION	1.4533059305785452E-7	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999999576389088	WITHOUT_CLASSIFICATION	4.2361091277720356E-8	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999941029457655	WITHOUT_CLASSIFICATION	5.897054234549194E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999328649821	WITHOUT_CLASSIFICATION	6.713501788400915E-8	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999002527741	WITHOUT_CLASSIFICATION	9.974722588271313E-8	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993961185506	WITHOUT_CLASSIFICATION	6.038814494586252E-7	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996821237347	WITHOUT_CLASSIFICATION	3.178762652837419E-7	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999986658702777	WITHOUT_CLASSIFICATION	1.3341297222863034E-6	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999971632943	WITHOUT_CLASSIFICATION	2.836705705640325E-8	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999816941266	WITHOUT_CLASSIFICATION	1.8305873392200568E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999914549293218	WITHOUT_CLASSIFICATION	8.54507067817527E-6	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999975249592539	WITHOUT_CLASSIFICATION	2.4750407461764177E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999615681573	WITHOUT_CLASSIFICATION	3.843184277292811E-8	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999944335274	WITHOUT_CLASSIFICATION	5.5664726449798815E-9	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999978275557667	WITHOUT_CLASSIFICATION	2.1724442332865135E-6	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999594794131	WITHOUT_CLASSIFICATION	4.052058690057878E-7	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999989874146873	WITHOUT_CLASSIFICATION	1.0125853127109416E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999990511195174	WITHOUT_CLASSIFICATION	9.48880482723547E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999806831644	WITHOUT_CLASSIFICATION	1.931683561881076E-8	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999999715692493	WITHOUT_CLASSIFICATION	2.8430750696105913E-7	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999873568522	WITHOUT_CLASSIFICATION	1.2643147838735459E-8	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999992792268855	WITHOUT_CLASSIFICATION	7.20773114442428E-7	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999988164893895	WITHOUT_CLASSIFICATION	1.1835106105093852E-6	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999873568522	WITHOUT_CLASSIFICATION	1.2643147838735459E-8	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998743589917	WITHOUT_CLASSIFICATION	1.2564100832205517E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996754880548	WITHOUT_CLASSIFICATION	3.2451194513731246E-7	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999962617733453	WITHOUT_CLASSIFICATION	3.738226654707165E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999997793523252	WITHOUT_CLASSIFICATION	2.206476747952506E-7	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999999266762758	WITHOUT_CLASSIFICATION	7.332372417393306E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999549672209	WITHOUT_CLASSIFICATION	4.503277905754263E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999549672209	WITHOUT_CLASSIFICATION	4.503277905754263E-8	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999998767979295	WITHOUT_CLASSIFICATION	1.2320207049558188E-6	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999953624173433	WITHOUT_CLASSIFICATION	4.637582656729382E-6	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999116415063	WITHOUT_CLASSIFICATION	8.835849365490879E-8	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999852041933	WITHOUT_CLASSIFICATION	1.4795806725527365E-8	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997117093252	WITHOUT_CLASSIFICATION	2.882906747786029E-7	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998687034315	WITHOUT_CLASSIFICATION	1.3129656858334027E-7	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999989751588629	WITHOUT_CLASSIFICATION	1.0248411369732096E-6	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999998265597116	WITHOUT_CLASSIFICATION	1.7344028835474447E-7	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999991879678742	WITHOUT_CLASSIFICATION	8.120321258034244E-7	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996289197929	WITHOUT_CLASSIFICATION	3.710802071338207E-7	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999988250526562	WITHOUT_CLASSIFICATION	1.1749473437654178E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999988250526562	WITHOUT_CLASSIFICATION	1.1749473437654178E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999480938883	WITHOUT_CLASSIFICATION	5.190611170560847E-8	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999864419119	WITHOUT_CLASSIFICATION	1.355808809325394E-7	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999979434194044	WITHOUT_CLASSIFICATION	2.0565805955642264E-6	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999988250526562	WITHOUT_CLASSIFICATION	1.1749473437654178E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999480938883	WITHOUT_CLASSIFICATION	5.190611170560847E-8	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999480938883	WITHOUT_CLASSIFICATION	5.190611170560847E-8	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999711122468681	WITHOUT_CLASSIFICATION	2.8887753131880163E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999982531730235	WITHOUT_CLASSIFICATION	1.746826976395534E-6	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995517478224	WITHOUT_CLASSIFICATION	4.482521775605464E-7	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999990881313542	WITHOUT_CLASSIFICATION	9.11868645783178E-7	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99999805240117	WITHOUT_CLASSIFICATION	1.9475988299706973E-6	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99999805240117	WITHOUT_CLASSIFICATION	1.9475988299706973E-6	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999994985913417	WITHOUT_CLASSIFICATION	5.014086582710931E-7	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993441930324	WITHOUT_CLASSIFICATION	6.558069676379342E-7	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999990645560095	WITHOUT_CLASSIFICATION	9.354439903838732E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990469548634	WITHOUT_CLASSIFICATION	9.530451365581075E-7	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990469548634	WITHOUT_CLASSIFICATION	9.530451365581075E-7	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997887977514	WITHOUT_CLASSIFICATION	2.1120224861004508E-7	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999966391992188	WITHOUT_CLASSIFICATION	3.360800781173991E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999997687852376	WITHOUT_CLASSIFICATION	2.312147624052867E-7	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999547565839	WITHOUT_CLASSIFICATION	4.5243416078603047E-8	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999953606133648	WITHOUT_CLASSIFICATION	4.639386635186532E-6	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999591354978	WITHOUT_CLASSIFICATION	4.0864502197853904E-7	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999993406486832	WITHOUT_CLASSIFICATION	6.593513168067693E-7	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999999855609324	WITHOUT_CLASSIFICATION	1.4439067596438134E-7	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999976466069597	WITHOUT_CLASSIFICATION	2.353393040216245E-6	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999997687852376	WITHOUT_CLASSIFICATION	2.312147624052867E-7	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999971536411625	WITHOUT_CLASSIFICATION	2.846358837598163E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999979177736527	WITHOUT_CLASSIFICATION	2.0822263472988525E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999979177736527	WITHOUT_CLASSIFICATION	2.0822263472988525E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999995681055588	WITHOUT_CLASSIFICATION	4.318944413154484E-7	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999844815642688	WITHOUT_CLASSIFICATION	1.5518435731208964E-5	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999998791912789	WITHOUT_CLASSIFICATION	1.2080872110324305E-7	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991012521777	WITHOUT_CLASSIFICATION	8.987478222155722E-7	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999996842880849	WITHOUT_CLASSIFICATION	3.157119150983496E-6	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999987861153723	WITHOUT_CLASSIFICATION	1.213884627670471E-6	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999983534646267	WITHOUT_CLASSIFICATION	1.6465353733632394E-6	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999992849519108	WITHOUT_CLASSIFICATION	7.150480890935436E-7	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999926196657	WITHOUT_CLASSIFICATION	7.380334357326817E-9	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999632983368	WITHOUT_CLASSIFICATION	3.670166318955487E-8	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999632983368	WITHOUT_CLASSIFICATION	3.670166318955487E-8	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999819525529958	WITHOUT_CLASSIFICATION	1.8047447004206356E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999351867443	WITHOUT_CLASSIFICATION	6.481325570083299E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999971583723568	WITHOUT_CLASSIFICATION	2.841627643246304E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999970241677495	WITHOUT_CLASSIFICATION	2.975832250562446E-6	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999989200296966	WITHOUT_CLASSIFICATION	1.0799703034360185E-6	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999982885816979	WITHOUT_CLASSIFICATION	1.7114183021295682E-6	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999975538660857	WITHOUT_CLASSIFICATION	2.4461339142768364E-6	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999991898871352	WITHOUT_CLASSIFICATION	8.101128649207379E-7	TEST
new	WITHOUT_CLASSIFICATION	0.999927610617179	WITHOUT_CLASSIFICATION	7.238938282087464E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999384992922696	WITHOUT_CLASSIFICATION	6.150070773036244E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999983001073885	WITHOUT_CLASSIFICATION	1.699892611386391E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986352061593	WITHOUT_CLASSIFICATION	1.3647938407005267E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999964123247964	WITHOUT_CLASSIFICATION	3.5876752037201986E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999964123247964	WITHOUT_CLASSIFICATION	3.5876752037201986E-6	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999986707668455	WITHOUT_CLASSIFICATION	1.329233154592897E-6	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999890658534345	WITHOUT_CLASSIFICATION	1.093414656545142E-5	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999999099960575	WITHOUT_CLASSIFICATION	9.000394252668324E-8	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.999997091195245	WITHOUT_CLASSIFICATION	2.908804755077106E-6	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999987918908806	WITHOUT_CLASSIFICATION	1.208109119365698E-6	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998630094314	WITHOUT_CLASSIFICATION	1.3699056858556932E-7	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997934880318	WITHOUT_CLASSIFICATION	2.06511968101062E-7	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999993305060249	WITHOUT_CLASSIFICATION	6.694939751269558E-7	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999962431815563	WITHOUT_CLASSIFICATION	3.7568184437991047E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999990847535516	WITHOUT_CLASSIFICATION	9.152464483651387E-7	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999994169285845	WITHOUT_CLASSIFICATION	5.830714155442027E-7	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999964925915973	WITHOUT_CLASSIFICATION	3.5074084026298624E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999793873488139	WITHOUT_CLASSIFICATION	2.0612651186114514E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999974746969937	WITHOUT_CLASSIFICATION	2.5253030063411725E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999996960427171	WITHOUT_CLASSIFICATION	3.0395728294428516E-7	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996547252772	WITHOUT_CLASSIFICATION	3.4527472274192907E-7	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998121103717	WITHOUT_CLASSIFICATION	1.8788962827041108E-7	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996076838112	WITHOUT_CLASSIFICATION	3.9231618875196805E-7	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999995766113797	WITHOUT_CLASSIFICATION	4.2338862017368353E-7	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999811087809025	WITHOUT_CLASSIFICATION	1.889121909744041E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999384992922696	WITHOUT_CLASSIFICATION	6.150070773036244E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999964123247964	WITHOUT_CLASSIFICATION	3.5876752037201986E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999974746969937	WITHOUT_CLASSIFICATION	2.5253030063411725E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997804781285	WITHOUT_CLASSIFICATION	2.1952187149068431E-7	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999996187788679	WITHOUT_CLASSIFICATION	3.81221132090755E-7	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999991258697294	WITHOUT_CLASSIFICATION	8.741302706097703E-7	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999992709980726	WITHOUT_CLASSIFICATION	7.290019274104639E-7	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999960852930302	WITHOUT_CLASSIFICATION	3.9147069697088905E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995994284604	WITHOUT_CLASSIFICATION	4.00571539623094E-7	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999804518374633	WITHOUT_CLASSIFICATION	1.954816253674163E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999997575998176	WITHOUT_CLASSIFICATION	2.424001822792973E-7	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999894529012979	WITHOUT_CLASSIFICATION	1.0547098702081443E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9999896699863875	WITHOUT_CLASSIFICATION	1.0330013612572174E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999861779867745	WITHOUT_CLASSIFICATION	1.3822013225505224E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999861779867745	WITHOUT_CLASSIFICATION	1.3822013225505224E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999058510686	WITHOUT_CLASSIFICATION	9.414893146564065E-8	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999999407499649	WITHOUT_CLASSIFICATION	5.925003516464575E-8	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999901242808745	WITHOUT_CLASSIFICATION	9.875719125553976E-6	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999919153699074	WITHOUT_CLASSIFICATION	8.08463009265893E-6	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999753081968	WITHOUT_CLASSIFICATION	2.469180320291191E-8	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999560430097	WITHOUT_CLASSIFICATION	4.3956990311803976E-8	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999992477000914	WITHOUT_CLASSIFICATION	7.522999085907339E-7	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999313853201	WITHOUT_CLASSIFICATION	6.861467991644508E-8	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999957489732628	WITHOUT_CLASSIFICATION	4.251026737120411E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999998773997752	WITHOUT_CLASSIFICATION	1.2260022481509935E-7	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999998773997752	WITHOUT_CLASSIFICATION	1.2260022481509935E-7	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996615494186	WITHOUT_CLASSIFICATION	3.384505813663642E-7	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.999999348800259	WITHOUT_CLASSIFICATION	6.511997410749654E-7	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999996607696647	WITHOUT_CLASSIFICATION	3.3923033523181926E-7	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999965658103	WITHOUT_CLASSIFICATION	3.4341896987224005E-8	TEST
int	WITHOUT_CLASSIFICATION	0.9999837409277588	WITHOUT_CLASSIFICATION	1.6259072241200894E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999977247162372	WITHOUT_CLASSIFICATION	2.2752837628484753E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999384992922696	WITHOUT_CLASSIFICATION	6.150070773036244E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999986352061593	WITHOUT_CLASSIFICATION	1.3647938407005267E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999974746969937	WITHOUT_CLASSIFICATION	2.5253030063411725E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999974746969937	WITHOUT_CLASSIFICATION	2.5253030063411725E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998894188674	WITHOUT_CLASSIFICATION	1.1058113256000094E-7	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998894188674	WITHOUT_CLASSIFICATION	1.1058113256000094E-7	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995487286643	WITHOUT_CLASSIFICATION	4.5127133581078106E-7	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999817550456217	WITHOUT_CLASSIFICATION	1.824495437820346E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999817550456217	WITHOUT_CLASSIFICATION	1.824495437820346E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999987001593295	WITHOUT_CLASSIFICATION	1.2998406704721052E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999996996716173	WITHOUT_CLASSIFICATION	3.003283826654976E-7	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999974337564494	WITHOUT_CLASSIFICATION	2.5662435504635658E-6	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999987409332365	WITHOUT_CLASSIFICATION	1.2590667634867079E-6	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999997899074337	WITHOUT_CLASSIFICATION	2.1009256631737654E-7	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999987309671063	WITHOUT_CLASSIFICATION	1.2690328936176215E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999987309671063	WITHOUT_CLASSIFICATION	1.2690328936176215E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999983604982637	WITHOUT_CLASSIFICATION	1.6395017362546127E-6	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999983990957594	WITHOUT_CLASSIFICATION	1.6009042405711197E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999826525232165	WITHOUT_CLASSIFICATION	1.734747678359492E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999673882370874	WITHOUT_CLASSIFICATION	3.261176291261208E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999780156045645	WITHOUT_CLASSIFICATION	2.198439543556102E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999560909877017	WITHOUT_CLASSIFICATION	4.3909012298405806E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999934791351719	WITHOUT_CLASSIFICATION	6.5208648280448805E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999860468546465	WITHOUT_CLASSIFICATION	1.3953145353404163E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999860468546465	WITHOUT_CLASSIFICATION	1.3953145353404163E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999244988892115	WITHOUT_CLASSIFICATION	7.550111078850555E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999244988892115	WITHOUT_CLASSIFICATION	7.550111078850555E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999986230369646	WITHOUT_CLASSIFICATION	1.3769630353223314E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999986230369646	WITHOUT_CLASSIFICATION	1.3769630353223314E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998886664458	WITHOUT_CLASSIFICATION	1.1133355419483195E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998886664458	WITHOUT_CLASSIFICATION	1.1133355419483195E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999987309671063	WITHOUT_CLASSIFICATION	1.2690328936176215E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999934791351719	WITHOUT_CLASSIFICATION	6.5208648280448805E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999860468546465	WITHOUT_CLASSIFICATION	1.3953145353404163E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999860468546465	WITHOUT_CLASSIFICATION	1.3953145353404163E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999244988892115	WITHOUT_CLASSIFICATION	7.550111078850555E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999986230369646	WITHOUT_CLASSIFICATION	1.3769630353223314E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999986230369646	WITHOUT_CLASSIFICATION	1.3769630353223314E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999998886664458	WITHOUT_CLASSIFICATION	1.1133355419483195E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999994707595388	WITHOUT_CLASSIFICATION	5.292404613371004E-7	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999999749985598	WITHOUT_CLASSIFICATION	2.500144019373454E-7	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999990799451903	WITHOUT_CLASSIFICATION	9.200548096530272E-7	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999936427274925	WITHOUT_CLASSIFICATION	6.3572725075549425E-6	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999997196604309	WITHOUT_CLASSIFICATION	2.803395691904816E-7	TEST
noop	WITHOUT_CLASSIFICATION	0.9999587855303655	WITHOUT_CLASSIFICATION	4.121446963436078E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999634166357	WITHOUT_CLASSIFICATION	3.6583364235359044E-8	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999993384328048	WITHOUT_CLASSIFICATION	6.615671953299359E-7	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999999745211167	WITHOUT_CLASSIFICATION	2.5478883301469874E-7	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999998355459025	WITHOUT_CLASSIFICATION	1.6445409750568333E-6	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999993731048968	WITHOUT_CLASSIFICATION	6.268951032331863E-7	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999998813796751	WITHOUT_CLASSIFICATION	1.1862032490024462E-6	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999998767979295	WITHOUT_CLASSIFICATION	1.2320207049558188E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999587855303655	WITHOUT_CLASSIFICATION	4.121446963436078E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999587855303655	WITHOUT_CLASSIFICATION	4.121446963436078E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999587855303655	WITHOUT_CLASSIFICATION	4.121446963436078E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997574869092	WITHOUT_CLASSIFICATION	2.425130907593259E-7	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999987624674354	WITHOUT_CLASSIFICATION	1.237532564641667E-6	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999987624674354	WITHOUT_CLASSIFICATION	1.237532564641667E-6	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999993548055043	WITHOUT_CLASSIFICATION	6.451944957372684E-7	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995052222509	WITHOUT_CLASSIFICATION	4.947777491801768E-7	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999267579092	WITHOUT_CLASSIFICATION	7.324209085727357E-8	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998921152041	WITHOUT_CLASSIFICATION	1.078847958671541E-7	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999998921152041	WITHOUT_CLASSIFICATION	1.078847958671541E-7	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999415700029	WITHOUT_CLASSIFICATION	5.842999716775924E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999625714163	WITHOUT_CLASSIFICATION	3.742858363564436E-8	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999625714163	WITHOUT_CLASSIFICATION	3.742858363564436E-8	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999933249833427	WITHOUT_CLASSIFICATION	6.675016657303291E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999989014590959	WITHOUT_CLASSIFICATION	1.0985409041426972E-6	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999991563329071	WITHOUT_CLASSIFICATION	8.43667092871986E-7	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9996744915047496	WITHOUT_CLASSIFICATION	3.2550849525033994E-4	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999367839302831	WITHOUT_CLASSIFICATION	6.321606971693898E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9998882846465635	WITHOUT_CLASSIFICATION	1.1171535343647873E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998903657263631	WITHOUT_CLASSIFICATION	1.0963427363685329E-4	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997930443793088	WITHOUT_CLASSIFICATION	2.0695562069103686E-4	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9943200874540729	WITHOUT_CLASSIFICATION	0.005679912545927195	TEST
ID	WITHOUT_CLASSIFICATION	0.9997507363086531	WITHOUT_CLASSIFICATION	2.492636913468711E-4	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999583274312638	WITHOUT_CLASSIFICATION	4.167256873615577E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999711264206054	WITHOUT_CLASSIFICATION	2.887357939458829E-4	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997665206743	WITHOUT_CLASSIFICATION	2.3347932554593622E-7	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999687349988908	WITHOUT_CLASSIFICATION	3.1265001109141655E-5	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999741637489413	WITHOUT_CLASSIFICATION	2.58362510586996E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999711264206054	WITHOUT_CLASSIFICATION	2.887357939458829E-4	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999999978590262	WITHOUT_CLASSIFICATION	2.1409737994752257E-8	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999968348517	WITHOUT_CLASSIFICATION	3.165148291716117E-8	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999673241732725	WITHOUT_CLASSIFICATION	3.267582672757105E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999086155183916	WITHOUT_CLASSIFICATION	9.138448160848527E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999923085735238	WITHOUT_CLASSIFICATION	7.69142647617316E-6	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999822789452533	WITHOUT_CLASSIFICATION	1.7721054746701647E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999458645656738	WITHOUT_CLASSIFICATION	5.4135434326185534E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999393770693668	WITHOUT_CLASSIFICATION	6.06229306333436E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872824447007	WITHOUT_CLASSIFICATION	1.271755529920144E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999661813351	WITHOUT_CLASSIFICATION	3.381866489852046E-7	TEST
properties	WITHOUT_CLASSIFICATION	0.9999940050687349	WITHOUT_CLASSIFICATION	5.994931265122488E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999997172492009	WITHOUT_CLASSIFICATION	2.82750799113187E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998199553911401	WITHOUT_CLASSIFICATION	1.800446088598432E-4	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9998903657263631	WITHOUT_CLASSIFICATION	1.0963427363685329E-4	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872824447007	WITHOUT_CLASSIFICATION	1.271755529920144E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999940050687349	WITHOUT_CLASSIFICATION	5.994931265122488E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998199553911401	WITHOUT_CLASSIFICATION	1.800446088598432E-4	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997093956489	WITHOUT_CLASSIFICATION	2.906043510910893E-7	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999177241382755	WITHOUT_CLASSIFICATION	8.227586172450394E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999509877662	WITHOUT_CLASSIFICATION	4.9012233747552E-8	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999452223562959	WITHOUT_CLASSIFICATION	5.477764370413317E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999450550915293	WITHOUT_CLASSIFICATION	5.494490847064715E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999989880718709	WITHOUT_CLASSIFICATION	1.0119281290777406E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999981982527592	WITHOUT_CLASSIFICATION	1.8017472408206499E-6	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999974123172103	WITHOUT_CLASSIFICATION	2.5876827896989296E-6	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999856697365864	WITHOUT_CLASSIFICATION	1.4330263413548596E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998667287101	WITHOUT_CLASSIFICATION	1.332712898066151E-7	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987325231322	WITHOUT_CLASSIFICATION	1.2674768678010274E-6	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999982383308577	WITHOUT_CLASSIFICATION	1.7616691422458804E-6	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999801854729	WITHOUT_CLASSIFICATION	1.981452721121065E-8	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997147651621	WITHOUT_CLASSIFICATION	2.852348379175862E-7	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.999914173209834	WITHOUT_CLASSIFICATION	8.582679016607777E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999729269381025	WITHOUT_CLASSIFICATION	2.7073061897508508E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999117389647794	WITHOUT_CLASSIFICATION	8.826103522057826E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999971898569568	WITHOUT_CLASSIFICATION	2.810143043152315E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999023265662655	WITHOUT_CLASSIFICATION	9.767343373439165E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999872824447007	WITHOUT_CLASSIFICATION	1.271755529920144E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999990019906675	WITHOUT_CLASSIFICATION	9.980093325529435E-7	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999347965145	WITHOUT_CLASSIFICATION	6.520348549299852E-8	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999999374641586	WITHOUT_CLASSIFICATION	6.253584144737795E-8	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9980484661838136	WITHOUT_CLASSIFICATION	0.0019515338161864093	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999983752200216	WITHOUT_CLASSIFICATION	1.6247799785427E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999991662452246	WITHOUT_CLASSIFICATION	8.337547755313895E-7	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999999061774	WITHOUT_CLASSIFICATION	9.382262429485579E-11	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999827133683	WITHOUT_CLASSIFICATION	1.7286631672291952E-8	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999973159727061	WITHOUT_CLASSIFICATION	2.6840272939488123E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999112892869729	WITHOUT_CLASSIFICATION	8.871071302711906E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.99997516103257	WITHOUT_CLASSIFICATION	2.4838967430053952E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999707213467631	WITHOUT_CLASSIFICATION	2.927865323684077E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999995656453843	WITHOUT_CLASSIFICATION	4.3435461582091647E-7	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999682269793	WITHOUT_CLASSIFICATION	3.1773020614625744E-8	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999999354769895	WITHOUT_CLASSIFICATION	6.452301043729588E-8	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999235756705	WITHOUT_CLASSIFICATION	7.642432952938123E-8	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999941118970546	WITHOUT_CLASSIFICATION	5.888102945465984E-6	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999997965689119	WITHOUT_CLASSIFICATION	2.0343108817724622E-7	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.999999886650525	WITHOUT_CLASSIFICATION	1.1334947493183811E-7	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999995053370671	WITHOUT_CLASSIFICATION	4.946629329096775E-6	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999994100004346	WITHOUT_CLASSIFICATION	5.899995653326555E-7	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999980566550752	WITHOUT_CLASSIFICATION	1.943344924684056E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999298382584	WITHOUT_CLASSIFICATION	7.016174167972275E-8	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999990821277855	WITHOUT_CLASSIFICATION	9.178722144778193E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999996196882311	WITHOUT_CLASSIFICATION	3.80311768913963E-7	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999996196882311	WITHOUT_CLASSIFICATION	3.80311768913963E-7	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999962735972013	WITHOUT_CLASSIFICATION	3.7264027986944097E-6	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999998832512401	WITHOUT_CLASSIFICATION	1.1674875981955742E-7	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999590406067	WITHOUT_CLASSIFICATION	4.095939340253156E-8	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999996209116235	WITHOUT_CLASSIFICATION	3.7908837646149973E-7	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999990768141888	WITHOUT_CLASSIFICATION	9.231858111949853E-7	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997495952444	WITHOUT_CLASSIFICATION	2.5040475553172203E-7	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999997591182923	WITHOUT_CLASSIFICATION	2.408817076119863E-7	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999958866122189	WITHOUT_CLASSIFICATION	4.113387781087294E-6	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999945925080169	WITHOUT_CLASSIFICATION	5.407491983054131E-6	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999992390475612	WITHOUT_CLASSIFICATION	7.609524388716397E-7	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999892282687335	WITHOUT_CLASSIFICATION	1.0771731266534941E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999960885281541	WITHOUT_CLASSIFICATION	3.911471845911253E-6	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999992777136462	WITHOUT_CLASSIFICATION	7.222863537239438E-7	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999998129657885	WITHOUT_CLASSIFICATION	1.8703421153872365E-7	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999992354139681	WITHOUT_CLASSIFICATION	7.645860319836231E-7	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999955557717545	WITHOUT_CLASSIFICATION	4.44422824551706E-6	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999998917132222	WITHOUT_CLASSIFICATION	1.0828677777343315E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999995232240969	WITHOUT_CLASSIFICATION	4.7677590318832467E-7	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987238036087	WITHOUT_CLASSIFICATION	1.276196391314493E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999290406404	WITHOUT_CLASSIFICATION	7.095935961337065E-8	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996084214079	WITHOUT_CLASSIFICATION	3.915785920402658E-7	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999995369318676	WITHOUT_CLASSIFICATION	4.6306813245749645E-7	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999999567697656	WITHOUT_CLASSIFICATION	4.323023440605707E-7	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999994996725001	WITHOUT_CLASSIFICATION	5.003274999547368E-7	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999996244042514	WITHOUT_CLASSIFICATION	3.7559574862439614E-7	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999986348694517	WITHOUT_CLASSIFICATION	1.3651305482162582E-6	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999978282899841	WITHOUT_CLASSIFICATION	2.1717100158879246E-6	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999996344860177	WITHOUT_CLASSIFICATION	3.655139822561378E-7	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999050677144	WITHOUT_CLASSIFICATION	9.493228552093563E-8	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999995819703569	WITHOUT_CLASSIFICATION	4.180296431095314E-6	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999290406404	WITHOUT_CLASSIFICATION	7.095935961337065E-8	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999988430215813	WITHOUT_CLASSIFICATION	1.1569784187070715E-6	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999995100758452	WITHOUT_CLASSIFICATION	4.899241548359293E-7	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999995024817008	WITHOUT_CLASSIFICATION	4.975182992181107E-7	TEST
found	WITHOUT_CLASSIFICATION	0.9999865919715407	WITHOUT_CLASSIFICATION	1.3408028459235563E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999865919715407	WITHOUT_CLASSIFICATION	1.3408028459235563E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999983461120033	WITHOUT_CLASSIFICATION	1.6538879967311288E-6	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999991751745967	WITHOUT_CLASSIFICATION	8.248254033426642E-7	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999903071293418	WITHOUT_CLASSIFICATION	9.692870658165325E-6	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999903071293418	WITHOUT_CLASSIFICATION	9.692870658165325E-6	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999298382584	WITHOUT_CLASSIFICATION	7.016174167972275E-8	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999971289886	WITHOUT_CLASSIFICATION	2.871011402999034E-8	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999989599211592	WITHOUT_CLASSIFICATION	1.0400788408862282E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999992378018446	WITHOUT_CLASSIFICATION	7.621981552722972E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999989599211592	WITHOUT_CLASSIFICATION	1.0400788408862282E-6	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999992378018446	WITHOUT_CLASSIFICATION	7.621981552722972E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993395803497	WITHOUT_CLASSIFICATION	6.604196502395841E-7	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999853571291282	WITHOUT_CLASSIFICATION	1.4642870871894914E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999483548123	WITHOUT_CLASSIFICATION	5.164518771350027E-8	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999997574618926	WITHOUT_CLASSIFICATION	2.425381073137678E-7	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999978737386868	WITHOUT_CLASSIFICATION	2.1262613132426195E-6	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999997313235892	WITHOUT_CLASSIFICATION	2.686764107883608E-6	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994462844072	WITHOUT_CLASSIFICATION	5.537155928485994E-7	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994462844072	WITHOUT_CLASSIFICATION	5.537155928485994E-7	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999995708610653	WITHOUT_CLASSIFICATION	4.2913893467273034E-7	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999460498562	WITHOUT_CLASSIFICATION	5.395014385588198E-8	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999989225648872	WITHOUT_CLASSIFICATION	1.0774351128036612E-6	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999980386702	WITHOUT_CLASSIFICATION	1.9613298350351255E-9	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999992489466183	WITHOUT_CLASSIFICATION	7.510533817088914E-7	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999909155370866	WITHOUT_CLASSIFICATION	9.084462913375162E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999943388615656	WITHOUT_CLASSIFICATION	5.661138434377992E-6	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999822224597015	WITHOUT_CLASSIFICATION	1.7777540298483243E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999822224597015	WITHOUT_CLASSIFICATION	1.7777540298483243E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999853377972	WITHOUT_CLASSIFICATION	1.4662202841708765E-8	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993395803497	WITHOUT_CLASSIFICATION	6.604196502395841E-7	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999951242002764	WITHOUT_CLASSIFICATION	4.87579972363147E-6	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999749047287488	WITHOUT_CLASSIFICATION	2.509527125109456E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999990134462964	WITHOUT_CLASSIFICATION	9.865537035789192E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999957970484327	WITHOUT_CLASSIFICATION	4.202951567373482E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999866893539056	WITHOUT_CLASSIFICATION	1.3310646094475815E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993395803497	WITHOUT_CLASSIFICATION	6.604196502395841E-7	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999957970484327	WITHOUT_CLASSIFICATION	4.202951567373482E-6	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999866893539056	WITHOUT_CLASSIFICATION	1.3310646094475815E-5	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999523041266	WITHOUT_CLASSIFICATION	4.769587332931423E-8	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999964599889466	WITHOUT_CLASSIFICATION	3.5400110533575218E-6	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999914644346	WITHOUT_CLASSIFICATION	8.535565280646903E-9	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993395803497	WITHOUT_CLASSIFICATION	6.604196502395841E-7	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999993395803497	WITHOUT_CLASSIFICATION	6.604196502395841E-7	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999953440610334	WITHOUT_CLASSIFICATION	4.655938966645046E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999970302455548	WITHOUT_CLASSIFICATION	2.96975444530861E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999997422008131	WITHOUT_CLASSIFICATION	2.577991869046309E-7	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999354543154	WITHOUT_CLASSIFICATION	6.454568457246726E-8	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999999114092505	WITHOUT_CLASSIFICATION	8.859074955650821E-8	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999989843596758	WITHOUT_CLASSIFICATION	1.0156403241453477E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999986359349052	WITHOUT_CLASSIFICATION	1.3640650947960515E-6	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997515907613	WITHOUT_CLASSIFICATION	2.484092387783522E-7	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999976386764	WITHOUT_CLASSIFICATION	2.3613236022934387E-8	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999913385036366	WITHOUT_CLASSIFICATION	8.661496363352392E-6	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999997146658073	WITHOUT_CLASSIFICATION	2.8533419273959194E-7	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999998669557839	WITHOUT_CLASSIFICATION	1.3304421609426814E-6	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999991170165871	WITHOUT_CLASSIFICATION	8.82983412876313E-7	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999999558823936	WITHOUT_CLASSIFICATION	4.4117606400426253E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987748986162	WITHOUT_CLASSIFICATION	1.2251013838130125E-6	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999858218600758	WITHOUT_CLASSIFICATION	1.4178139924111308E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999354543154	WITHOUT_CLASSIFICATION	6.454568457246726E-8	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999854112615015	WITHOUT_CLASSIFICATION	1.4588738498327137E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999995177171456	WITHOUT_CLASSIFICATION	4.822828545112431E-7	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999156556993	WITHOUT_CLASSIFICATION	8.434430070597574E-8	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999950974001639	WITHOUT_CLASSIFICATION	4.902599836063746E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999960251783655	WITHOUT_CLASSIFICATION	3.974821634501821E-6	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999960251783655	WITHOUT_CLASSIFICATION	3.974821634501821E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999354543154	WITHOUT_CLASSIFICATION	6.454568457246726E-8	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999273797319054	WITHOUT_CLASSIFICATION	7.262026809467663E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999985446527636	WITHOUT_CLASSIFICATION	1.4553472363702587E-6	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999941444574196	WITHOUT_CLASSIFICATION	5.855542580418031E-5	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999982650246722	WITHOUT_CLASSIFICATION	1.7349753278720734E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985616856526	WITHOUT_CLASSIFICATION	1.438314347305278E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997169310125	WITHOUT_CLASSIFICATION	2.830689874892595E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999567746066	WITHOUT_CLASSIFICATION	4.3225393358735785E-8	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999985781314473	WITHOUT_CLASSIFICATION	1.4218685527094796E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999953248503	WITHOUT_CLASSIFICATION	4.675149779216052E-9	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999098992245	WITHOUT_CLASSIFICATION	9.010077542768219E-8	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994085555228	WITHOUT_CLASSIFICATION	5.914444771813978E-7	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999708989694237	WITHOUT_CLASSIFICATION	2.9101030576348275E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998263291185625	WITHOUT_CLASSIFICATION	1.736708814374027E-4	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999823796788	WITHOUT_CLASSIFICATION	1.7620321204630453E-8	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999376291185	WITHOUT_CLASSIFICATION	6.237088141821468E-8	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999684765707	WITHOUT_CLASSIFICATION	3.1523429303051723E-7	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999801774768	WITHOUT_CLASSIFICATION	1.9822523196334427E-8	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999993063342069	WITHOUT_CLASSIFICATION	6.936657930966627E-7	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999752232761	WITHOUT_CLASSIFICATION	2.4776723900628016E-7	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999546545861	WITHOUT_CLASSIFICATION	4.5345413776825936E-8	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999991257477	WITHOUT_CLASSIFICATION	8.742523034864218E-9	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998232712984	WITHOUT_CLASSIFICATION	1.7672870160750439E-7	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988420845815	WITHOUT_CLASSIFICATION	1.1579154185904205E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883153996317	WITHOUT_CLASSIFICATION	1.1684600368128032E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951768428602	WITHOUT_CLASSIFICATION	4.823157139760411E-6	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973947115238	WITHOUT_CLASSIFICATION	2.6052884761421834E-6	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829322151479	WITHOUT_CLASSIFICATION	1.706778485211816E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880120168924	WITHOUT_CLASSIFICATION	1.198798310754723E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821652863912	WITHOUT_CLASSIFICATION	1.7834713608857524E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971523811214	WITHOUT_CLASSIFICATION	2.8476188785275293E-6	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999994952459321	WITHOUT_CLASSIFICATION	5.047540678399518E-7	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999739177391	WITHOUT_CLASSIFICATION	2.6082260990141313E-8	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967243160374	WITHOUT_CLASSIFICATION	3.275683962637838E-6	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970789096969	WITHOUT_CLASSIFICATION	2.9210903030537184E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995022907271	WITHOUT_CLASSIFICATION	4.977092729964233E-7	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922786348934	WITHOUT_CLASSIFICATION	7.721365106572067E-6	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980619598247	WITHOUT_CLASSIFICATION	1.938040175274032E-6	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999059495396	WITHOUT_CLASSIFICATION	9.405046038861216E-7	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987625975466	WITHOUT_CLASSIFICATION	1.237402453320854E-6	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719520665883	WITHOUT_CLASSIFICATION	2.804793341172178E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999808087680447	WITHOUT_CLASSIFICATION	1.919123195529501E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986737763411	WITHOUT_CLASSIFICATION	1.3262236588781211E-6	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999777651390732	WITHOUT_CLASSIFICATION	2.223486092679077E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998012518037	WITHOUT_CLASSIFICATION	1.9874819636273595E-7	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999951255735	WITHOUT_CLASSIFICATION	4.874426554660859E-9	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998153077696613	WITHOUT_CLASSIFICATION	1.84692230338636E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999961713889077	WITHOUT_CLASSIFICATION	3.828611092226455E-6	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999999643869565	WITHOUT_CLASSIFICATION	3.5613043513584015E-7	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999885190664	WITHOUT_CLASSIFICATION	1.1480933690476103E-8	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999834569854252	WITHOUT_CLASSIFICATION	1.6543014574732416E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999642828232128	WITHOUT_CLASSIFICATION	3.5717176787061095E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999523898048106	WITHOUT_CLASSIFICATION	4.7610195189322706E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999975414224386	WITHOUT_CLASSIFICATION	2.458577561405872E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.999993746357542	WITHOUT_CLASSIFICATION	6.2536424580976114E-6	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999984276955266	WITHOUT_CLASSIFICATION	1.5723044734768325E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999903990112	WITHOUT_CLASSIFICATION	9.600988785811736E-9	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999995010904247	WITHOUT_CLASSIFICATION	4.989095752555324E-7	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.999792315823547	WITHOUT_CLASSIFICATION	2.0768417645312552E-4	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999926149328	WITHOUT_CLASSIFICATION	7.385067191205409E-9	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989350204727	WITHOUT_CLASSIFICATION	1.0649795274216627E-6	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976853793782	WITHOUT_CLASSIFICATION	2.314620621742078E-6	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991297749079	WITHOUT_CLASSIFICATION	8.702250922502688E-7	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986060696705	WITHOUT_CLASSIFICATION	1.3939303294872814E-6	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999824249910316	WITHOUT_CLASSIFICATION	1.7575008968423992E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999851698222	WITHOUT_CLASSIFICATION	1.4830177721594054E-8	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999325359384	WITHOUT_CLASSIFICATION	6.746406153154049E-8	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998913091246	WITHOUT_CLASSIFICATION	1.086908754544796E-7	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931798217716	WITHOUT_CLASSIFICATION	6.820178228443413E-6	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999608542111	WITHOUT_CLASSIFICATION	3.914578892476217E-8	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999886127101963	WITHOUT_CLASSIFICATION	1.1387289803542673E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997272898316	WITHOUT_CLASSIFICATION	2.727101684308322E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999976678732	WITHOUT_CLASSIFICATION	2.332126833726314E-9	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999876779862494	WITHOUT_CLASSIFICATION	1.2322013750523659E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999997257660109	WITHOUT_CLASSIFICATION	2.7423398907716624E-7	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999998331191936	WITHOUT_CLASSIFICATION	1.6688080637606263E-7	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999958788418837	WITHOUT_CLASSIFICATION	4.121158116384645E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998153077696613	WITHOUT_CLASSIFICATION	1.84692230338636E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997726555895	WITHOUT_CLASSIFICATION	2.273444105894862E-7	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999924839912	WITHOUT_CLASSIFICATION	7.516008927426755E-9	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999486608021	WITHOUT_CLASSIFICATION	5.133919796505507E-8	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995500327898	WITHOUT_CLASSIFICATION	4.499672101707136E-7	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999399373938	WITHOUT_CLASSIFICATION	6.006260623625897E-8	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999995499681686	WITHOUT_CLASSIFICATION	4.500318314184298E-7	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999824249910316	WITHOUT_CLASSIFICATION	1.7575008968423992E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997838669528	WITHOUT_CLASSIFICATION	2.1613304727605434E-7	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999522495624	WITHOUT_CLASSIFICATION	4.775043759562334E-8	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998607938015	WITHOUT_CLASSIFICATION	1.392061983704577E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999942827939	WITHOUT_CLASSIFICATION	5.717206090483324E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999642869899	WITHOUT_CLASSIFICATION	3.571301018006738E-8	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998731961457	WITHOUT_CLASSIFICATION	1.2680385436832307E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999718471089	WITHOUT_CLASSIFICATION	2.8152891084844523E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996136083712	WITHOUT_CLASSIFICATION	3.8639162883835206E-7	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999517920621533	WITHOUT_CLASSIFICATION	4.8207937846618664E-5	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999993062979483	WITHOUT_CLASSIFICATION	6.937020516696131E-7	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999999993971092	WITHOUT_CLASSIFICATION	6.028908012035626E-9	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999993925300972	WITHOUT_CLASSIFICATION	6.07469902835429E-7	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998336033981	WITHOUT_CLASSIFICATION	1.6639660193398227E-7	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999740799753999	WITHOUT_CLASSIFICATION	2.5920024600164573E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999994324975949	WITHOUT_CLASSIFICATION	5.675024050183118E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998211669698	WITHOUT_CLASSIFICATION	1.7883303018557256E-7	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999489237127	WITHOUT_CLASSIFICATION	5.107628733350067E-8	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999850134851	WITHOUT_CLASSIFICATION	1.498651493657831E-8	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999999194783297	WITHOUT_CLASSIFICATION	8.052167031634095E-8	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999997377671831	WITHOUT_CLASSIFICATION	2.6223281690912617E-6	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999995914212475	WITHOUT_CLASSIFICATION	4.0857875247182567E-7	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994018119999	WITHOUT_CLASSIFICATION	5.981880001115126E-7	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999993437744441	WITHOUT_CLASSIFICATION	6.562255559550083E-7	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999973424536829	WITHOUT_CLASSIFICATION	2.65754631706157E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999999249747173	WITHOUT_CLASSIFICATION	7.50252826093629E-8	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999223372527	WITHOUT_CLASSIFICATION	7.766274726463172E-8	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999017561917	WITHOUT_CLASSIFICATION	9.824380827940518E-8	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998153077696613	WITHOUT_CLASSIFICATION	1.84692230338636E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999995734832767	WITHOUT_CLASSIFICATION	4.265167232671575E-7	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999998568125255	WITHOUT_CLASSIFICATION	1.431874744830593E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9994051117096521	WITHOUT_CLASSIFICATION	5.948882903479696E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999988047503297	WITHOUT_CLASSIFICATION	1.1952496702906329E-6	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999989393679796	WITHOUT_CLASSIFICATION	1.0606320205075186E-6	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999992595885908	WITHOUT_CLASSIFICATION	7.40411409065305E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998153077696613	WITHOUT_CLASSIFICATION	1.84692230338636E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999971901689306	WITHOUT_CLASSIFICATION	2.80983106943952E-6	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999489237127	WITHOUT_CLASSIFICATION	5.107628733350067E-8	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999967478901021	WITHOUT_CLASSIFICATION	3.252109897976105E-6	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998211669698	WITHOUT_CLASSIFICATION	1.7883303018557256E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995992267146	WITHOUT_CLASSIFICATION	4.0077328534640827E-7	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9994512607163883	WITHOUT_CLASSIFICATION	5.48739283611612E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999879285753591	WITHOUT_CLASSIFICATION	1.2071424640924615E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998607938015	WITHOUT_CLASSIFICATION	1.392061983704577E-7	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999942827939	WITHOUT_CLASSIFICATION	5.717206090483324E-8	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999642869899	WITHOUT_CLASSIFICATION	3.571301018006738E-8	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999980880912531	WITHOUT_CLASSIFICATION	1.911908746917341E-6	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999991089933	WITHOUT_CLASSIFICATION	8.910067001201721E-7	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998086890509	WITHOUT_CLASSIFICATION	1.9131094913391738E-7	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999998211669698	WITHOUT_CLASSIFICATION	1.7883303018557256E-7	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995992267146	WITHOUT_CLASSIFICATION	4.0077328534640827E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998153077696613	WITHOUT_CLASSIFICATION	1.84692230338636E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998731961457	WITHOUT_CLASSIFICATION	1.2680385436832307E-7	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999718471089	WITHOUT_CLASSIFICATION	2.8152891084844523E-8	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996136083712	WITHOUT_CLASSIFICATION	3.8639162883835206E-7	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999042304307	WITHOUT_CLASSIFICATION	9.576956933185093E-8	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999271409209	WITHOUT_CLASSIFICATION	7.285907903414515E-8	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999997833452679	WITHOUT_CLASSIFICATION	2.1665473208707415E-6	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998874037028	WITHOUT_CLASSIFICATION	1.1259629724191052E-7	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999950686748615	WITHOUT_CLASSIFICATION	4.931325138444174E-6	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999817304264	WITHOUT_CLASSIFICATION	1.8269573591013577E-8	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719520665883	WITHOUT_CLASSIFICATION	2.804793341172178E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999995792411883	WITHOUT_CLASSIFICATION	4.207588117087896E-6	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999846665131494	WITHOUT_CLASSIFICATION	1.5333486850548852E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999990015002119	WITHOUT_CLASSIFICATION	9.984997880802489E-7	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999953247871	WITHOUT_CLASSIFICATION	4.675212848706633E-9	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998967682806	WITHOUT_CLASSIFICATION	1.0323171936584264E-7	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829322151479	WITHOUT_CLASSIFICATION	1.706778485211816E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880120168924	WITHOUT_CLASSIFICATION	1.198798310754723E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970789096969	WITHOUT_CLASSIFICATION	2.9210903030537184E-6	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998967682806	WITHOUT_CLASSIFICATION	1.0323171936584264E-7	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999666213678	WITHOUT_CLASSIFICATION	3.3378632186898004E-8	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997850281406	WITHOUT_CLASSIFICATION	2.1497185949579471E-7	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970216539673	WITHOUT_CLASSIFICATION	2.978346032771387E-6	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996227683992	WITHOUT_CLASSIFICATION	3.7723160080104443E-6	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999497832756	WITHOUT_CLASSIFICATION	5.021672439368671E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999919330498358	WITHOUT_CLASSIFICATION	8.066950164139316E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995022907271	WITHOUT_CLASSIFICATION	4.977092729964233E-7	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999059495396	WITHOUT_CLASSIFICATION	9.405046038861216E-7	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999976678732	WITHOUT_CLASSIFICATION	2.332126833726314E-9	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999987372211765	WITHOUT_CLASSIFICATION	1.2627788234622428E-6	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999917065947	WITHOUT_CLASSIFICATION	8.293405211327182E-9	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999571034036	WITHOUT_CLASSIFICATION	4.289659641122808E-8	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999889129803388	WITHOUT_CLASSIFICATION	1.1087019661196625E-5	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997232380375	WITHOUT_CLASSIFICATION	2.767619624032072E-7	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999999964059137	WITHOUT_CLASSIFICATION	3.594086289981862E-8	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999996281315882	WITHOUT_CLASSIFICATION	3.7186841192731035E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999953248503	WITHOUT_CLASSIFICATION	4.675149779216052E-9	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999999771549095	WITHOUT_CLASSIFICATION	2.2845090498716606E-7	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998988910104	WITHOUT_CLASSIFICATION	1.0110898965496651E-7	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996601673934	WITHOUT_CLASSIFICATION	3.398326066177153E-7	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999941336121556	WITHOUT_CLASSIFICATION	5.866387844365467E-6	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999399786291	WITHOUT_CLASSIFICATION	6.002137088314678E-8	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992344916343	WITHOUT_CLASSIFICATION	7.655083657050526E-7	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996935612568	WITHOUT_CLASSIFICATION	3.0643874316540153E-7	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996942259352	WITHOUT_CLASSIFICATION	3.0577406474576745E-7	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990041139866	WITHOUT_CLASSIFICATION	9.958860134388531E-7	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999993017329278	WITHOUT_CLASSIFICATION	6.982670722813381E-7	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999986956448657	WITHOUT_CLASSIFICATION	1.3043551344029544E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999978799930681	WITHOUT_CLASSIFICATION	2.1200069318315935E-6	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988421525334	WITHOUT_CLASSIFICATION	1.1578474665395536E-6	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995613742498	WITHOUT_CLASSIFICATION	4.3862575015565696E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996966147443	WITHOUT_CLASSIFICATION	3.033852556991363E-7	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999996509652026	WITHOUT_CLASSIFICATION	3.4903479736384526E-7	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999992349190647	WITHOUT_CLASSIFICATION	7.650809352524793E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995941760168	WITHOUT_CLASSIFICATION	4.0582398321685776E-7	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999999022298902	WITHOUT_CLASSIFICATION	9.777010985283948E-8	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980047312952	WITHOUT_CLASSIFICATION	1.995268704780618E-6	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993232709273	WITHOUT_CLASSIFICATION	6.767290725943295E-7	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999996211380601	WITHOUT_CLASSIFICATION	3.7886193986363584E-7	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999991758408128	WITHOUT_CLASSIFICATION	8.24159187242613E-7	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998179184741	WITHOUT_CLASSIFICATION	1.820815257307976E-7	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999997615876451	WITHOUT_CLASSIFICATION	2.3841235473826433E-7	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.999995083536315	WITHOUT_CLASSIFICATION	4.916463684936109E-6	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999935994973677	WITHOUT_CLASSIFICATION	6.400502632393562E-6	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999953308837685	WITHOUT_CLASSIFICATION	4.669116231467428E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999407078537	WITHOUT_CLASSIFICATION	5.9292146251750314E-8	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999999023107321	WITHOUT_CLASSIFICATION	9.768926789290984E-7	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998490436895	WITHOUT_CLASSIFICATION	1.509563104711752E-7	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999895127171	WITHOUT_CLASSIFICATION	1.0487282980189597E-8	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999967897462622	WITHOUT_CLASSIFICATION	3.210253737807872E-6	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999952326606589	WITHOUT_CLASSIFICATION	4.767339341065272E-6	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999358287619	WITHOUT_CLASSIFICATION	6.417123805450667E-8	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999897675527643	WITHOUT_CLASSIFICATION	1.023244723566459E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999999173118355	WITHOUT_CLASSIFICATION	8.268816451532725E-7	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999955290201643	WITHOUT_CLASSIFICATION	4.470979835725263E-6	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999957015880755	WITHOUT_CLASSIFICATION	4.298411924575658E-6	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999044153780586	WITHOUT_CLASSIFICATION	9.558462194142571E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999492981579245	WITHOUT_CLASSIFICATION	5.0701842075549096E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999788610782	WITHOUT_CLASSIFICATION	2.113892177509003E-8	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999993154604435	WITHOUT_CLASSIFICATION	6.845395564068707E-7	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999539216873	WITHOUT_CLASSIFICATION	4.6078312623573034E-8	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999998827374299	WITHOUT_CLASSIFICATION	1.1726257019291284E-7	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995991251129	WITHOUT_CLASSIFICATION	4.008748871087238E-7	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998976038765	WITHOUT_CLASSIFICATION	1.0239612356396099E-7	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999362053117	WITHOUT_CLASSIFICATION	6.379468826053437E-8	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999987800895003	WITHOUT_CLASSIFICATION	1.219910499735859E-6	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999997987848599	WITHOUT_CLASSIFICATION	2.0121514002377854E-7	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999273457194	WITHOUT_CLASSIFICATION	7.265428056629597E-8	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995269819052	WITHOUT_CLASSIFICATION	4.730180947682596E-7	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999993704075981	WITHOUT_CLASSIFICATION	6.295924018774475E-7	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999820940088	WITHOUT_CLASSIFICATION	1.7905991348431597E-8	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999998485643142	WITHOUT_CLASSIFICATION	1.5143568579896523E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999991789829367	WITHOUT_CLASSIFICATION	8.210170634852653E-7	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.999999218589111	WITHOUT_CLASSIFICATION	7.81410888938174E-7	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999996534703496	WITHOUT_CLASSIFICATION	3.465296503891049E-7	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998466787109	WITHOUT_CLASSIFICATION	1.533212891335992E-7	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999568337531	WITHOUT_CLASSIFICATION	4.3166246934706896E-8	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.999999939465706	WITHOUT_CLASSIFICATION	6.053429401903145E-8	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999999153086269	WITHOUT_CLASSIFICATION	8.469137309787513E-7	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999972615483931	WITHOUT_CLASSIFICATION	2.7384516068587492E-6	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999913299638361	WITHOUT_CLASSIFICATION	8.670036163951074E-6	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999969808108528	WITHOUT_CLASSIFICATION	3.019189147291578E-6	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999986057347952	WITHOUT_CLASSIFICATION	1.3942652047813753E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999999783189675	WITHOUT_CLASSIFICATION	2.1681032499067044E-7	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999454359589	WITHOUT_CLASSIFICATION	5.4564041006477983E-8	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999682670656	WITHOUT_CLASSIFICATION	3.173293433169007E-8	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999930773882	WITHOUT_CLASSIFICATION	6.92261179465779E-8	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999986268768586	WITHOUT_CLASSIFICATION	1.3731231414156336E-6	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999997735416779	WITHOUT_CLASSIFICATION	2.264583221094796E-7	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999996560597286	WITHOUT_CLASSIFICATION	3.4394027127922375E-7	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999999639074499	WITHOUT_CLASSIFICATION	3.6092550105168646E-7	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999998632407662	WITHOUT_CLASSIFICATION	1.3675923380368216E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.999998500388503	WITHOUT_CLASSIFICATION	1.4996114970367116E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992590253064	WITHOUT_CLASSIFICATION	7.409746934689876E-7	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999544180428498	WITHOUT_CLASSIFICATION	4.558195715031049E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999997084812586	WITHOUT_CLASSIFICATION	2.9151874140949138E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999991498207759	WITHOUT_CLASSIFICATION	8.501792241861176E-7	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999992423649277	WITHOUT_CLASSIFICATION	7.576350724416149E-7	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998873348528	WITHOUT_CLASSIFICATION	1.1266514720459667E-6	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996108739434	WITHOUT_CLASSIFICATION	3.891260566123636E-7	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999967060412802	WITHOUT_CLASSIFICATION	3.293958719868718E-6	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999932650457515	WITHOUT_CLASSIFICATION	6.73495424849304E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999984496693076	WITHOUT_CLASSIFICATION	1.550330692270212E-6	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999996125895323	WITHOUT_CLASSIFICATION	3.8741046767556383E-7	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999967954716733	WITHOUT_CLASSIFICATION	3.204528326723217E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.999999767656576	WITHOUT_CLASSIFICATION	2.3234342394588508E-7	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.99999999982903	WITHOUT_CLASSIFICATION	1.709700238437598E-10	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999962574257361	WITHOUT_CLASSIFICATION	3.7425742638387925E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999412022873813	WITHOUT_CLASSIFICATION	5.8797712618885233E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999904938043511	WITHOUT_CLASSIFICATION	9.50619564881786E-6	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999962574257361	WITHOUT_CLASSIFICATION	3.7425742638387925E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998094138959	WITHOUT_CLASSIFICATION	1.905861040507755E-7	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999998754509724	WITHOUT_CLASSIFICATION	1.2454902773719372E-7	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999947192858183	WITHOUT_CLASSIFICATION	5.2807141817665875E-6	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999902979193888	WITHOUT_CLASSIFICATION	9.70208061125756E-6	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999999046893709	WITHOUT_CLASSIFICATION	9.531062916364252E-8	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999325629559	WITHOUT_CLASSIFICATION	6.743704408368178E-8	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999502504078223	WITHOUT_CLASSIFICATION	4.974959217770159E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993245652894	WITHOUT_CLASSIFICATION	6.754347106660288E-7	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999549675372	WITHOUT_CLASSIFICATION	4.503246273395869E-8	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999704861211436	WITHOUT_CLASSIFICATION	2.9513878856436306E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999254008195	WITHOUT_CLASSIFICATION	7.459918053577001E-8	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999994536183575	WITHOUT_CLASSIFICATION	5.463816425018216E-7	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999989020157535	WITHOUT_CLASSIFICATION	1.0979842465897375E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999973476981726	WITHOUT_CLASSIFICATION	2.652301827331157E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997628271544	WITHOUT_CLASSIFICATION	2.3717284562815468E-7	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999998466785782	WITHOUT_CLASSIFICATION	1.5332142185979627E-7	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999901269702758	WITHOUT_CLASSIFICATION	9.873029724251306E-6	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999901269702758	WITHOUT_CLASSIFICATION	9.873029724251306E-6	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999621444738	WITHOUT_CLASSIFICATION	3.785552614726259E-8	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999519175586831	WITHOUT_CLASSIFICATION	4.808244131702216E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999797587928146	WITHOUT_CLASSIFICATION	2.024120718534867E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999927710986396	WITHOUT_CLASSIFICATION	7.228901360308104E-6	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995447208914	WITHOUT_CLASSIFICATION	4.552791085883624E-7	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999944084144023	WITHOUT_CLASSIFICATION	5.59158559774547E-6	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999984358139457	WITHOUT_CLASSIFICATION	1.5641860543144773E-6	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999798372687	WITHOUT_CLASSIFICATION	2.0162731292481963E-8	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999991247728275	WITHOUT_CLASSIFICATION	8.752271725124035E-7	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999993011364323	WITHOUT_CLASSIFICATION	6.988635676843999E-7	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999998580758552	WITHOUT_CLASSIFICATION	1.4192414481587546E-7	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999951991175	WITHOUT_CLASSIFICATION	4.800882519202574E-9	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999203747402	WITHOUT_CLASSIFICATION	7.962525979999293E-8	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999997202829632	WITHOUT_CLASSIFICATION	2.797170367543959E-7	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999951227433	WITHOUT_CLASSIFICATION	4.877256636037817E-9	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992344916343	WITHOUT_CLASSIFICATION	7.655083657050526E-7	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999951770809568	WITHOUT_CLASSIFICATION	4.822919043154144E-6	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999608400439	WITHOUT_CLASSIFICATION	3.915995618284576E-8	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999998176947371	WITHOUT_CLASSIFICATION	1.8230526277537292E-7	TEST
do the test	WITHOUT_CLASSIFICATION	0.9990379880482759	WITHOUT_CLASSIFICATION	9.620119517239812E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.99999996283509	WITHOUT_CLASSIFICATION	3.7164910091330136E-8	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9999990251930849	WITHOUT_CLASSIFICATION	9.748069150702046E-7	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999650426431	WITHOUT_CLASSIFICATION	3.495735699535179E-8	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999194931022	WITHOUT_CLASSIFICATION	8.05068978175241E-8	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999989598899	WITHOUT_CLASSIFICATION	1.0401101003938739E-8	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999863731751	WITHOUT_CLASSIFICATION	1.3626824931645186E-8	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999981223296156	WITHOUT_CLASSIFICATION	1.8776703843995463E-6	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999109841479	WITHOUT_CLASSIFICATION	8.901585218904222E-8	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999954131807719	WITHOUT_CLASSIFICATION	4.58681922811421E-6	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999984831346467	WITHOUT_CLASSIFICATION	1.5168653532920513E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998521470802	WITHOUT_CLASSIFICATION	1.4785291969481916E-7	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999609388514	WITHOUT_CLASSIFICATION	3.906114873625234E-8	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999950424581583	WITHOUT_CLASSIFICATION	4.957541841804103E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997140485411	WITHOUT_CLASSIFICATION	2.8595145890797115E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999997346731179	WITHOUT_CLASSIFICATION	2.6532688206501976E-7	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999999454197257	WITHOUT_CLASSIFICATION	5.458027430739122E-8	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999994404839517	WITHOUT_CLASSIFICATION	5.595160483004118E-7	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999999155867301	WITHOUT_CLASSIFICATION	8.441326991043027E-8	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999979763015908	WITHOUT_CLASSIFICATION	2.0236984091975275E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999985893303359	WITHOUT_CLASSIFICATION	1.410669664094612E-6	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999922549396378	WITHOUT_CLASSIFICATION	7.745060362116831E-6	TEST
create one	WITHOUT_CLASSIFICATION	0.9999995210513098	WITHOUT_CLASSIFICATION	4.789486901241848E-7	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999998921246289	WITHOUT_CLASSIFICATION	1.0787537098663602E-7	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999537276234	WITHOUT_CLASSIFICATION	4.627237661637042E-8	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999983282528637	WITHOUT_CLASSIFICATION	1.6717471363092544E-6	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999996121303913	WITHOUT_CLASSIFICATION	3.87869608720636E-7	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958070227702	WITHOUT_CLASSIFICATION	4.192977229706644E-6	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981468112259	WITHOUT_CLASSIFICATION	1.8531887740919698E-6	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998374287207	WITHOUT_CLASSIFICATION	1.62571279303111E-6	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999876483796	WITHOUT_CLASSIFICATION	1.235162050353891E-8	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998873479482	WITHOUT_CLASSIFICATION	1.1265205168694229E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991552181606	WITHOUT_CLASSIFICATION	8.447818393073007E-7	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999883817406	WITHOUT_CLASSIFICATION	1.1618259368756831E-8	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999992278272877	WITHOUT_CLASSIFICATION	7.721727123734497E-7	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972710564995	WITHOUT_CLASSIFICATION	2.728943500472765E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999992278272877	WITHOUT_CLASSIFICATION	7.721727123734497E-7	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999999246827277	WITHOUT_CLASSIFICATION	7.531727228888769E-7	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999989136938535	WITHOUT_CLASSIFICATION	1.0863061464613873E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999955559437238	WITHOUT_CLASSIFICATION	4.4440562761245856E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996594980944	WITHOUT_CLASSIFICATION	3.405019054514863E-7	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999960441812694	WITHOUT_CLASSIFICATION	3.9558187305899045E-6	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998934591436277	WITHOUT_CLASSIFICATION	1.0654085637231478E-4	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998215781636	WITHOUT_CLASSIFICATION	1.7842183646043146E-7	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999993326164639	WITHOUT_CLASSIFICATION	6.67383536094649E-7	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999173072921	WITHOUT_CLASSIFICATION	8.269270787246766E-8	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999800490005099	WITHOUT_CLASSIFICATION	1.9950999490233786E-5	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999094448182	WITHOUT_CLASSIFICATION	9.055518176132763E-8	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999764457745	WITHOUT_CLASSIFICATION	2.3554225387690275E-8	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999989288109017	WITHOUT_CLASSIFICATION	1.0711890982988377E-6	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999930521208161	WITHOUT_CLASSIFICATION	6.947879183918128E-6	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999821520524	WITHOUT_CLASSIFICATION	1.7847947534180314E-8	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999941652064	WITHOUT_CLASSIFICATION	5.834793651545642E-9	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999967686919229	WITHOUT_CLASSIFICATION	3.231308077211064E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999967686919229	WITHOUT_CLASSIFICATION	3.231308077211064E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.999999691573262	WITHOUT_CLASSIFICATION	3.084267380374757E-7	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999962832199238	WITHOUT_CLASSIFICATION	3.71678007602645E-6	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999916603886	WITHOUT_CLASSIFICATION	8.33961141039919E-9	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995587175549	WITHOUT_CLASSIFICATION	4.4128244511636107E-7	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998135682733	WITHOUT_CLASSIFICATION	1.8643172681999825E-7	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994928908373	WITHOUT_CLASSIFICATION	5.071091627249981E-7	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999993013625975	WITHOUT_CLASSIFICATION	6.986374025127982E-7	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999986181452016	WITHOUT_CLASSIFICATION	1.38185479834868E-6	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999985426909166	WITHOUT_CLASSIFICATION	1.4573090833640669E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999982283881	WITHOUT_CLASSIFICATION	1.7716118593179212E-9	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998159073993	WITHOUT_CLASSIFICATION	1.8409260057868972E-7	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997345033478	WITHOUT_CLASSIFICATION	2.6549665217299353E-7	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999230508599	WITHOUT_CLASSIFICATION	7.694914008108189E-8	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999202216019	WITHOUT_CLASSIFICATION	7.97783980929569E-7	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999996700925604	WITHOUT_CLASSIFICATION	3.2990743961209544E-7	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999259708308	WITHOUT_CLASSIFICATION	7.402916930019563E-8	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999760653906	WITHOUT_CLASSIFICATION	2.3934609420828633E-8	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999993250478862	WITHOUT_CLASSIFICATION	6.749521136371725E-7	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999999504035192	WITHOUT_CLASSIFICATION	4.959648084908526E-8	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999990190248	WITHOUT_CLASSIFICATION	9.809751643908341E-10	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999989057460037	WITHOUT_CLASSIFICATION	1.0942539962979466E-6	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997432872075	WITHOUT_CLASSIFICATION	2.567127924652253E-7	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999382710641	WITHOUT_CLASSIFICATION	6.172893586407276E-8	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999681128167	WITHOUT_CLASSIFICATION	3.1887183385708405E-8	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999990947152835	WITHOUT_CLASSIFICATION	9.052847164142802E-7	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999989961088386	WITHOUT_CLASSIFICATION	1.0038911613447965E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997669777866	WITHOUT_CLASSIFICATION	2.330222133634697E-7	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999997270844675	WITHOUT_CLASSIFICATION	2.729155325336196E-7	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.999973786054732	WITHOUT_CLASSIFICATION	2.621394526809486E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998703947812	WITHOUT_CLASSIFICATION	1.2960521882377345E-7	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999979996471003	WITHOUT_CLASSIFICATION	2.000352899753222E-6	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999964853557287	WITHOUT_CLASSIFICATION	3.5146442712891596E-6	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999715444870904	WITHOUT_CLASSIFICATION	2.8455512909570103E-5	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999991412437803	WITHOUT_CLASSIFICATION	8.58756219742498E-7	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999995286623862	WITHOUT_CLASSIFICATION	4.713376138099106E-7	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998912639827	WITHOUT_CLASSIFICATION	1.0873601736034424E-7	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998836973628	WITHOUT_CLASSIFICATION	1.16302637238457E-7	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999989023895897	WITHOUT_CLASSIFICATION	1.0976104103365295E-6	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999747144215	WITHOUT_CLASSIFICATION	2.5285578539221293E-8	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999997503857825	WITHOUT_CLASSIFICATION	2.496142174819016E-7	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999007037742	WITHOUT_CLASSIFICATION	9.929622582559523E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982521761961	WITHOUT_CLASSIFICATION	1.7478238039713573E-6	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999980146071438	WITHOUT_CLASSIFICATION	1.985392856273761E-6	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999923835651	WITHOUT_CLASSIFICATION	7.616435004377862E-9	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999975149382	WITHOUT_CLASSIFICATION	2.485061875898979E-9	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999999669638155	WITHOUT_CLASSIFICATION	3.303618440625728E-8	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999998758561349	WITHOUT_CLASSIFICATION	1.2414386502453538E-7	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999274427245	WITHOUT_CLASSIFICATION	7.255727543917229E-8	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998767215402	WITHOUT_CLASSIFICATION	1.2327845975456448E-7	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999988436131543	WITHOUT_CLASSIFICATION	1.1563868457451803E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963639352538	WITHOUT_CLASSIFICATION	3.6360647461775E-6	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999992754719499	WITHOUT_CLASSIFICATION	7.245280500113017E-7	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998303967661	WITHOUT_CLASSIFICATION	1.696032339755012E-7	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999995329585946	WITHOUT_CLASSIFICATION	4.670414054522772E-7	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999979088161765	WITHOUT_CLASSIFICATION	2.0911838235076547E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999971901689306	WITHOUT_CLASSIFICATION	2.80983106943952E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999971901689306	WITHOUT_CLASSIFICATION	2.80983106943952E-6	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998775868929545	WITHOUT_CLASSIFICATION	1.224131070455245E-4	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999569423446354	WITHOUT_CLASSIFICATION	4.305765536465262E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999686237927	WITHOUT_CLASSIFICATION	3.137620731729759E-8	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999194030155	WITHOUT_CLASSIFICATION	8.05969845511051E-8	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999708260796	WITHOUT_CLASSIFICATION	2.9173920411073462E-8	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999774189111	WITHOUT_CLASSIFICATION	2.2581088948574123E-8	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998912541649	WITHOUT_CLASSIFICATION	1.0874583515990313E-7	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999999972191105	WITHOUT_CLASSIFICATION	2.7808895026629482E-8	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999989910774199	WITHOUT_CLASSIFICATION	1.0089225801989756E-6	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999848514642888	WITHOUT_CLASSIFICATION	1.5148535711263645E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998981222583	WITHOUT_CLASSIFICATION	1.0187774165878299E-7	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999973037971727	WITHOUT_CLASSIFICATION	2.696202827289969E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998467147252	WITHOUT_CLASSIFICATION	1.5328527476592682E-7	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999888822730287	WITHOUT_CLASSIFICATION	1.1117726971339044E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999263624674	WITHOUT_CLASSIFICATION	7.363753259959747E-8	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996093648238	WITHOUT_CLASSIFICATION	3.906351761756185E-7	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999970408670398	WITHOUT_CLASSIFICATION	2.9591329601571533E-6	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999962146479	WITHOUT_CLASSIFICATION	3.785352196478766E-9	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999955260060676	WITHOUT_CLASSIFICATION	4.473993932466309E-6	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999990670987197	WITHOUT_CLASSIFICATION	9.32901280272825E-7	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999998386533365	WITHOUT_CLASSIFICATION	1.6134666349231732E-7	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999769516548	WITHOUT_CLASSIFICATION	2.3048345211786854E-8	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999986255049302	WITHOUT_CLASSIFICATION	1.3744950697891293E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999613385916891	WITHOUT_CLASSIFICATION	3.866140831085883E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999999969510694	WITHOUT_CLASSIFICATION	3.048930600246599E-8	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998639679619	WITHOUT_CLASSIFICATION	1.3603203810707308E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999991833862624	WITHOUT_CLASSIFICATION	8.166137376907133E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999999484888071	WITHOUT_CLASSIFICATION	5.151119290291213E-7	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999444651746382	WITHOUT_CLASSIFICATION	5.5534825361860075E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999997740861893	WITHOUT_CLASSIFICATION	2.2591381070596881E-7	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999613385916891	WITHOUT_CLASSIFICATION	3.866140831085883E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999995845250376	WITHOUT_CLASSIFICATION	4.154749624260065E-7	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999973869154	WITHOUT_CLASSIFICATION	2.613084760009323E-9	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9998546119773253	WITHOUT_CLASSIFICATION	1.4538802267467858E-4	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999999360618624	WITHOUT_CLASSIFICATION	6.393813760674515E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999992531496	WITHOUT_CLASSIFICATION	7.468503975616275E-9	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999991745247399	WITHOUT_CLASSIFICATION	8.254752601034221E-6	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999999802370567	WITHOUT_CLASSIFICATION	1.9762943296031485E-7	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999230586216	WITHOUT_CLASSIFICATION	7.694137837920299E-8	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999976455590125	WITHOUT_CLASSIFICATION	2.354440987610762E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999999360618624	WITHOUT_CLASSIFICATION	6.393813760674515E-7	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999812589631837	WITHOUT_CLASSIFICATION	1.8741036816306404E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999230586216	WITHOUT_CLASSIFICATION	7.694137837920299E-8	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999368813866	WITHOUT_CLASSIFICATION	6.31186134277232E-8	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999928683409235	WITHOUT_CLASSIFICATION	7.131659076605888E-6	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999850576707	WITHOUT_CLASSIFICATION	1.494232933743512E-8	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998159073993	WITHOUT_CLASSIFICATION	1.8409260057868972E-7	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999948004262	WITHOUT_CLASSIFICATION	5.1995738189339545E-8	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995474160501	WITHOUT_CLASSIFICATION	4.5258394985399177E-7	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998426527892	WITHOUT_CLASSIFICATION	1.5734721077459544E-7	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999999782624299	WITHOUT_CLASSIFICATION	2.1737570105024928E-7	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999932516285864	WITHOUT_CLASSIFICATION	6.748371413534962E-6	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999980216874198	WITHOUT_CLASSIFICATION	1.9783125801999418E-6	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999969570235434	WITHOUT_CLASSIFICATION	3.0429764565198094E-6	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999977564317718	WITHOUT_CLASSIFICATION	2.243568228141807E-6	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999973875976738	WITHOUT_CLASSIFICATION	2.612402326214229E-6	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997148401212	WITHOUT_CLASSIFICATION	2.851598788451364E-7	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999748133223186	WITHOUT_CLASSIFICATION	2.518667768125931E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.99999997766705	WITHOUT_CLASSIFICATION	2.2332950114178257E-8	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999430290488	WITHOUT_CLASSIFICATION	5.6970951059732626E-8	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999987493793518	WITHOUT_CLASSIFICATION	1.2506206481529698E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999901499385	WITHOUT_CLASSIFICATION	9.850061645420547E-9	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999985318490653	WITHOUT_CLASSIFICATION	1.4681509346986356E-6	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999946026911462	WITHOUT_CLASSIFICATION	5.3973088538444264E-6	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999991152956548	WITHOUT_CLASSIFICATION	8.847043452504045E-7	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999994962642114	WITHOUT_CLASSIFICATION	5.03735788593858E-7	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999999151684102	WITHOUT_CLASSIFICATION	8.4831589787996E-7	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999993426158684	WITHOUT_CLASSIFICATION	6.573841315561599E-7	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999613257684	WITHOUT_CLASSIFICATION	3.8674231564198366E-8	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999236110452	WITHOUT_CLASSIFICATION	7.638895487737348E-8	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999960632993591	WITHOUT_CLASSIFICATION	3.936700640978126E-6	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999995219651168	WITHOUT_CLASSIFICATION	4.780348832939189E-7	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999643530693286	WITHOUT_CLASSIFICATION	3.564693067137266E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999987107579216	WITHOUT_CLASSIFICATION	1.2892420784228975E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985274111923	WITHOUT_CLASSIFICATION	1.4725888077215474E-6	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984598541911	WITHOUT_CLASSIFICATION	1.5401458089391728E-6	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999999887488283	WITHOUT_CLASSIFICATION	1.1251171699536993E-7	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999983563920042	WITHOUT_CLASSIFICATION	1.6436079957470681E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999994088874314	WITHOUT_CLASSIFICATION	5.911125686276429E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999994644021	WITHOUT_CLASSIFICATION	5.355979064263281E-9	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999997527706332	WITHOUT_CLASSIFICATION	2.472293667377773E-7	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999989635051072	WITHOUT_CLASSIFICATION	1.0364948927496168E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999982347023	WITHOUT_CLASSIFICATION	1.765297696973847E-8	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999912570579	WITHOUT_CLASSIFICATION	8.742942109545029E-8	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999999602179423	WITHOUT_CLASSIFICATION	3.978205770342692E-7	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999993771075663	WITHOUT_CLASSIFICATION	6.228924338478878E-7	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999958245474844	WITHOUT_CLASSIFICATION	4.175452515643227E-6	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998368798081	WITHOUT_CLASSIFICATION	1.6312019187498408E-7	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999863974383	WITHOUT_CLASSIFICATION	1.3602561776126069E-8	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999986570208467	WITHOUT_CLASSIFICATION	1.342979153360321E-6	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993297352606	WITHOUT_CLASSIFICATION	6.702647393327686E-7	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999702422527739	WITHOUT_CLASSIFICATION	2.9757747226100077E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999903799160172	WITHOUT_CLASSIFICATION	9.620083982703232E-6	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999998428106794	WITHOUT_CLASSIFICATION	1.5718932061209206E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999949834961	WITHOUT_CLASSIFICATION	5.016503899774827E-7	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999911531923756	WITHOUT_CLASSIFICATION	8.84680762427617E-6	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999987537618038	WITHOUT_CLASSIFICATION	1.2462381961927278E-6	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999789184921	WITHOUT_CLASSIFICATION	2.1081507849221755E-8	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999978365680391	WITHOUT_CLASSIFICATION	2.163431960929901E-6	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999609382187	WITHOUT_CLASSIFICATION	3.906178133382442E-8	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999993300139479	WITHOUT_CLASSIFICATION	6.699860521272158E-7	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999360396782228	WITHOUT_CLASSIFICATION	6.396032177717014E-5	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999968540091004	WITHOUT_CLASSIFICATION	3.1459908995503437E-6	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985274111923	WITHOUT_CLASSIFICATION	1.4725888077215474E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999751811269	WITHOUT_CLASSIFICATION	2.481887304868605E-8	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999980366735	WITHOUT_CLASSIFICATION	1.963326474410588E-9	TEST
switch	WITHOUT_CLASSIFICATION	0.9999911038881607	WITHOUT_CLASSIFICATION	8.896111839260342E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999185130850651	WITHOUT_CLASSIFICATION	8.14869149349289E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999032458539	WITHOUT_CLASSIFICATION	9.675414622808237E-8	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999989574558281	WITHOUT_CLASSIFICATION	1.0425441719156187E-6	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920331372683	WITHOUT_CLASSIFICATION	7.966862731718928E-6	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999928505934	WITHOUT_CLASSIFICATION	7.149406597940411E-8	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999827588268	WITHOUT_CLASSIFICATION	1.724117319489324E-8	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999959333818612	WITHOUT_CLASSIFICATION	4.066618138812674E-6	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999999991133442	WITHOUT_CLASSIFICATION	8.866558138301353E-9	TEST
/	WITHOUT_CLASSIFICATION	0.9997612574369071	WITHOUT_CLASSIFICATION	2.3874256309281807E-4	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999995585511724	WITHOUT_CLASSIFICATION	4.414488276925656E-7	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999970457443291	WITHOUT_CLASSIFICATION	2.9542556707990174E-6	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999999246827277	WITHOUT_CLASSIFICATION	7.531727228888769E-7	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999921090074	WITHOUT_CLASSIFICATION	7.890992665249742E-9	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999996962118	WITHOUT_CLASSIFICATION	3.0378829731243686E-10	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999993274324751	WITHOUT_CLASSIFICATION	6.725675248787659E-7	TEST
all clear	WITHOUT_CLASSIFICATION	0.999998938197814	WITHOUT_CLASSIFICATION	1.061802185929229E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999954144302	WITHOUT_CLASSIFICATION	4.5855698131423935E-9	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999991858708093	WITHOUT_CLASSIFICATION	8.14129190755786E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999991858708093	WITHOUT_CLASSIFICATION	8.14129190755786E-7	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999994892372804	WITHOUT_CLASSIFICATION	5.107627195721581E-7	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999975600051413	WITHOUT_CLASSIFICATION	2.439994858667944E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998951723748	WITHOUT_CLASSIFICATION	1.0482762526383093E-7	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999987024325003	WITHOUT_CLASSIFICATION	1.2975674997075743E-6	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999997834963225	WITHOUT_CLASSIFICATION	2.1650367755197422E-7	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998809468489	WITHOUT_CLASSIFICATION	1.1905315107723075E-7	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999981197190683	WITHOUT_CLASSIFICATION	1.880280931705086E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998561907103	WITHOUT_CLASSIFICATION	1.4380928973585977E-7	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998561907103	WITHOUT_CLASSIFICATION	1.4380928973585977E-7	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999956379627246	WITHOUT_CLASSIFICATION	4.362037275284218E-6	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999996794467485	WITHOUT_CLASSIFICATION	3.205532515125867E-7	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998607961315	WITHOUT_CLASSIFICATION	1.3920386850625812E-7	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999983220317893	WITHOUT_CLASSIFICATION	1.6779682107413317E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999983220317893	WITHOUT_CLASSIFICATION	1.6779682107413317E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999983220317893	WITHOUT_CLASSIFICATION	1.6779682107413317E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997663115536	WITHOUT_CLASSIFICATION	2.336884464787E-7	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999991168749213	WITHOUT_CLASSIFICATION	8.831250788434051E-7	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999957023326465	WITHOUT_CLASSIFICATION	4.297667353615405E-6	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999799022885192	WITHOUT_CLASSIFICATION	2.0097711480852414E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999208307816	WITHOUT_CLASSIFICATION	7.91692184766176E-8	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999999931612414	WITHOUT_CLASSIFICATION	6.83875860280669E-9	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999999944494431	WITHOUT_CLASSIFICATION	5.550556912407424E-8	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999885776602152	WITHOUT_CLASSIFICATION	1.1422339784815559E-5	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999997593966223	WITHOUT_CLASSIFICATION	2.4060337774163467E-7	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998383844784	WITHOUT_CLASSIFICATION	1.6161552159445693E-7	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999975003520926	WITHOUT_CLASSIFICATION	2.49964790747257E-6	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999975566857306	WITHOUT_CLASSIFICATION	2.4433142693229313E-6	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999982416106392	WITHOUT_CLASSIFICATION	1.7583893607290558E-6	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999997846538033	WITHOUT_CLASSIFICATION	2.153461965924126E-7	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999522004529	WITHOUT_CLASSIFICATION	4.779954718897428E-8	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997568875735	WITHOUT_CLASSIFICATION	2.431124264484644E-7	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999981897949655	WITHOUT_CLASSIFICATION	1.8102050345405407E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999580992704888	WITHOUT_CLASSIFICATION	4.190072951120397E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999580992704888	WITHOUT_CLASSIFICATION	4.190072951120397E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999711353035521	WITHOUT_CLASSIFICATION	2.8864696447977786E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999711353035521	WITHOUT_CLASSIFICATION	2.8864696447977786E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999722943451503	WITHOUT_CLASSIFICATION	2.7705654849720514E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999645935700012	WITHOUT_CLASSIFICATION	3.5406429998784036E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999645935700012	WITHOUT_CLASSIFICATION	3.5406429998784036E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999832653864498	WITHOUT_CLASSIFICATION	1.6734613550228997E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999504933749165	WITHOUT_CLASSIFICATION	4.9506625083631615E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993434979594	WITHOUT_CLASSIFICATION	6.565020405682946E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999991858708093	WITHOUT_CLASSIFICATION	8.14129190755786E-7	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999628149042	WITHOUT_CLASSIFICATION	3.718509574854847E-8	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999504933749165	WITHOUT_CLASSIFICATION	4.9506625083631615E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.999999996505715	WITHOUT_CLASSIFICATION	3.494285020208266E-9	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999993702769109	WITHOUT_CLASSIFICATION	6.297230891164652E-7	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999418173850844	WITHOUT_CLASSIFICATION	5.818261491569418E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999759892195426	WITHOUT_CLASSIFICATION	2.4010780457367318E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999977590838	WITHOUT_CLASSIFICATION	2.2409162837451327E-9	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999824669674394	WITHOUT_CLASSIFICATION	1.753303256054007E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999984576430715	WITHOUT_CLASSIFICATION	1.5423569285170307E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999987882751721	WITHOUT_CLASSIFICATION	1.211724827961573E-6	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999996852794054	WITHOUT_CLASSIFICATION	3.14720594514812E-7	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999926194765267	WITHOUT_CLASSIFICATION	7.380523473257521E-6	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999630699952	WITHOUT_CLASSIFICATION	3.69300047536022E-8	TEST
Set it!	WITHOUT_CLASSIFICATION	0.999994463991659	WITHOUT_CLASSIFICATION	5.536008341052325E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999968585059812	WITHOUT_CLASSIFICATION	3.1414940187881887E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999956659829552	WITHOUT_CLASSIFICATION	4.3340170447626345E-6	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999977170128719	WITHOUT_CLASSIFICATION	2.2829871281404045E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999904040869	WITHOUT_CLASSIFICATION	9.595913104678109E-8	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999367389493	WITHOUT_CLASSIFICATION	6.326105075769937E-8	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999996998449215	WITHOUT_CLASSIFICATION	3.001550785172633E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999996998449215	WITHOUT_CLASSIFICATION	3.001550785172633E-6	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999993504037766	WITHOUT_CLASSIFICATION	6.495962233950215E-7	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999982130405899	WITHOUT_CLASSIFICATION	1.7869594101862879E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999451564852	WITHOUT_CLASSIFICATION	5.484351479694091E-7	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999952039412789	WITHOUT_CLASSIFICATION	4.796058721090971E-6	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999973498177529	WITHOUT_CLASSIFICATION	2.650182247017417E-6	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998085311692	WITHOUT_CLASSIFICATION	1.914688308443916E-7	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999928554872	WITHOUT_CLASSIFICATION	7.144512785962945E-9	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999845718493369	WITHOUT_CLASSIFICATION	1.542815066311634E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999996967730626	WITHOUT_CLASSIFICATION	3.0322693737643764E-7	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999481946938	WITHOUT_CLASSIFICATION	5.180530615104971E-8	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997499434028	WITHOUT_CLASSIFICATION	2.5005659717539077E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9997612574369071	WITHOUT_CLASSIFICATION	2.3874256309281807E-4	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999360060282	WITHOUT_CLASSIFICATION	6.399397178557483E-8	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999012767756	WITHOUT_CLASSIFICATION	9.872322438822577E-7	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999984835920928	WITHOUT_CLASSIFICATION	1.5164079072759493E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999994969356862	WITHOUT_CLASSIFICATION	5.030643137525865E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428579415	WITHOUT_CLASSIFICATION	5.7142058537428596E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428579415	WITHOUT_CLASSIFICATION	5.7142058537428596E-8	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999933934979752	WITHOUT_CLASSIFICATION	6.606502024708229E-6	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999902866974	WITHOUT_CLASSIFICATION	9.71330259372872E-8	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999989026867341	WITHOUT_CLASSIFICATION	1.097313265980525E-6	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999977810124522	WITHOUT_CLASSIFICATION	2.218987547706506E-6	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9999990748797305	WITHOUT_CLASSIFICATION	9.251202695693611E-7	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999823051748135	WITHOUT_CLASSIFICATION	1.769482518655992E-5	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998187045446	WITHOUT_CLASSIFICATION	1.812954554340389E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999564645422	WITHOUT_CLASSIFICATION	4.3535457837984944E-8	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999216281571	WITHOUT_CLASSIFICATION	7.837184294736947E-8	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999140939172	WITHOUT_CLASSIFICATION	8.590608278455438E-8	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997948049694	WITHOUT_CLASSIFICATION	2.0519503069525762E-7	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999564645422	WITHOUT_CLASSIFICATION	4.3535457837984944E-8	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999351398112	WITHOUT_CLASSIFICATION	6.486018877165557E-8	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999280235531	WITHOUT_CLASSIFICATION	7.197644692704713E-8	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999024908054	WITHOUT_CLASSIFICATION	9.750919460556686E-8	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999765987573412	WITHOUT_CLASSIFICATION	2.340124265874978E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999981199017	WITHOUT_CLASSIFICATION	1.8800982948302822E-8	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999275820929	WITHOUT_CLASSIFICATION	7.241790707592158E-8	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999421530691	WITHOUT_CLASSIFICATION	5.7846930943445936E-8	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998101818643	WITHOUT_CLASSIFICATION	1.8981813564148457E-7	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999237451973	WITHOUT_CLASSIFICATION	7.625480261809998E-8	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999966838534482	WITHOUT_CLASSIFICATION	3.3161465516701347E-6	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999983589093275	WITHOUT_CLASSIFICATION	1.641090672549448E-6	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998304462867	WITHOUT_CLASSIFICATION	1.6955371316946557E-7	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999999950360137	WITHOUT_CLASSIFICATION	4.9639863005060075E-8	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994386061823	WITHOUT_CLASSIFICATION	5.613938177005402E-7	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999939640197103	WITHOUT_CLASSIFICATION	6.035980289774047E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999980738275723	WITHOUT_CLASSIFICATION	1.9261724277236545E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999997845931372	WITHOUT_CLASSIFICATION	2.1540686279758494E-6	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998864016907584	WITHOUT_CLASSIFICATION	1.1359830924159681E-4	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998495325347089	WITHOUT_CLASSIFICATION	1.504674652911474E-4	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999602185805	WITHOUT_CLASSIFICATION	3.978141958254068E-8	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996529663301	WITHOUT_CLASSIFICATION	3.4703366983290203E-7	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999315816559	WITHOUT_CLASSIFICATION	6.841834412165757E-8	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999594976519887	WITHOUT_CLASSIFICATION	4.050234801138759E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9997421940723622	WITHOUT_CLASSIFICATION	2.578059276378146E-4	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998455056229	WITHOUT_CLASSIFICATION	1.5449437710804516E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999979177736527	WITHOUT_CLASSIFICATION	2.0822263472988525E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999055747132	WITHOUT_CLASSIFICATION	9.442528689351922E-8	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999777621861	WITHOUT_CLASSIFICATION	2.2237813956117563E-8	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999153932027	WITHOUT_CLASSIFICATION	8.460679732507657E-8	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.999999563898021	WITHOUT_CLASSIFICATION	4.361019790284958E-7	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999920924222	WITHOUT_CLASSIFICATION	7.907577844011326E-9	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999999854633039	WITHOUT_CLASSIFICATION	1.4536696104642876E-7	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999966012865591	WITHOUT_CLASSIFICATION	3.3987134410103703E-6	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998610098506	WITHOUT_CLASSIFICATION	1.3899014941046802E-7	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999993935022213	WITHOUT_CLASSIFICATION	6.064977787121827E-7	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999991302013366	WITHOUT_CLASSIFICATION	8.697986634583768E-7	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999882242426	WITHOUT_CLASSIFICATION	1.1775757321646907E-8	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999988099635	WITHOUT_CLASSIFICATION	1.190036489830436E-8	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999974170310332	WITHOUT_CLASSIFICATION	2.582968966880359E-6	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999344341333	WITHOUT_CLASSIFICATION	6.556586670719508E-8	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999967712995462	WITHOUT_CLASSIFICATION	3.228700453808422E-6	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999905329913	WITHOUT_CLASSIFICATION	9.467008717680578E-9	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999803810031	WITHOUT_CLASSIFICATION	1.9618996792388662E-8	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999929593942	WITHOUT_CLASSIFICATION	7.040605773403766E-9	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999978910157793	WITHOUT_CLASSIFICATION	2.108984220696405E-6	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999865781239	WITHOUT_CLASSIFICATION	1.3421876102526133E-7	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998096089456	WITHOUT_CLASSIFICATION	1.9039105439378428E-7	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999434181179828	WITHOUT_CLASSIFICATION	5.658188201730183E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999977319899337	WITHOUT_CLASSIFICATION	2.268010066422131E-6	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997128675074	WITHOUT_CLASSIFICATION	2.871324925843052E-7	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990019021841	WITHOUT_CLASSIFICATION	9.98097815893125E-6	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999984773201631	WITHOUT_CLASSIFICATION	1.5226798368733083E-6	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999996995126023	WITHOUT_CLASSIFICATION	3.0048739777167544E-7	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999993911737416	WITHOUT_CLASSIFICATION	6.088262583966994E-7	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999766540385	WITHOUT_CLASSIFICATION	2.334596157813013E-8	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999994607497849	WITHOUT_CLASSIFICATION	5.39250215202892E-7	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998544813524	WITHOUT_CLASSIFICATION	1.4551864751763127E-7	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997430062203	WITHOUT_CLASSIFICATION	2.5699377969390757E-7	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999976149697808	WITHOUT_CLASSIFICATION	2.3850302191801047E-6	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999924106218459	WITHOUT_CLASSIFICATION	7.589378154093585E-6	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999999861741698	WITHOUT_CLASSIFICATION	1.3825830203776102E-7	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999991330791528	WITHOUT_CLASSIFICATION	8.669208471953285E-7	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999999015957063	WITHOUT_CLASSIFICATION	9.840429367835109E-8	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9996530310558978	WITHOUT_CLASSIFICATION	3.4696894410220377E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.99999960245978	WITHOUT_CLASSIFICATION	3.975402199848216E-7	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999949398880571	WITHOUT_CLASSIFICATION	5.060111942823536E-6	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990019021841	WITHOUT_CLASSIFICATION	9.98097815893125E-6	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999997347568527	WITHOUT_CLASSIFICATION	2.6524314729388554E-7	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99999919236845	WITHOUT_CLASSIFICATION	8.076315499973417E-7	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999010328957	WITHOUT_CLASSIFICATION	9.896710427475408E-8	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999998291988906	WITHOUT_CLASSIFICATION	1.7080110940781523E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999786708862298	WITHOUT_CLASSIFICATION	2.1329113770211376E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999950399319231	WITHOUT_CLASSIFICATION	4.960068076919379E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999216281571	WITHOUT_CLASSIFICATION	7.837184294736947E-8	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999398981957557	WITHOUT_CLASSIFICATION	6.010180424421071E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999993935022213	WITHOUT_CLASSIFICATION	6.064977787121827E-7	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999958425006381	WITHOUT_CLASSIFICATION	4.157499361950363E-6	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999954642292	WITHOUT_CLASSIFICATION	4.535770815144597E-8	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994283174741	WITHOUT_CLASSIFICATION	5.716825258295593E-7	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999993380885397	WITHOUT_CLASSIFICATION	6.619114604217087E-7	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999992392546005	WITHOUT_CLASSIFICATION	7.607453994976967E-7	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998039887206	WITHOUT_CLASSIFICATION	1.9601127943028546E-7	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999960730884281	WITHOUT_CLASSIFICATION	3.926911571977982E-6	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999991396950901	WITHOUT_CLASSIFICATION	8.603049097874499E-7	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999926731771	WITHOUT_CLASSIFICATION	7.326822882727696E-9	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999974738357	WITHOUT_CLASSIFICATION	2.5261642574951956E-9	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997904697512	WITHOUT_CLASSIFICATION	2.0953024878200977E-7	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998794890667	WITHOUT_CLASSIFICATION	1.2051093339734293E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999806204152	WITHOUT_CLASSIFICATION	1.9379584802539455E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999806204152	WITHOUT_CLASSIFICATION	1.9379584802539455E-7	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999021357304	WITHOUT_CLASSIFICATION	9.78642695623134E-8	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996736417118	WITHOUT_CLASSIFICATION	3.263582881521433E-7	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999993760598717	WITHOUT_CLASSIFICATION	6.2394012838167E-7	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999951566333786	WITHOUT_CLASSIFICATION	4.843366621433809E-6	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999801552176	WITHOUT_CLASSIFICATION	1.9844782467099052E-8	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998212212491	WITHOUT_CLASSIFICATION	1.787787508661355E-7	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999866071956	WITHOUT_CLASSIFICATION	1.339280436736171E-8	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999991167192808	WITHOUT_CLASSIFICATION	8.832807192267404E-7	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998811119154	WITHOUT_CLASSIFICATION	1.1888808450632398E-7	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999850831829067	WITHOUT_CLASSIFICATION	1.4916817093198565E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999987418073403	WITHOUT_CLASSIFICATION	1.2581926596706883E-6	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999977081252567	WITHOUT_CLASSIFICATION	2.2918747433746524E-6	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998572738431	WITHOUT_CLASSIFICATION	1.4272615698146469E-7	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999995219179	WITHOUT_CLASSIFICATION	4.780821718936032E-10	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999997773455197	WITHOUT_CLASSIFICATION	2.2265448022181013E-7	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998987630623	WITHOUT_CLASSIFICATION	1.012369376666621E-7	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999996671152369	WITHOUT_CLASSIFICATION	3.328847631332345E-7	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999985996464822	WITHOUT_CLASSIFICATION	1.4003535178181386E-6	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999920599338	WITHOUT_CLASSIFICATION	7.940066211342834E-8	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999973011332	WITHOUT_CLASSIFICATION	2.698866788954008E-8	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999976370380912	WITHOUT_CLASSIFICATION	2.3629619088195183E-6	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999999957599954	WITHOUT_CLASSIFICATION	4.2400046124102494E-8	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999955500615263	WITHOUT_CLASSIFICATION	4.4499384737404835E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998199156237	WITHOUT_CLASSIFICATION	1.8008437632682907E-7	TEST
implied	WITHOUT_CLASSIFICATION	0.9999709089415338	WITHOUT_CLASSIFICATION	2.9091058466100498E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999988141839549	WITHOUT_CLASSIFICATION	1.1858160451126753E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998672226963	WITHOUT_CLASSIFICATION	1.3277730369184154E-6	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994085555228	WITHOUT_CLASSIFICATION	5.914444771813978E-7	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999893548388	WITHOUT_CLASSIFICATION	1.0645161133135585E-8	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981278522425	WITHOUT_CLASSIFICATION	1.8721477573852384E-6	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998432696264	WITHOUT_CLASSIFICATION	1.5673037365501286E-7	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999995906167164	WITHOUT_CLASSIFICATION	4.093832836019299E-7	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999997298339801	WITHOUT_CLASSIFICATION	2.7016601986332626E-7	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999999969935033	WITHOUT_CLASSIFICATION	3.0064966945003545E-8	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999999985774073	WITHOUT_CLASSIFICATION	1.4225927074801191E-8	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999999170421735	WITHOUT_CLASSIFICATION	8.295782641760963E-8	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999992962870499	WITHOUT_CLASSIFICATION	7.037129501652088E-7	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999975739834479	WITHOUT_CLASSIFICATION	2.426016552140857E-6	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999429291607	WITHOUT_CLASSIFICATION	5.7070839347650585E-8	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999998178830145	WITHOUT_CLASSIFICATION	1.821169854396337E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999874695207492	WITHOUT_CLASSIFICATION	1.2530479250856806E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973478846536	WITHOUT_CLASSIFICATION	2.6521153465677877E-6	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999791490416	WITHOUT_CLASSIFICATION	2.0850958405799187E-8	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999859187316265	WITHOUT_CLASSIFICATION	1.4081268373609058E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999985243561096	WITHOUT_CLASSIFICATION	1.475643890333879E-6	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999975881286323	WITHOUT_CLASSIFICATION	2.4118713676801193E-6	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970216539673	WITHOUT_CLASSIFICATION	2.978346032771387E-6	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9943200874540729	WITHOUT_CLASSIFICATION	0.005679912545927195	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997799122593	WITHOUT_CLASSIFICATION	2.200877406580326E-7	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999995883300627	WITHOUT_CLASSIFICATION	4.1166993732141747E-7	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993903701615	WITHOUT_CLASSIFICATION	6.096298384801052E-7	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988917126373	WITHOUT_CLASSIFICATION	1.108287362635605E-6	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999958995667	WITHOUT_CLASSIFICATION	4.100433326414876E-9	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999988441017287	WITHOUT_CLASSIFICATION	1.155898271310916E-6	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999989656318145	WITHOUT_CLASSIFICATION	1.03436818554036E-6	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999987367650734	WITHOUT_CLASSIFICATION	1.2632349265612986E-6	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999547087259	WITHOUT_CLASSIFICATION	4.5291273982014195E-8	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999861548123582	WITHOUT_CLASSIFICATION	1.3845187641790586E-5	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999994117358734	WITHOUT_CLASSIFICATION	5.882641267099137E-7	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999998278139769	WITHOUT_CLASSIFICATION	1.7218602306083545E-7	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999996307454281	WITHOUT_CLASSIFICATION	3.6925457192160537E-7	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999996754560316	WITHOUT_CLASSIFICATION	3.245439684000593E-6	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998965110798	WITHOUT_CLASSIFICATION	1.0348892025472997E-7	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999983603874382	WITHOUT_CLASSIFICATION	1.6396125617722102E-6	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999986060178808	WITHOUT_CLASSIFICATION	1.393982119277352E-6	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999994701576226	WITHOUT_CLASSIFICATION	5.298423774558297E-7	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.999999969146776	WITHOUT_CLASSIFICATION	3.085322394080993E-8	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999908437538771	WITHOUT_CLASSIFICATION	9.156246122896687E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999030853656	WITHOUT_CLASSIFICATION	9.691463453107174E-8	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999405756842	WITHOUT_CLASSIFICATION	5.942431580023321E-8	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999998444057667	WITHOUT_CLASSIFICATION	1.5559423327773557E-7	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999405756842	WITHOUT_CLASSIFICATION	5.942431580023321E-8	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998378943221	WITHOUT_CLASSIFICATION	1.6210567796499084E-7	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999840845534	WITHOUT_CLASSIFICATION	1.591544658864543E-8	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999785219658	WITHOUT_CLASSIFICATION	2.147803419856304E-7	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999624835606	WITHOUT_CLASSIFICATION	3.751643933962947E-8	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999847660411	WITHOUT_CLASSIFICATION	1.523395889044376E-8	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998944087303	WITHOUT_CLASSIFICATION	1.0559126966940817E-7	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999992743977995	WITHOUT_CLASSIFICATION	7.256022005263241E-7	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998240827930492	WITHOUT_CLASSIFICATION	1.7591720695080961E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999974988718384	WITHOUT_CLASSIFICATION	2.5011281615407065E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999945296627	WITHOUT_CLASSIFICATION	5.470337283872301E-9	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999962141377676	WITHOUT_CLASSIFICATION	3.785862232340904E-6	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998334472979	WITHOUT_CLASSIFICATION	1.66552702194935E-7	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999824942991	WITHOUT_CLASSIFICATION	1.7505700891563553E-7	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999683415180113	WITHOUT_CLASSIFICATION	3.1658481988638326E-5	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999989656282006	WITHOUT_CLASSIFICATION	1.0343717994203688E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999918390319	WITHOUT_CLASSIFICATION	8.160968167081096E-9	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999856081038	WITHOUT_CLASSIFICATION	1.4391896321848951E-8	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997088104691	WITHOUT_CLASSIFICATION	2.911895308666929E-7	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999994521337	WITHOUT_CLASSIFICATION	5.47866292539221E-9	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999973025844401	WITHOUT_CLASSIFICATION	2.697415559896193E-6	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999994481997577	WITHOUT_CLASSIFICATION	5.518002422397844E-7	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999997450874989	WITHOUT_CLASSIFICATION	2.549125010739911E-7	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997952913360325	WITHOUT_CLASSIFICATION	2.0470866396745605E-4	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999654831789	WITHOUT_CLASSIFICATION	3.451682106897429E-8	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999967125818299	WITHOUT_CLASSIFICATION	3.2874181701886598E-6	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999976434642946	WITHOUT_CLASSIFICATION	2.3565357054034636E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999942631264392	WITHOUT_CLASSIFICATION	5.736873560789181E-6	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999986932140651	WITHOUT_CLASSIFICATION	1.3067859349806123E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999716773624	WITHOUT_CLASSIFICATION	2.8322637527708433E-8	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999997732247252	WITHOUT_CLASSIFICATION	2.2677527479934275E-7	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999965824544237	WITHOUT_CLASSIFICATION	3.4175455763276023E-6	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999982897447587	WITHOUT_CLASSIFICATION	1.7102552413271217E-6	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999951001703	WITHOUT_CLASSIFICATION	4.89982970626436E-8	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999835529410142	WITHOUT_CLASSIFICATION	1.644705898589509E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999998870067524	WITHOUT_CLASSIFICATION	1.1299324760929748E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999839192361807	WITHOUT_CLASSIFICATION	1.60807638193488E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999974469114089	WITHOUT_CLASSIFICATION	2.553088591096333E-6	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999725608238	WITHOUT_CLASSIFICATION	2.7439176161434896E-8	TEST
important!!	WITHOUT_CLASSIFICATION	0.999975878377047	WITHOUT_CLASSIFICATION	2.4121622952935393E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996713402574	WITHOUT_CLASSIFICATION	3.286597425556486E-7	TEST
an association	WITHOUT_CLASSIFICATION	0.9999323603018218	WITHOUT_CLASSIFICATION	6.763969817825803E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999998825891154	WITHOUT_CLASSIFICATION	1.1741088454127366E-7	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9994051117096521	WITHOUT_CLASSIFICATION	5.948882903479696E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999976434642946	WITHOUT_CLASSIFICATION	2.3565357054034636E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999624425617929	WITHOUT_CLASSIFICATION	3.755743820719657E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999994975916631	WITHOUT_CLASSIFICATION	5.024083368837195E-7	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999623613728651	WITHOUT_CLASSIFICATION	3.763862713496786E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999990432160912	WITHOUT_CLASSIFICATION	9.567839088200846E-7	TEST
special case	WITHOUT_CLASSIFICATION	0.9999994893384166	WITHOUT_CLASSIFICATION	5.106615832531438E-7	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999979437853043	WITHOUT_CLASSIFICATION	2.056214695785968E-6	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999968118074	WITHOUT_CLASSIFICATION	3.188192510383629E-9	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999989805021978	WITHOUT_CLASSIFICATION	1.019497802281727E-6	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999982621394441	WITHOUT_CLASSIFICATION	1.737860555832443E-6	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998614708051	WITHOUT_CLASSIFICATION	1.385291949203478E-7	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999978392597174	WITHOUT_CLASSIFICATION	2.1607402825146527E-6	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999992552570364	WITHOUT_CLASSIFICATION	7.447429636685217E-7	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999951493416132	WITHOUT_CLASSIFICATION	4.850658386953365E-6	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999916629736371	WITHOUT_CLASSIFICATION	8.33702636294E-6	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999865746405	WITHOUT_CLASSIFICATION	1.3425359542404868E-8	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999480501144	WITHOUT_CLASSIFICATION	5.1949885529901746E-8	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999424277178	WITHOUT_CLASSIFICATION	5.757228222697754E-8	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999996777827928	WITHOUT_CLASSIFICATION	3.2221720731312994E-7	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999999675918033	WITHOUT_CLASSIFICATION	3.240819673859419E-8	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999624425617929	WITHOUT_CLASSIFICATION	3.755743820719657E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999996364579843	WITHOUT_CLASSIFICATION	3.6354201569055488E-6	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999990400029241	WITHOUT_CLASSIFICATION	9.59997075870825E-7	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999998691576839	WITHOUT_CLASSIFICATION	1.3084231609533013E-6	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999975059637	WITHOUT_CLASSIFICATION	2.4940362977881882E-8	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997436408705	WITHOUT_CLASSIFICATION	2.5635912947419913E-7	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999937764102735	WITHOUT_CLASSIFICATION	6.223589726424353E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999937764102735	WITHOUT_CLASSIFICATION	6.223589726424353E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999142275022	WITHOUT_CLASSIFICATION	8.577249777000908E-8	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999937764102735	WITHOUT_CLASSIFICATION	6.223589726424353E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999937764102735	WITHOUT_CLASSIFICATION	6.223589726424353E-6	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999992874556655	WITHOUT_CLASSIFICATION	7.125443345289069E-7	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999985891385972	WITHOUT_CLASSIFICATION	1.410861402836887E-6	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997911714669	WITHOUT_CLASSIFICATION	2.08828533125794E-7	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998188563929	WITHOUT_CLASSIFICATION	1.8114360704009497E-7	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999878319187	WITHOUT_CLASSIFICATION	1.2168081279598209E-8	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999972412129428	WITHOUT_CLASSIFICATION	2.7587870571855927E-6	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999993482642688	WITHOUT_CLASSIFICATION	6.517357311663818E-7	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999992387685505	WITHOUT_CLASSIFICATION	7.612314496800199E-7	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999982600426186	WITHOUT_CLASSIFICATION	1.7399573814644736E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.999971100145696	WITHOUT_CLASSIFICATION	2.8899854304051782E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999990368700856	WITHOUT_CLASSIFICATION	9.631299144381918E-7	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999996485732804	WITHOUT_CLASSIFICATION	3.5142671951090965E-7	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999993863191271	WITHOUT_CLASSIFICATION	6.13680872882902E-7	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999977653465452	WITHOUT_CLASSIFICATION	2.2346534549161855E-6	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999228068849	WITHOUT_CLASSIFICATION	7.719311505227554E-8	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999662658355287	WITHOUT_CLASSIFICATION	3.373416447117321E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991552181606	WITHOUT_CLASSIFICATION	8.447818393073007E-7	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999998037705281	WITHOUT_CLASSIFICATION	1.9622947190343093E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999893520979983	WITHOUT_CLASSIFICATION	1.0647902001595723E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999971983239235	WITHOUT_CLASSIFICATION	2.801676076525758E-6	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.999998667036532	WITHOUT_CLASSIFICATION	1.3329634680850025E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.999997179156717	WITHOUT_CLASSIFICATION	2.820843283080403E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991552181606	WITHOUT_CLASSIFICATION	8.447818393073007E-7	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999942631264392	WITHOUT_CLASSIFICATION	5.736873560789181E-6	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999991116206308	WITHOUT_CLASSIFICATION	8.883793692250046E-7	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996966147443	WITHOUT_CLASSIFICATION	3.033852556991363E-7	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995941760168	WITHOUT_CLASSIFICATION	4.0582398321685776E-7	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999984737551063	WITHOUT_CLASSIFICATION	1.5262448937534803E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999618039439	WITHOUT_CLASSIFICATION	3.819605621982465E-8	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999887658993585	WITHOUT_CLASSIFICATION	1.1234100641526964E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999988721245096	WITHOUT_CLASSIFICATION	1.1278754904273644E-6	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999998131889719	WITHOUT_CLASSIFICATION	1.8681102810863566E-6	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999141684341	WITHOUT_CLASSIFICATION	8.583156586042166E-8	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999998240839392	WITHOUT_CLASSIFICATION	1.7591606083110664E-7	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992488976669	WITHOUT_CLASSIFICATION	7.511023331020945E-7	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999990641316469	WITHOUT_CLASSIFICATION	9.35868353158514E-7	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996584330763	WITHOUT_CLASSIFICATION	3.415669237648723E-7	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999885087740624	WITHOUT_CLASSIFICATION	1.1491225937635392E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999128877841	WITHOUT_CLASSIFICATION	8.711221590109372E-8	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999985757715768	WITHOUT_CLASSIFICATION	1.4242284232323165E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999998227661645	WITHOUT_CLASSIFICATION	1.7723383550860213E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999992735093802	WITHOUT_CLASSIFICATION	7.264906197202274E-7	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999960316154122	WITHOUT_CLASSIFICATION	3.968384587821328E-6	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999991000933883	WITHOUT_CLASSIFICATION	8.999066115795524E-7	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999991334414978	WITHOUT_CLASSIFICATION	8.665585023047457E-7	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999994287396	WITHOUT_CLASSIFICATION	5.712603716704316E-10	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.999998131889719	WITHOUT_CLASSIFICATION	1.8681102810863566E-6	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.999999781737572	WITHOUT_CLASSIFICATION	2.1826242791660316E-7	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999998804812695	WITHOUT_CLASSIFICATION	1.1951873057135845E-7	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998866984946	WITHOUT_CLASSIFICATION	1.133015053881057E-7	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999970766991773	WITHOUT_CLASSIFICATION	2.9233008228245424E-6	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904840101751	WITHOUT_CLASSIFICATION	9.515989824818134E-6	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999898178919985	WITHOUT_CLASSIFICATION	1.0182108001541716E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999961775193396	WITHOUT_CLASSIFICATION	3.822480660461462E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999995952549352	WITHOUT_CLASSIFICATION	4.0474506491517813E-7	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.999999553299197	WITHOUT_CLASSIFICATION	4.4670080297964024E-7	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999865958633066	WITHOUT_CLASSIFICATION	1.3404136693430876E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999749427528	WITHOUT_CLASSIFICATION	2.505724719510406E-7	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999686252352	WITHOUT_CLASSIFICATION	3.137476483073781E-8	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999996652347246	WITHOUT_CLASSIFICATION	3.3476527537855653E-7	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999990714895167	WITHOUT_CLASSIFICATION	9.28510483273089E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999917123609312	WITHOUT_CLASSIFICATION	8.28763906883251E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999508725794	WITHOUT_CLASSIFICATION	4.91274204988369E-8	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999749427528	WITHOUT_CLASSIFICATION	2.505724719510406E-7	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999984540387948	WITHOUT_CLASSIFICATION	1.5459612052044675E-6	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999996480953097	WITHOUT_CLASSIFICATION	3.519046903516581E-7	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998086470516	WITHOUT_CLASSIFICATION	1.913529483770703E-7	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999954077683718	WITHOUT_CLASSIFICATION	4.592231628207552E-6	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999993323231338	WITHOUT_CLASSIFICATION	6.676768662875866E-7	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999998728325528	WITHOUT_CLASSIFICATION	1.2716744736382585E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998945362325	WITHOUT_CLASSIFICATION	1.0546376751727643E-7	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982626451211	WITHOUT_CLASSIFICATION	1.737354878937942E-6	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996266966542	WITHOUT_CLASSIFICATION	3.7330334584578707E-7	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974985329804	WITHOUT_CLASSIFICATION	2.5014670195977584E-6	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994310081161	WITHOUT_CLASSIFICATION	5.68991883961592E-7	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244721906	WITHOUT_CLASSIFICATION	5.755278095322215E-7	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999909859149	WITHOUT_CLASSIFICATION	9.014085098274966E-8	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999909859149	WITHOUT_CLASSIFICATION	9.014085098274966E-8	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999971001879074	WITHOUT_CLASSIFICATION	2.899812092523785E-6	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998735925925	WITHOUT_CLASSIFICATION	1.2640740752143125E-7	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999991587215072	WITHOUT_CLASSIFICATION	8.41278492802736E-7	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.999998408801347	WITHOUT_CLASSIFICATION	1.5911986528438285E-6	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999979283896062	WITHOUT_CLASSIFICATION	2.071610393789046E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977477651433	WITHOUT_CLASSIFICATION	2.2522348567966426E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671181714744	WITHOUT_CLASSIFICATION	3.28818285256812E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798032434956	WITHOUT_CLASSIFICATION	2.019675650448361E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.999999023058721	WITHOUT_CLASSIFICATION	9.769412790244452E-7	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914295041772	WITHOUT_CLASSIFICATION	8.57049582282933E-6	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977477651433	WITHOUT_CLASSIFICATION	2.2522348567966426E-6	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671181714744	WITHOUT_CLASSIFICATION	3.28818285256812E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798032434956	WITHOUT_CLASSIFICATION	2.019675650448361E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999911002339158	WITHOUT_CLASSIFICATION	8.899766084123736E-6	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999951209752274	WITHOUT_CLASSIFICATION	4.879024772692555E-6	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998580899225	WITHOUT_CLASSIFICATION	1.4191007744860328E-7	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999996082469459	WITHOUT_CLASSIFICATION	3.917530541370545E-7	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999992439710822	WITHOUT_CLASSIFICATION	7.560289178428912E-7	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.999990717950906	WITHOUT_CLASSIFICATION	9.282049093924225E-6	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995286755243	WITHOUT_CLASSIFICATION	4.713244755631849E-7	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999960684746392	WITHOUT_CLASSIFICATION	3.931525360816662E-6	TEST
stats	WITHOUT_CLASSIFICATION	0.9999698011127023	WITHOUT_CLASSIFICATION	3.0198887297737544E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999941955736246	WITHOUT_CLASSIFICATION	5.804426375429704E-6	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999982354403707	WITHOUT_CLASSIFICATION	1.7645596292759246E-6	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994470061394527	WITHOUT_CLASSIFICATION	5.529938605472818E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999945680803047	WITHOUT_CLASSIFICATION	5.431919695314738E-6	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999984169604256	WITHOUT_CLASSIFICATION	1.5830395744030266E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999840705568	WITHOUT_CLASSIFICATION	1.5929443218147256E-8	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999997513938631	WITHOUT_CLASSIFICATION	2.4860613692934413E-7	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995368024602702	WITHOUT_CLASSIFICATION	4.6319753972970504E-4	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999777216093149	WITHOUT_CLASSIFICATION	2.227839068512566E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999992984234103	WITHOUT_CLASSIFICATION	7.015765897589744E-7	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999964483033642	WITHOUT_CLASSIFICATION	3.5516966357085117E-6	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999795565411	WITHOUT_CLASSIFICATION	2.0443458939130608E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998143709166	WITHOUT_CLASSIFICATION	1.8562908340852538E-7	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999997026406864	WITHOUT_CLASSIFICATION	2.9735931356963633E-7	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999661521133	WITHOUT_CLASSIFICATION	3.384788664268429E-8	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999997481892887	WITHOUT_CLASSIFICATION	2.518107113183448E-7	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999990815169767	WITHOUT_CLASSIFICATION	9.184830232982339E-7	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999740553472746	WITHOUT_CLASSIFICATION	2.594465272544794E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999335420991895	WITHOUT_CLASSIFICATION	6.645790081052409E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998590804413	WITHOUT_CLASSIFICATION	1.4091955868529243E-7	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751483265609	WITHOUT_CLASSIFICATION	2.4851673439155416E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110551032668	WITHOUT_CLASSIFICATION	8.894489673324222E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998873348528	WITHOUT_CLASSIFICATION	1.1266514720459667E-6	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998873348528	WITHOUT_CLASSIFICATION	1.1266514720459667E-6	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999996587964541	WITHOUT_CLASSIFICATION	3.412035458914683E-6	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999786366175373	WITHOUT_CLASSIFICATION	2.1363382462670487E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999994412680361	WITHOUT_CLASSIFICATION	5.587319638514626E-7	TEST
/	WITHOUT_CLASSIFICATION	0.9997612574369071	WITHOUT_CLASSIFICATION	2.3874256309281807E-4	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999985598927928	WITHOUT_CLASSIFICATION	1.4401072071425908E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999327334264	WITHOUT_CLASSIFICATION	6.726657364129329E-8	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.999986588302278	WITHOUT_CLASSIFICATION	1.3411697721877962E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999993798551238	WITHOUT_CLASSIFICATION	6.201448762808095E-7	TEST
do a check	WITHOUT_CLASSIFICATION	0.999999767656576	WITHOUT_CLASSIFICATION	2.3234342394588508E-7	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982885029407	WITHOUT_CLASSIFICATION	1.7114970593779817E-6	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983457254701	WITHOUT_CLASSIFICATION	1.6542745299330386E-6	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979096317854	WITHOUT_CLASSIFICATION	2.090368214697766E-6	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949377244619	WITHOUT_CLASSIFICATION	5.0622755380778514E-6	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979615110397	WITHOUT_CLASSIFICATION	2.0384889602615437E-6	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879180377202	WITHOUT_CLASSIFICATION	1.2081962279691297E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988672724509	WITHOUT_CLASSIFICATION	1.1327275491608925E-6	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984689646827	WITHOUT_CLASSIFICATION	1.5310353173010988E-6	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999847062571	WITHOUT_CLASSIFICATION	1.529374289981715E-6	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941872549886	WITHOUT_CLASSIFICATION	5.812745011427028E-6	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916000562712	WITHOUT_CLASSIFICATION	8.399943728848132E-6	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999513212677	WITHOUT_CLASSIFICATION	4.867873216054694E-8	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999722189728322	WITHOUT_CLASSIFICATION	2.7781027167765457E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999988844932282	WITHOUT_CLASSIFICATION	1.115506771801557E-5	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999839295326	WITHOUT_CLASSIFICATION	1.6070467347651224E-8	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999525759169	WITHOUT_CLASSIFICATION	4.74240830795441E-8	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999998281092994	WITHOUT_CLASSIFICATION	1.7189070043722828E-7	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999990668979496	WITHOUT_CLASSIFICATION	9.331020503225085E-7	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999832352594	WITHOUT_CLASSIFICATION	1.6764740652433508E-8	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999988844932282	WITHOUT_CLASSIFICATION	1.115506771801557E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999988844932282	WITHOUT_CLASSIFICATION	1.115506771801557E-5	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999965891186293	WITHOUT_CLASSIFICATION	3.4108813706707546E-6	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999995417497566	WITHOUT_CLASSIFICATION	4.5825024344469187E-7	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999784548155327	WITHOUT_CLASSIFICATION	2.154518446733886E-5	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999977647680867	WITHOUT_CLASSIFICATION	2.2352319133629437E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999968585059812	WITHOUT_CLASSIFICATION	3.1414940187881887E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999964483033642	WITHOUT_CLASSIFICATION	3.5516966357085117E-6	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999972266916741	WITHOUT_CLASSIFICATION	2.7733083258912407E-6	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998385622796	WITHOUT_CLASSIFICATION	1.6143772047821308E-7	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999982932409873	WITHOUT_CLASSIFICATION	1.7067590126354203E-6	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931162763122	WITHOUT_CLASSIFICATION	6.883723687877164E-6	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999998501951028	WITHOUT_CLASSIFICATION	1.4980489719993648E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958294782809	WITHOUT_CLASSIFICATION	4.170521719043123E-6	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999993276916289	WITHOUT_CLASSIFICATION	6.72308371159134E-7	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999993276916289	WITHOUT_CLASSIFICATION	6.72308371159134E-7	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988823540705	WITHOUT_CLASSIFICATION	1.1176459294570054E-6	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988823540705	WITHOUT_CLASSIFICATION	1.1176459294570054E-6	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976739175425	WITHOUT_CLASSIFICATION	2.3260824575129494E-6	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957239269831	WITHOUT_CLASSIFICATION	4.276073016970354E-6	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999982400192049	WITHOUT_CLASSIFICATION	1.7599807950668855E-6	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519255368834	WITHOUT_CLASSIFICATION	4.807446311658758E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999998371058874	WITHOUT_CLASSIFICATION	1.6289411266396135E-7	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998316490625	WITHOUT_CLASSIFICATION	1.6835093745994898E-7	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996685370679	WITHOUT_CLASSIFICATION	3.3146293211192685E-6	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996929690171	WITHOUT_CLASSIFICATION	3.0703098278287553E-7	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999993434337308	WITHOUT_CLASSIFICATION	6.565662692820492E-7	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999272588375945	WITHOUT_CLASSIFICATION	7.274116240549839E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988450210102	WITHOUT_CLASSIFICATION	1.1549789897038012E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999993651616083	WITHOUT_CLASSIFICATION	6.348383917744795E-7	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998451733209	WITHOUT_CLASSIFICATION	1.5482667918025127E-7	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998367795191	WITHOUT_CLASSIFICATION	1.6322048095456785E-7	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999988957539252	WITHOUT_CLASSIFICATION	1.104246074787667E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999988957539252	WITHOUT_CLASSIFICATION	1.104246074787667E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999988957539252	WITHOUT_CLASSIFICATION	1.104246074787667E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996050295071	WITHOUT_CLASSIFICATION	3.949704928178173E-7	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999981394460129	WITHOUT_CLASSIFICATION	1.860553987128697E-6	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999358537913	WITHOUT_CLASSIFICATION	6.414620867012224E-8	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999569426042152	WITHOUT_CLASSIFICATION	4.3057395784912525E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946159157432	WITHOUT_CLASSIFICATION	5.3840842566981825E-6	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543073224467	WITHOUT_CLASSIFICATION	4.569267755327984E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999547676076	WITHOUT_CLASSIFICATION	4.5232392283714874E-8	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999406358594	WITHOUT_CLASSIFICATION	5.936414059443736E-7	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999941196712	WITHOUT_CLASSIFICATION	5.880328850901465E-9	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999665919969	WITHOUT_CLASSIFICATION	3.3408003224012615E-8	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999981248027	WITHOUT_CLASSIFICATION	1.875197366520329E-9	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999998427352106	WITHOUT_CLASSIFICATION	1.5726478941770773E-7	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987748986162	WITHOUT_CLASSIFICATION	1.2251013838130125E-6	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999529059891	WITHOUT_CLASSIFICATION	4.709401085580723E-8	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999984416328048	WITHOUT_CLASSIFICATION	1.5583671951511574E-6	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999998946998102	WITHOUT_CLASSIFICATION	1.0530018980821387E-7	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999990398590481	WITHOUT_CLASSIFICATION	9.601409519030372E-7	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999988229526339	WITHOUT_CLASSIFICATION	1.1770473661874088E-6	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999985982426575	WITHOUT_CLASSIFICATION	1.401757342533242E-6	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999600747075	WITHOUT_CLASSIFICATION	3.992529254760773E-8	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999655475368	WITHOUT_CLASSIFICATION	3.4452463272108595E-8	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999991636571125	WITHOUT_CLASSIFICATION	8.363428874985907E-7	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999509645776	WITHOUT_CLASSIFICATION	4.903542242346503E-8	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999958100827081	WITHOUT_CLASSIFICATION	4.1899172919567335E-6	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999994447190742	WITHOUT_CLASSIFICATION	5.55280925806013E-7	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998238787065	WITHOUT_CLASSIFICATION	1.761212935879899E-7	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999996097736228	WITHOUT_CLASSIFICATION	3.902263772430392E-7	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.999998534018319	WITHOUT_CLASSIFICATION	1.465981681003756E-6	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998406192804	WITHOUT_CLASSIFICATION	1.5938071972151024E-7	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999997140485411	WITHOUT_CLASSIFICATION	2.8595145890797115E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999440830473	WITHOUT_CLASSIFICATION	5.591695265729051E-8	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999999962233952	WITHOUT_CLASSIFICATION	3.776604800875827E-8	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999991999893058	WITHOUT_CLASSIFICATION	8.000106942441651E-7	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999808497962	WITHOUT_CLASSIFICATION	1.9150203760364243E-8	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999689708205393	WITHOUT_CLASSIFICATION	3.102917946080932E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999996452625818	WITHOUT_CLASSIFICATION	3.547374182707359E-7	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999962146479	WITHOUT_CLASSIFICATION	3.785352196478766E-9	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999997259914853	WITHOUT_CLASSIFICATION	2.740085146036803E-7	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999335386514	WITHOUT_CLASSIFICATION	6.646134862000618E-8	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999998989368595	WITHOUT_CLASSIFICATION	1.0106314058406882E-7	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999865870084	WITHOUT_CLASSIFICATION	1.3412991526446534E-8	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995655505624	WITHOUT_CLASSIFICATION	4.3444943776265846E-7	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999995770522437	WITHOUT_CLASSIFICATION	4.22947756190718E-7	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999628651769	WITHOUT_CLASSIFICATION	3.713482317983489E-8	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999994410706342	WITHOUT_CLASSIFICATION	5.589293657072765E-7	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999997281751278	WITHOUT_CLASSIFICATION	2.7182487215985973E-7	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999998021478881	WITHOUT_CLASSIFICATION	1.9785211190552073E-7	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999967686919229	WITHOUT_CLASSIFICATION	3.231308077211064E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999988788809647	WITHOUT_CLASSIFICATION	1.1211190352511096E-6	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999245626189207	WITHOUT_CLASSIFICATION	7.543738107920766E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999504715972	WITHOUT_CLASSIFICATION	4.9528402918533706E-8	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999685159949623	WITHOUT_CLASSIFICATION	3.1484005037644854E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999993382846799	WITHOUT_CLASSIFICATION	6.617153201115152E-7	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99998852795431	WITHOUT_CLASSIFICATION	1.1472045689979757E-5	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999996573373684	WITHOUT_CLASSIFICATION	3.4266263158830524E-7	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999953915073141	WITHOUT_CLASSIFICATION	4.608492685936672E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999143762555635	WITHOUT_CLASSIFICATION	8.562374443650791E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999994306808541	WITHOUT_CLASSIFICATION	5.693191459239938E-7	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999035999254	WITHOUT_CLASSIFICATION	9.640007459838754E-7	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999793167095709	WITHOUT_CLASSIFICATION	2.06832904291198E-5	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998013858752	WITHOUT_CLASSIFICATION	1.9861412494618181E-7	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999874573646	WITHOUT_CLASSIFICATION	1.2542635267427009E-8	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999957534424064	WITHOUT_CLASSIFICATION	4.246557593513813E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999991257064204	WITHOUT_CLASSIFICATION	8.742935797007515E-7	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998523489102	WITHOUT_CLASSIFICATION	1.4765108971973833E-7	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999971796438	WITHOUT_CLASSIFICATION	2.820356197813512E-9	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999994887615	WITHOUT_CLASSIFICATION	5.112385896745584E-10	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999196048405	WITHOUT_CLASSIFICATION	8.039515956238156E-8	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999613385916891	WITHOUT_CLASSIFICATION	3.866140831085883E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999613385916891	WITHOUT_CLASSIFICATION	3.866140831085883E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999987384741513	WITHOUT_CLASSIFICATION	1.2615258486796998E-6	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999974785618297	WITHOUT_CLASSIFICATION	2.5214381702948804E-6	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999996026264758	WITHOUT_CLASSIFICATION	3.9737352414625087E-7	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998417328663	WITHOUT_CLASSIFICATION	1.5826713374783989E-7	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999833648625	WITHOUT_CLASSIFICATION	1.663513751529724E-8	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999953741667376	WITHOUT_CLASSIFICATION	4.625833262417885E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999533396917	WITHOUT_CLASSIFICATION	4.6660308383166313E-8	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999995144787832	WITHOUT_CLASSIFICATION	4.855212167544231E-7	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999992824993791	WITHOUT_CLASSIFICATION	7.175006207794834E-7	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999998797801542	WITHOUT_CLASSIFICATION	1.2021984579431872E-6	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999836684278	WITHOUT_CLASSIFICATION	1.6331572176607937E-8	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999827778291	WITHOUT_CLASSIFICATION	1.7222170834349537E-8	TEST
a composite key	WITHOUT_CLASSIFICATION	0.999999456500825	WITHOUT_CLASSIFICATION	5.434991749550501E-7	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999854561239	WITHOUT_CLASSIFICATION	1.4543876145916198E-8	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996697808172	WITHOUT_CLASSIFICATION	3.3021918276734673E-7	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999906775948261	WITHOUT_CLASSIFICATION	9.322405173917271E-6	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999999018031955	WITHOUT_CLASSIFICATION	9.819680449190859E-8	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999988561060732	WITHOUT_CLASSIFICATION	1.1438939268443817E-6	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999985147587034	WITHOUT_CLASSIFICATION	1.4852412965431276E-6	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999944902726251	WITHOUT_CLASSIFICATION	5.509727374838543E-6	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999993059215818	WITHOUT_CLASSIFICATION	6.940784181152994E-7	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999999403131672	WITHOUT_CLASSIFICATION	5.968683280724148E-8	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999906286620992	WITHOUT_CLASSIFICATION	9.371337900775555E-6	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999986537007131	WITHOUT_CLASSIFICATION	1.3462992869084624E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999989822879	WITHOUT_CLASSIFICATION	1.0177120941047284E-8	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999994327529114	WITHOUT_CLASSIFICATION	5.672470886992218E-7	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998216696049	WITHOUT_CLASSIFICATION	1.7833039514835767E-7	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999995469489369	WITHOUT_CLASSIFICATION	4.53051063064987E-7	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999976250002325	WITHOUT_CLASSIFICATION	2.374999767523706E-6	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999998146618229	WITHOUT_CLASSIFICATION	1.8533817716670556E-7	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999984829606309	WITHOUT_CLASSIFICATION	1.5170393691574452E-6	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998901871271	WITHOUT_CLASSIFICATION	1.098128728246861E-7	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999998900017499	WITHOUT_CLASSIFICATION	1.0999824996176293E-7	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999988003170864	WITHOUT_CLASSIFICATION	1.1996829136486389E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994553550479	WITHOUT_CLASSIFICATION	5.446449521747038E-7	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994553550479	WITHOUT_CLASSIFICATION	5.446449521747038E-7	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999996050564788	WITHOUT_CLASSIFICATION	3.949435212851374E-7	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999976826387246	WITHOUT_CLASSIFICATION	2.3173612753304033E-6	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999999431806494	WITHOUT_CLASSIFICATION	5.681935060761267E-7	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999940897877857	WITHOUT_CLASSIFICATION	5.91021221430244E-6	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999999860948585	WITHOUT_CLASSIFICATION	1.3905141507827605E-7	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999991267382348	WITHOUT_CLASSIFICATION	8.732617652005739E-6	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999968835901923	WITHOUT_CLASSIFICATION	3.1164098076917418E-6	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999999630031393	WITHOUT_CLASSIFICATION	3.699686063482357E-8	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999997743343632	WITHOUT_CLASSIFICATION	2.2566563675169487E-7	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9997862183531795	WITHOUT_CLASSIFICATION	2.13781646820496E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997467910527	WITHOUT_CLASSIFICATION	2.5320894725138214E-7	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999509065958	WITHOUT_CLASSIFICATION	4.909340417208529E-8	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999965966770854	WITHOUT_CLASSIFICATION	3.4033229145583912E-6	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999997254663175	WITHOUT_CLASSIFICATION	2.745336824986999E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999997276881634	WITHOUT_CLASSIFICATION	2.723118366917477E-7	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999969629183234	WITHOUT_CLASSIFICATION	3.0370816765282798E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999799324354169	WITHOUT_CLASSIFICATION	2.006756458304289E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999799324354169	WITHOUT_CLASSIFICATION	2.006756458304289E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999938467888	WITHOUT_CLASSIFICATION	6.153211201746847E-9	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999994416977723	WITHOUT_CLASSIFICATION	5.583022276371752E-7	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999986118923931	WITHOUT_CLASSIFICATION	1.3881076069785964E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999851166688	WITHOUT_CLASSIFICATION	1.4883331204757632E-7	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999802249275	WITHOUT_CLASSIFICATION	1.9775072493516962E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999444651746382	WITHOUT_CLASSIFICATION	5.5534825361860075E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999934169979	WITHOUT_CLASSIFICATION	6.583002105023748E-8	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999996255140693	WITHOUT_CLASSIFICATION	3.744859306321864E-7	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998394350955	WITHOUT_CLASSIFICATION	1.6056490450793427E-7	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999967417955247	WITHOUT_CLASSIFICATION	3.2582044753379397E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999967417955247	WITHOUT_CLASSIFICATION	3.2582044753379397E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999988289293399	WITHOUT_CLASSIFICATION	1.17107066017625E-6	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999891748047	WITHOUT_CLASSIFICATION	1.0825195309073103E-8	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999999538143214	WITHOUT_CLASSIFICATION	4.618567858761461E-8	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999823769911357	WITHOUT_CLASSIFICATION	1.762300886426652E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999996066614194	WITHOUT_CLASSIFICATION	3.9333858052527365E-7	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999822016393	WITHOUT_CLASSIFICATION	1.7798360652850102E-8	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999987419088349	WITHOUT_CLASSIFICATION	1.2580911651301366E-6	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999928683409235	WITHOUT_CLASSIFICATION	7.131659076605888E-6	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999823369584	WITHOUT_CLASSIFICATION	1.7663041611106598E-8	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993434979594	WITHOUT_CLASSIFICATION	6.565020405682946E-7	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999990790827457	WITHOUT_CLASSIFICATION	9.209172544066088E-7	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999843880223596	WITHOUT_CLASSIFICATION	1.561197764047556E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99999949834961	WITHOUT_CLASSIFICATION	5.016503899774827E-7	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999185130850651	WITHOUT_CLASSIFICATION	8.14869149349289E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999995617047597	WITHOUT_CLASSIFICATION	4.382952403100378E-6	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999722943451503	WITHOUT_CLASSIFICATION	2.7705654849720514E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981278522425	WITHOUT_CLASSIFICATION	1.8721477573852384E-6	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999621855903	WITHOUT_CLASSIFICATION	3.7814409741931384E-8	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999995545150568	WITHOUT_CLASSIFICATION	4.454849432354267E-7	TEST
by default	WITHOUT_CLASSIFICATION	0.9999998000076897	WITHOUT_CLASSIFICATION	1.9999231035787692E-7	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999968401076207	WITHOUT_CLASSIFICATION	3.1598923792534606E-6	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999995776976126	WITHOUT_CLASSIFICATION	4.2230238735341957E-7	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999981824798494	WITHOUT_CLASSIFICATION	1.8175201506232909E-6	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999832653864498	WITHOUT_CLASSIFICATION	1.6734613550228997E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999983234875057	WITHOUT_CLASSIFICATION	1.6765124942551127E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999990632661658	WITHOUT_CLASSIFICATION	9.367338342526725E-7	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997545893979	WITHOUT_CLASSIFICATION	2.4541060206862067E-7	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999996826281579	WITHOUT_CLASSIFICATION	3.173718422429698E-7	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999759782012222	WITHOUT_CLASSIFICATION	2.4021798777759885E-5	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998873501026	WITHOUT_CLASSIFICATION	1.1264989743143941E-7	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999999985105567	WITHOUT_CLASSIFICATION	1.4894432991096425E-8	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428579415	WITHOUT_CLASSIFICATION	5.7142058537428596E-8	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999933692460877	WITHOUT_CLASSIFICATION	6.630753912270332E-6	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999988131338231	WITHOUT_CLASSIFICATION	1.1868661769561004E-6	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999970283502794	WITHOUT_CLASSIFICATION	2.9716497206187123E-6	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999995346888214	WITHOUT_CLASSIFICATION	4.653111786130688E-7	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999976272346793	WITHOUT_CLASSIFICATION	2.372765320613613E-6	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999901452702975	WITHOUT_CLASSIFICATION	9.854729702497976E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999985572709899	WITHOUT_CLASSIFICATION	1.442729010144861E-6	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999985572709899	WITHOUT_CLASSIFICATION	1.442729010144861E-6	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999988712548893	WITHOUT_CLASSIFICATION	1.1287451107356378E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997665206743	WITHOUT_CLASSIFICATION	2.3347932554593622E-7	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998107283663	WITHOUT_CLASSIFICATION	1.892716335531984E-7	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.999997553142081	WITHOUT_CLASSIFICATION	2.4468579188363E-6	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999996975633847	WITHOUT_CLASSIFICATION	3.024366152692522E-7	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999789349965	WITHOUT_CLASSIFICATION	2.106500347742303E-8	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999962380244	WITHOUT_CLASSIFICATION	3.761975549895993E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999998406942613	WITHOUT_CLASSIFICATION	1.5930573861682748E-7	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999988712548893	WITHOUT_CLASSIFICATION	1.1287451107356378E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997665206743	WITHOUT_CLASSIFICATION	2.3347932554593622E-7	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999978366458946	WITHOUT_CLASSIFICATION	2.163354105333635E-6	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999994657670784	WITHOUT_CLASSIFICATION	5.342329215849611E-7	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995790590311	WITHOUT_CLASSIFICATION	4.209409687679001E-7	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.999998386719879	WITHOUT_CLASSIFICATION	1.6132801210230652E-6	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999977794014	WITHOUT_CLASSIFICATION	2.2205985519000913E-9	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999992181541136	WITHOUT_CLASSIFICATION	7.818458862622574E-7	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999558117608	WITHOUT_CLASSIFICATION	4.4188239279857785E-8	TEST
}	WITHOUT_CLASSIFICATION	0.999884132565031	WITHOUT_CLASSIFICATION	1.1586743496908977E-4	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998282001668	WITHOUT_CLASSIFICATION	1.717998332402423E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999909183802346	WITHOUT_CLASSIFICATION	9.081619765540505E-6	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999992586216575	WITHOUT_CLASSIFICATION	7.413783425284985E-7	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999909183802346	WITHOUT_CLASSIFICATION	9.081619765540505E-6	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999935989006655	WITHOUT_CLASSIFICATION	6.401099334500778E-6	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987600998762	WITHOUT_CLASSIFICATION	1.2399001237833125E-6	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999754641143601	WITHOUT_CLASSIFICATION	2.453588563980097E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997549264566	WITHOUT_CLASSIFICATION	2.45073543392299E-6	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999975790373135	WITHOUT_CLASSIFICATION	2.4209626865847663E-6	TEST
}	WITHOUT_CLASSIFICATION	0.999884132565031	WITHOUT_CLASSIFICATION	1.1586743496908977E-4	TEST
}	WITHOUT_CLASSIFICATION	0.999884132565031	WITHOUT_CLASSIFICATION	1.1586743496908977E-4	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999942728331761	WITHOUT_CLASSIFICATION	5.7271668239067645E-6	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999339059441	WITHOUT_CLASSIFICATION	6.60940558903304E-7	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999981037978555	WITHOUT_CLASSIFICATION	1.8962021445834601E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998189648005	WITHOUT_CLASSIFICATION	1.8103519948579368E-7	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999998406776833	WITHOUT_CLASSIFICATION	1.5932231673645667E-7	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999994966071926	WITHOUT_CLASSIFICATION	5.033928073751153E-7	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999109094778815	WITHOUT_CLASSIFICATION	8.909052211847148E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999988776423977	WITHOUT_CLASSIFICATION	1.1223576022763746E-6	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997947447979	WITHOUT_CLASSIFICATION	2.0525520207486407E-7	TEST
KEY	WITHOUT_CLASSIFICATION	0.9998199553911401	WITHOUT_CLASSIFICATION	1.800446088598432E-4	TEST
columns	WITHOUT_CLASSIFICATION	0.9999936020659941	WITHOUT_CLASSIFICATION	6.3979340059620005E-6	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999980697775644	WITHOUT_CLASSIFICATION	1.9302224356207874E-6	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999995350702245	WITHOUT_CLASSIFICATION	4.649297754775754E-7	TEST
types	WITHOUT_CLASSIFICATION	0.999981631558846	WITHOUT_CLASSIFICATION	1.8368441153971048E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999990209764426	WITHOUT_CLASSIFICATION	9.790235575257206E-7	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999997699842057	WITHOUT_CLASSIFICATION	2.300157942264457E-7	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999930035599	WITHOUT_CLASSIFICATION	6.996440156186903E-9	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999995506480672	WITHOUT_CLASSIFICATION	4.493519327630443E-7	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997514931477	WITHOUT_CLASSIFICATION	2.485068522769988E-7	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997883702821	WITHOUT_CLASSIFICATION	2.1162971784388021E-7	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9998786871877908	WITHOUT_CLASSIFICATION	1.213128122091004E-4	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999545193807	WITHOUT_CLASSIFICATION	4.548061928863272E-8	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999798508293947	WITHOUT_CLASSIFICATION	2.014917060538558E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999996133954178	WITHOUT_CLASSIFICATION	3.8660458230469314E-7	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998277940823	WITHOUT_CLASSIFICATION	1.7220591770619735E-7	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998467368502	WITHOUT_CLASSIFICATION	1.5326314978435264E-7	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999663789854986	WITHOUT_CLASSIFICATION	3.362101450148131E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999926167426	WITHOUT_CLASSIFICATION	7.383257500226394E-9	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999978624516948	WITHOUT_CLASSIFICATION	2.137548305174553E-6	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999984590415472	WITHOUT_CLASSIFICATION	1.5409584527951452E-6	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999979320161576	WITHOUT_CLASSIFICATION	2.0679838423411133E-6	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999854154243389	WITHOUT_CLASSIFICATION	1.4584575661131908E-5	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999976075237585	WITHOUT_CLASSIFICATION	2.3924762414783585E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999988776423977	WITHOUT_CLASSIFICATION	1.1223576022763746E-6	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999995687980467	WITHOUT_CLASSIFICATION	4.312019532830401E-7	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999716658831233	WITHOUT_CLASSIFICATION	2.8334116876780044E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9964342689915201	WITHOUT_CLASSIFICATION	0.0035657310084798717	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999418708889294	WITHOUT_CLASSIFICATION	5.812911107064035E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999997963752311	WITHOUT_CLASSIFICATION	2.0362476894942137E-7	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999991392501518	WITHOUT_CLASSIFICATION	8.607498481817105E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998189648005	WITHOUT_CLASSIFICATION	1.8103519948579368E-7	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999998189648005	WITHOUT_CLASSIFICATION	1.8103519948579368E-7	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999998605814576	WITHOUT_CLASSIFICATION	1.3941854238206492E-7	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999970148378519	WITHOUT_CLASSIFICATION	2.985162148103285E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999992443664577	WITHOUT_CLASSIFICATION	7.556335423247021E-7	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999999410505181	WITHOUT_CLASSIFICATION	5.894948196471736E-8	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999998818698587	WITHOUT_CLASSIFICATION	1.1813014140193632E-7	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999997518351214	WITHOUT_CLASSIFICATION	2.4816487861409146E-7	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999985867616511	WITHOUT_CLASSIFICATION	1.4132383488912481E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999392176511	WITHOUT_CLASSIFICATION	6.078234899989481E-8	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999719743485	WITHOUT_CLASSIFICATION	2.80256514437418E-8	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999388907981	WITHOUT_CLASSIFICATION	6.110920190600401E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999180564525	WITHOUT_CLASSIFICATION	8.194354756165936E-8	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999973835337727	WITHOUT_CLASSIFICATION	2.6164662272186288E-6	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997565484017594	WITHOUT_CLASSIFICATION	2.4345159824052816E-4	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999988712548893	WITHOUT_CLASSIFICATION	1.1287451107356378E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999180564525	WITHOUT_CLASSIFICATION	8.194354756165936E-8	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999973771816338	WITHOUT_CLASSIFICATION	2.6228183661496826E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999995266648434	WITHOUT_CLASSIFICATION	4.733351566797086E-7	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999998664942361	WITHOUT_CLASSIFICATION	1.335057637937946E-7	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9985907742961317	WITHOUT_CLASSIFICATION	0.0014092257038682248	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997565484017594	WITHOUT_CLASSIFICATION	2.4345159824052816E-4	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999990817608916	WITHOUT_CLASSIFICATION	9.182391084081804E-6	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999816732412	WITHOUT_CLASSIFICATION	1.8326758754725786E-8	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999671722274	WITHOUT_CLASSIFICATION	3.2827772513977595E-8	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999743012287	WITHOUT_CLASSIFICATION	2.569877132980003E-8	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998024691036841	WITHOUT_CLASSIFICATION	1.975308963159217E-4	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999983549680015	WITHOUT_CLASSIFICATION	1.6450319985386252E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999997129324179	WITHOUT_CLASSIFICATION	2.8706758216541903E-7	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999551658727196	WITHOUT_CLASSIFICATION	4.483412728047697E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999976359891901	WITHOUT_CLASSIFICATION	2.364010809891964E-6	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999993020929357	WITHOUT_CLASSIFICATION	6.979070642379077E-7	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999196404922	WITHOUT_CLASSIFICATION	8.035950777029224E-8	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999345489272	WITHOUT_CLASSIFICATION	6.545107279807003E-8	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999180564525	WITHOUT_CLASSIFICATION	8.194354756165936E-8	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999990817608916	WITHOUT_CLASSIFICATION	9.182391084081804E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999671722274	WITHOUT_CLASSIFICATION	3.2827772513977595E-8	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999999071023237	WITHOUT_CLASSIFICATION	9.289767635035562E-8	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999977309748429	WITHOUT_CLASSIFICATION	2.269025157027132E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999997243648301	WITHOUT_CLASSIFICATION	2.7563516994315334E-7	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997565484017594	WITHOUT_CLASSIFICATION	2.4345159824052816E-4	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999981957866367	WITHOUT_CLASSIFICATION	1.8042133632090296E-6	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999467259578303	WITHOUT_CLASSIFICATION	5.327404216977942E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999711264206054	WITHOUT_CLASSIFICATION	2.887357939458829E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999452223562959	WITHOUT_CLASSIFICATION	5.477764370413317E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999551658727196	WITHOUT_CLASSIFICATION	4.483412728047697E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999973771816338	WITHOUT_CLASSIFICATION	2.6228183661496826E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.999893146237388	WITHOUT_CLASSIFICATION	1.0685376261209446E-4	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999931803488634	WITHOUT_CLASSIFICATION	6.819651136587685E-6	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999985553264957	WITHOUT_CLASSIFICATION	1.4446735043194285E-6	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999987426479438	WITHOUT_CLASSIFICATION	1.2573520561929191E-6	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999984919540813	WITHOUT_CLASSIFICATION	1.5080459186896016E-6	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999991429213562	WITHOUT_CLASSIFICATION	8.570786439023383E-7	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999981317258663	WITHOUT_CLASSIFICATION	1.8682741336536886E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997549264566	WITHOUT_CLASSIFICATION	2.45073543392299E-6	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999428645324	WITHOUT_CLASSIFICATION	5.7135467519769025E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999791961564	WITHOUT_CLASSIFICATION	2.0803843611840207E-7	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999269886522487	WITHOUT_CLASSIFICATION	7.301134775120625E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999993397874088	WITHOUT_CLASSIFICATION	6.602125912468372E-7	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998824400197	WITHOUT_CLASSIFICATION	1.1755998037513285E-7	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999988234001	WITHOUT_CLASSIFICATION	1.1765999039216274E-8	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999953828925355	WITHOUT_CLASSIFICATION	4.61710746442842E-6	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997927235327	WITHOUT_CLASSIFICATION	2.072764673115767E-7	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999452223562959	WITHOUT_CLASSIFICATION	5.477764370413317E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998608935236569	WITHOUT_CLASSIFICATION	1.3910647634313242E-4	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999232326014337	WITHOUT_CLASSIFICATION	7.67673985663226E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999731148582107	WITHOUT_CLASSIFICATION	2.688514178934057E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999638736601697	WITHOUT_CLASSIFICATION	3.612633983037771E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999960851685381	WITHOUT_CLASSIFICATION	3.9148314619108915E-6	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999588821996	WITHOUT_CLASSIFICATION	4.111780045660521E-8	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997577381721	WITHOUT_CLASSIFICATION	2.4226182801150193E-7	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999964973826582	WITHOUT_CLASSIFICATION	3.5026173419673458E-6	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999997559388797	WITHOUT_CLASSIFICATION	2.4406112032252285E-7	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999330233847462	WITHOUT_CLASSIFICATION	6.697661525381911E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999987112512098	WITHOUT_CLASSIFICATION	1.2887487903251264E-6	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999956003690014	WITHOUT_CLASSIFICATION	4.399630998697064E-6	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999984979772534	WITHOUT_CLASSIFICATION	1.5020227465276057E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999963176710911	WITHOUT_CLASSIFICATION	3.682328908983604E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999997783119616	WITHOUT_CLASSIFICATION	2.2168803829511544E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999995246722808	WITHOUT_CLASSIFICATION	4.7532771925675987E-7	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999764099406	WITHOUT_CLASSIFICATION	2.359005932147063E-8	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999609748822	WITHOUT_CLASSIFICATION	3.9025117814399436E-8	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999997636378876	WITHOUT_CLASSIFICATION	2.3636211240302997E-6	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999999423028387	WITHOUT_CLASSIFICATION	5.769716130329625E-7	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999326085023696	WITHOUT_CLASSIFICATION	6.739149763038702E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999957896487728	WITHOUT_CLASSIFICATION	4.210351227213397E-6	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999988498393805	WITHOUT_CLASSIFICATION	1.1501606194519459E-6	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999657274475	WITHOUT_CLASSIFICATION	3.427255250249793E-8	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999983282176376	WITHOUT_CLASSIFICATION	1.671782362451381E-6	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998645851204383	WITHOUT_CLASSIFICATION	1.3541487956163301E-4	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999980202357585	WITHOUT_CLASSIFICATION	1.97976424157888E-6	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999998328078748	WITHOUT_CLASSIFICATION	1.6719212519777953E-6	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999988278801071	WITHOUT_CLASSIFICATION	1.1721198928881049E-6	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9998036799291947	WITHOUT_CLASSIFICATION	1.9632007080540846E-4	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998620989773	WITHOUT_CLASSIFICATION	1.3790102265848012E-7	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999966838534482	WITHOUT_CLASSIFICATION	3.3161465516701347E-6	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997638806691	WITHOUT_CLASSIFICATION	2.3611933084181372E-7	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999398981957557	WITHOUT_CLASSIFICATION	6.010180424421071E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983961075004	WITHOUT_CLASSIFICATION	1.603892499604367E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999993176523734	WITHOUT_CLASSIFICATION	6.823476265991973E-7	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997838867065	WITHOUT_CLASSIFICATION	2.161132935469809E-7	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999995044123494	WITHOUT_CLASSIFICATION	4.955876506051663E-7	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999993176523734	WITHOUT_CLASSIFICATION	6.823476265991973E-7	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983961075004	WITHOUT_CLASSIFICATION	1.603892499604367E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999997838867065	WITHOUT_CLASSIFICATION	2.161132935469809E-7	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999993597848189	WITHOUT_CLASSIFICATION	6.402151811156016E-7	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.99999817420874	WITHOUT_CLASSIFICATION	1.8257912599951419E-6	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999991514450309	WITHOUT_CLASSIFICATION	8.48554968976363E-7	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999991499280956	WITHOUT_CLASSIFICATION	8.50071904485727E-7	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999994471224	WITHOUT_CLASSIFICATION	5.5287760224722746E-9	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997595023536683	WITHOUT_CLASSIFICATION	2.404976463317075E-4	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999993384699335	WITHOUT_CLASSIFICATION	6.615300664664828E-7	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999990885770375	WITHOUT_CLASSIFICATION	9.114229626015296E-7	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999902484112	WITHOUT_CLASSIFICATION	9.751588706385457E-9	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999997410725315	WITHOUT_CLASSIFICATION	2.5892746854786533E-7	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999986000579758	WITHOUT_CLASSIFICATION	1.3999420241511358E-6	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999996440854236	WITHOUT_CLASSIFICATION	3.559145763315457E-7	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999988544928371	WITHOUT_CLASSIFICATION	1.1455071629870907E-6	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999991499280956	WITHOUT_CLASSIFICATION	8.50071904485727E-7	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997429266992	WITHOUT_CLASSIFICATION	2.5707330076536443E-7	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997885595521	WITHOUT_CLASSIFICATION	2.1144044795209145E-7	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999433898606	WITHOUT_CLASSIFICATION	5.661013935822382E-8	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999373753842	WITHOUT_CLASSIFICATION	6.262461582638238E-8	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999998045264276	WITHOUT_CLASSIFICATION	1.9547357246592157E-7	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999995349676724	WITHOUT_CLASSIFICATION	4.650323277055697E-7	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999965914736245	WITHOUT_CLASSIFICATION	3.4085263753261984E-6	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999969448643	WITHOUT_CLASSIFICATION	3.0551356155652674E-9	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999994902558392	WITHOUT_CLASSIFICATION	5.097441607961374E-6	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999996745462143	WITHOUT_CLASSIFICATION	3.2545378575693004E-7	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999980651676916	WITHOUT_CLASSIFICATION	1.93483230835898E-6	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999980651676916	WITHOUT_CLASSIFICATION	1.93483230835898E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999842865003	WITHOUT_CLASSIFICATION	1.571349964622401E-8	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999842865003	WITHOUT_CLASSIFICATION	1.571349964622401E-8	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999981399757236	WITHOUT_CLASSIFICATION	1.8600242763922078E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999433898606	WITHOUT_CLASSIFICATION	5.661013935822382E-8	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999987414322518	WITHOUT_CLASSIFICATION	1.2585677482856924E-6	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999895120301	WITHOUT_CLASSIFICATION	1.0487970001451222E-8	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997730415235	WITHOUT_CLASSIFICATION	2.269584764603099E-7	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997730415235	WITHOUT_CLASSIFICATION	2.269584764603099E-7	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999096515126	WITHOUT_CLASSIFICATION	9.03484873715707E-8	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996490833665	WITHOUT_CLASSIFICATION	3.509166335099156E-7	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999977377492	WITHOUT_CLASSIFICATION	2.2622508698793202E-9	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999991374042283	WITHOUT_CLASSIFICATION	8.625957716825964E-7	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999998953751766	WITHOUT_CLASSIFICATION	1.0462482330476197E-7	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999538040925	WITHOUT_CLASSIFICATION	4.619590763639683E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999958098957475	WITHOUT_CLASSIFICATION	4.1901042524942044E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999994830471183	WITHOUT_CLASSIFICATION	5.169528817351647E-7	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999998167603588	WITHOUT_CLASSIFICATION	1.832396413510195E-7	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998827889749	WITHOUT_CLASSIFICATION	1.1721102503524233E-7	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999999623748365	WITHOUT_CLASSIFICATION	3.7625163575979847E-8	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999992018622278	WITHOUT_CLASSIFICATION	7.981377721463066E-7	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999998788120984	WITHOUT_CLASSIFICATION	1.2118790159407026E-7	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999996940369758	WITHOUT_CLASSIFICATION	3.059630242460307E-7	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999985512872558	WITHOUT_CLASSIFICATION	1.4487127441911013E-6	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999982412553002	WITHOUT_CLASSIFICATION	1.758744699853389E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934322482906	WITHOUT_CLASSIFICATION	6.567751709315662E-6	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999999959689022	WITHOUT_CLASSIFICATION	4.0310977980622536E-8	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999910040319	WITHOUT_CLASSIFICATION	8.995968050327195E-9	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999758505814	WITHOUT_CLASSIFICATION	2.4149418637283705E-8	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999887875957	WITHOUT_CLASSIFICATION	1.121240430757592E-8	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999961652191062	WITHOUT_CLASSIFICATION	3.834780893872496E-6	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999667221423	WITHOUT_CLASSIFICATION	3.327785774027261E-8	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999989904985	WITHOUT_CLASSIFICATION	1.0095015051743435E-8	TEST
/	WITHOUT_CLASSIFICATION	0.9997612574369071	WITHOUT_CLASSIFICATION	2.3874256309281807E-4	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999997657206014	WITHOUT_CLASSIFICATION	2.3427939860584358E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999956003690014	WITHOUT_CLASSIFICATION	4.399630998697064E-6	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997670495233	WITHOUT_CLASSIFICATION	2.32950476661908E-7	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997358694115	WITHOUT_CLASSIFICATION	2.641305885057754E-7	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851734232278	WITHOUT_CLASSIFICATION	1.4826576772094627E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976932752838	WITHOUT_CLASSIFICATION	2.306724716366487E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999990560502953	WITHOUT_CLASSIFICATION	9.439497048156694E-7	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999990560502953	WITHOUT_CLASSIFICATION	9.439497048156694E-7	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999989124098684	WITHOUT_CLASSIFICATION	1.0875901315880197E-6	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999987787059241	WITHOUT_CLASSIFICATION	1.2212940758486428E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999982505524377	WITHOUT_CLASSIFICATION	1.749447562311621E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.999982505524377	WITHOUT_CLASSIFICATION	1.749447562311621E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998544813524	WITHOUT_CLASSIFICATION	1.4551864751763127E-7	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999997675735997	WITHOUT_CLASSIFICATION	2.3242640042670496E-7	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999883488992625	WITHOUT_CLASSIFICATION	1.1651100737625905E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999968585059812	WITHOUT_CLASSIFICATION	3.1414940187881887E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999994068859146	WITHOUT_CLASSIFICATION	5.931140854309595E-7	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999980698957254	WITHOUT_CLASSIFICATION	1.9301042745987765E-6	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999986498643474	WITHOUT_CLASSIFICATION	1.350135652596456E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999994707595388	WITHOUT_CLASSIFICATION	5.292404613371004E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998104221608	WITHOUT_CLASSIFICATION	1.8957783914326062E-7	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998104221608	WITHOUT_CLASSIFICATION	1.8957783914326062E-7	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999977207014	WITHOUT_CLASSIFICATION	2.2792986648746134E-9	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996446135229	WITHOUT_CLASSIFICATION	3.553864771016688E-7	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996446135229	WITHOUT_CLASSIFICATION	3.553864771016688E-7	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999187160721	WITHOUT_CLASSIFICATION	8.12839279170303E-8	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999997780351597	WITHOUT_CLASSIFICATION	2.2196484038987504E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9965198596154778	WITHOUT_CLASSIFICATION	0.003480140384522203	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999989356962503	WITHOUT_CLASSIFICATION	1.0643037496551462E-6	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998884053382	WITHOUT_CLASSIFICATION	1.1159466188487372E-7	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999897950718	WITHOUT_CLASSIFICATION	1.0204928119891933E-8	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999996474286846	WITHOUT_CLASSIFICATION	3.5257131541368337E-7	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999873803207727	WITHOUT_CLASSIFICATION	1.2619679227348002E-5	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999911062719	WITHOUT_CLASSIFICATION	8.893728186700879E-9	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999930715958687	WITHOUT_CLASSIFICATION	6.928404131286503E-6	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999999747466	WITHOUT_CLASSIFICATION	2.5253400084024385E-9	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999997776790719	WITHOUT_CLASSIFICATION	2.2232092814039124E-7	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985616856526	WITHOUT_CLASSIFICATION	1.438314347305278E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985616856526	WITHOUT_CLASSIFICATION	1.438314347305278E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985616856526	WITHOUT_CLASSIFICATION	1.438314347305278E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985616856526	WITHOUT_CLASSIFICATION	1.438314347305278E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999972635472473	WITHOUT_CLASSIFICATION	2.7364527526480654E-6	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999966557023872	WITHOUT_CLASSIFICATION	3.34429761286406E-6	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999979135341195	WITHOUT_CLASSIFICATION	2.0864658804583932E-6	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999937972615189	WITHOUT_CLASSIFICATION	6.202738481021501E-6	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999998601756599	WITHOUT_CLASSIFICATION	1.398243400947525E-6	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999994671539933	WITHOUT_CLASSIFICATION	5.328460067370805E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999998387810829	WITHOUT_CLASSIFICATION	1.612189171117099E-6	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999988060583236	WITHOUT_CLASSIFICATION	1.1939416764524095E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999517339897	WITHOUT_CLASSIFICATION	4.8266010368627376E-8	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999998756580099	WITHOUT_CLASSIFICATION	1.243419901928236E-7	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999991555523677	WITHOUT_CLASSIFICATION	8.444476321900033E-7	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994616538752	WITHOUT_CLASSIFICATION	5.38346124703968E-7	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.99876734042227	WITHOUT_CLASSIFICATION	0.00123265957773004	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999947511432415	WITHOUT_CLASSIFICATION	5.248856758435123E-6	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999979956889147	WITHOUT_CLASSIFICATION	2.004311085273829E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994616538752	WITHOUT_CLASSIFICATION	5.38346124703968E-7	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.999999447392715	WITHOUT_CLASSIFICATION	5.526072850553157E-7	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999971096643	WITHOUT_CLASSIFICATION	2.890335683197835E-9	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999817189222	WITHOUT_CLASSIFICATION	1.8281077751630864E-8	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999988799657488	WITHOUT_CLASSIFICATION	1.1200342512005277E-5	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999995766708143	WITHOUT_CLASSIFICATION	4.233291857474647E-7	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999994440967792	WITHOUT_CLASSIFICATION	5.559032207416907E-7	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999973950088	WITHOUT_CLASSIFICATION	2.604991314246161E-9	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999999593320213	WITHOUT_CLASSIFICATION	4.066797861479695E-8	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998452809633	WITHOUT_CLASSIFICATION	1.5471903668977132E-7	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999039202766	WITHOUT_CLASSIFICATION	9.607972348254165E-8	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996968400611	WITHOUT_CLASSIFICATION	3.031599389460314E-7	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996886024356	WITHOUT_CLASSIFICATION	3.1139756434931787E-7	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999967471580439	WITHOUT_CLASSIFICATION	3.252841956075574E-6	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999334044135844	WITHOUT_CLASSIFICATION	6.659558641567415E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996518856994	WITHOUT_CLASSIFICATION	3.481143007182276E-7	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999966744617717	WITHOUT_CLASSIFICATION	3.3255382284262494E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992157952123	WITHOUT_CLASSIFICATION	7.842047877085134E-7	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999448631101	WITHOUT_CLASSIFICATION	5.513688990355559E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999957067231952	WITHOUT_CLASSIFICATION	4.293276804889849E-6	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999448631101	WITHOUT_CLASSIFICATION	5.513688990355559E-7	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999537847153	WITHOUT_CLASSIFICATION	4.621528470256171E-8	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999978562001333	WITHOUT_CLASSIFICATION	2.143799866673523E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999998844082776	WITHOUT_CLASSIFICATION	1.1559172248445379E-7	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999994175775726	WITHOUT_CLASSIFICATION	5.824224274230434E-7	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999998806396575	WITHOUT_CLASSIFICATION	1.1936034257773293E-7	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999965366374571	WITHOUT_CLASSIFICATION	3.4633625427797506E-6	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999955258255484	WITHOUT_CLASSIFICATION	4.474174451573478E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992157952123	WITHOUT_CLASSIFICATION	7.842047877085134E-7	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999957067231952	WITHOUT_CLASSIFICATION	4.293276804889849E-6	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999537847153	WITHOUT_CLASSIFICATION	4.621528470256171E-8	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995599257175	WITHOUT_CLASSIFICATION	4.400742823985432E-7	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999998479246831	WITHOUT_CLASSIFICATION	1.5207531679446145E-7	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999980823182278	WITHOUT_CLASSIFICATION	1.917681772134532E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999998887961008	WITHOUT_CLASSIFICATION	1.1120389927320739E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999991860993808	WITHOUT_CLASSIFICATION	8.139006192015384E-7	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998199892632	WITHOUT_CLASSIFICATION	1.800107366771719E-7	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999996849635715	WITHOUT_CLASSIFICATION	3.1503642845889186E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934322482906	WITHOUT_CLASSIFICATION	6.567751709315662E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999978562001333	WITHOUT_CLASSIFICATION	2.143799866673523E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999996729853721	WITHOUT_CLASSIFICATION	3.270146279313888E-7	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999336348437	WITHOUT_CLASSIFICATION	6.636515633224588E-8	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999086137215	WITHOUT_CLASSIFICATION	9.138627853476234E-8	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999098361381	WITHOUT_CLASSIFICATION	9.01638619120058E-8	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934322482906	WITHOUT_CLASSIFICATION	6.567751709315662E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998908115081	WITHOUT_CLASSIFICATION	1.0918849186955588E-7	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934322482906	WITHOUT_CLASSIFICATION	6.567751709315662E-6	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998096336407	WITHOUT_CLASSIFICATION	1.9036635940956442E-7	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999874695207492	WITHOUT_CLASSIFICATION	1.2530479250856806E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999999247571801	WITHOUT_CLASSIFICATION	7.524281990252886E-7	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998493885064	WITHOUT_CLASSIFICATION	1.5061149364204363E-7	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997799122593	WITHOUT_CLASSIFICATION	2.200877406580326E-7	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999993345342785	WITHOUT_CLASSIFICATION	6.654657215177826E-7	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999962130243687	WITHOUT_CLASSIFICATION	3.7869756311808866E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998054166651	WITHOUT_CLASSIFICATION	1.9458333501711903E-7	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999989472524774	WITHOUT_CLASSIFICATION	1.052747522569431E-6	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999977875782056	WITHOUT_CLASSIFICATION	2.2124217943892593E-6	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999613385916891	WITHOUT_CLASSIFICATION	3.866140831085883E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999992492625543	WITHOUT_CLASSIFICATION	7.507374456899883E-7	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9965198596154778	WITHOUT_CLASSIFICATION	0.003480140384522203	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.999995989405322	WITHOUT_CLASSIFICATION	4.010594678039004E-6	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999851003560071	WITHOUT_CLASSIFICATION	1.4899643992977776E-5	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.999998088961453	WITHOUT_CLASSIFICATION	1.9110385470589435E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999859187316265	WITHOUT_CLASSIFICATION	1.4081268373609058E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997471752363	WITHOUT_CLASSIFICATION	2.5282476363543827E-7	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998818167843	WITHOUT_CLASSIFICATION	1.1818321575389398E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999575236448	WITHOUT_CLASSIFICATION	4.247635524891404E-8	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999999054872888	WITHOUT_CLASSIFICATION	9.451271129540075E-8	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999992262441	WITHOUT_CLASSIFICATION	7.737559094514927E-9	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999995984765462	WITHOUT_CLASSIFICATION	4.0152345377200647E-7	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9961256438358536	WITHOUT_CLASSIFICATION	0.0038743561641464115	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999951769172896	WITHOUT_CLASSIFICATION	4.823082710437731E-6	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999987057789116	WITHOUT_CLASSIFICATION	1.2942210884125947E-6	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999861013386596	WITHOUT_CLASSIFICATION	1.3898661340427105E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999963509082636	WITHOUT_CLASSIFICATION	3.6490917363662863E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999587855303655	WITHOUT_CLASSIFICATION	4.121446963436078E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999982691548103	WITHOUT_CLASSIFICATION	1.7308451897292216E-6	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999971678804	WITHOUT_CLASSIFICATION	2.832119643893832E-9	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999836814855	WITHOUT_CLASSIFICATION	1.6318514510749524E-8	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999993534157507	WITHOUT_CLASSIFICATION	6.465842493064216E-6	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999968013143733	WITHOUT_CLASSIFICATION	3.198685626649013E-6	TEST
TODO	WITHOUT_CLASSIFICATION	0.9954429163798052	WITHOUT_CLASSIFICATION	0.004557083620194817	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999908437538771	WITHOUT_CLASSIFICATION	9.156246122896687E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999999652539149	WITHOUT_CLASSIFICATION	3.47460851032287E-7	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999992734253895	WITHOUT_CLASSIFICATION	7.265746104574322E-7	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999515407756987	WITHOUT_CLASSIFICATION	4.845922430137691E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999980581834911	WITHOUT_CLASSIFICATION	1.941816508918729E-6	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9816907746128656	WITHOUT_CLASSIFICATION	0.018309225387134486	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999283311193	WITHOUT_CLASSIFICATION	7.166888069634248E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999998164913023	WITHOUT_CLASSIFICATION	1.8350869770663448E-7	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999979177736527	WITHOUT_CLASSIFICATION	2.0822263472988525E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.999979177736527	WITHOUT_CLASSIFICATION	2.0822263472988525E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.99999953718194	WITHOUT_CLASSIFICATION	4.6281806001653383E-7	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999998054166651	WITHOUT_CLASSIFICATION	1.9458333501711903E-7	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999991898534795	WITHOUT_CLASSIFICATION	8.101465204888441E-7	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999998005787778	WITHOUT_CLASSIFICATION	1.9942122221139018E-6	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999798804975	WITHOUT_CLASSIFICATION	2.011950246629791E-8	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999323355541	WITHOUT_CLASSIFICATION	6.766444587494529E-8	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999925943288097	WITHOUT_CLASSIFICATION	7.405671190284795E-6	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999138542203905	WITHOUT_CLASSIFICATION	8.614577960945227E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999871495164847	WITHOUT_CLASSIFICATION	1.285048351536228E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999997007944567	WITHOUT_CLASSIFICATION	2.992055433626714E-7	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999997902421774	WITHOUT_CLASSIFICATION	2.0975782252184695E-7	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999999112934778	WITHOUT_CLASSIFICATION	8.87065221563671E-8	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999994492311193	WITHOUT_CLASSIFICATION	5.507688806976439E-7	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999987780558134	WITHOUT_CLASSIFICATION	1.2219441866091686E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999988183717315	WITHOUT_CLASSIFICATION	1.181628268435836E-6	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998841472341	WITHOUT_CLASSIFICATION	1.1585276593740312E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999804918924	WITHOUT_CLASSIFICATION	1.9508107598770697E-8	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999549978696	WITHOUT_CLASSIFICATION	4.500213037543494E-8	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999029937505	WITHOUT_CLASSIFICATION	9.700624946177149E-8	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999572477574	WITHOUT_CLASSIFICATION	4.2752242617222826E-8	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999953015688	WITHOUT_CLASSIFICATION	4.6984311589473805E-9	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999999753577716	WITHOUT_CLASSIFICATION	2.464222840837246E-7	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999999548385372	WITHOUT_CLASSIFICATION	4.5161462803943977E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996871178382	WITHOUT_CLASSIFICATION	3.128821619133063E-7	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9816907746128656	WITHOUT_CLASSIFICATION	0.018309225387134486	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999991687211849	WITHOUT_CLASSIFICATION	8.312788151803358E-7	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999998635624382	WITHOUT_CLASSIFICATION	1.3643756173135299E-7	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999637771689	WITHOUT_CLASSIFICATION	3.622283115769247E-8	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999979865038944	WITHOUT_CLASSIFICATION	2.0134961057145947E-6	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999996824737007	WITHOUT_CLASSIFICATION	3.1752629932245335E-7	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999999646489499	WITHOUT_CLASSIFICATION	3.535105009696463E-7	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999653475780212	WITHOUT_CLASSIFICATION	3.4652421978740876E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999989346437957	WITHOUT_CLASSIFICATION	1.0653562042549124E-6	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997664474058	WITHOUT_CLASSIFICATION	2.3355259419712138E-7	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999894613635	WITHOUT_CLASSIFICATION	1.0538636471886544E-8	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999999429329773	WITHOUT_CLASSIFICATION	5.706702269069048E-7	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999988709325032	WITHOUT_CLASSIFICATION	1.1290674968095536E-6	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9984746697052995	WITHOUT_CLASSIFICATION	0.0015253302947004577	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999974019106574	WITHOUT_CLASSIFICATION	2.598089342522662E-6	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999990352461035	WITHOUT_CLASSIFICATION	9.647538965641033E-7	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999826981351	WITHOUT_CLASSIFICATION	1.7301864893090848E-8	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999826981351	WITHOUT_CLASSIFICATION	1.7301864893090848E-8	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999994188050707	WITHOUT_CLASSIFICATION	5.811949292987252E-7	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999988626280644	WITHOUT_CLASSIFICATION	1.1373719356276157E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999986011299052	WITHOUT_CLASSIFICATION	1.3988700946904638E-6	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999986011299052	WITHOUT_CLASSIFICATION	1.3988700946904638E-6	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999999908563946	WITHOUT_CLASSIFICATION	9.143605476055226E-9	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999996485732804	WITHOUT_CLASSIFICATION	3.5142671951090965E-7	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999900324809	WITHOUT_CLASSIFICATION	9.967519128487549E-9	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999985427545238	WITHOUT_CLASSIFICATION	1.4572454761867843E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999820303323778	WITHOUT_CLASSIFICATION	1.7969667622164238E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999963697786659	WITHOUT_CLASSIFICATION	3.6302213341178203E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999898302071	WITHOUT_CLASSIFICATION	1.0169792865385652E-8	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999898302071	WITHOUT_CLASSIFICATION	1.0169792865385652E-8	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999947321050514	WITHOUT_CLASSIFICATION	5.267894948641603E-6	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999999237756972	WITHOUT_CLASSIFICATION	7.622430273414199E-8	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999996591067289	WITHOUT_CLASSIFICATION	3.408932711142851E-6	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997859787224	WITHOUT_CLASSIFICATION	2.1402127750214848E-7	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999997859787224	WITHOUT_CLASSIFICATION	2.1402127750214848E-7	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999995620491771	WITHOUT_CLASSIFICATION	4.3795082301774666E-7	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998537788443	WITHOUT_CLASSIFICATION	1.462211557542596E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999990422756504	WITHOUT_CLASSIFICATION	9.57724349615302E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999993514408765	WITHOUT_CLASSIFICATION	6.48559123554421E-7	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999995032118411	WITHOUT_CLASSIFICATION	4.967881588565381E-7	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999995872726639	WITHOUT_CLASSIFICATION	4.127273360651825E-7	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999429742568	WITHOUT_CLASSIFICATION	5.702574319017406E-8	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999999019804151	WITHOUT_CLASSIFICATION	9.801958488671464E-8	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998408072078	WITHOUT_CLASSIFICATION	1.591927920948697E-7	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999990082277322	WITHOUT_CLASSIFICATION	9.917722677121957E-7	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999993715687	WITHOUT_CLASSIFICATION	6.284313338505905E-10	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.999998915021237	WITHOUT_CLASSIFICATION	1.084978763086788E-6	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999604742181348	WITHOUT_CLASSIFICATION	3.952578186514935E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999986766422133	WITHOUT_CLASSIFICATION	1.323357786623832E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999973942738777	WITHOUT_CLASSIFICATION	2.6057261223301027E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999962397430396	WITHOUT_CLASSIFICATION	3.760256960350912E-6	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999991615097	WITHOUT_CLASSIFICATION	8.384902980005575E-9	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999957975235126	WITHOUT_CLASSIFICATION	4.202476487339881E-6	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999998614001482	WITHOUT_CLASSIFICATION	1.3859985182493227E-7	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999997754868193	WITHOUT_CLASSIFICATION	2.245131806985201E-6	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999996735651363	WITHOUT_CLASSIFICATION	3.2643486371460803E-7	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999997836686143	WITHOUT_CLASSIFICATION	2.1633138570546276E-6	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999633691440081	WITHOUT_CLASSIFICATION	3.663085599191391E-5	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999812981084674	WITHOUT_CLASSIFICATION	1.8701891532669862E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999955291749781	WITHOUT_CLASSIFICATION	4.470825021785758E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999997042399938	WITHOUT_CLASSIFICATION	2.957600061285583E-7	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999985506378676	WITHOUT_CLASSIFICATION	1.449362132429862E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999661302805196	WITHOUT_CLASSIFICATION	3.386971948042184E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999923119038	WITHOUT_CLASSIFICATION	7.688096169902461E-9	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999840705568	WITHOUT_CLASSIFICATION	1.5929443218147256E-8	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998143709166	WITHOUT_CLASSIFICATION	1.8562908340852538E-7	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998727436528	WITHOUT_CLASSIFICATION	1.2725634724063062E-7	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998592378565	WITHOUT_CLASSIFICATION	1.4076214359629313E-7	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999995946806391	WITHOUT_CLASSIFICATION	4.053193608317549E-7	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999171694007	WITHOUT_CLASSIFICATION	8.283059933079532E-8	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999746237140553	WITHOUT_CLASSIFICATION	2.5376285944617013E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999967554924548	WITHOUT_CLASSIFICATION	3.2445075453242677E-6	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999995524516193	WITHOUT_CLASSIFICATION	4.475483807313086E-7	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999998769835741	WITHOUT_CLASSIFICATION	1.2301642590030971E-6	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995715456091	WITHOUT_CLASSIFICATION	4.2845439079649043E-7	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999021369307	WITHOUT_CLASSIFICATION	9.786306942576582E-8	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999990957786047	WITHOUT_CLASSIFICATION	9.042213953691668E-7	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999993915095933	WITHOUT_CLASSIFICATION	6.084904066080837E-7	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999998642328981	WITHOUT_CLASSIFICATION	1.3576710190832134E-7	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999997958209514	WITHOUT_CLASSIFICATION	2.0417904858819025E-7	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999995311536505	WITHOUT_CLASSIFICATION	4.6884634944380043E-7	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999989065794251	WITHOUT_CLASSIFICATION	1.0934205748617667E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999962855141501	WITHOUT_CLASSIFICATION	3.7144858500391663E-6	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999995894239736	WITHOUT_CLASSIFICATION	4.105760264146614E-7	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999667309725099	WITHOUT_CLASSIFICATION	3.3269027490120494E-5	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999991872387152	WITHOUT_CLASSIFICATION	8.127612847105658E-7	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999761903964	WITHOUT_CLASSIFICATION	2.38096035583221E-8	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999795346546563	WITHOUT_CLASSIFICATION	2.0465345343747693E-5	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.99999998433809	WITHOUT_CLASSIFICATION	1.5661910012246792E-8	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999989111442021	WITHOUT_CLASSIFICATION	1.0888557979207948E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999993732975683	WITHOUT_CLASSIFICATION	6.267024317666322E-7	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998412463699	WITHOUT_CLASSIFICATION	1.5875363007332947E-7	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999994613816021	WITHOUT_CLASSIFICATION	5.386183978822962E-7	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999999750060421	WITHOUT_CLASSIFICATION	2.499395790567774E-7	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998722910407606	WITHOUT_CLASSIFICATION	1.277089592394367E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998561976315	WITHOUT_CLASSIFICATION	1.4380236846671734E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998561976315	WITHOUT_CLASSIFICATION	1.4380236846671734E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999287044423021	WITHOUT_CLASSIFICATION	7.129555769787809E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999020116579965	WITHOUT_CLASSIFICATION	9.798834200339629E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999575080487	WITHOUT_CLASSIFICATION	4.249195118475011E-8	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.99999984111162	WITHOUT_CLASSIFICATION	1.5888837995783392E-7	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999998848045264	WITHOUT_CLASSIFICATION	1.1519547360663011E-6	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999953739863569	WITHOUT_CLASSIFICATION	4.626013643164675E-6	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999999645966661	WITHOUT_CLASSIFICATION	3.5403333901370043E-7	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999998994287	WITHOUT_CLASSIFICATION	1.0057130291311637E-9	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999994249211922	WITHOUT_CLASSIFICATION	5.750788078180751E-7	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999893644929927	WITHOUT_CLASSIFICATION	1.063550700735361E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999527670466	WITHOUT_CLASSIFICATION	4.723295339189678E-8	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999998382419268	WITHOUT_CLASSIFICATION	1.6175807320823718E-6	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999734797705	WITHOUT_CLASSIFICATION	2.6520229521623173E-8	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999998741590371	WITHOUT_CLASSIFICATION	1.2584096286464394E-7	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999508725794	WITHOUT_CLASSIFICATION	4.91274204988369E-8	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999508725794	WITHOUT_CLASSIFICATION	4.91274204988369E-8	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999429123886	WITHOUT_CLASSIFICATION	5.7087611417567874E-8	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999992304892947	WITHOUT_CLASSIFICATION	7.695107051507922E-7	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999029932308	WITHOUT_CLASSIFICATION	9.700676912810386E-8	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999990589921	WITHOUT_CLASSIFICATION	9.41007856425669E-10	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999749427528	WITHOUT_CLASSIFICATION	2.505724719510406E-7	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579970478437	WITHOUT_CLASSIFICATION	4.200295215631655E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999993620888291	WITHOUT_CLASSIFICATION	6.379111708801134E-7	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999991131281227	WITHOUT_CLASSIFICATION	8.868718773054716E-7	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999936981186983	WITHOUT_CLASSIFICATION	6.301881301755631E-6	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999982075938	WITHOUT_CLASSIFICATION	1.7924063049464477E-9	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999563327017565	WITHOUT_CLASSIFICATION	4.3667298243443235E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999990410627	WITHOUT_CLASSIFICATION	9.589372483972999E-10	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999810390517	WITHOUT_CLASSIFICATION	1.8960948308906315E-7	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999932608362	WITHOUT_CLASSIFICATION	6.739163772774581E-9	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999934698371	WITHOUT_CLASSIFICATION	6.530162901149646E-8	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997480093888	WITHOUT_CLASSIFICATION	2.519906112119052E-7	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997726555895	WITHOUT_CLASSIFICATION	2.273444105894862E-7	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999879285753591	WITHOUT_CLASSIFICATION	1.2071424640924615E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999905507052101	WITHOUT_CLASSIFICATION	9.449294789844743E-6	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999995992267146	WITHOUT_CLASSIFICATION	4.0077328534640827E-7	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999999922195878	WITHOUT_CLASSIFICATION	7.780412208748234E-8	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999996486447	WITHOUT_CLASSIFICATION	3.513553135139627E-10	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999739092713	WITHOUT_CLASSIFICATION	2.6090728686274387E-8	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999976170613	WITHOUT_CLASSIFICATION	2.382938740070752E-9	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998992009402	WITHOUT_CLASSIFICATION	1.0079905968972027E-7	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999812352802494	WITHOUT_CLASSIFICATION	1.8764719750678903E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9994470061394527	WITHOUT_CLASSIFICATION	5.529938605472818E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999992211617821	WITHOUT_CLASSIFICATION	7.788382179940049E-7	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999640097719	WITHOUT_CLASSIFICATION	3.5990228111075275E-8	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998832121376	WITHOUT_CLASSIFICATION	1.1678786241874804E-7	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999937836832095	WITHOUT_CLASSIFICATION	6.216316790552298E-6	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998899095695	WITHOUT_CLASSIFICATION	1.1009043067129508E-7	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999867640426452	WITHOUT_CLASSIFICATION	1.3235957354854098E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999998759997127	WITHOUT_CLASSIFICATION	1.2400028728342025E-7	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999988412491	WITHOUT_CLASSIFICATION	1.1587509340732081E-9	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999572046893	WITHOUT_CLASSIFICATION	4.2795310756728826E-8	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999997748004747	WITHOUT_CLASSIFICATION	2.2519952530465772E-7	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998405474348	WITHOUT_CLASSIFICATION	1.5945256517627823E-7	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999210759506	WITHOUT_CLASSIFICATION	7.892404935905173E-8	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999950866561895	WITHOUT_CLASSIFICATION	4.913343810435917E-6	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999991071151818	WITHOUT_CLASSIFICATION	8.92884818211241E-7	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999149381152	WITHOUT_CLASSIFICATION	8.506188470817076E-8	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995979519322	WITHOUT_CLASSIFICATION	4.0204806791567E-7	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995979519322	WITHOUT_CLASSIFICATION	4.0204806791567E-7	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999994717289656	WITHOUT_CLASSIFICATION	5.282710343946773E-7	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999387704483	WITHOUT_CLASSIFICATION	6.122955160632095E-8	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999664544083	WITHOUT_CLASSIFICATION	3.3545591745394996E-8	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999999726439862	WITHOUT_CLASSIFICATION	2.7356013793689985E-7	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999949218143	WITHOUT_CLASSIFICATION	5.078185704620204E-8	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999989557318	WITHOUT_CLASSIFICATION	1.044268215108802E-9	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999323220073	WITHOUT_CLASSIFICATION	6.76779926559186E-8	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999998927828317	WITHOUT_CLASSIFICATION	1.0721716827636478E-7	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999998164242	WITHOUT_CLASSIFICATION	1.835758011962835E-9	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994238535451	WITHOUT_CLASSIFICATION	5.761464549002724E-6	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967360780939	WITHOUT_CLASSIFICATION	3.2639219060060248E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999988844932282	WITHOUT_CLASSIFICATION	1.115506771801557E-5	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999966598103773	WITHOUT_CLASSIFICATION	3.3401896225708037E-6	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996513128301	WITHOUT_CLASSIFICATION	3.4868716991291753E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999075795005	WITHOUT_CLASSIFICATION	9.242049948699646E-8	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999998044021602	WITHOUT_CLASSIFICATION	1.9559783975740034E-7	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999673542579	WITHOUT_CLASSIFICATION	3.26457420868656E-8	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999977291271	WITHOUT_CLASSIFICATION	2.270872871127424E-9	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999999945063752	WITHOUT_CLASSIFICATION	5.4936248028710204E-8	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999898814915834	WITHOUT_CLASSIFICATION	1.0118508416476464E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999966116674248	WITHOUT_CLASSIFICATION	3.3883325752481323E-6	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998012428268	WITHOUT_CLASSIFICATION	1.987571731421842E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999767917606	WITHOUT_CLASSIFICATION	2.320823935659997E-8	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999978267107418	WITHOUT_CLASSIFICATION	2.173289258179227E-6	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999109309573	WITHOUT_CLASSIFICATION	8.906904278859145E-8	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999978888020574	WITHOUT_CLASSIFICATION	2.1111979425422486E-6	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999992801983656	WITHOUT_CLASSIFICATION	7.198016344347905E-7	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999979673632	WITHOUT_CLASSIFICATION	2.032636885495076E-9	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999794454921694	WITHOUT_CLASSIFICATION	2.0554507830606644E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999275736488	WITHOUT_CLASSIFICATION	7.242635121194564E-8	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998355919624	WITHOUT_CLASSIFICATION	1.6440803766989893E-7	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999999964194002	WITHOUT_CLASSIFICATION	3.58059980921593E-8	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995632023876	WITHOUT_CLASSIFICATION	4.367976123693136E-7	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999909365682	WITHOUT_CLASSIFICATION	9.063431765963776E-9	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999974738357	WITHOUT_CLASSIFICATION	2.5261642574951956E-9	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999901134732324	WITHOUT_CLASSIFICATION	9.886526767630356E-6	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999654831789	WITHOUT_CLASSIFICATION	3.451682106897429E-8	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999998905361767	WITHOUT_CLASSIFICATION	1.0946382327612996E-7	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999986472916041	WITHOUT_CLASSIFICATION	1.3527083958574534E-6	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999222595454	WITHOUT_CLASSIFICATION	7.774045464298741E-8	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999928552569028	WITHOUT_CLASSIFICATION	7.144743097120106E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999874463448215	WITHOUT_CLASSIFICATION	1.2553655178518018E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998636212941	WITHOUT_CLASSIFICATION	1.3637870581291808E-7	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999626126705	WITHOUT_CLASSIFICATION	3.738732955907292E-8	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999809581783	WITHOUT_CLASSIFICATION	1.9041821660036516E-8	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999319776818181	WITHOUT_CLASSIFICATION	6.802231818200968E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998786561923	WITHOUT_CLASSIFICATION	1.2134380762373015E-7	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999986449881055	WITHOUT_CLASSIFICATION	1.3550118944887711E-6	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998756827023	WITHOUT_CLASSIFICATION	1.2431729759237462E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999734797705	WITHOUT_CLASSIFICATION	2.6520229521623173E-8	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999998090212454	WITHOUT_CLASSIFICATION	1.90978754603922E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999099456375	WITHOUT_CLASSIFICATION	9.005436250852756E-8	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999939443478	WITHOUT_CLASSIFICATION	6.0556522569100325E-9	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999814151898	WITHOUT_CLASSIFICATION	1.858481016794327E-8	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999889220712	WITHOUT_CLASSIFICATION	1.1077928794986109E-7	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999869235257	WITHOUT_CLASSIFICATION	1.3076474315523174E-8	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999994281296877	WITHOUT_CLASSIFICATION	5.7187031242892E-7	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999798355006632	WITHOUT_CLASSIFICATION	2.016449933678479E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988450210102	WITHOUT_CLASSIFICATION	1.1549789897038012E-6	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999987164908875	WITHOUT_CLASSIFICATION	1.2835091125960451E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999977079829	WITHOUT_CLASSIFICATION	2.2920172553027117E-9	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997175812556	WITHOUT_CLASSIFICATION	2.8241874434645533E-7	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999975059637	WITHOUT_CLASSIFICATION	2.4940362977881882E-8	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999991376675805	WITHOUT_CLASSIFICATION	8.62332419441996E-7	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998841676624	WITHOUT_CLASSIFICATION	1.1583233765469115E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996228332237	WITHOUT_CLASSIFICATION	3.7716677633825047E-7	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999984045369863	WITHOUT_CLASSIFICATION	1.595463013621301E-6	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999966793646224	WITHOUT_CLASSIFICATION	3.3206353775445964E-6	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999938188893	WITHOUT_CLASSIFICATION	6.18111078875087E-9	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999994857201367	WITHOUT_CLASSIFICATION	5.142798632647466E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996228332237	WITHOUT_CLASSIFICATION	3.7716677633825047E-7	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998785701919444	WITHOUT_CLASSIFICATION	1.2142980805559381E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997256143377	WITHOUT_CLASSIFICATION	2.7438566237741125E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999997469359828	WITHOUT_CLASSIFICATION	2.5306401716618297E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999451957029	WITHOUT_CLASSIFICATION	5.480429719064581E-8	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999988550957597	WITHOUT_CLASSIFICATION	1.1449042403115067E-6	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999669325115	WITHOUT_CLASSIFICATION	3.3067488462633134E-8	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999966121388	WITHOUT_CLASSIFICATION	3.387861219892544E-9	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999985226102732	WITHOUT_CLASSIFICATION	1.4773897267986348E-5	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999068964857	WITHOUT_CLASSIFICATION	9.310351437654888E-8	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996693233942	WITHOUT_CLASSIFICATION	3.306766057620664E-7	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999999133570356	WITHOUT_CLASSIFICATION	8.664296438246165E-8	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999613266279366	WITHOUT_CLASSIFICATION	3.8673372063383914E-5	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999999988682343	WITHOUT_CLASSIFICATION	1.1317656155228988E-9	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.999999958242556	WITHOUT_CLASSIFICATION	4.175744400701317E-8	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999999941198718	WITHOUT_CLASSIFICATION	5.880128141074307E-9	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999995633012675	WITHOUT_CLASSIFICATION	4.3669873254388737E-7	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996871178382	WITHOUT_CLASSIFICATION	3.128821619133063E-7	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998773343968	WITHOUT_CLASSIFICATION	1.2266560321277882E-7	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999663144651	WITHOUT_CLASSIFICATION	3.368553493487563E-8	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999976184890368	WITHOUT_CLASSIFICATION	2.3815109630853373E-6	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999999893669317	WITHOUT_CLASSIFICATION	1.0633068233487243E-8	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999999852553244	WITHOUT_CLASSIFICATION	1.4744675616617866E-8	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999993097206369	WITHOUT_CLASSIFICATION	6.902793631101689E-7	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999999994476112	WITHOUT_CLASSIFICATION	5.523888198135591E-10	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999995618864	WITHOUT_CLASSIFICATION	4.381135913494927E-9	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999963699325	WITHOUT_CLASSIFICATION	3.6300675114042126E-9	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999994535506418	WITHOUT_CLASSIFICATION	5.464493582595496E-7	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999008572334032	WITHOUT_CLASSIFICATION	9.914276659683665E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999990398590481	WITHOUT_CLASSIFICATION	9.601409519030372E-7	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999987996004539	WITHOUT_CLASSIFICATION	1.200399546055339E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999999510898819	WITHOUT_CLASSIFICATION	4.891011799055276E-8	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999998974858305	WITHOUT_CLASSIFICATION	1.025141694761008E-7	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999993515522068	WITHOUT_CLASSIFICATION	6.484477932635893E-7	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999162641376	WITHOUT_CLASSIFICATION	8.373586233735171E-8	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999933894264	WITHOUT_CLASSIFICATION	6.610573727928604E-9	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999600235121	WITHOUT_CLASSIFICATION	3.99764879650752E-8	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999763404968	WITHOUT_CLASSIFICATION	2.3659503240611903E-8	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999990542528364	WITHOUT_CLASSIFICATION	9.457471636415514E-7	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999995018115742	WITHOUT_CLASSIFICATION	4.981884259296746E-7	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999767743069	WITHOUT_CLASSIFICATION	2.3225693215994408E-8	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999989822879	WITHOUT_CLASSIFICATION	1.0177120941047284E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999512884485	WITHOUT_CLASSIFICATION	4.871155132592222E-8	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999512884485	WITHOUT_CLASSIFICATION	4.871155132592222E-8	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999991267382348	WITHOUT_CLASSIFICATION	8.732617652005739E-6	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997467910527	WITHOUT_CLASSIFICATION	2.5320894725138214E-7	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999851166688	WITHOUT_CLASSIFICATION	1.4883331204757632E-7	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999998099631273	WITHOUT_CLASSIFICATION	1.9003687259932635E-7	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999968585059812	WITHOUT_CLASSIFICATION	3.1414940187881887E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999968585059812	WITHOUT_CLASSIFICATION	3.1414940187881887E-6	TEST
}	WITHOUT_CLASSIFICATION	0.999884132565031	WITHOUT_CLASSIFICATION	1.1586743496908977E-4	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999998624356663	WITHOUT_CLASSIFICATION	1.3756433366731648E-7	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999810041924	WITHOUT_CLASSIFICATION	1.8995807605084802E-7	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999621855903	WITHOUT_CLASSIFICATION	3.7814409741931384E-8	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998652256339	WITHOUT_CLASSIFICATION	1.34774366174999E-7	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999983234875057	WITHOUT_CLASSIFICATION	1.6765124942551127E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998188691587	WITHOUT_CLASSIFICATION	1.811308413399713E-7	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999998469132834	WITHOUT_CLASSIFICATION	1.5308671660460288E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999995866730927	WITHOUT_CLASSIFICATION	4.133269072882474E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999993407557645	WITHOUT_CLASSIFICATION	6.592442354096959E-7	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9989349489216502	WITHOUT_CLASSIFICATION	0.0010650510783498251	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983462916638	WITHOUT_CLASSIFICATION	1.653708336074139E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983462916638	WITHOUT_CLASSIFICATION	1.653708336074139E-6	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999953385494	WITHOUT_CLASSIFICATION	4.6614504993392895E-9	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999551658727196	WITHOUT_CLASSIFICATION	4.483412728047697E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999983549680015	WITHOUT_CLASSIFICATION	1.6450319985386252E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999991876987537	WITHOUT_CLASSIFICATION	8.123012463157331E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999992259125446	WITHOUT_CLASSIFICATION	7.740874552841868E-7	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999428645324	WITHOUT_CLASSIFICATION	5.7135467519769025E-8	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951276252333838	WITHOUT_CLASSIFICATION	0.004872374766616129	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999992744657721	WITHOUT_CLASSIFICATION	7.255342280287501E-7	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996613625728	WITHOUT_CLASSIFICATION	3.3863742724055884E-7	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999999237746359	WITHOUT_CLASSIFICATION	7.622536409276365E-8	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999998549643273	WITHOUT_CLASSIFICATION	1.4503567258706435E-7	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996693233942	WITHOUT_CLASSIFICATION	3.306766057620664E-7	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999100141068	WITHOUT_CLASSIFICATION	8.998589318143805E-8	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999925236174649	WITHOUT_CLASSIFICATION	7.476382535112512E-6	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999419864649	WITHOUT_CLASSIFICATION	5.8013535135997645E-8	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999998648110191	WITHOUT_CLASSIFICATION	1.3518898084744152E-7	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999981605917637	WITHOUT_CLASSIFICATION	1.8394082362792919E-6	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999990857782681	WITHOUT_CLASSIFICATION	9.142217318881087E-7	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999971683204475	WITHOUT_CLASSIFICATION	2.831679552567421E-6	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999998391646653	WITHOUT_CLASSIFICATION	1.6083533470904733E-7	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999940291839	WITHOUT_CLASSIFICATION	5.970816062149621E-9	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999993050882366	WITHOUT_CLASSIFICATION	6.9491176339973245E-6	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999993050882366	WITHOUT_CLASSIFICATION	6.9491176339973245E-6	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999994616538752	WITHOUT_CLASSIFICATION	5.38346124703968E-7	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999999012547	WITHOUT_CLASSIFICATION	9.874539612627428E-11	TEST
package	WITHOUT_CLASSIFICATION	0.9999892513533212	WITHOUT_CLASSIFICATION	1.0748646678754451E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999859195748	WITHOUT_CLASSIFICATION	1.4080425072212567E-8	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999997793523252	WITHOUT_CLASSIFICATION	2.206476747952506E-7	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999932552515	WITHOUT_CLASSIFICATION	6.7447485474089554E-9	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999996518856994	WITHOUT_CLASSIFICATION	3.481143007182276E-7	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999937577627	WITHOUT_CLASSIFICATION	6.242237361019726E-9	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999995599257175	WITHOUT_CLASSIFICATION	4.400742823985432E-7	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999998726472239	WITHOUT_CLASSIFICATION	1.2735277610476784E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934322482906	WITHOUT_CLASSIFICATION	6.567751709315662E-6	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999978713580432	WITHOUT_CLASSIFICATION	2.1286419568886256E-6	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998164763583	WITHOUT_CLASSIFICATION	1.8352364168677528E-7	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999306888138	WITHOUT_CLASSIFICATION	6.931118620894944E-8	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998684816034	WITHOUT_CLASSIFICATION	1.3151839661984572E-7	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999816941266	WITHOUT_CLASSIFICATION	1.8305873392200568E-8	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999856688239	WITHOUT_CLASSIFICATION	1.433117604320795E-8	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999914549293218	WITHOUT_CLASSIFICATION	8.54507067817527E-6	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999985120726956	WITHOUT_CLASSIFICATION	1.487927304349772E-6	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998307719378	WITHOUT_CLASSIFICATION	1.6922806225720224E-7	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999997167900716	WITHOUT_CLASSIFICATION	2.8320992841205486E-7	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997786351864	WITHOUT_CLASSIFICATION	2.213648136692719E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999990422756504	WITHOUT_CLASSIFICATION	9.57724349615302E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999991200068961	WITHOUT_CLASSIFICATION	8.799931039591165E-7	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999549672209	WITHOUT_CLASSIFICATION	4.503277905754263E-8	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999549672209	WITHOUT_CLASSIFICATION	4.503277905754263E-8	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999966391992188	WITHOUT_CLASSIFICATION	3.360800781173991E-6	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991012521777	WITHOUT_CLASSIFICATION	8.987478222155722E-7	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999874809149	WITHOUT_CLASSIFICATION	1.2519085056421459E-8	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999957736456	WITHOUT_CLASSIFICATION	4.2263543658743335E-9	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997483075445	WITHOUT_CLASSIFICATION	2.5169245557916456E-7	TEST
