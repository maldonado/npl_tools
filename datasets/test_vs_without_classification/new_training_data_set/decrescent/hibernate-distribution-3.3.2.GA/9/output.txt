test out the optimizer:	WITHOUT_CLASSIFICATION	0.9979997517129738	WITHOUT_CLASSIFICATION	0.002000248287026219	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9997920260413224	WITHOUT_CLASSIFICATION	2.0797395867756775E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.999985906801352	WITHOUT_CLASSIFICATION	1.4093198648062122E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928208460206	WITHOUT_CLASSIFICATION	7.179153979466809E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928208460206	WITHOUT_CLASSIFICATION	7.179153979466809E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999792079449128	WITHOUT_CLASSIFICATION	2.0792055087287783E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999719033014272	WITHOUT_CLASSIFICATION	2.8096698572858617E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998950656024207	WITHOUT_CLASSIFICATION	1.0493439757928814E-4	TEST
reference type	WITHOUT_CLASSIFICATION	0.99999516275169	WITHOUT_CLASSIFICATION	4.837248310025579E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999939121402126	WITHOUT_CLASSIFICATION	6.087859787342718E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999939121402126	WITHOUT_CLASSIFICATION	6.087859787342718E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999920641036495	WITHOUT_CLASSIFICATION	7.935896350482801E-6	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999901653257003	WITHOUT_CLASSIFICATION	9.834674299775097E-6	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999633738554751	WITHOUT_CLASSIFICATION	3.6626144524858665E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999939767497826	WITHOUT_CLASSIFICATION	6.023250217360154E-6	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999964917496257	WITHOUT_CLASSIFICATION	3.5082503744220944E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999918050991953	WITHOUT_CLASSIFICATION	8.194900804702442E-6	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999917774617298	WITHOUT_CLASSIFICATION	8.222538270127711E-6	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999856311143293	WITHOUT_CLASSIFICATION	1.436888567068258E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999986433940231	WITHOUT_CLASSIFICATION	1.3566059768913751E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999751819525647	WITHOUT_CLASSIFICATION	2.481804743516343E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999917333514855	WITHOUT_CLASSIFICATION	8.266648514527705E-6	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999917333514855	WITHOUT_CLASSIFICATION	8.266648514527705E-6	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999767014952564	WITHOUT_CLASSIFICATION	2.3298504743508846E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999921388362655	WITHOUT_CLASSIFICATION	7.861163734423228E-6	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999748072969454	WITHOUT_CLASSIFICATION	2.5192703054545068E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999614031409254	WITHOUT_CLASSIFICATION	3.859685907464436E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9999759959272196	WITHOUT_CLASSIFICATION	2.4004072780336373E-5	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999990826176316	WITHOUT_CLASSIFICATION	9.173823684017757E-7	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999572026819374	WITHOUT_CLASSIFICATION	4.279731806248023E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999889091632931	WITHOUT_CLASSIFICATION	1.1090836706988996E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.999994295964669	WITHOUT_CLASSIFICATION	5.7040353309994734E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999660520133231	WITHOUT_CLASSIFICATION	3.3947986676923445E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999724621150459	WITHOUT_CLASSIFICATION	2.7537884954011256E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999047933697206	WITHOUT_CLASSIFICATION	9.520663027943447E-5	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999966146789462	WITHOUT_CLASSIFICATION	3.3853210538975754E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999740215814349	WITHOUT_CLASSIFICATION	2.597841856514513E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999660339394051	WITHOUT_CLASSIFICATION	3.3966060595003936E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713941044128	WITHOUT_CLASSIFICATION	2.860589558724904E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999928908663286	WITHOUT_CLASSIFICATION	7.109133671388831E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999829443411519	WITHOUT_CLASSIFICATION	1.7055658848079865E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.999991946146084	WITHOUT_CLASSIFICATION	8.053853916038898E-6	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.999991946146084	WITHOUT_CLASSIFICATION	8.053853916038898E-6	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999928908663286	WITHOUT_CLASSIFICATION	7.109133671388831E-6	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9998317634338723	WITHOUT_CLASSIFICATION	1.682365661277658E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999734201466177	WITHOUT_CLASSIFICATION	2.6579853382314105E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999926069143253	WITHOUT_CLASSIFICATION	7.393085674699775E-6	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999983085830284	WITHOUT_CLASSIFICATION	1.6914169715645793E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999985009479725	WITHOUT_CLASSIFICATION	1.499052027519617E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9996445724047264	WITHOUT_CLASSIFICATION	3.554275952735966E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999552578860555	WITHOUT_CLASSIFICATION	4.474211394436931E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999995889518936	WITHOUT_CLASSIFICATION	4.11048106394674E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998847083483049	WITHOUT_CLASSIFICATION	1.152916516950561E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999761196266501	WITHOUT_CLASSIFICATION	2.388037334981853E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.999991946146084	WITHOUT_CLASSIFICATION	8.053853916038898E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999997848055584	WITHOUT_CLASSIFICATION	2.151944416049578E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999605082513371	WITHOUT_CLASSIFICATION	3.949174866304755E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999862002247759	WITHOUT_CLASSIFICATION	1.3799775223959619E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999959647929104	WITHOUT_CLASSIFICATION	4.0352070895852E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999857318536346	WITHOUT_CLASSIFICATION	1.4268146365321232E-5	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999947128246264	WITHOUT_CLASSIFICATION	5.287175373526452E-6	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999740291640851	WITHOUT_CLASSIFICATION	2.5970835914912082E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999848897643556	WITHOUT_CLASSIFICATION	1.5110235644424684E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999822164938665	WITHOUT_CLASSIFICATION	1.7783506133467357E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999987273637408	WITHOUT_CLASSIFICATION	1.272636259081744E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972753304948	WITHOUT_CLASSIFICATION	2.7246695053400996E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999582539192348	WITHOUT_CLASSIFICATION	4.174608076532021E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999946494140955	WITHOUT_CLASSIFICATION	5.350585904543042E-6	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999881682119213	WITHOUT_CLASSIFICATION	1.1831788078758277E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999993530319864	WITHOUT_CLASSIFICATION	6.469680134862919E-7	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999843710749806	WITHOUT_CLASSIFICATION	1.562892501940649E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999905768581091	WITHOUT_CLASSIFICATION	9.423141890863042E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999343613863108	WITHOUT_CLASSIFICATION	6.563861368923209E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999637265179	WITHOUT_CLASSIFICATION	3.627348210542766E-7	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999936877184475	WITHOUT_CLASSIFICATION	6.312281552498221E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997354232596356	WITHOUT_CLASSIFICATION	2.6457674036439233E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999811233821885	WITHOUT_CLASSIFICATION	1.887661781154102E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999703461733175	WITHOUT_CLASSIFICATION	2.9653826682560296E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999929909540527	WITHOUT_CLASSIFICATION	7.009045947321708E-6	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999811233821885	WITHOUT_CLASSIFICATION	1.887661781154102E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998832712841	WITHOUT_CLASSIFICATION	1.1672871599371948E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999979124677571	WITHOUT_CLASSIFICATION	2.0875322429005068E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999906502673872	WITHOUT_CLASSIFICATION	9.349732612800718E-6	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999928701130465	WITHOUT_CLASSIFICATION	7.129886953511843E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898510688192	WITHOUT_CLASSIFICATION	1.0148931180727141E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898510688192	WITHOUT_CLASSIFICATION	1.0148931180727141E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999867729717966	WITHOUT_CLASSIFICATION	1.3227028203325807E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999754187273794	WITHOUT_CLASSIFICATION	2.4581272620590366E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999890467389034	WITHOUT_CLASSIFICATION	1.0953261096571091E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999770340724525	WITHOUT_CLASSIFICATION	2.29659275475145E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999956890485755	WITHOUT_CLASSIFICATION	4.31095142452528E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999842421835852	WITHOUT_CLASSIFICATION	1.575781641475585E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999889240482775	WITHOUT_CLASSIFICATION	1.1075951722465712E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999906476076625	WITHOUT_CLASSIFICATION	9.352392337354704E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999901179656747	WITHOUT_CLASSIFICATION	9.88203432531008E-6	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999871281324317	WITHOUT_CLASSIFICATION	1.2871867568325996E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999825925657255	WITHOUT_CLASSIFICATION	1.7407434274480832E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999825925657255	WITHOUT_CLASSIFICATION	1.7407434274480832E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999904201357472	WITHOUT_CLASSIFICATION	9.579864252717987E-6	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999969861308603	WITHOUT_CLASSIFICATION	3.0138691397187744E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999836161103526	WITHOUT_CLASSIFICATION	1.6383889647412822E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999825925657255	WITHOUT_CLASSIFICATION	1.7407434274480832E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999904201357472	WITHOUT_CLASSIFICATION	9.579864252717987E-6	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999904201357472	WITHOUT_CLASSIFICATION	9.579864252717987E-6	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.99998468307886	WITHOUT_CLASSIFICATION	1.5316921140042413E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999649242578325	WITHOUT_CLASSIFICATION	3.507574216760838E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999891939020416	WITHOUT_CLASSIFICATION	1.0806097958364722E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999710754173989	WITHOUT_CLASSIFICATION	2.8924582601029468E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999883710534921	WITHOUT_CLASSIFICATION	1.1628946507949362E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999883710534921	WITHOUT_CLASSIFICATION	1.1628946507949362E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999939770428207	WITHOUT_CLASSIFICATION	6.022957179399378E-6	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999804577834468	WITHOUT_CLASSIFICATION	1.9542216553216907E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999791613681585	WITHOUT_CLASSIFICATION	2.083863184152657E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999933458527797	WITHOUT_CLASSIFICATION	6.654147220240215E-6	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999933458527797	WITHOUT_CLASSIFICATION	6.654147220240215E-6	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999675440052678	WITHOUT_CLASSIFICATION	3.245599473225594E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999794844824489	WITHOUT_CLASSIFICATION	2.0515517551068797E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996243782971154	WITHOUT_CLASSIFICATION	3.756217028846403E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999951297990938	WITHOUT_CLASSIFICATION	4.870200906166568E-6	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9995518259446445	WITHOUT_CLASSIFICATION	4.4817405535549685E-4	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999949200265356	WITHOUT_CLASSIFICATION	5.0799734644235274E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999668690462856	WITHOUT_CLASSIFICATION	3.3130953714329166E-5	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999298805208818	WITHOUT_CLASSIFICATION	7.01194791181858E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996243782971154	WITHOUT_CLASSIFICATION	3.756217028846403E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.999971078972819	WITHOUT_CLASSIFICATION	2.892102718099249E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999932297265743	WITHOUT_CLASSIFICATION	6.770273425627011E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999932297265743	WITHOUT_CLASSIFICATION	6.770273425627011E-6	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999647545295468	WITHOUT_CLASSIFICATION	3.5245470453157475E-5	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998298464479587	WITHOUT_CLASSIFICATION	1.7015355204126744E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999981382295121	WITHOUT_CLASSIFICATION	1.8617704878979714E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999157726773334	WITHOUT_CLASSIFICATION	8.422732266658116E-5	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999787149847978	WITHOUT_CLASSIFICATION	2.1285015202214603E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999391864125131	WITHOUT_CLASSIFICATION	6.081358748693533E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999627249317048	WITHOUT_CLASSIFICATION	3.727506829533517E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.999992877996751	WITHOUT_CLASSIFICATION	7.122003249087711E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999977061104122	WITHOUT_CLASSIFICATION	2.2938895877892524E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989440813507	WITHOUT_CLASSIFICATION	1.0559186493290146E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989440813507	WITHOUT_CLASSIFICATION	1.0559186493290146E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9979997517129738	WITHOUT_CLASSIFICATION	0.002000248287026219	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999860167812765	WITHOUT_CLASSIFICATION	1.3983218723419931E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999858464041804	WITHOUT_CLASSIFICATION	1.4153595819550303E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999877380652122	WITHOUT_CLASSIFICATION	1.2261934787868343E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999887351381376	WITHOUT_CLASSIFICATION	1.1264861862381858E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999872111143738	WITHOUT_CLASSIFICATION	1.2788885626295285E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999516896568974	WITHOUT_CLASSIFICATION	4.831034310257023E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999889412092363	WITHOUT_CLASSIFICATION	1.1058790763781461E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999917445116191	WITHOUT_CLASSIFICATION	8.255488380925778E-6	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999976179218244	WITHOUT_CLASSIFICATION	2.3820781756029932E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999872111143738	WITHOUT_CLASSIFICATION	1.2788885626295285E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998201037667507	WITHOUT_CLASSIFICATION	1.7989623324930602E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999913260758827	WITHOUT_CLASSIFICATION	8.673924117313136E-6	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.999987873017511	WITHOUT_CLASSIFICATION	1.2126982488912855E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999759556469622	WITHOUT_CLASSIFICATION	2.404435303788444E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999941629410026	WITHOUT_CLASSIFICATION	5.837058997332767E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928208460206	WITHOUT_CLASSIFICATION	7.179153979466809E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999989697677863	WITHOUT_CLASSIFICATION	1.0302322136999088E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999934219936203	WITHOUT_CLASSIFICATION	6.578006379695824E-6	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999822927883866	WITHOUT_CLASSIFICATION	1.770721161351601E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999975438063278	WITHOUT_CLASSIFICATION	2.4561936722015253E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999917326652016	WITHOUT_CLASSIFICATION	8.267334798460022E-6	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999828548480181	WITHOUT_CLASSIFICATION	1.7145151981905237E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999846000299467	WITHOUT_CLASSIFICATION	1.5399970053302946E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999933714020199	WITHOUT_CLASSIFICATION	6.628597980023219E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999989487684768	WITHOUT_CLASSIFICATION	1.0512315231924852E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999879924012199	WITHOUT_CLASSIFICATION	1.2007598780115116E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999917445116191	WITHOUT_CLASSIFICATION	8.255488380925778E-6	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999917326652016	WITHOUT_CLASSIFICATION	8.267334798460022E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999792079449128	WITHOUT_CLASSIFICATION	2.0792055087287783E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999717951375274	WITHOUT_CLASSIFICATION	2.820486247249261E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999475861751151	WITHOUT_CLASSIFICATION	5.241382488497253E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999645625046893	WITHOUT_CLASSIFICATION	3.543749531060781E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999917936236018	WITHOUT_CLASSIFICATION	8.206376398154526E-6	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999644972779529	WITHOUT_CLASSIFICATION	3.550272204711352E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999917909123968	WITHOUT_CLASSIFICATION	8.209087603272313E-6	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9996759695628299	WITHOUT_CLASSIFICATION	3.240304371701772E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999423744157337	WITHOUT_CLASSIFICATION	5.762558426615971E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999423744157337	WITHOUT_CLASSIFICATION	5.762558426615971E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998944737468999	WITHOUT_CLASSIFICATION	1.0552625310014331E-4	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999645887375082	WITHOUT_CLASSIFICATION	3.541126249188077E-5	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998191631475883	WITHOUT_CLASSIFICATION	1.8083685241175232E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999557095965966	WITHOUT_CLASSIFICATION	4.4290403403257756E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998944049352924	WITHOUT_CLASSIFICATION	1.0559506470763257E-4	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9998763284054611	WITHOUT_CLASSIFICATION	1.2367159453873636E-4	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9998859462962538	WITHOUT_CLASSIFICATION	1.140537037461843E-4	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999719033014272	WITHOUT_CLASSIFICATION	2.8096698572858617E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999984943859853	WITHOUT_CLASSIFICATION	1.5056140146766347E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999984943859853	WITHOUT_CLASSIFICATION	1.5056140146766347E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999966638487758	WITHOUT_CLASSIFICATION	3.336151224222669E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9998604989063499	WITHOUT_CLASSIFICATION	1.3950109365013736E-4	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999966638487758	WITHOUT_CLASSIFICATION	3.336151224222669E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999930974074908	WITHOUT_CLASSIFICATION	6.902592509290029E-6	TEST
int	WITHOUT_CLASSIFICATION	0.9999927179757959	WITHOUT_CLASSIFICATION	7.282024204094732E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999962683219786	WITHOUT_CLASSIFICATION	3.7316780213253335E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999917445116191	WITHOUT_CLASSIFICATION	8.255488380925778E-6	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999917326652016	WITHOUT_CLASSIFICATION	8.267334798460022E-6	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999917326652016	WITHOUT_CLASSIFICATION	8.267334798460022E-6	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999962776531828	WITHOUT_CLASSIFICATION	3.722346817194755E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9998709741083069	WITHOUT_CLASSIFICATION	1.2902589169312502E-4	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999895785474358	WITHOUT_CLASSIFICATION	1.0421452564195351E-4	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.99999516275169	WITHOUT_CLASSIFICATION	4.837248310025579E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.99999516275169	WITHOUT_CLASSIFICATION	4.837248310025579E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.9999891488199262	WITHOUT_CLASSIFICATION	1.0851180073774953E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999926944070042	WITHOUT_CLASSIFICATION	7.305592995814071E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999851101737242	WITHOUT_CLASSIFICATION	1.4889826275888537E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999923774791197	WITHOUT_CLASSIFICATION	7.622520880321039E-6	TEST
char	WITHOUT_CLASSIFICATION	0.9999937728155964	WITHOUT_CLASSIFICATION	6.227184403604283E-6	TEST
short	WITHOUT_CLASSIFICATION	0.9999917910749101	WITHOUT_CLASSIFICATION	8.208925089837663E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999939121402126	WITHOUT_CLASSIFICATION	6.087859787342718E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999917629701405	WITHOUT_CLASSIFICATION	8.237029859482013E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999917629701405	WITHOUT_CLASSIFICATION	8.237029859482013E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999920641036495	WITHOUT_CLASSIFICATION	7.935896350482801E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999920641036495	WITHOUT_CLASSIFICATION	7.935896350482801E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999966198082453	WITHOUT_CLASSIFICATION	3.3801917546143295E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999966198082453	WITHOUT_CLASSIFICATION	3.3801917546143295E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999722859942128	WITHOUT_CLASSIFICATION	2.7714005787168673E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999722859942128	WITHOUT_CLASSIFICATION	2.7714005787168673E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.99999516275169	WITHOUT_CLASSIFICATION	4.837248310025579E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999939121402126	WITHOUT_CLASSIFICATION	6.087859787342718E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999917629701405	WITHOUT_CLASSIFICATION	8.237029859482013E-6	TEST
float	WITHOUT_CLASSIFICATION	0.9999917629701405	WITHOUT_CLASSIFICATION	8.237029859482013E-6	TEST
long	WITHOUT_CLASSIFICATION	0.9999920641036495	WITHOUT_CLASSIFICATION	7.935896350482801E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999966198082453	WITHOUT_CLASSIFICATION	3.3801917546143295E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999966198082453	WITHOUT_CLASSIFICATION	3.3801917546143295E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999722859942128	WITHOUT_CLASSIFICATION	2.7714005787168673E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999748613714783	WITHOUT_CLASSIFICATION	2.513862852178255E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999925227229983	WITHOUT_CLASSIFICATION	7.477277001726611E-6	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999923145127074	WITHOUT_CLASSIFICATION	7.685487292557273E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999794800788536	WITHOUT_CLASSIFICATION	2.0519921146326304E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999843489228005	WITHOUT_CLASSIFICATION	1.565107719945988E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999917374421187	WITHOUT_CLASSIFICATION	8.262557881384838E-6	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999940414649823	WITHOUT_CLASSIFICATION	5.958535017640215E-6	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999949273015569	WITHOUT_CLASSIFICATION	5.072698443044771E-6	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999712300953449	WITHOUT_CLASSIFICATION	2.8769904655069326E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999839276957122	WITHOUT_CLASSIFICATION	1.607230428778379E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999746205628032	WITHOUT_CLASSIFICATION	2.5379437196890726E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999763506035152	WITHOUT_CLASSIFICATION	2.3649396484793554E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999867729717966	WITHOUT_CLASSIFICATION	1.3227028203325807E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999917374421187	WITHOUT_CLASSIFICATION	8.262557881384838E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999917374421187	WITHOUT_CLASSIFICATION	8.262557881384838E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999917374421187	WITHOUT_CLASSIFICATION	8.262557881384838E-6	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998958488530074	WITHOUT_CLASSIFICATION	1.0415114699260805E-4	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999741983744374	WITHOUT_CLASSIFICATION	2.5801625562553316E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999741983744374	WITHOUT_CLASSIFICATION	2.5801625562553316E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999874643084701	WITHOUT_CLASSIFICATION	1.2535691529985625E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999959667963209	WITHOUT_CLASSIFICATION	4.033203679113648E-6	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998195912525368	WITHOUT_CLASSIFICATION	1.804087474631634E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999861386580533	WITHOUT_CLASSIFICATION	1.3861341946771596E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999861386580533	WITHOUT_CLASSIFICATION	1.3861341946771596E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999964917496257	WITHOUT_CLASSIFICATION	3.5082503744220944E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999979615424008	WITHOUT_CLASSIFICATION	2.0384575991275052E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999979615424008	WITHOUT_CLASSIFICATION	2.0384575991275052E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999857168996102	WITHOUT_CLASSIFICATION	1.4283100389814676E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999818264746806	WITHOUT_CLASSIFICATION	1.8173525319468474E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999751819525647	WITHOUT_CLASSIFICATION	2.481804743516343E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
WHERE	WITHOUT_CLASSIFICATION	0.999991809014279	WITHOUT_CLASSIFICATION	8.190985721034407E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999918050991953	WITHOUT_CLASSIFICATION	8.194900804702442E-6	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9972224230274116	WITHOUT_CLASSIFICATION	0.0027775769725884147	TEST
ID	WITHOUT_CLASSIFICATION	0.9999917753902583	WITHOUT_CLASSIFICATION	8.22460974168492E-6	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999912045842143	WITHOUT_CLASSIFICATION	8.795415785724003E-6	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999546238063836	WITHOUT_CLASSIFICATION	4.537619361648503E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997016072381433	WITHOUT_CLASSIFICATION	2.9839276185681377E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999270409379808	WITHOUT_CLASSIFICATION	7.295906201911416E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999614031409254	WITHOUT_CLASSIFICATION	3.859685907464436E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999990621477263	WITHOUT_CLASSIFICATION	9.378522738174717E-7	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999864793275587	WITHOUT_CLASSIFICATION	1.3520672441205631E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999918330091314	WITHOUT_CLASSIFICATION	8.166990868549747E-6	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999917353468819	WITHOUT_CLASSIFICATION	8.264653118131745E-6	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999866192303838	WITHOUT_CLASSIFICATION	1.3380769616126776E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999864234955381	WITHOUT_CLASSIFICATION	1.3576504461843533E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992264155324	WITHOUT_CLASSIFICATION	7.7358446759372E-6	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999751819525647	WITHOUT_CLASSIFICATION	2.481804743516343E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999934679534952	WITHOUT_CLASSIFICATION	6.532046504778934E-6	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999870248740353	WITHOUT_CLASSIFICATION	1.2975125964648395E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999919362825196	WITHOUT_CLASSIFICATION	8.063717480417283E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999918050991953	WITHOUT_CLASSIFICATION	8.194900804702442E-6	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992264155324	WITHOUT_CLASSIFICATION	7.7358446759372E-6	TEST
properties	WITHOUT_CLASSIFICATION	0.9999934679534952	WITHOUT_CLASSIFICATION	6.532046504778934E-6	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999919362825196	WITHOUT_CLASSIFICATION	8.063717480417283E-6	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999505878697943	WITHOUT_CLASSIFICATION	4.9412130205705424E-5	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999917325813892	WITHOUT_CLASSIFICATION	8.267418610873117E-6	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999505878697943	WITHOUT_CLASSIFICATION	4.9412130205705424E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999917333514855	WITHOUT_CLASSIFICATION	8.266648514527705E-6	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
column index	WITHOUT_CLASSIFICATION	0.9999904817562607	WITHOUT_CLASSIFICATION	9.518243739218688E-6	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999892223918605	WITHOUT_CLASSIFICATION	1.0777608139506543E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997905916333166	WITHOUT_CLASSIFICATION	2.0940836668339796E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999602810893289	WITHOUT_CLASSIFICATION	3.971891067109086E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999893476104316	WITHOUT_CLASSIFICATION	1.0652389568419806E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999792045118368	WITHOUT_CLASSIFICATION	2.0795488163335374E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999560855302856	WITHOUT_CLASSIFICATION	4.391446971438347E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999973563330307	WITHOUT_CLASSIFICATION	2.643666969449064E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999792045118368	WITHOUT_CLASSIFICATION	2.0795488163335374E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999921388362655	WITHOUT_CLASSIFICATION	7.861163734423228E-6	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999920596365682	WITHOUT_CLASSIFICATION	7.940363431700535E-6	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999917321528669	WITHOUT_CLASSIFICATION	8.267847133123353E-6	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999992264155324	WITHOUT_CLASSIFICATION	7.7358446759372E-6	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999825302600651	WITHOUT_CLASSIFICATION	1.746973993486134E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999920804385694	WITHOUT_CLASSIFICATION	7.919561430708067E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998733524606991	WITHOUT_CLASSIFICATION	1.2664753930084196E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999901791895215	WITHOUT_CLASSIFICATION	9.820810478497513E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999677529067154	WITHOUT_CLASSIFICATION	3.224709328466724E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999990108519247	WITHOUT_CLASSIFICATION	9.891480752915225E-7	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999085985992242	WITHOUT_CLASSIFICATION	9.140140077573523E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.99999483020149	WITHOUT_CLASSIFICATION	5.169798510031766E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999917757389984	WITHOUT_CLASSIFICATION	8.224261001485953E-6	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999864925370863	WITHOUT_CLASSIFICATION	1.3507462913632087E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999655065117956	WITHOUT_CLASSIFICATION	3.4493488204397356E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999614031409254	WITHOUT_CLASSIFICATION	3.859685907464436E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999872164097953	WITHOUT_CLASSIFICATION	1.2783590204795446E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997186626826109	WITHOUT_CLASSIFICATION	2.813373173891798E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999757832863174	WITHOUT_CLASSIFICATION	2.4216713682587684E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999920115579696	WITHOUT_CLASSIFICATION	7.988442030507761E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999920343542696	WITHOUT_CLASSIFICATION	7.965645730359021E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999978890598664	WITHOUT_CLASSIFICATION	2.1109401336057673E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999979364893033	WITHOUT_CLASSIFICATION	2.0635106967100526E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999780049417342	WITHOUT_CLASSIFICATION	2.1995058265825062E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999784053258057	WITHOUT_CLASSIFICATION	2.1594674194234278E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999867470956845	WITHOUT_CLASSIFICATION	1.3252904315550958E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999934882049512	WITHOUT_CLASSIFICATION	6.511795048959232E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999934882049512	WITHOUT_CLASSIFICATION	6.511795048959232E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999616504574934	WITHOUT_CLASSIFICATION	3.834954250661296E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999777682217698	WITHOUT_CLASSIFICATION	2.223177823028674E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999944313163821	WITHOUT_CLASSIFICATION	5.568683617852841E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999608551733098	WITHOUT_CLASSIFICATION	3.914482669023664E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999963347445695	WITHOUT_CLASSIFICATION	3.665255430495064E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999638137226856	WITHOUT_CLASSIFICATION	3.618627731441399E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999753597478207	WITHOUT_CLASSIFICATION	2.4640252179328548E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9995537145458049	WITHOUT_CLASSIFICATION	4.4628545419516123E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999472171644095	WITHOUT_CLASSIFICATION	5.278283559058356E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999926020628004	WITHOUT_CLASSIFICATION	7.397937199577982E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999865561568245	WITHOUT_CLASSIFICATION	1.3443843175600963E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999919768013095	WITHOUT_CLASSIFICATION	8.02319869058923E-6	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999841537095556	WITHOUT_CLASSIFICATION	1.584629044436097E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999822165162764	WITHOUT_CLASSIFICATION	1.7783483723533792E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999821042262008	WITHOUT_CLASSIFICATION	1.7895773799190648E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999966265056226	WITHOUT_CLASSIFICATION	3.3734943773190784E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793940475123	WITHOUT_CLASSIFICATION	2.0605952487727976E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999938410168511	WITHOUT_CLASSIFICATION	6.1589831488496555E-6	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775318625809	WITHOUT_CLASSIFICATION	2.2468137419109023E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999933930050093	WITHOUT_CLASSIFICATION	6.606994990609859E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999978579609122	WITHOUT_CLASSIFICATION	2.1420390876823566E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999180889027177	WITHOUT_CLASSIFICATION	8.191109728235686E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999966265056226	WITHOUT_CLASSIFICATION	3.3734943773190784E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999642271356664	WITHOUT_CLASSIFICATION	3.577286433357418E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999985358780596	WITHOUT_CLASSIFICATION	1.4641219403982894E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999853503705891	WITHOUT_CLASSIFICATION	1.4649629410897567E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999298114758259	WITHOUT_CLASSIFICATION	7.018852417408711E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999864490429848	WITHOUT_CLASSIFICATION	1.3550957015234726E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999938410168511	WITHOUT_CLASSIFICATION	6.1589831488496555E-6	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999878909696696	WITHOUT_CLASSIFICATION	1.2109030330554146E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999892616230753	WITHOUT_CLASSIFICATION	1.0738376924683046E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999890558304118	WITHOUT_CLASSIFICATION	1.0944169588341163E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999934555898129	WITHOUT_CLASSIFICATION	6.5444101869862935E-6	TEST
found	WITHOUT_CLASSIFICATION	0.9999934555898129	WITHOUT_CLASSIFICATION	6.5444101869862935E-6	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999794125434031	WITHOUT_CLASSIFICATION	2.0587456596910713E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999864227016131	WITHOUT_CLASSIFICATION	1.3577298386988016E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999864227016131	WITHOUT_CLASSIFICATION	1.3577298386988016E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999784053258057	WITHOUT_CLASSIFICATION	2.1594674194234278E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999759783971653	WITHOUT_CLASSIFICATION	2.402160283466513E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998900912159544	WITHOUT_CLASSIFICATION	1.099087840454918E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999940701664909	WITHOUT_CLASSIFICATION	5.929833509170143E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998900912159544	WITHOUT_CLASSIFICATION	1.099087840454918E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999940701664909	WITHOUT_CLASSIFICATION	5.929833509170143E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998358794444949	WITHOUT_CLASSIFICATION	1.6412055550506908E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999918655572984	WITHOUT_CLASSIFICATION	8.134442701604488E-6	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999975802899669	WITHOUT_CLASSIFICATION	2.419710033074744E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.999986308259089	WITHOUT_CLASSIFICATION	1.3691740911117545E-5	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999658517486116	WITHOUT_CLASSIFICATION	3.414825138834193E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998180719665907	WITHOUT_CLASSIFICATION	1.8192803340931935E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998461725362751	WITHOUT_CLASSIFICATION	1.5382746372496006E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998461725362751	WITHOUT_CLASSIFICATION	1.5382746372496006E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999836487509944	WITHOUT_CLASSIFICATION	1.6351249005546854E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999865753669426	WITHOUT_CLASSIFICATION	1.3424633057456615E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999881844395381	WITHOUT_CLASSIFICATION	1.181556046199172E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999984575811096	WITHOUT_CLASSIFICATION	1.5424188902783161E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999813078005967	WITHOUT_CLASSIFICATION	1.8692199403296433E-5	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999988315766473	WITHOUT_CLASSIFICATION	1.168423352699619E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999988315766473	WITHOUT_CLASSIFICATION	1.168423352699619E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999378914986251	WITHOUT_CLASSIFICATION	6.210850137492643E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999378914986251	WITHOUT_CLASSIFICATION	6.210850137492643E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999985752006663	WITHOUT_CLASSIFICATION	1.4247993336430722E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998358794444949	WITHOUT_CLASSIFICATION	1.6412055550506908E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999827809588656	WITHOUT_CLASSIFICATION	1.721904113441887E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999427620639978	WITHOUT_CLASSIFICATION	5.7237936002099356E-5	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9998509935413443	WITHOUT_CLASSIFICATION	1.4900645865560265E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999812999638279	WITHOUT_CLASSIFICATION	1.8700036172054674E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995475817231221	WITHOUT_CLASSIFICATION	4.524182768778782E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998358794444949	WITHOUT_CLASSIFICATION	1.6412055550506908E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999812999638279	WITHOUT_CLASSIFICATION	1.8700036172054674E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995475817231221	WITHOUT_CLASSIFICATION	4.524182768778782E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999673143356865	WITHOUT_CLASSIFICATION	3.26856643134949E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999866165698205	WITHOUT_CLASSIFICATION	1.3383430179590196E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999926301591952	WITHOUT_CLASSIFICATION	7.369840804837358E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998358794444949	WITHOUT_CLASSIFICATION	1.6412055550506908E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998358794444949	WITHOUT_CLASSIFICATION	1.6412055550506908E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999945429022783	WITHOUT_CLASSIFICATION	5.4570977217297844E-6	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999908831545204	WITHOUT_CLASSIFICATION	9.116845479500756E-6	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999975257605518	WITHOUT_CLASSIFICATION	2.474239448294265E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999740215814349	WITHOUT_CLASSIFICATION	2.597841856514513E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999955581584019	WITHOUT_CLASSIFICATION	4.4418415981086175E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999978636109597	WITHOUT_CLASSIFICATION	2.136389040277408E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999778655836411	WITHOUT_CLASSIFICATION	2.2134416358902194E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999985112715196	WITHOUT_CLASSIFICATION	1.488728480393083E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999934553456712	WITHOUT_CLASSIFICATION	6.544654328910637E-6	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999548194965163	WITHOUT_CLASSIFICATION	4.51805034836399E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999929825273064	WITHOUT_CLASSIFICATION	7.017472693684863E-6	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999899261219352	WITHOUT_CLASSIFICATION	1.0073878064822683E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999726390266078	WITHOUT_CLASSIFICATION	2.736097339208118E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999610751848481	WITHOUT_CLASSIFICATION	3.892481515192922E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719846772188	WITHOUT_CLASSIFICATION	2.801532278110411E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999841909384345	WITHOUT_CLASSIFICATION	1.580906156550183E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999740215814349	WITHOUT_CLASSIFICATION	2.597841856514513E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999698156014157	WITHOUT_CLASSIFICATION	3.0184398584234063E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999793971174784	WITHOUT_CLASSIFICATION	2.060288252161551E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999895823153843	WITHOUT_CLASSIFICATION	1.0417684615735449E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999928952925665	WITHOUT_CLASSIFICATION	7.10470743350012E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.999986425901159	WITHOUT_CLASSIFICATION	1.3574098841036153E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.999986425901159	WITHOUT_CLASSIFICATION	1.3574098841036153E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999740215814349	WITHOUT_CLASSIFICATION	2.597841856514513E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999865436296188	WITHOUT_CLASSIFICATION	1.3456370381230573E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9994923323352949	WITHOUT_CLASSIFICATION	5.076676647051005E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9995167792575104	WITHOUT_CLASSIFICATION	4.8322074248962385E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999858238736139	WITHOUT_CLASSIFICATION	1.4176126386095025E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999917365282308	WITHOUT_CLASSIFICATION	8.263471769240852E-6	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999967497819289	WITHOUT_CLASSIFICATION	3.2502180711692184E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999778950453537	WITHOUT_CLASSIFICATION	2.2104954646369185E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994221541025	WITHOUT_CLASSIFICATION	5.778458975381016E-7	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999812282426078	WITHOUT_CLASSIFICATION	1.877175739225662E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999495316124803	WITHOUT_CLASSIFICATION	5.0468387519627795E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999839384571733	WITHOUT_CLASSIFICATION	1.6061542826741948E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999646958004207	WITHOUT_CLASSIFICATION	3.5304199579311905E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999976051498037	WITHOUT_CLASSIFICATION	2.3948501962240986E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937415217923	WITHOUT_CLASSIFICATION	6.25847820760768E-6	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999972847472276	WITHOUT_CLASSIFICATION	2.7152527724030426E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999956841985999	WITHOUT_CLASSIFICATION	4.315801400173586E-6	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999963899528467	WITHOUT_CLASSIFICATION	3.6100471533521285E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925857634705	WITHOUT_CLASSIFICATION	7.414236529427626E-6	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999981594771803	WITHOUT_CLASSIFICATION	1.8405228196921226E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999982356537762	WITHOUT_CLASSIFICATION	1.7643462237927703E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999998689987404	WITHOUT_CLASSIFICATION	1.3100125959684136E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916324835048	WITHOUT_CLASSIFICATION	8.367516495240121E-6	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911517641188	WITHOUT_CLASSIFICATION	8.848235881104185E-6	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794551871638	WITHOUT_CLASSIFICATION	2.054481283614585E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971950675824	WITHOUT_CLASSIFICATION	2.804932417599964E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790977602439	WITHOUT_CLASSIFICATION	2.090223975615495E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999898856867241	WITHOUT_CLASSIFICATION	1.0114313275951365E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999985210872568	WITHOUT_CLASSIFICATION	1.4789127432040193E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826923626508	WITHOUT_CLASSIFICATION	1.7307637349245502E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841252900279	WITHOUT_CLASSIFICATION	1.5874709972074177E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814233632127	WITHOUT_CLASSIFICATION	1.8576636787215E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871541231189	WITHOUT_CLASSIFICATION	1.2845876881111979E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787735628548	WITHOUT_CLASSIFICATION	2.1226437145155174E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789615914035	WITHOUT_CLASSIFICATION	2.1038408596530458E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999782448467506	WITHOUT_CLASSIFICATION	2.1755153249344368E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971347709255	WITHOUT_CLASSIFICATION	2.8652290744930728E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999898434699237	WITHOUT_CLASSIFICATION	1.015653007625268E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999952548254111	WITHOUT_CLASSIFICATION	4.745174588897054E-6	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999996321435564	WITHOUT_CLASSIFICATION	3.6785644368096454E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998064901914544	WITHOUT_CLASSIFICATION	1.935098085457048E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999881978557232	WITHOUT_CLASSIFICATION	1.1802144276697973E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999841408119484	WITHOUT_CLASSIFICATION	1.585918805151474E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999968217979144	WITHOUT_CLASSIFICATION	3.1782020856687716E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999865413284899	WITHOUT_CLASSIFICATION	1.3458671510177147E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999865896951587	WITHOUT_CLASSIFICATION	1.3410304841343678E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999962036971351	WITHOUT_CLASSIFICATION	3.7963028648901816E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998314369704594	WITHOUT_CLASSIFICATION	1.6856302954069004E-4	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999918007067226	WITHOUT_CLASSIFICATION	8.19929327753563E-6	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999975324312755	WITHOUT_CLASSIFICATION	2.467568724426597E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999929647097093	WITHOUT_CLASSIFICATION	7.035290290708459E-6	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999815350296908	WITHOUT_CLASSIFICATION	1.846497030918287E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999899458289742	WITHOUT_CLASSIFICATION	1.0054171025850495E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753641214373	WITHOUT_CLASSIFICATION	2.4635878562749942E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770883999358	WITHOUT_CLASSIFICATION	2.2911600064242773E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953978359825	WITHOUT_CLASSIFICATION	4.602164017538374E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756242930973	WITHOUT_CLASSIFICATION	2.4375706902756965E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.999893525492447	WITHOUT_CLASSIFICATION	1.0647450755302084E-4	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999773663293098	WITHOUT_CLASSIFICATION	2.2633670690174183E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999981153796353	WITHOUT_CLASSIFICATION	1.8846203646985748E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999837037877509	WITHOUT_CLASSIFICATION	1.6296212249101976E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708741049426	WITHOUT_CLASSIFICATION	2.9125895057478746E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999654902743335	WITHOUT_CLASSIFICATION	3.450972566659522E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999844212723467	WITHOUT_CLASSIFICATION	1.5578727653333647E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999782338465025	WITHOUT_CLASSIFICATION	2.176615349745049E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999994214706165	WITHOUT_CLASSIFICATION	5.785293835046242E-6	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999580097205931	WITHOUT_CLASSIFICATION	4.199027940685637E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999806754532576	WITHOUT_CLASSIFICATION	1.9324546742416704E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999335982335621	WITHOUT_CLASSIFICATION	6.640176643782258E-5	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999832544733381	WITHOUT_CLASSIFICATION	1.6745526661856314E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998064901914544	WITHOUT_CLASSIFICATION	1.935098085457048E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999967627483684	WITHOUT_CLASSIFICATION	3.2372516315940508E-6	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999879953077457	WITHOUT_CLASSIFICATION	1.2004692254373234E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999840783497719	WITHOUT_CLASSIFICATION	1.5921650228187122E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999952548254111	WITHOUT_CLASSIFICATION	4.745174588897054E-6	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999736416821927	WITHOUT_CLASSIFICATION	2.635831780730947E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999895169246256	WITHOUT_CLASSIFICATION	1.0483075374433787E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.999893525492447	WITHOUT_CLASSIFICATION	1.0647450755302084E-4	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999801954495345	WITHOUT_CLASSIFICATION	1.980455046549529E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999766004808877	WITHOUT_CLASSIFICATION	2.3399519112246188E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999646624887154	WITHOUT_CLASSIFICATION	3.5337511284564495E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999753366439161	WITHOUT_CLASSIFICATION	2.4663356083807915E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999747550592317	WITHOUT_CLASSIFICATION	2.524494076824139E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999706294739383	WITHOUT_CLASSIFICATION	2.9370526061668743E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999805836020168	WITHOUT_CLASSIFICATION	1.9416397983195382E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999943987437417	WITHOUT_CLASSIFICATION	5.6012562582915364E-6	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994919118774758	WITHOUT_CLASSIFICATION	5.080881225242106E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.999978466750917	WITHOUT_CLASSIFICATION	2.1533249083006915E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999628996285022	WITHOUT_CLASSIFICATION	3.710037149795768E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999953039440839	WITHOUT_CLASSIFICATION	4.696055916202164E-6	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999869735869387	WITHOUT_CLASSIFICATION	1.302641306134422E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999514569499708	WITHOUT_CLASSIFICATION	4.854305002913492E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999726009941672	WITHOUT_CLASSIFICATION	2.739900583287626E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988905690418	WITHOUT_CLASSIFICATION	1.1094309581991784E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999887731816296	WITHOUT_CLASSIFICATION	1.1226818370441977E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999913062877788	WITHOUT_CLASSIFICATION	8.693712221262715E-6	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999893601919186	WITHOUT_CLASSIFICATION	1.0639808081360279E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999592956985861	WITHOUT_CLASSIFICATION	4.07043014138476E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999918221757162	WITHOUT_CLASSIFICATION	8.177824283819211E-6	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999958939297607	WITHOUT_CLASSIFICATION	4.106070239248881E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999669793963843	WITHOUT_CLASSIFICATION	3.302060361571993E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999922899478089	WITHOUT_CLASSIFICATION	7.710052191158819E-6	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.99999386698116	WITHOUT_CLASSIFICATION	6.133018840010991E-6	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.99999386811716	WITHOUT_CLASSIFICATION	6.131882839954582E-6	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999952548254111	WITHOUT_CLASSIFICATION	4.745174588897054E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998064901914544	WITHOUT_CLASSIFICATION	1.935098085457048E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999676714593208	WITHOUT_CLASSIFICATION	3.2328540679241626E-5	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999976288187477	WITHOUT_CLASSIFICATION	2.3711812523295602E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9992510071016757	WITHOUT_CLASSIFICATION	7.489928983243029E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999725868305124	WITHOUT_CLASSIFICATION	2.7413169487603073E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999726007919633	WITHOUT_CLASSIFICATION	2.739920803667904E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999726147474374	WITHOUT_CLASSIFICATION	2.7385252562590422E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998064901914544	WITHOUT_CLASSIFICATION	1.935098085457048E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999865205624683	WITHOUT_CLASSIFICATION	1.3479437531770306E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999887731816296	WITHOUT_CLASSIFICATION	1.1226818370441977E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999893940761585	WITHOUT_CLASSIFICATION	1.0605923841569579E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988905690418	WITHOUT_CLASSIFICATION	1.1094309581991784E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999754558400452	WITHOUT_CLASSIFICATION	2.4544159954764797E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9991238811747833	WITHOUT_CLASSIFICATION	8.761188252165676E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999707538016157	WITHOUT_CLASSIFICATION	2.9246198384335754E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999646624887154	WITHOUT_CLASSIFICATION	3.5337511284564495E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999753366439161	WITHOUT_CLASSIFICATION	2.4663356083807915E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999747550592317	WITHOUT_CLASSIFICATION	2.524494076824139E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999872353717421	WITHOUT_CLASSIFICATION	1.2764628257995526E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999812885061177	WITHOUT_CLASSIFICATION	1.8711493882360882E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999756615950365	WITHOUT_CLASSIFICATION	2.433840496357748E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988905690418	WITHOUT_CLASSIFICATION	1.1094309581991784E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999754558400452	WITHOUT_CLASSIFICATION	2.4544159954764797E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998064901914544	WITHOUT_CLASSIFICATION	1.935098085457048E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999706294739383	WITHOUT_CLASSIFICATION	2.9370526061668743E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999805836020168	WITHOUT_CLASSIFICATION	1.9416397983195382E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999943987437417	WITHOUT_CLASSIFICATION	5.6012562582915364E-6	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969504080372	WITHOUT_CLASSIFICATION	3.0495919629086028E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975839566735	WITHOUT_CLASSIFICATION	2.416043326517646E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999795110433168	WITHOUT_CLASSIFICATION	2.048895668312192E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999864881912712	WITHOUT_CLASSIFICATION	1.351180872868505E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999762569727113	WITHOUT_CLASSIFICATION	2.3743027288614456E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999672378960576	WITHOUT_CLASSIFICATION	3.276210394245097E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999132396889062	WITHOUT_CLASSIFICATION	8.676031109376341E-5	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999544720219901	WITHOUT_CLASSIFICATION	4.552797800986426E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999752211234272	WITHOUT_CLASSIFICATION	2.47788765727472E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790977602439	WITHOUT_CLASSIFICATION	2.090223975615495E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841252900279	WITHOUT_CLASSIFICATION	1.5874709972074177E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999853926274095	WITHOUT_CLASSIFICATION	1.4607372590503246E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999788925531158	WITHOUT_CLASSIFICATION	2.110744688413845E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793452559353	WITHOUT_CLASSIFICATION	2.065474406475361E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999894140697907	WITHOUT_CLASSIFICATION	1.0585930209275012E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999917325813892	WITHOUT_CLASSIFICATION	8.267418610873117E-6	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814233632127	WITHOUT_CLASSIFICATION	1.8576636787215E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786986642409	WITHOUT_CLASSIFICATION	2.1301335759079168E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999994214706165	WITHOUT_CLASSIFICATION	5.785293835046242E-6	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999780945675079	WITHOUT_CLASSIFICATION	2.190543249207858E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999992739284158	WITHOUT_CLASSIFICATION	7.260715842007077E-6	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999933940260851	WITHOUT_CLASSIFICATION	6.605973914897979E-6	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9995960856583187	WITHOUT_CLASSIFICATION	4.039143416812844E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999973340104742	WITHOUT_CLASSIFICATION	2.665989525774106E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999505878697943	WITHOUT_CLASSIFICATION	4.9412130205705424E-5	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999941783272169	WITHOUT_CLASSIFICATION	5.821672783124361E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994221541025	WITHOUT_CLASSIFICATION	5.778458975381016E-7	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999694040975832	WITHOUT_CLASSIFICATION	3.0595902416780334E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999890776261194	WITHOUT_CLASSIFICATION	1.0922373880663606E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999916072883609	WITHOUT_CLASSIFICATION	8.39271163910056E-6	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.99998252565913	WITHOUT_CLASSIFICATION	1.7474340869894684E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999931987124785	WITHOUT_CLASSIFICATION	6.801287521536156E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999992882900608	WITHOUT_CLASSIFICATION	7.117099392010301E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831180455856	WITHOUT_CLASSIFICATION	1.6881954414429222E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832668075104	WITHOUT_CLASSIFICATION	1.673319248956488E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999965593182167	WITHOUT_CLASSIFICATION	3.440681783292176E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999622261674705	WITHOUT_CLASSIFICATION	3.7773832529409946E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999906554830461	WITHOUT_CLASSIFICATION	9.34451695395704E-6	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999539851156122	WITHOUT_CLASSIFICATION	4.601488438786432E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999953741415212	WITHOUT_CLASSIFICATION	4.6258584788077625E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999809478728546	WITHOUT_CLASSIFICATION	1.9052127145356065E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999896495181017	WITHOUT_CLASSIFICATION	1.035048189836346E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999571972906418	WITHOUT_CLASSIFICATION	4.280270935808253E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999604577320117	WITHOUT_CLASSIFICATION	3.954226798837069E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999809478728546	WITHOUT_CLASSIFICATION	1.9052127145356065E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999978841785062	WITHOUT_CLASSIFICATION	2.1158214937742894E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999610125426731	WITHOUT_CLASSIFICATION	3.898745732683511E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847198063538	WITHOUT_CLASSIFICATION	1.5280193646139308E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999955419331851	WITHOUT_CLASSIFICATION	4.458066814983583E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999981334680077	WITHOUT_CLASSIFICATION	1.8665319923013121E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999702258303027	WITHOUT_CLASSIFICATION	2.9774169697276938E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999911276906684	WITHOUT_CLASSIFICATION	8.872309331548182E-6	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999689173086772	WITHOUT_CLASSIFICATION	3.1082691322881656E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999689173086772	WITHOUT_CLASSIFICATION	3.1082691322881656E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999948821693838	WITHOUT_CLASSIFICATION	5.117830616220611E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999995818851923	WITHOUT_CLASSIFICATION	4.181148076989847E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999963652828034	WITHOUT_CLASSIFICATION	3.6347171964657997E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999937819149219	WITHOUT_CLASSIFICATION	6.218085078048554E-6	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.99999837845711	WITHOUT_CLASSIFICATION	1.6215428899519245E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999549482428379	WITHOUT_CLASSIFICATION	4.5051757161998965E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999609078629228	WITHOUT_CLASSIFICATION	3.909213707717343E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999852025069738	WITHOUT_CLASSIFICATION	1.4797493026218817E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999822394315121	WITHOUT_CLASSIFICATION	1.7760568487907848E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999998155011591	WITHOUT_CLASSIFICATION	1.8449884090722484E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999310386109098	WITHOUT_CLASSIFICATION	6.896138909025147E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999340736029684	WITHOUT_CLASSIFICATION	6.592639703162281E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999092169594667	WITHOUT_CLASSIFICATION	9.078304053326835E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999837553851817	WITHOUT_CLASSIFICATION	1.6244614818264007E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999946289669795	WITHOUT_CLASSIFICATION	5.371033020493922E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999530752048316	WITHOUT_CLASSIFICATION	4.692479516839524E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999994678633146	WITHOUT_CLASSIFICATION	5.321366854031151E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999838321231732	WITHOUT_CLASSIFICATION	1.6167876826791004E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999711435050296	WITHOUT_CLASSIFICATION	2.885649497050049E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999627004303121	WITHOUT_CLASSIFICATION	3.729956968788803E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999914312253583	WITHOUT_CLASSIFICATION	8.568774641740725E-6	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999410603736779	WITHOUT_CLASSIFICATION	5.893962632209406E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999865135772955	WITHOUT_CLASSIFICATION	1.3486422704405035E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999922299529692	WITHOUT_CLASSIFICATION	7.770047030831073E-6	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999813412046132	WITHOUT_CLASSIFICATION	1.8658795386683095E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999901639154649	WITHOUT_CLASSIFICATION	9.83608453503545E-6	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999991154476559	WITHOUT_CLASSIFICATION	8.845523440864313E-7	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999975869433747	WITHOUT_CLASSIFICATION	2.41305662543379E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995125272633371	WITHOUT_CLASSIFICATION	4.8747273666282777E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999866005502713	WITHOUT_CLASSIFICATION	1.3399449728736583E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999726195396591	WITHOUT_CLASSIFICATION	2.7380460340902044E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999958706905907	WITHOUT_CLASSIFICATION	4.12930940930043E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999932343284118	WITHOUT_CLASSIFICATION	6.765671588153018E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999946125424226	WITHOUT_CLASSIFICATION	5.387457577309641E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999855368198861	WITHOUT_CLASSIFICATION	1.4463180113957234E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.999986572628305	WITHOUT_CLASSIFICATION	1.3427371694964511E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998325669625087	WITHOUT_CLASSIFICATION	1.674330374913683E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999768214941462	WITHOUT_CLASSIFICATION	2.3178505853700068E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999994031000094	WITHOUT_CLASSIFICATION	5.968999906074282E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999923673292608	WITHOUT_CLASSIFICATION	7.632670739305056E-6	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999865083776946	WITHOUT_CLASSIFICATION	1.34916223053224E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999628996285022	WITHOUT_CLASSIFICATION	3.710037149795768E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999628996285022	WITHOUT_CLASSIFICATION	3.710037149795768E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999955963229746	WITHOUT_CLASSIFICATION	4.40367702538772E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999894710445614	WITHOUT_CLASSIFICATION	1.0528955438679922E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999793636256266	WITHOUT_CLASSIFICATION	2.0636374373400272E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999870280741812	WITHOUT_CLASSIFICATION	1.2971925818855422E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999900575207805	WITHOUT_CLASSIFICATION	9.942479219457742E-6	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999921564195932	WITHOUT_CLASSIFICATION	7.843580406856094E-6	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999987048352441	WITHOUT_CLASSIFICATION	1.295164755904898E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999954896674718	WITHOUT_CLASSIFICATION	4.5103325281881696E-5	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999938103678627	WITHOUT_CLASSIFICATION	6.1896321373563815E-6	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999869809591215	WITHOUT_CLASSIFICATION	1.3019040878448962E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999545785127829	WITHOUT_CLASSIFICATION	4.542148721706796E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998870805718384	WITHOUT_CLASSIFICATION	1.1291942816162614E-4	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999713039303564	WITHOUT_CLASSIFICATION	2.8696069643523046E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999874523852244	WITHOUT_CLASSIFICATION	1.2547614775576097E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999715004573175	WITHOUT_CLASSIFICATION	2.8499542682445916E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.999996361221491	WITHOUT_CLASSIFICATION	3.6387785088365757E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999986528878048	WITHOUT_CLASSIFICATION	1.3471121951787918E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999084802375	WITHOUT_CLASSIFICATION	9.151976257611948E-8	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999972435994317	WITHOUT_CLASSIFICATION	2.7564005683837236E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999412234855275	WITHOUT_CLASSIFICATION	5.8776514472472546E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999922536074011	WITHOUT_CLASSIFICATION	7.746392598894809E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999972435994317	WITHOUT_CLASSIFICATION	2.7564005683837236E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999363611668807	WITHOUT_CLASSIFICATION	6.36388331192986E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999940936300409	WITHOUT_CLASSIFICATION	5.906369959168074E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999668315821505	WITHOUT_CLASSIFICATION	3.3168417849468586E-5	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999339989316763	WITHOUT_CLASSIFICATION	6.600106832373082E-5	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999865886383155	WITHOUT_CLASSIFICATION	1.3411361684632869E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999911659014404	WITHOUT_CLASSIFICATION	8.834098559432946E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999713284356707	WITHOUT_CLASSIFICATION	2.8671564329343032E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999791887586879	WITHOUT_CLASSIFICATION	2.0811241312133217E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999935364686179	WITHOUT_CLASSIFICATION	6.463531382098423E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999715704970674	WITHOUT_CLASSIFICATION	2.8429502932495805E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999957058473129	WITHOUT_CLASSIFICATION	4.294152687118937E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999912242352073	WITHOUT_CLASSIFICATION	8.775764792705192E-5	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999980988830905	WITHOUT_CLASSIFICATION	1.9011169094212781E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999942703084079	WITHOUT_CLASSIFICATION	5.7296915920940405E-6	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999903449131189	WITHOUT_CLASSIFICATION	9.655086881062693E-6	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9996431732471479	WITHOUT_CLASSIFICATION	3.5682675285212307E-4	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999928473118442	WITHOUT_CLASSIFICATION	7.152688155656047E-6	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999865275355168	WITHOUT_CLASSIFICATION	1.3472464483315978E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999611195388554	WITHOUT_CLASSIFICATION	3.888046114470494E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999921055831515	WITHOUT_CLASSIFICATION	7.894416848504255E-5	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997729913380777	WITHOUT_CLASSIFICATION	2.2700866192237502E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.999984787206258	WITHOUT_CLASSIFICATION	1.5212793741785351E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992097022904	WITHOUT_CLASSIFICATION	7.902977095720414E-7	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999886624551587	WITHOUT_CLASSIFICATION	1.1337544841321353E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998952423677298	WITHOUT_CLASSIFICATION	1.0475763227031527E-4	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999970028981977	WITHOUT_CLASSIFICATION	2.997101802361345E-6	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999992162283394	WITHOUT_CLASSIFICATION	7.837716606527647E-7	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999926144264205	WITHOUT_CLASSIFICATION	7.385573579563769E-6	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999922076044924	WITHOUT_CLASSIFICATION	7.792395507651758E-6	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999991461754728	WITHOUT_CLASSIFICATION	8.538245272322235E-7	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.999992882900608	WITHOUT_CLASSIFICATION	7.117099392010301E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999588503432534	WITHOUT_CLASSIFICATION	4.114965674666194E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999977688653405	WITHOUT_CLASSIFICATION	2.231134659470368E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999962013405359	WITHOUT_CLASSIFICATION	3.798659464097793E-6	TEST
do the test	WITHOUT_CLASSIFICATION	0.9994571574035936	WITHOUT_CLASSIFICATION	5.428425964063451E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999075576787723	WITHOUT_CLASSIFICATION	9.244232122777326E-5	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.999988177234633	WITHOUT_CLASSIFICATION	1.182276536711146E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999768664084774	WITHOUT_CLASSIFICATION	2.3133591522610614E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999964387650916	WITHOUT_CLASSIFICATION	3.5612349083820105E-6	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999993926590987	WITHOUT_CLASSIFICATION	6.073409013038482E-6	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999939273644347	WITHOUT_CLASSIFICATION	6.072635565291254E-6	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999892120247059	WITHOUT_CLASSIFICATION	1.0787975294040478E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999896502897123	WITHOUT_CLASSIFICATION	1.0349710287695836E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9928030421759647	WITHOUT_CLASSIFICATION	0.007196957824035278	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999931023099576	WITHOUT_CLASSIFICATION	6.897690042435739E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999878301413714	WITHOUT_CLASSIFICATION	1.216985862853545E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999950085205208	WITHOUT_CLASSIFICATION	4.991479479105332E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999939633887195	WITHOUT_CLASSIFICATION	6.036611280483271E-6	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999926677545256	WITHOUT_CLASSIFICATION	7.332245474350099E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999905111550886	WITHOUT_CLASSIFICATION	9.48884491140883E-6	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999882844099157	WITHOUT_CLASSIFICATION	1.1715590084288937E-5	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999925185982816	WITHOUT_CLASSIFICATION	7.481401718391106E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999954221563466	WITHOUT_CLASSIFICATION	4.5778436533461446E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999976430078186	WITHOUT_CLASSIFICATION	2.3569921813927756E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998688342251015	WITHOUT_CLASSIFICATION	1.3116577489842118E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9999968663404623	WITHOUT_CLASSIFICATION	3.13365953775303E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999951880481159	WITHOUT_CLASSIFICATION	4.8119518841203805E-6	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999994648889794	WITHOUT_CLASSIFICATION	5.351110205743585E-7	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999578528767367	WITHOUT_CLASSIFICATION	4.2147123263364144E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999874938587065	WITHOUT_CLASSIFICATION	1.2506141293494735E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745025039044	WITHOUT_CLASSIFICATION	2.5497496095581038E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951592628636	WITHOUT_CLASSIFICATION	4.84073713640213E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763459058215	WITHOUT_CLASSIFICATION	2.365409417848029E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999914160268942	WITHOUT_CLASSIFICATION	8.583973105811428E-6	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999837268553604	WITHOUT_CLASSIFICATION	1.627314463952521E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999952293055524	WITHOUT_CLASSIFICATION	4.770694447505905E-6	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999983490874985	WITHOUT_CLASSIFICATION	1.6509125014626683E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999850212312377	WITHOUT_CLASSIFICATION	1.4978768762331349E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742766725469	WITHOUT_CLASSIFICATION	2.5723327453044217E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.9999850212312377	WITHOUT_CLASSIFICATION	1.4978768762331349E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998897658948829	WITHOUT_CLASSIFICATION	1.1023410511709285E-4	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999861792341626	WITHOUT_CLASSIFICATION	1.3820765837542872E-5	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999915286076705	WITHOUT_CLASSIFICATION	8.471392329539889E-6	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999270025381474	WITHOUT_CLASSIFICATION	7.29974618525564E-5	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999958166064245	WITHOUT_CLASSIFICATION	4.183393575500958E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.993854221076769	WITHOUT_CLASSIFICATION	0.0061457789232310005	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.99999716085229	WITHOUT_CLASSIFICATION	2.8391477100923445E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999827043919912	WITHOUT_CLASSIFICATION	1.7295608008817558E-5	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999971827739829	WITHOUT_CLASSIFICATION	2.8172260171739905E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998767485976123	WITHOUT_CLASSIFICATION	1.2325140238764678E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999853655434294	WITHOUT_CLASSIFICATION	1.4634456570452092E-5	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999950830344307	WITHOUT_CLASSIFICATION	4.916965569231871E-6	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998946491981852	WITHOUT_CLASSIFICATION	1.0535080181479364E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9993822953408079	WITHOUT_CLASSIFICATION	6.1770465919208E-4	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999827270256305	WITHOUT_CLASSIFICATION	1.727297436942833E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999997709230912	WITHOUT_CLASSIFICATION	2.290769088014532E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999930847661492	WITHOUT_CLASSIFICATION	6.915233850731367E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999930847661492	WITHOUT_CLASSIFICATION	6.915233850731367E-6	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999826036523124	WITHOUT_CLASSIFICATION	1.7396347687698247E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999871651569825	WITHOUT_CLASSIFICATION	1.2834843017423768E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999892209983201	WITHOUT_CLASSIFICATION	1.0779001679844496E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999737362584377	WITHOUT_CLASSIFICATION	2.626374156225991E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999891114671526	WITHOUT_CLASSIFICATION	1.0888532847338745E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999654251408426	WITHOUT_CLASSIFICATION	3.457485915735725E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997795668925956	WITHOUT_CLASSIFICATION	2.2043310740445528E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999894598701634	WITHOUT_CLASSIFICATION	1.0540129836618806E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.999988558590227	WITHOUT_CLASSIFICATION	1.1441409773050984E-5	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999886900049347	WITHOUT_CLASSIFICATION	1.130999506535195E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999796386365364	WITHOUT_CLASSIFICATION	2.0361363463648288E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999903149383074	WITHOUT_CLASSIFICATION	9.6850616927285E-6	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999990809437484	WITHOUT_CLASSIFICATION	9.190562515957895E-6	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999974483666475	WITHOUT_CLASSIFICATION	2.5516333524955383E-5	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999857751178691	WITHOUT_CLASSIFICATION	1.4224882130844324E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999922060754746	WITHOUT_CLASSIFICATION	7.793924525417211E-6	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999969230704114	WITHOUT_CLASSIFICATION	3.0769295885549475E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999725027327738	WITHOUT_CLASSIFICATION	2.749726722614427E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999942997508753	WITHOUT_CLASSIFICATION	5.700249124695361E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999916723264244	WITHOUT_CLASSIFICATION	8.327673575592685E-6	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999718469706209	WITHOUT_CLASSIFICATION	2.8153029379178797E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999908771457764	WITHOUT_CLASSIFICATION	9.122854223586592E-6	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999754991115574	WITHOUT_CLASSIFICATION	2.450088844264218E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999875267253576	WITHOUT_CLASSIFICATION	1.2473274642430342E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.999933544351055	WITHOUT_CLASSIFICATION	6.645564894506048E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999902368346946	WITHOUT_CLASSIFICATION	9.763165305390452E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999745458589032	WITHOUT_CLASSIFICATION	2.5454141096788574E-5	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999254746043758	WITHOUT_CLASSIFICATION	7.452539562427747E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999946445642056	WITHOUT_CLASSIFICATION	5.35543579443622E-6	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999969952253472	WITHOUT_CLASSIFICATION	3.0047746528271124E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999707293803342	WITHOUT_CLASSIFICATION	2.9270619665885298E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999826891572359	WITHOUT_CLASSIFICATION	1.7310842764116606E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994364481943347	WITHOUT_CLASSIFICATION	5.635518056652768E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999953635731503	WITHOUT_CLASSIFICATION	4.636426849642573E-6	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999884641368022	WITHOUT_CLASSIFICATION	1.1535863197866491E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999963016272251	WITHOUT_CLASSIFICATION	3.6983727750604257E-6	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999774488568248	WITHOUT_CLASSIFICATION	2.255114317516002E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999726945354833	WITHOUT_CLASSIFICATION	2.730546451664907E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999935141869052	WITHOUT_CLASSIFICATION	6.48581309481309E-6	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999807217125262	WITHOUT_CLASSIFICATION	1.9278287473809526E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999690419717299	WITHOUT_CLASSIFICATION	3.09580282700371E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971912232166	WITHOUT_CLASSIFICATION	2.808776783398447E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999496506910899	WITHOUT_CLASSIFICATION	5.034930891008685E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999859688263939	WITHOUT_CLASSIFICATION	1.4031173606082548E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999892737143735	WITHOUT_CLASSIFICATION	1.072628562647295E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999982073528051	WITHOUT_CLASSIFICATION	1.7926471948180042E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999659475843063	WITHOUT_CLASSIFICATION	3.4052415693599983E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999886766478265	WITHOUT_CLASSIFICATION	1.1323352173513975E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999843948389592	WITHOUT_CLASSIFICATION	1.560516104082108E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999820716821985	WITHOUT_CLASSIFICATION	1.7928317801456668E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971912232166	WITHOUT_CLASSIFICATION	2.808776783398447E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999566920886681	WITHOUT_CLASSIFICATION	4.3307911331857584E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998696188159356	WITHOUT_CLASSIFICATION	1.3038118406437341E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999997721772924	WITHOUT_CLASSIFICATION	2.27822707607095E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999942269492357	WITHOUT_CLASSIFICATION	5.773050764284785E-6	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999865205624683	WITHOUT_CLASSIFICATION	1.3479437531770306E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999865205624683	WITHOUT_CLASSIFICATION	1.3479437531770306E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.998742324268447	WITHOUT_CLASSIFICATION	0.0012576757315529215	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999953003689137	WITHOUT_CLASSIFICATION	4.699631086208885E-6	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999650214432367	WITHOUT_CLASSIFICATION	3.497855676317682E-5	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999981007639108	WITHOUT_CLASSIFICATION	1.8992360891925116E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999975615976012	WITHOUT_CLASSIFICATION	2.4384023987994075E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999652051443342	WITHOUT_CLASSIFICATION	3.479485566585959E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999951670497159	WITHOUT_CLASSIFICATION	4.83295028415333E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9994846771482184	WITHOUT_CLASSIFICATION	5.153228517815767E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999881107142755	WITHOUT_CLASSIFICATION	1.188928572448556E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998052103320683	WITHOUT_CLASSIFICATION	1.947896679316133E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999930844505694	WITHOUT_CLASSIFICATION	6.915549430563349E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999966742365368	WITHOUT_CLASSIFICATION	3.3257634632901775E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999877667741246	WITHOUT_CLASSIFICATION	1.2233225875352354E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999962017109688	WITHOUT_CLASSIFICATION	3.798289031154201E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999294044230839	WITHOUT_CLASSIFICATION	7.059557691607115E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999706781531963	WITHOUT_CLASSIFICATION	2.932184680370253E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993829700655	WITHOUT_CLASSIFICATION	6.170299346206537E-7	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999862176004034	WITHOUT_CLASSIFICATION	1.3782399596734409E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999823186391347	WITHOUT_CLASSIFICATION	1.7681360865268103E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999040127075	WITHOUT_CLASSIFICATION	9.598729250018116E-7	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999995220734703	WITHOUT_CLASSIFICATION	4.779265296916084E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999994462106828	WITHOUT_CLASSIFICATION	5.537893171863841E-7	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999996465234141	WITHOUT_CLASSIFICATION	3.5347658596660855E-7	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999609222019776	WITHOUT_CLASSIFICATION	3.907779802242967E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999878843049879	WITHOUT_CLASSIFICATION	1.2115695012085332E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999865962157529	WITHOUT_CLASSIFICATION	1.3403784247193086E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999027277115103	WITHOUT_CLASSIFICATION	9.727228848965584E-5	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999940517871454	WITHOUT_CLASSIFICATION	5.948212854580519E-6	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999863530831712	WITHOUT_CLASSIFICATION	1.3646916828801122E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999904444572427	WITHOUT_CLASSIFICATION	9.555542757191351E-6	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999204163040271	WITHOUT_CLASSIFICATION	7.958369597291279E-5	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999716322948551	WITHOUT_CLASSIFICATION	2.836770514494292E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999886619744827	WITHOUT_CLASSIFICATION	1.1338025517316728E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999941523325738	WITHOUT_CLASSIFICATION	5.847667426224214E-6	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999863530831712	WITHOUT_CLASSIFICATION	1.3646916828801122E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9998305954198629	WITHOUT_CLASSIFICATION	1.6940458013711132E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999886619744827	WITHOUT_CLASSIFICATION	1.1338025517316728E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999805171930913	WITHOUT_CLASSIFICATION	1.9482806908625906E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999886649905321	WITHOUT_CLASSIFICATION	1.1335009467837175E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999796386365364	WITHOUT_CLASSIFICATION	2.0361363463648288E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999761934640009	WITHOUT_CLASSIFICATION	2.380653599908584E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999505878697943	WITHOUT_CLASSIFICATION	4.9412130205705424E-5	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999979234944175	WITHOUT_CLASSIFICATION	2.0765055824445784E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999725290336576	WITHOUT_CLASSIFICATION	2.7470966342469497E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999339671290967	WITHOUT_CLASSIFICATION	6.603287090340184E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999561670916334	WITHOUT_CLASSIFICATION	4.383290836667717E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999125027385107	WITHOUT_CLASSIFICATION	8.749726148931472E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999676222434091	WITHOUT_CLASSIFICATION	3.2377756591039357E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999715940147487	WITHOUT_CLASSIFICATION	2.8405985251259138E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999986612437752	WITHOUT_CLASSIFICATION	1.3387562248079751E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999845726325125	WITHOUT_CLASSIFICATION	1.5427367487552683E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999934107273285	WITHOUT_CLASSIFICATION	6.589272671450451E-6	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999977336265496	WITHOUT_CLASSIFICATION	2.2663734504625834E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999948245098031	WITHOUT_CLASSIFICATION	5.1754901968773096E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999961862773581	WITHOUT_CLASSIFICATION	3.8137226418949695E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999758518696288	WITHOUT_CLASSIFICATION	2.414813037129438E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999832434768703	WITHOUT_CLASSIFICATION	1.6756523129655544E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999908289560268	WITHOUT_CLASSIFICATION	9.17104397336202E-6	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999713048540155	WITHOUT_CLASSIFICATION	2.8695145984515663E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999985159534284	WITHOUT_CLASSIFICATION	1.4840465715856245E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999671080055795	WITHOUT_CLASSIFICATION	3.2891994420442354E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999026621488555	WITHOUT_CLASSIFICATION	9.733785114452202E-5	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999708579483935	WITHOUT_CLASSIFICATION	2.9142051606461278E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999887909921701	WITHOUT_CLASSIFICATION	1.1209007829856787E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999706456266478	WITHOUT_CLASSIFICATION	2.935437335213923E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798454606349	WITHOUT_CLASSIFICATION	2.0154539365161238E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784856326813	WITHOUT_CLASSIFICATION	2.1514367318630052E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999634672236712	WITHOUT_CLASSIFICATION	3.6532776328638895E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999794929620031	WITHOUT_CLASSIFICATION	2.0507037996933862E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999909794589499	WITHOUT_CLASSIFICATION	9.0205410501557E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999994486143634	WITHOUT_CLASSIFICATION	5.513856365432711E-7	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999950071501407	WITHOUT_CLASSIFICATION	4.992849859322061E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999924653063429	WITHOUT_CLASSIFICATION	7.534693657022872E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999810591049765	WITHOUT_CLASSIFICATION	1.8940895023483416E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999963266910833	WITHOUT_CLASSIFICATION	3.6733089166186472E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999748324100524	WITHOUT_CLASSIFICATION	2.5167589947669114E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999960214097099	WITHOUT_CLASSIFICATION	3.978590290051072E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999598545276097	WITHOUT_CLASSIFICATION	4.01454723904061E-5	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999701424827365	WITHOUT_CLASSIFICATION	2.9857517263457198E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999971182552486	WITHOUT_CLASSIFICATION	2.8817447513975787E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999761681176524	WITHOUT_CLASSIFICATION	2.383188234759897E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999647455853597	WITHOUT_CLASSIFICATION	3.525441464033933E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999012813242495	WITHOUT_CLASSIFICATION	9.87186757505189E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999362977893507	WITHOUT_CLASSIFICATION	6.37022106493186E-5	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999990715562469	WITHOUT_CLASSIFICATION	9.28443753090978E-6	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999942724898804	WITHOUT_CLASSIFICATION	5.727510119551255E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999169613987136	WITHOUT_CLASSIFICATION	8.303860128654902E-5	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999609306289012	WITHOUT_CLASSIFICATION	3.9069371098761205E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999755888661569	WITHOUT_CLASSIFICATION	2.4411133843084877E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998989921542015	WITHOUT_CLASSIFICATION	1.0100784579855193E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999998208659319	WITHOUT_CLASSIFICATION	1.7913406809261129E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999784361549519	WITHOUT_CLASSIFICATION	2.1563845048095705E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993798994151999	WITHOUT_CLASSIFICATION	6.201005848001546E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999031893406966	WITHOUT_CLASSIFICATION	9.68106593034264E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798454606349	WITHOUT_CLASSIFICATION	2.0154539365161238E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999628785619153	WITHOUT_CLASSIFICATION	3.712143808468893E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999992217565717	WITHOUT_CLASSIFICATION	7.782434281535073E-7	TEST
switch	WITHOUT_CLASSIFICATION	0.9999919500375799	WITHOUT_CLASSIFICATION	8.049962420184561E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999754343936866	WITHOUT_CLASSIFICATION	2.4565606313404305E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999627623244581	WITHOUT_CLASSIFICATION	3.723767554176375E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999428391773526	WITHOUT_CLASSIFICATION	5.7160822647426635E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778416397814	WITHOUT_CLASSIFICATION	2.2158360218552798E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999945541261567	WITHOUT_CLASSIFICATION	5.445873843327682E-6	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999968790573567	WITHOUT_CLASSIFICATION	3.1209426433536835E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999625839855847	WITHOUT_CLASSIFICATION	3.741601441523146E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999995576895674	WITHOUT_CLASSIFICATION	4.423104325985842E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999946445642056	WITHOUT_CLASSIFICATION	5.35543579443622E-6	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999861834317326	WITHOUT_CLASSIFICATION	1.381656826739878E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999687905530473	WITHOUT_CLASSIFICATION	3.12094469527567E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998897658948829	WITHOUT_CLASSIFICATION	1.1023410511709285E-4	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997201144457	WITHOUT_CLASSIFICATION	2.7988555426490894E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999989025166524	WITHOUT_CLASSIFICATION	1.0974833477285325E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999925311905447	WITHOUT_CLASSIFICATION	7.4688094553026335E-6	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999949278168656	WITHOUT_CLASSIFICATION	5.07218313440734E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999994728955808	WITHOUT_CLASSIFICATION	5.271044192756427E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999974707618016	WITHOUT_CLASSIFICATION	2.529238198410492E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999974707618016	WITHOUT_CLASSIFICATION	2.529238198410492E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999891928143593	WITHOUT_CLASSIFICATION	1.0807185640748191E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999952160182071	WITHOUT_CLASSIFICATION	4.783981792927747E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999873699136111	WITHOUT_CLASSIFICATION	1.2630086388787372E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999786780225757	WITHOUT_CLASSIFICATION	2.13219774242519E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999729609448216	WITHOUT_CLASSIFICATION	2.703905517841746E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999958246213412	WITHOUT_CLASSIFICATION	4.175378658771746E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999347919553615	WITHOUT_CLASSIFICATION	6.520804463850406E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999825430182965	WITHOUT_CLASSIFICATION	1.7456981703465312E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999825430182965	WITHOUT_CLASSIFICATION	1.7456981703465312E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999400753635304	WITHOUT_CLASSIFICATION	5.992463646961637E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999920587966388	WITHOUT_CLASSIFICATION	7.941203361167621E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999452564749892	WITHOUT_CLASSIFICATION	5.474352501087203E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999862628858409	WITHOUT_CLASSIFICATION	1.3737114159036466E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999862628858409	WITHOUT_CLASSIFICATION	1.3737114159036466E-5	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999862628858409	WITHOUT_CLASSIFICATION	1.3737114159036466E-5	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999778055663731	WITHOUT_CLASSIFICATION	2.219443362689313E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999706759145329	WITHOUT_CLASSIFICATION	2.932408546709581E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999864750649584	WITHOUT_CLASSIFICATION	1.3524935041642319E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999450517044187	WITHOUT_CLASSIFICATION	5.494829558140443E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999873717051179	WITHOUT_CLASSIFICATION	1.2628294882166349E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999995947856134	WITHOUT_CLASSIFICATION	4.0521438661328557E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999970507119844	WITHOUT_CLASSIFICATION	2.949288015598815E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996119003743494	WITHOUT_CLASSIFICATION	3.8809962565059994E-4	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999860063381427	WITHOUT_CLASSIFICATION	1.3993661857288822E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999996218504551	WITHOUT_CLASSIFICATION	3.7814954489066E-6	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999866220877731	WITHOUT_CLASSIFICATION	1.337791222683825E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999895271624134	WITHOUT_CLASSIFICATION	1.0472837586465472E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9997835648368805	WITHOUT_CLASSIFICATION	2.164351631196461E-4	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999898272148122	WITHOUT_CLASSIFICATION	1.0172785187814304E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999986127689587	WITHOUT_CLASSIFICATION	1.3872310412529813E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999899172920537	WITHOUT_CLASSIFICATION	1.008270794638257E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999982977605694	WITHOUT_CLASSIFICATION	1.7022394306077143E-5	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999939494635561	WITHOUT_CLASSIFICATION	6.0505364438253515E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999974707618016	WITHOUT_CLASSIFICATION	2.529238198410492E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999922557504559	WITHOUT_CLASSIFICATION	7.744249544174111E-6	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999985168225927	WITHOUT_CLASSIFICATION	1.4831774073602418E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.99995795017476	WITHOUT_CLASSIFICATION	4.204982523998701E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999694020098379	WITHOUT_CLASSIFICATION	3.0597990162112647E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999859092377802	WITHOUT_CLASSIFICATION	1.4090762219768524E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999954257529377	WITHOUT_CLASSIFICATION	4.574247062367371E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9992116084729341	WITHOUT_CLASSIFICATION	7.883915270659141E-4	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999972716419883	WITHOUT_CLASSIFICATION	2.7283580116633253E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999602980076033	WITHOUT_CLASSIFICATION	3.9701992396695316E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999821486687542	WITHOUT_CLASSIFICATION	1.7851331245748637E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997409863713071	WITHOUT_CLASSIFICATION	2.5901362869286594E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999783599220562	WITHOUT_CLASSIFICATION	2.1640077943749836E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999948898448885	WITHOUT_CLASSIFICATION	5.1101551115389265E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999993485418432	WITHOUT_CLASSIFICATION	6.514581567983638E-6	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999791145238274	WITHOUT_CLASSIFICATION	2.0885476172602085E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999992771763103	WITHOUT_CLASSIFICATION	7.228236897853277E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999972158895986	WITHOUT_CLASSIFICATION	2.784110401347867E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999975000470415	WITHOUT_CLASSIFICATION	2.4999529586079634E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999757803954682	WITHOUT_CLASSIFICATION	2.4219604531834307E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999757803954682	WITHOUT_CLASSIFICATION	2.4219604531834307E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999795513092945	WITHOUT_CLASSIFICATION	2.044869070549546E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999940078171178	WITHOUT_CLASSIFICATION	5.992182882245118E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999807875289664	WITHOUT_CLASSIFICATION	1.921247103368623E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999965501178948	WITHOUT_CLASSIFICATION	3.4498821051932633E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.99990982933271	WITHOUT_CLASSIFICATION	9.01706672900045E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999774009107216	WITHOUT_CLASSIFICATION	2.2599089278296177E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999873420092498	WITHOUT_CLASSIFICATION	1.2657990750297637E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999399600226347	WITHOUT_CLASSIFICATION	6.003997736521313E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999982901960536	WITHOUT_CLASSIFICATION	1.7098039464030373E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999870872812363	WITHOUT_CLASSIFICATION	1.2912718763657546E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999493419148733	WITHOUT_CLASSIFICATION	5.065808512667847E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999946445642056	WITHOUT_CLASSIFICATION	5.35543579443622E-6	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999990391928292	WITHOUT_CLASSIFICATION	9.608071708461592E-7	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999936592792338	WITHOUT_CLASSIFICATION	6.340720766205493E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999988359369538	WITHOUT_CLASSIFICATION	1.1640630461689248E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998889247771204	WITHOUT_CLASSIFICATION	1.1107522287958625E-4	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994806942842	WITHOUT_CLASSIFICATION	5.19305715846124E-7	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994806942842	WITHOUT_CLASSIFICATION	5.19305715846124E-7	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999806642853624	WITHOUT_CLASSIFICATION	1.9335714637607223E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998501118795	WITHOUT_CLASSIFICATION	1.4988812045527935E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999159875189179	WITHOUT_CLASSIFICATION	8.40124810821378E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9998850838247887	WITHOUT_CLASSIFICATION	1.1491617521123649E-4	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998385563403847	WITHOUT_CLASSIFICATION	1.6144365961528692E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998535905072548	WITHOUT_CLASSIFICATION	1.464094927451581E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999952296873791	WITHOUT_CLASSIFICATION	4.77031262090265E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999959474369864	WITHOUT_CLASSIFICATION	4.052563013606867E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999546994640205	WITHOUT_CLASSIFICATION	4.530053597945768E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999563289733614	WITHOUT_CLASSIFICATION	4.3671026638591285E-5	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999940880992738	WITHOUT_CLASSIFICATION	5.9119007261953674E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999959474369864	WITHOUT_CLASSIFICATION	4.052563013606867E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999834159028662	WITHOUT_CLASSIFICATION	1.6584097133740872E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999897815119329	WITHOUT_CLASSIFICATION	1.0218488067199251E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999981295214939	WITHOUT_CLASSIFICATION	1.8704785060269097E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999529064038143	WITHOUT_CLASSIFICATION	4.7093596185606645E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999875649832638	WITHOUT_CLASSIFICATION	1.2435016736217167E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999935029566871	WITHOUT_CLASSIFICATION	6.497043312902023E-6	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999921370543938	WITHOUT_CLASSIFICATION	7.862945606239399E-6	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999977763339249	WITHOUT_CLASSIFICATION	2.2236660750888786E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999822335026771	WITHOUT_CLASSIFICATION	1.776649732295111E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999888227286506	WITHOUT_CLASSIFICATION	1.1177271349286534E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998908701358303	WITHOUT_CLASSIFICATION	1.0912986416973263E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999944685552301	WITHOUT_CLASSIFICATION	5.531444769863132E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999903251141715	WITHOUT_CLASSIFICATION	9.674885828349088E-6	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999900803406153	WITHOUT_CLASSIFICATION	9.91965938469352E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999894169185805	WITHOUT_CLASSIFICATION	1.0583081419526271E-5	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999964113521816	WITHOUT_CLASSIFICATION	3.588647818257276E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999795954081295	WITHOUT_CLASSIFICATION	2.0404591870509632E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999593313022191	WITHOUT_CLASSIFICATION	4.066869778094844E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999593313022191	WITHOUT_CLASSIFICATION	4.066869778094844E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999921370543938	WITHOUT_CLASSIFICATION	7.862945606239399E-6	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999922493451413	WITHOUT_CLASSIFICATION	7.750654858769557E-6	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999959360584205	WITHOUT_CLASSIFICATION	4.063941579490841E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999906158191011	WITHOUT_CLASSIFICATION	9.384180898905924E-5	TEST
#2	WITHOUT_CLASSIFICATION	0.9999917332902852	WITHOUT_CLASSIFICATION	8.266709714681288E-6	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.99998425301668	WITHOUT_CLASSIFICATION	1.5746983319996254E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999932297265743	WITHOUT_CLASSIFICATION	6.770273425627011E-6	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999936372442465	WITHOUT_CLASSIFICATION	6.362755753493386E-6	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999754235468845	WITHOUT_CLASSIFICATION	2.457645311549615E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999977829538329	WITHOUT_CLASSIFICATION	2.2170461671230065E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999730193812822	WITHOUT_CLASSIFICATION	2.698061871773562E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999986504609902	WITHOUT_CLASSIFICATION	1.3495390097201524E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999942081324235	WITHOUT_CLASSIFICATION	5.791867576451537E-6	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999982699718371	WITHOUT_CLASSIFICATION	1.7300281629049736E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999921470715787	WITHOUT_CLASSIFICATION	7.852928421289103E-6	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999808340801503	WITHOUT_CLASSIFICATION	1.916591984972204E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999931578260015	WITHOUT_CLASSIFICATION	6.842173998487212E-6	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999994756890351	WITHOUT_CLASSIFICATION	5.243109649049686E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999962101628687	WITHOUT_CLASSIFICATION	3.7898371313358382E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999319382235914	WITHOUT_CLASSIFICATION	6.806177640854294E-5	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999982537965646	WITHOUT_CLASSIFICATION	1.7462034354083505E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999875089220807	WITHOUT_CLASSIFICATION	1.2491077919478893E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999976145447628	WITHOUT_CLASSIFICATION	2.3854552371993813E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999726158933623	WITHOUT_CLASSIFICATION	2.7384106637751568E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999951601243128	WITHOUT_CLASSIFICATION	4.839875687235348E-6	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999725395150781	WITHOUT_CLASSIFICATION	2.7460484921888683E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999900293235423	WITHOUT_CLASSIFICATION	9.970676457663537E-6	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9983934174172644	WITHOUT_CLASSIFICATION	0.001606582582735586	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999029407843525	WITHOUT_CLASSIFICATION	9.705921564751605E-5	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999796110677074	WITHOUT_CLASSIFICATION	2.0388932292597074E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999873994420703	WITHOUT_CLASSIFICATION	1.260055792976915E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999806511062782	WITHOUT_CLASSIFICATION	1.934889372179947E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999881306404709	WITHOUT_CLASSIFICATION	1.1869359529094719E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999995729353947	WITHOUT_CLASSIFICATION	4.270646053104526E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999939865766692	WITHOUT_CLASSIFICATION	6.01342333086825E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999894564747827	WITHOUT_CLASSIFICATION	1.0543525217288222E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999181260781324	WITHOUT_CLASSIFICATION	8.187392186756913E-5	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999956957300236	WITHOUT_CLASSIFICATION	4.304269976389834E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999818371636975	WITHOUT_CLASSIFICATION	1.816283630253236E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996712695072756	WITHOUT_CLASSIFICATION	3.2873049272448367E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999914053768294	WITHOUT_CLASSIFICATION	8.594623170651172E-6	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999838000558275	WITHOUT_CLASSIFICATION	1.6199944172443058E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999896693816626	WITHOUT_CLASSIFICATION	1.0330618337451868E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9998793607133066	WITHOUT_CLASSIFICATION	1.2063928669334496E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999966613384611	WITHOUT_CLASSIFICATION	3.338661538900696E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998238841266215	WITHOUT_CLASSIFICATION	1.7611587337855813E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999139580397356	WITHOUT_CLASSIFICATION	8.60419602645056E-5	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999964089397603	WITHOUT_CLASSIFICATION	3.5910602397137986E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999703160060758	WITHOUT_CLASSIFICATION	2.9683993924206273E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999990685375536	WITHOUT_CLASSIFICATION	9.314624463284683E-7	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999697719796666	WITHOUT_CLASSIFICATION	3.022802033328556E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999250254687381	WITHOUT_CLASSIFICATION	7.4974531261984E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999546994640205	WITHOUT_CLASSIFICATION	4.530053597945768E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999919522256675	WITHOUT_CLASSIFICATION	8.047774332509348E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999808340801503	WITHOUT_CLASSIFICATION	1.916591984972204E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999789822615907	WITHOUT_CLASSIFICATION	2.1017738409430872E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999888616878099	WITHOUT_CLASSIFICATION	1.1138312190100784E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999977533654524	WITHOUT_CLASSIFICATION	2.246634547708625E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999977329091164	WITHOUT_CLASSIFICATION	2.2670908836782594E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999905460120403	WITHOUT_CLASSIFICATION	9.45398795982767E-6	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999985388607993	WITHOUT_CLASSIFICATION	1.4611392007399049E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999322649146458	WITHOUT_CLASSIFICATION	6.773508535414091E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999733820477735	WITHOUT_CLASSIFICATION	2.6617952226436505E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999776411692146	WITHOUT_CLASSIFICATION	2.2358830785364946E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985893730853	WITHOUT_CLASSIFICATION	1.4106269147051228E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999284295701829	WITHOUT_CLASSIFICATION	7.157042981706457E-5	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999999194815446	WITHOUT_CLASSIFICATION	8.051845539480246E-7	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999941611756652	WITHOUT_CLASSIFICATION	5.838824334796306E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999941611756652	WITHOUT_CLASSIFICATION	5.838824334796306E-6	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999903710626609	WITHOUT_CLASSIFICATION	9.628937339097092E-5	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9993261273659673	WITHOUT_CLASSIFICATION	6.738726340328121E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999973071965941	WITHOUT_CLASSIFICATION	2.6928034060348695E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9986838508032269	WITHOUT_CLASSIFICATION	0.00131614919677319	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999939799227392	WITHOUT_CLASSIFICATION	6.020077260880747E-6	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999825975329649	WITHOUT_CLASSIFICATION	1.7402467035114172E-5	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994815238389	WITHOUT_CLASSIFICATION	5.184761609818531E-7	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999460582880706	WITHOUT_CLASSIFICATION	5.394171192936895E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999894859553702	WITHOUT_CLASSIFICATION	1.0514044629743169E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999668138297273	WITHOUT_CLASSIFICATION	3.318617027266774E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999668138297273	WITHOUT_CLASSIFICATION	3.318617027266774E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999975698690297	WITHOUT_CLASSIFICATION	2.4301309703005347E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998679819816	WITHOUT_CLASSIFICATION	1.3201801839131765E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999875331843675	WITHOUT_CLASSIFICATION	1.2466815632507921E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999952671101998	WITHOUT_CLASSIFICATION	4.732889800179391E-6	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999591479570499	WITHOUT_CLASSIFICATION	4.085204295007049E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998658290304642	WITHOUT_CLASSIFICATION	1.3417096953577935E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999980059161265	WITHOUT_CLASSIFICATION	1.9940838734760994E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999960801352333	WITHOUT_CLASSIFICATION	3.919864766700141E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999709456671858	WITHOUT_CLASSIFICATION	2.905433281418657E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999978804923605	WITHOUT_CLASSIFICATION	2.119507639563041E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999926751700641	WITHOUT_CLASSIFICATION	7.324829935969822E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999761640606522	WITHOUT_CLASSIFICATION	2.3835939347882767E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999917628962968	WITHOUT_CLASSIFICATION	8.23710370315759E-6	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999630732504209	WITHOUT_CLASSIFICATION	3.692674957906281E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714177535146	WITHOUT_CLASSIFICATION	2.8582246485380228E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999495316124803	WITHOUT_CLASSIFICATION	5.0468387519627795E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999905058818901	WITHOUT_CLASSIFICATION	9.4941181099499E-6	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999675440052678	WITHOUT_CLASSIFICATION	3.245599473225594E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999995278916901	WITHOUT_CLASSIFICATION	4.721083099010735E-6	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999933802987389	WITHOUT_CLASSIFICATION	6.619701261156412E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999793971174784	WITHOUT_CLASSIFICATION	2.060288252161551E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999995925943007	WITHOUT_CLASSIFICATION	4.074056993078251E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999991098858647	WITHOUT_CLASSIFICATION	8.901141353331589E-7	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999946696983691	WITHOUT_CLASSIFICATION	5.330301630888586E-6	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999841961528958	WITHOUT_CLASSIFICATION	1.5803847104169346E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999951122735531	WITHOUT_CLASSIFICATION	4.8877264468212995E-6	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999362039502644	WITHOUT_CLASSIFICATION	6.37960497355056E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999898264571883	WITHOUT_CLASSIFICATION	1.0173542811753219E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833148373454	WITHOUT_CLASSIFICATION	1.668516265462521E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999980573786948	WITHOUT_CLASSIFICATION	1.942621305130007E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999608542070845	WITHOUT_CLASSIFICATION	3.9145792915584434E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999746344122626	WITHOUT_CLASSIFICATION	2.5365587737331065E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793452559353	WITHOUT_CLASSIFICATION	2.065474406475361E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9972224230274116	WITHOUT_CLASSIFICATION	0.0027775769725884147	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999977766374162	WITHOUT_CLASSIFICATION	2.2233625839003347E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999371461230288	WITHOUT_CLASSIFICATION	6.285387697126209E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999849700152805	WITHOUT_CLASSIFICATION	1.502998471949223E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806573290039	WITHOUT_CLASSIFICATION	1.9342670996165944E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999993264607381	WITHOUT_CLASSIFICATION	6.735392618699321E-7	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999719700215749	WITHOUT_CLASSIFICATION	2.8029978425104597E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999792379184443	WITHOUT_CLASSIFICATION	2.076208155560424E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999745445469863	WITHOUT_CLASSIFICATION	2.5455453013598167E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999921813614535	WITHOUT_CLASSIFICATION	7.818638546485855E-6	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998492501732132	WITHOUT_CLASSIFICATION	1.5074982678674388E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999900096388562	WITHOUT_CLASSIFICATION	9.990361143768158E-6	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999897954372368	WITHOUT_CLASSIFICATION	1.020456276320202E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999712200485549	WITHOUT_CLASSIFICATION	2.877995144518833E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998848421419055	WITHOUT_CLASSIFICATION	1.1515785809437917E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999935066820189	WITHOUT_CLASSIFICATION	6.493317981181375E-6	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999317884944332	WITHOUT_CLASSIFICATION	6.821150556671755E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999865635193821	WITHOUT_CLASSIFICATION	1.343648061786229E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999653248802103	WITHOUT_CLASSIFICATION	3.4675119789651725E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999840614568836	WITHOUT_CLASSIFICATION	1.5938543116332424E-5	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999880182537155	WITHOUT_CLASSIFICATION	1.1981746284405488E-5	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999943455854106	WITHOUT_CLASSIFICATION	5.654414589463534E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999912252342019	WITHOUT_CLASSIFICATION	8.774765798133173E-6	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999756230798583	WITHOUT_CLASSIFICATION	2.4376920141642627E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999912252342019	WITHOUT_CLASSIFICATION	8.774765798133173E-6	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999814101306219	WITHOUT_CLASSIFICATION	1.8589869378022525E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999976830376097	WITHOUT_CLASSIFICATION	2.3169623903247462E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999866642218156	WITHOUT_CLASSIFICATION	1.3335778184346472E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999986521055743	WITHOUT_CLASSIFICATION	1.3478944258110396E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999845036961117	WITHOUT_CLASSIFICATION	1.5496303888356274E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999866642218156	WITHOUT_CLASSIFICATION	1.3335778184346472E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999895125799553	WITHOUT_CLASSIFICATION	1.0487420044620134E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998438876822223	WITHOUT_CLASSIFICATION	1.561123177777367E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999963795432112	WITHOUT_CLASSIFICATION	3.6204567887342063E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999954811516935	WITHOUT_CLASSIFICATION	4.518848306522725E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999741855730495	WITHOUT_CLASSIFICATION	2.5814426950486162E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999997050022169	WITHOUT_CLASSIFICATION	2.9499778309870047E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999979355007969	WITHOUT_CLASSIFICATION	2.0644992031583122E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998495246607887	WITHOUT_CLASSIFICATION	1.5047533921126496E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999947007366464	WITHOUT_CLASSIFICATION	5.299263353658729E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999976885080473	WITHOUT_CLASSIFICATION	2.311491952614068E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999935575705765	WITHOUT_CLASSIFICATION	6.442429423475776E-6	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999982498556228	WITHOUT_CLASSIFICATION	1.7501443771613652E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997435120015	WITHOUT_CLASSIFICATION	2.5648799850996326E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999741451368341	WITHOUT_CLASSIFICATION	2.585486316590581E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999901210024749	WITHOUT_CLASSIFICATION	9.878997525134198E-6	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999624846248242	WITHOUT_CLASSIFICATION	3.751537517586544E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9979076167032459	WITHOUT_CLASSIFICATION	0.002092383296754044	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999990489733249	WITHOUT_CLASSIFICATION	9.510266750494367E-7	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999727937023234	WITHOUT_CLASSIFICATION	2.7206297676660573E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9981348654631694	WITHOUT_CLASSIFICATION	0.0018651345368305926	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999762673575796	WITHOUT_CLASSIFICATION	2.3732642420293586E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999951173803237	WITHOUT_CLASSIFICATION	4.882619676355255E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999989365026625	WITHOUT_CLASSIFICATION	1.0634973375014129E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999717049170681	WITHOUT_CLASSIFICATION	2.8295082931937667E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999840410069831	WITHOUT_CLASSIFICATION	1.595899301690048E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999757907800686	WITHOUT_CLASSIFICATION	2.4209219931459825E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999980845586169	WITHOUT_CLASSIFICATION	1.915441383144198E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999815825865238	WITHOUT_CLASSIFICATION	1.8417413476113598E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.999986159372294	WITHOUT_CLASSIFICATION	1.38406277060915E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999566654679107	WITHOUT_CLASSIFICATION	4.3334532089185235E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999989365026625	WITHOUT_CLASSIFICATION	1.0634973375014129E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999890939736804	WITHOUT_CLASSIFICATION	1.0906026319589688E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999623685823903	WITHOUT_CLASSIFICATION	3.7631417609659E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999713840338266	WITHOUT_CLASSIFICATION	2.8615966173467654E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9992510071016757	WITHOUT_CLASSIFICATION	7.489928983243029E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9981348654631694	WITHOUT_CLASSIFICATION	0.0018651345368305926	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999864201081565	WITHOUT_CLASSIFICATION	1.3579891843616525E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999860952440305	WITHOUT_CLASSIFICATION	1.3904755969400927E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999751190443851	WITHOUT_CLASSIFICATION	2.4880955614941334E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999871414272331	WITHOUT_CLASSIFICATION	1.2858572766977067E-5	TEST
special case	WITHOUT_CLASSIFICATION	0.9999924799474973	WITHOUT_CLASSIFICATION	7.520052502769234E-6	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999413962628486	WITHOUT_CLASSIFICATION	5.860373715124887E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999999211220742	WITHOUT_CLASSIFICATION	7.887792579884402E-7	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999486356869473	WITHOUT_CLASSIFICATION	5.1364313052851096E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999727892556439	WITHOUT_CLASSIFICATION	2.7210744356044106E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999823138971107	WITHOUT_CLASSIFICATION	1.7686102889289485E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999620371958502	WITHOUT_CLASSIFICATION	3.79628041498736E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9996913899860965	WITHOUT_CLASSIFICATION	3.0861001390350716E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999927310522462	WITHOUT_CLASSIFICATION	7.268947753893099E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999946399285202	WITHOUT_CLASSIFICATION	5.3600714798433536E-6	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999946689446072	WITHOUT_CLASSIFICATION	5.331055392772181E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999906019666588	WITHOUT_CLASSIFICATION	9.398033341215995E-6	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999984134949549	WITHOUT_CLASSIFICATION	1.5865050450527743E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999864201081565	WITHOUT_CLASSIFICATION	1.3579891843616525E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999295261112109	WITHOUT_CLASSIFICATION	7.047388878906763E-5	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998721221100061	WITHOUT_CLASSIFICATION	1.2787788999392516E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997425921310589	WITHOUT_CLASSIFICATION	2.5740786894107895E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999512770622156	WITHOUT_CLASSIFICATION	4.87229377843158E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999868032231289	WITHOUT_CLASSIFICATION	1.3196776871079664E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999868032231289	WITHOUT_CLASSIFICATION	1.3196776871079664E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999967497819289	WITHOUT_CLASSIFICATION	3.2502180711692184E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999868032231289	WITHOUT_CLASSIFICATION	1.3196776871079664E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999868032231289	WITHOUT_CLASSIFICATION	1.3196776871079664E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999166390928826	WITHOUT_CLASSIFICATION	8.33609071173699E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998470370274647	WITHOUT_CLASSIFICATION	1.5296297253528085E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999724069587234	WITHOUT_CLASSIFICATION	2.7593041276640168E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999724069587234	WITHOUT_CLASSIFICATION	2.7593041276640168E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999778950453537	WITHOUT_CLASSIFICATION	2.2104954646369185E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999710559591182	WITHOUT_CLASSIFICATION	2.8944040881765657E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999909169869585	WITHOUT_CLASSIFICATION	9.083013041383397E-6	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9997770591893905	WITHOUT_CLASSIFICATION	2.229408106093717E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999938732793134	WITHOUT_CLASSIFICATION	6.1267206866528574E-6	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999287627517786	WITHOUT_CLASSIFICATION	7.123724822144983E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999512044970786	WITHOUT_CLASSIFICATION	4.879550292137412E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999945935053776	WITHOUT_CLASSIFICATION	5.406494622402244E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999072483340187	WITHOUT_CLASSIFICATION	9.275166598130493E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999357409744001	WITHOUT_CLASSIFICATION	6.425902559988436E-5	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999739516030739	WITHOUT_CLASSIFICATION	2.6048396926055296E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998592935309579	WITHOUT_CLASSIFICATION	1.4070646904208977E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999952293055524	WITHOUT_CLASSIFICATION	4.770694447505905E-6	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999909578442787	WITHOUT_CLASSIFICATION	9.042155721237077E-6	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999857474812255	WITHOUT_CLASSIFICATION	1.4252518774551276E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999107741064359	WITHOUT_CLASSIFICATION	8.922589356413852E-5	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999966085924311	WITHOUT_CLASSIFICATION	3.3914075687910925E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999815276846336	WITHOUT_CLASSIFICATION	1.8472315366509696E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999952293055524	WITHOUT_CLASSIFICATION	4.770694447505905E-6	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999762673575796	WITHOUT_CLASSIFICATION	2.3732642420293586E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999902357762697	WITHOUT_CLASSIFICATION	9.7642237302932E-6	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999896495181017	WITHOUT_CLASSIFICATION	1.035048189836346E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999809478728546	WITHOUT_CLASSIFICATION	1.9052127145356065E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999932402226981	WITHOUT_CLASSIFICATION	6.759777301959371E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999936740931862	WITHOUT_CLASSIFICATION	6.325906813823461E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999301410998366	WITHOUT_CLASSIFICATION	6.985890016340732E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999896319428189	WITHOUT_CLASSIFICATION	1.036805718120506E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999776578704235	WITHOUT_CLASSIFICATION	2.2342129576561697E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999977597083873	WITHOUT_CLASSIFICATION	2.2402916126110026E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999902932612408	WITHOUT_CLASSIFICATION	9.706738759245536E-6	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999523518648294	WITHOUT_CLASSIFICATION	4.764813517051229E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999961117543968	WITHOUT_CLASSIFICATION	3.888245603155507E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999821058604196	WITHOUT_CLASSIFICATION	1.789413958047241E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999446936355371	WITHOUT_CLASSIFICATION	5.530636446296299E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999437742982971	WITHOUT_CLASSIFICATION	5.622570170296102E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999921601012459	WITHOUT_CLASSIFICATION	7.839898754033431E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999943363322366	WITHOUT_CLASSIFICATION	5.663667763352659E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999784125460308	WITHOUT_CLASSIFICATION	2.158745396923831E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999535496986138	WITHOUT_CLASSIFICATION	4.645030138614852E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999897269570867	WITHOUT_CLASSIFICATION	1.0273042913277263E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999717050535394	WITHOUT_CLASSIFICATION	2.8294946460638348E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999568109854	WITHOUT_CLASSIFICATION	4.318901464057107E-8	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999776578704235	WITHOUT_CLASSIFICATION	2.2342129576561697E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999897164317431	WITHOUT_CLASSIFICATION	1.0283568257076582E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999896504951997	WITHOUT_CLASSIFICATION	1.0349504800249035E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999690829125094	WITHOUT_CLASSIFICATION	3.0917087490522174E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998686178186337	WITHOUT_CLASSIFICATION	1.3138218136630398E-4	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999864406215803	WITHOUT_CLASSIFICATION	1.355937841974199E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999949147737698	WITHOUT_CLASSIFICATION	5.085226230200115E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999868868478662	WITHOUT_CLASSIFICATION	1.3113152133809527E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.999994914066198	WITHOUT_CLASSIFICATION	5.085933802086269E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999873065074715	WITHOUT_CLASSIFICATION	1.2693492528566507E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999869253072002	WITHOUT_CLASSIFICATION	1.3074692799732295E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998997018027382	WITHOUT_CLASSIFICATION	1.0029819726176886E-4	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999908747413586	WITHOUT_CLASSIFICATION	9.125258641453674E-6	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999811607373387	WITHOUT_CLASSIFICATION	1.883926266134866E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999990837024011	WITHOUT_CLASSIFICATION	9.162975988927453E-6	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999762792408139	WITHOUT_CLASSIFICATION	2.3720759186062367E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999869253072002	WITHOUT_CLASSIFICATION	1.3074692799732295E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999864409773254	WITHOUT_CLASSIFICATION	1.3559022674768877E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.999983525286286	WITHOUT_CLASSIFICATION	1.6474713714039842E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999627004303121	WITHOUT_CLASSIFICATION	3.729956968788803E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998874451391513	WITHOUT_CLASSIFICATION	1.1255486084873535E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999920074956126	WITHOUT_CLASSIFICATION	7.992504387399886E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999718925311526	WITHOUT_CLASSIFICATION	2.810746884740363E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999851939186252	WITHOUT_CLASSIFICATION	1.4806081374843799E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999688881304007	WITHOUT_CLASSIFICATION	3.111186959923859E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746135512169	WITHOUT_CLASSIFICATION	2.538644878309577E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775954869596	WITHOUT_CLASSIFICATION	2.240451304039499E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775954869596	WITHOUT_CLASSIFICATION	2.240451304039499E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775954869596	WITHOUT_CLASSIFICATION	2.240451304039499E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999961882471505	WITHOUT_CLASSIFICATION	3.8117528495085984E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999961882471505	WITHOUT_CLASSIFICATION	3.8117528495085984E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999278863579394	WITHOUT_CLASSIFICATION	7.211364206059168E-5	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999929002046266	WITHOUT_CLASSIFICATION	7.099795373389308E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999865960141232	WITHOUT_CLASSIFICATION	1.3403985876696576E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999897137599705	WITHOUT_CLASSIFICATION	1.028624002954344E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999509333437171	WITHOUT_CLASSIFICATION	4.906665628290198E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714502088849	WITHOUT_CLASSIFICATION	2.8549791115104894E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719907095492	WITHOUT_CLASSIFICATION	2.800929045079842E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999984899826131	WITHOUT_CLASSIFICATION	1.5100173868736905E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786875113466	WITHOUT_CLASSIFICATION	2.1312488653399352E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714502088849	WITHOUT_CLASSIFICATION	2.8549791115104894E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719907095492	WITHOUT_CLASSIFICATION	2.800929045079842E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999548903196415	WITHOUT_CLASSIFICATION	4.51096803584536E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999885374499448	WITHOUT_CLASSIFICATION	1.1462550055231379E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999984084700476	WITHOUT_CLASSIFICATION	1.5915299523564524E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999575475527868	WITHOUT_CLASSIFICATION	4.245244721321239E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999730326315011	WITHOUT_CLASSIFICATION	2.696736849887127E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999614611617784	WITHOUT_CLASSIFICATION	3.8538838221523444E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999917421616669	WITHOUT_CLASSIFICATION	8.257838333200576E-6	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999976358895028	WITHOUT_CLASSIFICATION	2.3641104972052846E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999901211629613	WITHOUT_CLASSIFICATION	9.878837038705224E-5	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999304713350821	WITHOUT_CLASSIFICATION	6.952866491794768E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999807334361935	WITHOUT_CLASSIFICATION	1.926656380653106E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999709617305794	WITHOUT_CLASSIFICATION	2.903826942050048E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999907512563067	WITHOUT_CLASSIFICATION	9.248743693342549E-6	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9972890521835541	WITHOUT_CLASSIFICATION	0.002710947816445973	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999986612437752	WITHOUT_CLASSIFICATION	1.3387562248079751E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999408400322746	WITHOUT_CLASSIFICATION	5.9159967725296524E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999228375081292	WITHOUT_CLASSIFICATION	7.716249187086251E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999984043553387	WITHOUT_CLASSIFICATION	1.5956446613440946E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999818362740927	WITHOUT_CLASSIFICATION	1.816372590728663E-5	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999713025406534	WITHOUT_CLASSIFICATION	2.869745934665192E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999914067998148	WITHOUT_CLASSIFICATION	8.59320018520351E-6	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999726301956997	WITHOUT_CLASSIFICATION	2.7369804300292524E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999714866913759	WITHOUT_CLASSIFICATION	2.8513308624024753E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713092914135	WITHOUT_CLASSIFICATION	2.869070858642458E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754052146175	WITHOUT_CLASSIFICATION	2.459478538254757E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999889384450362	WITHOUT_CLASSIFICATION	1.1061554963827571E-5	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738226808934	WITHOUT_CLASSIFICATION	2.6177319106634827E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999552110675625	WITHOUT_CLASSIFICATION	4.478893243760054E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999545785127829	WITHOUT_CLASSIFICATION	4.542148721706796E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999545785127829	WITHOUT_CLASSIFICATION	4.542148721706796E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999687140302281	WITHOUT_CLASSIFICATION	3.1285969771951364E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999979086902643	WITHOUT_CLASSIFICATION	2.0913097356427697E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999966106940691	WITHOUT_CLASSIFICATION	3.389305930903587E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999946445642056	WITHOUT_CLASSIFICATION	5.35543579443622E-6	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999975467200294	WITHOUT_CLASSIFICATION	2.4532799706725686E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999827203884636	WITHOUT_CLASSIFICATION	1.727961153641279E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999875177743913	WITHOUT_CLASSIFICATION	1.2482225608658022E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.9999936514206317	WITHOUT_CLASSIFICATION	6.348579368287281E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999986528878048	WITHOUT_CLASSIFICATION	1.3471121951787918E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723760534507	WITHOUT_CLASSIFICATION	2.7623946549356836E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723314168331	WITHOUT_CLASSIFICATION	2.766858316696151E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723403622374	WITHOUT_CLASSIFICATION	2.765963776262357E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999865714091097	WITHOUT_CLASSIFICATION	1.3428590890368979E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9990177680231672	WITHOUT_CLASSIFICATION	9.822319768328365E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999802778569781	WITHOUT_CLASSIFICATION	1.97221430219041E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999989743719845	WITHOUT_CLASSIFICATION	1.0256280154073213E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999936198205218	WITHOUT_CLASSIFICATION	6.3801794782240705E-6	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.9999195902839779	WITHOUT_CLASSIFICATION	8.040971602206587E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999750815805948	WITHOUT_CLASSIFICATION	2.491841940522519E-5	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999937076377956	WITHOUT_CLASSIFICATION	6.2923622044465E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999802778569781	WITHOUT_CLASSIFICATION	1.97221430219041E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999802778569781	WITHOUT_CLASSIFICATION	1.97221430219041E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999676528087541	WITHOUT_CLASSIFICATION	3.234719124590508E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999722911631262	WITHOUT_CLASSIFICATION	2.7708836873737795E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9978064508634036	WITHOUT_CLASSIFICATION	0.002193549136596491	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999972381691106	WITHOUT_CLASSIFICATION	2.761830889436419E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999993485418432	WITHOUT_CLASSIFICATION	6.514581567983638E-6	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999228375081292	WITHOUT_CLASSIFICATION	7.716249187086251E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9995654741474276	WITHOUT_CLASSIFICATION	4.3452585257236785E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999769304022763	WITHOUT_CLASSIFICATION	2.306959772365492E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999647036344564	WITHOUT_CLASSIFICATION	3.5296365543499755E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766937470774	WITHOUT_CLASSIFICATION	2.330625292265451E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999933102706299	WITHOUT_CLASSIFICATION	6.689729370089066E-6	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999755018951605	WITHOUT_CLASSIFICATION	2.449810483956402E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999885911489345	WITHOUT_CLASSIFICATION	1.1408851065574854E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999885911489345	WITHOUT_CLASSIFICATION	1.1408851065574854E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999885911489345	WITHOUT_CLASSIFICATION	1.1408851065574854E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999885911489345	WITHOUT_CLASSIFICATION	1.1408851065574854E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741793634613	WITHOUT_CLASSIFICATION	2.5820636538558205E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999572765764168	WITHOUT_CLASSIFICATION	4.272342358333023E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713263970001	WITHOUT_CLASSIFICATION	2.8673602999797164E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999513086126942	WITHOUT_CLASSIFICATION	4.869138730582101E-5	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999886712840405	WITHOUT_CLASSIFICATION	1.1328715959432532E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971997059246	WITHOUT_CLASSIFICATION	2.8002940753924882E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743131944421	WITHOUT_CLASSIFICATION	2.568680555782869E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999882649954381	WITHOUT_CLASSIFICATION	1.1735004561918846E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999923958036578	WITHOUT_CLASSIFICATION	7.604196342116506E-6	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999864774997815	WITHOUT_CLASSIFICATION	1.3522500218500504E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999974185926639	WITHOUT_CLASSIFICATION	2.5814073361023938E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999957528415391	WITHOUT_CLASSIFICATION	4.2471584610058705E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999877273518141	WITHOUT_CLASSIFICATION	1.227264818595892E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999903383245851	WITHOUT_CLASSIFICATION	9.661675414974781E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999903383245851	WITHOUT_CLASSIFICATION	9.661675414974781E-6	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999903383245851	WITHOUT_CLASSIFICATION	9.661675414974781E-6	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999932216658461	WITHOUT_CLASSIFICATION	6.778334153913671E-6	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.9999832970198952	WITHOUT_CLASSIFICATION	1.6702980104861328E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999988433691435	WITHOUT_CLASSIFICATION	1.1566308566128266E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715742452341	WITHOUT_CLASSIFICATION	2.8425754765869768E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715742452341	WITHOUT_CLASSIFICATION	2.8425754765869768E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999936742450088	WITHOUT_CLASSIFICATION	6.3257549912179445E-6	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775954869596	WITHOUT_CLASSIFICATION	2.240451304039499E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999988362323727	WITHOUT_CLASSIFICATION	1.1637676272403534E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999864407366896	WITHOUT_CLASSIFICATION	1.3559263310331638E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999998165912441	WITHOUT_CLASSIFICATION	1.8340875590247224E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999432714130192	WITHOUT_CLASSIFICATION	5.672858698086585E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719846772188	WITHOUT_CLASSIFICATION	2.801532278110411E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999900732227316	WITHOUT_CLASSIFICATION	9.926777268366868E-6	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999749346265981	WITHOUT_CLASSIFICATION	2.5065373401925833E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.999964600792353	WITHOUT_CLASSIFICATION	3.539920764702819E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998730363995127	WITHOUT_CLASSIFICATION	1.2696360048717201E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999974651135416	WITHOUT_CLASSIFICATION	2.5348864584064337E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999734325899632	WITHOUT_CLASSIFICATION	2.656741003689182E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999935919488463	WITHOUT_CLASSIFICATION	6.408051153747337E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997600138114	WITHOUT_CLASSIFICATION	2.399861886550726E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999865877260098	WITHOUT_CLASSIFICATION	1.3412273990194919E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995900223421	WITHOUT_CLASSIFICATION	4.099776578699085E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999388497020604	WITHOUT_CLASSIFICATION	6.115029793965074E-5	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999934870651462	WITHOUT_CLASSIFICATION	6.51293485384257E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998222660861138	WITHOUT_CLASSIFICATION	1.777339138861146E-4	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999925171382749	WITHOUT_CLASSIFICATION	7.482861725171613E-6	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999679647838491	WITHOUT_CLASSIFICATION	3.203521615088074E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999907467360835	WITHOUT_CLASSIFICATION	9.253263916558332E-6	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999939633887195	WITHOUT_CLASSIFICATION	6.036611280483271E-6	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999990528280146	WITHOUT_CLASSIFICATION	9.471719852449851E-7	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999833291366285	WITHOUT_CLASSIFICATION	1.667086337151109E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999429040336949	WITHOUT_CLASSIFICATION	5.709596630507189E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.99999662079628	WITHOUT_CLASSIFICATION	3.3792037199221277E-6	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9997749759212273	WITHOUT_CLASSIFICATION	2.250240787726603E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993829700655	WITHOUT_CLASSIFICATION	6.170299346206537E-7	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999797828397964	WITHOUT_CLASSIFICATION	2.0217160203512924E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999917792636162	WITHOUT_CLASSIFICATION	8.220736383909814E-6	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999810742557029	WITHOUT_CLASSIFICATION	1.892574429707658E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999769129467573	WITHOUT_CLASSIFICATION	2.308705324271703E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999836392091146	WITHOUT_CLASSIFICATION	1.636079088546079E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999611668597422	WITHOUT_CLASSIFICATION	3.883314025771261E-5	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999835613925863	WITHOUT_CLASSIFICATION	1.6438607413674108E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999977244496183	WITHOUT_CLASSIFICATION	2.275550381721944E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999566784993963	WITHOUT_CLASSIFICATION	4.332150060368361E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999978766185169	WITHOUT_CLASSIFICATION	2.1233814831198125E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999930847661492	WITHOUT_CLASSIFICATION	6.915233850731367E-6	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999828178419073	WITHOUT_CLASSIFICATION	1.718215809267985E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999739704257384	WITHOUT_CLASSIFICATION	2.6029574261522762E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999978302805623	WITHOUT_CLASSIFICATION	2.1697194376412034E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999288376346408	WITHOUT_CLASSIFICATION	7.116236535920062E-5	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999689323455468	WITHOUT_CLASSIFICATION	3.106765445317047E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997952107136164	WITHOUT_CLASSIFICATION	2.0478928638359407E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999959673048506	WITHOUT_CLASSIFICATION	4.0326951493436815E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999922331904483	WITHOUT_CLASSIFICATION	7.76680955173481E-6	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999628770698122	WITHOUT_CLASSIFICATION	3.712293018778301E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999937176154116	WITHOUT_CLASSIFICATION	6.282384588436415E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999858985141643	WITHOUT_CLASSIFICATION	1.4101485835652702E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997395358197834	WITHOUT_CLASSIFICATION	2.6046418021668616E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999961939256988	WITHOUT_CLASSIFICATION	3.8060743011624865E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999995640016084	WITHOUT_CLASSIFICATION	4.3599839160604395E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997533912158014	WITHOUT_CLASSIFICATION	2.466087841986516E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999990930210599	WITHOUT_CLASSIFICATION	9.069789400962018E-6	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999795636166982	WITHOUT_CLASSIFICATION	2.0436383301760004E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999926579530875	WITHOUT_CLASSIFICATION	7.342046912499341E-5	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997014429035	WITHOUT_CLASSIFICATION	2.985570964626022E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999726094621636	WITHOUT_CLASSIFICATION	2.7390537836299653E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9997914667561969	WITHOUT_CLASSIFICATION	2.0853324380318871E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999923751981669	WITHOUT_CLASSIFICATION	7.624801833078603E-6	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999891336240962	WITHOUT_CLASSIFICATION	1.0866375903854514E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999987978012094	WITHOUT_CLASSIFICATION	1.2021987906290746E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999904566886223	WITHOUT_CLASSIFICATION	9.543311377692083E-6	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999974001216319	WITHOUT_CLASSIFICATION	2.599878368173296E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999905976753556	WITHOUT_CLASSIFICATION	9.402324644373153E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.999977173736241	WITHOUT_CLASSIFICATION	2.2826263758985286E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999680442198443	WITHOUT_CLASSIFICATION	3.195578015569238E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992827203079	WITHOUT_CLASSIFICATION	7.172796922214303E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999959610085508	WITHOUT_CLASSIFICATION	4.038991449165678E-6	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999918622319963	WITHOUT_CLASSIFICATION	8.137768003596129E-6	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996837191563	WITHOUT_CLASSIFICATION	3.162808437498896E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999817582910797	WITHOUT_CLASSIFICATION	1.8241708920290378E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998631785819067	WITHOUT_CLASSIFICATION	1.3682141809341405E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999721644238924	WITHOUT_CLASSIFICATION	2.7835576107712853E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999526000452363	WITHOUT_CLASSIFICATION	4.7399954763722935E-5	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9992659921713111	WITHOUT_CLASSIFICATION	7.340078286889203E-4	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999774373903875	WITHOUT_CLASSIFICATION	2.2562609612436938E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999881004930404	WITHOUT_CLASSIFICATION	1.189950695952645E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999929467501083	WITHOUT_CLASSIFICATION	7.053249891673418E-6	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999863982818245	WITHOUT_CLASSIFICATION	1.3601718175546521E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9976906137868949	WITHOUT_CLASSIFICATION	0.0023093862131049804	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999876634184307	WITHOUT_CLASSIFICATION	1.2336581569283437E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.999976879643747	WITHOUT_CLASSIFICATION	2.312035625301982E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999898584902467	WITHOUT_CLASSIFICATION	1.0141509753326318E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999772539046973	WITHOUT_CLASSIFICATION	2.274609530276546E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998896129345423	WITHOUT_CLASSIFICATION	1.1038706545769546E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999647077494875	WITHOUT_CLASSIFICATION	3.529225051239402E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999851648156062	WITHOUT_CLASSIFICATION	1.4835184393809139E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999888704180009	WITHOUT_CLASSIFICATION	1.112958199903949E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.99998564223371	WITHOUT_CLASSIFICATION	1.4357766289939958E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999876199707617	WITHOUT_CLASSIFICATION	1.2380029238272927E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999956972877079	WITHOUT_CLASSIFICATION	4.3027122921313126E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999956972877079	WITHOUT_CLASSIFICATION	4.3027122921313126E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999794653581899	WITHOUT_CLASSIFICATION	2.053464181005474E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999514419072754	WITHOUT_CLASSIFICATION	4.855809272468401E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999613494316106	WITHOUT_CLASSIFICATION	3.8650568389373515E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998743469419477	WITHOUT_CLASSIFICATION	1.2565305805229521E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999932456083349	WITHOUT_CLASSIFICATION	6.7543916650799834E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9998679639766963	WITHOUT_CLASSIFICATION	1.3203602330379415E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9990023754187081	WITHOUT_CLASSIFICATION	9.97624581291892E-4	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9998431304453217	WITHOUT_CLASSIFICATION	1.5686955467824078E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999792010766666	WITHOUT_CLASSIFICATION	2.0798923333464665E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9984765042655139	WITHOUT_CLASSIFICATION	0.0015234957344860886	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999921068364682	WITHOUT_CLASSIFICATION	7.893163531710799E-6	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999640675571139	WITHOUT_CLASSIFICATION	3.5932442886113106E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998948486865783	WITHOUT_CLASSIFICATION	1.0515131342171117E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999971923121915	WITHOUT_CLASSIFICATION	2.8076878084090306E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999996047497549	WITHOUT_CLASSIFICATION	3.9525024509517635E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999539340634447	WITHOUT_CLASSIFICATION	4.606593655523118E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999993868455976	WITHOUT_CLASSIFICATION	6.131544023949947E-6	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999993868455976	WITHOUT_CLASSIFICATION	6.131544023949947E-6	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999729954896891	WITHOUT_CLASSIFICATION	2.7004510310836568E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999203986478227	WITHOUT_CLASSIFICATION	7.960135217735749E-5	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999991553334726	WITHOUT_CLASSIFICATION	8.446665273968012E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999586446875596	WITHOUT_CLASSIFICATION	4.1355312440384254E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999894966662444	WITHOUT_CLASSIFICATION	1.0503333755624896E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999878843049879	WITHOUT_CLASSIFICATION	1.2115695012085332E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999894966662444	WITHOUT_CLASSIFICATION	1.0503333755624896E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999654926078323	WITHOUT_CLASSIFICATION	3.4507392167766455E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999880500409892	WITHOUT_CLASSIFICATION	1.1949959010839642E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999853619625417	WITHOUT_CLASSIFICATION	1.4638037458307053E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999853619625417	WITHOUT_CLASSIFICATION	1.4638037458307053E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999915134316097	WITHOUT_CLASSIFICATION	8.486568390294709E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999988004632276	WITHOUT_CLASSIFICATION	1.1995367723894675E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999761839149072	WITHOUT_CLASSIFICATION	2.3816085092903295E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999725870316846	WITHOUT_CLASSIFICATION	2.7412968315413852E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999655834699	WITHOUT_CLASSIFICATION	3.4416530086920515E-8	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9998725380932626	WITHOUT_CLASSIFICATION	1.274619067374117E-4	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999948320806052	WITHOUT_CLASSIFICATION	5.167919394761367E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999939494635561	WITHOUT_CLASSIFICATION	6.0505364438253515E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999948086666979	WITHOUT_CLASSIFICATION	5.19133330215021E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997957994955193	WITHOUT_CLASSIFICATION	2.0420050448060543E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999942724898804	WITHOUT_CLASSIFICATION	5.727510119551255E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999754343936866	WITHOUT_CLASSIFICATION	2.4565606313404305E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9989433983714336	WITHOUT_CLASSIFICATION	0.0010566016285664087	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999809072535424	WITHOUT_CLASSIFICATION	1.9092746457593263E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999675440052678	WITHOUT_CLASSIFICATION	3.245599473225594E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999973100534367	WITHOUT_CLASSIFICATION	2.689946563217867E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999948043699481	WITHOUT_CLASSIFICATION	5.195630051836176E-6	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999061499554909	WITHOUT_CLASSIFICATION	9.385004450921343E-5	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999490673864038	WITHOUT_CLASSIFICATION	5.093261359634424E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999367096083928	WITHOUT_CLASSIFICATION	6.329039160723144E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999860189654245	WITHOUT_CLASSIFICATION	1.3981034575487064E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999923391016218	WITHOUT_CLASSIFICATION	7.660898378278029E-6	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999877334884797	WITHOUT_CLASSIFICATION	1.2266511520198958E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999757578966629	WITHOUT_CLASSIFICATION	2.4242103337184627E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999662705485189	WITHOUT_CLASSIFICATION	3.372945148107335E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996726820249485	WITHOUT_CLASSIFICATION	3.2731797505136635E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999850183527313	WITHOUT_CLASSIFICATION	1.4981647268625438E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999978526688197	WITHOUT_CLASSIFICATION	2.1473311803570276E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994806942842	WITHOUT_CLASSIFICATION	5.19305715846124E-7	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999832255342855	WITHOUT_CLASSIFICATION	1.677446571447793E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999868071050687	WITHOUT_CLASSIFICATION	1.3192894931356438E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999548352315006	WITHOUT_CLASSIFICATION	4.516476849931207E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999780085712903	WITHOUT_CLASSIFICATION	2.1991428709745377E-5	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999767894255369	WITHOUT_CLASSIFICATION	2.3210574463056104E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999743581272501	WITHOUT_CLASSIFICATION	2.5641872749906884E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.999987866348189	WITHOUT_CLASSIFICATION	1.2133651810873027E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.999987866348189	WITHOUT_CLASSIFICATION	1.2133651810873027E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922614232472	WITHOUT_CLASSIFICATION	7.738576752762354E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999546238063836	WITHOUT_CLASSIFICATION	4.537619361648503E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999953894393777	WITHOUT_CLASSIFICATION	4.6105606222362104E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999894600082739	WITHOUT_CLASSIFICATION	1.0539991726042223E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999613160167362	WITHOUT_CLASSIFICATION	3.8683983263778844E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999998195593079	WITHOUT_CLASSIFICATION	1.804406920971103E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999937639262	WITHOUT_CLASSIFICATION	6.236073774334496E-9	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999659026645608	WITHOUT_CLASSIFICATION	3.409733543932778E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922614232472	WITHOUT_CLASSIFICATION	7.738576752762354E-6	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999546238063836	WITHOUT_CLASSIFICATION	4.537619361648503E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998367306408411	WITHOUT_CLASSIFICATION	1.6326935915891914E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999346618382763	WITHOUT_CLASSIFICATION	6.533816172367843E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999928289243244	WITHOUT_CLASSIFICATION	7.171075675599173E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999742451551539	WITHOUT_CLASSIFICATION	2.575484484617844E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999925874724157	WITHOUT_CLASSIFICATION	7.4125275843377585E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999299435982442	WITHOUT_CLASSIFICATION	7.005640175574698E-5	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999889311570006	WITHOUT_CLASSIFICATION	1.1068842999425894E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999932636976532	WITHOUT_CLASSIFICATION	6.7363023467977755E-6	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999957597908778	WITHOUT_CLASSIFICATION	4.24020912209738E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9989946455553638	WITHOUT_CLASSIFICATION	0.0010053544446361902	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999937580941001	WITHOUT_CLASSIFICATION	6.241905899912387E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9989946455553638	WITHOUT_CLASSIFICATION	0.0010053544446361902	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998813169615354	WITHOUT_CLASSIFICATION	1.1868303846461862E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999726094621636	WITHOUT_CLASSIFICATION	2.7390537836299653E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998813169615354	WITHOUT_CLASSIFICATION	1.1868303846461862E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998994623923807	WITHOUT_CLASSIFICATION	1.0053760761932358E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999662785958046	WITHOUT_CLASSIFICATION	3.3721404195422694E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999932636976532	WITHOUT_CLASSIFICATION	6.7363023467977755E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999932636976532	WITHOUT_CLASSIFICATION	6.7363023467977755E-6	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999987048352441	WITHOUT_CLASSIFICATION	1.295164755904898E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999870516793196	WITHOUT_CLASSIFICATION	1.2948320680460385E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999987048352441	WITHOUT_CLASSIFICATION	1.295164755904898E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999868282795852	WITHOUT_CLASSIFICATION	1.317172041481488E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999823129958813	WITHOUT_CLASSIFICATION	1.7687004118827145E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999640261809698	WITHOUT_CLASSIFICATION	3.597381903014742E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999613315668672	WITHOUT_CLASSIFICATION	3.866843313284344E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999871617359413	WITHOUT_CLASSIFICATION	1.283826405880781E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999628859137787	WITHOUT_CLASSIFICATION	3.711408622130142E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999919362825196	WITHOUT_CLASSIFICATION	8.063717480417283E-6	TEST
columns	WITHOUT_CLASSIFICATION	0.9999923231328638	WITHOUT_CLASSIFICATION	7.676867136132688E-6	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999873784031146	WITHOUT_CLASSIFICATION	1.2621596885345098E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999980653729313	WITHOUT_CLASSIFICATION	1.9346270686467177E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999927492076743	WITHOUT_CLASSIFICATION	7.250792325694414E-6	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999922661262296	WITHOUT_CLASSIFICATION	7.733873770413625E-6	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999980572540815	WITHOUT_CLASSIFICATION	1.9427459185067122E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999808011523061	WITHOUT_CLASSIFICATION	1.9198847693899147E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999729141208663	WITHOUT_CLASSIFICATION	2.7085879133702565E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999942701479704	WITHOUT_CLASSIFICATION	5.72985202954662E-6	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999975745276802	WITHOUT_CLASSIFICATION	2.4254723197888735E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999871829171465	WITHOUT_CLASSIFICATION	1.2817082853386808E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999962203793404	WITHOUT_CLASSIFICATION	3.7796206596349087E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999989106569184	WITHOUT_CLASSIFICATION	1.089343081594241E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999870208552295	WITHOUT_CLASSIFICATION	1.2979144770467477E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999726300630234	WITHOUT_CLASSIFICATION	2.736993697654052E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998790724973083	WITHOUT_CLASSIFICATION	1.2092750269158765E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999318940471011	WITHOUT_CLASSIFICATION	6.81059528987828E-5	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998971908993664	WITHOUT_CLASSIFICATION	1.0280910063369026E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.993064379804058	WITHOUT_CLASSIFICATION	0.006935620195941863	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999933012012615	WITHOUT_CLASSIFICATION	6.6987987384226445E-6	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999871617359413	WITHOUT_CLASSIFICATION	1.283826405880781E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999835429682222	WITHOUT_CLASSIFICATION	1.6457031777786696E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999467769174043	WITHOUT_CLASSIFICATION	5.3223082595720026E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9423092859296233	WITHOUT_CLASSIFICATION	0.057690714070376806	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999599310715636	WITHOUT_CLASSIFICATION	4.0068928436437265E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999803202238842	WITHOUT_CLASSIFICATION	1.9679776115885554E-5	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999865883704694	WITHOUT_CLASSIFICATION	1.3411629530629865E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999868282795852	WITHOUT_CLASSIFICATION	1.317172041481488E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999868282795852	WITHOUT_CLASSIFICATION	1.317172041481488E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999873496236329	WITHOUT_CLASSIFICATION	1.2650376367078375E-5	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999800158396567	WITHOUT_CLASSIFICATION	1.9984160343375537E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999896179474178	WITHOUT_CLASSIFICATION	1.0382052582117757E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999848891851637	WITHOUT_CLASSIFICATION	1.511081483629037E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998742929812435	WITHOUT_CLASSIFICATION	1.2570701875644683E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999904750185376	WITHOUT_CLASSIFICATION	9.524981462468916E-6	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999962691522998	WITHOUT_CLASSIFICATION	3.7308477002038513E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999987369212223	WITHOUT_CLASSIFICATION	1.2630787776956597E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999386438310723	WITHOUT_CLASSIFICATION	6.1356168927698E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999904587651529	WITHOUT_CLASSIFICATION	9.541234846977791E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999887286074015	WITHOUT_CLASSIFICATION	1.1271392598431576E-5	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999980572540815	WITHOUT_CLASSIFICATION	1.9427459185067122E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999922614232472	WITHOUT_CLASSIFICATION	7.738576752762354E-6	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999887286074015	WITHOUT_CLASSIFICATION	1.1271392598431576E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999924144755851	WITHOUT_CLASSIFICATION	7.585524415016742E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999982701773057	WITHOUT_CLASSIFICATION	1.7298226943227616E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999826572632883	WITHOUT_CLASSIFICATION	1.7342736711688952E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.997841825617562	WITHOUT_CLASSIFICATION	0.00215817438243796	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999602555634002	WITHOUT_CLASSIFICATION	3.9744436599765684E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999991073431654	WITHOUT_CLASSIFICATION	8.926568346296396E-7	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999972638254885	WITHOUT_CLASSIFICATION	2.7361745116252574E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999944107394765	WITHOUT_CLASSIFICATION	5.58926052352496E-6	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999918888873017	WITHOUT_CLASSIFICATION	8.111112698300481E-6	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999724570400172	WITHOUT_CLASSIFICATION	2.754295998271264E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999614031409254	WITHOUT_CLASSIFICATION	3.859685907464436E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999614031409254	WITHOUT_CLASSIFICATION	3.859685907464436E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999763318947197	WITHOUT_CLASSIFICATION	2.366810528041538E-5	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999196998566698	WITHOUT_CLASSIFICATION	8.030014333009852E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999887286074015	WITHOUT_CLASSIFICATION	1.1271392598431576E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999602555634002	WITHOUT_CLASSIFICATION	3.9744436599765684E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999972638254885	WITHOUT_CLASSIFICATION	2.7361745116252574E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999745324594704	WITHOUT_CLASSIFICATION	2.5467540529687482E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999999791678614	WITHOUT_CLASSIFICATION	2.083213859496199E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999892295473153	WITHOUT_CLASSIFICATION	1.077045268462956E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999895193810401	WITHOUT_CLASSIFICATION	1.0480618959949268E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999991141528598	WITHOUT_CLASSIFICATION	8.858471401977253E-6	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999917333514855	WITHOUT_CLASSIFICATION	8.266648514527705E-6	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999924144755851	WITHOUT_CLASSIFICATION	7.585524415016742E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999733842800067	WITHOUT_CLASSIFICATION	2.6615719993264575E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999877197556746	WITHOUT_CLASSIFICATION	1.2280244325505954E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.99995277641486	WITHOUT_CLASSIFICATION	4.72235851399222E-5	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999688034456192	WITHOUT_CLASSIFICATION	3.119655438082792E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999663986375869	WITHOUT_CLASSIFICATION	3.360136241316233E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999925446547479	WITHOUT_CLASSIFICATION	7.455345252085144E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998994623923807	WITHOUT_CLASSIFICATION	1.0053760761932358E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877244852619	WITHOUT_CLASSIFICATION	1.227551473809426E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999195628986121	WITHOUT_CLASSIFICATION	8.04371013878648E-5	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999985642280353	WITHOUT_CLASSIFICATION	1.4357719646982368E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999979761085337	WITHOUT_CLASSIFICATION	2.023891466346394E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999974380329443	WITHOUT_CLASSIFICATION	2.5619670556989032E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999901564413562	WITHOUT_CLASSIFICATION	9.84355864370936E-6	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999874782815517	WITHOUT_CLASSIFICATION	1.2521718448378707E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999821602795765	WITHOUT_CLASSIFICATION	1.783972042349272E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999917333514855	WITHOUT_CLASSIFICATION	8.266648514527705E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999866062772016	WITHOUT_CLASSIFICATION	1.3393722798375331E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999608906821186	WITHOUT_CLASSIFICATION	3.910931788145971E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999621867471674	WITHOUT_CLASSIFICATION	3.781325283259761E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999952995911808	WITHOUT_CLASSIFICATION	4.70040881921267E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999042047508993	WITHOUT_CLASSIFICATION	9.5795249100787E-5	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999669821254709	WITHOUT_CLASSIFICATION	3.301787452908075E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999449456228686	WITHOUT_CLASSIFICATION	5.505437713131822E-5	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998766946700133	WITHOUT_CLASSIFICATION	1.233053299867698E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999888867938045	WITHOUT_CLASSIFICATION	1.1113206195539567E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999878811473013	WITHOUT_CLASSIFICATION	1.2118852698776905E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999953489804476	WITHOUT_CLASSIFICATION	4.651019552448898E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999925258331543	WITHOUT_CLASSIFICATION	7.474166845663613E-6	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999992052143827	WITHOUT_CLASSIFICATION	7.947856172560371E-7	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999888624013804	WITHOUT_CLASSIFICATION	1.1137598619562779E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999766990634479	WITHOUT_CLASSIFICATION	2.330093655209789E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999945998977867	WITHOUT_CLASSIFICATION	5.400102213328346E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999970163379226	WITHOUT_CLASSIFICATION	2.983662077413106E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.99997697352443	WITHOUT_CLASSIFICATION	2.3026475569935567E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999649787533121	WITHOUT_CLASSIFICATION	3.5021246687899765E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999415187021072	WITHOUT_CLASSIFICATION	5.8481297892753235E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999894343938717	WITHOUT_CLASSIFICATION	1.0565606128351533E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999488667243334	WITHOUT_CLASSIFICATION	5.113327566662376E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9965737194849187	WITHOUT_CLASSIFICATION	0.0034262805150812935	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998971553894044	WITHOUT_CLASSIFICATION	1.0284461059561052E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999742745610872	WITHOUT_CLASSIFICATION	2.5725438912864134E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999702506108142	WITHOUT_CLASSIFICATION	2.9749389185767397E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9869703027131949	WITHOUT_CLASSIFICATION	0.013029697286805059	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999692619448122	WITHOUT_CLASSIFICATION	3.073805518774209E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999888227286506	WITHOUT_CLASSIFICATION	1.1177271349286534E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999882966107547	WITHOUT_CLASSIFICATION	1.1703389245344334E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999919522256675	WITHOUT_CLASSIFICATION	8.047774332509348E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999683007837746	WITHOUT_CLASSIFICATION	3.169921622535478E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999346425453393	WITHOUT_CLASSIFICATION	6.53574546606575E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999360833477663	WITHOUT_CLASSIFICATION	6.391665223372675E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999181002189942	WITHOUT_CLASSIFICATION	8.18997810057892E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999346425453393	WITHOUT_CLASSIFICATION	6.53574546606575E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999683007837746	WITHOUT_CLASSIFICATION	3.169921622535478E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999360833477663	WITHOUT_CLASSIFICATION	6.391665223372675E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999713613047978	WITHOUT_CLASSIFICATION	2.8638695202203E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999849834945104	WITHOUT_CLASSIFICATION	1.5016505489497867E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995112014505655	WITHOUT_CLASSIFICATION	4.887985494345776E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999927327281861	WITHOUT_CLASSIFICATION	7.2672718138389954E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997832311911	WITHOUT_CLASSIFICATION	2.1676880887482353E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9920691870153885	WITHOUT_CLASSIFICATION	0.007930812984611511	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999962775826955	WITHOUT_CLASSIFICATION	3.722417304488397E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999870629652081	WITHOUT_CLASSIFICATION	1.2937034791896604E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999975886259748	WITHOUT_CLASSIFICATION	2.4113740252287756E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999906600274588	WITHOUT_CLASSIFICATION	9.339972541278186E-6	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999893408271566	WITHOUT_CLASSIFICATION	1.0659172843332655E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999994355500079	WITHOUT_CLASSIFICATION	5.644499921101207E-6	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999977339182615	WITHOUT_CLASSIFICATION	2.2660817384996652E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999927327281861	WITHOUT_CLASSIFICATION	7.2672718138389954E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999997102184256	WITHOUT_CLASSIFICATION	2.8978157440054595E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999941545481628	WITHOUT_CLASSIFICATION	5.845451837226442E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999365459487884	WITHOUT_CLASSIFICATION	6.345405121153949E-5	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999992905706416	WITHOUT_CLASSIFICATION	7.094293584688343E-7	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999851853017613	WITHOUT_CLASSIFICATION	1.4814698238807855E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999696762780401	WITHOUT_CLASSIFICATION	3.032372195983144E-5	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999561580095789	WITHOUT_CLASSIFICATION	4.38419904210785E-5	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999985024421776	WITHOUT_CLASSIFICATION	1.4975578224963708E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998025820595141	WITHOUT_CLASSIFICATION	1.9741794048593286E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999696737179377	WITHOUT_CLASSIFICATION	3.0326282062330832E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999695744865421	WITHOUT_CLASSIFICATION	3.042551345782907E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999695744865421	WITHOUT_CLASSIFICATION	3.042551345782907E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999952274319539	WITHOUT_CLASSIFICATION	4.772568046123238E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999952274319539	WITHOUT_CLASSIFICATION	4.772568046123238E-6	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999609588403813	WITHOUT_CLASSIFICATION	3.904115961870415E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999365459487884	WITHOUT_CLASSIFICATION	6.345405121153949E-5	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999342066224624	WITHOUT_CLASSIFICATION	6.579337753768479E-5	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999906771265582	WITHOUT_CLASSIFICATION	9.322873441756821E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999898320495512	WITHOUT_CLASSIFICATION	1.0167950448720283E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999898320495512	WITHOUT_CLASSIFICATION	1.0167950448720283E-5	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999957818400681	WITHOUT_CLASSIFICATION	4.218159931906186E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999577041418649	WITHOUT_CLASSIFICATION	4.229585813501039E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999990205265787	WITHOUT_CLASSIFICATION	9.794734212218595E-7	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999832017992621	WITHOUT_CLASSIFICATION	1.679820073784677E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999953682296164	WITHOUT_CLASSIFICATION	4.631770383643475E-6	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999976136146	WITHOUT_CLASSIFICATION	2.3863854010385925E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999935883283737	WITHOUT_CLASSIFICATION	6.411671626333612E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999983478927263	WITHOUT_CLASSIFICATION	1.652107273701892E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999914127338302	WITHOUT_CLASSIFICATION	8.587266169712765E-6	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999955059126842	WITHOUT_CLASSIFICATION	4.494087315897929E-6	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999783602482252	WITHOUT_CLASSIFICATION	2.1639751774780883E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999574616514837	WITHOUT_CLASSIFICATION	4.2538348516284366E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999632974470387	WITHOUT_CLASSIFICATION	3.6702552961338856E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999929052175892	WITHOUT_CLASSIFICATION	7.094782410842588E-6	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999820557587342	WITHOUT_CLASSIFICATION	1.7944241265777986E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999776800849782	WITHOUT_CLASSIFICATION	2.2319915021837618E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736779641417	WITHOUT_CLASSIFICATION	2.6322035858271244E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999864106807016	WITHOUT_CLASSIFICATION	1.358931929832824E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999876988419582	WITHOUT_CLASSIFICATION	1.2301158041943284E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979645320035	WITHOUT_CLASSIFICATION	2.035467996556608E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999897882099292	WITHOUT_CLASSIFICATION	1.0211790070734987E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9998674054328333	WITHOUT_CLASSIFICATION	1.3259456716677777E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999859413933231	WITHOUT_CLASSIFICATION	1.4058606677006412E-5	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999927582970465	WITHOUT_CLASSIFICATION	7.241702953567235E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999946445642056	WITHOUT_CLASSIFICATION	5.35543579443622E-6	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999856993602743	WITHOUT_CLASSIFICATION	1.430063972567097E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999878811473013	WITHOUT_CLASSIFICATION	1.2118852698776905E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999901361517847	WITHOUT_CLASSIFICATION	9.863848215340507E-6	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999938659368452	WITHOUT_CLASSIFICATION	6.134063154663752E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713538323484	WITHOUT_CLASSIFICATION	2.8646167651630114E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709647531316	WITHOUT_CLASSIFICATION	2.9035246868272748E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999903531282165	WITHOUT_CLASSIFICATION	9.646871783412375E-6	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999903531282165	WITHOUT_CLASSIFICATION	9.646871783412375E-6	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999744505517563	WITHOUT_CLASSIFICATION	2.554944824368427E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999928088240244	WITHOUT_CLASSIFICATION	7.191175975674218E-6	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999896284871438	WITHOUT_CLASSIFICATION	1.037151285627888E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999896284871438	WITHOUT_CLASSIFICATION	1.037151285627888E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999181260781324	WITHOUT_CLASSIFICATION	8.187392186756913E-5	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999224186585443	WITHOUT_CLASSIFICATION	7.758134145568475E-5	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999886096232654	WITHOUT_CLASSIFICATION	1.1390376734642966E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.999993485418432	WITHOUT_CLASSIFICATION	6.514581567983638E-6	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999871356844712	WITHOUT_CLASSIFICATION	1.2864315528805294E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997908955927542	WITHOUT_CLASSIFICATION	2.0910440724569915E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999748613714783	WITHOUT_CLASSIFICATION	2.513862852178255E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999641111137966	WITHOUT_CLASSIFICATION	3.588888620342935E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999641111137966	WITHOUT_CLASSIFICATION	3.588888620342935E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999948000872457	WITHOUT_CLASSIFICATION	5.199912754245816E-6	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9998797134455527	WITHOUT_CLASSIFICATION	1.2028655444731618E-4	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9998797134455527	WITHOUT_CLASSIFICATION	1.2028655444731618E-4	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999968279854468	WITHOUT_CLASSIFICATION	3.172014553208908E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999875964230535	WITHOUT_CLASSIFICATION	1.24035769466076E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999898284765587	WITHOUT_CLASSIFICATION	1.0171523441301654E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999706456094631	WITHOUT_CLASSIFICATION	2.935439053681777E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999933182586219	WITHOUT_CLASSIFICATION	6.681741378172735E-6	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999687638400017	WITHOUT_CLASSIFICATION	3.123615999826678E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998401652728433	WITHOUT_CLASSIFICATION	1.598347271567734E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999950073867726	WITHOUT_CLASSIFICATION	4.992613227350632E-6	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998541222302951	WITHOUT_CLASSIFICATION	1.4587776970484593E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999961707605305	WITHOUT_CLASSIFICATION	3.829239469478824E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999705755224879	WITHOUT_CLASSIFICATION	2.9424477512067547E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999917365282308	WITHOUT_CLASSIFICATION	8.263471769240852E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999917365282308	WITHOUT_CLASSIFICATION	8.263471769240852E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999917365282308	WITHOUT_CLASSIFICATION	8.263471769240852E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999917365282308	WITHOUT_CLASSIFICATION	8.263471769240852E-6	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999741962548562	WITHOUT_CLASSIFICATION	2.5803745143800317E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999055622752961	WITHOUT_CLASSIFICATION	9.443772470393205E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999899135264292	WITHOUT_CLASSIFICATION	1.0086473570834033E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999854544574195	WITHOUT_CLASSIFICATION	1.454554258062928E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999184047055383	WITHOUT_CLASSIFICATION	8.159529446169935E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997559561990822	WITHOUT_CLASSIFICATION	2.4404380091766224E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999149670907082	WITHOUT_CLASSIFICATION	8.503290929176944E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999987665045439	WITHOUT_CLASSIFICATION	1.2334954561406002E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999793999925597	WITHOUT_CLASSIFICATION	2.0600007440295517E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999876048867976	WITHOUT_CLASSIFICATION	1.2395113202535239E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999716435710437	WITHOUT_CLASSIFICATION	2.8356428956165355E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9895309021428103	WITHOUT_CLASSIFICATION	0.010469097857189715	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997543254609482	WITHOUT_CLASSIFICATION	2.456745390518436E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999524811889651	WITHOUT_CLASSIFICATION	4.751881103501646E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999716435710437	WITHOUT_CLASSIFICATION	2.8356428956165355E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9991367428756793	WITHOUT_CLASSIFICATION	8.632571243206075E-4	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999974481488599	WITHOUT_CLASSIFICATION	2.551851140033089E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999189080614516	WITHOUT_CLASSIFICATION	8.10919385483704E-5	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998144409670384	WITHOUT_CLASSIFICATION	1.855590329616252E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997937267979937	WITHOUT_CLASSIFICATION	2.062732020063626E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999242643178002	WITHOUT_CLASSIFICATION	7.573568219976603E-5	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999967102121633	WITHOUT_CLASSIFICATION	3.289787836771117E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999907662225688	WITHOUT_CLASSIFICATION	9.233777431220889E-6	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921369377553	WITHOUT_CLASSIFICATION	7.863062244609597E-6	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999904056954024	WITHOUT_CLASSIFICATION	9.594304597492255E-6	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921369377553	WITHOUT_CLASSIFICATION	7.863062244609597E-6	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999841984112662	WITHOUT_CLASSIFICATION	1.5801588733814578E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997727907518351	WITHOUT_CLASSIFICATION	2.2720924816486106E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997583625074439	WITHOUT_CLASSIFICATION	2.4163749255599423E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999967456601346	WITHOUT_CLASSIFICATION	3.2543398653777974E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999979189853542	WITHOUT_CLASSIFICATION	2.081014645806967E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999158334117214	WITHOUT_CLASSIFICATION	8.416658827859765E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999834062910387	WITHOUT_CLASSIFICATION	1.6593708961283996E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996737514284023	WITHOUT_CLASSIFICATION	3.2624857159770267E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999834062910387	WITHOUT_CLASSIFICATION	1.6593708961283996E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999909782087419	WITHOUT_CLASSIFICATION	9.021791258043767E-6	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999916664117859	WITHOUT_CLASSIFICATION	8.333588214118836E-6	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999791104659027	WITHOUT_CLASSIFICATION	2.088953409729323E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999426084949147	WITHOUT_CLASSIFICATION	5.739150508531716E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999832694213395	WITHOUT_CLASSIFICATION	1.6730578660468508E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998028408042793	WITHOUT_CLASSIFICATION	1.971591957206399E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999158334117214	WITHOUT_CLASSIFICATION	8.416658827859765E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996737514284023	WITHOUT_CLASSIFICATION	3.2624857159770267E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999909782087419	WITHOUT_CLASSIFICATION	9.021791258043767E-6	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999555663887649	WITHOUT_CLASSIFICATION	4.443361123507151E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999938713629547	WITHOUT_CLASSIFICATION	6.128637045311532E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999906929597002	WITHOUT_CLASSIFICATION	9.30704029971081E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997868588791	WITHOUT_CLASSIFICATION	2.1314112081643738E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.999993911654477	WITHOUT_CLASSIFICATION	6.088345523004392E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999716230490175	WITHOUT_CLASSIFICATION	2.837695098249706E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999954379958312	WITHOUT_CLASSIFICATION	4.562004168736074E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736779641417	WITHOUT_CLASSIFICATION	2.6322035858271244E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999916664117859	WITHOUT_CLASSIFICATION	8.333588214118836E-6	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999949170328624	WITHOUT_CLASSIFICATION	5.082967137715397E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999987048352441	WITHOUT_CLASSIFICATION	1.295164755904898E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999738186440098	WITHOUT_CLASSIFICATION	2.6181355990169565E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999638169722064	WITHOUT_CLASSIFICATION	3.618302779366045E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736779641417	WITHOUT_CLASSIFICATION	2.6322035858271244E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999818000222704	WITHOUT_CLASSIFICATION	1.81999777295896E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736779641417	WITHOUT_CLASSIFICATION	2.6322035858271244E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999789015768485	WITHOUT_CLASSIFICATION	2.1098423151552162E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999898264571883	WITHOUT_CLASSIFICATION	1.0173542811753219E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999725382770333	WITHOUT_CLASSIFICATION	2.746172296662842E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997484467753954	WITHOUT_CLASSIFICATION	2.515532246045151E-4	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999977766374162	WITHOUT_CLASSIFICATION	2.2233625839003347E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999900275278921	WITHOUT_CLASSIFICATION	9.972472107820447E-6	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999918132132533	WITHOUT_CLASSIFICATION	8.186786746803226E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999974134125277	WITHOUT_CLASSIFICATION	2.5865874722996754E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999651768307584	WITHOUT_CLASSIFICATION	3.4823169241718786E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9998193865096903	WITHOUT_CLASSIFICATION	1.8061349030968173E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999892640312917	WITHOUT_CLASSIFICATION	1.0735968708235834E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9998502167105088	WITHOUT_CLASSIFICATION	1.4978328949122522E-4	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997412560090227	WITHOUT_CLASSIFICATION	2.587439909772776E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999866605562564	WITHOUT_CLASSIFICATION	1.3339443743507351E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999768814980806	WITHOUT_CLASSIFICATION	2.3118501919387787E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992547306761	WITHOUT_CLASSIFICATION	7.452693239627073E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999953335951508	WITHOUT_CLASSIFICATION	4.666404849174307E-6	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997514602877537	WITHOUT_CLASSIFICATION	2.485397122461804E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999986667866616	WITHOUT_CLASSIFICATION	1.3332133384436785E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999993738341732	WITHOUT_CLASSIFICATION	6.2616582680503954E-6	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999586406608606	WITHOUT_CLASSIFICATION	4.13593391394691E-5	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999586406608606	WITHOUT_CLASSIFICATION	4.13593391394691E-5	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999932988442601	WITHOUT_CLASSIFICATION	6.701155739851084E-6	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999690843342629	WITHOUT_CLASSIFICATION	3.091566573707601E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999917374421187	WITHOUT_CLASSIFICATION	8.262557881384838E-6	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999745646118074	WITHOUT_CLASSIFICATION	2.5435388192585254E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999997909832706	WITHOUT_CLASSIFICATION	2.0901672937729028E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999952427017431	WITHOUT_CLASSIFICATION	4.757298256791105E-6	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999646958004207	WITHOUT_CLASSIFICATION	3.5304199579311905E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999629256331961	WITHOUT_CLASSIFICATION	3.707436680395789E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9966402115420899	WITHOUT_CLASSIFICATION	0.003359788457910025	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999880182537155	WITHOUT_CLASSIFICATION	1.1981746284405488E-5	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999714361576799	WITHOUT_CLASSIFICATION	2.8563842320029594E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999720189715536	WITHOUT_CLASSIFICATION	2.7981028446426762E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999069936933103	WITHOUT_CLASSIFICATION	9.300630668969579E-5	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999873847579842	WITHOUT_CLASSIFICATION	1.2615242015877969E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999986521055743	WITHOUT_CLASSIFICATION	1.3478944258110396E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999853087569711	WITHOUT_CLASSIFICATION	1.4691243029009854E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999932297265743	WITHOUT_CLASSIFICATION	6.770273425627011E-6	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999932297265743	WITHOUT_CLASSIFICATION	6.770273425627011E-6	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999970311397509	WITHOUT_CLASSIFICATION	2.9688602491399813E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999974134125277	WITHOUT_CLASSIFICATION	2.5865874722996754E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999583642856694	WITHOUT_CLASSIFICATION	4.163571433070209E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999741794269408	WITHOUT_CLASSIFICATION	2.5820573059212896E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999964667582323	WITHOUT_CLASSIFICATION	3.533241767708372E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999738301247062	WITHOUT_CLASSIFICATION	2.616987529382156E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999690753146275	WITHOUT_CLASSIFICATION	3.0924685372461025E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999918076890718	WITHOUT_CLASSIFICATION	8.192310928149828E-6	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999917578805838	WITHOUT_CLASSIFICATION	8.24211941618657E-6	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.99992849901575	WITHOUT_CLASSIFICATION	7.150098425007535E-5	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999940979848473	WITHOUT_CLASSIFICATION	5.902015152614763E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999998974462148	WITHOUT_CLASSIFICATION	1.025537851960368E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999746243152318	WITHOUT_CLASSIFICATION	2.537568476821175E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999481547307619	WITHOUT_CLASSIFICATION	5.184526923809671E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999988005963859	WITHOUT_CLASSIFICATION	1.1994036140839097E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999692269463627	WITHOUT_CLASSIFICATION	3.0773053637264245E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999957252877021	WITHOUT_CLASSIFICATION	4.274712297881966E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999984302217084	WITHOUT_CLASSIFICATION	1.569778291588293E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999979890635295	WITHOUT_CLASSIFICATION	2.01093647047562E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999987326984885	WITHOUT_CLASSIFICATION	1.2673015114733832E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999664015052729	WITHOUT_CLASSIFICATION	3.359849472707544E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999176828016594	WITHOUT_CLASSIFICATION	8.231719834056623E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999651771256488	WITHOUT_CLASSIFICATION	3.4822874351251895E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999949242854336	WITHOUT_CLASSIFICATION	5.0757145664014395E-6	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999791294026202	WITHOUT_CLASSIFICATION	2.0870597379794908E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999902826200511	WITHOUT_CLASSIFICATION	9.717379948969121E-6	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999355036717469	WITHOUT_CLASSIFICATION	6.449632825317108E-5	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.999932405287225	WITHOUT_CLASSIFICATION	6.759471277490984E-5	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999419339586407	WITHOUT_CLASSIFICATION	5.806604135925841E-5	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999313794570059	WITHOUT_CLASSIFICATION	6.862054299409304E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999714586520019	WITHOUT_CLASSIFICATION	2.8541347998134202E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999734890173632	WITHOUT_CLASSIFICATION	2.651098263678931E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999985772824105	WITHOUT_CLASSIFICATION	1.4227175895346755E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999733137686742	WITHOUT_CLASSIFICATION	2.6686231325842438E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999825122300763	WITHOUT_CLASSIFICATION	1.7487769923650083E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9982027358620672	WITHOUT_CLASSIFICATION	0.0017972641379328028	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999592856626907	WITHOUT_CLASSIFICATION	4.071433730928907E-5	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999948730974881	WITHOUT_CLASSIFICATION	5.126902511881858E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.99984206236921	WITHOUT_CLASSIFICATION	1.579376307900242E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.99984206236921	WITHOUT_CLASSIFICATION	1.579376307900242E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999708149468995	WITHOUT_CLASSIFICATION	2.918505310043725E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999670450548717	WITHOUT_CLASSIFICATION	3.295494512845566E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999784641026048	WITHOUT_CLASSIFICATION	2.1535897395124163E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999784641026048	WITHOUT_CLASSIFICATION	2.1535897395124163E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999976328457928	WITHOUT_CLASSIFICATION	2.3671542072470655E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999945935053776	WITHOUT_CLASSIFICATION	5.406494622402244E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999911958377556	WITHOUT_CLASSIFICATION	8.804162244433211E-6	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999983395546379	WITHOUT_CLASSIFICATION	1.660445362013549E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999972157723688	WITHOUT_CLASSIFICATION	2.784227631205309E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999713316408945	WITHOUT_CLASSIFICATION	2.8668359105433643E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999900769809141	WITHOUT_CLASSIFICATION	9.92301908591493E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999900769809141	WITHOUT_CLASSIFICATION	9.92301908591493E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999713316408945	WITHOUT_CLASSIFICATION	2.8668359105433643E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999893551713466	WITHOUT_CLASSIFICATION	1.0644828653441653E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999868282795852	WITHOUT_CLASSIFICATION	1.317172041481488E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999864265571113	WITHOUT_CLASSIFICATION	1.3573442888793455E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999864265571113	WITHOUT_CLASSIFICATION	1.3573442888793455E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.999990041837189	WITHOUT_CLASSIFICATION	9.958162811014904E-6	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999960020515013	WITHOUT_CLASSIFICATION	3.997948498743088E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999997314330983	WITHOUT_CLASSIFICATION	2.685669016931668E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999828889863368	WITHOUT_CLASSIFICATION	1.711101366318454E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999889934248343	WITHOUT_CLASSIFICATION	1.1006575165699001E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.999986531760234	WITHOUT_CLASSIFICATION	1.346823976595612E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999977157301881	WITHOUT_CLASSIFICATION	2.2842698117719017E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999950974756877	WITHOUT_CLASSIFICATION	4.9025243123251075E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999857344993159	WITHOUT_CLASSIFICATION	1.426550068410366E-5	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999745677412756	WITHOUT_CLASSIFICATION	2.5432258724309012E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999966610103896	WITHOUT_CLASSIFICATION	3.3389896103422364E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9994511059461089	WITHOUT_CLASSIFICATION	5.488940538911611E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999406385164569	WITHOUT_CLASSIFICATION	5.93614835431633E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999986643075227	WITHOUT_CLASSIFICATION	1.3356924772387645E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999918006020857	WITHOUT_CLASSIFICATION	8.19939791422722E-6	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999871702734513	WITHOUT_CLASSIFICATION	1.2829726548699795E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999952107646881	WITHOUT_CLASSIFICATION	4.789235311886246E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999707576920018	WITHOUT_CLASSIFICATION	2.924230799812647E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999849941591641	WITHOUT_CLASSIFICATION	1.5005840835794122E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999580060265285	WITHOUT_CLASSIFICATION	4.199397347148216E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999760735031624	WITHOUT_CLASSIFICATION	2.392649683754055E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999524795282471	WITHOUT_CLASSIFICATION	4.752047175302668E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9979870174425994	WITHOUT_CLASSIFICATION	0.0020129825574006603	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999473768135655	WITHOUT_CLASSIFICATION	5.2623186434535074E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999979339152499	WITHOUT_CLASSIFICATION	2.0660847500143093E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999830057298947	WITHOUT_CLASSIFICATION	1.6994270105326435E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999713834064482	WITHOUT_CLASSIFICATION	2.8616593551740434E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999986115115699	WITHOUT_CLASSIFICATION	1.3884884300325956E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999709617305794	WITHOUT_CLASSIFICATION	2.903826942050048E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999818362740927	WITHOUT_CLASSIFICATION	1.816372590728663E-5	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999976831204117	WITHOUT_CLASSIFICATION	2.3168795882998912E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999886565209783	WITHOUT_CLASSIFICATION	1.1343479021745824E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999864289374395	WITHOUT_CLASSIFICATION	1.3571062560505166E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999506701953528	WITHOUT_CLASSIFICATION	4.93298046471775E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999608097699494	WITHOUT_CLASSIFICATION	3.919023005057212E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999667360272841	WITHOUT_CLASSIFICATION	3.326397271581668E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999907150725845	WITHOUT_CLASSIFICATION	9.284927415384287E-6	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999941612458081	WITHOUT_CLASSIFICATION	5.838754191992154E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999986912787283	WITHOUT_CLASSIFICATION	1.3087212716327385E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999881289183048	WITHOUT_CLASSIFICATION	1.1871081695241272E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999873934436777	WITHOUT_CLASSIFICATION	1.2606556322444777E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999919215460785	WITHOUT_CLASSIFICATION	8.078453921524018E-6	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999868986278827	WITHOUT_CLASSIFICATION	1.3101372117295903E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999987121724244	WITHOUT_CLASSIFICATION	1.2878275756018431E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999666946744782	WITHOUT_CLASSIFICATION	3.330532552175285E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999600775913223	WITHOUT_CLASSIFICATION	3.992240867767355E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999914645277521	WITHOUT_CLASSIFICATION	8.535472247893382E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999702923462085	WITHOUT_CLASSIFICATION	2.9707653791607826E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999950747475805	WITHOUT_CLASSIFICATION	4.925252419455105E-6	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9988584594751997	WITHOUT_CLASSIFICATION	0.001141540524800263	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999979174623305	WITHOUT_CLASSIFICATION	2.0825376695655805E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999974788230674	WITHOUT_CLASSIFICATION	2.5211769326717326E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999828974107665	WITHOUT_CLASSIFICATION	1.710258923356552E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999965641732466	WITHOUT_CLASSIFICATION	3.4358267535236508E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999750575740365	WITHOUT_CLASSIFICATION	2.4942425963503466E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999949965426786	WITHOUT_CLASSIFICATION	5.003457321410253E-6	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999803193819633	WITHOUT_CLASSIFICATION	1.9680618036649356E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993924401746	WITHOUT_CLASSIFICATION	6.075598255471774E-7	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993924401746	WITHOUT_CLASSIFICATION	6.075598255471774E-7	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999856913598127	WITHOUT_CLASSIFICATION	1.430864018725403E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999862927649676	WITHOUT_CLASSIFICATION	1.3707235032209723E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999935307475293	WITHOUT_CLASSIFICATION	6.469252470778143E-6	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999980374755793	WITHOUT_CLASSIFICATION	1.9625244206892565E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999960269324031	WITHOUT_CLASSIFICATION	3.973067596897516E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.99933567576884	WITHOUT_CLASSIFICATION	6.643242311600836E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999759525964874	WITHOUT_CLASSIFICATION	2.404740351256079E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999993677460918	WITHOUT_CLASSIFICATION	6.322539081738696E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999811396659707	WITHOUT_CLASSIFICATION	1.886033402930771E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999950189763661	WITHOUT_CLASSIFICATION	4.981023633945591E-6	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999969292352054	WITHOUT_CLASSIFICATION	3.0707647945691836E-6	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999437704885658	WITHOUT_CLASSIFICATION	5.622951143428812E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999929334780074	WITHOUT_CLASSIFICATION	7.066521992669449E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998857655272516	WITHOUT_CLASSIFICATION	1.1423447274838379E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999762792408139	WITHOUT_CLASSIFICATION	2.3720759186062367E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999762792408139	WITHOUT_CLASSIFICATION	2.3720759186062367E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999818264746806	WITHOUT_CLASSIFICATION	1.8173525319468474E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999764470966588	WITHOUT_CLASSIFICATION	2.355290334121372E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999883688157901	WITHOUT_CLASSIFICATION	1.1631184209818927E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999992704580717	WITHOUT_CLASSIFICATION	7.295419281646411E-7	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999869253072002	WITHOUT_CLASSIFICATION	1.3074692799732295E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791395410413	WITHOUT_CLASSIFICATION	2.086045895864383E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999933911728974	WITHOUT_CLASSIFICATION	6.608827102570596E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999943034657085	WITHOUT_CLASSIFICATION	5.6965342915046576E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999295020951796	WITHOUT_CLASSIFICATION	7.049790482034904E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999988449379321	WITHOUT_CLASSIFICATION	1.1550620679650425E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998455615412043	WITHOUT_CLASSIFICATION	1.5443845879573043E-4	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999925710372917	WITHOUT_CLASSIFICATION	7.428962708372126E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999744610964035	WITHOUT_CLASSIFICATION	2.553890359645365E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999823039256575	WITHOUT_CLASSIFICATION	1.7696074342623164E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999872627492524	WITHOUT_CLASSIFICATION	1.2737250747679883E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999907605685502	WITHOUT_CLASSIFICATION	9.239431449838734E-6	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999967627483684	WITHOUT_CLASSIFICATION	3.2372516315940508E-6	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999707538016157	WITHOUT_CLASSIFICATION	2.9246198384335754E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999792429299087	WITHOUT_CLASSIFICATION	2.0757070091337144E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999754558400452	WITHOUT_CLASSIFICATION	2.4544159954764797E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999783671084669	WITHOUT_CLASSIFICATION	2.163289153315325E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999956907969892	WITHOUT_CLASSIFICATION	4.309203010774855E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999925235732845	WITHOUT_CLASSIFICATION	7.476426715532776E-6	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996766574263	WITHOUT_CLASSIFICATION	3.2334257368811855E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999920925497957	WITHOUT_CLASSIFICATION	7.907450204274999E-6	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999864201947768	WITHOUT_CLASSIFICATION	1.3579805223238502E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999901211629613	WITHOUT_CLASSIFICATION	9.878837038705224E-5	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999922743105362	WITHOUT_CLASSIFICATION	7.725689463877202E-6	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999997690166517	WITHOUT_CLASSIFICATION	2.309833483022027E-6	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999926097099405	WITHOUT_CLASSIFICATION	7.390290059460243E-6	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999802285162757	WITHOUT_CLASSIFICATION	1.9771483724427183E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999842967027441	WITHOUT_CLASSIFICATION	1.5703297255867767E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999346380321635	WITHOUT_CLASSIFICATION	6.536196783641793E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999991223238414	WITHOUT_CLASSIFICATION	8.776761585988897E-7	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999972602728526	WITHOUT_CLASSIFICATION	2.739727147399432E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999923649302174	WITHOUT_CLASSIFICATION	7.63506978258197E-6	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999549959702491	WITHOUT_CLASSIFICATION	4.5004029750931446E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999998431355242	WITHOUT_CLASSIFICATION	1.568644757938326E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999920553224371	WITHOUT_CLASSIFICATION	7.944677562910803E-6	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999511433672454	WITHOUT_CLASSIFICATION	4.8856632754569614E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9998798555339546	WITHOUT_CLASSIFICATION	1.2014446604530705E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999891398418429	WITHOUT_CLASSIFICATION	1.0860158157088057E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999871986017931	WITHOUT_CLASSIFICATION	1.2801398206892272E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999871986017931	WITHOUT_CLASSIFICATION	1.2801398206892272E-4	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999994043955675	WITHOUT_CLASSIFICATION	5.95604432493416E-6	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999986819603168	WITHOUT_CLASSIFICATION	1.3180396832027163E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9994075187679958	WITHOUT_CLASSIFICATION	5.924812320042148E-4	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999744547076931	WITHOUT_CLASSIFICATION	2.5545292306858135E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999946022217757	WITHOUT_CLASSIFICATION	5.397778224290466E-6	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999990465774664	WITHOUT_CLASSIFICATION	9.534225336537414E-7	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999836052865153	WITHOUT_CLASSIFICATION	1.639471348471162E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999199111122505	WITHOUT_CLASSIFICATION	8.008888774952311E-5	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999996711777239	WITHOUT_CLASSIFICATION	3.2882227606579027E-7	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723879185097	WITHOUT_CLASSIFICATION	2.7612081490320137E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723284330158	WITHOUT_CLASSIFICATION	2.7671566984348106E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999802778569781	WITHOUT_CLASSIFICATION	1.97221430219041E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9952414974473688	WITHOUT_CLASSIFICATION	0.004758502552631258	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999983127006554	WITHOUT_CLASSIFICATION	1.6872993445682298E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999903941659318	WITHOUT_CLASSIFICATION	9.605834068107536E-6	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9995809420355724	WITHOUT_CLASSIFICATION	4.190579644275607E-4	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999970170561808	WITHOUT_CLASSIFICATION	2.98294381911648E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999992589852796	WITHOUT_CLASSIFICATION	7.410147203540381E-7	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999904989965142	WITHOUT_CLASSIFICATION	9.501003485800418E-6	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999723369645209	WITHOUT_CLASSIFICATION	2.766303547909509E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999784510961858	WITHOUT_CLASSIFICATION	2.1548903814159956E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997823198659	WITHOUT_CLASSIFICATION	2.1768013401408395E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999985125066678	WITHOUT_CLASSIFICATION	1.4874933321861347E-5	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999958170835384	WITHOUT_CLASSIFICATION	4.1829164616000866E-5	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999828298355857	WITHOUT_CLASSIFICATION	1.71701644142546E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999563809892477	WITHOUT_CLASSIFICATION	4.361901075240889E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999973546838226	WITHOUT_CLASSIFICATION	2.645316177533322E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999962208391254	WITHOUT_CLASSIFICATION	3.77916087450974E-6	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9995249937107158	WITHOUT_CLASSIFICATION	4.7500628928425E-4	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999749890310374	WITHOUT_CLASSIFICATION	2.501096896263409E-5	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999941358069464	WITHOUT_CLASSIFICATION	5.864193053625427E-6	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999972687242153	WITHOUT_CLASSIFICATION	2.7312757846628675E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999984994559264	WITHOUT_CLASSIFICATION	1.5005440734762294E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999986354406568	WITHOUT_CLASSIFICATION	1.3645593432245025E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985893730853	WITHOUT_CLASSIFICATION	1.4106269147051228E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999895019522784	WITHOUT_CLASSIFICATION	1.049804772154117E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999990489733249	WITHOUT_CLASSIFICATION	9.510266750494367E-7	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999938693976188	WITHOUT_CLASSIFICATION	6.130602381106617E-6	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999786233679469	WITHOUT_CLASSIFICATION	2.1376632053163574E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997085949640999	WITHOUT_CLASSIFICATION	2.9140503590006315E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999951844188523	WITHOUT_CLASSIFICATION	4.815581147724651E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999924077309704	WITHOUT_CLASSIFICATION	7.592269029606794E-5	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999939390976906	WITHOUT_CLASSIFICATION	6.060902309288967E-6	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999992662866906	WITHOUT_CLASSIFICATION	7.337133094885945E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999708502664141	WITHOUT_CLASSIFICATION	2.9149733585858737E-5	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998574022736066	WITHOUT_CLASSIFICATION	1.425977263933534E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999679885235567	WITHOUT_CLASSIFICATION	3.2011476443309086E-4	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999498320114667	WITHOUT_CLASSIFICATION	5.016798853327764E-5	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997266953695	WITHOUT_CLASSIFICATION	2.733046305186549E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999929334780074	WITHOUT_CLASSIFICATION	7.066521992669449E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999981949349038	WITHOUT_CLASSIFICATION	1.8050650961350803E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998485379925	WITHOUT_CLASSIFICATION	1.514620074982485E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999972455932862	WITHOUT_CLASSIFICATION	2.7544067138081863E-6	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999364758978	WITHOUT_CLASSIFICATION	6.352410219429933E-7	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999936666656922	WITHOUT_CLASSIFICATION	6.333334307740752E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999963995665113	WITHOUT_CLASSIFICATION	3.600433488740503E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999704119618834	WITHOUT_CLASSIFICATION	2.9588038116640302E-5	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9993786383943658	WITHOUT_CLASSIFICATION	6.213616056342403E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999864774997815	WITHOUT_CLASSIFICATION	1.3522500218500504E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999950006367165	WITHOUT_CLASSIFICATION	4.9993632834831305E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999774086232807	WITHOUT_CLASSIFICATION	2.259137671930345E-5	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998925150695828	WITHOUT_CLASSIFICATION	1.074849304173272E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997425921310589	WITHOUT_CLASSIFICATION	2.5740786894107895E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999931071692206	WITHOUT_CLASSIFICATION	6.8928307792837775E-6	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999933080352967	WITHOUT_CLASSIFICATION	6.691964703299905E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998586317171505	WITHOUT_CLASSIFICATION	1.4136828284959095E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999698173766672	WITHOUT_CLASSIFICATION	3.0182623332827727E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999995187068219	WITHOUT_CLASSIFICATION	4.81293178097739E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999997438050385	WITHOUT_CLASSIFICATION	2.5619496154089593E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998586317171505	WITHOUT_CLASSIFICATION	1.4136828284959095E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999409263439859	WITHOUT_CLASSIFICATION	5.9073656014157854E-5	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999992276668018	WITHOUT_CLASSIFICATION	7.723331982223909E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999993031520751	WITHOUT_CLASSIFICATION	6.968479249949459E-7	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999905812254031	WITHOUT_CLASSIFICATION	9.418774596822648E-6	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999866206487718	WITHOUT_CLASSIFICATION	1.3379351228273542E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999241623108562	WITHOUT_CLASSIFICATION	7.583768914374923E-5	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999984121613722	WITHOUT_CLASSIFICATION	1.5878386277756712E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9990841493802531	WITHOUT_CLASSIFICATION	9.158506197469336E-4	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999080938409429	WITHOUT_CLASSIFICATION	9.190615905697791E-5	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9992168693805151	WITHOUT_CLASSIFICATION	7.831306194849133E-4	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999954128652379	WITHOUT_CLASSIFICATION	4.5871347620967807E-5	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9997216141445363	WITHOUT_CLASSIFICATION	2.783858554636753E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999947264040641	WITHOUT_CLASSIFICATION	5.273595936043281E-6	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999865767259748	WITHOUT_CLASSIFICATION	1.3423274025244256E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999986126548069	WITHOUT_CLASSIFICATION	1.3873451931485636E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999895369301406	WITHOUT_CLASSIFICATION	1.046306985936246E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999651771256488	WITHOUT_CLASSIFICATION	3.4822874351251895E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999976943101563	WITHOUT_CLASSIFICATION	2.305689843639492E-6	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999990948001715	WITHOUT_CLASSIFICATION	9.051998284170367E-7	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997318098644126	WITHOUT_CLASSIFICATION	2.6819013558747627E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999971202519254	WITHOUT_CLASSIFICATION	2.8797480745132946E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.999997341281874	WITHOUT_CLASSIFICATION	2.6587181259298483E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999951049627128	WITHOUT_CLASSIFICATION	4.8950372871323E-6	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999987209872357	WITHOUT_CLASSIFICATION	1.2790127642875394E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999864583505	WITHOUT_CLASSIFICATION	1.3541649504107434E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999995114751853	WITHOUT_CLASSIFICATION	4.885248147945746E-7	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999958778351768	WITHOUT_CLASSIFICATION	4.122164823198492E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995759698614713	WITHOUT_CLASSIFICATION	4.240301385285877E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998730363995127	WITHOUT_CLASSIFICATION	1.2696360048717201E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999959682565221	WITHOUT_CLASSIFICATION	4.031743477849036E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999555704016707	WITHOUT_CLASSIFICATION	4.442959832936978E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999983127304787	WITHOUT_CLASSIFICATION	1.6872695213086014E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999817487066033	WITHOUT_CLASSIFICATION	1.8251293396763836E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999955934346274	WITHOUT_CLASSIFICATION	4.40656537265211E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999994770884948	WITHOUT_CLASSIFICATION	5.229115052485877E-7	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999847427569452	WITHOUT_CLASSIFICATION	1.525724305472467E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997129009486	WITHOUT_CLASSIFICATION	2.870990513373799E-7	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999991580663435	WITHOUT_CLASSIFICATION	8.419336563832258E-7	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999965962795553	WITHOUT_CLASSIFICATION	3.4037204445666025E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999996503578967	WITHOUT_CLASSIFICATION	3.4964210318830655E-7	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999876634184307	WITHOUT_CLASSIFICATION	1.2336581569283437E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999943601529557	WITHOUT_CLASSIFICATION	5.639847044338709E-6	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999943601529557	WITHOUT_CLASSIFICATION	5.639847044338709E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9998679639766963	WITHOUT_CLASSIFICATION	1.3203602330379415E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999921068364682	WITHOUT_CLASSIFICATION	7.893163531710799E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999586446875596	WITHOUT_CLASSIFICATION	4.1355312440384254E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999996545389068	WITHOUT_CLASSIFICATION	3.4546109320975123E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999993485418432	WITHOUT_CLASSIFICATION	6.514581567983638E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.999993485418432	WITHOUT_CLASSIFICATION	6.514581567983638E-6	TEST
}	WITHOUT_CLASSIFICATION	0.9999932636976532	WITHOUT_CLASSIFICATION	6.7363023467977755E-6	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999892547976491	WITHOUT_CLASSIFICATION	1.0745202350840236E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999872658979877	WITHOUT_CLASSIFICATION	1.2734102012189374E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999973100534367	WITHOUT_CLASSIFICATION	2.689946563217867E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999890464609713	WITHOUT_CLASSIFICATION	1.095353902869956E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999923391016218	WITHOUT_CLASSIFICATION	7.660898378278029E-6	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999511957009599	WITHOUT_CLASSIFICATION	4.88042990400235E-5	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999900983626587	WITHOUT_CLASSIFICATION	9.901637341262939E-6	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999991011231006	WITHOUT_CLASSIFICATION	8.988768993930658E-7	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999911616619846	WITHOUT_CLASSIFICATION	8.838338015400478E-5	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9989451084458688	WITHOUT_CLASSIFICATION	0.0010548915541312377	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582572869966	WITHOUT_CLASSIFICATION	4.174271300339144E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582572869966	WITHOUT_CLASSIFICATION	4.174271300339144E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999895369301406	WITHOUT_CLASSIFICATION	1.046306985936246E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999917313412442	WITHOUT_CLASSIFICATION	8.26865875579192E-6	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999918888873017	WITHOUT_CLASSIFICATION	8.111112698300481E-6	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999828705246193	WITHOUT_CLASSIFICATION	1.712947538060994E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9995782122853291	WITHOUT_CLASSIFICATION	4.2178771467091687E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877244852619	WITHOUT_CLASSIFICATION	1.227551473809426E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999862630018962	WITHOUT_CLASSIFICATION	1.373699810370491E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999868033475098	WITHOUT_CLASSIFICATION	1.3196652490273141E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999941656522264	WITHOUT_CLASSIFICATION	5.834347773609695E-6	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999104261186159	WITHOUT_CLASSIFICATION	8.957388138414327E-5	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9992168693805151	WITHOUT_CLASSIFICATION	7.831306194849133E-4	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999639639322525	WITHOUT_CLASSIFICATION	3.603606774758469E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998894973830286	WITHOUT_CLASSIFICATION	1.1050261697141202E-4	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999784547198042	WITHOUT_CLASSIFICATION	2.1545280195878372E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999893799299954	WITHOUT_CLASSIFICATION	1.0620070004726757E-5	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999988187134627	WITHOUT_CLASSIFICATION	1.1812865373041397E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999713020381408	WITHOUT_CLASSIFICATION	2.8697961859300666E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999215862024138	WITHOUT_CLASSIFICATION	7.841379758620591E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999862365052669	WITHOUT_CLASSIFICATION	1.3763494733165022E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999958634090047	WITHOUT_CLASSIFICATION	4.1365909952999786E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999698584323019	WITHOUT_CLASSIFICATION	3.0141567698030137E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999698584323019	WITHOUT_CLASSIFICATION	3.0141567698030137E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999716435710437	WITHOUT_CLASSIFICATION	2.8356428956165355E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999879902903	WITHOUT_CLASSIFICATION	1.2009709719704569E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999930009792076	WITHOUT_CLASSIFICATION	6.999020792451015E-6	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999687252935731	WITHOUT_CLASSIFICATION	3.1274706426910376E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999906502673872	WITHOUT_CLASSIFICATION	9.349732612800718E-6	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999942769483369	WITHOUT_CLASSIFICATION	5.723051663068917E-6	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999967456601346	WITHOUT_CLASSIFICATION	3.2543398653777974E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999997446998692	WITHOUT_CLASSIFICATION	2.5530013077168737E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999555663887649	WITHOUT_CLASSIFICATION	4.443361123507151E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999926069143253	WITHOUT_CLASSIFICATION	7.393085674699775E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736779641417	WITHOUT_CLASSIFICATION	2.6322035858271244E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999448723938495	WITHOUT_CLASSIFICATION	5.5127606150543E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999964246496484	WITHOUT_CLASSIFICATION	3.575350351573425E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999997848055584	WITHOUT_CLASSIFICATION	2.151944416049578E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998424057794377	WITHOUT_CLASSIFICATION	1.575942205622506E-4	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972753304948	WITHOUT_CLASSIFICATION	2.7246695053400996E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999985572420093	WITHOUT_CLASSIFICATION	1.4427579906757934E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999582539192348	WITHOUT_CLASSIFICATION	4.174608076532021E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998546241720864	WITHOUT_CLASSIFICATION	1.4537582791364592E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999973900385238	WITHOUT_CLASSIFICATION	2.609961476283158E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999944734602592	WITHOUT_CLASSIFICATION	5.526539740838811E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999994038244457	WITHOUT_CLASSIFICATION	5.961755542267415E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999997314330983	WITHOUT_CLASSIFICATION	2.685669016931668E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999712991088793	WITHOUT_CLASSIFICATION	2.8700891120768582E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898510688192	WITHOUT_CLASSIFICATION	1.0148931180727141E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999898510688192	WITHOUT_CLASSIFICATION	1.0148931180727141E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999794844824489	WITHOUT_CLASSIFICATION	2.0515517551068797E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999157726773334	WITHOUT_CLASSIFICATION	8.422732266658116E-5	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999726887811715	WITHOUT_CLASSIFICATION	2.731121882843101E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999991796439058	WITHOUT_CLASSIFICATION	8.203560940785618E-7	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999912138726141	WITHOUT_CLASSIFICATION	8.786127385841686E-6	TEST
