test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997041396459637	WITHOUT_CLASSIFICATION	2.958603540362605E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999629793167433	WITHOUT_CLASSIFICATION	3.7020683256708937E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999900963209222	WITHOUT_CLASSIFICATION	9.903679077799238E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999903359380496	WITHOUT_CLASSIFICATION	9.664061950363736E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999903359380496	WITHOUT_CLASSIFICATION	9.664061950363736E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999953680455555	WITHOUT_CLASSIFICATION	4.631954444505219E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999091713245258	WITHOUT_CLASSIFICATION	9.082867547418203E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999798349699294	WITHOUT_CLASSIFICATION	2.0165030070576587E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999710021468307	WITHOUT_CLASSIFICATION	2.899785316941792E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999526437428892	WITHOUT_CLASSIFICATION	4.7356257110792684E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999526437428892	WITHOUT_CLASSIFICATION	4.7356257110792684E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999258881027121	WITHOUT_CLASSIFICATION	7.411189728785691E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999747863534947	WITHOUT_CLASSIFICATION	2.52136465052896E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999630417900021	WITHOUT_CLASSIFICATION	3.695820999788777E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999585989810982	WITHOUT_CLASSIFICATION	4.1401018901837485E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999976252911287	WITHOUT_CLASSIFICATION	2.3747088712658866E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.999939061686323	WITHOUT_CLASSIFICATION	6.0938313677107494E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999316121719016	WITHOUT_CLASSIFICATION	6.838782809831058E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999866888804122	WITHOUT_CLASSIFICATION	1.33111195877521E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999939035367932	WITHOUT_CLASSIFICATION	6.096463206786765E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999939035367932	WITHOUT_CLASSIFICATION	6.096463206786765E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.99992850220134	WITHOUT_CLASSIFICATION	7.14977986600622E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999243517493133	WITHOUT_CLASSIFICATION	7.564825068675067E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999098529830673	WITHOUT_CLASSIFICATION	9.014701693263709E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9991471904372282	WITHOUT_CLASSIFICATION	8.528095627717374E-4	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999981150037455	WITHOUT_CLASSIFICATION	1.8849962545953957E-6	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999193418999207	WITHOUT_CLASSIFICATION	8.065810007918253E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999678788982345	WITHOUT_CLASSIFICATION	3.212110176548625E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999973618561143	WITHOUT_CLASSIFICATION	2.6381438856415322E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999657331415991	WITHOUT_CLASSIFICATION	3.426685840079782E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999247887074125	WITHOUT_CLASSIFICATION	7.521129258743703E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996090832974469	WITHOUT_CLASSIFICATION	3.909167025531719E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999904988966449	WITHOUT_CLASSIFICATION	9.501103355126611E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999843213777714	WITHOUT_CLASSIFICATION	1.5678622228697404E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999638966810614	WITHOUT_CLASSIFICATION	3.610331893851082E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999092400232559	WITHOUT_CLASSIFICATION	9.075997674415529E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999734884174557	WITHOUT_CLASSIFICATION	2.6511582544243808E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999874103171087	WITHOUT_CLASSIFICATION	1.2589682891393216E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999396136153528	WITHOUT_CLASSIFICATION	6.03863846472291E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999396136153528	WITHOUT_CLASSIFICATION	6.03863846472291E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999734884174557	WITHOUT_CLASSIFICATION	2.6511582544243808E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9992791444504613	WITHOUT_CLASSIFICATION	7.208555495387545E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999115470225093	WITHOUT_CLASSIFICATION	8.845297749077003E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999615966589683	WITHOUT_CLASSIFICATION	3.84033410316251E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999998490923671	WITHOUT_CLASSIFICATION	1.509076329097302E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999970430551264	WITHOUT_CLASSIFICATION	2.956944873666544E-6	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9990725334146124	WITHOUT_CLASSIFICATION	9.27466585387612E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996839335111544	WITHOUT_CLASSIFICATION	3.160664888456314E-4	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999992486661723	WITHOUT_CLASSIFICATION	7.513338276960812E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9998515775711014	WITHOUT_CLASSIFICATION	1.4842242889859272E-4	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999809665324212	WITHOUT_CLASSIFICATION	1.9033467578823522E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999396136153528	WITHOUT_CLASSIFICATION	6.03863846472291E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999679566107241	WITHOUT_CLASSIFICATION	3.204338927583274E-5	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999297096959838	WITHOUT_CLASSIFICATION	7.029030401608811E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999055438855737	WITHOUT_CLASSIFICATION	9.44561144262103E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999975594110318	WITHOUT_CLASSIFICATION	2.440588968207367E-5	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999867068583916	WITHOUT_CLASSIFICATION	1.329314160834E-5	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999716413984696	WITHOUT_CLASSIFICATION	2.8358601530386173E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999627499261705	WITHOUT_CLASSIFICATION	3.725007382949882E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999986530703646	WITHOUT_CLASSIFICATION	1.346929635407547E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998072718376794	WITHOUT_CLASSIFICATION	1.9272816232067925E-4	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999936624601304	WITHOUT_CLASSIFICATION	6.337539869460771E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999942010388159	WITHOUT_CLASSIFICATION	5.798961184068717E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999982500776536	WITHOUT_CLASSIFICATION	1.7499223464024333E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999376368470898	WITHOUT_CLASSIFICATION	6.23631529102081E-5	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999771320019881	WITHOUT_CLASSIFICATION	2.286799801189802E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999946653208763	WITHOUT_CLASSIFICATION	5.334679123587975E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999941899113177	WITHOUT_CLASSIFICATION	5.810088682327519E-6	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999705846776126	WITHOUT_CLASSIFICATION	2.941532238747723E-5	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999699884455732	WITHOUT_CLASSIFICATION	3.0011554426755043E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999868036929608	WITHOUT_CLASSIFICATION	1.3196307039103576E-5	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999852124866297	WITHOUT_CLASSIFICATION	1.4787513370282546E-5	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999002349085635	WITHOUT_CLASSIFICATION	9.97650914365029E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999064632815174	WITHOUT_CLASSIFICATION	9.353671848245573E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999709079144008	WITHOUT_CLASSIFICATION	2.9092085599278027E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999824866016219	WITHOUT_CLASSIFICATION	1.7513398378084163E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999064632815174	WITHOUT_CLASSIFICATION	9.353671848245573E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999992404758523	WITHOUT_CLASSIFICATION	7.5952414775477E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998279316159394	WITHOUT_CLASSIFICATION	1.720683840606729E-4	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9998462925458603	WITHOUT_CLASSIFICATION	1.5370745413957357E-4	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999860379633623	WITHOUT_CLASSIFICATION	1.3962036637660045E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999046839203259	WITHOUT_CLASSIFICATION	9.531607967410108E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999046839203259	WITHOUT_CLASSIFICATION	9.531607967410108E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999960292558161	WITHOUT_CLASSIFICATION	3.9707441839021904E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999344663184954	WITHOUT_CLASSIFICATION	6.553368150463949E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999534855409581	WITHOUT_CLASSIFICATION	4.651445904185195E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999252195692412	WITHOUT_CLASSIFICATION	7.478043075885263E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999911995975777	WITHOUT_CLASSIFICATION	8.800402422340177E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999679710747529	WITHOUT_CLASSIFICATION	3.2028925247075265E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999692864838456	WITHOUT_CLASSIFICATION	3.07135161544826E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999929384969481	WITHOUT_CLASSIFICATION	7.061503051841453E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999762605661584	WITHOUT_CLASSIFICATION	2.3739433841515028E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999714917536956	WITHOUT_CLASSIFICATION	2.850824630440546E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999438022140955	WITHOUT_CLASSIFICATION	5.6197785904535085E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999438022140955	WITHOUT_CLASSIFICATION	5.6197785904535085E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999866136623692	WITHOUT_CLASSIFICATION	1.3386337630828637E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999925559996151	WITHOUT_CLASSIFICATION	7.4440003847624E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999955747300809	WITHOUT_CLASSIFICATION	4.4252699190861515E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999438022140955	WITHOUT_CLASSIFICATION	5.6197785904535085E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999866136623692	WITHOUT_CLASSIFICATION	1.3386337630828637E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999866136623692	WITHOUT_CLASSIFICATION	1.3386337630828637E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999561701335639	WITHOUT_CLASSIFICATION	4.382986643606952E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999965969903683	WITHOUT_CLASSIFICATION	3.403009631703819E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999746899890101	WITHOUT_CLASSIFICATION	2.5310010989903767E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999564404818286	WITHOUT_CLASSIFICATION	4.355951817147543E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999192209065523	WITHOUT_CLASSIFICATION	8.077909344771206E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999192209065523	WITHOUT_CLASSIFICATION	8.077909344771206E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999701366163902	WITHOUT_CLASSIFICATION	2.9863383609798246E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999312822154691	WITHOUT_CLASSIFICATION	6.871778453087387E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999679698810091	WITHOUT_CLASSIFICATION	3.2030118990901906E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999628237438299	WITHOUT_CLASSIFICATION	3.717625616995272E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999628237438299	WITHOUT_CLASSIFICATION	3.717625616995272E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999653465853241	WITHOUT_CLASSIFICATION	3.465341467582177E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999815328152192	WITHOUT_CLASSIFICATION	1.846718478080847E-4	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999083157119151	WITHOUT_CLASSIFICATION	9.168428808490985E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999931563895241	WITHOUT_CLASSIFICATION	6.843610475953701E-6	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9977599082122295	WITHOUT_CLASSIFICATION	0.0022400917877705142	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999928980437172	WITHOUT_CLASSIFICATION	7.101956282930682E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998869427710366	WITHOUT_CLASSIFICATION	1.1305722896346272E-4	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999500522008927	WITHOUT_CLASSIFICATION	4.994779910724103E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999083157119151	WITHOUT_CLASSIFICATION	9.168428808490985E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999704084667044	WITHOUT_CLASSIFICATION	2.9591533295652967E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999826838424437	WITHOUT_CLASSIFICATION	1.731615755628267E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999826838424437	WITHOUT_CLASSIFICATION	1.731615755628267E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999931309569177	WITHOUT_CLASSIFICATION	6.8690430824023025E-6	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998403492034983	WITHOUT_CLASSIFICATION	1.5965079650174325E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.99995628462661	WITHOUT_CLASSIFICATION	4.371537338998782E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999492511007121	WITHOUT_CLASSIFICATION	5.074889928791975E-5	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997917828332572	WITHOUT_CLASSIFICATION	2.0821716674278396E-4	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999496908451666	WITHOUT_CLASSIFICATION	5.030915483341883E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999704700199484	WITHOUT_CLASSIFICATION	2.952998005166276E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999914975678422	WITHOUT_CLASSIFICATION	8.502432157795009E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998653991970895	WITHOUT_CLASSIFICATION	1.3460080291045738E-4	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999905832275934	WITHOUT_CLASSIFICATION	9.41677240668781E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999905832275934	WITHOUT_CLASSIFICATION	9.41677240668781E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997041396459637	WITHOUT_CLASSIFICATION	2.958603540362605E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999909946564525	WITHOUT_CLASSIFICATION	9.005343547570853E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999410029208987	WITHOUT_CLASSIFICATION	5.899707910133801E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999599808177382	WITHOUT_CLASSIFICATION	4.0019182261846794E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999656317001977	WITHOUT_CLASSIFICATION	3.4368299802267166E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999601578360989	WITHOUT_CLASSIFICATION	3.984216390104741E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999463915940859	WITHOUT_CLASSIFICATION	5.360840591412232E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999084461020916	WITHOUT_CLASSIFICATION	9.155389790833465E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999800830725292	WITHOUT_CLASSIFICATION	1.99169274709318E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999601578360989	WITHOUT_CLASSIFICATION	3.984216390104741E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999711507644573	WITHOUT_CLASSIFICATION	2.8849235542714437E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999794840221041	WITHOUT_CLASSIFICATION	2.051597789586948E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999659165100951	WITHOUT_CLASSIFICATION	3.4083489904854584E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999797043064511	WITHOUT_CLASSIFICATION	2.0295693548833718E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999971714759498	WITHOUT_CLASSIFICATION	2.8285240501933033E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999903359380496	WITHOUT_CLASSIFICATION	9.664061950363736E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999765026556944	WITHOUT_CLASSIFICATION	2.349734430566898E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999432589160863	WITHOUT_CLASSIFICATION	5.674108391372745E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999829989151227	WITHOUT_CLASSIFICATION	1.7001084877292862E-5	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999798367641908	WITHOUT_CLASSIFICATION	2.016323580918154E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999488996271753	WITHOUT_CLASSIFICATION	5.1100372824703823E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999950198337991	WITHOUT_CLASSIFICATION	4.980166200900054E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999903798114268	WITHOUT_CLASSIFICATION	9.62018857329485E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.99997628275089	WITHOUT_CLASSIFICATION	2.371724911001913E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999821747341426	WITHOUT_CLASSIFICATION	1.7825265857420188E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999953680455555	WITHOUT_CLASSIFICATION	4.631954444505219E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999758745786531	WITHOUT_CLASSIFICATION	2.4125421346826102E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999431346024259	WITHOUT_CLASSIFICATION	5.686539757403049E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999958585677858	WITHOUT_CLASSIFICATION	4.141432214203337E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.9999395161169956	WITHOUT_CLASSIFICATION	6.048388300446315E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999499666159776	WITHOUT_CLASSIFICATION	5.003338402252311E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.9999390117919786	WITHOUT_CLASSIFICATION	6.0988208021406564E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9997598856184752	WITHOUT_CLASSIFICATION	2.4011438152475435E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997476634928985	WITHOUT_CLASSIFICATION	2.523365071015785E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997476634928985	WITHOUT_CLASSIFICATION	2.523365071015785E-4	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999418168173639	WITHOUT_CLASSIFICATION	5.818318263605862E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999926568819127	WITHOUT_CLASSIFICATION	7.343118087210022E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9996716030273433	WITHOUT_CLASSIFICATION	3.283969726567875E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999442554391943	WITHOUT_CLASSIFICATION	5.574456080573854E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999159840927887	WITHOUT_CLASSIFICATION	8.401590721130795E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999858180932023	WITHOUT_CLASSIFICATION	1.4181906797770946E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999811438485344	WITHOUT_CLASSIFICATION	1.885615146561574E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999091713245258	WITHOUT_CLASSIFICATION	9.082867547418203E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999863793896778	WITHOUT_CLASSIFICATION	1.3620610322245815E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999863793896778	WITHOUT_CLASSIFICATION	1.3620610322245815E-5	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999750760234671	WITHOUT_CLASSIFICATION	2.4923976532840917E-5	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999851379595232	WITHOUT_CLASSIFICATION	1.4862040476866907E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999750760234671	WITHOUT_CLASSIFICATION	2.4923976532840917E-5	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999435682090037	WITHOUT_CLASSIFICATION	5.643179099629633E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999427088632954	WITHOUT_CLASSIFICATION	5.7291136704541503E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999666590329731	WITHOUT_CLASSIFICATION	3.334096702696217E-5	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.9999260906743764	WITHOUT_CLASSIFICATION	7.390932562354347E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999880196370557	WITHOUT_CLASSIFICATION	1.1980362944232401E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999710021468307	WITHOUT_CLASSIFICATION	2.899785316941792E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999710021468307	WITHOUT_CLASSIFICATION	2.899785316941792E-5	TEST
not array	WITHOUT_CLASSIFICATION	0.9998834311662269	WITHOUT_CLASSIFICATION	1.1656883377313571E-4	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.999984488799749	WITHOUT_CLASSIFICATION	1.551120025098808E-5	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999408984778922	WITHOUT_CLASSIFICATION	5.910152210773367E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999403575390344	WITHOUT_CLASSIFICATION	5.964246096544836E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999399723497843	WITHOUT_CLASSIFICATION	6.00276502158189E-5	TEST
short	WITHOUT_CLASSIFICATION	0.9999395661849902	WITHOUT_CLASSIFICATION	6.043381500989689E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999526437428892	WITHOUT_CLASSIFICATION	4.7356257110792684E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999258881027121	WITHOUT_CLASSIFICATION	7.411189728785691E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999258881027121	WITHOUT_CLASSIFICATION	7.411189728785691E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999532944248665	WITHOUT_CLASSIFICATION	4.670557513366651E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999532944248665	WITHOUT_CLASSIFICATION	4.670557513366651E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999120261258351	WITHOUT_CLASSIFICATION	8.7973874164932E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999120261258351	WITHOUT_CLASSIFICATION	8.7973874164932E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999710021468307	WITHOUT_CLASSIFICATION	2.899785316941792E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999526437428892	WITHOUT_CLASSIFICATION	4.7356257110792684E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999258881027121	WITHOUT_CLASSIFICATION	7.411189728785691E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999532944248665	WITHOUT_CLASSIFICATION	4.670557513366651E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999532944248665	WITHOUT_CLASSIFICATION	4.670557513366651E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999120261258351	WITHOUT_CLASSIFICATION	8.7973874164932E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999696780161783	WITHOUT_CLASSIFICATION	3.0321983821684516E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999712857946113	WITHOUT_CLASSIFICATION	2.8714205388772867E-5	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999856410966894	WITHOUT_CLASSIFICATION	1.4358903310546525E-5	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996917459463464	WITHOUT_CLASSIFICATION	3.082540536535459E-4	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999890620572616	WITHOUT_CLASSIFICATION	1.0937942738513267E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999939030602757	WITHOUT_CLASSIFICATION	6.0969397243046615E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999989486373625	WITHOUT_CLASSIFICATION	1.051362637500198E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999592629180147	WITHOUT_CLASSIFICATION	4.073708198529852E-5	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999835980319091	WITHOUT_CLASSIFICATION	1.6401968090903866E-5	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999568289428693	WITHOUT_CLASSIFICATION	4.317105713061126E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999233327110585	WITHOUT_CLASSIFICATION	7.666728894150167E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999696347888699	WITHOUT_CLASSIFICATION	3.0365211130090192E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999960292558161	WITHOUT_CLASSIFICATION	3.9707441839021904E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999939030602757	WITHOUT_CLASSIFICATION	6.0969397243046615E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999939030602757	WITHOUT_CLASSIFICATION	6.0969397243046615E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.999939030602757	WITHOUT_CLASSIFICATION	6.0969397243046615E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999047889745154	WITHOUT_CLASSIFICATION	9.521102548456626E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999509782852428	WITHOUT_CLASSIFICATION	4.9021714757030984E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999509782852428	WITHOUT_CLASSIFICATION	4.9021714757030984E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999306081162356	WITHOUT_CLASSIFICATION	6.9391883764383E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999660709631892	WITHOUT_CLASSIFICATION	3.392903681074035E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999456938428727	WITHOUT_CLASSIFICATION	5.430615712730009E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999521770601655	WITHOUT_CLASSIFICATION	4.782293983456213E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999521770601655	WITHOUT_CLASSIFICATION	4.782293983456213E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999976252911287	WITHOUT_CLASSIFICATION	2.3747088712658866E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999918464073153	WITHOUT_CLASSIFICATION	8.153592684644074E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999918464073153	WITHOUT_CLASSIFICATION	8.153592684644074E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9996583880596219	WITHOUT_CLASSIFICATION	3.4161194037810776E-4	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999680167626233	WITHOUT_CLASSIFICATION	3.198323737670448E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999866888804122	WITHOUT_CLASSIFICATION	1.33111195877521E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9915513961440944	WITHOUT_CLASSIFICATION	0.008448603855905668	TEST
ID	WITHOUT_CLASSIFICATION	0.999939061686323	WITHOUT_CLASSIFICATION	6.0938313677107494E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999638255412835	WITHOUT_CLASSIFICATION	3.617445871656304E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999650181140858	WITHOUT_CLASSIFICATION	3.498188591427075E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9993858743940851	WITHOUT_CLASSIFICATION	6.141256059148493E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999737762610741	WITHOUT_CLASSIFICATION	2.622373892586422E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999098529830673	WITHOUT_CLASSIFICATION	9.014701693263709E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999985941645071	WITHOUT_CLASSIFICATION	1.405835492957898E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999390326702984	WITHOUT_CLASSIFICATION	6.096732970171377E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999866888804122	WITHOUT_CLASSIFICATION	1.33111195877521E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999476204900537	WITHOUT_CLASSIFICATION	5.237950994623748E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999611863724398	WITHOUT_CLASSIFICATION	3.881362756022289E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999390326854706	WITHOUT_CLASSIFICATION	6.0967314529502196E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999390326702984	WITHOUT_CLASSIFICATION	6.096732970171377E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999476204900537	WITHOUT_CLASSIFICATION	5.237950994623748E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999390326854706	WITHOUT_CLASSIFICATION	6.0967314529502196E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998645461166635	WITHOUT_CLASSIFICATION	1.354538833363885E-4	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998645461166635	WITHOUT_CLASSIFICATION	1.354538833363885E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999939035367932	WITHOUT_CLASSIFICATION	6.096463206786765E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.9999614872693563	WITHOUT_CLASSIFICATION	3.85127306436885E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999613667180622	WITHOUT_CLASSIFICATION	3.863328193776302E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998430979194747	WITHOUT_CLASSIFICATION	1.5690208052539616E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.999852726130237	WITHOUT_CLASSIFICATION	1.4727386976291247E-4	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9998412344281956	WITHOUT_CLASSIFICATION	1.5876557180438382E-4	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999657087028381	WITHOUT_CLASSIFICATION	3.429129716192864E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999330550147372	WITHOUT_CLASSIFICATION	6.694498526281273E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999436725163591	WITHOUT_CLASSIFICATION	5.6327483640901936E-5	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999657087028381	WITHOUT_CLASSIFICATION	3.429129716192864E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999584554571077	WITHOUT_CLASSIFICATION	4.15445428922545E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999390326702984	WITHOUT_CLASSIFICATION	6.096732970171377E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999224837318407	WITHOUT_CLASSIFICATION	7.751626815924978E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999846444037154	WITHOUT_CLASSIFICATION	1.5355596284664187E-5	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9991063617920961	WITHOUT_CLASSIFICATION	8.936382079038418E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999809703624184	WITHOUT_CLASSIFICATION	1.902963758161685E-5	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999812716356427	WITHOUT_CLASSIFICATION	1.872836435736925E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999975181171543	WITHOUT_CLASSIFICATION	2.481882845741895E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999037520802609	WITHOUT_CLASSIFICATION	9.624791973904114E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999795987863768	WITHOUT_CLASSIFICATION	2.0401213623156545E-5	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999599296262295	WITHOUT_CLASSIFICATION	4.00703737705221E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9998599549475871	WITHOUT_CLASSIFICATION	1.4004505241293642E-4	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999098529830673	WITHOUT_CLASSIFICATION	9.014701693263709E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999612028069769	WITHOUT_CLASSIFICATION	3.8797193023182685E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9980890554641755	WITHOUT_CLASSIFICATION	0.001910944535824492	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.9999867446385359	WITHOUT_CLASSIFICATION	1.325536146415592E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999853896640953	WITHOUT_CLASSIFICATION	1.4610335904700162E-5	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999854380457415	WITHOUT_CLASSIFICATION	1.4561954258461151E-5	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999312461901289	WITHOUT_CLASSIFICATION	6.87538098710942E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999909264975668	WITHOUT_CLASSIFICATION	9.073502433176389E-6	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999840327994058	WITHOUT_CLASSIFICATION	1.5967200594143927E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998106487983736	WITHOUT_CLASSIFICATION	1.8935120162646803E-4	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999601768764272	WITHOUT_CLASSIFICATION	3.98231235728014E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999925843295197	WITHOUT_CLASSIFICATION	7.415670480336256E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999925843295197	WITHOUT_CLASSIFICATION	7.415670480336256E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999621331730428	WITHOUT_CLASSIFICATION	3.78668269571664E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999735242100548	WITHOUT_CLASSIFICATION	2.647578994516766E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999917975438068	WITHOUT_CLASSIFICATION	8.20245619319068E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999622423752494	WITHOUT_CLASSIFICATION	3.775762475045429E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999621444324507	WITHOUT_CLASSIFICATION	3.785556754933364E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999647092190527	WITHOUT_CLASSIFICATION	3.529078094728817E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999677070331651	WITHOUT_CLASSIFICATION	3.22929668349868E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999797615557503	WITHOUT_CLASSIFICATION	2.023844424971007E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999417505447705	WITHOUT_CLASSIFICATION	5.82494552293766E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999920721842205	WITHOUT_CLASSIFICATION	7.927815779637604E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999341639229137	WITHOUT_CLASSIFICATION	6.583607708638278E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999967432452285	WITHOUT_CLASSIFICATION	3.2567547715088854E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999320602266727	WITHOUT_CLASSIFICATION	6.793977332735865E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999581784839319	WITHOUT_CLASSIFICATION	4.182151606806356E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999836028946327	WITHOUT_CLASSIFICATION	1.639710536735757E-5	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295663868154	WITHOUT_CLASSIFICATION	7.043361318456024E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999668423307104	WITHOUT_CLASSIFICATION	3.3157669289523964E-5	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999223540821259	WITHOUT_CLASSIFICATION	7.764591787400868E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999603564513867	WITHOUT_CLASSIFICATION	3.964354861327853E-5	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999832307658605	WITHOUT_CLASSIFICATION	1.6769234139491115E-5	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9990854641124951	WITHOUT_CLASSIFICATION	9.14535887504946E-4	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999836028946327	WITHOUT_CLASSIFICATION	1.639710536735757E-5	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999642185990906	WITHOUT_CLASSIFICATION	3.5781400909388764E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999301873593089	WITHOUT_CLASSIFICATION	6.981264069101623E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999301873593089	WITHOUT_CLASSIFICATION	6.981264069101623E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999871718560095	WITHOUT_CLASSIFICATION	1.2828143990542603E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9996125598672377	WITHOUT_CLASSIFICATION	3.874401327622605E-4	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999668423307104	WITHOUT_CLASSIFICATION	3.3157669289523964E-5	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999876355699978	WITHOUT_CLASSIFICATION	1.2364430002233602E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999536092941587	WITHOUT_CLASSIFICATION	4.639070584130627E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999535180230192	WITHOUT_CLASSIFICATION	4.648197698080414E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999441833509886	WITHOUT_CLASSIFICATION	5.5816649011421505E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999441833509886	WITHOUT_CLASSIFICATION	5.5816649011421505E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999247062407258	WITHOUT_CLASSIFICATION	7.529375927421102E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999598865880199	WITHOUT_CLASSIFICATION	4.011341198006677E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999598865880199	WITHOUT_CLASSIFICATION	4.011341198006677E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998106487983736	WITHOUT_CLASSIFICATION	1.8935120162646803E-4	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999777330650649	WITHOUT_CLASSIFICATION	2.2266934935209184E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995341553783273	WITHOUT_CLASSIFICATION	4.658446216726854E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999705235529234	WITHOUT_CLASSIFICATION	2.9476447076539527E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995341553783273	WITHOUT_CLASSIFICATION	4.658446216726854E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999705235529234	WITHOUT_CLASSIFICATION	2.9476447076539527E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998657665095879	WITHOUT_CLASSIFICATION	1.342334904121316E-4	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999925982809973	WITHOUT_CLASSIFICATION	7.401719002696487E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999971115135895	WITHOUT_CLASSIFICATION	2.888486410546104E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.9999941313022369	WITHOUT_CLASSIFICATION	5.868697763136234E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997593685031048	WITHOUT_CLASSIFICATION	2.406314968952396E-4	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9980273743997059	WITHOUT_CLASSIFICATION	0.001972625600294115	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998457601366159	WITHOUT_CLASSIFICATION	1.542398633842191E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998457601366159	WITHOUT_CLASSIFICATION	1.542398633842191E-4	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998475608478827	WITHOUT_CLASSIFICATION	1.5243915211718575E-4	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999297211373003	WITHOUT_CLASSIFICATION	7.027886269971019E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999657425597955	WITHOUT_CLASSIFICATION	3.425744020451712E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999811423965086	WITHOUT_CLASSIFICATION	1.885760349130883E-5	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999902941805683	WITHOUT_CLASSIFICATION	9.705819431596651E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999435999937645	WITHOUT_CLASSIFICATION	5.640000623550412E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999435999937645	WITHOUT_CLASSIFICATION	5.640000623550412E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999787493692586	WITHOUT_CLASSIFICATION	2.125063074145294E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999787493692586	WITHOUT_CLASSIFICATION	2.125063074145294E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999913497217866	WITHOUT_CLASSIFICATION	8.650278213295689E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998657665095879	WITHOUT_CLASSIFICATION	1.342334904121316E-4	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998965587255999	WITHOUT_CLASSIFICATION	1.0344127440009663E-4	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9995229217904124	WITHOUT_CLASSIFICATION	4.770782095876393E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999855289829012	WITHOUT_CLASSIFICATION	1.4471017098793758E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999255223881092	WITHOUT_CLASSIFICATION	7.447761189086308E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9934483440499989	WITHOUT_CLASSIFICATION	0.006551655950000958	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998657665095879	WITHOUT_CLASSIFICATION	1.342334904121316E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999255223881092	WITHOUT_CLASSIFICATION	7.447761189086308E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9934483440499989	WITHOUT_CLASSIFICATION	0.006551655950000958	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999358909957006	WITHOUT_CLASSIFICATION	6.410900429943598E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999610090996678	WITHOUT_CLASSIFICATION	3.899090033220811E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999917355369	WITHOUT_CLASSIFICATION	8.264463100072046E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998657665095879	WITHOUT_CLASSIFICATION	1.342334904121316E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998657665095879	WITHOUT_CLASSIFICATION	1.342334904121316E-4	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999681475704907	WITHOUT_CLASSIFICATION	3.185242950938284E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999790215601843	WITHOUT_CLASSIFICATION	2.0978439815695214E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999931164925844	WITHOUT_CLASSIFICATION	6.8835074156344045E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999843213777714	WITHOUT_CLASSIFICATION	1.5678622228697404E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999832155349231	WITHOUT_CLASSIFICATION	1.6784465076935033E-5	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999965177568907	WITHOUT_CLASSIFICATION	3.482243109325389E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999175690271204	WITHOUT_CLASSIFICATION	8.243097287953046E-5	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999731840964987	WITHOUT_CLASSIFICATION	2.6815903501296402E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999806207479267	WITHOUT_CLASSIFICATION	1.937925207325146E-5	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999383457138564	WITHOUT_CLASSIFICATION	6.165428614353407E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999981776480684	WITHOUT_CLASSIFICATION	1.8223519316029925E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999981902412918	WITHOUT_CLASSIFICATION	1.8097587082085657E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999966975166747	WITHOUT_CLASSIFICATION	3.302483325296201E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999210659475365	WITHOUT_CLASSIFICATION	7.8934052463548E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999585265642195	WITHOUT_CLASSIFICATION	4.1473435780597156E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999843213777714	WITHOUT_CLASSIFICATION	1.5678622228697404E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999673660022077	WITHOUT_CLASSIFICATION	3.2633997792339235E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.999929528047175	WITHOUT_CLASSIFICATION	7.047195282490206E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999540492761755	WITHOUT_CLASSIFICATION	4.595072382445931E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999736248871623	WITHOUT_CLASSIFICATION	2.637511283771673E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999843213777714	WITHOUT_CLASSIFICATION	1.5678622228697404E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999946129834823	WITHOUT_CLASSIFICATION	5.387016517699339E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9981471319783404	WITHOUT_CLASSIFICATION	0.0018528680216595966	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9976756430126164	WITHOUT_CLASSIFICATION	0.0023243569873836177	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999897841067863	WITHOUT_CLASSIFICATION	1.0215893213651907E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999939143867343	WITHOUT_CLASSIFICATION	6.085613265703112E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999947334456959	WITHOUT_CLASSIFICATION	5.266554304188088E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999900274405966	WITHOUT_CLASSIFICATION	9.972559403439361E-6	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999940433272091	WITHOUT_CLASSIFICATION	5.956672790958928E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9996984995562949	WITHOUT_CLASSIFICATION	3.015004437050999E-4	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999085070355324	WITHOUT_CLASSIFICATION	9.149296446761456E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999893159485604	WITHOUT_CLASSIFICATION	1.068405143950696E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999672168137489	WITHOUT_CLASSIFICATION	3.2783186251158086E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999985736396603	WITHOUT_CLASSIFICATION	1.426360339706273E-5	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836341087017	WITHOUT_CLASSIFICATION	1.636589129830918E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999600527836378	WITHOUT_CLASSIFICATION	3.9947216362228856E-5	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999876274681202	WITHOUT_CLASSIFICATION	1.2372531879826292E-5	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701975470227	WITHOUT_CLASSIFICATION	2.9802452977438484E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999575181771765	WITHOUT_CLASSIFICATION	4.248182282346496E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999614457531811	WITHOUT_CLASSIFICATION	3.855424681881096E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999983335852793	WITHOUT_CLASSIFICATION	1.6664147206928696E-5	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999453000595809	WITHOUT_CLASSIFICATION	5.469994041901813E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999453000595809	WITHOUT_CLASSIFICATION	5.469994041901813E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999316924875441	WITHOUT_CLASSIFICATION	6.83075124558852E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999908958755075	WITHOUT_CLASSIFICATION	9.104124492493629E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999715312278948	WITHOUT_CLASSIFICATION	2.8468772105165165E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999580224992978	WITHOUT_CLASSIFICATION	4.1977500702322785E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339084379577	WITHOUT_CLASSIFICATION	6.609156204230102E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999935450846682	WITHOUT_CLASSIFICATION	6.454915331797567E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301906741755	WITHOUT_CLASSIFICATION	6.980932582438944E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578511120168	WITHOUT_CLASSIFICATION	4.214888798313806E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999293981054339	WITHOUT_CLASSIFICATION	7.060189456619027E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999923684632072	WITHOUT_CLASSIFICATION	7.631536792798007E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999235884135809	WITHOUT_CLASSIFICATION	7.641158641910635E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999817830559267	WITHOUT_CLASSIFICATION	1.8216944073277646E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999995173825073	WITHOUT_CLASSIFICATION	4.8261749270388795E-6	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998723691239774	WITHOUT_CLASSIFICATION	1.276308760225972E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999614190287173	WITHOUT_CLASSIFICATION	3.858097128278987E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999682173807792	WITHOUT_CLASSIFICATION	3.1782619220864405E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999919467363739	WITHOUT_CLASSIFICATION	8.053263626085335E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999621327930536	WITHOUT_CLASSIFICATION	3.7867206946496115E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999559072008279	WITHOUT_CLASSIFICATION	4.4092799172119077E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999398104397902	WITHOUT_CLASSIFICATION	6.01895602097569E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999849058253166	WITHOUT_CLASSIFICATION	1.5094174683338095E-5	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999810321595107	WITHOUT_CLASSIFICATION	1.8967840489222918E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999988684806474	WITHOUT_CLASSIFICATION	1.1315193525940354E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999642044586041	WITHOUT_CLASSIFICATION	3.579554139592155E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301238266213	WITHOUT_CLASSIFICATION	6.987617337869631E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341957036587	WITHOUT_CLASSIFICATION	6.580429634119302E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854116107408	WITHOUT_CLASSIFICATION	1.458838925922008E-5	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301437058639	WITHOUT_CLASSIFICATION	6.985629413619961E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999027685900069	WITHOUT_CLASSIFICATION	9.723140999299884E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999355783344938	WITHOUT_CLASSIFICATION	6.442166550624585E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999867607822136	WITHOUT_CLASSIFICATION	1.3239217786373914E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999125458684709	WITHOUT_CLASSIFICATION	8.745413152904505E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999297863443793	WITHOUT_CLASSIFICATION	7.021365562062077E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999880908194438	WITHOUT_CLASSIFICATION	1.1909180556203686E-4	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999552347567107	WITHOUT_CLASSIFICATION	4.476524328934297E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999226605150883	WITHOUT_CLASSIFICATION	7.733948491166367E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999597490111777	WITHOUT_CLASSIFICATION	4.025098882230317E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996921591062042	WITHOUT_CLASSIFICATION	3.07840893795706E-4	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999753422803902	WITHOUT_CLASSIFICATION	2.4657719609825028E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999579526332667	WITHOUT_CLASSIFICATION	4.2047366733333506E-5	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999741217890792	WITHOUT_CLASSIFICATION	2.5878210920835202E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998723691239774	WITHOUT_CLASSIFICATION	1.276308760225972E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999706177946557	WITHOUT_CLASSIFICATION	2.9382205344337638E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999811312790206	WITHOUT_CLASSIFICATION	1.8868720979534388E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999683042759907	WITHOUT_CLASSIFICATION	3.169572400923993E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999817830559267	WITHOUT_CLASSIFICATION	1.8216944073277646E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.999966483670647	WITHOUT_CLASSIFICATION	3.3516329353056474E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999027685900069	WITHOUT_CLASSIFICATION	9.723140999299884E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999251436454468	WITHOUT_CLASSIFICATION	7.485635455310252E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998887799415133	WITHOUT_CLASSIFICATION	1.1122005848672825E-4	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997660413285522	WITHOUT_CLASSIFICATION	2.3395867144776944E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999090604079863	WITHOUT_CLASSIFICATION	9.093959201362075E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999090494250513	WITHOUT_CLASSIFICATION	9.09505749486371E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999630074922972	WITHOUT_CLASSIFICATION	3.6992507702884915E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999224642177303	WITHOUT_CLASSIFICATION	7.75357822697129E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999808442953848	WITHOUT_CLASSIFICATION	1.9155704615167617E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999800780516287	WITHOUT_CLASSIFICATION	1.992194837130711E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999688599168676	WITHOUT_CLASSIFICATION	3.1140083132390176E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999317310457142	WITHOUT_CLASSIFICATION	6.826895428574223E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999817830559267	WITHOUT_CLASSIFICATION	1.8216944073277646E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999811559076667	WITHOUT_CLASSIFICATION	1.884409233334407E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9997095972300353	WITHOUT_CLASSIFICATION	2.9040276996473996E-4	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999766115477899	WITHOUT_CLASSIFICATION	2.33884522100442E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999622437196519	WITHOUT_CLASSIFICATION	3.775628034812117E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999739808236642	WITHOUT_CLASSIFICATION	2.6019176335780697E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.99998229167529	WITHOUT_CLASSIFICATION	1.7708324710069136E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998929532527315	WITHOUT_CLASSIFICATION	1.0704674726840299E-4	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999714291657814	WITHOUT_CLASSIFICATION	2.8570834218604805E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999901900016173	WITHOUT_CLASSIFICATION	9.809998382795167E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999238466579702	WITHOUT_CLASSIFICATION	7.615334202985106E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.999955443833038	WITHOUT_CLASSIFICATION	4.45561669620352E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999737180912034	WITHOUT_CLASSIFICATION	2.6281908796592744E-5	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999737180912034	WITHOUT_CLASSIFICATION	2.6281908796592744E-5	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999817830559267	WITHOUT_CLASSIFICATION	1.8216944073277646E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998723691239774	WITHOUT_CLASSIFICATION	1.276308760225972E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9995499227335563	WITHOUT_CLASSIFICATION	4.5007726644370044E-4	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999891389511855	WITHOUT_CLASSIFICATION	1.0861048814536321E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9989806274758335	WITHOUT_CLASSIFICATION	0.0010193725241664645	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998723691239774	WITHOUT_CLASSIFICATION	1.276308760225972E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999622437196519	WITHOUT_CLASSIFICATION	3.775628034812117E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998725187878169	WITHOUT_CLASSIFICATION	1.2748121218304656E-4	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999766115477899	WITHOUT_CLASSIFICATION	2.33884522100442E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998970309818	WITHOUT_CLASSIFICATION	1.0296901819816978E-6	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993918146448234	WITHOUT_CLASSIFICATION	6.081853551766772E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999759477817242	WITHOUT_CLASSIFICATION	2.4052218275900775E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997660413285522	WITHOUT_CLASSIFICATION	2.3395867144776944E-4	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999090604079863	WITHOUT_CLASSIFICATION	9.093959201362075E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999090494250513	WITHOUT_CLASSIFICATION	9.09505749486371E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999222172910797	WITHOUT_CLASSIFICATION	7.778270892024375E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999346130568461	WITHOUT_CLASSIFICATION	6.538694315397256E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999940303025174	WITHOUT_CLASSIFICATION	5.96969748260218E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999766115477899	WITHOUT_CLASSIFICATION	2.33884522100442E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998970309818	WITHOUT_CLASSIFICATION	1.0296901819816978E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998723691239774	WITHOUT_CLASSIFICATION	1.276308760225972E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999630074922972	WITHOUT_CLASSIFICATION	3.6992507702884915E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999224642177303	WITHOUT_CLASSIFICATION	7.75357822697129E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999808442953848	WITHOUT_CLASSIFICATION	1.9155704615167617E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748426562051	WITHOUT_CLASSIFICATION	2.5157343794917197E-5	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818080007088	WITHOUT_CLASSIFICATION	1.819199929117653E-5	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999926154906472	WITHOUT_CLASSIFICATION	7.38450935280019E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999391843609647	WITHOUT_CLASSIFICATION	6.081563903534957E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999954275041863	WITHOUT_CLASSIFICATION	4.572495813707858E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999144543359196	WITHOUT_CLASSIFICATION	8.554566408033263E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996955553800886	WITHOUT_CLASSIFICATION	3.0444461991149823E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999394505761731	WITHOUT_CLASSIFICATION	6.054942382679547E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998222819047546	WITHOUT_CLASSIFICATION	1.77718095245355E-4	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999935450846682	WITHOUT_CLASSIFICATION	6.454915331797567E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998150918067403	WITHOUT_CLASSIFICATION	1.8490819325959158E-4	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999917058506717	WITHOUT_CLASSIFICATION	8.294149328301902E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999303744272073	WITHOUT_CLASSIFICATION	6.962557279259974E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999533079090811	WITHOUT_CLASSIFICATION	4.66920909188857E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301906741755	WITHOUT_CLASSIFICATION	6.980932582438944E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291765720705	WITHOUT_CLASSIFICATION	7.082342792950936E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999597490111777	WITHOUT_CLASSIFICATION	4.025098882230317E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9998586033203168	WITHOUT_CLASSIFICATION	1.4139667968308584E-4	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999615957398569	WITHOUT_CLASSIFICATION	3.840426014314338E-5	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999200267681204	WITHOUT_CLASSIFICATION	7.997323187958804E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9993036308506089	WITHOUT_CLASSIFICATION	6.963691493911193E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999709177131809	WITHOUT_CLASSIFICATION	2.9082286819078715E-5	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998645461166635	WITHOUT_CLASSIFICATION	1.354538833363885E-4	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999790755641589	WITHOUT_CLASSIFICATION	2.092443584110599E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999940433272091	WITHOUT_CLASSIFICATION	5.956672790958928E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999688278407504	WITHOUT_CLASSIFICATION	3.117215924962329E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999359318318557	WITHOUT_CLASSIFICATION	6.406816814426366E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999684382624706	WITHOUT_CLASSIFICATION	3.156173752929499E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999639399999819	WITHOUT_CLASSIFICATION	3.606000001808905E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999739296659842	WITHOUT_CLASSIFICATION	2.6070334015822094E-5	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999858521774919	WITHOUT_CLASSIFICATION	1.4147822508066285E-5	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668723760424	WITHOUT_CLASSIFICATION	3.312762395756729E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672022424265	WITHOUT_CLASSIFICATION	3.27977575735067E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999232049764153	WITHOUT_CLASSIFICATION	7.679502358467909E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998504574647656	WITHOUT_CLASSIFICATION	1.4954253523441778E-4	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999970655893951	WITHOUT_CLASSIFICATION	2.9344106049004606E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999794120335457	WITHOUT_CLASSIFICATION	2.058796645441322E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999794282910626	WITHOUT_CLASSIFICATION	2.057170893736184E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999646126475294	WITHOUT_CLASSIFICATION	3.538735247050824E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999969356851867	WITHOUT_CLASSIFICATION	3.064314813297573E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998332462497279	WITHOUT_CLASSIFICATION	1.667537502720888E-4	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998748398796723	WITHOUT_CLASSIFICATION	1.2516012032782697E-4	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999646126475294	WITHOUT_CLASSIFICATION	3.538735247050824E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999826694590077	WITHOUT_CLASSIFICATION	1.7330540992309644E-5	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999143657327909	WITHOUT_CLASSIFICATION	8.563426720899512E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999309742492626	WITHOUT_CLASSIFICATION	6.902575073746775E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999830837607412	WITHOUT_CLASSIFICATION	1.6916239258765407E-5	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999878084066982	WITHOUT_CLASSIFICATION	1.2191593301738804E-5	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999944972728703	WITHOUT_CLASSIFICATION	5.502727129689165E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999713075179061	WITHOUT_CLASSIFICATION	2.8692482093920996E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999872574601062	WITHOUT_CLASSIFICATION	1.2742539893906912E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999872574601062	WITHOUT_CLASSIFICATION	1.2742539893906912E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999909457835419	WITHOUT_CLASSIFICATION	9.054216458123517E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999943833429735	WITHOUT_CLASSIFICATION	5.616657026500658E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999905164632062	WITHOUT_CLASSIFICATION	9.483536793743841E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999699706225625	WITHOUT_CLASSIFICATION	3.002937743743288E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999973340309186	WITHOUT_CLASSIFICATION	2.6659690813058347E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999336985475726	WITHOUT_CLASSIFICATION	6.630145242740022E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999322694891382	WITHOUT_CLASSIFICATION	6.773051086194354E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999460338571623	WITHOUT_CLASSIFICATION	5.396614283767118E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998186358472139	WITHOUT_CLASSIFICATION	1.813641527861422E-4	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999953088426307	WITHOUT_CLASSIFICATION	4.691157369394343E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999299185040165	WITHOUT_CLASSIFICATION	7.008149598354701E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998412963927131	WITHOUT_CLASSIFICATION	1.5870360728696556E-4	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999661225920683	WITHOUT_CLASSIFICATION	3.387740793168518E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997546708933761	WITHOUT_CLASSIFICATION	2.4532910662384487E-4	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999903730862172	WITHOUT_CLASSIFICATION	9.626913782820194E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998212439432775	WITHOUT_CLASSIFICATION	1.7875605672256026E-4	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999824877679245	WITHOUT_CLASSIFICATION	1.751223207536489E-5	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999743927298507	WITHOUT_CLASSIFICATION	2.5607270149287493E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999965670331943	WITHOUT_CLASSIFICATION	3.4329668057096E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999156715952722	WITHOUT_CLASSIFICATION	8.43284047278256E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999847985099576	WITHOUT_CLASSIFICATION	1.5201490042383324E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999964879154616	WITHOUT_CLASSIFICATION	3.51208453841061E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999505441455561	WITHOUT_CLASSIFICATION	4.9455854443935087E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999860855335015	WITHOUT_CLASSIFICATION	1.391446649850304E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999763486833484	WITHOUT_CLASSIFICATION	2.3651316651610204E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999657403518041	WITHOUT_CLASSIFICATION	3.425964819594012E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999964458600551	WITHOUT_CLASSIFICATION	3.554139944863519E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999973913809469	WITHOUT_CLASSIFICATION	2.6086190530934848E-5	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9985928376490553	WITHOUT_CLASSIFICATION	0.0014071623509447947	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999598824188467	WITHOUT_CLASSIFICATION	4.011758115326359E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999048550997237	WITHOUT_CLASSIFICATION	9.51449002762778E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999897833223511	WITHOUT_CLASSIFICATION	1.021667764894549E-5	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999928441619371	WITHOUT_CLASSIFICATION	7.155838062915494E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999947401387367	WITHOUT_CLASSIFICATION	5.25986126330998E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999735567967624	WITHOUT_CLASSIFICATION	2.6443203237606544E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999600416353118	WITHOUT_CLASSIFICATION	3.9958364688169216E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9988315987384154	WITHOUT_CLASSIFICATION	0.0011684012615845961	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998354566402892	WITHOUT_CLASSIFICATION	1.6454335971084055E-4	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999671431632702	WITHOUT_CLASSIFICATION	3.2856836729885714E-5	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999547525198441	WITHOUT_CLASSIFICATION	4.524748015600025E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999955715709079	WITHOUT_CLASSIFICATION	4.428429092097319E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999317310457142	WITHOUT_CLASSIFICATION	6.826895428574223E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999317310457142	WITHOUT_CLASSIFICATION	6.826895428574223E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999194600458593	WITHOUT_CLASSIFICATION	8.053995414063215E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998946342085925	WITHOUT_CLASSIFICATION	1.0536579140752376E-4	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999745374531038	WITHOUT_CLASSIFICATION	2.5462546896247457E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999880890382706	WITHOUT_CLASSIFICATION	1.1910961729343767E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999282517434626	WITHOUT_CLASSIFICATION	7.174825653743914E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999396626441709	WITHOUT_CLASSIFICATION	6.033735582921184E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999502442607651	WITHOUT_CLASSIFICATION	4.975573923485981E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9991824054832394	WITHOUT_CLASSIFICATION	8.175945167606815E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999872083222743	WITHOUT_CLASSIFICATION	1.2791677725699918E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999720783738758	WITHOUT_CLASSIFICATION	2.7921626124239738E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179388663172	WITHOUT_CLASSIFICATION	8.206113368278061E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998948854075662	WITHOUT_CLASSIFICATION	1.051145924337409E-4	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999090227303975	WITHOUT_CLASSIFICATION	9.09772696023862E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999509418109086	WITHOUT_CLASSIFICATION	4.905818909138053E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999922765989377	WITHOUT_CLASSIFICATION	7.723401062291501E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999685326512199	WITHOUT_CLASSIFICATION	3.1467348780139836E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999646329024113	WITHOUT_CLASSIFICATION	3.536709758868888E-5	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999268880025	WITHOUT_CLASSIFICATION	7.311199740221066E-8	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999892418034299	WITHOUT_CLASSIFICATION	1.0758196570136234E-5	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999712793281053	WITHOUT_CLASSIFICATION	2.8720671894722462E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998275436065353	WITHOUT_CLASSIFICATION	1.724563934647426E-4	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999892418034299	WITHOUT_CLASSIFICATION	1.0758196570136234E-5	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999677179229728	WITHOUT_CLASSIFICATION	3.2282077027201146E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999819064426209	WITHOUT_CLASSIFICATION	1.80935573791939E-5	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997252602693337	WITHOUT_CLASSIFICATION	2.747397306662122E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995841418709908	WITHOUT_CLASSIFICATION	4.1585812900923723E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999600012793654	WITHOUT_CLASSIFICATION	3.999872063459239E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999859205636993	WITHOUT_CLASSIFICATION	1.407943630076998E-5	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999257486570822	WITHOUT_CLASSIFICATION	7.425134291773643E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999940283024109	WITHOUT_CLASSIFICATION	5.971697589052423E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999093027087496	WITHOUT_CLASSIFICATION	9.069729125046751E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999981421245331	WITHOUT_CLASSIFICATION	1.857875466907186E-5	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998571799339656	WITHOUT_CLASSIFICATION	1.4282006603438043E-4	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999852611148553	WITHOUT_CLASSIFICATION	1.4738885144599631E-5	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999920115640129	WITHOUT_CLASSIFICATION	7.988435987097927E-5	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999610597200724	WITHOUT_CLASSIFICATION	3.8940279927586167E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998874129435653	WITHOUT_CLASSIFICATION	1.125870564346421E-4	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999740348986168	WITHOUT_CLASSIFICATION	2.596510138314317E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998112813543484	WITHOUT_CLASSIFICATION	1.8871864565159912E-4	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.999281510192201	WITHOUT_CLASSIFICATION	7.184898077990451E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999572501652314	WITHOUT_CLASSIFICATION	4.274983476857787E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999984222086838	WITHOUT_CLASSIFICATION	1.5777913161209224E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999800234454629	WITHOUT_CLASSIFICATION	1.9976554537082045E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.99824315203363	WITHOUT_CLASSIFICATION	0.0017568479663700443	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999702886720182	WITHOUT_CLASSIFICATION	2.9711327981810446E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999939102021355	WITHOUT_CLASSIFICATION	6.089797864440007E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999698908924527	WITHOUT_CLASSIFICATION	3.0109107547356463E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999717667502149	WITHOUT_CLASSIFICATION	2.8233249784988292E-5	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999996096585543	WITHOUT_CLASSIFICATION	3.9034144570061E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999858521774919	WITHOUT_CLASSIFICATION	1.4147822508066285E-5	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999803900327885	WITHOUT_CLASSIFICATION	1.9609967211565354E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999896945814257	WITHOUT_CLASSIFICATION	1.0305418574155834E-5	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999612823824113	WITHOUT_CLASSIFICATION	3.871761758867344E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.9996106109086866	WITHOUT_CLASSIFICATION	3.893890913134551E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998529134858231	WITHOUT_CLASSIFICATION	1.4708651417700858E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.9998211817623568	WITHOUT_CLASSIFICATION	1.7881823764310208E-4	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9997984856823833	WITHOUT_CLASSIFICATION	2.0151431761683563E-4	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999876489951129	WITHOUT_CLASSIFICATION	1.2351004887139393E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999883509945796	WITHOUT_CLASSIFICATION	1.1649005420430922E-5	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999883532660846	WITHOUT_CLASSIFICATION	1.1646733915367371E-5	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999872985530325	WITHOUT_CLASSIFICATION	1.2701446967435814E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999676823020458	WITHOUT_CLASSIFICATION	3.23176979541186E-5	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9943668846716784	WITHOUT_CLASSIFICATION	0.005633115328321516	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999676511864023	WITHOUT_CLASSIFICATION	3.2348813597772896E-5	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999896441604113	WITHOUT_CLASSIFICATION	1.0355839588690716E-5	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999800609316983	WITHOUT_CLASSIFICATION	1.9939068301648815E-5	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999836993280293	WITHOUT_CLASSIFICATION	1.6300671970655297E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999854593969227	WITHOUT_CLASSIFICATION	1.454060307721453E-5	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999780610786966	WITHOUT_CLASSIFICATION	2.1938921303464605E-5	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999988838458356	WITHOUT_CLASSIFICATION	1.116154164412087E-5	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999853295691917	WITHOUT_CLASSIFICATION	1.4670430808264457E-5	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999939069958814	WITHOUT_CLASSIFICATION	6.0930041184927265E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999378937987558	WITHOUT_CLASSIFICATION	6.210620124428559E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9998394275667013	WITHOUT_CLASSIFICATION	1.60572433298689E-4	TEST
create one	WITHOUT_CLASSIFICATION	0.9999569470196021	WITHOUT_CLASSIFICATION	4.305298039784809E-5	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999665353494362	WITHOUT_CLASSIFICATION	3.3464650563723325E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999987725827022	WITHOUT_CLASSIFICATION	1.2274172978026449E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998230005526966	WITHOUT_CLASSIFICATION	1.7699944730343225E-4	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9989400525677659	WITHOUT_CLASSIFICATION	0.0010599474322340904	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021845587496	WITHOUT_CLASSIFICATION	9.781544125038471E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999860241632542	WITHOUT_CLASSIFICATION	1.3975836745807756E-4	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984795328169	WITHOUT_CLASSIFICATION	1.0152046718310011E-4	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999067958696406	WITHOUT_CLASSIFICATION	9.320413035939558E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999817844939883	WITHOUT_CLASSIFICATION	1.8215506011672285E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999335403010294	WITHOUT_CLASSIFICATION	6.645969897063275E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999898520602551	WITHOUT_CLASSIFICATION	1.0147939744896825E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999962585098079	WITHOUT_CLASSIFICATION	3.74149019209331E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021450088208	WITHOUT_CLASSIFICATION	9.785499117924368E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999962585098079	WITHOUT_CLASSIFICATION	3.74149019209331E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999391303115784	WITHOUT_CLASSIFICATION	6.0869688421486174E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999899717742986	WITHOUT_CLASSIFICATION	1.0028225701438384E-5	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999657062228047	WITHOUT_CLASSIFICATION	3.429377719529047E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999714527673375	WITHOUT_CLASSIFICATION	2.85472326626556E-5	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998868742825961	WITHOUT_CLASSIFICATION	1.1312571740388232E-4	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9982302420284546	WITHOUT_CLASSIFICATION	0.001769757971545361	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999993282254864	WITHOUT_CLASSIFICATION	6.717745136145823E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.9999930533332865	WITHOUT_CLASSIFICATION	6.9466667135687045E-6	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999922485908729	WITHOUT_CLASSIFICATION	7.751409127107675E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9992246089741764	WITHOUT_CLASSIFICATION	7.753910258236356E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999902017873932	WITHOUT_CLASSIFICATION	9.79821260683635E-6	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999430090558079	WITHOUT_CLASSIFICATION	5.699094419205202E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999850082632714	WITHOUT_CLASSIFICATION	1.499173672859643E-4	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9982958835462057	WITHOUT_CLASSIFICATION	0.0017041164537943349	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999420724876538	WITHOUT_CLASSIFICATION	5.7927512346109456E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999797965940607	WITHOUT_CLASSIFICATION	2.0203405939337584E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999363886044783	WITHOUT_CLASSIFICATION	6.361139552166952E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999363886044783	WITHOUT_CLASSIFICATION	6.361139552166952E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999696520628024	WITHOUT_CLASSIFICATION	3.0347937197643035E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998352740354207	WITHOUT_CLASSIFICATION	1.6472596457915053E-4	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999672026301033	WITHOUT_CLASSIFICATION	3.279736989666655E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999897099633527	WITHOUT_CLASSIFICATION	1.029003664726138E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999572341994442	WITHOUT_CLASSIFICATION	4.276580055581365E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999921745427983	WITHOUT_CLASSIFICATION	7.825457201653082E-6	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9995258385075327	WITHOUT_CLASSIFICATION	4.741614924672749E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999310346808468	WITHOUT_CLASSIFICATION	6.896531915317367E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999872409085808	WITHOUT_CLASSIFICATION	1.2759091419064926E-5	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999203944525962	WITHOUT_CLASSIFICATION	7.960554740386586E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999366268394377	WITHOUT_CLASSIFICATION	6.337316056231028E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999800004276072	WITHOUT_CLASSIFICATION	1.999957239288157E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999721181412264	WITHOUT_CLASSIFICATION	2.7881858773656777E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998047647169725	WITHOUT_CLASSIFICATION	1.9523528302744104E-4	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999719126664861	WITHOUT_CLASSIFICATION	2.8087333514006692E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999134659445053	WITHOUT_CLASSIFICATION	8.653405549483656E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999954456528477	WITHOUT_CLASSIFICATION	4.554347152227923E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998752028025437	WITHOUT_CLASSIFICATION	1.2479719745624057E-4	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999958719671564	WITHOUT_CLASSIFICATION	4.128032843517347E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999624820675098	WITHOUT_CLASSIFICATION	3.751793249018746E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999772785580511	WITHOUT_CLASSIFICATION	2.2721441948893275E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999854080258246	WITHOUT_CLASSIFICATION	1.4591974175405034E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999623284682707	WITHOUT_CLASSIFICATION	3.7671531729241555E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999749418142896	WITHOUT_CLASSIFICATION	2.5058185710372115E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999522098229086	WITHOUT_CLASSIFICATION	4.7790177091376524E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.9999966097560697	WITHOUT_CLASSIFICATION	3.390243930229007E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998488322685696	WITHOUT_CLASSIFICATION	1.5116773143047138E-4	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999136968366502	WITHOUT_CLASSIFICATION	8.630316334976663E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999449864132097	WITHOUT_CLASSIFICATION	5.501358679014053E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999924698470726	WITHOUT_CLASSIFICATION	7.530152927467055E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998631418319228	WITHOUT_CLASSIFICATION	1.3685816807724782E-4	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999566520243123	WITHOUT_CLASSIFICATION	4.334797568777398E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994758181222282	WITHOUT_CLASSIFICATION	5.241818777718927E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999790267867645	WITHOUT_CLASSIFICATION	2.0973213235507632E-4	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999776377604017	WITHOUT_CLASSIFICATION	2.2362239598326958E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999748036616626	WITHOUT_CLASSIFICATION	2.5196338337441814E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999713358256023	WITHOUT_CLASSIFICATION	2.866417439763431E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.999957103659463	WITHOUT_CLASSIFICATION	4.289634053705721E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999745640818652	WITHOUT_CLASSIFICATION	2.5435918134778786E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9993617090286089	WITHOUT_CLASSIFICATION	6.382909713910947E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999340250704034	WITHOUT_CLASSIFICATION	6.597492959651653E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999094385589533	WITHOUT_CLASSIFICATION	9.056144104678914E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9998428783573337	WITHOUT_CLASSIFICATION	1.57121642666307E-4	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999549832551237	WITHOUT_CLASSIFICATION	4.501674487645078E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999971188662115	WITHOUT_CLASSIFICATION	2.8811337884996426E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999785451254095	WITHOUT_CLASSIFICATION	2.1454874590454486E-5	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999661657850645	WITHOUT_CLASSIFICATION	3.383421493558645E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999957996505263	WITHOUT_CLASSIFICATION	4.200349473708496E-6	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999623385069595	WITHOUT_CLASSIFICATION	3.766149304055015E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998928732996246	WITHOUT_CLASSIFICATION	1.0712670037539813E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999094385589533	WITHOUT_CLASSIFICATION	9.056144104678914E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999552096434268	WITHOUT_CLASSIFICATION	4.479035657333268E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998603195243655	WITHOUT_CLASSIFICATION	1.3968047563446372E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999962997215895	WITHOUT_CLASSIFICATION	3.7002784105321457E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.9999780817014235	WITHOUT_CLASSIFICATION	2.1918298576393995E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998402509257966	WITHOUT_CLASSIFICATION	1.5974907420342118E-4	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999884010207013	WITHOUT_CLASSIFICATION	1.1598979298757883E-5	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9992898428069579	WITHOUT_CLASSIFICATION	7.101571930422259E-4	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998758615169487	WITHOUT_CLASSIFICATION	1.2413848305124566E-4	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999134670538455	WITHOUT_CLASSIFICATION	8.653294615446823E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999789591663627	WITHOUT_CLASSIFICATION	2.10408336372986E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999949810588836	WITHOUT_CLASSIFICATION	5.018941116321305E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9992344478445274	WITHOUT_CLASSIFICATION	7.655521554725971E-4	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999893902483333	WITHOUT_CLASSIFICATION	1.0609751666734025E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9993155438730406	WITHOUT_CLASSIFICATION	6.844561269594051E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999847138908439	WITHOUT_CLASSIFICATION	1.5286109156191805E-5	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999885765205122	WITHOUT_CLASSIFICATION	1.1423479487839575E-5	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999965292922215	WITHOUT_CLASSIFICATION	3.4707077784867955E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999938776594591	WITHOUT_CLASSIFICATION	6.122340540815323E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9990910255580608	WITHOUT_CLASSIFICATION	9.089744419392334E-4	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994082592449953	WITHOUT_CLASSIFICATION	5.917407550046133E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999980578021008	WITHOUT_CLASSIFICATION	1.942197899200279E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999833585152585	WITHOUT_CLASSIFICATION	1.6641484741531778E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999691802255221	WITHOUT_CLASSIFICATION	3.081977447787816E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999953573052318	WITHOUT_CLASSIFICATION	4.6426947681923604E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999813302115337	WITHOUT_CLASSIFICATION	1.866978846629086E-5	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999947538715468	WITHOUT_CLASSIFICATION	5.24612845322521E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999993482311423	WITHOUT_CLASSIFICATION	6.51768857689252E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9993828242806875	WITHOUT_CLASSIFICATION	6.171757193124404E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999661401316841	WITHOUT_CLASSIFICATION	3.3859868315940806E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998527822346285	WITHOUT_CLASSIFICATION	1.4721776537146317E-4	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999518203554866	WITHOUT_CLASSIFICATION	4.817964451357092E-5	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999161477296	WITHOUT_CLASSIFICATION	8.385227040300292E-7	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999964944865772	WITHOUT_CLASSIFICATION	3.505513422797289E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999862038607316	WITHOUT_CLASSIFICATION	1.3796139268399286E-4	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9991274978439354	WITHOUT_CLASSIFICATION	8.725021560646004E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9995819209914231	WITHOUT_CLASSIFICATION	4.1807900857703195E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999862038607316	WITHOUT_CLASSIFICATION	1.3796139268399286E-4	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999471549767298	WITHOUT_CLASSIFICATION	5.284502327027743E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.999964944865772	WITHOUT_CLASSIFICATION	3.505513422797289E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992795864081652	WITHOUT_CLASSIFICATION	7.204135918347271E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999862038607316	WITHOUT_CLASSIFICATION	1.3796139268399286E-4	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999950248192581	WITHOUT_CLASSIFICATION	4.975180741883324E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999981444882709	WITHOUT_CLASSIFICATION	1.855511729103408E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999366268394377	WITHOUT_CLASSIFICATION	6.337316056231028E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999873111693993	WITHOUT_CLASSIFICATION	1.2688830600703305E-4	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998645461166635	WITHOUT_CLASSIFICATION	1.354538833363885E-4	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999938909448582	WITHOUT_CLASSIFICATION	6.1090551417336E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999827665388442	WITHOUT_CLASSIFICATION	1.7233461155769786E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999404923654612	WITHOUT_CLASSIFICATION	5.950763453887149E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999840771835711	WITHOUT_CLASSIFICATION	1.5922816429000236E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999001839798525	WITHOUT_CLASSIFICATION	9.98160201475214E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999868500398779	WITHOUT_CLASSIFICATION	1.314996012209811E-4	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999669768084354	WITHOUT_CLASSIFICATION	3.3023191564709285E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999601671756732	WITHOUT_CLASSIFICATION	3.983282432678931E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999388900720361	WITHOUT_CLASSIFICATION	6.11099279639054E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999672191454673	WITHOUT_CLASSIFICATION	3.278085453264013E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.9999787703258303	WITHOUT_CLASSIFICATION	2.1229674169799863E-5	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999903107856041	WITHOUT_CLASSIFICATION	9.689214395871727E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998552393748688	WITHOUT_CLASSIFICATION	1.4476062513125686E-4	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999120337480109	WITHOUT_CLASSIFICATION	8.796625198920579E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999229085898224	WITHOUT_CLASSIFICATION	7.709141017761943E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999846762223371	WITHOUT_CLASSIFICATION	1.532377766288854E-5	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999736162247055	WITHOUT_CLASSIFICATION	2.6383775294498666E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999092208186937	WITHOUT_CLASSIFICATION	9.077918130624918E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999208177811216	WITHOUT_CLASSIFICATION	7.918221887832038E-5	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998904053020687	WITHOUT_CLASSIFICATION	1.0959469793138281E-4	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999637669232707	WITHOUT_CLASSIFICATION	3.623307672930997E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999670595670547	WITHOUT_CLASSIFICATION	3.2940432945382215E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999920986222306	WITHOUT_CLASSIFICATION	7.901377769401453E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999240780770333	WITHOUT_CLASSIFICATION	7.592192296673057E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999461342495892	WITHOUT_CLASSIFICATION	5.3865750410745234E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999870927679226	WITHOUT_CLASSIFICATION	1.2907232077315988E-5	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999656462579427	WITHOUT_CLASSIFICATION	3.435374205727159E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999998826950382	WITHOUT_CLASSIFICATION	1.1730496179035609E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999633765058697	WITHOUT_CLASSIFICATION	3.6623494130273304E-5	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999760857304392	WITHOUT_CLASSIFICATION	2.3914269560784188E-5	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999680735758837	WITHOUT_CLASSIFICATION	3.192642411633331E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999922461455221	WITHOUT_CLASSIFICATION	7.753854477957339E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999685951540985	WITHOUT_CLASSIFICATION	3.140484590149361E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999768489146179	WITHOUT_CLASSIFICATION	2.3151085382113115E-5	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999357767142414	WITHOUT_CLASSIFICATION	6.422328575868619E-5	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998897867340081	WITHOUT_CLASSIFICATION	1.1021326599198527E-4	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999928020292648	WITHOUT_CLASSIFICATION	7.197970735242365E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999674285600858	WITHOUT_CLASSIFICATION	3.257143991418662E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999809841503497	WITHOUT_CLASSIFICATION	1.9015849650254392E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9994860646213883	WITHOUT_CLASSIFICATION	5.139353786116301E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999439344991382	WITHOUT_CLASSIFICATION	5.606550086164593E-5	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999153925323406	WITHOUT_CLASSIFICATION	8.460746765943251E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999845436822048	WITHOUT_CLASSIFICATION	1.5456317795229665E-5	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998269946246762	WITHOUT_CLASSIFICATION	1.730053753237783E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998509384813951	WITHOUT_CLASSIFICATION	1.4906151860497833E-4	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999178729700493	WITHOUT_CLASSIFICATION	8.212702995071843E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9979909297761034	WITHOUT_CLASSIFICATION	0.0020090702238965375	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999964554797122	WITHOUT_CLASSIFICATION	3.544520287781591E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999126681900594	WITHOUT_CLASSIFICATION	8.733180994052972E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9986848497202137	WITHOUT_CLASSIFICATION	0.001315150279786361	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999086333969919	WITHOUT_CLASSIFICATION	9.136660300805938E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999920986222306	WITHOUT_CLASSIFICATION	7.901377769401453E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999097164520333	WITHOUT_CLASSIFICATION	9.028354796669355E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999963675926825	WITHOUT_CLASSIFICATION	3.6324073173736037E-6	TEST
switch	WITHOUT_CLASSIFICATION	0.9999390292071422	WITHOUT_CLASSIFICATION	6.09707928578983E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999118436058516	WITHOUT_CLASSIFICATION	8.81563941483267E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999841239275028	WITHOUT_CLASSIFICATION	1.587607249721725E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999377033156193	WITHOUT_CLASSIFICATION	6.229668438067887E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999926060296679	WITHOUT_CLASSIFICATION	7.393970332101625E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999615025469417	WITHOUT_CLASSIFICATION	3.8497453058195385E-5	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999930010359946	WITHOUT_CLASSIFICATION	6.99896400539313E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999585361007364	WITHOUT_CLASSIFICATION	4.1463899263577766E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999778480217386	WITHOUT_CLASSIFICATION	2.215197826129347E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999449864132097	WITHOUT_CLASSIFICATION	5.501358679014053E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998529445276678	WITHOUT_CLASSIFICATION	1.4705547233223498E-4	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998591196032759	WITHOUT_CLASSIFICATION	1.408803967241296E-4	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999391303115784	WITHOUT_CLASSIFICATION	6.0869688421486174E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999985746368901	WITHOUT_CLASSIFICATION	1.4253631098172587E-6	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999976483191535	WITHOUT_CLASSIFICATION	2.3516808465717426E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999658585912811	WITHOUT_CLASSIFICATION	3.414140871894226E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.9999514275461076	WITHOUT_CLASSIFICATION	4.857245389255198E-5	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999959729648145	WITHOUT_CLASSIFICATION	4.027035185506373E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999818606457472	WITHOUT_CLASSIFICATION	1.8139354252810517E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999818606457472	WITHOUT_CLASSIFICATION	1.8139354252810517E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998853118337837	WITHOUT_CLASSIFICATION	1.1468816621630401E-4	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999687814371598	WITHOUT_CLASSIFICATION	3.121856284015037E-5	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999736501769112	WITHOUT_CLASSIFICATION	2.634982308879824E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.99995849614296	WITHOUT_CLASSIFICATION	4.150385704011931E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999571073229626	WITHOUT_CLASSIFICATION	4.289267703732599E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999934316344309	WITHOUT_CLASSIFICATION	6.568365569131207E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999874948231441	WITHOUT_CLASSIFICATION	1.25051768559093E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994913732525982	WITHOUT_CLASSIFICATION	5.086267474018088E-4	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994913732525982	WITHOUT_CLASSIFICATION	5.086267474018088E-4	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997522841133519	WITHOUT_CLASSIFICATION	2.477158866481269E-4	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999854132844285	WITHOUT_CLASSIFICATION	1.4586715571490153E-5	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998860847275286	WITHOUT_CLASSIFICATION	1.139152724712902E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942876006717	WITHOUT_CLASSIFICATION	5.712399328440329E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942876006717	WITHOUT_CLASSIFICATION	5.712399328440329E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999942876006717	WITHOUT_CLASSIFICATION	5.712399328440329E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999351125367668	WITHOUT_CLASSIFICATION	6.488746323319053E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999647207079512	WITHOUT_CLASSIFICATION	3.527929204890771E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999764843219544	WITHOUT_CLASSIFICATION	2.3515678045610938E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999904351815293	WITHOUT_CLASSIFICATION	9.564818470690139E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999854909340842	WITHOUT_CLASSIFICATION	1.450906591586483E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999980149654019	WITHOUT_CLASSIFICATION	1.9850345981612365E-6	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999963592342344	WITHOUT_CLASSIFICATION	3.6407657655953146E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9985350128251025	WITHOUT_CLASSIFICATION	0.0014649871748975444	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999302639205976	WITHOUT_CLASSIFICATION	6.973607940241572E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999245866986581	WITHOUT_CLASSIFICATION	7.54133013418487E-5	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999260071808429	WITHOUT_CLASSIFICATION	7.39928191570044E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999938492627013	WITHOUT_CLASSIFICATION	6.150737298705367E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999798526247281	WITHOUT_CLASSIFICATION	2.014737527190341E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999978141430333	WITHOUT_CLASSIFICATION	2.1858569665532854E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999922013924525	WITHOUT_CLASSIFICATION	7.798607547508405E-6	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999933693272068	WITHOUT_CLASSIFICATION	6.630672793225801E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999821929768634	WITHOUT_CLASSIFICATION	1.7807023136575786E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999818606457472	WITHOUT_CLASSIFICATION	1.8139354252810517E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999739844307128	WITHOUT_CLASSIFICATION	2.6015569287201358E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999920330298021	WITHOUT_CLASSIFICATION	7.966970197901699E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999849462485499	WITHOUT_CLASSIFICATION	1.5053751450099136E-4	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999665043047542	WITHOUT_CLASSIFICATION	3.349569524582504E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999727566799577	WITHOUT_CLASSIFICATION	2.7243320042390145E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999966476428145	WITHOUT_CLASSIFICATION	3.3523571854848958E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999334339103667	WITHOUT_CLASSIFICATION	6.656608963328452E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999622979730423	WITHOUT_CLASSIFICATION	3.770202695766156E-5	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997902258323713	WITHOUT_CLASSIFICATION	2.097741676285842E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999822048370183	WITHOUT_CLASSIFICATION	1.7795162981701755E-5	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999484732467686	WITHOUT_CLASSIFICATION	5.152675323150309E-5	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999844683606188	WITHOUT_CLASSIFICATION	1.5531639381097042E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999575026617488	WITHOUT_CLASSIFICATION	4.249733825113423E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999476733031554	WITHOUT_CLASSIFICATION	5.232669684461464E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999873014115058	WITHOUT_CLASSIFICATION	1.2698588494114177E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999959281285231	WITHOUT_CLASSIFICATION	4.071871476861451E-6	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999981746161459	WITHOUT_CLASSIFICATION	1.8253838541024475E-5	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999965867684496	WITHOUT_CLASSIFICATION	3.413231550381524E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999657299054224	WITHOUT_CLASSIFICATION	3.427009457764184E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999657299054224	WITHOUT_CLASSIFICATION	3.427009457764184E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999864318618873	WITHOUT_CLASSIFICATION	1.3568138112580147E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999882081344955	WITHOUT_CLASSIFICATION	1.179186550457615E-5	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999864209487072	WITHOUT_CLASSIFICATION	1.357905129285293E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999628766070536	WITHOUT_CLASSIFICATION	3.7123392946251984E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999804597352419	WITHOUT_CLASSIFICATION	1.9540264758217096E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999731006359299	WITHOUT_CLASSIFICATION	2.6899364070052403E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999261140862901	WITHOUT_CLASSIFICATION	7.388591370991227E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999203421650824	WITHOUT_CLASSIFICATION	7.965783491760485E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999741411790144	WITHOUT_CLASSIFICATION	2.5858820985650667E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999357750873202	WITHOUT_CLASSIFICATION	6.422491267981817E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999463571088657	WITHOUT_CLASSIFICATION	5.3642891134156605E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999449864132097	WITHOUT_CLASSIFICATION	5.501358679014053E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999991172444886	WITHOUT_CLASSIFICATION	8.827555113537481E-7	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999914614694905	WITHOUT_CLASSIFICATION	8.538530509566514E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999978772561186	WITHOUT_CLASSIFICATION	2.122743881381653E-6	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998839488359657	WITHOUT_CLASSIFICATION	1.1605116403433535E-4	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984333255535	WITHOUT_CLASSIFICATION	1.5666744465417818E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984333255535	WITHOUT_CLASSIFICATION	1.5666744465417818E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998746140955435	WITHOUT_CLASSIFICATION	1.2538590445657912E-4	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999994284261571	WITHOUT_CLASSIFICATION	5.715738428744626E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998853322182351	WITHOUT_CLASSIFICATION	1.1466778176489681E-4	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.999952274054556	WITHOUT_CLASSIFICATION	4.7725945444103724E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998703179679189	WITHOUT_CLASSIFICATION	1.296820320811466E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9995065248181625	WITHOUT_CLASSIFICATION	4.934751818374711E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998946453530448	WITHOUT_CLASSIFICATION	1.05354646955162E-4	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999942287201886	WITHOUT_CLASSIFICATION	5.771279811341942E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998482669006441	WITHOUT_CLASSIFICATION	1.5173309935592364E-4	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9995355265547833	WITHOUT_CLASSIFICATION	4.644734452166592E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998638579692561	WITHOUT_CLASSIFICATION	1.3614203074386618E-4	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999942287201886	WITHOUT_CLASSIFICATION	5.771279811341942E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999958392803571	WITHOUT_CLASSIFICATION	4.1607196429029424E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999968501130727	WITHOUT_CLASSIFICATION	3.1498869272984536E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999653798665021	WITHOUT_CLASSIFICATION	3.462013349779058E-5	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999825925328961	WITHOUT_CLASSIFICATION	1.7407467103887014E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999963532935434	WITHOUT_CLASSIFICATION	3.64670645655478E-6	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999699068037599	WITHOUT_CLASSIFICATION	3.009319624012668E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999833934471739	WITHOUT_CLASSIFICATION	1.6606552826098635E-4	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999701541295286	WITHOUT_CLASSIFICATION	2.984587047144028E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999953112219686	WITHOUT_CLASSIFICATION	4.688778031439429E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998989659781046	WITHOUT_CLASSIFICATION	1.0103402189551785E-4	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999278420240022	WITHOUT_CLASSIFICATION	7.21579759977694E-5	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999865759312373	WITHOUT_CLASSIFICATION	1.342406876275961E-5	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999864202061586	WITHOUT_CLASSIFICATION	1.3579793841396364E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999820041929781	WITHOUT_CLASSIFICATION	1.7995807021895582E-5	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999920116848326	WITHOUT_CLASSIFICATION	7.98831516740372E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999584453456185	WITHOUT_CLASSIFICATION	4.155465438152413E-5	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9955245459064801	WITHOUT_CLASSIFICATION	0.004475454093519876	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999348971105516	WITHOUT_CLASSIFICATION	6.510288944833045E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999348971105516	WITHOUT_CLASSIFICATION	6.510288944833045E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999833934471739	WITHOUT_CLASSIFICATION	1.6606552826098635E-4	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999075748866042	WITHOUT_CLASSIFICATION	9.242511339581479E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999916344203713	WITHOUT_CLASSIFICATION	8.36557962867217E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999460923104824	WITHOUT_CLASSIFICATION	5.390768951758647E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999390181134337	WITHOUT_CLASSIFICATION	6.098188656644041E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999783890723829	WITHOUT_CLASSIFICATION	2.1610927617197154E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999826838424437	WITHOUT_CLASSIFICATION	1.731615755628267E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999786845792475	WITHOUT_CLASSIFICATION	2.1315420752425995E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999252359056847	WITHOUT_CLASSIFICATION	7.476409431526456E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999955518861539	WITHOUT_CLASSIFICATION	4.4481138461949915E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998746821471014	WITHOUT_CLASSIFICATION	1.2531785289857922E-4	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999968498590854	WITHOUT_CLASSIFICATION	3.1501409145371427E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999725972582607	WITHOUT_CLASSIFICATION	2.740274173936225E-5	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999692497009037	WITHOUT_CLASSIFICATION	3.0750299096228716E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999059148888598	WITHOUT_CLASSIFICATION	9.408511114023489E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999639701701171	WITHOUT_CLASSIFICATION	3.6029829882942575E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999792119479873	WITHOUT_CLASSIFICATION	2.078805201268663E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999969111134441	WITHOUT_CLASSIFICATION	3.088886555818149E-6	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999932219474424	WITHOUT_CLASSIFICATION	6.778052557489688E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998961999679147	WITHOUT_CLASSIFICATION	1.0380003208531002E-4	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999987642608559	WITHOUT_CLASSIFICATION	1.2357391441015564E-5	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999709683693589	WITHOUT_CLASSIFICATION	2.903163064109798E-4	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999148828275012	WITHOUT_CLASSIFICATION	8.511717249875479E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998937038637742	WITHOUT_CLASSIFICATION	1.06296136225811E-4	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999972546465687	WITHOUT_CLASSIFICATION	2.7453534312991302E-5	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999845304471804	WITHOUT_CLASSIFICATION	1.5469552819622792E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999295504154935	WITHOUT_CLASSIFICATION	7.044958450652877E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9991733734995001	WITHOUT_CLASSIFICATION	8.266265005000258E-4	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.99987707271682	WITHOUT_CLASSIFICATION	1.2292728318005438E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999747677215954	WITHOUT_CLASSIFICATION	2.5232278404532706E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999685281335985	WITHOUT_CLASSIFICATION	3.147186640151846E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999639701701171	WITHOUT_CLASSIFICATION	3.6029829882942575E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999626874126933	WITHOUT_CLASSIFICATION	3.731258730669101E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999755617310198	WITHOUT_CLASSIFICATION	2.4438268980182226E-5	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999878307612631	WITHOUT_CLASSIFICATION	1.2169238736888478E-5	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999871813574138	WITHOUT_CLASSIFICATION	1.2818642586292756E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998278248231548	WITHOUT_CLASSIFICATION	1.7217517684521571E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999925083558175	WITHOUT_CLASSIFICATION	7.491644182470527E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999832695795111	WITHOUT_CLASSIFICATION	1.6730420488833732E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998864609559399	WITHOUT_CLASSIFICATION	1.1353904406010178E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999735721257035	WITHOUT_CLASSIFICATION	2.642787429649063E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999747162877562	WITHOUT_CLASSIFICATION	2.528371224365997E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999659544761261	WITHOUT_CLASSIFICATION	3.404552387387896E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999695708480326	WITHOUT_CLASSIFICATION	3.0429151967405537E-5	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999705705522206	WITHOUT_CLASSIFICATION	2.942944777941393E-5	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998298937135052	WITHOUT_CLASSIFICATION	1.701062864949349E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999872696066172	WITHOUT_CLASSIFICATION	1.273039338279727E-4	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999994544731911	WITHOUT_CLASSIFICATION	5.455268089012414E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997618750448599	WITHOUT_CLASSIFICATION	2.3812495514013318E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999966294660555	WITHOUT_CLASSIFICATION	3.370533944486838E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999485505715895	WITHOUT_CLASSIFICATION	5.1449428410502625E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998937747325208	WITHOUT_CLASSIFICATION	1.0622526747914256E-4	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998482669006441	WITHOUT_CLASSIFICATION	1.5173309935592364E-4	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999756055534256	WITHOUT_CLASSIFICATION	2.439444657439367E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999639701701171	WITHOUT_CLASSIFICATION	3.6029829882942575E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999735347177812	WITHOUT_CLASSIFICATION	2.646528221883829E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999141849307983	WITHOUT_CLASSIFICATION	8.581506920163823E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999808235943409	WITHOUT_CLASSIFICATION	1.9176405659176647E-5	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999808235943409	WITHOUT_CLASSIFICATION	1.9176405659176647E-5	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998996311371651	WITHOUT_CLASSIFICATION	1.003688628349175E-4	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999949528483931	WITHOUT_CLASSIFICATION	5.047151606848623E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999147461923295	WITHOUT_CLASSIFICATION	8.525380767052432E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9998851845283931	WITHOUT_CLASSIFICATION	1.1481547160680834E-4	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999244926112938	WITHOUT_CLASSIFICATION	7.550738870622058E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999996025386628	WITHOUT_CLASSIFICATION	3.974613372047882E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9994097139863581	WITHOUT_CLASSIFICATION	5.902860136418941E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999969853056782	WITHOUT_CLASSIFICATION	3.014694321949316E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999803657450174	WITHOUT_CLASSIFICATION	1.9634254982635848E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999803657450174	WITHOUT_CLASSIFICATION	1.9634254982635848E-5	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999370822627671	WITHOUT_CLASSIFICATION	6.291773723286882E-5	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9986583689651706	WITHOUT_CLASSIFICATION	0.0013416310348294404	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999720351626594	WITHOUT_CLASSIFICATION	2.796483734054765E-5	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9995062951023095	WITHOUT_CLASSIFICATION	4.93704897690545E-4	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999842546104276	WITHOUT_CLASSIFICATION	1.574538957241001E-5	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999935533813259	WITHOUT_CLASSIFICATION	6.446618674124538E-6	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999940796243064	WITHOUT_CLASSIFICATION	5.920375693621113E-6	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999521199447913	WITHOUT_CLASSIFICATION	4.7880055208769945E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.99997140627634	WITHOUT_CLASSIFICATION	2.8593723660042367E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999796830330779	WITHOUT_CLASSIFICATION	2.0316966922037297E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999796830330779	WITHOUT_CLASSIFICATION	2.0316966922037297E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999511839717423	WITHOUT_CLASSIFICATION	4.8816028257669406E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997968255878	WITHOUT_CLASSIFICATION	2.031744122632642E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999918859989411	WITHOUT_CLASSIFICATION	8.11400105890127E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999849554832206	WITHOUT_CLASSIFICATION	1.5044516779419137E-5	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999180547161051	WITHOUT_CLASSIFICATION	8.194528389498707E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9988900476872675	WITHOUT_CLASSIFICATION	0.0011099523127324864	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999959877169784	WITHOUT_CLASSIFICATION	4.012283021579927E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999844807613507	WITHOUT_CLASSIFICATION	1.5519238649325408E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999496577818441	WITHOUT_CLASSIFICATION	5.034221815587912E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999808414555853	WITHOUT_CLASSIFICATION	1.9158544414658217E-5	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999832113327717	WITHOUT_CLASSIFICATION	1.6788667228278456E-5	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999104417393317	WITHOUT_CLASSIFICATION	8.955826066834489E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998754464368466	WITHOUT_CLASSIFICATION	1.2455356315345782E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091897896997	WITHOUT_CLASSIFICATION	9.081021030033873E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999085070355324	WITHOUT_CLASSIFICATION	9.149296446761456E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999971459429753	WITHOUT_CLASSIFICATION	2.854057024694067E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999653465853241	WITHOUT_CLASSIFICATION	3.465341467582177E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999817830559267	WITHOUT_CLASSIFICATION	1.8216944073277646E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999840883692891	WITHOUT_CLASSIFICATION	1.5911630710922366E-5	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999929528047175	WITHOUT_CLASSIFICATION	7.047195282490206E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999930138287632	WITHOUT_CLASSIFICATION	6.986171236759479E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999983986449699	WITHOUT_CLASSIFICATION	1.6013550301614057E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999891521712271	WITHOUT_CLASSIFICATION	1.084782877282803E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999707622851747	WITHOUT_CLASSIFICATION	2.923771482530354E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999972752270247	WITHOUT_CLASSIFICATION	2.724772975310677E-5	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999318440175705	WITHOUT_CLASSIFICATION	6.815598242949301E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999746178610109	WITHOUT_CLASSIFICATION	2.5382138989043282E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999402830047637	WITHOUT_CLASSIFICATION	5.9716995236333215E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999892374233377	WITHOUT_CLASSIFICATION	1.076257666226649E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999621100328134	WITHOUT_CLASSIFICATION	3.788996718656335E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999314675534925	WITHOUT_CLASSIFICATION	6.853244650743836E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999303744272073	WITHOUT_CLASSIFICATION	6.962557279259974E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9915513961440944	WITHOUT_CLASSIFICATION	0.008448603855905668	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999948437103909	WITHOUT_CLASSIFICATION	5.156289609018856E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999406796773953	WITHOUT_CLASSIFICATION	5.9320322604609525E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999969939249954	WITHOUT_CLASSIFICATION	3.006075004592186E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999305716182798	WITHOUT_CLASSIFICATION	6.942838172017154E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999945296842192	WITHOUT_CLASSIFICATION	5.470315780801296E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999342714242013	WITHOUT_CLASSIFICATION	6.572857579872553E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999776045985256	WITHOUT_CLASSIFICATION	2.239540147433142E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.999981031474786	WITHOUT_CLASSIFICATION	1.896852521390191E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999014857905795	WITHOUT_CLASSIFICATION	9.851420942044816E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997738577265296	WITHOUT_CLASSIFICATION	2.261422734704096E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999668082648844	WITHOUT_CLASSIFICATION	3.3191735115667226E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999661745381853	WITHOUT_CLASSIFICATION	3.3825461814721313E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999708396283641	WITHOUT_CLASSIFICATION	2.9160371635845648E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997962028607915	WITHOUT_CLASSIFICATION	2.037971392083551E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999837535973047	WITHOUT_CLASSIFICATION	1.6246402695261577E-5	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999979423266951	WITHOUT_CLASSIFICATION	2.0576733048982858E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999727457539562	WITHOUT_CLASSIFICATION	2.7254246043711108E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999881635682751	WITHOUT_CLASSIFICATION	1.1836431724786612E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999942759367257	WITHOUT_CLASSIFICATION	5.724063274340342E-6	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999926511207737	WITHOUT_CLASSIFICATION	7.348879226215518E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999820400246363	WITHOUT_CLASSIFICATION	1.7959975363728327E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999725311521991	WITHOUT_CLASSIFICATION	2.7468847800915492E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999892589350052	WITHOUT_CLASSIFICATION	1.0741064994795475E-4	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999725311521991	WITHOUT_CLASSIFICATION	2.7468847800915492E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999935399654587	WITHOUT_CLASSIFICATION	6.460034541397974E-6	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999949526136954	WITHOUT_CLASSIFICATION	5.047386304557968E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999637962085154	WITHOUT_CLASSIFICATION	3.6203791484679336E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999879973942821	WITHOUT_CLASSIFICATION	1.2002605717985233E-5	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999775565081496	WITHOUT_CLASSIFICATION	2.2443491850498354E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999637962085154	WITHOUT_CLASSIFICATION	3.6203791484679336E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999875035484972	WITHOUT_CLASSIFICATION	1.249645150270669E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9987565623781671	WITHOUT_CLASSIFICATION	0.001243437621832865	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.99995808111783	WITHOUT_CLASSIFICATION	4.191888216989606E-5	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999772012401936	WITHOUT_CLASSIFICATION	2.27987598064218E-5	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999714719868551	WITHOUT_CLASSIFICATION	2.8528013144917526E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999893725030673	WITHOUT_CLASSIFICATION	1.0627496932803443E-5	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999969020784935	WITHOUT_CLASSIFICATION	3.0979215064632723E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9997098040001258	WITHOUT_CLASSIFICATION	2.9019599987427553E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999899510596166	WITHOUT_CLASSIFICATION	1.0048940383385715E-5	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999908726863419	WITHOUT_CLASSIFICATION	9.127313658033488E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999096234650285	WITHOUT_CLASSIFICATION	9.037653497139984E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999945033717322	WITHOUT_CLASSIFICATION	5.496628267821611E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999988915441063	WITHOUT_CLASSIFICATION	1.108455893799001E-6	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9994517657772525	WITHOUT_CLASSIFICATION	5.482342227475433E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999965131239854	WITHOUT_CLASSIFICATION	3.4868760146799168E-6	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999107208379276	WITHOUT_CLASSIFICATION	8.92791620723401E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9967098435809969	WITHOUT_CLASSIFICATION	0.003290156419003188	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999468430914087	WITHOUT_CLASSIFICATION	5.3156908591253955E-5	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999099863662803	WITHOUT_CLASSIFICATION	9.001363371969314E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999780988998085	WITHOUT_CLASSIFICATION	2.1901100191511224E-4	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999693859251688	WITHOUT_CLASSIFICATION	3.061407483121895E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999814790699416	WITHOUT_CLASSIFICATION	1.8520930058383128E-5	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999456500636609	WITHOUT_CLASSIFICATION	5.434993633910926E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.9999643242126109	WITHOUT_CLASSIFICATION	3.567578738904053E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999381139706566	WITHOUT_CLASSIFICATION	6.188602934341668E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999994922522465	WITHOUT_CLASSIFICATION	5.07747753486325E-7	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999866275299695	WITHOUT_CLASSIFICATION	1.3372470030619696E-5	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.9999580736013011	WITHOUT_CLASSIFICATION	4.192639869898637E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999876936714237	WITHOUT_CLASSIFICATION	1.2306328576270605E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999539988269613	WITHOUT_CLASSIFICATION	4.600117303861038E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999555036801993	WITHOUT_CLASSIFICATION	4.449631980071285E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999678010621238	WITHOUT_CLASSIFICATION	3.2198937876286845E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9989806274758335	WITHOUT_CLASSIFICATION	0.0010193725241664645	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999780988998085	WITHOUT_CLASSIFICATION	2.1901100191511224E-4	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999843621545833	WITHOUT_CLASSIFICATION	1.5637845416739784E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999293877486469	WITHOUT_CLASSIFICATION	7.06122513531408E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997481864241149	WITHOUT_CLASSIFICATION	2.5181357588516923E-4	TEST
special case	WITHOUT_CLASSIFICATION	0.9999808266112182	WITHOUT_CLASSIFICATION	1.9173388781737873E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999819092040025	WITHOUT_CLASSIFICATION	1.8090795997421034E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999877444185467	WITHOUT_CLASSIFICATION	1.2255581453346419E-5	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998931595609216	WITHOUT_CLASSIFICATION	1.06840439078483E-4	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999098959130928	WITHOUT_CLASSIFICATION	9.010408690725139E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998738061505945	WITHOUT_CLASSIFICATION	1.2619384940546526E-4	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999615974702531	WITHOUT_CLASSIFICATION	3.840252974682385E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9998569041344572	WITHOUT_CLASSIFICATION	1.4309586554278042E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999847159662547	WITHOUT_CLASSIFICATION	1.5284033745313528E-5	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999872107451888	WITHOUT_CLASSIFICATION	1.278925481120082E-5	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999758269041099	WITHOUT_CLASSIFICATION	2.4173095890089198E-5	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999834476840249	WITHOUT_CLASSIFICATION	1.6552315975143724E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999872931167822	WITHOUT_CLASSIFICATION	1.2706883217746769E-5	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9997054226883382	WITHOUT_CLASSIFICATION	2.9457731166187103E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997421601951332	WITHOUT_CLASSIFICATION	2.578398048668426E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999468996101732	WITHOUT_CLASSIFICATION	5.310038982678995E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999358759325238	WITHOUT_CLASSIFICATION	6.412406747626313E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998796804011304	WITHOUT_CLASSIFICATION	1.2031959886962717E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998796804011304	WITHOUT_CLASSIFICATION	1.2031959886962717E-4	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999947334456959	WITHOUT_CLASSIFICATION	5.266554304188093E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998796804011304	WITHOUT_CLASSIFICATION	1.2031959886962717E-4	TEST
not known!	WITHOUT_CLASSIFICATION	0.9998796804011304	WITHOUT_CLASSIFICATION	1.2031959886962717E-4	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999808780393327	WITHOUT_CLASSIFICATION	1.912196066738503E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9993539095339438	WITHOUT_CLASSIFICATION	6.460904660561495E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999095771200844	WITHOUT_CLASSIFICATION	9.042287991557601E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999095771200844	WITHOUT_CLASSIFICATION	9.042287991557601E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999900274405966	WITHOUT_CLASSIFICATION	9.972559403439361E-6	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999931822669276	WITHOUT_CLASSIFICATION	6.817733072397319E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999427780412621	WITHOUT_CLASSIFICATION	5.722195873794991E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999508563458541	WITHOUT_CLASSIFICATION	4.9143654145774996E-5	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999673715536624	WITHOUT_CLASSIFICATION	3.262844633756335E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998600163018295	WITHOUT_CLASSIFICATION	1.3998369817056123E-4	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997735544813349	WITHOUT_CLASSIFICATION	2.2644551866511702E-4	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999815689911988	WITHOUT_CLASSIFICATION	1.8431008801088883E-5	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998924545232958	WITHOUT_CLASSIFICATION	1.0754547670423074E-4	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998816574639109	WITHOUT_CLASSIFICATION	1.1834253608917383E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999949913554653	WITHOUT_CLASSIFICATION	5.008644534699299E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9995830203049728	WITHOUT_CLASSIFICATION	4.1697969502725503E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999335403010294	WITHOUT_CLASSIFICATION	6.645969897063275E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999729694819443	WITHOUT_CLASSIFICATION	2.703051805581942E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998712008215661	WITHOUT_CLASSIFICATION	1.287991784339302E-4	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998794221664015	WITHOUT_CLASSIFICATION	1.2057783359852791E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999980584092565	WITHOUT_CLASSIFICATION	1.941590743489856E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999420171242466	WITHOUT_CLASSIFICATION	5.798287575336697E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999335403010294	WITHOUT_CLASSIFICATION	6.645969897063275E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999693859251688	WITHOUT_CLASSIFICATION	3.061407483121895E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999648411827032	WITHOUT_CLASSIFICATION	3.515881729684724E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999969356851867	WITHOUT_CLASSIFICATION	3.064314813297573E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999646126475294	WITHOUT_CLASSIFICATION	3.538735247050824E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999750797902421	WITHOUT_CLASSIFICATION	2.4920209757776224E-5	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999789864307027	WITHOUT_CLASSIFICATION	2.1013569297303753E-5	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9998606811008521	WITHOUT_CLASSIFICATION	1.3931889914789428E-4	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999525071267651	WITHOUT_CLASSIFICATION	4.7492873234897754E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999864231109836	WITHOUT_CLASSIFICATION	1.357688901625658E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999860569095228	WITHOUT_CLASSIFICATION	1.3943090477107521E-5	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999700627699465	WITHOUT_CLASSIFICATION	2.993723005350116E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998968549515502	WITHOUT_CLASSIFICATION	1.0314504844973227E-4	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999926424641469	WITHOUT_CLASSIFICATION	7.357535853178154E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999726998292855	WITHOUT_CLASSIFICATION	2.730017071451413E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9996329024988476	WITHOUT_CLASSIFICATION	3.6709750115233153E-4	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999682275349434	WITHOUT_CLASSIFICATION	3.1772465056718274E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.999973276755258	WITHOUT_CLASSIFICATION	2.672324474197325E-5	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999763971175866	WITHOUT_CLASSIFICATION	2.360288241344029E-5	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999409827773346	WITHOUT_CLASSIFICATION	5.90172226653731E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997800092144448	WITHOUT_CLASSIFICATION	2.1999078555517078E-4	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999688941906176	WITHOUT_CLASSIFICATION	3.1105809382274935E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999665253944523	WITHOUT_CLASSIFICATION	3.347460554776232E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999040571191	WITHOUT_CLASSIFICATION	9.594288082240958E-8	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999864231109836	WITHOUT_CLASSIFICATION	1.357688901625658E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999660488903277	WITHOUT_CLASSIFICATION	3.395110967232657E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999432865516198	WITHOUT_CLASSIFICATION	5.671344838010153E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999636440122993	WITHOUT_CLASSIFICATION	3.635598770068587E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999428068852516	WITHOUT_CLASSIFICATION	5.7193114748432476E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999599126284892	WITHOUT_CLASSIFICATION	4.0087371510880935E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.999979502117177	WITHOUT_CLASSIFICATION	2.0497882822895205E-5	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999602856615758	WITHOUT_CLASSIFICATION	3.9714338424161585E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.999979502117177	WITHOUT_CLASSIFICATION	2.0497882822895205E-5	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999623836794074	WITHOUT_CLASSIFICATION	3.761632059261988E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999432916531606	WITHOUT_CLASSIFICATION	5.670834683924268E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999797897321732	WITHOUT_CLASSIFICATION	2.0210267826857573E-5	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999807832809342	WITHOUT_CLASSIFICATION	1.92167190657378E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999033216344765	WITHOUT_CLASSIFICATION	9.667836552351655E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999736630837907	WITHOUT_CLASSIFICATION	2.6336916209371412E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999355557539606	WITHOUT_CLASSIFICATION	6.444424603926475E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999432916531606	WITHOUT_CLASSIFICATION	5.670834683924268E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999075640973686	WITHOUT_CLASSIFICATION	9.243590263145484E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999014333724737	WITHOUT_CLASSIFICATION	9.856662752636757E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999156715952722	WITHOUT_CLASSIFICATION	8.43284047278256E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999085927155537	WITHOUT_CLASSIFICATION	9.14072844462809E-5	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999853896640953	WITHOUT_CLASSIFICATION	1.4610335904700162E-5	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999006238881241	WITHOUT_CLASSIFICATION	9.937611187593098E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999820872933756	WITHOUT_CLASSIFICATION	1.7912706624398535E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291739317173	WITHOUT_CLASSIFICATION	7.082606828259834E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999233327110585	WITHOUT_CLASSIFICATION	7.666728894150167E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251031001903	WITHOUT_CLASSIFICATION	7.489689980972813E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251031001903	WITHOUT_CLASSIFICATION	7.489689980972813E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251031001903	WITHOUT_CLASSIFICATION	7.489689980972813E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999971205381379	WITHOUT_CLASSIFICATION	2.8794618621375023E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999971205381379	WITHOUT_CLASSIFICATION	2.8794618621375023E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9995416247667038	WITHOUT_CLASSIFICATION	4.5837523329629175E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.999992459067856	WITHOUT_CLASSIFICATION	7.54093214399239E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999599523966394	WITHOUT_CLASSIFICATION	4.0047603360694595E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.9999632380384891	WITHOUT_CLASSIFICATION	3.676196151085032E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999276303726388	WITHOUT_CLASSIFICATION	7.23696273613033E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999909439318059	WITHOUT_CLASSIFICATION	9.056068194093681E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999131883244841	WITHOUT_CLASSIFICATION	8.681167551600649E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.999970955323304	WITHOUT_CLASSIFICATION	2.9044676695886343E-5	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999296397060833	WITHOUT_CLASSIFICATION	7.036029391668346E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999909439318059	WITHOUT_CLASSIFICATION	9.056068194093681E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999131883244841	WITHOUT_CLASSIFICATION	8.681167551600649E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999625010349544	WITHOUT_CLASSIFICATION	3.749896504562007E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999978995423	WITHOUT_CLASSIFICATION	2.1004577000009764E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999880512448794	WITHOUT_CLASSIFICATION	1.1948755120629836E-5	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999437322389676	WITHOUT_CLASSIFICATION	5.626776103234252E-5	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999697716669077	WITHOUT_CLASSIFICATION	3.0228333092267655E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999470849615621	WITHOUT_CLASSIFICATION	5.291503843786158E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999390840589841	WITHOUT_CLASSIFICATION	6.091594101598893E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999672592404258	WITHOUT_CLASSIFICATION	3.274075957413841E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997486732113292	WITHOUT_CLASSIFICATION	2.51326788670732E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999255202726396	WITHOUT_CLASSIFICATION	7.447972736046163E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999523887217638	WITHOUT_CLASSIFICATION	4.761127823610717E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999851974857379	WITHOUT_CLASSIFICATION	1.4802514262042804E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999510613818816	WITHOUT_CLASSIFICATION	4.893861811836813E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9900200018768373	WITHOUT_CLASSIFICATION	0.009979998123162668	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999601671756732	WITHOUT_CLASSIFICATION	3.983282432678931E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999431654757788	WITHOUT_CLASSIFICATION	5.68345242212435E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998853160443615	WITHOUT_CLASSIFICATION	1.1468395563850992E-4	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999968831699891	WITHOUT_CLASSIFICATION	3.1168300108538543E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999236065679283	WITHOUT_CLASSIFICATION	7.639343207173765E-5	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999787574296015	WITHOUT_CLASSIFICATION	2.124257039850901E-4	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999911579434813	WITHOUT_CLASSIFICATION	8.842056518747416E-6	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999899822213392	WITHOUT_CLASSIFICATION	1.0017778660932093E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998857134906874	WITHOUT_CLASSIFICATION	1.1428650931251444E-4	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9998831505766151	WITHOUT_CLASSIFICATION	1.168494233849563E-4	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999909029249197	WITHOUT_CLASSIFICATION	9.097075080296066E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998689083490268	WITHOUT_CLASSIFICATION	1.3109165097321284E-4	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179388663172	WITHOUT_CLASSIFICATION	8.206113368278061E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179388663172	WITHOUT_CLASSIFICATION	8.206113368278061E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998782718050476	WITHOUT_CLASSIFICATION	1.217281949523462E-4	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999833777353897	WITHOUT_CLASSIFICATION	1.6622264610313324E-5	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999762522740527	WITHOUT_CLASSIFICATION	2.374772594729994E-4	TEST
/	WITHOUT_CLASSIFICATION	0.9999449864132097	WITHOUT_CLASSIFICATION	5.501358679014053E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999877657932197	WITHOUT_CLASSIFICATION	1.2234206780389061E-5	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999794305697316	WITHOUT_CLASSIFICATION	2.056943026831618E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999084958067963	WITHOUT_CLASSIFICATION	9.150419320375659E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.999982754454489	WITHOUT_CLASSIFICATION	1.7245545511021725E-5	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999646329024113	WITHOUT_CLASSIFICATION	3.536709758868888E-5	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9998077474540257	WITHOUT_CLASSIFICATION	1.92252545974391E-4	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999001719573491	WITHOUT_CLASSIFICATION	9.982804265089241E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996631908737411	WITHOUT_CLASSIFICATION	3.368091262589244E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999998161387276	WITHOUT_CLASSIFICATION	1.8386127239506475E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999366244266268	WITHOUT_CLASSIFICATION	6.337557337322699E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.999900357066496	WITHOUT_CLASSIFICATION	9.964293350391389E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9998588503357512	WITHOUT_CLASSIFICATION	1.411496642488294E-4	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999990469267394	WITHOUT_CLASSIFICATION	9.530732606003975E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996631908737411	WITHOUT_CLASSIFICATION	3.368091262589244E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996631908737411	WITHOUT_CLASSIFICATION	3.368091262589244E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9995907251280056	WITHOUT_CLASSIFICATION	4.092748719943802E-4	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999707076864409	WITHOUT_CLASSIFICATION	2.9292313558973074E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9939101236366383	WITHOUT_CLASSIFICATION	0.006089876363361596	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999796417003101	WITHOUT_CLASSIFICATION	2.035829968991259E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999476733031554	WITHOUT_CLASSIFICATION	5.232669684461464E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998853160443615	WITHOUT_CLASSIFICATION	1.1468395563850992E-4	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9981816304807769	WITHOUT_CLASSIFICATION	0.001818369519223073	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999861995633131	WITHOUT_CLASSIFICATION	1.3800436686912916E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999662914442198	WITHOUT_CLASSIFICATION	3.370855578022891E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086730687778	WITHOUT_CLASSIFICATION	9.132693122212603E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999855729859793	WITHOUT_CLASSIFICATION	1.4427014020742505E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999255183897251	WITHOUT_CLASSIFICATION	7.44816102749239E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999626065683461	WITHOUT_CLASSIFICATION	3.739343165398086E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999626065683461	WITHOUT_CLASSIFICATION	3.739343165398086E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999626065683461	WITHOUT_CLASSIFICATION	3.739343165398086E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999626065683461	WITHOUT_CLASSIFICATION	3.739343165398086E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910950691043	WITHOUT_CLASSIFICATION	8.90493089570749E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997907769454107	WITHOUT_CLASSIFICATION	2.0922305458924502E-4	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997033445886164	WITHOUT_CLASSIFICATION	2.966554113835597E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997464575277747	WITHOUT_CLASSIFICATION	2.535424722252469E-4	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091384124165	WITHOUT_CLASSIFICATION	9.086158758351317E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999158935829868	WITHOUT_CLASSIFICATION	8.41064170132678E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999405318894296	WITHOUT_CLASSIFICATION	5.9468110570512795E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999772614924567	WITHOUT_CLASSIFICATION	2.2738507543270827E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999200572691349	WITHOUT_CLASSIFICATION	7.994273086517414E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999127674778384	WITHOUT_CLASSIFICATION	8.723252216156393E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999904854329239	WITHOUT_CLASSIFICATION	9.514567076064135E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999619007835778	WITHOUT_CLASSIFICATION	3.809921642224699E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999751594836656	WITHOUT_CLASSIFICATION	2.484051633441719E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999751594836656	WITHOUT_CLASSIFICATION	2.484051633441719E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999751594836656	WITHOUT_CLASSIFICATION	2.484051633441719E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999933372653855	WITHOUT_CLASSIFICATION	6.662734614476368E-6	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.999972609017433	WITHOUT_CLASSIFICATION	2.7390982567034992E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999913631829516	WITHOUT_CLASSIFICATION	8.636817048503744E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089895978208	WITHOUT_CLASSIFICATION	9.101040217920316E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999793663609697	WITHOUT_CLASSIFICATION	2.063363903022844E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251031001903	WITHOUT_CLASSIFICATION	7.489689980972813E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999888156680117	WITHOUT_CLASSIFICATION	1.1184331988330688E-5	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999863395200718	WITHOUT_CLASSIFICATION	1.36604799282948E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999655946877262	WITHOUT_CLASSIFICATION	3.4405312273722356E-5	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998318548013629	WITHOUT_CLASSIFICATION	1.6814519863711131E-4	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999872218054295	WITHOUT_CLASSIFICATION	1.2778194570536212E-5	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999769976960056	WITHOUT_CLASSIFICATION	2.3002303994353674E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9998973565577786	WITHOUT_CLASSIFICATION	1.0264344222152734E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997196616549925	WITHOUT_CLASSIFICATION	2.803383450075171E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999349486467517	WITHOUT_CLASSIFICATION	6.505135324829831E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999212516143275	WITHOUT_CLASSIFICATION	7.874838567245506E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999894969238553	WITHOUT_CLASSIFICATION	1.0503076144582656E-5	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999566949049941	WITHOUT_CLASSIFICATION	4.3305095005887624E-5	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999242269777503	WITHOUT_CLASSIFICATION	7.577302224967665E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999935921979278	WITHOUT_CLASSIFICATION	6.407802072175597E-6	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999500821081029	WITHOUT_CLASSIFICATION	4.991789189704851E-5	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999901003318714	WITHOUT_CLASSIFICATION	9.899668128516425E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999189286656376	WITHOUT_CLASSIFICATION	8.107133436238294E-5	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999988892891345	WITHOUT_CLASSIFICATION	1.1107108655129311E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999667983117615	WITHOUT_CLASSIFICATION	3.3201688238416056E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9996480655908845	WITHOUT_CLASSIFICATION	3.519344091155526E-4	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999836993280293	WITHOUT_CLASSIFICATION	1.6300671970655297E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997460399523	WITHOUT_CLASSIFICATION	2.5396004763044074E-7	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999098522230706	WITHOUT_CLASSIFICATION	9.014777692949935E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999370791873041	WITHOUT_CLASSIFICATION	6.292081269585883E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999954434104576	WITHOUT_CLASSIFICATION	4.556589542396976E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9990866925990899	WITHOUT_CLASSIFICATION	9.133074009101697E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999980578021008	WITHOUT_CLASSIFICATION	1.942197899200279E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999787712969403	WITHOUT_CLASSIFICATION	2.12287030596457E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999622198484147	WITHOUT_CLASSIFICATION	3.778015158524359E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999799444636792	WITHOUT_CLASSIFICATION	2.005553632082464E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999968608405335	WITHOUT_CLASSIFICATION	3.13915946651096E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999508366705954	WITHOUT_CLASSIFICATION	4.9163329404640056E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9995504260812171	WITHOUT_CLASSIFICATION	4.4957391878297585E-4	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999520098053162	WITHOUT_CLASSIFICATION	4.7990194683700584E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999949503596814	WITHOUT_CLASSIFICATION	5.049640318546384E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998634494195042	WITHOUT_CLASSIFICATION	1.3655058049588076E-4	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999953334906152	WITHOUT_CLASSIFICATION	4.666509384782327E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999363886044783	WITHOUT_CLASSIFICATION	6.361139552166952E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999467927592604	WITHOUT_CLASSIFICATION	5.3207240739557765E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998779678209836	WITHOUT_CLASSIFICATION	1.2203217901642354E-4	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999926764325408	WITHOUT_CLASSIFICATION	7.323567459314617E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9992268186413165	WITHOUT_CLASSIFICATION	7.731813586834407E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999424274558507	WITHOUT_CLASSIFICATION	5.757254414930294E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997988635382659	WITHOUT_CLASSIFICATION	2.0113646173424923E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999743541691667	WITHOUT_CLASSIFICATION	2.5645830833362692E-5	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999594926127495	WITHOUT_CLASSIFICATION	4.050738725042277E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999859335448127	WITHOUT_CLASSIFICATION	1.4066455187299132E-4	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999962711820701	WITHOUT_CLASSIFICATION	3.7288179299843924E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999633260039866	WITHOUT_CLASSIFICATION	3.6673996013409837E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997811637088502	WITHOUT_CLASSIFICATION	2.1883629114983965E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999891375503415	WITHOUT_CLASSIFICATION	1.0862449658486019E-5	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999911071199412	WITHOUT_CLASSIFICATION	8.892880058792544E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999900981592296	WITHOUT_CLASSIFICATION	9.901840770495389E-6	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999730237164328	WITHOUT_CLASSIFICATION	2.6976283567264014E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999594778738871	WITHOUT_CLASSIFICATION	4.0522126112838606E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998487609309646	WITHOUT_CLASSIFICATION	1.5123906903545076E-4	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996499732553	WITHOUT_CLASSIFICATION	3.5002674468705506E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999100412242071	WITHOUT_CLASSIFICATION	8.99587757928682E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995091721492708	WITHOUT_CLASSIFICATION	4.908278507291796E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999980751861471	WITHOUT_CLASSIFICATION	1.9248138529071883E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999960267329246	WITHOUT_CLASSIFICATION	3.973267075394537E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999961912927385	WITHOUT_CLASSIFICATION	3.808707261323381E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998940699176907	WITHOUT_CLASSIFICATION	1.0593008230932541E-4	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999958973458718	WITHOUT_CLASSIFICATION	4.102654128184473E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999878032514831	WITHOUT_CLASSIFICATION	1.2196748516990514E-5	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999867037099356	WITHOUT_CLASSIFICATION	1.3296290064347705E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999778723135365	WITHOUT_CLASSIFICATION	2.2127686463560563E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999989050882598	WITHOUT_CLASSIFICATION	1.0949117401988983E-6	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999977402130771	WITHOUT_CLASSIFICATION	2.2597869228952685E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999704187627004	WITHOUT_CLASSIFICATION	2.9581237299525563E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999968645280676	WITHOUT_CLASSIFICATION	3.1354719323511364E-6	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999609565755426	WITHOUT_CLASSIFICATION	3.904342445723957E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9995434524872646	WITHOUT_CLASSIFICATION	4.5654751273536335E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999100478241327	WITHOUT_CLASSIFICATION	8.995217586726058E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9992500633872422	WITHOUT_CLASSIFICATION	7.499366127577997E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9976319331568902	WITHOUT_CLASSIFICATION	0.002368066843109776	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999501289865257	WITHOUT_CLASSIFICATION	4.987101347420478E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9998517312784758	WITHOUT_CLASSIFICATION	1.4826872152422E-4	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999819691012611	WITHOUT_CLASSIFICATION	1.8030898738778652E-5	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999207718689183	WITHOUT_CLASSIFICATION	7.92281310817278E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995541974749497	WITHOUT_CLASSIFICATION	4.458025250503666E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999947101471598	WITHOUT_CLASSIFICATION	5.289852840190238E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999700156904322	WITHOUT_CLASSIFICATION	2.9984309567744492E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999575082750004	WITHOUT_CLASSIFICATION	4.249172499968179E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999917501156507	WITHOUT_CLASSIFICATION	8.24988434937093E-6	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997990227515154	WITHOUT_CLASSIFICATION	2.0097724848466917E-4	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999391720309868	WITHOUT_CLASSIFICATION	6.082796901324013E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999073561820162	WITHOUT_CLASSIFICATION	9.264381798376356E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999598808942787	WITHOUT_CLASSIFICATION	4.0119105721366584E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999881427061605	WITHOUT_CLASSIFICATION	1.1857293839524671E-5	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999707927830982	WITHOUT_CLASSIFICATION	2.9207216901708474E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999726562980843	WITHOUT_CLASSIFICATION	2.7343701915746147E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999726562980843	WITHOUT_CLASSIFICATION	2.7343701915746147E-5	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999307198684126	WITHOUT_CLASSIFICATION	6.928013158739734E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9998867033186347	WITHOUT_CLASSIFICATION	1.1329668136526931E-4	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999628014820439	WITHOUT_CLASSIFICATION	3.719851795622341E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9996273350469052	WITHOUT_CLASSIFICATION	3.726649530949139E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999422793671361	WITHOUT_CLASSIFICATION	5.772063286386217E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996908706792543	WITHOUT_CLASSIFICATION	3.091293207455951E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9991510019726605	WITHOUT_CLASSIFICATION	8.489980273394704E-4	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9995952475456245	WITHOUT_CLASSIFICATION	4.0475245437553365E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999233974521466	WITHOUT_CLASSIFICATION	7.660254785341095E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9969841801603315	WITHOUT_CLASSIFICATION	0.003015819839668378	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999808290671799	WITHOUT_CLASSIFICATION	1.917093282013419E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999857926181489	WITHOUT_CLASSIFICATION	1.420738185118734E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997057363263249	WITHOUT_CLASSIFICATION	2.9426367367509386E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999782980816762	WITHOUT_CLASSIFICATION	2.1701918323923524E-5	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999838714121764	WITHOUT_CLASSIFICATION	1.6128587823655012E-5	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999676060401507	WITHOUT_CLASSIFICATION	3.2393959849298735E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998887715338172	WITHOUT_CLASSIFICATION	1.112284661828205E-4	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998887715338172	WITHOUT_CLASSIFICATION	1.112284661828205E-4	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999990815522963	WITHOUT_CLASSIFICATION	9.184477036941957E-6	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997502955418152	WITHOUT_CLASSIFICATION	2.497044581849067E-4	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999773897613025	WITHOUT_CLASSIFICATION	2.2610238697467152E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999600130607285	WITHOUT_CLASSIFICATION	3.99869392715487E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999422648196916	WITHOUT_CLASSIFICATION	5.773518030841445E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999661401316841	WITHOUT_CLASSIFICATION	3.3859868315940806E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999422648196916	WITHOUT_CLASSIFICATION	5.773518030841445E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999876648080096	WITHOUT_CLASSIFICATION	1.2335191990445807E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999937947118564	WITHOUT_CLASSIFICATION	6.20528814359656E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999728838311743	WITHOUT_CLASSIFICATION	2.7116168825622674E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999728838311743	WITHOUT_CLASSIFICATION	2.7116168825622674E-5	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999620991663946	WITHOUT_CLASSIFICATION	3.790083360538137E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999433807996932	WITHOUT_CLASSIFICATION	5.661920030678252E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998198438980629	WITHOUT_CLASSIFICATION	1.8015610193713156E-4	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999985682353799	WITHOUT_CLASSIFICATION	1.4317646200036302E-6	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999455188943787	WITHOUT_CLASSIFICATION	5.4481105621395984E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999944557891871	WITHOUT_CLASSIFICATION	5.544210812807307E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999821929768634	WITHOUT_CLASSIFICATION	1.7807023136575786E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999911172945718	WITHOUT_CLASSIFICATION	8.88270542817098E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998669693312771	WITHOUT_CLASSIFICATION	1.3303066872299925E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999845436822048	WITHOUT_CLASSIFICATION	1.5456317795229665E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999118436058516	WITHOUT_CLASSIFICATION	8.81563941483267E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9858110307790845	WITHOUT_CLASSIFICATION	0.014188969220915485	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999729605246263	WITHOUT_CLASSIFICATION	2.7039475373755625E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999653465853241	WITHOUT_CLASSIFICATION	3.465341467582177E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999878792899266	WITHOUT_CLASSIFICATION	1.2120710073446393E-5	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.9999725823838239	WITHOUT_CLASSIFICATION	2.741761617608126E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997225805539502	WITHOUT_CLASSIFICATION	2.774194460496937E-4	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999700828657896	WITHOUT_CLASSIFICATION	2.9917134210393482E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999636912182096	WITHOUT_CLASSIFICATION	3.6308781790472466E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999350322638278	WITHOUT_CLASSIFICATION	6.496773617216147E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999689872392077	WITHOUT_CLASSIFICATION	3.1012760792253266E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999664203353719	WITHOUT_CLASSIFICATION	3.3579664628224084E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999257539783872	WITHOUT_CLASSIFICATION	7.424602161277016E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999346973570662	WITHOUT_CLASSIFICATION	6.530264293379262E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9990863720804941	WITHOUT_CLASSIFICATION	9.136279195058291E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999722768526915	WITHOUT_CLASSIFICATION	2.7723147308437863E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999893150444016	WITHOUT_CLASSIFICATION	1.0684955598420099E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984333255535	WITHOUT_CLASSIFICATION	1.5666744465417818E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999330968051079	WITHOUT_CLASSIFICATION	6.690319489210157E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999601018710114	WITHOUT_CLASSIFICATION	3.989812898862957E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997826869600583	WITHOUT_CLASSIFICATION	2.1731303994174431E-4	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999581896671636	WITHOUT_CLASSIFICATION	4.181033283640003E-4	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998773610234546	WITHOUT_CLASSIFICATION	1.226389765454654E-4	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999750543786776	WITHOUT_CLASSIFICATION	2.4945621322338633E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999890086214928	WITHOUT_CLASSIFICATION	1.0991378507221693E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999890086214928	WITHOUT_CLASSIFICATION	1.0991378507221693E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999390337527454	WITHOUT_CLASSIFICATION	6.096624725449362E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999650181140858	WITHOUT_CLASSIFICATION	3.498188591427075E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999924643766261	WITHOUT_CLASSIFICATION	7.535623373817433E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999655923508454	WITHOUT_CLASSIFICATION	3.4407649154659664E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999962333423866	WITHOUT_CLASSIFICATION	3.766657613401608E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999963710135813	WITHOUT_CLASSIFICATION	3.62898641873381E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998855571394	WITHOUT_CLASSIFICATION	1.1444286059249064E-7	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999219419913378	WITHOUT_CLASSIFICATION	7.805800866226867E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999390337527454	WITHOUT_CLASSIFICATION	6.096624725449362E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999650181140858	WITHOUT_CLASSIFICATION	3.498188591427075E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998579555767164	WITHOUT_CLASSIFICATION	1.4204442328356643E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999626395626484	WITHOUT_CLASSIFICATION	3.736043735154204E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999894509022815	WITHOUT_CLASSIFICATION	1.0549097718534236E-5	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998483869226165	WITHOUT_CLASSIFICATION	1.5161307738352161E-4	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999566787113504	WITHOUT_CLASSIFICATION	4.3321288649499194E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9996076029235204	WITHOUT_CLASSIFICATION	3.923970764796882E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999393943949335	WITHOUT_CLASSIFICATION	6.0605605066529507E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999433369082954	WITHOUT_CLASSIFICATION	5.6663091704495014E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999750202437214	WITHOUT_CLASSIFICATION	2.497975627860589E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9970472700328645	WITHOUT_CLASSIFICATION	0.0029527299671355954	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999934799783268	WITHOUT_CLASSIFICATION	6.520021673251614E-6	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9970472700328645	WITHOUT_CLASSIFICATION	0.0029527299671355954	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998640520688559	WITHOUT_CLASSIFICATION	1.35947931144199E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999100412242071	WITHOUT_CLASSIFICATION	8.99587757928682E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998640520688559	WITHOUT_CLASSIFICATION	1.35947931144199E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996642450610627	WITHOUT_CLASSIFICATION	3.3575493893733794E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998987964258826	WITHOUT_CLASSIFICATION	1.0120357411727759E-4	TEST
}	WITHOUT_CLASSIFICATION	0.9999433369082954	WITHOUT_CLASSIFICATION	5.6663091704495014E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999433369082954	WITHOUT_CLASSIFICATION	5.6663091704495014E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999502442607651	WITHOUT_CLASSIFICATION	4.975573923485981E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999503058625588	WITHOUT_CLASSIFICATION	4.9694137441135955E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999502442607651	WITHOUT_CLASSIFICATION	4.975573923485981E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999603644120644	WITHOUT_CLASSIFICATION	3.963558793551272E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999792919190909	WITHOUT_CLASSIFICATION	2.070808090916453E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999624245163369	WITHOUT_CLASSIFICATION	3.757548366308395E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9996469088584152	WITHOUT_CLASSIFICATION	3.530911415848019E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999613537916081	WITHOUT_CLASSIFICATION	3.8646208391941E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999317310457142	WITHOUT_CLASSIFICATION	6.826895428574223E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999390326854706	WITHOUT_CLASSIFICATION	6.0967314529502196E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999391390076804	WITHOUT_CLASSIFICATION	6.0860992319589025E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999873887636583	WITHOUT_CLASSIFICATION	1.2611236341756716E-5	TEST
types	WITHOUT_CLASSIFICATION	0.9999394859132882	WITHOUT_CLASSIFICATION	6.051408671186606E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999394129464674	WITHOUT_CLASSIFICATION	6.058705353276062E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999927046620945	WITHOUT_CLASSIFICATION	7.295337905503541E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999600672760837	WITHOUT_CLASSIFICATION	3.99327239162722E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999474621571178	WITHOUT_CLASSIFICATION	5.253784288219413E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999830769856909	WITHOUT_CLASSIFICATION	1.6923014309059455E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999884063022189	WITHOUT_CLASSIFICATION	1.1593697781112143E-5	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999600579618025	WITHOUT_CLASSIFICATION	3.9942038197530945E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999981779370562	WITHOUT_CLASSIFICATION	1.8220629438052005E-5	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999537534645718	WITHOUT_CLASSIFICATION	4.624653542815947E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999599407641135	WITHOUT_CLASSIFICATION	4.005923588653969E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999883949753203	WITHOUT_CLASSIFICATION	1.1605024679699026E-4	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998703422806556	WITHOUT_CLASSIFICATION	1.2965771934428323E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998095706163543	WITHOUT_CLASSIFICATION	1.9042938364570978E-4	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9997144020985923	WITHOUT_CLASSIFICATION	2.855979014076895E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9817968767389632	WITHOUT_CLASSIFICATION	0.018203123261036694	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.999964822774095	WITHOUT_CLASSIFICATION	3.517722590486356E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999613537916081	WITHOUT_CLASSIFICATION	3.8646208391941E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999695765328488	WITHOUT_CLASSIFICATION	3.0423467151111136E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.999912784090248	WITHOUT_CLASSIFICATION	8.721590975196317E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9400086478969846	WITHOUT_CLASSIFICATION	0.05999135210301544	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999468787480845	WITHOUT_CLASSIFICATION	5.312125191557929E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999906871467764	WITHOUT_CLASSIFICATION	9.312853223549098E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999837432418974	WITHOUT_CLASSIFICATION	1.6256758102588536E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999603644120644	WITHOUT_CLASSIFICATION	3.963558793551272E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999603644120644	WITHOUT_CLASSIFICATION	3.963558793551272E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999908557526295	WITHOUT_CLASSIFICATION	9.144247370486383E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999832765931937	WITHOUT_CLASSIFICATION	1.6723406806241097E-5	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.9999727422518645	WITHOUT_CLASSIFICATION	2.7257748135549256E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.999978210345231	WITHOUT_CLASSIFICATION	2.1789654768890865E-5	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9994768197049466	WITHOUT_CLASSIFICATION	5.231802950533452E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.99998285035667	WITHOUT_CLASSIFICATION	1.7149643330047232E-5	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999826054900554	WITHOUT_CLASSIFICATION	1.7394509944712843E-5	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999955869496789	WITHOUT_CLASSIFICATION	4.413050321095781E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999857933526091	WITHOUT_CLASSIFICATION	1.4206647390908818E-4	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999742276118235	WITHOUT_CLASSIFICATION	2.5772388176516114E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924533154151	WITHOUT_CLASSIFICATION	7.546684584862724E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999927046620945	WITHOUT_CLASSIFICATION	7.295337905503541E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999390337527454	WITHOUT_CLASSIFICATION	6.096624725449362E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924533154151	WITHOUT_CLASSIFICATION	7.546684584862724E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999856854926404	WITHOUT_CLASSIFICATION	1.4314507359689848E-5	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999996888181599	WITHOUT_CLASSIFICATION	3.1118184009180794E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999888700560604	WITHOUT_CLASSIFICATION	1.112994393957918E-5	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9971888406651112	WITHOUT_CLASSIFICATION	0.0028111593348887722	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998499389571923	WITHOUT_CLASSIFICATION	1.500610428076541E-4	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999955465346019	WITHOUT_CLASSIFICATION	4.45346539816458E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999922336401023	WITHOUT_CLASSIFICATION	7.766359897726553E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999995535300447	WITHOUT_CLASSIFICATION	4.464699552981434E-6	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999390337527454	WITHOUT_CLASSIFICATION	6.096624725449362E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999681076885379	WITHOUT_CLASSIFICATION	3.189231146213025E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999098529830673	WITHOUT_CLASSIFICATION	9.014701693263709E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999098529830673	WITHOUT_CLASSIFICATION	9.014701693263709E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9997094909088519	WITHOUT_CLASSIFICATION	2.9050909114813135E-4	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998440309371218	WITHOUT_CLASSIFICATION	1.559690628782705E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999924533154151	WITHOUT_CLASSIFICATION	7.546684584862724E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998499389571923	WITHOUT_CLASSIFICATION	1.500610428076541E-4	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999922336401023	WITHOUT_CLASSIFICATION	7.766359897726553E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999900795385247	WITHOUT_CLASSIFICATION	9.920461475286725E-6	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999976998096497	WITHOUT_CLASSIFICATION	2.3001903504124186E-6	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999614389263856	WITHOUT_CLASSIFICATION	3.8561073614514155E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999406938284476	WITHOUT_CLASSIFICATION	5.930617155235274E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999679977029319	WITHOUT_CLASSIFICATION	3.2002297067996236E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999939035367932	WITHOUT_CLASSIFICATION	6.096463206786765E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999856854926404	WITHOUT_CLASSIFICATION	1.4314507359689848E-5	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999090559277294	WITHOUT_CLASSIFICATION	9.094407227063302E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999603711176973	WITHOUT_CLASSIFICATION	3.9628882302770945E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998027149950383	WITHOUT_CLASSIFICATION	1.9728500496172052E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9997575843370615	WITHOUT_CLASSIFICATION	2.424156629385181E-4	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997569960648276	WITHOUT_CLASSIFICATION	2.430039351723846E-4	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.9999854717369736	WITHOUT_CLASSIFICATION	1.4528263026414004E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996642450610627	WITHOUT_CLASSIFICATION	3.3575493893733794E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999681824593133	WITHOUT_CLASSIFICATION	3.181754068673639E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998891156087841	WITHOUT_CLASSIFICATION	1.1088439121590124E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999152336203138	WITHOUT_CLASSIFICATION	8.476637968615812E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999805090612137	WITHOUT_CLASSIFICATION	1.949093878630757E-5	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999772979262654	WITHOUT_CLASSIFICATION	2.270207373466072E-5	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999986542197663	WITHOUT_CLASSIFICATION	1.3457802336970317E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999606392111583	WITHOUT_CLASSIFICATION	3.936078884181155E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997963838122107	WITHOUT_CLASSIFICATION	2.0361618778941225E-4	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999939035367932	WITHOUT_CLASSIFICATION	6.096463206786765E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999621677321842	WITHOUT_CLASSIFICATION	3.783226781583753E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9998268776014747	WITHOUT_CLASSIFICATION	1.7312239852525137E-4	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999923890463017	WITHOUT_CLASSIFICATION	7.610953698225279E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998030034116623	WITHOUT_CLASSIFICATION	1.9699658833766318E-4	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999634759954529	WITHOUT_CLASSIFICATION	3.652400454707653E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999364292647452	WITHOUT_CLASSIFICATION	6.357073525478544E-5	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997878427350739	WITHOUT_CLASSIFICATION	2.1215726492606064E-4	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999630468962271	WITHOUT_CLASSIFICATION	3.695310377292878E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999647795677818	WITHOUT_CLASSIFICATION	3.522043221826137E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999768810599017	WITHOUT_CLASSIFICATION	2.311894009838867E-5	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.999971584524846	WITHOUT_CLASSIFICATION	2.8415475153989845E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999793137687345	WITHOUT_CLASSIFICATION	2.0686231265413732E-5	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999242868246456	WITHOUT_CLASSIFICATION	7.5713175354301E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999835248694552	WITHOUT_CLASSIFICATION	1.6475130544836474E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999988089534974	WITHOUT_CLASSIFICATION	1.1910465025998495E-5	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999426682621555	WITHOUT_CLASSIFICATION	5.733173784438977E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998225899121223	WITHOUT_CLASSIFICATION	1.7741008787778534E-4	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999152180193636	WITHOUT_CLASSIFICATION	8.478198063654846E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999434070898819	WITHOUT_CLASSIFICATION	5.659291011806047E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999834837900844	WITHOUT_CLASSIFICATION	1.651620991557546E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999133114587214	WITHOUT_CLASSIFICATION	8.668854127866937E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9945496373621879	WITHOUT_CLASSIFICATION	0.005450362637811953	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999645101714174	WITHOUT_CLASSIFICATION	3.548982858259503E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997594275265281	WITHOUT_CLASSIFICATION	2.4057247347190867E-4	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999784198301773	WITHOUT_CLASSIFICATION	2.1580169822626783E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9947357848232145	WITHOUT_CLASSIFICATION	0.005264215176785538	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998870036606297	WITHOUT_CLASSIFICATION	1.1299633937037113E-4	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998989659781046	WITHOUT_CLASSIFICATION	1.0103402189551785E-4	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999869158820711	WITHOUT_CLASSIFICATION	1.3084117928897785E-4	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999756055534256	WITHOUT_CLASSIFICATION	2.439444657439367E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999921093658959	WITHOUT_CLASSIFICATION	7.890634104048123E-6	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9998404140627682	WITHOUT_CLASSIFICATION	1.5958593723180316E-4	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999319671990528	WITHOUT_CLASSIFICATION	6.803280094722234E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998616374176011	WITHOUT_CLASSIFICATION	1.3836258239894572E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9998404140627682	WITHOUT_CLASSIFICATION	1.5958593723180316E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999921093658959	WITHOUT_CLASSIFICATION	7.890634104048123E-6	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999319671990528	WITHOUT_CLASSIFICATION	6.803280094722234E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999343524613873	WITHOUT_CLASSIFICATION	6.56475386127282E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999268876085121	WITHOUT_CLASSIFICATION	7.311239148783205E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997627091441647	WITHOUT_CLASSIFICATION	2.3729085583521606E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999861919455076	WITHOUT_CLASSIFICATION	1.3808054492287461E-5	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999998139863771	WITHOUT_CLASSIFICATION	1.8601362290021862E-6	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9924059499063685	WITHOUT_CLASSIFICATION	0.007594050093631377	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998866545615751	WITHOUT_CLASSIFICATION	1.1334543842480807E-4	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997378629600948	WITHOUT_CLASSIFICATION	2.621370399052257E-4	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999897471943555	WITHOUT_CLASSIFICATION	1.0252805644522948E-5	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999983830606019	WITHOUT_CLASSIFICATION	1.6169393981005898E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.9999605292508261	WITHOUT_CLASSIFICATION	3.947074917385644E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999780562564093	WITHOUT_CLASSIFICATION	2.1943743590700627E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999126750124696	WITHOUT_CLASSIFICATION	8.732498753039896E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999861919455076	WITHOUT_CLASSIFICATION	1.3808054492287461E-5	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999980771431205	WITHOUT_CLASSIFICATION	1.922856879503212E-5	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999888780838847	WITHOUT_CLASSIFICATION	1.1121916115293891E-4	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999609751389746	WITHOUT_CLASSIFICATION	3.9024861025308646E-5	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999992387711819	WITHOUT_CLASSIFICATION	7.612288181396289E-7	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999404639199159	WITHOUT_CLASSIFICATION	5.953608008413935E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998989734022329	WITHOUT_CLASSIFICATION	1.0102659776713614E-4	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998719167970359	WITHOUT_CLASSIFICATION	1.280832029640349E-4	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999910393458661	WITHOUT_CLASSIFICATION	8.960654133979932E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999397797404819	WITHOUT_CLASSIFICATION	6.0220259518099504E-5	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999909896426867	WITHOUT_CLASSIFICATION	9.010357313290847E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998989734022329	WITHOUT_CLASSIFICATION	1.0102659776713614E-4	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998989734022329	WITHOUT_CLASSIFICATION	1.0102659776713614E-4	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999885043041467	WITHOUT_CLASSIFICATION	1.1495695853234442E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999885043041467	WITHOUT_CLASSIFICATION	1.1495695853234442E-5	TEST
not supported	WITHOUT_CLASSIFICATION	0.9998473541920175	WITHOUT_CLASSIFICATION	1.5264580798259733E-4	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999609751389746	WITHOUT_CLASSIFICATION	3.9024861025308646E-5	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9996178066349961	WITHOUT_CLASSIFICATION	3.821933650037884E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999972397554322	WITHOUT_CLASSIFICATION	2.760244567799133E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999847076926728	WITHOUT_CLASSIFICATION	1.529230732723102E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999847076926728	WITHOUT_CLASSIFICATION	1.529230732723102E-5	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999912980082757	WITHOUT_CLASSIFICATION	8.701991724383303E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9995247788276997	WITHOUT_CLASSIFICATION	4.7522117230016297E-4	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999993265480101	WITHOUT_CLASSIFICATION	6.734519899007265E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999829422911141	WITHOUT_CLASSIFICATION	1.7057708885976354E-5	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999493834467741	WITHOUT_CLASSIFICATION	5.0616553225925145E-5	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999369487507	WITHOUT_CLASSIFICATION	6.30512493536235E-8	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999967461370917	WITHOUT_CLASSIFICATION	3.2538629084681013E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998365423265424	WITHOUT_CLASSIFICATION	1.6345767345755827E-4	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.9999861111281885	WITHOUT_CLASSIFICATION	1.3888871811562425E-5	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999861390239793	WITHOUT_CLASSIFICATION	1.386097602078728E-5	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.999987933689616	WITHOUT_CLASSIFICATION	1.2066310383975157E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.999908874551006	WITHOUT_CLASSIFICATION	9.112544899407222E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999435896641901	WITHOUT_CLASSIFICATION	5.641033580990776E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9997967985321922	WITHOUT_CLASSIFICATION	2.0320146780783345E-4	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999706586328675	WITHOUT_CLASSIFICATION	2.9341367132508597E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110807662077	WITHOUT_CLASSIFICATION	8.891923379232568E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999894051977626	WITHOUT_CLASSIFICATION	1.059480223741129E-5	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998045084184689	WITHOUT_CLASSIFICATION	1.9549158153115486E-4	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999113017625166	WITHOUT_CLASSIFICATION	8.869823748345517E-5	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999768132858248	WITHOUT_CLASSIFICATION	2.3186714175192086E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9980789774865347	WITHOUT_CLASSIFICATION	0.0019210225134653133	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999930704360318	WITHOUT_CLASSIFICATION	6.929563968171169E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999763900225553	WITHOUT_CLASSIFICATION	2.3609977444655173E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999449864132097	WITHOUT_CLASSIFICATION	5.501358679014053E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999691606477953	WITHOUT_CLASSIFICATION	3.0839352204678814E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999647795677818	WITHOUT_CLASSIFICATION	3.522043221826137E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999807216207054	WITHOUT_CLASSIFICATION	1.9278379294696817E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.999997433156646	WITHOUT_CLASSIFICATION	2.5668433539967424E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999083003877797	WITHOUT_CLASSIFICATION	9.169961222037068E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999681460229668	WITHOUT_CLASSIFICATION	3.185397703310549E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.9999681460229668	WITHOUT_CLASSIFICATION	3.185397703310549E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999745406170454	WITHOUT_CLASSIFICATION	2.5459382954660846E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999377031233735	WITHOUT_CLASSIFICATION	6.229687662653475E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999431760731661	WITHOUT_CLASSIFICATION	5.682392683396333E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999431760731661	WITHOUT_CLASSIFICATION	5.682392683396333E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998278248231548	WITHOUT_CLASSIFICATION	1.7217517684521571E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996420195087603	WITHOUT_CLASSIFICATION	3.5798049123967707E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999180248938754	WITHOUT_CLASSIFICATION	8.197510612460387E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999476733031554	WITHOUT_CLASSIFICATION	5.232669684461464E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999630025109854	WITHOUT_CLASSIFICATION	3.6997489014618206E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998768576907421	WITHOUT_CLASSIFICATION	1.2314230925794168E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999696780161783	WITHOUT_CLASSIFICATION	3.0321983821684516E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999506011207965	WITHOUT_CLASSIFICATION	4.939887920359447E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999506011207965	WITHOUT_CLASSIFICATION	4.939887920359447E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999754532352936	WITHOUT_CLASSIFICATION	2.454676470639167E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999379142755306	WITHOUT_CLASSIFICATION	6.208572446933366E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999379142755306	WITHOUT_CLASSIFICATION	6.208572446933366E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999525935025804	WITHOUT_CLASSIFICATION	4.7406497419679177E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.999962384179949	WITHOUT_CLASSIFICATION	3.761582005103304E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999881482845583	WITHOUT_CLASSIFICATION	1.1851715441669648E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999888052660365	WITHOUT_CLASSIFICATION	1.1194733963629275E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999945270175358	WITHOUT_CLASSIFICATION	5.472982464210066E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999098870481612	WITHOUT_CLASSIFICATION	9.011295183884245E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998202714057172	WITHOUT_CLASSIFICATION	1.7972859428278546E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999886125469913	WITHOUT_CLASSIFICATION	1.1387453008546842E-5	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997600166464033	WITHOUT_CLASSIFICATION	2.3998335359662044E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999860690957344	WITHOUT_CLASSIFICATION	1.3930904265641143E-5	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999928868749035	WITHOUT_CLASSIFICATION	7.113125096397247E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999939143867343	WITHOUT_CLASSIFICATION	6.085613265703112E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999939143867343	WITHOUT_CLASSIFICATION	6.085613265703112E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999939143867343	WITHOUT_CLASSIFICATION	6.085613265703112E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999939143867343	WITHOUT_CLASSIFICATION	6.085613265703112E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999010717180241	WITHOUT_CLASSIFICATION	9.892828197580704E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998605682975891	WITHOUT_CLASSIFICATION	1.3943170241091733E-4	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999084958067963	WITHOUT_CLASSIFICATION	9.150419320375659E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999323870619996	WITHOUT_CLASSIFICATION	6.761293800045528E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9998908347888671	WITHOUT_CLASSIFICATION	1.0916521113284716E-4	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995795299060775	WITHOUT_CLASSIFICATION	4.20470093922542E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999293907567334	WITHOUT_CLASSIFICATION	7.060924326671268E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999981877199248	WITHOUT_CLASSIFICATION	1.812280075264029E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999597805939928	WITHOUT_CLASSIFICATION	4.021940600718257E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999632299898847	WITHOUT_CLASSIFICATION	3.677001011532211E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999525002074638	WITHOUT_CLASSIFICATION	4.749979253620296E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9991353309376805	WITHOUT_CLASSIFICATION	8.646690623193923E-4	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9926140518939172	WITHOUT_CLASSIFICATION	0.0073859481060829305	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999836256508388	WITHOUT_CLASSIFICATION	1.6374349161235955E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999525002074638	WITHOUT_CLASSIFICATION	4.749979253620296E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9722623222515032	WITHOUT_CLASSIFICATION	0.027737677748496777	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999933036107871	WITHOUT_CLASSIFICATION	6.696389212908358E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999381617591095	WITHOUT_CLASSIFICATION	6.183824089050839E-5	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996456248264153	WITHOUT_CLASSIFICATION	3.543751735847627E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999326744728598	WITHOUT_CLASSIFICATION	6.73255271402272E-5	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9997595353608787	WITHOUT_CLASSIFICATION	2.4046463912128884E-4	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999916396139269	WITHOUT_CLASSIFICATION	8.360386073190473E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999859798157015	WITHOUT_CLASSIFICATION	1.4020184298595815E-5	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999361362279032	WITHOUT_CLASSIFICATION	6.386377209687256E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999907317857083	WITHOUT_CLASSIFICATION	9.268214291635921E-6	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999361362279032	WITHOUT_CLASSIFICATION	6.386377209687256E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999851096634145	WITHOUT_CLASSIFICATION	1.4890336585602285E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9994798239800501	WITHOUT_CLASSIFICATION	5.201760199499765E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9986667780135086	WITHOUT_CLASSIFICATION	0.001333221986491438	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999880330967578	WITHOUT_CLASSIFICATION	1.1966903242157752E-5	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999984234342685	WITHOUT_CLASSIFICATION	1.5765657315050425E-5	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999681979755064	WITHOUT_CLASSIFICATION	3.180202449359707E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999670209640366	WITHOUT_CLASSIFICATION	3.297903596337069E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999001310201879	WITHOUT_CLASSIFICATION	9.986897981207738E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999670209640366	WITHOUT_CLASSIFICATION	3.297903596337069E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999756088202505	WITHOUT_CLASSIFICATION	2.4391179749548912E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999065624231085	WITHOUT_CLASSIFICATION	9.343757689147734E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999225324030253	WITHOUT_CLASSIFICATION	7.746759697475466E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999434057537575	WITHOUT_CLASSIFICATION	5.65942462423869E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999347562770582	WITHOUT_CLASSIFICATION	6.52437229417556E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998724683225959	WITHOUT_CLASSIFICATION	1.2753167740405913E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999681979755064	WITHOUT_CLASSIFICATION	3.180202449359707E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999001310201879	WITHOUT_CLASSIFICATION	9.986897981207738E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999756088202505	WITHOUT_CLASSIFICATION	2.4391179749548912E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999477830124186	WITHOUT_CLASSIFICATION	5.221698758141593E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999780766433528	WITHOUT_CLASSIFICATION	2.192335664709066E-5	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999861103915125	WITHOUT_CLASSIFICATION	1.3889608487543498E-5	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999986472975702	WITHOUT_CLASSIFICATION	1.3527024298427148E-6	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999865627140678	WITHOUT_CLASSIFICATION	1.3437285932225466E-5	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999726402910032	WITHOUT_CLASSIFICATION	2.735970899690537E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999608860797654	WITHOUT_CLASSIFICATION	3.91139202346904E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110807662077	WITHOUT_CLASSIFICATION	8.891923379232568E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999065624231085	WITHOUT_CLASSIFICATION	9.343757689147734E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999951708318984	WITHOUT_CLASSIFICATION	4.829168101652364E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999502442607651	WITHOUT_CLASSIFICATION	4.975573923485981E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996627964398862	WITHOUT_CLASSIFICATION	3.372035601138819E-4	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999639557151934	WITHOUT_CLASSIFICATION	3.6044284806623776E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110807662077	WITHOUT_CLASSIFICATION	8.891923379232568E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999709023325672	WITHOUT_CLASSIFICATION	2.909766743273605E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110807662077	WITHOUT_CLASSIFICATION	8.891923379232568E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999008304643291	WITHOUT_CLASSIFICATION	9.916953567094289E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999746178610109	WITHOUT_CLASSIFICATION	2.5382138989043282E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.99992256675498	WITHOUT_CLASSIFICATION	7.743324501994252E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999834753315269	WITHOUT_CLASSIFICATION	1.6524668473071015E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999948437103909	WITHOUT_CLASSIFICATION	5.156289609018856E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.999969128336275	WITHOUT_CLASSIFICATION	3.087166372502116E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999831820340863	WITHOUT_CLASSIFICATION	1.681796591367085E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999843457634008	WITHOUT_CLASSIFICATION	1.5654236599202727E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999713144428392	WITHOUT_CLASSIFICATION	2.8685557160812008E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999658027396588	WITHOUT_CLASSIFICATION	3.41972603411881E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999965393896444	WITHOUT_CLASSIFICATION	3.46061035556562E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999392361659768	WITHOUT_CLASSIFICATION	6.0763834023161664E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997545163988483	WITHOUT_CLASSIFICATION	2.454836011517196E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999757866351004	WITHOUT_CLASSIFICATION	2.42133648995321E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999969274163357	WITHOUT_CLASSIFICATION	3.0725836643239834E-6	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999757082823696	WITHOUT_CLASSIFICATION	2.4291717630473575E-5	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998910913201208	WITHOUT_CLASSIFICATION	1.0890867987928558E-4	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999996855225593	WITHOUT_CLASSIFICATION	3.1447744069422742E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999786734560515	WITHOUT_CLASSIFICATION	2.1326543948509538E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998198598004004	WITHOUT_CLASSIFICATION	1.801401995995254E-4	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998198598004004	WITHOUT_CLASSIFICATION	1.801401995995254E-4	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.999967960693187	WITHOUT_CLASSIFICATION	3.203930681286499E-5	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998748721789709	WITHOUT_CLASSIFICATION	1.251278210291792E-4	TEST
noop	WITHOUT_CLASSIFICATION	0.999939030602757	WITHOUT_CLASSIFICATION	6.0969397243046615E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999797567945062	WITHOUT_CLASSIFICATION	2.0243205493790894E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999992621591406	WITHOUT_CLASSIFICATION	7.378408594370319E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999986600640164	WITHOUT_CLASSIFICATION	1.339935983589577E-5	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999672168137489	WITHOUT_CLASSIFICATION	3.2783186251158086E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999316999242657	WITHOUT_CLASSIFICATION	6.830007573434072E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9899082920664908	WITHOUT_CLASSIFICATION	0.010091707933509176	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999926511207737	WITHOUT_CLASSIFICATION	7.348879226215518E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998953257518843	WITHOUT_CLASSIFICATION	1.0467424811564819E-4	TEST
cache this	WITHOUT_CLASSIFICATION	0.9997474001499619	WITHOUT_CLASSIFICATION	2.5259985003813374E-4	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9991208714482771	WITHOUT_CLASSIFICATION	8.791285517229665E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999882352962174	WITHOUT_CLASSIFICATION	1.176470378250599E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999879973942821	WITHOUT_CLASSIFICATION	1.2002605717985233E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999322393176543	WITHOUT_CLASSIFICATION	6.776068234570242E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999826838424437	WITHOUT_CLASSIFICATION	1.731615755628267E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999826838424437	WITHOUT_CLASSIFICATION	1.731615755628267E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999894510952194	WITHOUT_CLASSIFICATION	1.0548904780513874E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999843457634008	WITHOUT_CLASSIFICATION	1.5654236599202727E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998655889690805	WITHOUT_CLASSIFICATION	1.3441103091950488E-4	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.99993147148076	WITHOUT_CLASSIFICATION	6.852851924005428E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999701351667747	WITHOUT_CLASSIFICATION	2.986483322533331E-5	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999842330132261	WITHOUT_CLASSIFICATION	1.5766986773827944E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.9999896232142732	WITHOUT_CLASSIFICATION	1.0376785726887174E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999420892387397	WITHOUT_CLASSIFICATION	5.791076126018401E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999556667189529	WITHOUT_CLASSIFICATION	4.433328104709178E-5	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999010759603887	WITHOUT_CLASSIFICATION	9.892403961121396E-5	TEST
return false;	WITHOUT_CLASSIFICATION	0.999978674318399	WITHOUT_CLASSIFICATION	2.132568160099708E-5	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999962083941822	WITHOUT_CLASSIFICATION	3.7916058176958974E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999991083780312	WITHOUT_CLASSIFICATION	8.916219688009467E-6	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999721812133179	WITHOUT_CLASSIFICATION	2.7818786682153983E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999993134354045	WITHOUT_CLASSIFICATION	6.865645954277618E-7	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999675074131106	WITHOUT_CLASSIFICATION	3.2492586889367664E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999877077317512	WITHOUT_CLASSIFICATION	1.2292268248838468E-5	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999869322918026	WITHOUT_CLASSIFICATION	1.3067708197388452E-5	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999997947348394	WITHOUT_CLASSIFICATION	2.0526516059659627E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999984025102331	WITHOUT_CLASSIFICATION	1.597489766807432E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999213804408672	WITHOUT_CLASSIFICATION	7.861955913274762E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9997162871615175	WITHOUT_CLASSIFICATION	2.837128384824393E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999879631435004	WITHOUT_CLASSIFICATION	1.2036856499594254E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999978374062088	WITHOUT_CLASSIFICATION	2.1625937912044214E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999785643854103	WITHOUT_CLASSIFICATION	2.143561458965217E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999984668302661	WITHOUT_CLASSIFICATION	1.533169733909571E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999097936574278	WITHOUT_CLASSIFICATION	9.020634257216575E-5	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996703554600301	WITHOUT_CLASSIFICATION	3.2964453996986253E-4	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999726847123588	WITHOUT_CLASSIFICATION	2.731528764121097E-4	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999950299455186	WITHOUT_CLASSIFICATION	4.970054481399532E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999909439318059	WITHOUT_CLASSIFICATION	9.056068194093681E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999101654366754	WITHOUT_CLASSIFICATION	8.983456332454976E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999564126613482	WITHOUT_CLASSIFICATION	4.35873386519767E-5	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999126014837129	WITHOUT_CLASSIFICATION	8.73985162871492E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999423777493356	WITHOUT_CLASSIFICATION	5.762225066435017E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9912244874677411	WITHOUT_CLASSIFICATION	0.008775512532259023	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9995494200816677	WITHOUT_CLASSIFICATION	4.505799183322657E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999991507837078	WITHOUT_CLASSIFICATION	8.4921629218675E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997300917789581	WITHOUT_CLASSIFICATION	2.699082210418668E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997300917789581	WITHOUT_CLASSIFICATION	2.699082210418668E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999529437504834	WITHOUT_CLASSIFICATION	4.705624951669463E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999443173483039	WITHOUT_CLASSIFICATION	5.5682651696223326E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998971866175378	WITHOUT_CLASSIFICATION	1.0281338246220204E-4	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998971866175378	WITHOUT_CLASSIFICATION	1.0281338246220204E-4	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999898912418939	WITHOUT_CLASSIFICATION	1.010875810608246E-5	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999815689911988	WITHOUT_CLASSIFICATION	1.8431008801088883E-5	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999484977870438	WITHOUT_CLASSIFICATION	5.150221295619792E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999839125297013	WITHOUT_CLASSIFICATION	1.6087470298633076E-5	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999093961003174	WITHOUT_CLASSIFICATION	9.060389968261707E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999909175977764	WITHOUT_CLASSIFICATION	9.082402223600173E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999908511123182	WITHOUT_CLASSIFICATION	9.148887681773339E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999908511123182	WITHOUT_CLASSIFICATION	9.148887681773339E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999909175977764	WITHOUT_CLASSIFICATION	9.082402223600173E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998823011438014	WITHOUT_CLASSIFICATION	1.1769885619868123E-4	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999603644120644	WITHOUT_CLASSIFICATION	3.963558793551272E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999678133161712	WITHOUT_CLASSIFICATION	3.218668382879458E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999904955755567	WITHOUT_CLASSIFICATION	9.504424443225801E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999991022821407	WITHOUT_CLASSIFICATION	8.977178593147575E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999763200191506	WITHOUT_CLASSIFICATION	2.36799808494129E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999927664388687	WITHOUT_CLASSIFICATION	7.233561131329164E-6	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999599095196843	WITHOUT_CLASSIFICATION	4.0090480315744085E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999925534765411	WITHOUT_CLASSIFICATION	7.446523458780464E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999913117018141	WITHOUT_CLASSIFICATION	8.688298185819473E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999879386693308	WITHOUT_CLASSIFICATION	1.2061330669292043E-5	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999607769810427	WITHOUT_CLASSIFICATION	3.9223018957253804E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999742752787051	WITHOUT_CLASSIFICATION	2.5724721294884843E-5	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9996801202158808	WITHOUT_CLASSIFICATION	3.1987978411921435E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.999855914048553	WITHOUT_CLASSIFICATION	1.440859514470228E-4	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999919891784461	WITHOUT_CLASSIFICATION	8.01082155387337E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999390321747634	WITHOUT_CLASSIFICATION	6.09678252366088E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996701249878898	WITHOUT_CLASSIFICATION	3.2987501211021E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999901470581267	WITHOUT_CLASSIFICATION	9.8529418732945E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999439684626784	WITHOUT_CLASSIFICATION	5.603153732154093E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999694569905572	WITHOUT_CLASSIFICATION	3.0543009442823966E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998576167704709	WITHOUT_CLASSIFICATION	1.423832295290807E-4	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999485160494116	WITHOUT_CLASSIFICATION	5.148395058849586E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997998018531421	WITHOUT_CLASSIFICATION	2.0019814685788011E-4	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.995645489600732	WITHOUT_CLASSIFICATION	0.004354510399268084	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999326935989562	WITHOUT_CLASSIFICATION	6.730640104380736E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.9999923292013425	WITHOUT_CLASSIFICATION	7.67079865750758E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999877567735189	WITHOUT_CLASSIFICATION	1.2243226481106877E-5	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999678010621238	WITHOUT_CLASSIFICATION	3.2198937876286845E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999937040319523	WITHOUT_CLASSIFICATION	6.295968047627887E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999851974857379	WITHOUT_CLASSIFICATION	1.4802514262042804E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999236065679283	WITHOUT_CLASSIFICATION	7.639343207173765E-5	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999775279648385	WITHOUT_CLASSIFICATION	2.2472035161416287E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999622148539881	WITHOUT_CLASSIFICATION	3.77851460119297E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999598836889145	WITHOUT_CLASSIFICATION	4.011631108550932E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999863963290578	WITHOUT_CLASSIFICATION	1.3603670942170993E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999621070807637	WITHOUT_CLASSIFICATION	3.789291923636437E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999697276960927	WITHOUT_CLASSIFICATION	3.027230390727731E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999844394711935	WITHOUT_CLASSIFICATION	1.5560528806546193E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999930969564215	WITHOUT_CLASSIFICATION	6.903043578595777E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999946083315832	WITHOUT_CLASSIFICATION	5.391668416850097E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.999966544974433	WITHOUT_CLASSIFICATION	3.345502556700508E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.999961782474746	WITHOUT_CLASSIFICATION	3.821752525405968E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999407321300968	WITHOUT_CLASSIFICATION	5.9267869903146994E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999604825890849	WITHOUT_CLASSIFICATION	3.951741091509109E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999946912673002	WITHOUT_CLASSIFICATION	5.308732699781423E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999614257280192	WITHOUT_CLASSIFICATION	3.8574271980839414E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999726860567526	WITHOUT_CLASSIFICATION	2.7313943247398097E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999934495255451	WITHOUT_CLASSIFICATION	6.550474454887639E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999000718542264	WITHOUT_CLASSIFICATION	9.992814577370864E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999417411692483	WITHOUT_CLASSIFICATION	5.825883075163755E-5	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9880218563575037	WITHOUT_CLASSIFICATION	0.011978143642496263	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999736641503927	WITHOUT_CLASSIFICATION	2.6335849607305147E-5	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999963961225078	WITHOUT_CLASSIFICATION	3.6038774923483664E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999389418033067	WITHOUT_CLASSIFICATION	6.1058196693332E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999950299730955	WITHOUT_CLASSIFICATION	4.970026904468673E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999778506044379	WITHOUT_CLASSIFICATION	2.2149395562023164E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999974650404216	WITHOUT_CLASSIFICATION	2.5349595784062592E-5	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999669928772328	WITHOUT_CLASSIFICATION	3.300712276720267E-4	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996015941139	WITHOUT_CLASSIFICATION	3.984058861123069E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996015941139	WITHOUT_CLASSIFICATION	3.984058861123069E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999614089092249	WITHOUT_CLASSIFICATION	3.859109077515935E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999826430656156	WITHOUT_CLASSIFICATION	1.7356934384434278E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999752493689757	WITHOUT_CLASSIFICATION	2.47506310242935E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999769441863349	WITHOUT_CLASSIFICATION	2.305581366516695E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999785838240919	WITHOUT_CLASSIFICATION	2.1416175908146424E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9993352496045007	WITHOUT_CLASSIFICATION	6.647503954992403E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999715076909033	WITHOUT_CLASSIFICATION	2.849230909676724E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995821975368	WITHOUT_CLASSIFICATION	4.178024632391998E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999095594712996	WITHOUT_CLASSIFICATION	9.044052870044431E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999601272885532	WITHOUT_CLASSIFICATION	3.9872711446742976E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999487917272434	WITHOUT_CLASSIFICATION	5.120827275651879E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998369642491697	WITHOUT_CLASSIFICATION	1.6303575083025082E-4	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999838008048846	WITHOUT_CLASSIFICATION	1.619919511544503E-5	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998619005731464	WITHOUT_CLASSIFICATION	1.3809942685364957E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999355557539606	WITHOUT_CLASSIFICATION	6.444424603926475E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999355557539606	WITHOUT_CLASSIFICATION	6.444424603926475E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999680167626233	WITHOUT_CLASSIFICATION	3.198323737670448E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999323825748639	WITHOUT_CLASSIFICATION	6.76174251359737E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999559267255763	WITHOUT_CLASSIFICATION	4.407327442372435E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999998787872058	WITHOUT_CLASSIFICATION	1.212127941997766E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999432916531606	WITHOUT_CLASSIFICATION	5.670834683924268E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257331485496	WITHOUT_CLASSIFICATION	7.426685145041373E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999603564513867	WITHOUT_CLASSIFICATION	3.964354861327853E-5	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999827202707648	WITHOUT_CLASSIFICATION	1.7279729235151694E-5	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999812503597847	WITHOUT_CLASSIFICATION	1.8749640215248738E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999967763253643	WITHOUT_CLASSIFICATION	3.2236746356420494E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999825379728225	WITHOUT_CLASSIFICATION	1.7462027177494955E-5	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999811718544003	WITHOUT_CLASSIFICATION	1.8828145599725825E-5	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998273396688135	WITHOUT_CLASSIFICATION	1.7266033118650792E-4	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999894865460733	WITHOUT_CLASSIFICATION	1.0513453926734062E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999655067726153	WITHOUT_CLASSIFICATION	3.4493227384686014E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997488663223134	WITHOUT_CLASSIFICATION	2.511336776866647E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999706177946557	WITHOUT_CLASSIFICATION	2.9382205344337638E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999759477817242	WITHOUT_CLASSIFICATION	2.4052218275900775E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999227395930766	WITHOUT_CLASSIFICATION	7.726040692334692E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999998970309818	WITHOUT_CLASSIFICATION	1.0296901819816978E-6	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999140917971204	WITHOUT_CLASSIFICATION	8.590820287950718E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999955288358798	WITHOUT_CLASSIFICATION	4.4711641201380045E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999850052591591	WITHOUT_CLASSIFICATION	1.4994740841017512E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990493309682	WITHOUT_CLASSIFICATION	9.506690318877844E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999593467102204	WITHOUT_CLASSIFICATION	4.065328977968373E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.9999598833349823	WITHOUT_CLASSIFICATION	4.0116665017667894E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997486732113292	WITHOUT_CLASSIFICATION	2.51326788670732E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999203743539381	WITHOUT_CLASSIFICATION	7.962564606183146E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999800057049327	WITHOUT_CLASSIFICATION	1.9994295067341727E-5	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998947510830712	WITHOUT_CLASSIFICATION	1.0524891692880265E-4	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999008981964359	WITHOUT_CLASSIFICATION	9.910180356414751E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999870674443327	WITHOUT_CLASSIFICATION	1.2932555667262046E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999574014551652	WITHOUT_CLASSIFICATION	4.259854483477644E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999923224085152	WITHOUT_CLASSIFICATION	7.677591484840246E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999864812432492	WITHOUT_CLASSIFICATION	1.3518756750769313E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999972516056025	WITHOUT_CLASSIFICATION	2.7483943974941276E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999944075813592	WITHOUT_CLASSIFICATION	5.592418640837051E-6	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999864392987551	WITHOUT_CLASSIFICATION	1.3560701244919351E-5	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999881076641761	WITHOUT_CLASSIFICATION	1.189233582395188E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999390979658537	WITHOUT_CLASSIFICATION	6.0902034146363235E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9993646502165449	WITHOUT_CLASSIFICATION	6.353497834550273E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9996788179248421	WITHOUT_CLASSIFICATION	3.211820751578952E-4	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999363521977391	WITHOUT_CLASSIFICATION	6.36478022608431E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999363521977391	WITHOUT_CLASSIFICATION	6.36478022608431E-5	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999840776109608	WITHOUT_CLASSIFICATION	1.5922389039292115E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999828163767974	WITHOUT_CLASSIFICATION	1.7183623202621972E-5	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9997052366884798	WITHOUT_CLASSIFICATION	2.947633115202172E-4	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999509038217348	WITHOUT_CLASSIFICATION	4.909617826516694E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9997354919917516	WITHOUT_CLASSIFICATION	2.645080082484035E-4	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999933376955393	WITHOUT_CLASSIFICATION	6.662304460700079E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999028079025998	WITHOUT_CLASSIFICATION	9.719209740027227E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998781449141289	WITHOUT_CLASSIFICATION	1.2185508587112052E-4	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999965400927394	WITHOUT_CLASSIFICATION	3.4599072606222268E-6	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114166783862	WITHOUT_CLASSIFICATION	8.858332161379789E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996631908737411	WITHOUT_CLASSIFICATION	3.368091262589244E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9995484151167322	WITHOUT_CLASSIFICATION	4.515848832678386E-4	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999990360923837	WITHOUT_CLASSIFICATION	9.639076162748161E-7	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999885931245631	WITHOUT_CLASSIFICATION	1.140687543691726E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9994385122779731	WITHOUT_CLASSIFICATION	5.614877220269292E-4	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999979820349123	WITHOUT_CLASSIFICATION	2.017965087716521E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999978457772396	WITHOUT_CLASSIFICATION	2.1542227603405602E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999575753487997	WITHOUT_CLASSIFICATION	4.2424651200285304E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999949126256598	WITHOUT_CLASSIFICATION	5.087374340195531E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999953008742571	WITHOUT_CLASSIFICATION	4.699125742897242E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999993067973828	WITHOUT_CLASSIFICATION	6.932026171305048E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998781919045145	WITHOUT_CLASSIFICATION	1.2180809548550249E-4	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9996694186393107	WITHOUT_CLASSIFICATION	3.3058136068933613E-4	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999360636375219	WITHOUT_CLASSIFICATION	6.393636247808403E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999726582758032	WITHOUT_CLASSIFICATION	2.7341724196925794E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999847766299809	WITHOUT_CLASSIFICATION	1.522337001903867E-5	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999689654841232	WITHOUT_CLASSIFICATION	3.103451587685966E-5	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999881139068741	WITHOUT_CLASSIFICATION	1.188609312584876E-5	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998737543746828	WITHOUT_CLASSIFICATION	1.2624562531720615E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999850821323139	WITHOUT_CLASSIFICATION	1.491786768613547E-5	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999953370666044	WITHOUT_CLASSIFICATION	4.66293339557596E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999891303875913	WITHOUT_CLASSIFICATION	1.0869612408710156E-5	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999972595996769	WITHOUT_CLASSIFICATION	2.7404003231477052E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999996025386628	WITHOUT_CLASSIFICATION	3.974613372047882E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999672082077263	WITHOUT_CLASSIFICATION	3.2791792273610465E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999468430914087	WITHOUT_CLASSIFICATION	5.3156908591253955E-5	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999892591042765	WITHOUT_CLASSIFICATION	1.0740895723475645E-5	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999625836106115	WITHOUT_CLASSIFICATION	3.7416389388434984E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997459630878114	WITHOUT_CLASSIFICATION	2.540369121886684E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999888801996165	WITHOUT_CLASSIFICATION	1.1119800383410683E-5	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999875359146826	WITHOUT_CLASSIFICATION	1.2464085317399087E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999768055329966	WITHOUT_CLASSIFICATION	2.3194467003324678E-5	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999996648130282	WITHOUT_CLASSIFICATION	3.351869718687477E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999966600287904	WITHOUT_CLASSIFICATION	3.3399712095266955E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999518879114205	WITHOUT_CLASSIFICATION	4.811208857938665E-5	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9995118553308996	WITHOUT_CLASSIFICATION	4.8814466910036917E-4	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9998045191548032	WITHOUT_CLASSIFICATION	1.9548084519677755E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999880883173737	WITHOUT_CLASSIFICATION	1.1911682626159952E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999838008048846	WITHOUT_CLASSIFICATION	1.619919511544503E-5	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999743881681038	WITHOUT_CLASSIFICATION	2.561183189616806E-5	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999930338082718	WITHOUT_CLASSIFICATION	6.966191728341045E-6	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998446611749521	WITHOUT_CLASSIFICATION	1.5533882504803817E-4	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999970049742244	WITHOUT_CLASSIFICATION	2.9950257757406216E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999838607115339	WITHOUT_CLASSIFICATION	1.6139288466171163E-5	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999848495727727	WITHOUT_CLASSIFICATION	1.515042722747013E-5	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9996779333737614	WITHOUT_CLASSIFICATION	3.220666262386167E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9827670147379087	WITHOUT_CLASSIFICATION	0.017232985262091192	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999200572691349	WITHOUT_CLASSIFICATION	7.994273086517414E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999607957913093	WITHOUT_CLASSIFICATION	3.920420869070119E-5	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999874157193229	WITHOUT_CLASSIFICATION	1.2584280677011096E-5	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9977675946676295	WITHOUT_CLASSIFICATION	0.0022324053323705844	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999468996101732	WITHOUT_CLASSIFICATION	5.310038982678995E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999192813725211	WITHOUT_CLASSIFICATION	8.071862747904578E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9996080331141598	WITHOUT_CLASSIFICATION	3.9196688584013014E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655155519285	WITHOUT_CLASSIFICATION	3.3448444807149014E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999970175644542	WITHOUT_CLASSIFICATION	2.9824355458019736E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999989975131337	WITHOUT_CLASSIFICATION	1.0024868662156844E-6	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999993263631235	WITHOUT_CLASSIFICATION	6.736368764469341E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655155519285	WITHOUT_CLASSIFICATION	3.3448444807149014E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997030198365164	WITHOUT_CLASSIFICATION	2.9698016348359273E-4	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999822268890258	WITHOUT_CLASSIFICATION	1.777311097421751E-5	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999900871485146	WITHOUT_CLASSIFICATION	9.912851485359117E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999812587113845	WITHOUT_CLASSIFICATION	1.8741288615502482E-4	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997430903429185	WITHOUT_CLASSIFICATION	2.569096570814128E-4	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999582834805744	WITHOUT_CLASSIFICATION	4.171651942569118E-5	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999942077981951	WITHOUT_CLASSIFICATION	5.792201804936824E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9976944891679591	WITHOUT_CLASSIFICATION	0.002305510832040939	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998219560234001	WITHOUT_CLASSIFICATION	1.780439765999735E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999993142506182	WITHOUT_CLASSIFICATION	6.8574938179951366E-6	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996517309595119	WITHOUT_CLASSIFICATION	3.482690404881814E-4	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999562238583238	WITHOUT_CLASSIFICATION	4.377614167619551E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999768031954719	WITHOUT_CLASSIFICATION	2.3196804528089324E-5	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999277222852192	WITHOUT_CLASSIFICATION	7.227771478078544E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999890400842555	WITHOUT_CLASSIFICATION	1.095991574442284E-5	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999535303526326	WITHOUT_CLASSIFICATION	4.6469647367291255E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999879631435004	WITHOUT_CLASSIFICATION	1.2036856499594254E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999981901157438	WITHOUT_CLASSIFICATION	1.8098842562505008E-6	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999960225205734	WITHOUT_CLASSIFICATION	3.977479426529859E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990130904295164	WITHOUT_CLASSIFICATION	9.869095704836308E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.999927445502294	WITHOUT_CLASSIFICATION	7.255449770603204E-5	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999933299934777	WITHOUT_CLASSIFICATION	6.6700065223859195E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999701279728898	WITHOUT_CLASSIFICATION	2.987202711027674E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999905809465596	WITHOUT_CLASSIFICATION	9.41905344039322E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999991732018717	WITHOUT_CLASSIFICATION	8.267981282967771E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999947611368695	WITHOUT_CLASSIFICATION	5.238863130502952E-6	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999973465341579	WITHOUT_CLASSIFICATION	2.653465842095874E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998877111031822	WITHOUT_CLASSIFICATION	1.1228889681785505E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9997196616549925	WITHOUT_CLASSIFICATION	2.803383450075171E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999978076643552	WITHOUT_CLASSIFICATION	2.1923356448557526E-6	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9998937596802737	WITHOUT_CLASSIFICATION	1.0624031972628199E-4	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999955134988407	WITHOUT_CLASSIFICATION	4.486501159259664E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999539935368297	WITHOUT_CLASSIFICATION	4.600646317039327E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999754714621296	WITHOUT_CLASSIFICATION	2.4528537870359996E-5	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999932983657119	WITHOUT_CLASSIFICATION	6.701634288063845E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999416537314465	WITHOUT_CLASSIFICATION	5.83462685534709E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999959319515752	WITHOUT_CLASSIFICATION	4.068048424827166E-6	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999662207040697	WITHOUT_CLASSIFICATION	3.377929593031885E-5	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999920571059686	WITHOUT_CLASSIFICATION	7.942894031451572E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999922264570549	WITHOUT_CLASSIFICATION	7.773542945048602E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999947101471598	WITHOUT_CLASSIFICATION	5.289852840190238E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999725280847488	WITHOUT_CLASSIFICATION	2.7471915251192216E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999725280847488	WITHOUT_CLASSIFICATION	2.7471915251192216E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996908706792543	WITHOUT_CLASSIFICATION	3.091293207455951E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999808290671799	WITHOUT_CLASSIFICATION	1.917093282013419E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999600130607285	WITHOUT_CLASSIFICATION	3.99869392715487E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999990891904974	WITHOUT_CLASSIFICATION	9.10809502592623E-6	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999476733031554	WITHOUT_CLASSIFICATION	5.232669684461464E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999476733031554	WITHOUT_CLASSIFICATION	5.232669684461464E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999433369082954	WITHOUT_CLASSIFICATION	5.6663091704495014E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999688307180743	WITHOUT_CLASSIFICATION	3.116928192580559E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999348268346575	WITHOUT_CLASSIFICATION	6.517316534248385E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999878792899266	WITHOUT_CLASSIFICATION	1.2120710073446393E-5	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999534793337199	WITHOUT_CLASSIFICATION	4.652066628012882E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999689872392077	WITHOUT_CLASSIFICATION	3.1012760792253266E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999383095523169	WITHOUT_CLASSIFICATION	6.169044768311303E-5	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999538032148465	WITHOUT_CLASSIFICATION	4.619678515348251E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999974400630856	WITHOUT_CLASSIFICATION	2.5599369143777874E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999374671905216	WITHOUT_CLASSIFICATION	6.253280947842921E-5	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999964867709338	WITHOUT_CLASSIFICATION	3.513229066092186E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772417496862	WITHOUT_CLASSIFICATION	2.2758250313797726E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772417496862	WITHOUT_CLASSIFICATION	2.2758250313797726E-4	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999535303526326	WITHOUT_CLASSIFICATION	4.6469647367291255E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999389912888863	WITHOUT_CLASSIFICATION	6.1008711113833965E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.9999390337527454	WITHOUT_CLASSIFICATION	6.096624725449362E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999202224962288	WITHOUT_CLASSIFICATION	7.977750377120954E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998861187556635	WITHOUT_CLASSIFICATION	1.1388124433651885E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999681824593133	WITHOUT_CLASSIFICATION	3.181754068673639E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999583968683008	WITHOUT_CLASSIFICATION	4.160313169927176E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999942533061622	WITHOUT_CLASSIFICATION	5.746693837748557E-6	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999569506709894	WITHOUT_CLASSIFICATION	4.30493290106012E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998641286392602	WITHOUT_CLASSIFICATION	1.3587136073973607E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999993142506182	WITHOUT_CLASSIFICATION	6.8574938179951366E-6	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9996315602848714	WITHOUT_CLASSIFICATION	3.684397151285263E-4	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999176231465108	WITHOUT_CLASSIFICATION	8.237685348920581E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999253425776262	WITHOUT_CLASSIFICATION	7.465742237381973E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999931728413273	WITHOUT_CLASSIFICATION	6.827158672763041E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999382109155007	WITHOUT_CLASSIFICATION	6.178908449926861E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999089560848993	WITHOUT_CLASSIFICATION	9.104391510068513E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999862617899267	WITHOUT_CLASSIFICATION	1.3738210073313365E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999538455317658	WITHOUT_CLASSIFICATION	4.615446823424409E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999588273237863	WITHOUT_CLASSIFICATION	4.117267621384427E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998478773856688	WITHOUT_CLASSIFICATION	1.5212261433112647E-4	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998478773856688	WITHOUT_CLASSIFICATION	1.5212261433112647E-4	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999525002074638	WITHOUT_CLASSIFICATION	4.749979253620296E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999997936109073	WITHOUT_CLASSIFICATION	2.0638909267664107E-7	TEST
package	WITHOUT_CLASSIFICATION	0.9999464194675125	WITHOUT_CLASSIFICATION	5.3580532487547943E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997851059065116	WITHOUT_CLASSIFICATION	2.1489409348835595E-4	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9998462925458603	WITHOUT_CLASSIFICATION	1.5370745413957357E-4	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999351480451149	WITHOUT_CLASSIFICATION	6.485195488513218E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999880330967578	WITHOUT_CLASSIFICATION	1.1966903242157752E-5	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999996316016249	WITHOUT_CLASSIFICATION	3.683983751908551E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999477830124186	WITHOUT_CLASSIFICATION	5.221698758141593E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999615966589683	WITHOUT_CLASSIFICATION	3.84033410316251E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110807662077	WITHOUT_CLASSIFICATION	8.891923379232568E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999904035181903	WITHOUT_CLASSIFICATION	9.596481809710122E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999878352271772	WITHOUT_CLASSIFICATION	1.2164772822854776E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999679566107241	WITHOUT_CLASSIFICATION	3.204338927583274E-5	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998163162823474	WITHOUT_CLASSIFICATION	1.8368371765266827E-4	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999942010388159	WITHOUT_CLASSIFICATION	5.798961184068717E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995116537019	WITHOUT_CLASSIFICATION	4.883462980699535E-7	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999982500776536	WITHOUT_CLASSIFICATION	1.7499223464024333E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997330340878905	WITHOUT_CLASSIFICATION	2.669659121095107E-4	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999519646798694	WITHOUT_CLASSIFICATION	4.803532013060203E-5	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999931889993299	WITHOUT_CLASSIFICATION	6.81100067018259E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999690890391292	WITHOUT_CLASSIFICATION	3.091096087082203E-5	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999991022821407	WITHOUT_CLASSIFICATION	8.977178593147575E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999076001980151	WITHOUT_CLASSIFICATION	9.23998019849876E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999046839203259	WITHOUT_CLASSIFICATION	9.531607967410108E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999046839203259	WITHOUT_CLASSIFICATION	9.531607967410108E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999815328152192	WITHOUT_CLASSIFICATION	1.846718478080847E-4	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999492511007121	WITHOUT_CLASSIFICATION	5.074889928791975E-5	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999205288236604	WITHOUT_CLASSIFICATION	7.9471176339607E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999973333313752	WITHOUT_CLASSIFICATION	2.6666686247905986E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999767312122991	WITHOUT_CLASSIFICATION	2.326878770094052E-5	TEST
