test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991011962208074	WITHOUT_CLASSIFICATION	8.988037791925072E-4	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9997742590230454	WITHOUT_CLASSIFICATION	2.257409769546605E-4	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999929255261565	WITHOUT_CLASSIFICATION	7.074473843510386E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952887948328	WITHOUT_CLASSIFICATION	4.711205167259392E-6	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952887948328	WITHOUT_CLASSIFICATION	4.711205167259392E-6	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999970111532372	WITHOUT_CLASSIFICATION	2.9888467627883535E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999581606042618	WITHOUT_CLASSIFICATION	4.18393957381637E-5	TEST
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999631019716452	WITHOUT_CLASSIFICATION	3.689802835478985E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905016006074	WITHOUT_CLASSIFICATION	9.498399392582215E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999878665516044	WITHOUT_CLASSIFICATION	1.2133448395668454E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999878665516044	WITHOUT_CLASSIFICATION	1.2133448395668454E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999821339468714	WITHOUT_CLASSIFICATION	1.786605312862057E-5	TEST
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999899947960808	WITHOUT_CLASSIFICATION	1.0005203919347293E-5	TEST
decode row selection...	WITHOUT_CLASSIFICATION	0.9999762607941979	WITHOUT_CLASSIFICATION	2.373920580213417E-5	TEST
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999725376771209	WITHOUT_CLASSIFICATION	2.7462322879157817E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999970387957561	WITHOUT_CLASSIFICATION	2.96120424386577E-6	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
ROW ID	WITHOUT_CLASSIFICATION	0.9999840526663923	WITHOUT_CLASSIFICATION	1.594733360770938E-5	TEST
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999730662769868	WITHOUT_CLASSIFICATION	2.6933723013242837E-5	TEST
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999836335778715	WITHOUT_CLASSIFICATION	1.6366422128534302E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999983950364714	WITHOUT_CLASSIFICATION	1.6049635285955615E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999983950364714	WITHOUT_CLASSIFICATION	1.6049635285955615E-5	TEST
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999671652203889	WITHOUT_CLASSIFICATION	3.2834779611223415E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999839505659258	WITHOUT_CLASSIFICATION	1.6049434074202084E-5	TEST
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999498571449434	WITHOUT_CLASSIFICATION	5.0142855056511423E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999429686358436	WITHOUT_CLASSIFICATION	5.7031364156229006E-5	TEST
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.999952378447005	WITHOUT_CLASSIFICATION	4.762155299507473E-5	TEST
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999989420659382	WITHOUT_CLASSIFICATION	1.057934061844962E-6	TEST
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999265669972457	WITHOUT_CLASSIFICATION	7.343300275435603E-5	TEST
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999853123698124	WITHOUT_CLASSIFICATION	1.4687630187644376E-5	TEST
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999903434637762	WITHOUT_CLASSIFICATION	9.656536223749882E-6	TEST
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999798305522505	WITHOUT_CLASSIFICATION	2.0169447749476835E-5	TEST
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999716441556469	WITHOUT_CLASSIFICATION	2.8355844353214163E-5	TEST
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9992941170686702	WITHOUT_CLASSIFICATION	7.058829313297078E-4	TEST
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999991170614625	WITHOUT_CLASSIFICATION	8.829385375083476E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999857030763296	WITHOUT_CLASSIFICATION	1.429692367046786E-5	TEST
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999788252266341	WITHOUT_CLASSIFICATION	2.1174773365978866E-5	TEST
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571771579435	WITHOUT_CLASSIFICATION	4.2822842056476146E-5	TEST
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999875835342179	WITHOUT_CLASSIFICATION	1.2416465782069515E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999380544951375	WITHOUT_CLASSIFICATION	6.194550486248843E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999843231705634	WITHOUT_CLASSIFICATION	1.5676829436636765E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999843231705634	WITHOUT_CLASSIFICATION	1.5676829436636765E-5	TEST
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999875835342179	WITHOUT_CLASSIFICATION	1.2416465782069515E-5	TEST
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9997022150174741	WITHOUT_CLASSIFICATION	2.977849825258664E-4	TEST
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999618661052356	WITHOUT_CLASSIFICATION	3.8133894764422604E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809363517439	WITHOUT_CLASSIFICATION	1.9063648256131806E-5	TEST
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999984617490332	WITHOUT_CLASSIFICATION	1.538250966912032E-6	TEST
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999991812728273	WITHOUT_CLASSIFICATION	8.187271727012247E-7	TEST
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9991332515830531	WITHOUT_CLASSIFICATION	8.667484169469141E-4	TEST
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9999348560359321	WITHOUT_CLASSIFICATION	6.514396406786083E-5	TEST
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999922197474151	WITHOUT_CLASSIFICATION	7.780252584807614E-6	TEST
Never evict this node	WITHOUT_CLASSIFICATION	0.9999471418872498	WITHOUT_CLASSIFICATION	5.285811275021059E-5	TEST
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999856728764682	WITHOUT_CLASSIFICATION	1.432712353191831E-5	TEST
60 seconds	WITHOUT_CLASSIFICATION	0.9999843231705634	WITHOUT_CLASSIFICATION	1.5676829436636765E-5	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999956081238851	WITHOUT_CLASSIFICATION	4.391876114826171E-6	TEST
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999201337656011	WITHOUT_CLASSIFICATION	7.986623439889602E-5	TEST
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999861249511885	WITHOUT_CLASSIFICATION	1.3875048811485639E-5	TEST
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999904569481748	WITHOUT_CLASSIFICATION	9.543051825212538E-6	TEST
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999930114278014	WITHOUT_CLASSIFICATION	6.988572198727104E-6	TEST
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999868337965175	WITHOUT_CLASSIFICATION	1.316620348242045E-5	TEST
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999517111961892	WITHOUT_CLASSIFICATION	4.8288803810817666E-5	TEST
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999795258718781	WITHOUT_CLASSIFICATION	2.047412812188217E-5	TEST
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999441550364798	WITHOUT_CLASSIFICATION	5.5844963520276066E-5	TEST
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999996774093234	WITHOUT_CLASSIFICATION	3.225906766107246E-6	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969419913275	WITHOUT_CLASSIFICATION	3.058008672460347E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999953061181031	WITHOUT_CLASSIFICATION	4.6938818968975965E-5	TEST
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999866175036695	WITHOUT_CLASSIFICATION	1.3382496330493664E-5	TEST
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999885707602272	WITHOUT_CLASSIFICATION	1.1429239772852635E-5	TEST
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999987850520352	WITHOUT_CLASSIFICATION	1.2149479647296701E-6	TEST
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999704338792882	WITHOUT_CLASSIFICATION	2.9566120711779336E-5	TEST
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999992454464331	WITHOUT_CLASSIFICATION	7.5455356689744295E-6	TEST
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999030946906796	WITHOUT_CLASSIFICATION	9.690530932030488E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999989012383946	WITHOUT_CLASSIFICATION	1.0987616054362323E-6	TEST
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999926225032661	WITHOUT_CLASSIFICATION	7.377496733776994E-6	TEST
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997808587110684	WITHOUT_CLASSIFICATION	2.1914128893172838E-4	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999704144932362	WITHOUT_CLASSIFICATION	2.9585506763688886E-5	TEST
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999814494370111	WITHOUT_CLASSIFICATION	1.855056298894453E-5	TEST
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999742453430644	WITHOUT_CLASSIFICATION	2.575465693544E-5	TEST
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999704144932362	WITHOUT_CLASSIFICATION	2.9585506763688886E-5	TEST
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999994471986248	WITHOUT_CLASSIFICATION	5.528013752474354E-7	TEST
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999360433925442	WITHOUT_CLASSIFICATION	6.395660745586303E-5	TEST
ignore!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999793028315166	WITHOUT_CLASSIFICATION	2.0697168483424646E-5	TEST
construct the cache	WITHOUT_CLASSIFICATION	0.9999933583853029	WITHOUT_CLASSIFICATION	6.6416146970114615E-6	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999772813551936	WITHOUT_CLASSIFICATION	2.2718644806421106E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999772813551936	WITHOUT_CLASSIFICATION	2.2718644806421106E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999825909673339	WITHOUT_CLASSIFICATION	1.740903266613843E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999551551460629	WITHOUT_CLASSIFICATION	4.484485393701074E-5	TEST
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999832361181201	WITHOUT_CLASSIFICATION	1.67638818798357E-5	TEST
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999653729507967	WITHOUT_CLASSIFICATION	3.462704920328544E-5	TEST
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999934322604166	WITHOUT_CLASSIFICATION	6.567739583404082E-6	TEST
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999803765286972	WITHOUT_CLASSIFICATION	1.9623471302868448E-5	TEST
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999781163918657	WITHOUT_CLASSIFICATION	2.1883608134192625E-5	TEST
return the connection	WITHOUT_CLASSIFICATION	0.9999960509984184	WITHOUT_CLASSIFICATION	3.949001581681305E-6	TEST
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999988386952737	WITHOUT_CLASSIFICATION	1.1613047263114033E-5	TEST
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999847307241277	WITHOUT_CLASSIFICATION	1.526927587225773E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999946360636005	WITHOUT_CLASSIFICATION	5.3639363995042026E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999946360636005	WITHOUT_CLASSIFICATION	5.3639363995042026E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999877997984272	WITHOUT_CLASSIFICATION	1.2200201572706967E-5	TEST
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999949303367692	WITHOUT_CLASSIFICATION	5.069663230775697E-6	TEST
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999816572859244	WITHOUT_CLASSIFICATION	1.8342714075735643E-5	TEST
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999946360636005	WITHOUT_CLASSIFICATION	5.3639363995042026E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999877997984272	WITHOUT_CLASSIFICATION	1.2200201572706967E-5	TEST
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999877997984272	WITHOUT_CLASSIFICATION	1.2200201572706967E-5	TEST
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999825610488701	WITHOUT_CLASSIFICATION	1.7438951129827975E-5	TEST
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999780627669221	WITHOUT_CLASSIFICATION	2.193723307789746E-5	TEST
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999790596209827	WITHOUT_CLASSIFICATION	2.0940379017243923E-5	TEST
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999558581811968	WITHOUT_CLASSIFICATION	4.4141818803188856E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999778783350189	WITHOUT_CLASSIFICATION	2.2121664981043663E-5	TEST
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999778783350189	WITHOUT_CLASSIFICATION	2.2121664981043663E-5	TEST
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999857210465444	WITHOUT_CLASSIFICATION	1.4278953455568534E-5	TEST
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999723255181182	WITHOUT_CLASSIFICATION	2.7674481881843232E-5	TEST
default is POJO	WITHOUT_CLASSIFICATION	0.9999837408177752	WITHOUT_CLASSIFICATION	1.6259182224848985E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999895673842983	WITHOUT_CLASSIFICATION	1.0432615701582152E-5	TEST
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999895673842983	WITHOUT_CLASSIFICATION	1.0432615701582152E-5	TEST
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999776601569571	WITHOUT_CLASSIFICATION	2.2339843042974162E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999606647465065	WITHOUT_CLASSIFICATION	3.9335253493504455E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996795345092507	WITHOUT_CLASSIFICATION	3.204654907492557E-4	TEST
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999838805786769	WITHOUT_CLASSIFICATION	1.6119421323068982E-5	TEST
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9991786963463853	WITHOUT_CLASSIFICATION	8.213036536146147E-4	TEST
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999950913428609	WITHOUT_CLASSIFICATION	4.908657139014724E-6	TEST
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999477549532099	WITHOUT_CLASSIFICATION	5.224504679014101E-5	TEST
sort first by role name	WITHOUT_CLASSIFICATION	0.9999477829929181	WITHOUT_CLASSIFICATION	5.2217007082001664E-5	TEST
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996795345092507	WITHOUT_CLASSIFICATION	3.204654907492557E-4	TEST
then by fk	WITHOUT_CLASSIFICATION	0.9999477104064046	WITHOUT_CLASSIFICATION	5.2289593595433664E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999861833344952	WITHOUT_CLASSIFICATION	1.3816665504810185E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999861833344952	WITHOUT_CLASSIFICATION	1.3816665504810185E-5	TEST
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9998191480644898	WITHOUT_CLASSIFICATION	1.8085193551026254E-4	TEST
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999630485445424	WITHOUT_CLASSIFICATION	3.6951455457600674E-4	TEST
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999694760100256	WITHOUT_CLASSIFICATION	3.052398997443149E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997327817437326	WITHOUT_CLASSIFICATION	2.6721825626743214E-4	TEST
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999363355606693	WITHOUT_CLASSIFICATION	6.366443933066014E-5	TEST
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999501301268028	WITHOUT_CLASSIFICATION	4.986987319719145E-5	TEST
then by id	WITHOUT_CLASSIFICATION	0.9999362762789006	WITHOUT_CLASSIFICATION	6.372372109942972E-5	TEST
to be safe...	WITHOUT_CLASSIFICATION	0.9999907523300298	WITHOUT_CLASSIFICATION	9.247669970179078E-6	TEST
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999887211679113	WITHOUT_CLASSIFICATION	1.1278832088868707E-5	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999976769000213	WITHOUT_CLASSIFICATION	2.323099978795922E-6	TEST
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999976769000213	WITHOUT_CLASSIFICATION	2.323099978795922E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991011962208074	WITHOUT_CLASSIFICATION	8.988037791925072E-4	TEST
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999930566101998	WITHOUT_CLASSIFICATION	6.94338980031341E-6	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
invokespecial	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
aload_1 load bean	WITHOUT_CLASSIFICATION	0.99998231529417	WITHOUT_CLASSIFICATION	1.768470583001135E-5	TEST
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999842285908992	WITHOUT_CLASSIFICATION	1.5771409100896363E-5	TEST
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999864880812405	WITHOUT_CLASSIFICATION	1.3511918759402496E-5	TEST
aload_2 args	WITHOUT_CLASSIFICATION	0.9999835647227809	WITHOUT_CLASSIFICATION	1.6435277219116126E-5	TEST
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999951545395505	WITHOUT_CLASSIFICATION	4.845460449508716E-5	TEST
new	WITHOUT_CLASSIFICATION	0.9999737112050243	WITHOUT_CLASSIFICATION	2.6288794975645215E-5	TEST
dup	WITHOUT_CLASSIFICATION	0.9999839945510538	WITHOUT_CLASSIFICATION	1.6005448946175134E-5	TEST
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999989664083767	WITHOUT_CLASSIFICATION	1.0335916233065368E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
aastore args	WITHOUT_CLASSIFICATION	0.9999835647227809	WITHOUT_CLASSIFICATION	1.6435277219116126E-5	TEST
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998029935611377	WITHOUT_CLASSIFICATION	1.9700643886238285E-4	TEST
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.999983462059263	WITHOUT_CLASSIFICATION	1.653794073700748E-5	TEST
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999850655936021	WITHOUT_CLASSIFICATION	1.4934406397796903E-5	TEST
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999989460952169	WITHOUT_CLASSIFICATION	1.0539047831044206E-5	TEST
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999875736227524	WITHOUT_CLASSIFICATION	1.2426377247716214E-5	TEST
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999952887948328	WITHOUT_CLASSIFICATION	4.711205167259392E-6	TEST
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999826579720411	WITHOUT_CLASSIFICATION	1.7342027958927048E-5	TEST
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999866898608141	WITHOUT_CLASSIFICATION	1.3310139185896052E-5	TEST
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999907407497205	WITHOUT_CLASSIFICATION	9.25925027958573E-6	TEST
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999891893299886	WITHOUT_CLASSIFICATION	1.0810670011423435E-5	TEST
iconst_i	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aaload	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999839494623364	WITHOUT_CLASSIFICATION	1.605053766359171E-5	TEST
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999697121799913	WITHOUT_CLASSIFICATION	3.028782000877047E-5	TEST
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999701803935258	WITHOUT_CLASSIFICATION	2.981960647420771E-5	TEST
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999954908097277	WITHOUT_CLASSIFICATION	4.509190272240264E-6	TEST
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999832444339293	WITHOUT_CLASSIFICATION	1.675556607073252E-5	TEST
register in exception table	WITHOUT_CLASSIFICATION	0.9999881664764559	WITHOUT_CLASSIFICATION	1.183352354404575E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aload_0	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999839945510538	WITHOUT_CLASSIFICATION	1.6005448946175134E-5	TEST
invokevirtual	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999839494623364	WITHOUT_CLASSIFICATION	1.605053766359171E-5	TEST
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999970111532372	WITHOUT_CLASSIFICATION	2.9888467627883535E-5	TEST
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999834433176279	WITHOUT_CLASSIFICATION	1.6556682372108215E-5	TEST
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999959863002212	WITHOUT_CLASSIFICATION	4.01369977879824E-5	TEST
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999783302588504	WITHOUT_CLASSIFICATION	2.1669741149596612E-5	TEST
iload_3 i	WITHOUT_CLASSIFICATION	0.999984052952386	WITHOUT_CLASSIFICATION	1.594704761394952E-5	TEST
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
athrow	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999976622365305	WITHOUT_CLASSIFICATION	2.3377634694979174E-5	TEST
swallow	WITHOUT_CLASSIFICATION	0.999984089100735	WITHOUT_CLASSIFICATION	1.5910899264943E-5	TEST
local variable | this |	WITHOUT_CLASSIFICATION	0.9998445348476919	WITHOUT_CLASSIFICATION	1.554651523080777E-4	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999457523176387	WITHOUT_CLASSIFICATION	5.424768236133086E-5	TEST
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999457523176387	WITHOUT_CLASSIFICATION	5.424768236133086E-5	TEST
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999698879049493	WITHOUT_CLASSIFICATION	3.0112095050762023E-5	TEST
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999904671636516	WITHOUT_CLASSIFICATION	9.53283634842036E-6	TEST
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997989504850648	WITHOUT_CLASSIFICATION	2.010495149352928E-4	TEST
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999729612017573	WITHOUT_CLASSIFICATION	2.7038798242793518E-5	TEST
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999697838172598	WITHOUT_CLASSIFICATION	3.0216182740221938E-5	TEST
case of non-static field	WITHOUT_CLASSIFICATION	0.9999816354003146	WITHOUT_CLASSIFICATION	1.8364599685396727E-5	TEST
getfield get each field	WITHOUT_CLASSIFICATION	0.9999871728318508	WITHOUT_CLASSIFICATION	1.2827168149255451E-5	TEST
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999581606042618	WITHOUT_CLASSIFICATION	4.18393957381637E-5	TEST
ifnonnull	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999974067223053	WITHOUT_CLASSIFICATION	2.5932776947200174E-6	TEST
return each type	WITHOUT_CLASSIFICATION	0.9999974067223053	WITHOUT_CLASSIFICATION	2.5932776947200174E-6	TEST
store_1 each type	WITHOUT_CLASSIFICATION	0.9999938699787035	WITHOUT_CLASSIFICATION	6.130021296429763E-6	TEST
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999871960378147	WITHOUT_CLASSIFICATION	1.2803962185196011E-5	TEST
load_1 each type	WITHOUT_CLASSIFICATION	0.9999938699787035	WITHOUT_CLASSIFICATION	6.130021296429763E-6	TEST
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999856139644415	WITHOUT_CLASSIFICATION	1.43860355584179E-5	TEST
int	WITHOUT_CLASSIFICATION	0.9999852803460854	WITHOUT_CLASSIFICATION	1.4719653914630322E-5	TEST
return	WITHOUT_CLASSIFICATION	0.9999932081788764	WITHOUT_CLASSIFICATION	6.791821123635033E-6	TEST
dup	WITHOUT_CLASSIFICATION	0.9999839945510538	WITHOUT_CLASSIFICATION	1.6005448946175134E-5	TEST
invokeinterface	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999839494623364	WITHOUT_CLASSIFICATION	1.605053766359171E-5	TEST
checkcast	WITHOUT_CLASSIFICATION	0.9999839494623364	WITHOUT_CLASSIFICATION	1.605053766359171E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
load_1	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
putfield	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
return ;	WITHOUT_CLASSIFICATION	0.9999932304723261	WITHOUT_CLASSIFICATION	6.769527673891953E-6	TEST
ldc field name	WITHOUT_CLASSIFICATION	0.999972625265098	WITHOUT_CLASSIFICATION	2.737473490197044E-5	TEST
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999824167896704	WITHOUT_CLASSIFICATION	1.758321032958712E-5	TEST
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905016006074	WITHOUT_CLASSIFICATION	9.498399392582215E-6	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905016006074	WITHOUT_CLASSIFICATION	9.498399392582215E-6	TEST
not array	WITHOUT_CLASSIFICATION	0.999977202926233	WITHOUT_CLASSIFICATION	2.279707376697855E-5	TEST
array of reference type	WITHOUT_CLASSIFICATION	0.9999913942174166	WITHOUT_CLASSIFICATION	8.605782583496336E-6	TEST
boolean	WITHOUT_CLASSIFICATION	0.9999699231333027	WITHOUT_CLASSIFICATION	3.0076866697363595E-5	TEST
byte	WITHOUT_CLASSIFICATION	0.9999849525142624	WITHOUT_CLASSIFICATION	1.504748573759556E-5	TEST
char	WITHOUT_CLASSIFICATION	0.9999882074801056	WITHOUT_CLASSIFICATION	1.179251989433331E-5	TEST
short	WITHOUT_CLASSIFICATION	0.999984082571417	WITHOUT_CLASSIFICATION	1.591742858305321E-5	TEST
double	WITHOUT_CLASSIFICATION	0.9999878665516044	WITHOUT_CLASSIFICATION	1.2133448395668454E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999839767831217	WITHOUT_CLASSIFICATION	1.6023216878342317E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999839767831217	WITHOUT_CLASSIFICATION	1.6023216878342317E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999821339468714	WITHOUT_CLASSIFICATION	1.786605312862057E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999821339468714	WITHOUT_CLASSIFICATION	1.786605312862057E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999906131517905	WITHOUT_CLASSIFICATION	9.386848209615595E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999906131517905	WITHOUT_CLASSIFICATION	9.386848209615595E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999958394899818	WITHOUT_CLASSIFICATION	4.160510018210683E-5	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999958394899818	WITHOUT_CLASSIFICATION	4.160510018210683E-5	TEST
reference type	WITHOUT_CLASSIFICATION	0.9999905016006074	WITHOUT_CLASSIFICATION	9.498399392582215E-6	TEST
double	WITHOUT_CLASSIFICATION	0.9999878665516044	WITHOUT_CLASSIFICATION	1.2133448395668454E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999839767831217	WITHOUT_CLASSIFICATION	1.6023216878342317E-5	TEST
float	WITHOUT_CLASSIFICATION	0.9999839767831217	WITHOUT_CLASSIFICATION	1.6023216878342317E-5	TEST
long	WITHOUT_CLASSIFICATION	0.9999821339468714	WITHOUT_CLASSIFICATION	1.786605312862057E-5	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999906131517905	WITHOUT_CLASSIFICATION	9.386848209615595E-6	TEST
bad type	WITHOUT_CLASSIFICATION	0.9999906131517905	WITHOUT_CLASSIFICATION	9.386848209615595E-6	TEST
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999958394899818	WITHOUT_CLASSIFICATION	4.160510018210683E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999812892918567	WITHOUT_CLASSIFICATION	1.871070814324094E-5	TEST
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999918337093783	WITHOUT_CLASSIFICATION	8.166290621713792E-6	TEST
decrement the lock	WITHOUT_CLASSIFICATION	0.9999926014746177	WITHOUT_CLASSIFICATION	7.398525382365173E-6	TEST
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999388496403108	WITHOUT_CLASSIFICATION	6.1150359689269E-5	TEST
recache the updated state	WITHOUT_CLASSIFICATION	0.9999929343356568	WITHOUT_CLASSIFICATION	7.065664343218597E-6	TEST
noop	WITHOUT_CLASSIFICATION	0.9999839534013312	WITHOUT_CLASSIFICATION	1.6046598668792286E-5	TEST
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999889397825285	WITHOUT_CLASSIFICATION	1.1060217471454784E-5	TEST
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999882818269541	WITHOUT_CLASSIFICATION	1.1718173045828196E-5	TEST
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998696464777411	WITHOUT_CLASSIFICATION	1.3035352225886174E-4	TEST
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999725313895609	WITHOUT_CLASSIFICATION	2.7468610439124876E-5	TEST
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999643872311148	WITHOUT_CLASSIFICATION	3.561276888511435E-5	TEST
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999828349326887	WITHOUT_CLASSIFICATION	1.716506731130502E-5	TEST
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999825909673339	WITHOUT_CLASSIFICATION	1.740903266613843E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999839534013312	WITHOUT_CLASSIFICATION	1.6046598668792286E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999839534013312	WITHOUT_CLASSIFICATION	1.6046598668792286E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999839534013312	WITHOUT_CLASSIFICATION	1.6046598668792286E-5	TEST
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999250288315175	WITHOUT_CLASSIFICATION	7.49711684825576E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999625394473519	WITHOUT_CLASSIFICATION	3.746055264805667E-5	TEST
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999625394473519	WITHOUT_CLASSIFICATION	3.746055264805667E-5	TEST
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999651243576282	WITHOUT_CLASSIFICATION	3.487564237185195E-5	TEST
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999816808245908	WITHOUT_CLASSIFICATION	1.831917540920521E-5	TEST
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9997723571233209	WITHOUT_CLASSIFICATION	2.2764287667908234E-4	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999974050243538	WITHOUT_CLASSIFICATION	2.594975646188333E-5	TEST
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999974050243538	WITHOUT_CLASSIFICATION	2.594975646188333E-5	TEST
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999970387957561	WITHOUT_CLASSIFICATION	2.96120424386577E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999962806206034	WITHOUT_CLASSIFICATION	3.7193793965713717E-6	TEST
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999962806206034	WITHOUT_CLASSIFICATION	3.7193793965713717E-6	TEST
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999505540956362	WITHOUT_CLASSIFICATION	4.944590436371747E-5	TEST
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999712829532474	WITHOUT_CLASSIFICATION	2.8717046752644568E-5	TEST
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999836335778715	WITHOUT_CLASSIFICATION	1.6366422128534302E-5	TEST
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
MUTABLE	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
WHERE	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9952160915641244	WITHOUT_CLASSIFICATION	0.004783908435875652	TEST
ID	WITHOUT_CLASSIFICATION	0.9999840526663923	WITHOUT_CLASSIFICATION	1.594733360770938E-5	TEST
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999866820260652	WITHOUT_CLASSIFICATION	1.3317973934734428E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673222626491	WITHOUT_CLASSIFICATION	3.267773735103083E-5	TEST
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996240916813841	WITHOUT_CLASSIFICATION	3.759083186158921E-4	TEST
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999346017802287	WITHOUT_CLASSIFICATION	6.539821977134094E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999429686358436	WITHOUT_CLASSIFICATION	5.7031364156229006E-5	TEST
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988398276612	WITHOUT_CLASSIFICATION	1.1601723387877063E-6	TEST
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
IMPORT	WITHOUT_CLASSIFICATION	0.9999839469221441	WITHOUT_CLASSIFICATION	1.605307785581721E-5	TEST
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999821718155741	WITHOUT_CLASSIFICATION	1.7828184425855866E-5	TEST
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999821769571812	WITHOUT_CLASSIFICATION	1.782304281886099E-5	TEST
PERSISTER	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999839671724322	WITHOUT_CLASSIFICATION	1.6032827567747815E-5	TEST
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999836335778715	WITHOUT_CLASSIFICATION	1.6366422128534302E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999881188797137	WITHOUT_CLASSIFICATION	1.1881120286271644E-5	TEST
joined subclasses	WITHOUT_CLASSIFICATION	0.9999827496562124	WITHOUT_CLASSIFICATION	1.72503437876037E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999839509749356	WITHOUT_CLASSIFICATION	1.604902506441589E-5	TEST
CHECK	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999839671724322	WITHOUT_CLASSIFICATION	1.6032827567747815E-5	TEST
properties	WITHOUT_CLASSIFICATION	0.9999881188797137	WITHOUT_CLASSIFICATION	1.1881120286271644E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999839509749356	WITHOUT_CLASSIFICATION	1.604902506441589E-5	TEST
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999121139980812	WITHOUT_CLASSIFICATION	8.788600191886649E-5	TEST
TABLENAME	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999121139980812	WITHOUT_CLASSIFICATION	8.788600191886649E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999983950364714	WITHOUT_CLASSIFICATION	1.6049635285955615E-5	TEST
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
column index	WITHOUT_CLASSIFICATION	0.999984042528345	WITHOUT_CLASSIFICATION	1.59574716550142E-5	TEST
column unique-key	WITHOUT_CLASSIFICATION	0.9999832673156629	WITHOUT_CLASSIFICATION	1.673268433708167E-5	TEST
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9996820149219989	WITHOUT_CLASSIFICATION	3.179850780010938E-4	TEST
for an any	WITHOUT_CLASSIFICATION	0.9999133871080739	WITHOUT_CLASSIFICATION	8.661289192613896E-5	TEST
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999837084773048	WITHOUT_CLASSIFICATION	1.6291522695246752E-5	TEST
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999582621628893	WITHOUT_CLASSIFICATION	4.173783711077643E-5	TEST
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999644632670428	WITHOUT_CLASSIFICATION	3.553673295724475E-5	TEST
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999949695272565	WITHOUT_CLASSIFICATION	5.0304727435198684E-6	TEST
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999582621628893	WITHOUT_CLASSIFICATION	4.173783711077643E-5	TEST
ROLENAME	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
TABLE	WITHOUT_CLASSIFICATION	0.9999839505659258	WITHOUT_CLASSIFICATION	1.6049434074202084E-5	TEST
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999874593598541	WITHOUT_CLASSIFICATION	1.2540640145783772E-5	TEST
SORT	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999839671724322	WITHOUT_CLASSIFICATION	1.6032827567747815E-5	TEST
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999749603368135	WITHOUT_CLASSIFICATION	2.5039663186486808E-5	TEST
set up second pass	WITHOUT_CLASSIFICATION	0.9999955096681344	WITHOUT_CLASSIFICATION	4.490331865616036E-6	TEST
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996030698279825	WITHOUT_CLASSIFICATION	3.969301720175337E-4	TEST
a nested composite element	WITHOUT_CLASSIFICATION	0.9999916388006043	WITHOUT_CLASSIFICATION	8.361199395786154E-6	TEST
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999301277008574	WITHOUT_CLASSIFICATION	6.987229914255523E-5	TEST
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999979084775873	WITHOUT_CLASSIFICATION	2.0915224127199215E-6	TEST
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999436478586233	WITHOUT_CLASSIFICATION	5.635214137660686E-5	TEST
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999930692900488	WITHOUT_CLASSIFICATION	6.930709951141255E-6	TEST
GENERATOR	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999822905744724	WITHOUT_CLASSIFICATION	1.7709425527549587E-5	TEST
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999347508029183	WITHOUT_CLASSIFICATION	6.524919708172275E-5	TEST
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999429686358436	WITHOUT_CLASSIFICATION	5.7031364156229006E-5	TEST
contained elements:	WITHOUT_CLASSIFICATION	0.9999830731965584	WITHOUT_CLASSIFICATION	1.69268034415264E-5	TEST
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9995111851672543	WITHOUT_CLASSIFICATION	4.888148327457094E-4	TEST
Bind the where	WITHOUT_CLASSIFICATION	0.999977318968645	WITHOUT_CLASSIFICATION	2.268103135509207E-5	TEST
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999922779636167	WITHOUT_CLASSIFICATION	7.722036383274364E-6	TEST
Bind the filters	WITHOUT_CLASSIFICATION	0.9999923076204361	WITHOUT_CLASSIFICATION	7.692379563885644E-6	TEST
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.99996831209336	WITHOUT_CLASSIFICATION	3.168790664009026E-5	TEST
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999672579347272	WITHOUT_CLASSIFICATION	3.274206527276342E-5	TEST
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999472565650137	WITHOUT_CLASSIFICATION	5.27434349863742E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999648451334926	WITHOUT_CLASSIFICATION	3.5154866507385785E-5	TEST
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999826686230383	WITHOUT_CLASSIFICATION	1.7331376961616928E-5	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999957628059963	WITHOUT_CLASSIFICATION	4.2371940036023965E-6	TEST
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999957628059963	WITHOUT_CLASSIFICATION	4.2371940036023965E-6	TEST
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999755336419269	WITHOUT_CLASSIFICATION	2.4466358073089726E-5	TEST
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999842905257785	WITHOUT_CLASSIFICATION	1.5709474221478172E-5	TEST
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999963973615109	WITHOUT_CLASSIFICATION	3.6026384890907263E-6	TEST
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999755326398256	WITHOUT_CLASSIFICATION	2.446736017434548E-5	TEST
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999975528236382	WITHOUT_CLASSIFICATION	2.447176361802727E-5	TEST
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999767483859914	WITHOUT_CLASSIFICATION	2.325161400859619E-5	TEST
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999822498335308	WITHOUT_CLASSIFICATION	1.77501664692317E-5	TEST
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9994700843220353	WITHOUT_CLASSIFICATION	5.29915677964712E-4	TEST
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999633345872851	WITHOUT_CLASSIFICATION	3.6665412714750195E-5	TEST
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999951736667319	WITHOUT_CLASSIFICATION	4.826333268184238E-6	TEST
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
Schema export:	WITHOUT_CLASSIFICATION	0.999982171748522	WITHOUT_CLASSIFICATION	1.7828251478022352E-5	TEST
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999872882850772	WITHOUT_CLASSIFICATION	1.2711714922874943E-5	TEST
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999830021279961	WITHOUT_CLASSIFICATION	1.6997872003914755E-5	TEST
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999818054381713	WITHOUT_CLASSIFICATION	1.819456182867459E-5	TEST
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999683455493409	WITHOUT_CLASSIFICATION	3.1654450659180945E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999936970129605	WITHOUT_CLASSIFICATION	6.302987039502091E-6	TEST
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706637994512	WITHOUT_CLASSIFICATION	2.933620054883239E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999921600601015	WITHOUT_CLASSIFICATION	7.839939898594119E-6	TEST
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691871193966	WITHOUT_CLASSIFICATION	3.081288060333841E-5	TEST
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999905903099838	WITHOUT_CLASSIFICATION	9.40969001627085E-6	TEST
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999972812947803	WITHOUT_CLASSIFICATION	2.7187052197754276E-6	TEST
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999589724078786	WITHOUT_CLASSIFICATION	4.102759212145439E-5	TEST
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999936970129605	WITHOUT_CLASSIFICATION	6.302987039502091E-6	TEST
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999787136952266	WITHOUT_CLASSIFICATION	2.1286304773424846E-5	TEST
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999725490851091	WITHOUT_CLASSIFICATION	2.745091489095502E-5	TEST
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999725490851091	WITHOUT_CLASSIFICATION	2.745091489095502E-5	TEST
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999703456477913	WITHOUT_CLASSIFICATION	2.9654352208797532E-5	TEST
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999315249559853	WITHOUT_CLASSIFICATION	6.847504401475199E-5	TEST
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999921600601015	WITHOUT_CLASSIFICATION	7.839939898594119E-6	TEST
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999829257780257	WITHOUT_CLASSIFICATION	1.7074221974197916E-5	TEST
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999835286042026	WITHOUT_CLASSIFICATION	1.6471395797372072E-5	TEST
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999832605033484	WITHOUT_CLASSIFICATION	1.6739496651559627E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999870355176154	WITHOUT_CLASSIFICATION	1.296448238474558E-5	TEST
found	WITHOUT_CLASSIFICATION	0.9999870355176154	WITHOUT_CLASSIFICATION	1.296448238474558E-5	TEST
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999677458155046	WITHOUT_CLASSIFICATION	3.2254184495389946E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999821793372393	WITHOUT_CLASSIFICATION	1.782066276061171E-5	TEST
<String, String>	WITHOUT_CLASSIFICATION	0.9999821793372393	WITHOUT_CLASSIFICATION	1.782066276061171E-5	TEST
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999648451334926	WITHOUT_CLASSIFICATION	3.5154866507385785E-5	TEST
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999629144480567	WITHOUT_CLASSIFICATION	3.708555194324644E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998594807085563	WITHOUT_CLASSIFICATION	1.405192914436974E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999908462060481	WITHOUT_CLASSIFICATION	9.153793951923264E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998594807085563	WITHOUT_CLASSIFICATION	1.405192914436974E-4	TEST
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999908462060481	WITHOUT_CLASSIFICATION	9.153793951923264E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999183025929731	WITHOUT_CLASSIFICATION	8.169740702690841E-5	TEST
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999973835177095	WITHOUT_CLASSIFICATION	2.616482290498321E-5	TEST
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999975960182648	WITHOUT_CLASSIFICATION	2.403981735169376E-6	TEST
the element has changed	WITHOUT_CLASSIFICATION	0.999993130546544	WITHOUT_CLASSIFICATION	6.869453456004476E-6	TEST
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999538103749099	WITHOUT_CLASSIFICATION	4.618962509007107E-5	TEST
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9996348447971227	WITHOUT_CLASSIFICATION	3.6515520287731405E-4	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999097817210956	WITHOUT_CLASSIFICATION	9.021827890447743E-5	TEST
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999097817210956	WITHOUT_CLASSIFICATION	9.021827890447743E-5	TEST
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999838133971795	WITHOUT_CLASSIFICATION	1.6186602820606584E-5	TEST
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999854276795124	WITHOUT_CLASSIFICATION	1.4572320487489847E-5	TEST
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999847025514261	WITHOUT_CLASSIFICATION	1.5297448573887958E-5	TEST
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999961025383521	WITHOUT_CLASSIFICATION	3.8974616478382135E-6	TEST
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999950068792388	WITHOUT_CLASSIFICATION	4.99312076126622E-6	TEST
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999813961575797	WITHOUT_CLASSIFICATION	1.860384242018099E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999813961575797	WITHOUT_CLASSIFICATION	1.860384242018099E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999317965165456	WITHOUT_CLASSIFICATION	6.820348345438885E-5	TEST
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999317965165456	WITHOUT_CLASSIFICATION	6.820348345438885E-5	TEST
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999970617802526	WITHOUT_CLASSIFICATION	2.9382197473115644E-6	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999183025929731	WITHOUT_CLASSIFICATION	8.169740702690841E-5	TEST
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999788247416578	WITHOUT_CLASSIFICATION	2.117525834219798E-5	TEST
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997925844057636	WITHOUT_CLASSIFICATION	2.0741559423633922E-4	TEST
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996919976530335	WITHOUT_CLASSIFICATION	3.080023469665369E-4	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999502883633159	WITHOUT_CLASSIFICATION	4.971163668414657E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996258453479864	WITHOUT_CLASSIFICATION	3.741546520136666E-4	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999183025929731	WITHOUT_CLASSIFICATION	8.169740702690841E-5	TEST
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999502883633159	WITHOUT_CLASSIFICATION	4.971163668414657E-5	TEST
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996258453479864	WITHOUT_CLASSIFICATION	3.741546520136666E-4	TEST
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999495885462109	WITHOUT_CLASSIFICATION	5.04114537890745E-5	TEST
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999825383031068	WITHOUT_CLASSIFICATION	1.7461696893225006E-5	TEST
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999870284520355	WITHOUT_CLASSIFICATION	1.2971547964534282E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999183025929731	WITHOUT_CLASSIFICATION	8.169740702690841E-5	TEST
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999183025929731	WITHOUT_CLASSIFICATION	8.169740702690841E-5	TEST
from Map	WITHOUT_CLASSIFICATION	0.9999891322906725	WITHOUT_CLASSIFICATION	1.0867709327344065E-5	TEST
from SortedMap	WITHOUT_CLASSIFICATION	0.9999877095192067	WITHOUT_CLASSIFICATION	1.2290480793414819E-5	TEST
inject the data	WITHOUT_CLASSIFICATION	0.9999961879287684	WITHOUT_CLASSIFICATION	3.812071231541089E-6	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999857030763296	WITHOUT_CLASSIFICATION	1.429692367046786E-5	TEST
default pool size 20	WITHOUT_CLASSIFICATION	0.9999937462522314	WITHOUT_CLASSIFICATION	6.253747768594139E-6	TEST
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999969135425367	WITHOUT_CLASSIFICATION	3.086457463288958E-6	TEST
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999862812788381	WITHOUT_CLASSIFICATION	1.3718721161901513E-4	TEST
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999873523819879	WITHOUT_CLASSIFICATION	1.2647618012143949E-5	TEST
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999901881888906	WITHOUT_CLASSIFICATION	9.811811109322902E-6	TEST
then bind it	WITHOUT_CLASSIFICATION	0.9999520633689944	WITHOUT_CLASSIFICATION	4.7936631005489555E-5	TEST
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999845243611793	WITHOUT_CLASSIFICATION	1.5475638820692606E-5	TEST
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999839596722805	WITHOUT_CLASSIFICATION	1.6040327719601353E-5	TEST
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999743039667071	WITHOUT_CLASSIFICATION	2.5696033293015483E-5	TEST
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999681800943278	WITHOUT_CLASSIFICATION	3.181990567223906E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957001755689	WITHOUT_CLASSIFICATION	4.2998244311107786E-5	TEST
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997237415102331	WITHOUT_CLASSIFICATION	2.762584897669399E-4	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999857030763296	WITHOUT_CLASSIFICATION	1.429692367046786E-5	TEST
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999794800030595	WITHOUT_CLASSIFICATION	2.0519996940571815E-5	TEST
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999706656777257	WITHOUT_CLASSIFICATION	2.9334322274288772E-5	TEST
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999842184773982	WITHOUT_CLASSIFICATION	1.57815226018624E-5	TEST
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999544968928793	WITHOUT_CLASSIFICATION	4.5503107120734634E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999821850611426	WITHOUT_CLASSIFICATION	1.7814938857456994E-5	TEST
unsupported	WITHOUT_CLASSIFICATION	0.9999821850611426	WITHOUT_CLASSIFICATION	1.7814938857456994E-5	TEST
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999857030763296	WITHOUT_CLASSIFICATION	1.429692367046786E-5	TEST
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999980868916046	WITHOUT_CLASSIFICATION	1.913108395402438E-5	TEST
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9994055949453216	WITHOUT_CLASSIFICATION	5.944050546784322E-4	TEST
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9990052269145757	WITHOUT_CLASSIFICATION	9.947730854242827E-4	TEST
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999928690413673	WITHOUT_CLASSIFICATION	7.1309586327915166E-6	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999983957950243	WITHOUT_CLASSIFICATION	1.6042049757027772E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999945320654169	WITHOUT_CLASSIFICATION	5.467934583132934E-6	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999823387892474	WITHOUT_CLASSIFICATION	1.7661210752667582E-5	TEST
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999997813385775	WITHOUT_CLASSIFICATION	2.186614225055105E-6	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999661004091395	WITHOUT_CLASSIFICATION	3.389959086053106E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999522595928675	WITHOUT_CLASSIFICATION	4.7740407132487256E-5	TEST
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999637098863426	WITHOUT_CLASSIFICATION	3.6290113657353657E-5	TEST
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999783549238287	WITHOUT_CLASSIFICATION	2.1645076171349708E-5	TEST
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999994633986845	WITHOUT_CLASSIFICATION	5.36601315510632E-6	TEST
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864055019645	WITHOUT_CLASSIFICATION	1.3594498035413041E-5	TEST
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999591038854649	WITHOUT_CLASSIFICATION	4.0896114535024005E-5	TEST
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999913097755317	WITHOUT_CLASSIFICATION	8.690224468264232E-6	TEST
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999939595192975	WITHOUT_CLASSIFICATION	6.04048070251582E-6	TEST
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998632289059	WITHOUT_CLASSIFICATION	1.3677109409967337E-5	TEST
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999470629216025	WITHOUT_CLASSIFICATION	5.2937078397488735E-5	TEST
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999667427469123	WITHOUT_CLASSIFICATION	3.325725308762695E-5	TEST
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999966201067488	WITHOUT_CLASSIFICATION	3.3798932512459036E-6	TEST
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817928147838	WITHOUT_CLASSIFICATION	1.820718521607142E-5	TEST
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816315624216	WITHOUT_CLASSIFICATION	1.8368437578325673E-5	TEST
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705248199757	WITHOUT_CLASSIFICATION	2.9475180024197835E-5	TEST
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582532826921	WITHOUT_CLASSIFICATION	4.174671730797004E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
by default we report no support	WITHOUT_CLASSIFICATION	0.9999718937637526	WITHOUT_CLASSIFICATION	2.810623624737565E-5	TEST
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999652912768016	WITHOUT_CLASSIFICATION	3.470872319850491E-5	TEST
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717351669332	WITHOUT_CLASSIFICATION	2.8264833066801478E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739195280735	WITHOUT_CLASSIFICATION	2.6080471926568642E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707126018075	WITHOUT_CLASSIFICATION	2.92873981926316E-5	TEST
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807412013715	WITHOUT_CLASSIFICATION	1.9258798628434256E-5	TEST
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694258228913	WITHOUT_CLASSIFICATION	3.0574177108803374E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694577945027	WITHOUT_CLASSIFICATION	3.054220549714641E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999590395939957	WITHOUT_CLASSIFICATION	4.096040600433678E-5	TEST
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570440538645	WITHOUT_CLASSIFICATION	4.2955946135495116E-5	TEST
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999867776148831	WITHOUT_CLASSIFICATION	1.3222385116912527E-5	TEST
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999844445438534	WITHOUT_CLASSIFICATION	1.5555456146697667E-5	TEST
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999990858952004	WITHOUT_CLASSIFICATION	9.141047995544553E-7	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998761310214886	WITHOUT_CLASSIFICATION	1.2386897851133645E-4	TEST
" cascade";	WITHOUT_CLASSIFICATION	0.9999836633674302	WITHOUT_CLASSIFICATION	1.633663256992212E-5	TEST
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999825618608787	WITHOUT_CLASSIFICATION	1.743813912121718E-5	TEST
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999946419131676	WITHOUT_CLASSIFICATION	5.358086832434309E-6	TEST
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999754966646881	WITHOUT_CLASSIFICATION	2.4503335311864482E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999815063960551	WITHOUT_CLASSIFICATION	1.8493603944899005E-5	TEST
ALL OTHER	WITHOUT_CLASSIFICATION	0.999984062208952	WITHOUT_CLASSIFICATION	1.5937791048035944E-5	TEST
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.99999478421368	WITHOUT_CLASSIFICATION	5.215786320009642E-6	TEST
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999877641399831	WITHOUT_CLASSIFICATION	1.2235860016947479E-5	TEST
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999724048579117	WITHOUT_CLASSIFICATION	2.7595142088293838E-5	TEST
HHH-2300	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999847636137349	WITHOUT_CLASSIFICATION	1.5236386265092405E-5	TEST
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999645288491373	WITHOUT_CLASSIFICATION	3.547115086264333E-5	TEST
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674183616958	WITHOUT_CLASSIFICATION	3.2581638304231335E-5	TEST
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993118810123	WITHOUT_CLASSIFICATION	6.881189876984548E-6	TEST
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999645742912381	WITHOUT_CLASSIFICATION	3.542570876185813E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999167123202037	WITHOUT_CLASSIFICATION	8.328767979620642E-5	TEST
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999590751764121	WITHOUT_CLASSIFICATION	4.092482358787676E-5	TEST
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999895992876451	WITHOUT_CLASSIFICATION	1.0400712354944003E-5	TEST
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999755564561142	WITHOUT_CLASSIFICATION	2.444354388578674E-5	TEST
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471564513208	WITHOUT_CLASSIFICATION	5.284354867915216E-5	TEST
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999541186570569	WITHOUT_CLASSIFICATION	4.588134294317487E-5	TEST
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999717259436729	WITHOUT_CLASSIFICATION	2.8274056327181255E-5	TEST
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999641860814787	WITHOUT_CLASSIFICATION	3.58139185212309E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999825283652244	WITHOUT_CLASSIFICATION	1.7471634775611136E-5	TEST
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999313906164464	WITHOUT_CLASSIFICATION	6.860938355354418E-5	TEST
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999722007428571	WITHOUT_CLASSIFICATION	2.7799257142974607E-5	TEST
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999164606426244	WITHOUT_CLASSIFICATION	8.353935737562714E-5	TEST
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999880792154392	WITHOUT_CLASSIFICATION	1.1920784560775919E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998761310214886	WITHOUT_CLASSIFICATION	1.2386897851133645E-4	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999989764269442	WITHOUT_CLASSIFICATION	1.02357305580943E-5	TEST
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999803719992036	WITHOUT_CLASSIFICATION	1.962800079631751E-5	TEST
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999822104090933	WITHOUT_CLASSIFICATION	1.778959090670288E-5	TEST
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999844445438534	WITHOUT_CLASSIFICATION	1.5555456146697667E-5	TEST
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
function templates	WITHOUT_CLASSIFICATION	0.9999857865516536	WITHOUT_CLASSIFICATION	1.4213448346500535E-5	TEST
not null is implicit	WITHOUT_CLASSIFICATION	0.9999167123202037	WITHOUT_CLASSIFICATION	8.328767979620642E-5	TEST
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999804683689274	WITHOUT_CLASSIFICATION	1.953163107255113E-5	TEST
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999632518097918	WITHOUT_CLASSIFICATION	3.674819020814506E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999187806491304	WITHOUT_CLASSIFICATION	8.121935086956728E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999571300286533	WITHOUT_CLASSIFICATION	4.28699713466429E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999590760267648	WITHOUT_CLASSIFICATION	4.09239732351631E-5	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999793439667651	WITHOUT_CLASSIFICATION	2.065603323495294E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999566835940559	WITHOUT_CLASSIFICATION	4.331640594420751E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999784816128884	WITHOUT_CLASSIFICATION	2.1518387111729234E-5	TEST
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995062389990733	WITHOUT_CLASSIFICATION	4.93761000926701E-4	TEST
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999774629929494	WITHOUT_CLASSIFICATION	2.2537007050517777E-5	TEST
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999450450393459	WITHOUT_CLASSIFICATION	5.495496065409095E-5	TEST
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999844445438534	WITHOUT_CLASSIFICATION	1.5555456146697667E-5	TEST
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999719555133523	WITHOUT_CLASSIFICATION	2.804448664781428E-5	TEST
add new ordered map	WITHOUT_CLASSIFICATION	0.9999235834555548	WITHOUT_CLASSIFICATION	7.641654444527834E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999895753504413	WITHOUT_CLASSIFICATION	1.0424649558762657E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999849905652799	WITHOUT_CLASSIFICATION	1.5009434720055775E-5	TEST
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999874567892594	WITHOUT_CLASSIFICATION	1.254321074073518E-5	TEST
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999892508358749	WITHOUT_CLASSIFICATION	1.074916412504241E-5	TEST
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999500845853595	WITHOUT_CLASSIFICATION	4.99154146405675E-5	TEST
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999891913826966	WITHOUT_CLASSIFICATION	1.0808617303367215E-5	TEST
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999918812546654	WITHOUT_CLASSIFICATION	8.118745334527462E-6	TEST
No batch statements	WITHOUT_CLASSIFICATION	0.9999536115680308	WITHOUT_CLASSIFICATION	4.638843196927065E-5	TEST
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999868152058141	WITHOUT_CLASSIFICATION	1.318479418600121E-5	TEST
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999907203630871	WITHOUT_CLASSIFICATION	9.279636912893942E-6	TEST
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999907203630871	WITHOUT_CLASSIFICATION	9.279636912893942E-6	TEST
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999844445438534	WITHOUT_CLASSIFICATION	1.5555456146697667E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998761310214886	WITHOUT_CLASSIFICATION	1.2386897851133645E-4	TEST
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999278576775518	WITHOUT_CLASSIFICATION	7.214232244813062E-5	TEST
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999962027639128	WITHOUT_CLASSIFICATION	3.797236087248977E-6	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.99910229219419	WITHOUT_CLASSIFICATION	8.977078058099716E-4	TEST
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999959255514916	WITHOUT_CLASSIFICATION	4.074448508390302E-5	TEST
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999592670437399	WITHOUT_CLASSIFICATION	4.073295626007549E-5	TEST
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999592670437399	WITHOUT_CLASSIFICATION	4.073295626007549E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998761310214886	WITHOUT_CLASSIFICATION	1.2386897851133645E-4	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999822862197076	WITHOUT_CLASSIFICATION	1.771378029235247E-5	TEST
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999849905652799	WITHOUT_CLASSIFICATION	1.5009434720055775E-5	TEST
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999699796468523	WITHOUT_CLASSIFICATION	3.002035314759722E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999895753504413	WITHOUT_CLASSIFICATION	1.0424649558762657E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999715044644529	WITHOUT_CLASSIFICATION	2.8495535547062152E-5	TEST
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9991042538211514	WITHOUT_CLASSIFICATION	8.957461788485534E-4	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999928266274573	WITHOUT_CLASSIFICATION	7.173372542705279E-5	TEST
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999187806491304	WITHOUT_CLASSIFICATION	8.121935086956728E-5	TEST
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999571300286533	WITHOUT_CLASSIFICATION	4.28699713466429E-5	TEST
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999590760267648	WITHOUT_CLASSIFICATION	4.09239732351631E-5	TEST
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999857134854745	WITHOUT_CLASSIFICATION	1.4286514525534009E-5	TEST
add the main query	WITHOUT_CLASSIFICATION	0.9999822476503941	WITHOUT_CLASSIFICATION	1.775234960588455E-5	TEST
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999708011713931	WITHOUT_CLASSIFICATION	2.919882860685492E-5	TEST
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999895753504413	WITHOUT_CLASSIFICATION	1.0424649558762657E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999715044644529	WITHOUT_CLASSIFICATION	2.8495535547062152E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998761310214886	WITHOUT_CLASSIFICATION	1.2386897851133645E-4	TEST
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999793439667651	WITHOUT_CLASSIFICATION	2.065603323495294E-5	TEST
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999566835940559	WITHOUT_CLASSIFICATION	4.331640594420751E-5	TEST
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999784816128884	WITHOUT_CLASSIFICATION	2.1518387111729234E-5	TEST
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947440623477	WITHOUT_CLASSIFICATION	5.255937652350451E-6	TEST
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950190006046	WITHOUT_CLASSIFICATION	4.980999395379248E-6	TEST
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.99996841501203	WITHOUT_CLASSIFICATION	3.1584987969979E-5	TEST
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999730442456747	WITHOUT_CLASSIFICATION	2.695575432527142E-5	TEST
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999573174307238	WITHOUT_CLASSIFICATION	4.2682569276327015E-5	TEST
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999392594501435	WITHOUT_CLASSIFICATION	6.074054985633491E-5	TEST
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998953493983558	WITHOUT_CLASSIFICATION	1.0465060164420362E-4	TEST
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999656933527249	WITHOUT_CLASSIFICATION	3.430664727507183E-5	TEST
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999380365027544	WITHOUT_CLASSIFICATION	6.19634972456468E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739195280735	WITHOUT_CLASSIFICATION	2.6080471926568642E-5	TEST
identifier-commalist	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999957327529892	WITHOUT_CLASSIFICATION	4.267247010810074E-5	TEST
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999623142200744	WITHOUT_CLASSIFICATION	3.7685779925681386E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703733212985	WITHOUT_CLASSIFICATION	2.9626678701547458E-5	TEST
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999976903862932	WITHOUT_CLASSIFICATION	2.309613706790337E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
<String>	WITHOUT_CLASSIFICATION	0.9999839501090948	WITHOUT_CLASSIFICATION	1.6049890905140478E-5	TEST
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707126018075	WITHOUT_CLASSIFICATION	2.92873981926316E-5	TEST
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694226259906	WITHOUT_CLASSIFICATION	3.0577374009356474E-5	TEST
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999825283652244	WITHOUT_CLASSIFICATION	1.7471634775611136E-5	TEST
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999650815897729	WITHOUT_CLASSIFICATION	3.4918410227041335E-5	TEST
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999855542891417	WITHOUT_CLASSIFICATION	1.4445710858399503E-5	TEST
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999740559308312	WITHOUT_CLASSIFICATION	2.5944069168783383E-5	TEST
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9994375482010878	WITHOUT_CLASSIFICATION	5.624517989122581E-4	TEST
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999922542923123	WITHOUT_CLASSIFICATION	7.745707687685164E-6	TEST
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999121139980812	WITHOUT_CLASSIFICATION	8.788600191886649E-5	TEST
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999901020454497	WITHOUT_CLASSIFICATION	9.89795455029173E-6	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999997813385775	WITHOUT_CLASSIFICATION	2.186614225055105E-6	TEST
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999798879274439	WITHOUT_CLASSIFICATION	2.0112072556181274E-5	TEST
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999754502390938	WITHOUT_CLASSIFICATION	2.454976090610646E-5	TEST
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999843743494695	WITHOUT_CLASSIFICATION	1.5625650530566983E-5	TEST
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999766490305946	WITHOUT_CLASSIFICATION	2.3350969405396212E-5	TEST
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999938357625705	WITHOUT_CLASSIFICATION	6.164237429562924E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999932917146722	WITHOUT_CLASSIFICATION	6.708285327765426E-6	TEST
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813718676439	WITHOUT_CLASSIFICATION	1.8628132356085105E-5	TEST
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815132765457	WITHOUT_CLASSIFICATION	1.8486723454287686E-5	TEST
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999362471096286	WITHOUT_CLASSIFICATION	6.375289037133314E-5	TEST
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999559823666693	WITHOUT_CLASSIFICATION	4.401763333081649E-5	TEST
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999882447679722	WITHOUT_CLASSIFICATION	1.1755232027920013E-5	TEST
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999291894248682	WITHOUT_CLASSIFICATION	7.081057513187428E-5	TEST
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999279472744255	WITHOUT_CLASSIFICATION	7.205272557451427E-5	TEST
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999704068879721	WITHOUT_CLASSIFICATION	2.959311202789135E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999980517243985	WITHOUT_CLASSIFICATION	1.9482756015060458E-5	TEST
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999521468339461	WITHOUT_CLASSIFICATION	4.785316605389001E-5	TEST
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999506408178708	WITHOUT_CLASSIFICATION	4.9359182129152044E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999704068879721	WITHOUT_CLASSIFICATION	2.959311202789135E-5	TEST
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999955707847225	WITHOUT_CLASSIFICATION	4.429215277578618E-6	TEST
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999306920392581	WITHOUT_CLASSIFICATION	6.930796074187061E-5	TEST
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703471538127	WITHOUT_CLASSIFICATION	2.9652846187266917E-5	TEST
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999929804826722	WITHOUT_CLASSIFICATION	7.019517327776618E-6	TEST
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999981407843621	WITHOUT_CLASSIFICATION	1.8592156379700467E-6	TEST
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999707720247425	WITHOUT_CLASSIFICATION	2.922797525746864E-5	TEST
continue loop	WITHOUT_CLASSIFICATION	0.9999881826269786	WITHOUT_CLASSIFICATION	1.181737302122225E-5	TEST
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999799154979886	WITHOUT_CLASSIFICATION	2.008450201135958E-5	TEST
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999799154979886	WITHOUT_CLASSIFICATION	2.008450201135958E-5	TEST
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999990995898811	WITHOUT_CLASSIFICATION	9.004101189116777E-6	TEST
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999938952893003	WITHOUT_CLASSIFICATION	6.104710699740414E-6	TEST
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999939324118665	WITHOUT_CLASSIFICATION	6.06758813348248E-6	TEST
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999863670375955	WITHOUT_CLASSIFICATION	1.3632962404489888E-5	TEST
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999997726285585	WITHOUT_CLASSIFICATION	2.27371441495431E-6	TEST
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999424190228773	WITHOUT_CLASSIFICATION	5.758097712272521E-5	TEST
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999245850735644	WITHOUT_CLASSIFICATION	7.541492643558026E-5	TEST
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999870771099454	WITHOUT_CLASSIFICATION	1.2922890054592912E-5	TEST
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999146243824006	WITHOUT_CLASSIFICATION	8.537561759932074E-5	TEST
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999964703749493	WITHOUT_CLASSIFICATION	3.529625050647116E-6	TEST
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999027714301112	WITHOUT_CLASSIFICATION	9.722856988874097E-5	TEST
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999367781078417	WITHOUT_CLASSIFICATION	6.322189215839378E-5	TEST
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999934221141465	WITHOUT_CLASSIFICATION	6.577885853494818E-5	TEST
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999979244960639	WITHOUT_CLASSIFICATION	2.0755039361079036E-5	TEST
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999912731287501	WITHOUT_CLASSIFICATION	8.726871249930317E-6	TEST
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999215246956202	WITHOUT_CLASSIFICATION	7.84753043797911E-5	TEST
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999904475036901	WITHOUT_CLASSIFICATION	9.55249630977824E-6	TEST
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999712738375965	WITHOUT_CLASSIFICATION	2.8726162403421642E-5	TEST
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999781042778338	WITHOUT_CLASSIFICATION	2.189572216616639E-5	TEST
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999183036323693	WITHOUT_CLASSIFICATION	8.169636763062328E-5	TEST
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999804810143936	WITHOUT_CLASSIFICATION	1.95189856064325E-5	TEST
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999510138132087	WITHOUT_CLASSIFICATION	4.898618679132973E-5	TEST
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999715975934024	WITHOUT_CLASSIFICATION	2.8402406597539204E-5	TEST
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999835156939901	WITHOUT_CLASSIFICATION	1.6484306009812176E-5	TEST
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999745122277774	WITHOUT_CLASSIFICATION	2.54877722226277E-5	TEST
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999810246686681	WITHOUT_CLASSIFICATION	1.897533133196592E-5	TEST
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999974733266082	WITHOUT_CLASSIFICATION	2.5266733917278216E-6	TEST
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999934567866147	WITHOUT_CLASSIFICATION	6.54321338542558E-6	TEST
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9997465329783124	WITHOUT_CLASSIFICATION	2.5346702168757855E-4	TEST
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999823786793257	WITHOUT_CLASSIFICATION	1.762132067431949E-5	TEST
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999638461606912	WITHOUT_CLASSIFICATION	3.6153839308730674E-5	TEST
unwrap the object	WITHOUT_CLASSIFICATION	0.9999933155198778	WITHOUT_CLASSIFICATION	6.684480122160816E-6	TEST
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999949060199719	WITHOUT_CLASSIFICATION	5.093980028166746E-6	TEST
return the proxied object	WITHOUT_CLASSIFICATION	0.9999961040375168	WITHOUT_CLASSIFICATION	3.895962483126341E-6	TEST
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999893734196406	WITHOUT_CLASSIFICATION	1.0626580359508563E-5	TEST
early exit...	WITHOUT_CLASSIFICATION	0.9999824766182596	WITHOUT_CLASSIFICATION	1.7523381740391472E-5	TEST
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996478515257529	WITHOUT_CLASSIFICATION	3.521484742471297E-4	TEST
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999419216347653	WITHOUT_CLASSIFICATION	5.807836523464909E-5	TEST
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999919835568276	WITHOUT_CLASSIFICATION	8.016443172351924E-6	TEST
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999856721199042	WITHOUT_CLASSIFICATION	1.4327880095860466E-5	TEST
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999524911873672	WITHOUT_CLASSIFICATION	4.7508812632875027E-5	TEST
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999450450393459	WITHOUT_CLASSIFICATION	5.495496065409095E-5	TEST
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999450450393459	WITHOUT_CLASSIFICATION	5.495496065409095E-5	TEST
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999595968279561	WITHOUT_CLASSIFICATION	4.040317204392522E-5	TEST
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999805437549172	WITHOUT_CLASSIFICATION	1.945624508277105E-5	TEST
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999725273043907	WITHOUT_CLASSIFICATION	2.7472695609289076E-5	TEST
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999871787076832	WITHOUT_CLASSIFICATION	1.2821292316832794E-5	TEST
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999812243035622	WITHOUT_CLASSIFICATION	1.8775696437789974E-5	TEST
bad cast	WITHOUT_CLASSIFICATION	0.9999846716942699	WITHOUT_CLASSIFICATION	1.5328305730164526E-5	TEST
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999818049649231	WITHOUT_CLASSIFICATION	1.8195035076940655E-5	TEST
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998376331880645	WITHOUT_CLASSIFICATION	1.62366811935523E-4	TEST
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999845521124543	WITHOUT_CLASSIFICATION	1.5447887545713705E-5	TEST
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999867423220026	WITHOUT_CLASSIFICATION	1.3257677997448454E-5	TEST
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999323085928508	WITHOUT_CLASSIFICATION	6.769140714925802E-5	TEST
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999611313763662	WITHOUT_CLASSIFICATION	3.886862363379997E-5	TEST
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999956998163826	WITHOUT_CLASSIFICATION	4.300183617394755E-5	TEST
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999820088810807	WITHOUT_CLASSIFICATION	1.7991118919357618E-5	TEST
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999746860259671	WITHOUT_CLASSIFICATION	2.5313974033021228E-5	TEST
take a snapshot	WITHOUT_CLASSIFICATION	0.9999940939910693	WITHOUT_CLASSIFICATION	5.906008930700678E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999952638856686	WITHOUT_CLASSIFICATION	4.736114331320106E-6	TEST
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999998870328781	WITHOUT_CLASSIFICATION	1.1296712192565671E-7	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957837187868	WITHOUT_CLASSIFICATION	4.216281213099271E-6	TEST
We've been here before	WITHOUT_CLASSIFICATION	0.9999622097566692	WITHOUT_CLASSIFICATION	3.779024333082642E-5	TEST
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999309823981637	WITHOUT_CLASSIFICATION	6.901760183630821E-5	TEST
do the work	WITHOUT_CLASSIFICATION	0.9999957837187868	WITHOUT_CLASSIFICATION	4.216281213099271E-6	TEST
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999597106649111	WITHOUT_CLASSIFICATION	4.028933508882724E-5	TEST
or its key changed	WITHOUT_CLASSIFICATION	0.9999929915210407	WITHOUT_CLASSIFICATION	7.0084789592176065E-6	TEST
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998813684349883	WITHOUT_CLASSIFICATION	1.186315650115901E-4	TEST
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998117119231964	WITHOUT_CLASSIFICATION	1.8828807680361346E-4	TEST
force initialize!	WITHOUT_CLASSIFICATION	0.9999823615945272	WITHOUT_CLASSIFICATION	1.763840547272046E-5	TEST
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999993565222158	WITHOUT_CLASSIFICATION	6.434777842046279E-6	TEST
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999570408130634	WITHOUT_CLASSIFICATION	4.295918693655608E-5	TEST
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999692408258576	WITHOUT_CLASSIFICATION	3.075917414232194E-5	TEST
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999924474172922	WITHOUT_CLASSIFICATION	7.552582707877435E-6	TEST
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999571704428166	WITHOUT_CLASSIFICATION	4.282955718331909E-5	TEST
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999935055068949	WITHOUT_CLASSIFICATION	6.494493105080974E-6	TEST
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999057081475106	WITHOUT_CLASSIFICATION	9.42918524893206E-5	TEST
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999923872956819	WITHOUT_CLASSIFICATION	7.612704318082915E-6	TEST
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999984653294753	WITHOUT_CLASSIFICATION	1.53467052470681E-5	TEST
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999753989939608	WITHOUT_CLASSIFICATION	2.460100603921983E-5	TEST
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999955478836608	WITHOUT_CLASSIFICATION	4.45211633920519E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999853118533099	WITHOUT_CLASSIFICATION	1.4688146690204321E-5	TEST
optimization	WITHOUT_CLASSIFICATION	0.9999823813054984	WITHOUT_CLASSIFICATION	1.761869450160543E-5	TEST
optimization optimization	WITHOUT_CLASSIFICATION	0.9999757766660194	WITHOUT_CLASSIFICATION	2.4223333980551468E-5	TEST
re-snapshot	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999095795698493	WITHOUT_CLASSIFICATION	9.042043015069644E-5	TEST
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998717506351898	WITHOUT_CLASSIFICATION	1.2824936481010428E-4	TEST
memory optimization	WITHOUT_CLASSIFICATION	0.9999821606898481	WITHOUT_CLASSIFICATION	1.7839310151874286E-5	TEST
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999982379171507	WITHOUT_CLASSIFICATION	1.7620828492888086E-6	TEST
copied from Session:	WITHOUT_CLASSIFICATION	0.9999840953086531	WITHOUT_CLASSIFICATION	1.5904691346985718E-5	TEST
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999074932575871	WITHOUT_CLASSIFICATION	9.25067424129778E-5	TEST
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999746001806984	WITHOUT_CLASSIFICATION	2.539981930155544E-5	TEST
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999982917163259	WITHOUT_CLASSIFICATION	1.7082836739890266E-6	TEST
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999875418743447	WITHOUT_CLASSIFICATION	1.2458125655296786E-5	TEST
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999906060248877	WITHOUT_CLASSIFICATION	9.393975112390747E-6	TEST
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999988637909832	WITHOUT_CLASSIFICATION	1.1362090167180808E-6	TEST
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999932917146722	WITHOUT_CLASSIFICATION	6.708285327765426E-6	TEST
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999487078739757	WITHOUT_CLASSIFICATION	5.1292126024350646E-5	TEST
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999969963149195	WITHOUT_CLASSIFICATION	3.0036850805854457E-6	TEST
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999899266482586	WITHOUT_CLASSIFICATION	1.0073351741395415E-5	TEST
do the test	WITHOUT_CLASSIFICATION	0.9993287300122087	WITHOUT_CLASSIFICATION	6.71269987791251E-4	TEST
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997953441473503	WITHOUT_CLASSIFICATION	2.0465585264960233E-4	TEST
unwrap it	WITHOUT_CLASSIFICATION	0.999973610942577	WITHOUT_CLASSIFICATION	2.6389057423003307E-5	TEST
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999578046991802	WITHOUT_CLASSIFICATION	4.219530081975766E-5	TEST
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999834933256581	WITHOUT_CLASSIFICATION	1.650667434196957E-5	TEST
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999915853703886	WITHOUT_CLASSIFICATION	8.414629611384627E-6	TEST
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999915865587353	WITHOUT_CLASSIFICATION	8.413441264759902E-6	TEST
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999862107207688	WITHOUT_CLASSIFICATION	1.3789279231312581E-5	TEST
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999992138139283	WITHOUT_CLASSIFICATION	7.861860717019269E-6	TEST
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9908599151204738	WITHOUT_CLASSIFICATION	0.009140084879526219	TEST
int count = 0;	WITHOUT_CLASSIFICATION	0.9999900927446929	WITHOUT_CLASSIFICATION	9.907255307084959E-6	TEST
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999931013954655	WITHOUT_CLASSIFICATION	6.898604534548453E-6	TEST
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999934048557506	WITHOUT_CLASSIFICATION	6.5951442494394336E-6	TEST
count++;	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999988697495515	WITHOUT_CLASSIFICATION	1.1302504485036355E-5	TEST
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999920795589561	WITHOUT_CLASSIFICATION	7.920441043902361E-6	TEST
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999914091816086	WITHOUT_CLASSIFICATION	8.590818391503937E-6	TEST
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999937084762232	WITHOUT_CLASSIFICATION	6.291523776851965E-6	TEST
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999920334192819	WITHOUT_CLASSIFICATION	7.966580718008828E-6	TEST
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999921616308148	WITHOUT_CLASSIFICATION	7.838369185170042E-6	TEST
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999774732614031	WITHOUT_CLASSIFICATION	2.2526738596887976E-5	TEST
initialize this collection	WITHOUT_CLASSIFICATION	0.9999392991877173	WITHOUT_CLASSIFICATION	6.0700812282748515E-5	TEST
create one	WITHOUT_CLASSIFICATION	0.999992329595738	WITHOUT_CLASSIFICATION	7.670404262004143E-6	TEST
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999891630518135	WITHOUT_CLASSIFICATION	1.0836948186503491E-5	TEST
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999988532798917	WITHOUT_CLASSIFICATION	1.146720108367804E-6	TEST
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999615488621784	WITHOUT_CLASSIFICATION	3.845113782156204E-5	TEST
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9996885802015639	WITHOUT_CLASSIFICATION	3.114197984361281E-4	TEST
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594263616018	WITHOUT_CLASSIFICATION	4.057363839817887E-5	TEST
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323778228005	WITHOUT_CLASSIFICATION	6.762217719951611E-5	TEST
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678526596629	WITHOUT_CLASSIFICATION	3.214734033704152E-5	TEST
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999861302319191	WITHOUT_CLASSIFICATION	1.3869768080858033E-5	TEST
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999799035519549	WITHOUT_CLASSIFICATION	2.0096448045078478E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999886282846713	WITHOUT_CLASSIFICATION	1.137171532882778E-5	TEST
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999982069127438	WITHOUT_CLASSIFICATION	1.7930872562068992E-6	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999982027608899	WITHOUT_CLASSIFICATION	1.797239110104104E-5	TEST
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999592108386408	WITHOUT_CLASSIFICATION	4.078916135930252E-5	TEST
don't care...	WITHOUT_CLASSIFICATION	0.999982027608899	WITHOUT_CLASSIFICATION	1.797239110104104E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999557133143987	WITHOUT_CLASSIFICATION	4.428668560135295E-5	TEST
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999936940630292	WITHOUT_CLASSIFICATION	6.30593697082403E-6	TEST
named parameter	WITHOUT_CLASSIFICATION	0.9999863368943165	WITHOUT_CLASSIFICATION	1.366310568338704E-5	TEST
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998664472624923	WITHOUT_CLASSIFICATION	1.3355273750771988E-4	TEST
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999151820726688	WITHOUT_CLASSIFICATION	8.481792733119291E-5	TEST
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9947901864494167	WITHOUT_CLASSIFICATION	0.0052098135505833495	TEST
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999968135800882	WITHOUT_CLASSIFICATION	3.1864199119402345E-6	TEST
perform the actual work	WITHOUT_CLASSIFICATION	0.999991017941886	WITHOUT_CLASSIFICATION	8.982058114015299E-6	TEST
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999960226770321	WITHOUT_CLASSIFICATION	3.977322967887822E-6	TEST
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999751607229935	WITHOUT_CLASSIFICATION	2.483927700650645E-4	TEST
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999917580072113	WITHOUT_CLASSIFICATION	8.241992788731395E-6	TEST
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999980013614211	WITHOUT_CLASSIFICATION	1.9986385789007285E-5	TEST
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999080316354098	WITHOUT_CLASSIFICATION	9.196836459026092E-5	TEST
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9985216885938871	WITHOUT_CLASSIFICATION	0.0014783114061128772	TEST
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999983678863732	WITHOUT_CLASSIFICATION	1.6321136268113315E-5	TEST
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999932190183123	WITHOUT_CLASSIFICATION	6.780981687781078E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999813781151652	WITHOUT_CLASSIFICATION	1.8621884834884186E-5	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999813781151652	WITHOUT_CLASSIFICATION	1.8621884834884186E-5	TEST
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999854600117275	WITHOUT_CLASSIFICATION	1.4539988272542653E-5	TEST
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999958721951714	WITHOUT_CLASSIFICATION	4.127804828595658E-5	TEST
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999767388105663	WITHOUT_CLASSIFICATION	2.326118943379899E-5	TEST
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999444180988273	WITHOUT_CLASSIFICATION	5.558190117275464E-5	TEST
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999599194230582	WITHOUT_CLASSIFICATION	4.008057694170654E-5	TEST
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999699025859464	WITHOUT_CLASSIFICATION	3.009741405359444E-5	TEST
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9993244182080926	WITHOUT_CLASSIFICATION	6.755817919074781E-4	TEST
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999872222862225	WITHOUT_CLASSIFICATION	1.2777713777377362E-5	TEST
grab its current state	WITHOUT_CLASSIFICATION	0.9999935949168548	WITHOUT_CLASSIFICATION	6.405083145167942E-6	TEST
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999900108398074	WITHOUT_CLASSIFICATION	9.989160192682436E-6	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99993106499053	WITHOUT_CLASSIFICATION	6.893500946997976E-5	TEST
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999947088443611	WITHOUT_CLASSIFICATION	5.2911556388973314E-5	TEST
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999857018414585	WITHOUT_CLASSIFICATION	1.4298158541437507E-5	TEST
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999078479177667	WITHOUT_CLASSIFICATION	9.215208223337035E-5	TEST
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999826789830285	WITHOUT_CLASSIFICATION	1.7321016971529765E-5	TEST
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999777147218041	WITHOUT_CLASSIFICATION	2.228527819593232E-5	TEST
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999950332957848	WITHOUT_CLASSIFICATION	4.966704215219871E-6	TEST
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999455671753161	WITHOUT_CLASSIFICATION	5.4432824683755716E-5	TEST
use the current version	WITHOUT_CLASSIFICATION	0.9999971252623341	WITHOUT_CLASSIFICATION	2.8747376658538443E-6	TEST
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999982664318935	WITHOUT_CLASSIFICATION	1.7335681064969767E-5	TEST
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999614102332276	WITHOUT_CLASSIFICATION	3.858976677239124E-5	TEST
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999857107276141	WITHOUT_CLASSIFICATION	1.4289272385860002E-5	TEST
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999634712117624	WITHOUT_CLASSIFICATION	3.652878823763076E-5	TEST
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999859684572767	WITHOUT_CLASSIFICATION	1.4031542723297608E-5	TEST
even process null collections	WITHOUT_CLASSIFICATION	0.9999554615764034	WITHOUT_CLASSIFICATION	4.453842359660227E-5	TEST
get the id from the object	WITHOUT_CLASSIFICATION	0.999992473320224	WITHOUT_CLASSIFICATION	7.526679775935442E-6	TEST
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998747296060677	WITHOUT_CLASSIFICATION	1.2527039393232223E-4	TEST
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999468390430049	WITHOUT_CLASSIFICATION	5.31609569952236E-5	TEST
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999880071727804	WITHOUT_CLASSIFICATION	1.1992827219705935E-5	TEST
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999996091947565	WITHOUT_CLASSIFICATION	3.908052435062427E-6	TEST
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999379041609902	WITHOUT_CLASSIFICATION	6.209583900989381E-5	TEST
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999646244883833	WITHOUT_CLASSIFICATION	3.5375511616704445E-5	TEST
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993460069119138	WITHOUT_CLASSIFICATION	6.539930880862092E-4	TEST
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999870412534239	WITHOUT_CLASSIFICATION	1.2958746576172549E-5	TEST
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999989269641227	WITHOUT_CLASSIFICATION	1.0730358772978629E-5	TEST
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999899598638365	WITHOUT_CLASSIFICATION	1.0040136163435565E-5	TEST
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999843477220927	WITHOUT_CLASSIFICATION	1.5652277907357827E-5	TEST
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999800909703668	WITHOUT_CLASSIFICATION	1.9909029633286295E-5	TEST
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999884751050672	WITHOUT_CLASSIFICATION	1.1524894932806979E-5	TEST
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996325216788847	WITHOUT_CLASSIFICATION	3.6747832111520655E-4	TEST
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999371820543452	WITHOUT_CLASSIFICATION	6.281794565477269E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999575612772806	WITHOUT_CLASSIFICATION	4.243872271936057E-5	TEST
some statistics	WITHOUT_CLASSIFICATION	0.9999444268043323	WITHOUT_CLASSIFICATION	5.557319566762374E-5	TEST
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999770825094366	WITHOUT_CLASSIFICATION	2.2917490563318453E-5	TEST
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999857268635678	WITHOUT_CLASSIFICATION	1.4273136432272898E-5	TEST
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999957698121034	WITHOUT_CLASSIFICATION	4.2301878965650064E-6	TEST
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999542227484546	WITHOUT_CLASSIFICATION	4.577725154547847E-5	TEST
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999865312464732	WITHOUT_CLASSIFICATION	1.3468753526710152E-5	TEST
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999720302030536	WITHOUT_CLASSIFICATION	2.796979694641597E-5	TEST
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999534249500486	WITHOUT_CLASSIFICATION	4.657504995146783E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999575612772806	WITHOUT_CLASSIFICATION	4.243872271936057E-5	TEST
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999204800731419	WITHOUT_CLASSIFICATION	7.951992685808325E-5	TEST
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999825595026928	WITHOUT_CLASSIFICATION	1.7440497307186722E-4	TEST
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999976377109074	WITHOUT_CLASSIFICATION	2.3622890926057557E-6	TEST
get a snapshot	WITHOUT_CLASSIFICATION	0.999989547106275	WITHOUT_CLASSIFICATION	1.0452893725042195E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999822862197076	WITHOUT_CLASSIFICATION	1.771378029235247E-5	TEST
package-private	WITHOUT_CLASSIFICATION	0.9999822862197076	WITHOUT_CLASSIFICATION	1.771378029235247E-5	TEST
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9959829701791418	WITHOUT_CLASSIFICATION	0.0040170298208582	TEST
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999922615085981	WITHOUT_CLASSIFICATION	7.738491401895384E-6	TEST
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999292117414237	WITHOUT_CLASSIFICATION	7.078825857638612E-5	TEST
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999556280748597	WITHOUT_CLASSIFICATION	4.437192514033132E-5	TEST
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999612567024152	WITHOUT_CLASSIFICATION	3.87432975848036E-5	TEST
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999748184600953	WITHOUT_CLASSIFICATION	2.518153990474523E-5	TEST
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999951593827449	WITHOUT_CLASSIFICATION	4.840617255223587E-6	TEST
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9989031580948969	WITHOUT_CLASSIFICATION	0.001096841905102992	TEST
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999857689585542	WITHOUT_CLASSIFICATION	1.4231041445793557E-5	TEST
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9995868593948339	WITHOUT_CLASSIFICATION	4.1314060516610813E-4	TEST
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999991341538588	WITHOUT_CLASSIFICATION	8.658461412026855E-6	TEST
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999927489199154	WITHOUT_CLASSIFICATION	7.25108008461249E-6	TEST
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999842565966872	WITHOUT_CLASSIFICATION	1.574340331271973E-5	TEST
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999950215609211	WITHOUT_CLASSIFICATION	4.978439078894269E-6	TEST
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999107131069733	WITHOUT_CLASSIFICATION	8.928689302668376E-5	TEST
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994038066157592	WITHOUT_CLASSIFICATION	5.961933842408259E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999985329570062	WITHOUT_CLASSIFICATION	1.4670429937928E-6	TEST
cachedState,	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999772778493291	WITHOUT_CLASSIFICATION	2.2722150670847662E-5	TEST
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999851583597982	WITHOUT_CLASSIFICATION	1.4841640201760363E-5	TEST
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999963051374005	WITHOUT_CLASSIFICATION	3.69486259964618E-6	TEST
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999924673367698	WITHOUT_CLASSIFICATION	7.532663230085868E-6	TEST
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999971003853673	WITHOUT_CLASSIFICATION	2.8996146326861863E-6	TEST
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999986037134426	WITHOUT_CLASSIFICATION	1.3962865574098396E-6	TEST
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999807894916642	WITHOUT_CLASSIFICATION	1.9210508335796835E-4	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999853452866692	WITHOUT_CLASSIFICATION	1.4654713330725692E-5	TEST
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999850074773391	WITHOUT_CLASSIFICATION	1.4992522660969519E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998994987863199	WITHOUT_CLASSIFICATION	1.0050121368008153E-4	TEST
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999422724389352	WITHOUT_CLASSIFICATION	5.772756106483717E-5	TEST
DELETED	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999811984962673	WITHOUT_CLASSIFICATION	1.880150373258852E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999652231614207	WITHOUT_CLASSIFICATION	3.477683857938116E-5	TEST
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998418509297542	WITHOUT_CLASSIFICATION	1.5814907024577811E-4	TEST
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999941664369127	WITHOUT_CLASSIFICATION	5.833563087298905E-5	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999652231614207	WITHOUT_CLASSIFICATION	3.477683857938116E-5	TEST
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999861544045059	WITHOUT_CLASSIFICATION	1.3845595494233502E-5	TEST
before cascade!	WITHOUT_CLASSIFICATION	0.9999811984962673	WITHOUT_CLASSIFICATION	1.880150373258852E-5	TEST
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992301054962364	WITHOUT_CLASSIFICATION	7.698945037637466E-4	TEST
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999652231614207	WITHOUT_CLASSIFICATION	3.477683857938116E-5	TEST
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999955036330232	WITHOUT_CLASSIFICATION	4.496366976811417E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999775980520506	WITHOUT_CLASSIFICATION	2.2401947949429193E-5	TEST
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99993106499053	WITHOUT_CLASSIFICATION	6.893500946997976E-5	TEST
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999407462493622	WITHOUT_CLASSIFICATION	5.925375063774179E-5	TEST
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999121139980812	WITHOUT_CLASSIFICATION	8.788600191886649E-5	TEST
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999948285624046	WITHOUT_CLASSIFICATION	5.1714375953857314E-6	TEST
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999810530090633	WITHOUT_CLASSIFICATION	1.8946990936712844E-5	TEST
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999942485396291	WITHOUT_CLASSIFICATION	5.751460370901595E-5	TEST
the object is persistent	WITHOUT_CLASSIFICATION	0.9999802060016846	WITHOUT_CLASSIFICATION	1.9793998315397927E-5	TEST
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999922429635066	WITHOUT_CLASSIFICATION	7.757036493403642E-5	TEST
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999418105564096	WITHOUT_CLASSIFICATION	5.818944359028632E-5	TEST
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999701898078445	WITHOUT_CLASSIFICATION	2.9810192155533395E-5	TEST
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824017300475	WITHOUT_CLASSIFICATION	1.759826995260648E-5	TEST
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999747270522451	WITHOUT_CLASSIFICATION	2.527294775487938E-5	TEST
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999859716875351	WITHOUT_CLASSIFICATION	1.4028312464818934E-5	TEST
eat it and try next	WITHOUT_CLASSIFICATION	0.999996492618014	WITHOUT_CLASSIFICATION	3.507381985893764E-6	TEST
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999938492056284	WITHOUT_CLASSIFICATION	6.1507943716667476E-6	TEST
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999485147034044	WITHOUT_CLASSIFICATION	5.148529659545285E-5	TEST
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999648640161827	WITHOUT_CLASSIFICATION	3.513598381725966E-5	TEST
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999752595515001	WITHOUT_CLASSIFICATION	2.4740448499828934E-5	TEST
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999932758567405	WITHOUT_CLASSIFICATION	6.724143259551126E-6	TEST
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999570370513559	WITHOUT_CLASSIFICATION	4.2962948644072773E-5	TEST
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999872752131759	WITHOUT_CLASSIFICATION	1.2724786824115204E-5	TEST
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999958890964145	WITHOUT_CLASSIFICATION	4.11090358549259E-5	TEST
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998593274037733	WITHOUT_CLASSIFICATION	1.406725962267466E-4	TEST
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999650636085412	WITHOUT_CLASSIFICATION	3.493639145881124E-5	TEST
Note this!!	WITHOUT_CLASSIFICATION	0.9999861640448439	WITHOUT_CLASSIFICATION	1.3835955156006784E-5	TEST
Error message constants.	WITHOUT_CLASSIFICATION	0.9999828161100199	WITHOUT_CLASSIFICATION	1.718388998003442E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963064606806	WITHOUT_CLASSIFICATION	3.693539319408929E-5	TEST
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690659022243	WITHOUT_CLASSIFICATION	3.093409777559409E-5	TEST
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999753678067071	WITHOUT_CLASSIFICATION	2.4632193292808206E-5	TEST
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999906340764804	WITHOUT_CLASSIFICATION	9.365923519609994E-6	TEST
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999881210240387	WITHOUT_CLASSIFICATION	1.1878975961276708E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999989835197546	WITHOUT_CLASSIFICATION	1.016480245410004E-6	TEST
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999921615203543	WITHOUT_CLASSIFICATION	7.838479645675962E-6	TEST
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999910084417155	WITHOUT_CLASSIFICATION	8.991558284542003E-6	TEST
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999775536052169	WITHOUT_CLASSIFICATION	2.2446394783095264E-5	TEST
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999925568189322	WITHOUT_CLASSIFICATION	7.443181067745963E-6	TEST
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999757946050983	WITHOUT_CLASSIFICATION	2.420539490162599E-5	TEST
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999931333060063	WITHOUT_CLASSIFICATION	6.866693993812558E-6	TEST
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998874980045932	WITHOUT_CLASSIFICATION	1.125019954068673E-4	TEST
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999580913612474	WITHOUT_CLASSIFICATION	4.190863875256418E-5	TEST
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999959192637865	WITHOUT_CLASSIFICATION	4.080736213477279E-6	TEST
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999777990123818	WITHOUT_CLASSIFICATION	2.2200987618124256E-5	TEST
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999746477110308	WITHOUT_CLASSIFICATION	2.535228896916127E-5	TEST
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99984633901091	WITHOUT_CLASSIFICATION	1.536609890899352E-4	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999864736989633	WITHOUT_CLASSIFICATION	1.3526301036705294E-4	TEST
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999699914227054	WITHOUT_CLASSIFICATION	3.0008577294563944E-5	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999909904853064	WITHOUT_CLASSIFICATION	9.009514693604603E-6	TEST
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998560605122149	WITHOUT_CLASSIFICATION	1.4393948778508814E-4	TEST
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999204505708125	WITHOUT_CLASSIFICATION	7.954942918749714E-5	TEST
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999966538326258	WITHOUT_CLASSIFICATION	3.346167374207824E-5	TEST
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999692420754987	WITHOUT_CLASSIFICATION	3.075792450130846E-4	TEST
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999998159106383	WITHOUT_CLASSIFICATION	1.8408936169825685E-6	TEST
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999784873050234	WITHOUT_CLASSIFICATION	2.151269497669792E-5	TEST
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992491174783235	WITHOUT_CLASSIFICATION	7.50882521676617E-4	TEST
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999262455621698	WITHOUT_CLASSIFICATION	7.375443783021647E-5	TEST
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963064606806	WITHOUT_CLASSIFICATION	3.693539319408929E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999234271059892	WITHOUT_CLASSIFICATION	7.657289401073146E-5	TEST
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999990432309123	WITHOUT_CLASSIFICATION	9.567690876728915E-7	TEST
switch	WITHOUT_CLASSIFICATION	0.9999845173098821	WITHOUT_CLASSIFICATION	1.5482690117840145E-5	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999383407872462	WITHOUT_CLASSIFICATION	6.165921275376923E-5	TEST
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999412195382528	WITHOUT_CLASSIFICATION	5.878046174734469E-5	TEST
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999621854768352	WITHOUT_CLASSIFICATION	3.781452316487819E-5	TEST
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670017628406	WITHOUT_CLASSIFICATION	3.299823715932373E-5	TEST
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999918061879587	WITHOUT_CLASSIFICATION	8.193812041366242E-6	TEST
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999963371041177	WITHOUT_CLASSIFICATION	3.662895882358556E-6	TEST
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999428382481362	WITHOUT_CLASSIFICATION	5.7161751863796696E-5	TEST
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999927071474657	WITHOUT_CLASSIFICATION	7.292852534318879E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999880071727804	WITHOUT_CLASSIFICATION	1.1992827219705935E-5	TEST
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999772081518462	WITHOUT_CLASSIFICATION	2.2791848153845322E-5	TEST
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999959724857035	WITHOUT_CLASSIFICATION	4.027514296500398E-5	TEST
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999557133143987	WITHOUT_CLASSIFICATION	4.428668560135295E-5	TEST
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999994484973844	WITHOUT_CLASSIFICATION	5.515026156842577E-7	TEST
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999997601013301	WITHOUT_CLASSIFICATION	2.3989866989025573E-6	TEST
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.99998467180991	WITHOUT_CLASSIFICATION	1.532819008994942E-5	TEST
all clear	WITHOUT_CLASSIFICATION	0.999991056333914	WITHOUT_CLASSIFICATION	8.943666086069187E-6	TEST
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999990477335535	WITHOUT_CLASSIFICATION	9.522664465799948E-7	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999827725269158	WITHOUT_CLASSIFICATION	1.7227473084233127E-5	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999827725269158	WITHOUT_CLASSIFICATION	1.7227473084233127E-5	TEST
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999789338081199	WITHOUT_CLASSIFICATION	2.1066191880154833E-5	TEST
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999939119785695	WITHOUT_CLASSIFICATION	6.088021430549937E-6	TEST
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999892160209306	WITHOUT_CLASSIFICATION	1.0783979069423592E-5	TEST
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999809878537669	WITHOUT_CLASSIFICATION	1.901214623312392E-5	TEST
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999309604758102	WITHOUT_CLASSIFICATION	6.903952418980204E-5	TEST
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999917525221116	WITHOUT_CLASSIFICATION	8.247477888474834E-6	TEST
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999630189320795	WITHOUT_CLASSIFICATION	3.698106792049455E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999310775394873	WITHOUT_CLASSIFICATION	6.892246051272487E-5	TEST
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999310775394873	WITHOUT_CLASSIFICATION	6.892246051272487E-5	TEST
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999095342160261	WITHOUT_CLASSIFICATION	9.046578397397597E-5	TEST
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999922934452593	WITHOUT_CLASSIFICATION	7.706554740718556E-6	TEST
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998225693966687	WITHOUT_CLASSIFICATION	1.77430603331303E-4	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999929053987187	WITHOUT_CLASSIFICATION	7.094601281243143E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999929053987187	WITHOUT_CLASSIFICATION	7.094601281243143E-6	TEST
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999929053987187	WITHOUT_CLASSIFICATION	7.094601281243143E-6	TEST
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999685786515953	WITHOUT_CLASSIFICATION	3.142134840476958E-5	TEST
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999752768093931	WITHOUT_CLASSIFICATION	2.4723190606931887E-5	TEST
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999979066741454	WITHOUT_CLASSIFICATION	2.093325854604785E-5	TEST
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999444514190987	WITHOUT_CLASSIFICATION	5.554858090116596E-5	TEST
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999851892102987	WITHOUT_CLASSIFICATION	1.4810789701387894E-5	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999994329319492	WITHOUT_CLASSIFICATION	5.670680508442586E-7	TEST
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999942680032081	WITHOUT_CLASSIFICATION	5.731996791903066E-5	TEST
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9990432564766588	WITHOUT_CLASSIFICATION	9.567435233411732E-4	TEST
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999739940822208	WITHOUT_CLASSIFICATION	2.6005917779313162E-5	TEST
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999895713523927	WITHOUT_CLASSIFICATION	1.0428647607230455E-5	TEST
igndore it...	WITHOUT_CLASSIFICATION	0.9999821998756176	WITHOUT_CLASSIFICATION	1.780012438230957E-5	TEST
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999874875553941	WITHOUT_CLASSIFICATION	1.251244460598374E-5	TEST
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999012986867791	WITHOUT_CLASSIFICATION	9.870131322087578E-5	TEST
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999745304251909	WITHOUT_CLASSIFICATION	2.5469574809110753E-5	TEST
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999965725928579	WITHOUT_CLASSIFICATION	3.4274071421850876E-6	TEST
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999855687107382	WITHOUT_CLASSIFICATION	1.4431289261856509E-5	TEST
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999919568933723	WITHOUT_CLASSIFICATION	8.04310662772921E-6	TEST
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999992602631769	WITHOUT_CLASSIFICATION	7.397368230950263E-6	TEST
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999827725269158	WITHOUT_CLASSIFICATION	1.7227473084233127E-5	TEST
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999852659898466	WITHOUT_CLASSIFICATION	1.4734010153477788E-5	TEST
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999981117907518	WITHOUT_CLASSIFICATION	1.888209248151569E-6	TEST
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999668867542989	WITHOUT_CLASSIFICATION	3.311324570115501E-5	TEST
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999793017912477	WITHOUT_CLASSIFICATION	2.0698208752300562E-5	TEST
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999874603806772	WITHOUT_CLASSIFICATION	1.2539619322727677E-5	TEST
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999960026860977	WITHOUT_CLASSIFICATION	3.997313902340601E-6	TEST
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999572345436705	WITHOUT_CLASSIFICATION	4.276545632954818E-5	TEST
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999992515354381	WITHOUT_CLASSIFICATION	7.484645618883511E-6	TEST
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997625335546523	WITHOUT_CLASSIFICATION	2.3746644534770138E-4	TEST
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999905274788435	WITHOUT_CLASSIFICATION	9.472521156504845E-6	TEST
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9996556551832257	WITHOUT_CLASSIFICATION	3.4434481677425496E-4	TEST
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999557495376965	WITHOUT_CLASSIFICATION	4.425046230342406E-5	TEST
Set it!	WITHOUT_CLASSIFICATION	0.9999898034968383	WITHOUT_CLASSIFICATION	1.0196503161798985E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999874894181794	WITHOUT_CLASSIFICATION	1.2510581820694168E-5	TEST
strip the " where "	WITHOUT_CLASSIFICATION	0.9999793953839305	WITHOUT_CLASSIFICATION	2.0604616069383433E-5	TEST
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.99999916329567	WITHOUT_CLASSIFICATION	8.367043299860386E-7	TEST
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999954518920569	WITHOUT_CLASSIFICATION	4.548107943125679E-6	TEST
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999997171981628	WITHOUT_CLASSIFICATION	2.828018372052371E-6	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999846577559901	WITHOUT_CLASSIFICATION	1.5342244009860606E-5	TEST
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999846577559901	WITHOUT_CLASSIFICATION	1.5342244009860606E-5	TEST
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999898745658705	WITHOUT_CLASSIFICATION	1.0125434129581732E-5	TEST
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999938543578015	WITHOUT_CLASSIFICATION	6.145642198480408E-6	TEST
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999895972604232	WITHOUT_CLASSIFICATION	1.0402739576847899E-5	TEST
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999978769387781	WITHOUT_CLASSIFICATION	2.1230612218991643E-5	TEST
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999603072346404	WITHOUT_CLASSIFICATION	3.969276535971898E-5	TEST
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999702560242015	WITHOUT_CLASSIFICATION	2.9743975798470292E-5	TEST
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999744916742298	WITHOUT_CLASSIFICATION	2.5508325770127637E-5	TEST
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999110082019931	WITHOUT_CLASSIFICATION	8.899179800685499E-5	TEST
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999894879031117	WITHOUT_CLASSIFICATION	1.0512096888321715E-5	TEST
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999816388755063	WITHOUT_CLASSIFICATION	1.836112449369535E-5	TEST
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999200971371294	WITHOUT_CLASSIFICATION	7.990286287063017E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999880071727804	WITHOUT_CLASSIFICATION	1.1992827219705935E-5	TEST
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999984077606366	WITHOUT_CLASSIFICATION	1.5922393633444567E-6	TEST
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999920032553241	WITHOUT_CLASSIFICATION	7.996744675980057E-6	TEST
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999990118883909	WITHOUT_CLASSIFICATION	9.881116091314188E-7	TEST
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999154498277826	WITHOUT_CLASSIFICATION	8.455017221743803E-5	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987598693042	WITHOUT_CLASSIFICATION	1.240130695784771E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987598693042	WITHOUT_CLASSIFICATION	1.240130695784771E-6	TEST
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999643054773656	WITHOUT_CLASSIFICATION	3.569452263430031E-5	TEST
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997996236765	WITHOUT_CLASSIFICATION	2.0037632346952373E-7	TEST
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999190253602136	WITHOUT_CLASSIFICATION	8.097463978638457E-5	TEST
The property is a component...	WITHOUT_CLASSIFICATION	0.9999538498880249	WITHOUT_CLASSIFICATION	4.615011197513828E-5	TEST
The property is another class..	WITHOUT_CLASSIFICATION	0.9998815096966737	WITHOUT_CLASSIFICATION	1.1849030332637958E-4	TEST
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998691461565767	WITHOUT_CLASSIFICATION	1.3085384342319603E-4	TEST
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999454589004905	WITHOUT_CLASSIFICATION	5.4541099509568356E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999947455216782	WITHOUT_CLASSIFICATION	5.2544783217637085E-6	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999515400212364	WITHOUT_CLASSIFICATION	4.845997876362294E-5	TEST
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999860346056409	WITHOUT_CLASSIFICATION	1.396539435908543E-4	TEST
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999582512516796	WITHOUT_CLASSIFICATION	4.1748748320440865E-5	TEST
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999947455216782	WITHOUT_CLASSIFICATION	5.2544783217637085E-6	TEST
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999419595402272	WITHOUT_CLASSIFICATION	5.804045977275598E-5	TEST
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999864408876378	WITHOUT_CLASSIFICATION	1.3559112362272678E-5	TEST
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999930654939976	WITHOUT_CLASSIFICATION	6.934506002409178E-6	TEST
again, null != null here	WITHOUT_CLASSIFICATION	0.9999694231633991	WITHOUT_CLASSIFICATION	3.057683660085769E-5	TEST
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999657230831556	WITHOUT_CLASSIFICATION	3.427691684437868E-5	TEST
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999862393435606	WITHOUT_CLASSIFICATION	1.376065643941105E-5	TEST
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999786221514511	WITHOUT_CLASSIFICATION	2.1377848548985657E-5	TEST
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999842631547678	WITHOUT_CLASSIFICATION	1.5736845232135262E-5	TEST
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999961766260987	WITHOUT_CLASSIFICATION	3.823373901359537E-6	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999985725982882	WITHOUT_CLASSIFICATION	1.4274017117927907E-5	TEST
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998953605205493	WITHOUT_CLASSIFICATION	1.0463947945074592E-4	TEST
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999949749734696	WITHOUT_CLASSIFICATION	5.025026530385999E-6	TEST
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999987836089716	WITHOUT_CLASSIFICATION	1.2163910284007968E-5	TEST
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999942320495826	WITHOUT_CLASSIFICATION	5.767950417474247E-6	TEST
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999943932128174	WITHOUT_CLASSIFICATION	5.606787182647965E-6	TEST
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.999991886906821	WITHOUT_CLASSIFICATION	8.113093179154796E-6	TEST
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9993751669216505	WITHOUT_CLASSIFICATION	6.248330783494297E-4	TEST
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999275611538052	WITHOUT_CLASSIFICATION	7.243884619479634E-5	TEST
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999275611538052	WITHOUT_CLASSIFICATION	7.243884619479634E-5	TEST
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999786221514511	WITHOUT_CLASSIFICATION	2.1377848548985657E-5	TEST
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999841780846955	WITHOUT_CLASSIFICATION	1.582191530449841E-5	TEST
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999915123214397	WITHOUT_CLASSIFICATION	8.487678560328856E-6	TEST
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998887064349861	WITHOUT_CLASSIFICATION	1.1129356501393506E-4	TEST
#2	WITHOUT_CLASSIFICATION	0.9999839515095776	WITHOUT_CLASSIFICATION	1.6048490422409303E-5	TEST
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999834836798259	WITHOUT_CLASSIFICATION	1.651632017412385E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999861833344952	WITHOUT_CLASSIFICATION	1.3816665504810185E-5	TEST
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999889867934315	WITHOUT_CLASSIFICATION	1.1013206568447038E-5	TEST
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999452938103889	WITHOUT_CLASSIFICATION	5.470618961102557E-5	TEST
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999966312436727	WITHOUT_CLASSIFICATION	3.3687563273050868E-6	TEST
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999841827310681	WITHOUT_CLASSIFICATION	1.5817268931832642E-5	TEST
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999996802534099	WITHOUT_CLASSIFICATION	3.1974659011254085E-6	TEST
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999910660081399	WITHOUT_CLASSIFICATION	8.933991859994726E-6	TEST
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999748089319592	WITHOUT_CLASSIFICATION	2.519106804074165E-5	TEST
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999838391690128	WITHOUT_CLASSIFICATION	1.616083098725201E-5	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999595158964559	WITHOUT_CLASSIFICATION	4.048410354411477E-5	TEST
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999863921800507	WITHOUT_CLASSIFICATION	1.3607819949285444E-5	TEST
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999868630463201	WITHOUT_CLASSIFICATION	1.3136953679816486E-5	TEST
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.99999451144737	WITHOUT_CLASSIFICATION	5.48855263003142E-6	TEST
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999908156587758	WITHOUT_CLASSIFICATION	9.184341224196747E-5	TEST
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999921043277546	WITHOUT_CLASSIFICATION	7.895672245314595E-6	TEST
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999515743959193	WITHOUT_CLASSIFICATION	4.842560408071169E-5	TEST
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999703412264447	WITHOUT_CLASSIFICATION	2.9658773555294804E-5	TEST
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999612615703485	WITHOUT_CLASSIFICATION	3.873842965158279E-5	TEST
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999937691006932	WITHOUT_CLASSIFICATION	6.23089930689844E-6	TEST
return an empty Type array	WITHOUT_CLASSIFICATION	0.999977069249907	WITHOUT_CLASSIFICATION	2.293075009292346E-5	TEST
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999803742496376	WITHOUT_CLASSIFICATION	1.962575036249605E-5	TEST
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.998007143790657	WITHOUT_CLASSIFICATION	0.0019928562093429153	TEST
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999809113396938	WITHOUT_CLASSIFICATION	1.9088660306208657E-4	TEST
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999753564350206	WITHOUT_CLASSIFICATION	2.4643564979497086E-5	TEST
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999794202750756	WITHOUT_CLASSIFICATION	2.0579724924390262E-5	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999586720825829	WITHOUT_CLASSIFICATION	4.132791741702468E-5	TEST
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999846529042054	WITHOUT_CLASSIFICATION	1.534709579459933E-5	TEST
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999938316650815	WITHOUT_CLASSIFICATION	6.168334918531365E-6	TEST
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999993939348785	WITHOUT_CLASSIFICATION	6.0606512149778315E-6	TEST
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999897183882387	WITHOUT_CLASSIFICATION	1.0281611761279498E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998882849414743	WITHOUT_CLASSIFICATION	1.1171505852576172E-4	TEST
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999996200179549	WITHOUT_CLASSIFICATION	3.7998204508633073E-6	TEST
Collection of components.	WITHOUT_CLASSIFICATION	0.9999869728108468	WITHOUT_CLASSIFICATION	1.3027189153293181E-5	TEST
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997967606645902	WITHOUT_CLASSIFICATION	2.0323933540969033E-4	TEST
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999886761000709	WITHOUT_CLASSIFICATION	1.1323899929094959E-5	TEST
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999669984482933	WITHOUT_CLASSIFICATION	3.300155170661079E-5	TEST
currently allowed...	WITHOUT_CLASSIFICATION	0.9999874216179214	WITHOUT_CLASSIFICATION	1.2578382078625366E-5	TEST
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9997736940975429	WITHOUT_CLASSIFICATION	2.2630590245697405E-4	TEST
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999945432743282	WITHOUT_CLASSIFICATION	5.4567256717840385E-6	TEST
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997763431675012	WITHOUT_CLASSIFICATION	2.2365683249875169E-4	TEST
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998840766271441	WITHOUT_CLASSIFICATION	1.1592337285584746E-4	TEST
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999995617275941	WITHOUT_CLASSIFICATION	4.382724058956629E-6	TEST
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997371229149415	WITHOUT_CLASSIFICATION	2.628770850583872E-4	TEST
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999986920140986	WITHOUT_CLASSIFICATION	1.3079859014649233E-6	TEST
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999493053438242	WITHOUT_CLASSIFICATION	5.069465617587554E-5	TEST
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999158260575887	WITHOUT_CLASSIFICATION	8.417394241137437E-5	TEST
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999515400212364	WITHOUT_CLASSIFICATION	4.845997876362294E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996430298190853	WITHOUT_CLASSIFICATION	3.5697018091479196E-4	TEST
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999595158964559	WITHOUT_CLASSIFICATION	4.048410354411477E-5	TEST
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999868815401117	WITHOUT_CLASSIFICATION	1.3118459888170528E-5	TEST
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999753999693181	WITHOUT_CLASSIFICATION	2.4600030681874574E-5	TEST
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999949797280152	WITHOUT_CLASSIFICATION	5.020271984746353E-6	TEST
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999949131644704	WITHOUT_CLASSIFICATION	5.086835529575672E-6	TEST
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999977062425092	WITHOUT_CLASSIFICATION	2.2937574908033462E-5	TEST
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999980295227343	WITHOUT_CLASSIFICATION	1.9704772656722486E-6	TEST
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999275697454775	WITHOUT_CLASSIFICATION	7.243025452257357E-5	TEST
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999636330535385	WITHOUT_CLASSIFICATION	3.6366946461512676E-5	TEST
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999956542868125	WITHOUT_CLASSIFICATION	4.345713187508122E-5	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999975916281283	WITHOUT_CLASSIFICATION	2.408371871698431E-6	TEST
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998954289965472	WITHOUT_CLASSIFICATION	1.0457100345278783E-4	TEST
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999982826065398	WITHOUT_CLASSIFICATION	1.7173934601995227E-6	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999868336617258	WITHOUT_CLASSIFICATION	1.3166338274258482E-5	TEST
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999868336617258	WITHOUT_CLASSIFICATION	1.3166338274258482E-5	TEST
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997952039096506	WITHOUT_CLASSIFICATION	2.0479609034953038E-4	TEST
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9995264837065228	WITHOUT_CLASSIFICATION	4.7351629347732756E-4	TEST
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999992789162506	WITHOUT_CLASSIFICATION	7.210837494088191E-6	TEST
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9977712178845979	WITHOUT_CLASSIFICATION	0.002228782115402174	TEST
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999925068255012	WITHOUT_CLASSIFICATION	7.493174498681504E-6	TEST
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999916191368446	WITHOUT_CLASSIFICATION	8.38086315525553E-6	TEST
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999986373058287	WITHOUT_CLASSIFICATION	1.3626941713247796E-6	TEST
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999519350178954	WITHOUT_CLASSIFICATION	4.8064982104623184E-5	TEST
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999662379926004	WITHOUT_CLASSIFICATION	3.37620073995734E-5	TEST
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999748138487953	WITHOUT_CLASSIFICATION	2.5186151204642007E-5	TEST
A collection of components...	WITHOUT_CLASSIFICATION	0.9999748138487953	WITHOUT_CLASSIFICATION	2.5186151204642007E-5	TEST
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999558078691791	WITHOUT_CLASSIFICATION	4.4192130820778235E-5	TEST
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999728091234	WITHOUT_CLASSIFICATION	2.7190876587275E-7	TEST
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999797229605177	WITHOUT_CLASSIFICATION	2.027703948222019E-5	TEST
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999914203091559	WITHOUT_CLASSIFICATION	8.579690844070703E-6	TEST
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999408821727106	WITHOUT_CLASSIFICATION	5.911782728952086E-5	TEST
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997764464783062	WITHOUT_CLASSIFICATION	2.235535216938061E-4	TEST
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999976344157625	WITHOUT_CLASSIFICATION	2.3655842375833848E-6	TEST
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999805263061153	WITHOUT_CLASSIFICATION	1.9473693884728062E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999960757205525	WITHOUT_CLASSIFICATION	3.924279447497398E-5	TEST
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999977715543166	WITHOUT_CLASSIFICATION	2.2284456833967578E-6	TEST
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999900614414412	WITHOUT_CLASSIFICATION	9.938558558828022E-6	TEST
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999574554367867	WITHOUT_CLASSIFICATION	4.2544563213245963E-5	TEST
implied	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999653554538622	WITHOUT_CLASSIFICATION	3.464454613775186E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572074809997	WITHOUT_CLASSIFICATION	4.2792519000322055E-5	TEST
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999522595928675	WITHOUT_CLASSIFICATION	4.7740407132487256E-5	TEST
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999853385882089	WITHOUT_CLASSIFICATION	1.4661411791052303E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999776601569571	WITHOUT_CLASSIFICATION	2.2339843042974162E-5	TEST
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999844445438534	WITHOUT_CLASSIFICATION	1.5555456146697667E-5	TEST
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999904594304153	WITHOUT_CLASSIFICATION	9.540569584772983E-6	TEST
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999706656777257	WITHOUT_CLASSIFICATION	2.9334322274288772E-5	TEST
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999949799454162	WITHOUT_CLASSIFICATION	5.020054583823387E-6	TEST
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999985064738969	WITHOUT_CLASSIFICATION	1.4935261031219284E-6	TEST
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999832298698871	WITHOUT_CLASSIFICATION	1.6770130112891934E-5	TEST
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999859987350502	WITHOUT_CLASSIFICATION	1.4001264949773267E-5	TEST
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999923592492962	WITHOUT_CLASSIFICATION	7.640750703778628E-6	TEST
add the fetched entities	WITHOUT_CLASSIFICATION	0.999971419068466	WITHOUT_CLASSIFICATION	2.858093153406956E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999823642616623	WITHOUT_CLASSIFICATION	1.7635738337670394E-5	TEST
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753601008422	WITHOUT_CLASSIFICATION	2.4639899157854776E-5	TEST
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999967123245047	WITHOUT_CLASSIFICATION	3.2876754953823765E-6	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999755417957243	WITHOUT_CLASSIFICATION	2.445820427566946E-5	TEST
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999545727525825	WITHOUT_CLASSIFICATION	4.542724741741052E-5	TEST
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703733212985	WITHOUT_CLASSIFICATION	2.9626678701547458E-5	TEST
TODO:	WITHOUT_CLASSIFICATION	0.9952160915641244	WITHOUT_CLASSIFICATION	0.004783908435875652	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999954624342893	WITHOUT_CLASSIFICATION	4.537565710724194E-6	TEST
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999267781220883	WITHOUT_CLASSIFICATION	7.322187791169105E-5	TEST
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999835376026749	WITHOUT_CLASSIFICATION	1.6462397325141395E-5	TEST
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731987566595	WITHOUT_CLASSIFICATION	2.6801243340539243E-5	TEST
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999987759738106	WITHOUT_CLASSIFICATION	1.2240261893027462E-6	TEST
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999691533689615	WITHOUT_CLASSIFICATION	3.084663103843424E-5	TEST
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999804538258991	WITHOUT_CLASSIFICATION	1.9546174100975795E-5	TEST
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999891315266541	WITHOUT_CLASSIFICATION	1.0868473345837502E-5	TEST
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999803081250092	WITHOUT_CLASSIFICATION	1.969187499074935E-5	TEST
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998654073140802	WITHOUT_CLASSIFICATION	1.3459268591975627E-4	TEST
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999867401873064	WITHOUT_CLASSIFICATION	1.3259812693704992E-5	TEST
Dialect function	WITHOUT_CLASSIFICATION	0.9999856335069983	WITHOUT_CLASSIFICATION	1.4366493001658095E-5	TEST
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999832323792732	WITHOUT_CLASSIFICATION	1.6767620726778277E-5	TEST
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998708331960487	WITHOUT_CLASSIFICATION	1.2916680395126892E-4	TEST
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999914730907182	WITHOUT_CLASSIFICATION	8.526909281833746E-6	TEST
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999301288194216	WITHOUT_CLASSIFICATION	6.987118057845227E-5	TEST
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999894011724488	WITHOUT_CLASSIFICATION	1.0598827551255442E-5	TEST
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999688570394332	WITHOUT_CLASSIFICATION	3.1142960566793154E-5	TEST
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999903526206934	WITHOUT_CLASSIFICATION	9.647379306628513E-6	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999932447799439	WITHOUT_CLASSIFICATION	6.7552200560733E-6	TEST
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999991557089503	WITHOUT_CLASSIFICATION	8.442910496906834E-6	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999880330374831	WITHOUT_CLASSIFICATION	1.1966962516921492E-5	TEST
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999630255114691	WITHOUT_CLASSIFICATION	3.697448853095591E-5	TEST
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999880330374831	WITHOUT_CLASSIFICATION	1.1966962516921492E-5	TEST
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999872979393016	WITHOUT_CLASSIFICATION	1.270206069842255E-5	TEST
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999972406848217	WITHOUT_CLASSIFICATION	2.7593151783471787E-6	TEST
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999833669032689	WITHOUT_CLASSIFICATION	1.6633096731077783E-5	TEST
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999964404344541	WITHOUT_CLASSIFICATION	3.5595655459727234E-6	TEST
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999989853060081	WITHOUT_CLASSIFICATION	1.0146939919018435E-5	TEST
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999833669032689	WITHOUT_CLASSIFICATION	1.6633096731077783E-5	TEST
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999891216254578	WITHOUT_CLASSIFICATION	1.0878374542103009E-5	TEST
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997939074197072	WITHOUT_CLASSIFICATION	2.060925802927799E-4	TEST
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999933404606269	WITHOUT_CLASSIFICATION	6.659539373152005E-6	TEST
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999993136964156	WITHOUT_CLASSIFICATION	6.863035843942979E-6	TEST
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999653236269318	WITHOUT_CLASSIFICATION	3.4676373068210626E-5	TEST
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999941674447084	WITHOUT_CLASSIFICATION	5.832555291651661E-6	TEST
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999957744069641	WITHOUT_CLASSIFICATION	4.225593035915193E-6	TEST
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999735926909592	WITHOUT_CLASSIFICATION	2.6407309040801124E-4	TEST
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999928524564057	WITHOUT_CLASSIFICATION	7.147543594236433E-6	TEST
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999948074440643	WITHOUT_CLASSIFICATION	5.192555935651843E-6	TEST
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999795698836187	WITHOUT_CLASSIFICATION	2.043011638137307E-5	TEST
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999977105863616	WITHOUT_CLASSIFICATION	2.2894136384489937E-6	TEST
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995700729472	WITHOUT_CLASSIFICATION	4.2992705278965704E-7	TEST
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998232466767764	WITHOUT_CLASSIFICATION	1.767533232236405E-4	TEST
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999987525717847	WITHOUT_CLASSIFICATION	1.2474282152974653E-5	TEST
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999438725951454	WITHOUT_CLASSIFICATION	5.612740485463283E-5	TEST
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9981579368631782	WITHOUT_CLASSIFICATION	0.0018420631368218723	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999957306218191	WITHOUT_CLASSIFICATION	4.269378180879237E-6	TEST
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999957922067319	WITHOUT_CLASSIFICATION	4.2077932680882834E-5	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9981832772485479	WITHOUT_CLASSIFICATION	0.00181672275145212	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999817898447843	WITHOUT_CLASSIFICATION	1.821015521572971E-5	TEST
default mode	WITHOUT_CLASSIFICATION	0.9999934863271198	WITHOUT_CLASSIFICATION	6.513672880195174E-6	TEST
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999832459253644	WITHOUT_CLASSIFICATION	1.675407463563773E-5	TEST
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999980928898993	WITHOUT_CLASSIFICATION	1.9071101006961924E-5	TEST
after reset!	WITHOUT_CLASSIFICATION	0.999988071531021	WITHOUT_CLASSIFICATION	1.1928468978908471E-5	TEST
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999684805967627	WITHOUT_CLASSIFICATION	3.1519403237424E-5	TEST
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999976113819922	WITHOUT_CLASSIFICATION	2.388618007776814E-6	TEST
dotcount>=2	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999910896430653	WITHOUT_CLASSIFICATION	8.910356934719687E-6	TEST
if its "id"	WITHOUT_CLASSIFICATION	0.999980161289336	WITHOUT_CLASSIFICATION	1.9838710663993736E-5	TEST
or its the id property name	WITHOUT_CLASSIFICATION	0.9999872673211859	WITHOUT_CLASSIFICATION	1.2732678814066876E-5	TEST
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999832459253644	WITHOUT_CLASSIFICATION	1.675407463563773E-5	TEST
important!!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999833415808052	WITHOUT_CLASSIFICATION	1.6658419194864695E-5	TEST
an association	WITHOUT_CLASSIFICATION	0.9999334189137019	WITHOUT_CLASSIFICATION	6.658108629805188E-5	TEST
allow index() function:	WITHOUT_CLASSIFICATION	0.9999808554043806	WITHOUT_CLASSIFICATION	1.9144595619312177E-5	TEST
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.99910229219419	WITHOUT_CLASSIFICATION	8.977078058099716E-4	TEST
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9981832772485479	WITHOUT_CLASSIFICATION	0.00181672275145212	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
collections of values	WITHOUT_CLASSIFICATION	0.9999875695483132	WITHOUT_CLASSIFICATION	1.2430451686751506E-5	TEST
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999363699057326	WITHOUT_CLASSIFICATION	6.363009426734809E-5	TEST
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999303040173344	WITHOUT_CLASSIFICATION	6.969598266553712E-5	TEST
special case	WITHOUT_CLASSIFICATION	0.9999883508571145	WITHOUT_CLASSIFICATION	1.1649142885507216E-5	TEST
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999527955187093	WITHOUT_CLASSIFICATION	4.720448129057922E-5	TEST
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999974794974347	WITHOUT_CLASSIFICATION	2.5205025653932233E-6	TEST
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999446376069165	WITHOUT_CLASSIFICATION	5.536239308344566E-5	TEST
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999579110265459	WITHOUT_CLASSIFICATION	4.2088973454185926E-5	TEST
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999681791522348	WITHOUT_CLASSIFICATION	3.182084776510009E-5	TEST
register collection role	WITHOUT_CLASSIFICATION	0.9999745348960574	WITHOUT_CLASSIFICATION	2.5465103942604253E-5	TEST
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9993684397237245	WITHOUT_CLASSIFICATION	6.315602762754194E-4	TEST
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999927948572828	WITHOUT_CLASSIFICATION	7.205142717342755E-6	TEST
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999924002954028	WITHOUT_CLASSIFICATION	7.59970459724908E-6	TEST
ie. no select clause	WITHOUT_CLASSIFICATION	0.999991555372703	WITHOUT_CLASSIFICATION	8.444627296939086E-6	TEST
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999894411465259	WITHOUT_CLASSIFICATION	1.0558853474097039E-5	TEST
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999964412851035	WITHOUT_CLASSIFICATION	3.558714896480793E-6	TEST
many-to-many	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998845263390067	WITHOUT_CLASSIFICATION	1.1547366099328502E-4	TEST
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999876226004386	WITHOUT_CLASSIFICATION	1.237739956140368E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998483775821841	WITHOUT_CLASSIFICATION	1.516224178159343E-4	TEST
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999718644409598	WITHOUT_CLASSIFICATION	2.8135559040258226E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999728488381188	WITHOUT_CLASSIFICATION	2.71511618811356E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999728488381188	WITHOUT_CLASSIFICATION	2.71511618811356E-5	TEST
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999945320654169	WITHOUT_CLASSIFICATION	5.467934583132939E-6	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999728488381188	WITHOUT_CLASSIFICATION	2.71511618811356E-5	TEST
not known!	WITHOUT_CLASSIFICATION	0.9999728488381188	WITHOUT_CLASSIFICATION	2.71511618811356E-5	TEST
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999984058536807	WITHOUT_CLASSIFICATION	1.594146319301989E-5	TEST
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997791807818742	WITHOUT_CLASSIFICATION	2.208192181257712E-4	TEST
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999572453486938	WITHOUT_CLASSIFICATION	4.275465130629113E-5	TEST
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999572453486938	WITHOUT_CLASSIFICATION	4.275465130629113E-5	TEST
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999823387892474	WITHOUT_CLASSIFICATION	1.7661210752667582E-5	TEST
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999965965455339	WITHOUT_CLASSIFICATION	3.403454466095187E-5	TEST
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999805036059242	WITHOUT_CLASSIFICATION	1.94963940758563E-5	TEST
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9994699890477995	WITHOUT_CLASSIFICATION	5.300109522004986E-4	TEST
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999892050509676	WITHOUT_CLASSIFICATION	1.0794949032493249E-5	TEST
Cope with [,]	WITHOUT_CLASSIFICATION	0.999902646187594	WITHOUT_CLASSIFICATION	9.735381240601335E-5	TEST
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998972513801895	WITHOUT_CLASSIFICATION	1.0274861981045681E-4	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999939064379171	WITHOUT_CLASSIFICATION	6.093562082924491E-6	TEST
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999918954753335	WITHOUT_CLASSIFICATION	8.104524666486591E-5	TEST
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998629399132261	WITHOUT_CLASSIFICATION	1.3706008677398708E-4	TEST
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999801987412067	WITHOUT_CLASSIFICATION	1.9801258793353777E-5	TEST
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998946442496601	WITHOUT_CLASSIFICATION	1.053557503397924E-4	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999886282846713	WITHOUT_CLASSIFICATION	1.137171532882778E-5	TEST
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999767303667714	WITHOUT_CLASSIFICATION	2.3269633228655594E-5	TEST
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999743528501254	WITHOUT_CLASSIFICATION	2.5647149874589996E-5	TEST
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998129724848476	WITHOUT_CLASSIFICATION	1.870275151524216E-4	TEST
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999986847230089	WITHOUT_CLASSIFICATION	1.3152769910647336E-6	TEST
Add any joins	WITHOUT_CLASSIFICATION	0.9999788424325206	WITHOUT_CLASSIFICATION	2.1157567479405844E-5	TEST
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999886282846713	WITHOUT_CLASSIFICATION	1.137171532882778E-5	TEST
named query parameter	WITHOUT_CLASSIFICATION	0.9999817898447843	WITHOUT_CLASSIFICATION	1.821015521572971E-5	TEST
path expression	WITHOUT_CLASSIFICATION	0.9999871180463374	WITHOUT_CLASSIFICATION	1.2881953662668928E-5	TEST
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999980517243985	WITHOUT_CLASSIFICATION	1.9482756015060458E-5	TEST
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999704068879721	WITHOUT_CLASSIFICATION	2.959311202789135E-5	TEST
anything else	WITHOUT_CLASSIFICATION	0.9999908607991721	WITHOUT_CLASSIFICATION	9.139200827950434E-6	TEST
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999945527379842	WITHOUT_CLASSIFICATION	5.447262015890708E-6	TEST
careful with this!	WITHOUT_CLASSIFICATION	0.9999058062910743	WITHOUT_CLASSIFICATION	9.419370892565333E-5	TEST
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999893296065141	WITHOUT_CLASSIFICATION	1.0670393485796146E-5	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999894873070758	WITHOUT_CLASSIFICATION	1.051269292410762E-5	TEST
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999946894598246	WITHOUT_CLASSIFICATION	5.310540175357026E-6	TEST
cannot instantiate	WITHOUT_CLASSIFICATION	0.999987553620583	WITHOUT_CLASSIFICATION	1.2446379416879455E-5	TEST
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999918362560854	WITHOUT_CLASSIFICATION	8.163743914601529E-5	TEST
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999942550439768	WITHOUT_CLASSIFICATION	5.744956023200958E-6	TEST
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999836199632376	WITHOUT_CLASSIFICATION	1.638003676240697E-5	TEST
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999028661680918	WITHOUT_CLASSIFICATION	9.713383190821108E-5	TEST
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999369201706128	WITHOUT_CLASSIFICATION	6.307982938723135E-5	TEST
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999926911486283	WITHOUT_CLASSIFICATION	7.308851371672172E-6	TEST
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999994692067273	WITHOUT_CLASSIFICATION	5.307932726967725E-6	TEST
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999959074852562	WITHOUT_CLASSIFICATION	4.0925147438043516E-5	TEST
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999040237061759	WITHOUT_CLASSIFICATION	9.597629382404371E-5	TEST
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999842661625454	WITHOUT_CLASSIFICATION	1.5733837454561996E-5	TEST
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999784519810004	WITHOUT_CLASSIFICATION	2.1548018999587064E-5	TEST
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999998979939252	WITHOUT_CLASSIFICATION	1.0200607479978801E-7	TEST
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999894873070758	WITHOUT_CLASSIFICATION	1.051269292410762E-5	TEST
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999864319462521	WITHOUT_CLASSIFICATION	1.3568053747857266E-5	TEST
do replacements	WITHOUT_CLASSIFICATION	0.9999822355941246	WITHOUT_CLASSIFICATION	1.7764405875359778E-5	TEST
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999975771524559	WITHOUT_CLASSIFICATION	2.422847544108883E-5	TEST
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999528332717323	WITHOUT_CLASSIFICATION	4.716672826760414E-5	TEST
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
hilo params	WITHOUT_CLASSIFICATION	0.9999821808982107	WITHOUT_CLASSIFICATION	1.7819101789288478E-5	TEST
sql = query;	WITHOUT_CLASSIFICATION	0.9999930508311641	WITHOUT_CLASSIFICATION	6.949168835875167E-6	TEST
performance opt	WITHOUT_CLASSIFICATION	0.9999826296946659	WITHOUT_CLASSIFICATION	1.7370305334114994E-5	TEST
sql = update;	WITHOUT_CLASSIFICATION	0.9999930530852132	WITHOUT_CLASSIFICATION	6.946914786699624E-6	TEST
hilo config	WITHOUT_CLASSIFICATION	0.9999832924898113	WITHOUT_CLASSIFICATION	1.6707510188639577E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999763809326436	WITHOUT_CLASSIFICATION	2.3619067356413716E-5	TEST
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999946113517709	WITHOUT_CLASSIFICATION	5.388648228998077E-6	TEST
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999801096264574	WITHOUT_CLASSIFICATION	1.989037354251782E-5	TEST
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999507805176586	WITHOUT_CLASSIFICATION	4.9219482341348846E-5	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999769413623949	WITHOUT_CLASSIFICATION	2.3058637605100284E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999791227794099	WITHOUT_CLASSIFICATION	2.087722059015412E-5	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999763809326436	WITHOUT_CLASSIFICATION	2.3619067356413716E-5	TEST
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999972990910613	WITHOUT_CLASSIFICATION	2.70090893870005E-5	TEST
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999793303034062	WITHOUT_CLASSIFICATION	2.0669696593670192E-5	TEST
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999183036323693	WITHOUT_CLASSIFICATION	8.169636763062328E-5	TEST
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998963711120764	WITHOUT_CLASSIFICATION	1.0362888792352417E-4	TEST
the default...	WITHOUT_CLASSIFICATION	0.9999922742857897	WITHOUT_CLASSIFICATION	7.725714210263955E-6	TEST
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998961423703723	WITHOUT_CLASSIFICATION	1.0385762962761879E-4	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999726223212715	WITHOUT_CLASSIFICATION	2.737767872857852E-5	TEST
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953319584224	WITHOUT_CLASSIFICATION	4.6680415775955853E-5	TEST
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643703714691	WITHOUT_CLASSIFICATION	3.562962853080863E-5	TEST
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647108151796	WITHOUT_CLASSIFICATION	3.5289184820515365E-5	TEST
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647108151796	WITHOUT_CLASSIFICATION	3.5289184820515365E-5	TEST
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647108151796	WITHOUT_CLASSIFICATION	3.5289184820515365E-5	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999980622225627	WITHOUT_CLASSIFICATION	1.937777437262191E-6	TEST
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999980622225627	WITHOUT_CLASSIFICATION	1.937777437262191E-6	TEST
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998350133958189	WITHOUT_CLASSIFICATION	1.6498660418116614E-4	TEST
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999962364327264	WITHOUT_CLASSIFICATION	3.763567273691689E-6	TEST
scroll ahead	WITHOUT_CLASSIFICATION	0.9999823747841413	WITHOUT_CLASSIFICATION	1.762521585867096E-5	TEST
scroll backward	WITHOUT_CLASSIFICATION	0.999985352425044	WITHOUT_CLASSIFICATION	1.464757495587685E-5	TEST
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999335997902141	WITHOUT_CLASSIFICATION	6.640020978587522E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572565051907	WITHOUT_CLASSIFICATION	4.274349480927097E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590359014521	WITHOUT_CLASSIFICATION	4.096409854793323E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999975788272993	WITHOUT_CLASSIFICATION	2.421172700565211E-6	TEST
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969231154246	WITHOUT_CLASSIFICATION	3.076884575403616E-5	TEST
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572565051907	WITHOUT_CLASSIFICATION	4.274349480927097E-5	TEST
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590359014521	WITHOUT_CLASSIFICATION	4.096409854793323E-5	TEST
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
Caches	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
Generators:	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999527586933187	WITHOUT_CLASSIFICATION	4.724130668121738E-5	TEST
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999788592172796	WITHOUT_CLASSIFICATION	2.1140782720516766E-5	TEST
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999982263833908	WITHOUT_CLASSIFICATION	1.773616609267952E-6	TEST
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9998735616323605	WITHOUT_CLASSIFICATION	1.264383676395143E-4	TEST
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999830929737527	WITHOUT_CLASSIFICATION	1.6907026247290443E-5	TEST
checking for named queries	WITHOUT_CLASSIFICATION	0.9999741131950877	WITHOUT_CLASSIFICATION	2.58868049123939E-5	TEST
stats	WITHOUT_CLASSIFICATION	0.9999839635915844	WITHOUT_CLASSIFICATION	1.603640841568467E-5	TEST
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999818536579245	WITHOUT_CLASSIFICATION	1.8146342075595713E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999755391945294	WITHOUT_CLASSIFICATION	2.446080547060107E-4	TEST
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999917611183217	WITHOUT_CLASSIFICATION	8.238881678309344E-5	TEST
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999703506085186	WITHOUT_CLASSIFICATION	2.9649391481419544E-5	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999831386088592	WITHOUT_CLASSIFICATION	1.686139114074638E-5	TEST
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999862220900876	WITHOUT_CLASSIFICATION	1.3777909912374379E-5	TEST
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9937722540335273	WITHOUT_CLASSIFICATION	0.00622774596647263	TEST
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999824017300475	WITHOUT_CLASSIFICATION	1.759826995260648E-5	TEST
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999687151298848	WITHOUT_CLASSIFICATION	3.128487011516802E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999655317278708	WITHOUT_CLASSIFICATION	3.4468272129246955E-5	TEST
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999964866210849	WITHOUT_CLASSIFICATION	3.5133789151584044E-6	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999220509895842	WITHOUT_CLASSIFICATION	7.794901041577708E-5	TEST
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999485708163822	WITHOUT_CLASSIFICATION	5.142918361773185E-5	TEST
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999923693363799	WITHOUT_CLASSIFICATION	7.63066362005994E-6	TEST
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.999972719829412	WITHOUT_CLASSIFICATION	2.7280170587983463E-5	TEST
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999424201671816	WITHOUT_CLASSIFICATION	5.757983281836687E-5	TEST
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570104796829	WITHOUT_CLASSIFICATION	4.298952031718772E-5	TEST
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999913978551653	WITHOUT_CLASSIFICATION	8.602144834739974E-6	TEST
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581377160817	WITHOUT_CLASSIFICATION	4.186228391837612E-5	TEST
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999395074807462	WITHOUT_CLASSIFICATION	6.049251925382211E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999323085928508	WITHOUT_CLASSIFICATION	6.769140714925802E-5	TEST
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999323085928508	WITHOUT_CLASSIFICATION	6.769140714925802E-5	TEST
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999678034674446	WITHOUT_CLASSIFICATION	3.219653255536182E-5	TEST
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999952406519201	WITHOUT_CLASSIFICATION	4.759348079939376E-6	TEST
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999427336000094	WITHOUT_CLASSIFICATION	5.7266399990696676E-5	TEST
/	WITHOUT_CLASSIFICATION	0.9999880071727804	WITHOUT_CLASSIFICATION	1.1992827219705935E-5	TEST
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999935635732902	WITHOUT_CLASSIFICATION	6.436426709931835E-6	TEST
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999823069830658	WITHOUT_CLASSIFICATION	1.7693016934200226E-5	TEST
for EJB3	WITHOUT_CLASSIFICATION	0.9999795092042345	WITHOUT_CLASSIFICATION	2.049079576541879E-5	TEST
just ignore	WITHOUT_CLASSIFICATION	0.999992524666026	WITHOUT_CLASSIFICATION	7.4753339741555525E-6	TEST
do a check	WITHOUT_CLASSIFICATION	0.9999952638856686	WITHOUT_CLASSIFICATION	4.736114331320106E-6	TEST
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580749607042	WITHOUT_CLASSIFICATION	4.1925039295745425E-5	TEST
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995796493912	WITHOUT_CLASSIFICATION	4.2035060880034866E-5	TEST
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579870155549	WITHOUT_CLASSIFICATION	4.201298444500174E-5	TEST
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.99996242766631	WITHOUT_CLASSIFICATION	3.7572333689975607E-5	TEST
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9989605192648557	WITHOUT_CLASSIFICATION	0.0010394807351441918	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997659667873019	WITHOUT_CLASSIFICATION	2.3403321269799753E-4	TEST
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999978632020224	WITHOUT_CLASSIFICATION	2.1367979776686374E-6	TEST
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999706959811625	WITHOUT_CLASSIFICATION	2.9304018837407416E-5	TEST
not for internal use:	WITHOUT_CLASSIFICATION	0.999955747039417	WITHOUT_CLASSIFICATION	4.4252960582898606E-5	TEST
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999153100130461	WITHOUT_CLASSIFICATION	8.46899869538005E-5	TEST
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999918949138386	WITHOUT_CLASSIFICATION	8.105086161499101E-6	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997659667873019	WITHOUT_CLASSIFICATION	2.3403321269799753E-4	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997659667873019	WITHOUT_CLASSIFICATION	2.3403321269799753E-4	TEST
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999407799225548	WITHOUT_CLASSIFICATION	5.922007744522626E-5	TEST
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999340161611737	WITHOUT_CLASSIFICATION	6.59838388262513E-5	TEST
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9933036680387745	WITHOUT_CLASSIFICATION	0.006696331961225587	TEST
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999877841846935	WITHOUT_CLASSIFICATION	1.2215815306530514E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999874894181794	WITHOUT_CLASSIFICATION	1.2510581820694168E-5	TEST
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999655317278708	WITHOUT_CLASSIFICATION	3.4468272129246955E-5	TEST
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9995311387210963	WITHOUT_CLASSIFICATION	4.688612789036097E-4	TEST
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999893753003756	WITHOUT_CLASSIFICATION	1.0624699624462883E-5	TEST
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999778822258248	WITHOUT_CLASSIFICATION	2.211777417522736E-5	TEST
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636727698203	WITHOUT_CLASSIFICATION	3.632723017957539E-5	TEST
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999885140076356	WITHOUT_CLASSIFICATION	1.1485992364516348E-5	TEST
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620627118009	WITHOUT_CLASSIFICATION	3.793728819911443E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999730129495085	WITHOUT_CLASSIFICATION	2.6987050491530063E-5	TEST
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999730129495085	WITHOUT_CLASSIFICATION	2.6987050491530063E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999730129495085	WITHOUT_CLASSIFICATION	2.6987050491530063E-5	TEST
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999730129495085	WITHOUT_CLASSIFICATION	2.6987050491530063E-5	TEST
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627078488044	WITHOUT_CLASSIFICATION	3.7292151195583324E-5	TEST
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999364184160459	WITHOUT_CLASSIFICATION	6.358158395417278E-5	TEST
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998864936470951	WITHOUT_CLASSIFICATION	1.1350635290494994E-4	TEST
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999825056622248	WITHOUT_CLASSIFICATION	1.7494337775099824E-5	TEST
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571451469299	WITHOUT_CLASSIFICATION	4.285485307007866E-5	TEST
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607193724781	WITHOUT_CLASSIFICATION	3.928062752184452E-5	TEST
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999780612719961	WITHOUT_CLASSIFICATION	2.193872800385767E-5	TEST
used from testsuite	WITHOUT_CLASSIFICATION	0.9999893525922616	WITHOUT_CLASSIFICATION	1.064740773839569E-5	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999533834867722	WITHOUT_CLASSIFICATION	4.661651322779862E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999598359333579	WITHOUT_CLASSIFICATION	4.016406664212587E-5	TEST
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999955391799974	WITHOUT_CLASSIFICATION	4.4608200026094555E-6	TEST
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999843150945295	WITHOUT_CLASSIFICATION	1.5684905470624445E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999832352982067	WITHOUT_CLASSIFICATION	1.676470179335373E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999832352982067	WITHOUT_CLASSIFICATION	1.676470179335373E-5	TEST
no big deal	WITHOUT_CLASSIFICATION	0.9999832352982067	WITHOUT_CLASSIFICATION	1.676470179335373E-5	TEST
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999810076670907	WITHOUT_CLASSIFICATION	1.8992332909220492E-5	TEST
see explanation above...	WITHOUT_CLASSIFICATION	0.999989549685757	WITHOUT_CLASSIFICATION	1.045031424299984E-5	TEST
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999972857464543	WITHOUT_CLASSIFICATION	2.7142535455997145E-6	TEST
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957034885408	WITHOUT_CLASSIFICATION	4.296511459203581E-5	TEST
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999866954629348	WITHOUT_CLASSIFICATION	1.3304537065154185E-5	TEST
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647108151796	WITHOUT_CLASSIFICATION	3.5289184820515365E-5	TEST
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999975568792452	WITHOUT_CLASSIFICATION	2.443120754838144E-6	TEST
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999710175207108	WITHOUT_CLASSIFICATION	2.8982479289201326E-5	TEST
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999947767175079	WITHOUT_CLASSIFICATION	5.2232824920608644E-6	TEST
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999177280333945	WITHOUT_CLASSIFICATION	8.227196660553862E-5	TEST
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957001755689	WITHOUT_CLASSIFICATION	4.2998244311107786E-5	TEST
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999924624664964	WITHOUT_CLASSIFICATION	7.537533503623867E-6	TEST
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999815562127544	WITHOUT_CLASSIFICATION	1.8443787245644697E-5	TEST
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999788469776735	WITHOUT_CLASSIFICATION	2.1153022326625854E-5	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999873709205159	WITHOUT_CLASSIFICATION	1.262907948410418E-4	TEST
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999619285831237	WITHOUT_CLASSIFICATION	3.807141687626704E-5	TEST
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999629023905673	WITHOUT_CLASSIFICATION	3.709760943269898E-5	TEST
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999914755255617	WITHOUT_CLASSIFICATION	8.524474438272331E-6	TEST
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999991550232598	WITHOUT_CLASSIFICATION	8.449767401338468E-7	TEST
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999732947503951	WITHOUT_CLASSIFICATION	2.6705249604913018E-5	TEST
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999991445482171	WITHOUT_CLASSIFICATION	8.554517829367651E-7	TEST
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998874975412515	WITHOUT_CLASSIFICATION	1.1250245874856656E-4	TEST
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999922231864663	WITHOUT_CLASSIFICATION	7.77681353380615E-6	TEST
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999442698925451	WITHOUT_CLASSIFICATION	5.5730107454829096E-5	TEST
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999862737613638	WITHOUT_CLASSIFICATION	1.3726238636080286E-5	TEST
final String queryString,	WITHOUT_CLASSIFICATION	0.9999810845033097	WITHOUT_CLASSIFICATION	1.8915496690312595E-5	TEST
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999483560510294	WITHOUT_CLASSIFICATION	5.16439489707282E-5	TEST
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999988697495515	WITHOUT_CLASSIFICATION	1.1302504485036355E-5	TEST
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999985359657338	WITHOUT_CLASSIFICATION	1.4640342661691134E-6	TEST
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999877404286777	WITHOUT_CLASSIFICATION	1.2259571322212198E-5	TEST
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999640735139733	WITHOUT_CLASSIFICATION	3.592648602656272E-5	TEST
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999889683404838	WITHOUT_CLASSIFICATION	1.1031659516225454E-5	TEST
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993393785871502	WITHOUT_CLASSIFICATION	6.606214128499123E-4	TEST
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999985329570062	WITHOUT_CLASSIFICATION	1.4670429937928E-6	TEST
handle empty collection	WITHOUT_CLASSIFICATION	0.9999847327777027	WITHOUT_CLASSIFICATION	1.5267222297224395E-5	TEST
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999796256029753	WITHOUT_CLASSIFICATION	2.03743970246704E-5	TEST
handle empty collections	WITHOUT_CLASSIFICATION	0.9999860375862327	WITHOUT_CLASSIFICATION	1.3962413767247205E-5	TEST
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999721495134872	WITHOUT_CLASSIFICATION	2.785048651279422E-5	TEST
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999691488913145	WITHOUT_CLASSIFICATION	3.0851108685517176E-5	TEST
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999191972700241	WITHOUT_CLASSIFICATION	8.080272997587089E-5	TEST
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999831227141873	WITHOUT_CLASSIFICATION	1.6877285812662923E-5	TEST
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999925183469751	WITHOUT_CLASSIFICATION	7.481653024958895E-6	TEST
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999451071861396	WITHOUT_CLASSIFICATION	5.4892813860446554E-5	TEST
use the id passed in	WITHOUT_CLASSIFICATION	0.9999975182828171	WITHOUT_CLASSIFICATION	2.4817171828926713E-6	TEST
do nothing	WITHOUT_CLASSIFICATION	0.9999813781151652	WITHOUT_CLASSIFICATION	1.8621884834884186E-5	TEST
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999684542015319	WITHOUT_CLASSIFICATION	3.154579846811538E-5	TEST
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999964665785266	WITHOUT_CLASSIFICATION	3.533421473406759E-5	TEST
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999972263711366	WITHOUT_CLASSIFICATION	2.773628863428154E-6	TEST
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998138053874053	WITHOUT_CLASSIFICATION	1.8619461259475272E-4	TEST
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999687449198718	WITHOUT_CLASSIFICATION	3.1255080128156705E-5	TEST
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997927010509629	WITHOUT_CLASSIFICATION	2.072989490371556E-4	TEST
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999940133333121	WITHOUT_CLASSIFICATION	5.9866666878957515E-6	TEST
look for a proxy	WITHOUT_CLASSIFICATION	0.9999889670930322	WITHOUT_CLASSIFICATION	1.1032906967676704E-5	TEST
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999341238654663	WITHOUT_CLASSIFICATION	6.587613453365194E-5	TEST
its the given optional object	WITHOUT_CLASSIFICATION	0.9999961478986259	WITHOUT_CLASSIFICATION	3.852101374122021E-6	TEST
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999838427690203	WITHOUT_CLASSIFICATION	1.615723097964355E-5	TEST
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9994978211612645	WITHOUT_CLASSIFICATION	5.021788387355561E-4	TEST
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999950604259265	WITHOUT_CLASSIFICATION	4.939574073519926E-6	TEST
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999943905191145	WITHOUT_CLASSIFICATION	5.609480885366419E-6	TEST
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9994882044218127	WITHOUT_CLASSIFICATION	5.117955781871921E-4	TEST
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999886781448287	WITHOUT_CLASSIFICATION	1.1321855171326008E-5	TEST
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999807946853421	WITHOUT_CLASSIFICATION	1.920531465797197E-5	TEST
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999160829347961	WITHOUT_CLASSIFICATION	8.391706520396204E-5	TEST
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997028908456	WITHOUT_CLASSIFICATION	2.971091544548547E-7	TEST
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999585948260983	WITHOUT_CLASSIFICATION	4.1405173901679855E-5	TEST
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995885492410771	WITHOUT_CLASSIFICATION	4.114507589227985E-4	TEST
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.99998053414582	WITHOUT_CLASSIFICATION	1.9465854179982748E-5	TEST
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999572431527279	WITHOUT_CLASSIFICATION	4.275684727213257E-5	TEST
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999982362869362	WITHOUT_CLASSIFICATION	1.7637130637980442E-6	TEST
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999651166893399	WITHOUT_CLASSIFICATION	3.48833106601829E-5	TEST
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999995269882924	WITHOUT_CLASSIFICATION	4.730117076015101E-6	TEST
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999923064689118	WITHOUT_CLASSIFICATION	7.693531088148733E-6	TEST
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999830952545508	WITHOUT_CLASSIFICATION	1.6904745449280916E-5	TEST
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999341402384457	WITHOUT_CLASSIFICATION	6.585976155431358E-5	TEST
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999991071698839	WITHOUT_CLASSIFICATION	8.928301160792416E-7	TEST
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999872671382969	WITHOUT_CLASSIFICATION	1.273286170305895E-5	TEST
a composite key	WITHOUT_CLASSIFICATION	0.9999856976638244	WITHOUT_CLASSIFICATION	1.4302336175607972E-5	TEST
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999992915474654	WITHOUT_CLASSIFICATION	7.084525346198915E-7	TEST
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999837726549158	WITHOUT_CLASSIFICATION	1.622734508427097E-5	TEST
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998352097959374	WITHOUT_CLASSIFICATION	1.6479020406257115E-4	TEST
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999573919756862	WITHOUT_CLASSIFICATION	4.260802431378676E-5	TEST
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998415576592018	WITHOUT_CLASSIFICATION	1.5844234079822605E-4	TEST
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9985124723705155	WITHOUT_CLASSIFICATION	0.0014875276294844387	TEST
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999650734614791	WITHOUT_CLASSIFICATION	3.4926538520911814E-5	TEST
we found it	WITHOUT_CLASSIFICATION	0.9999776725203718	WITHOUT_CLASSIFICATION	2.2327479628138128E-5	TEST
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999883944768925	WITHOUT_CLASSIFICATION	1.160552310760547E-5	TEST
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999782218720508	WITHOUT_CLASSIFICATION	2.1778127949245244E-5	TEST
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.99989996571909	WITHOUT_CLASSIFICATION	1.000342809099527E-4	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999831925072691	WITHOUT_CLASSIFICATION	1.680749273090552E-5	TEST
root entity comes last	WITHOUT_CLASSIFICATION	0.9999840686957625	WITHOUT_CLASSIFICATION	1.593130423749419E-5	TEST
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999859035225416	WITHOUT_CLASSIFICATION	1.4096477458445138E-5	TEST
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999869967720083	WITHOUT_CLASSIFICATION	1.300322799173451E-5	TEST
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999204483598406	WITHOUT_CLASSIFICATION	7.955164015947197E-5	TEST
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999705437279377	WITHOUT_CLASSIFICATION	2.9456272062281507E-5	TEST
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999776236965613	WITHOUT_CLASSIFICATION	2.2376303438660036E-5	TEST
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999986329796275	WITHOUT_CLASSIFICATION	1.3670203724885761E-5	TEST
the criteria instance	WITHOUT_CLASSIFICATION	0.9999924994689198	WITHOUT_CLASSIFICATION	7.50053108020333E-6	TEST
the entity name	WITHOUT_CLASSIFICATION	0.9999880968555396	WITHOUT_CLASSIFICATION	1.1903144460453185E-5	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999992675972012	WITHOUT_CLASSIFICATION	7.324027987882175E-6	TEST
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999992675972012	WITHOUT_CLASSIFICATION	7.324027987882175E-6	TEST
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999030250646068	WITHOUT_CLASSIFICATION	9.697493539318034E-5	TEST
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999709051314369	WITHOUT_CLASSIFICATION	2.9094868562996038E-5	TEST
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999756032899009	WITHOUT_CLASSIFICATION	2.439671009921663E-5	TEST
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9996425114566725	WITHOUT_CLASSIFICATION	3.574885433274282E-4	TEST
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999914112469928	WITHOUT_CLASSIFICATION	8.58875300723861E-6	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994925777358069	WITHOUT_CLASSIFICATION	5.074222641930678E-4	TEST
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9990998282374843	WITHOUT_CLASSIFICATION	9.001717625155529E-4	TEST
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997779551070949	WITHOUT_CLASSIFICATION	2.220448929050701E-4	TEST
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999672762274918	WITHOUT_CLASSIFICATION	3.272377250824426E-5	TEST
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991843295126329	WITHOUT_CLASSIFICATION	8.156704873671064E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999896286567279	WITHOUT_CLASSIFICATION	1.0371343272087894E-5	TEST
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999294058287638	WITHOUT_CLASSIFICATION	7.05941712362499E-5	TEST
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998028999039421	WITHOUT_CLASSIFICATION	1.9710009605798133E-4	TEST
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999949046417526	WITHOUT_CLASSIFICATION	5.095358247354498E-6	TEST
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999960592448455	WITHOUT_CLASSIFICATION	3.940755154635513E-6	TEST
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999286113910116	WITHOUT_CLASSIFICATION	7.138860898829184E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999792190652408	WITHOUT_CLASSIFICATION	2.0780934759225425E-5	TEST
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999792190652408	WITHOUT_CLASSIFICATION	2.0780934759225425E-5	TEST
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999820448527775	WITHOUT_CLASSIFICATION	1.795514722243298E-5	TEST
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999032615105383	WITHOUT_CLASSIFICATION	9.673848946165757E-5	TEST
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999913688729469	WITHOUT_CLASSIFICATION	8.631127052984596E-6	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.99995792905753	WITHOUT_CLASSIFICATION	4.207094247006972E-5	TEST
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999794134019815	WITHOUT_CLASSIFICATION	2.0586598018534265E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999853452866692	WITHOUT_CLASSIFICATION	1.4654713330725692E-5	TEST
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999794134019815	WITHOUT_CLASSIFICATION	2.0586598018534265E-5	TEST
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999836830902018	WITHOUT_CLASSIFICATION	1.6316909798186208E-5	TEST
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999754959874901	WITHOUT_CLASSIFICATION	2.450401250990934E-5	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999904140032312	WITHOUT_CLASSIFICATION	9.585996768809561E-6	TEST
already been processed...	WITHOUT_CLASSIFICATION	0.9999904140032312	WITHOUT_CLASSIFICATION	9.585996768809561E-6	TEST
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999531624413016	WITHOUT_CLASSIFICATION	4.6837558698443336E-5	TEST
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999424662167694	WITHOUT_CLASSIFICATION	5.7533783230705945E-5	TEST
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999422018742944	WITHOUT_CLASSIFICATION	5.77981257055737E-5	TEST
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999592551866556	WITHOUT_CLASSIFICATION	4.074481334446732E-5	TEST
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998277766355	WITHOUT_CLASSIFICATION	1.7222336437397192E-7	TEST
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999224043832725	WITHOUT_CLASSIFICATION	7.759561672748301E-5	TEST
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999941548868504	WITHOUT_CLASSIFICATION	5.845113149566902E-6	TEST
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999992602631769	WITHOUT_CLASSIFICATION	7.397368230950263E-6	TEST
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999953393341313	WITHOUT_CLASSIFICATION	4.66066586867951E-6	TEST
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998805819687676	WITHOUT_CLASSIFICATION	1.1941803123238617E-4	TEST
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999909904853064	WITHOUT_CLASSIFICATION	9.009514693604603E-6	TEST
make a new one	WITHOUT_CLASSIFICATION	0.9999383407872462	WITHOUT_CLASSIFICATION	6.165921275376923E-5	TEST
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.996807376550208	WITHOUT_CLASSIFICATION	0.0031926234497919085	TEST
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999834888990159	WITHOUT_CLASSIFICATION	1.6511100984108254E-5	TEST
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999776601569571	WITHOUT_CLASSIFICATION	2.2339843042974162E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952652819472	WITHOUT_CLASSIFICATION	4.7347180528157076E-6	TEST
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
by default	WITHOUT_CLASSIFICATION	0.999986325991484	WITHOUT_CLASSIFICATION	1.3674008515992773E-5	TEST
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999157916657958	WITHOUT_CLASSIFICATION	8.420833420427416E-5	TEST
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999690947944991	WITHOUT_CLASSIFICATION	3.090520550087892E-5	TEST
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999624639452737	WITHOUT_CLASSIFICATION	3.7536054726330924E-5	TEST
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999710290982716	WITHOUT_CLASSIFICATION	2.8970901728325976E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999897918516559	WITHOUT_CLASSIFICATION	1.0208148344006749E-5	TEST
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999754025020655	WITHOUT_CLASSIFICATION	2.4597497934398515E-5	TEST
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.99996220031243	WITHOUT_CLASSIFICATION	3.779968756996154E-5	TEST
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999470079513555	WITHOUT_CLASSIFICATION	5.299204864440595E-5	TEST
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997736856102042	WITHOUT_CLASSIFICATION	2.263143897958033E-4	TEST
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999806460328873	WITHOUT_CLASSIFICATION	1.9353967112684724E-5	TEST
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999990591343136	WITHOUT_CLASSIFICATION	9.408656864071903E-6	TEST
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987598693042	WITHOUT_CLASSIFICATION	1.240130695784771E-6	TEST
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999743229192061	WITHOUT_CLASSIFICATION	2.567708079399024E-5	TEST
usually useless	WITHOUT_CLASSIFICATION	0.9999824828534404	WITHOUT_CLASSIFICATION	1.7517146559607883E-5	TEST
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999512078256032	WITHOUT_CLASSIFICATION	4.879217439675891E-5	TEST
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999268972576326	WITHOUT_CLASSIFICATION	7.310274236737827E-5	TEST
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999648408519527	WITHOUT_CLASSIFICATION	3.515914804734521E-5	TEST
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999700567015631	WITHOUT_CLASSIFICATION	2.994329843686546E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999875876846279	WITHOUT_CLASSIFICATION	1.2412315372095782E-5	TEST
may be final	WITHOUT_CLASSIFICATION	0.9999875876846279	WITHOUT_CLASSIFICATION	1.2412315372095782E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999839611862588	WITHOUT_CLASSIFICATION	1.603881374122903E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673222626491	WITHOUT_CLASSIFICATION	3.267773735103083E-5	TEST
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999943389633301	WITHOUT_CLASSIFICATION	5.66103666987142E-6	TEST
ignore it...	WITHOUT_CLASSIFICATION	0.9999861291204429	WITHOUT_CLASSIFICATION	1.3870879556991423E-5	TEST
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999975847476398	WITHOUT_CLASSIFICATION	2.415252360201315E-5	TEST
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999993049021768	WITHOUT_CLASSIFICATION	6.950978231982948E-6	TEST
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999563497194	WITHOUT_CLASSIFICATION	4.365028054908609E-8	TEST
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999677541599233	WITHOUT_CLASSIFICATION	3.224584007656271E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999839611862588	WITHOUT_CLASSIFICATION	1.603881374122903E-5	TEST
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999673222626491	WITHOUT_CLASSIFICATION	3.267773735103083E-5	TEST
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998695953843276	WITHOUT_CLASSIFICATION	1.3040461567236748E-4	TEST
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999567850378424	WITHOUT_CLASSIFICATION	4.3214962157598884E-5	TEST
empty means no scoping	WITHOUT_CLASSIFICATION	0.999995177617128	WITHOUT_CLASSIFICATION	4.822382871999224E-6	TEST
index should be last column listed	WITHOUT_CLASSIFICATION	0.999958546645626	WITHOUT_CLASSIFICATION	4.1453354373979716E-5	TEST
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999987341554919	WITHOUT_CLASSIFICATION	1.2658445081083988E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9998418188467061	WITHOUT_CLASSIFICATION	1.581811532939214E-4	TEST
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999797725402979	WITHOUT_CLASSIFICATION	2.022745970214375E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999872374231629	WITHOUT_CLASSIFICATION	1.276257683716622E-5	TEST
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999895422646962	WITHOUT_CLASSIFICATION	1.0457735303755785E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998679579317754	WITHOUT_CLASSIFICATION	0.0013204206822460419	TEST
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999892722924022	WITHOUT_CLASSIFICATION	1.0727707597830101E-5	TEST
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.998679579317754	WITHOUT_CLASSIFICATION	0.0013204206822460419	TEST
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998144748757601	WITHOUT_CLASSIFICATION	1.855251242399119E-4	TEST
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999585948260983	WITHOUT_CLASSIFICATION	4.1405173901679855E-5	TEST
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998144748757601	WITHOUT_CLASSIFICATION	1.855251242399119E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998727412802094	WITHOUT_CLASSIFICATION	1.2725871979060537E-4	TEST
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999534719321452	WITHOUT_CLASSIFICATION	4.65280678547717E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999872374231629	WITHOUT_CLASSIFICATION	1.276257683716622E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999872374231629	WITHOUT_CLASSIFICATION	1.276257683716622E-5	TEST
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999818049649231	WITHOUT_CLASSIFICATION	1.8195035076940655E-5	TEST
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999818136066468	WITHOUT_CLASSIFICATION	1.8186393353234925E-5	TEST
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999818049649231	WITHOUT_CLASSIFICATION	1.8195035076940655E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999823376787339	WITHOUT_CLASSIFICATION	1.7662321266166737E-5	TEST
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999896303307347	WITHOUT_CLASSIFICATION	1.0369669265264112E-5	TEST
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999778443642797	WITHOUT_CLASSIFICATION	2.2155635720332157E-5	TEST
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998234361655804	WITHOUT_CLASSIFICATION	1.7656383441942713E-4	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999829283804478	WITHOUT_CLASSIFICATION	1.7071619552207944E-5	TEST
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999450171903795	WITHOUT_CLASSIFICATION	5.498280962048515E-5	TEST
KEY	WITHOUT_CLASSIFICATION	0.9999839509749356	WITHOUT_CLASSIFICATION	1.604902506441589E-5	TEST
columns	WITHOUT_CLASSIFICATION	0.9999845043441237	WITHOUT_CLASSIFICATION	1.549565587634527E-5	TEST
SQL statements	WITHOUT_CLASSIFICATION	0.9999822253780252	WITHOUT_CLASSIFICATION	1.7774621974821635E-5	TEST
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999964115749844	WITHOUT_CLASSIFICATION	3.588425015471656E-6	TEST
types	WITHOUT_CLASSIFICATION	0.9999857278797408	WITHOUT_CLASSIFICATION	1.427212025914381E-5	TEST
custom sql	WITHOUT_CLASSIFICATION	0.9999841674885475	WITHOUT_CLASSIFICATION	1.5832511452573547E-5	TEST
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999969751061802	WITHOUT_CLASSIFICATION	3.024893819805905E-5	TEST
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999818365540815	WITHOUT_CLASSIFICATION	1.816344591859145E-5	TEST
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999742443267449	WITHOUT_CLASSIFICATION	2.5755673255056997E-5	TEST
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999894266415742	WITHOUT_CLASSIFICATION	1.05733584258674E-5	TEST
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
ELEMENT	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999954394301857	WITHOUT_CLASSIFICATION	4.560569814332473E-6	TEST
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999822342663006	WITHOUT_CLASSIFICATION	1.776573369941638E-5	TEST
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999924540156974	WITHOUT_CLASSIFICATION	7.545984302620154E-6	TEST
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999832978269514	WITHOUT_CLASSIFICATION	1.6702173048627393E-5	TEST
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999822213541023	WITHOUT_CLASSIFICATION	1.777864589779475E-5	TEST
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999559656886152	WITHOUT_CLASSIFICATION	4.403431138484212E-5	TEST
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998333414989358	WITHOUT_CLASSIFICATION	1.666585010643035E-4	TEST
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999209712084849	WITHOUT_CLASSIFICATION	7.902879151513654E-5	TEST
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998991351384282	WITHOUT_CLASSIFICATION	1.0086486157174807E-4	TEST
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9847502545235299	WITHOUT_CLASSIFICATION	0.01524974547646996	TEST
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999853711433618	WITHOUT_CLASSIFICATION	1.462885663824E-5	TEST
strip leading ','	WITHOUT_CLASSIFICATION	0.9999829283804478	WITHOUT_CLASSIFICATION	1.7071619552207944E-5	TEST
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999858180169552	WITHOUT_CLASSIFICATION	1.4181983044900438E-5	TEST
needed by arrays	WITHOUT_CLASSIFICATION	0.9999097196718896	WITHOUT_CLASSIFICATION	9.028032811042724E-5	TEST
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9174902060780044	WITHOUT_CLASSIFICATION	0.08250979392199567	TEST
an assertion	WITHOUT_CLASSIFICATION	0.9999263686445882	WITHOUT_CLASSIFICATION	7.363135541179278E-5	TEST
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999953501188511	WITHOUT_CLASSIFICATION	4.649881148919457E-6	TEST
create all the new entries	WITHOUT_CLASSIFICATION	0.9999924903236973	WITHOUT_CLASSIFICATION	7.509676302668574E-6	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999823376787339	WITHOUT_CLASSIFICATION	1.7662321266166737E-5	TEST
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999823376787339	WITHOUT_CLASSIFICATION	1.7662321266166737E-5	TEST
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999949500259174	WITHOUT_CLASSIFICATION	5.0499740825501984E-6	TEST
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999900128077575	WITHOUT_CLASSIFICATION	9.987192242552578E-6	TEST
==elementType ??	WITHOUT_CLASSIFICATION	0.999987489599911	WITHOUT_CLASSIFICATION	1.2510400089002248E-5	TEST
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999918863197265	WITHOUT_CLASSIFICATION	8.113680273529262E-6	TEST
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999843896626221	WITHOUT_CLASSIFICATION	1.5610337377906395E-4	TEST
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999912285679069	WITHOUT_CLASSIFICATION	8.771432093127974E-6	TEST
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999927541207991	WITHOUT_CLASSIFICATION	7.245879200817645E-6	TEST
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999896656338529	WITHOUT_CLASSIFICATION	1.0334366147049356E-5	TEST
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999920809730183	WITHOUT_CLASSIFICATION	7.919026981696278E-5	TEST
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999898624221818	WITHOUT_CLASSIFICATION	1.0137577818185917E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999942427110647	WITHOUT_CLASSIFICATION	5.7572889353224495E-6	TEST
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999969751061802	WITHOUT_CLASSIFICATION	3.024893819805905E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Custom SQL	WITHOUT_CLASSIFICATION	0.9999839611862588	WITHOUT_CLASSIFICATION	1.603881374122903E-5	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999942427110647	WITHOUT_CLASSIFICATION	5.7572889353224495E-6	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999925726759449	WITHOUT_CLASSIFICATION	7.427324055209189E-6	TEST
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999986156255004	WITHOUT_CLASSIFICATION	1.3843744995838255E-6	TEST
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999916621214173	WITHOUT_CLASSIFICATION	8.337878582582072E-6	TEST
TODO: check this....	WITHOUT_CLASSIFICATION	0.9973993968934974	WITHOUT_CLASSIFICATION	0.002600603106502647	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999948013369778	WITHOUT_CLASSIFICATION	5.198663022213075E-5	TEST
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988170506778	WITHOUT_CLASSIFICATION	1.1829493222415388E-6	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999958034492011	WITHOUT_CLASSIFICATION	4.1965507987660035E-6	TEST
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999722674969018	WITHOUT_CLASSIFICATION	2.773250309821826E-5	TEST
MULTITABLES	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999983949047835	WITHOUT_CLASSIFICATION	1.6050952164896E-5	TEST
subclass closure properties	WITHOUT_CLASSIFICATION	0.999984367122974	WITHOUT_CLASSIFICATION	1.5632877025972423E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999429686358436	WITHOUT_CLASSIFICATION	5.7031364156229006E-5	TEST
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999429686358436	WITHOUT_CLASSIFICATION	5.7031364156229006E-5	TEST
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999438070431341	WITHOUT_CLASSIFICATION	5.619295686590095E-5	TEST
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998077271759248	WITHOUT_CLASSIFICATION	1.922728240751003E-4	TEST
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999942427110647	WITHOUT_CLASSIFICATION	5.7572889353224495E-6	TEST
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999948013369778	WITHOUT_CLASSIFICATION	5.198663022213075E-5	TEST
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999958034492011	WITHOUT_CLASSIFICATION	4.1965507987660035E-6	TEST
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999876189637829	WITHOUT_CLASSIFICATION	1.2381036217101184E-5	TEST
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999995355914071	WITHOUT_CLASSIFICATION	4.644085929583028E-7	TEST
discriminator column	WITHOUT_CLASSIFICATION	0.9999832764892574	WITHOUT_CLASSIFICATION	1.6723510742502106E-5	TEST
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999793606004495	WITHOUT_CLASSIFICATION	2.0639399550480914E-5	TEST
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999877392560604	WITHOUT_CLASSIFICATION	1.2260743939585954E-5	TEST
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999983950364714	WITHOUT_CLASSIFICATION	1.6049635285955615E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999925726759449	WITHOUT_CLASSIFICATION	7.427324055209189E-6	TEST
JOINS	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999592798158818	WITHOUT_CLASSIFICATION	4.072018411817867E-5	TEST
Access cached SQL	WITHOUT_CLASSIFICATION	0.999982618686927	WITHOUT_CLASSIFICATION	1.7381313073035068E-5	TEST
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998861605169296	WITHOUT_CLASSIFICATION	1.1383948307033892E-4	TEST
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999487227274891	WITHOUT_CLASSIFICATION	5.127727251085886E-5	TEST
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999468735123573	WITHOUT_CLASSIFICATION	5.3126487642636163E-5	TEST
render the SQL	WITHOUT_CLASSIFICATION	0.999992304900872	WITHOUT_CLASSIFICATION	7.695099127948156E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998727412802094	WITHOUT_CLASSIFICATION	1.2725871979060537E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834505182925	WITHOUT_CLASSIFICATION	1.6549481707520217E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998597606805826	WITHOUT_CLASSIFICATION	1.4023931941733537E-4	TEST
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999763012778696	WITHOUT_CLASSIFICATION	2.369872213046391E-5	TEST
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999956634517376	WITHOUT_CLASSIFICATION	4.336548262419223E-6	TEST
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999941401749015	WITHOUT_CLASSIFICATION	5.859825098479509E-6	TEST
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999879947597832	WITHOUT_CLASSIFICATION	1.2005240216869607E-5	TEST
SQL strings	WITHOUT_CLASSIFICATION	0.9999824103254212	WITHOUT_CLASSIFICATION	1.7589674578862795E-5	TEST
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999527288933069	WITHOUT_CLASSIFICATION	4.72711066931692E-5	TEST
PROPERTIES	WITHOUT_CLASSIFICATION	0.999983950364714	WITHOUT_CLASSIFICATION	1.6049635285955615E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
VERSION	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
WHERE STRING	WITHOUT_CLASSIFICATION	0.99998220686667	WITHOUT_CLASSIFICATION	1.7793133330039772E-5	TEST
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999755096801287	WITHOUT_CLASSIFICATION	2.449031987118234E-5	TEST
before add :-)	WITHOUT_CLASSIFICATION	0.9999493698247743	WITHOUT_CLASSIFICATION	5.063017522570831E-5	TEST
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999942352082548	WITHOUT_CLASSIFICATION	5.764791745174969E-6	TEST
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999124086467884	WITHOUT_CLASSIFICATION	8.759135321156034E-5	TEST
note early exit here:	WITHOUT_CLASSIFICATION	0.9999800696320648	WITHOUT_CLASSIFICATION	1.993036793532436E-5	TEST
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998795772219918	WITHOUT_CLASSIFICATION	1.2042277800821367E-4	TEST
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999239673236051	WITHOUT_CLASSIFICATION	7.603267639487859E-5	TEST
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999844184430795	WITHOUT_CLASSIFICATION	1.558155692044906E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999803907024775	WITHOUT_CLASSIFICATION	1.9609297522446724E-5	TEST
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999950124386437	WITHOUT_CLASSIFICATION	4.987561356237474E-6	TEST
null owner ok??	WITHOUT_CLASSIFICATION	0.9999892532447487	WITHOUT_CLASSIFICATION	1.0746755251155373E-5	TEST
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999979640768099	WITHOUT_CLASSIFICATION	2.03592319013344E-6	TEST
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999795201409267	WITHOUT_CLASSIFICATION	2.0479859073275555E-5	TEST
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999796680564328	WITHOUT_CLASSIFICATION	2.0331943567229906E-5	TEST
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999935664645648	WITHOUT_CLASSIFICATION	6.433535435260643E-6	TEST
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999472486309168	WITHOUT_CLASSIFICATION	5.2751369083320496E-5	TEST
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999632491473505	WITHOUT_CLASSIFICATION	3.675085264948695E-5	TEST
ALIASES	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999937221872752	WITHOUT_CLASSIFICATION	6.277812724797994E-5	TEST
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999690601927964	WITHOUT_CLASSIFICATION	3.093980720358262E-5	TEST
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999879103105594	WITHOUT_CLASSIFICATION	1.2089689440524726E-5	TEST
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999262601362543	WITHOUT_CLASSIFICATION	7.373986374572689E-5	TEST
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9953995061996932	WITHOUT_CLASSIFICATION	0.00460049380030679	TEST
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998686696479505	WITHOUT_CLASSIFICATION	1.313303520494787E-4	TEST
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999467721712632	WITHOUT_CLASSIFICATION	5.322782873690423E-5	TEST
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999597078724667	WITHOUT_CLASSIFICATION	4.0292127533218164E-5	TEST
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9927143219480173	WITHOUT_CLASSIFICATION	0.007285678051982634	TEST
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999715255512204	WITHOUT_CLASSIFICATION	2.8474448779568234E-5	TEST
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999985725982882	WITHOUT_CLASSIFICATION	1.4274017117927907E-5	TEST
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999786718799945	WITHOUT_CLASSIFICATION	2.1328120005537042E-5	TEST
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996430298190853	WITHOUT_CLASSIFICATION	3.5697018091479196E-4	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841446590967	WITHOUT_CLASSIFICATION	1.5855340903301857E-5	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999646990855943	WITHOUT_CLASSIFICATION	3.530091440569199E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999713905689944	WITHOUT_CLASSIFICATION	2.860943100556734E-5	TEST
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998645202864206	WITHOUT_CLASSIFICATION	1.3547971357950452E-4	TEST
add normal properties	WITHOUT_CLASSIFICATION	0.9999646990855943	WITHOUT_CLASSIFICATION	3.530091440569199E-5	TEST
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841446590967	WITHOUT_CLASSIFICATION	1.5855340903301857E-5	TEST
add the discriminator	WITHOUT_CLASSIFICATION	0.9999713905689944	WITHOUT_CLASSIFICATION	2.860943100556734E-5	TEST
add the primary key	WITHOUT_CLASSIFICATION	0.9999729677454191	WITHOUT_CLASSIFICATION	2.7032254580927118E-5	TEST
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999749294164914	WITHOUT_CLASSIFICATION	2.5070583508664095E-5	TEST
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9991093781064821	WITHOUT_CLASSIFICATION	8.90621893517853E-4	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999925143496705	WITHOUT_CLASSIFICATION	7.485650329447411E-6	TEST
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999993750698037	WITHOUT_CLASSIFICATION	6.249301962576683E-7	TEST
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.988608849217968	WITHOUT_CLASSIFICATION	0.01139115078203197	TEST
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999368573900989	WITHOUT_CLASSIFICATION	6.314260990118305E-5	TEST
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999499421644669	WITHOUT_CLASSIFICATION	5.005783553327366E-5	TEST
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999950244066815	WITHOUT_CLASSIFICATION	4.975593318496193E-6	TEST
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999982359310697	WITHOUT_CLASSIFICATION	1.764068930298949E-5	TEST
starting index	WITHOUT_CLASSIFICATION	0.999983890229323	WITHOUT_CLASSIFICATION	1.610977067696687E-5	TEST
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999899448252113	WITHOUT_CLASSIFICATION	1.005517478861953E-5	TEST
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999703928716088	WITHOUT_CLASSIFICATION	2.960712839115926E-5	TEST
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999925143496705	WITHOUT_CLASSIFICATION	7.485650329447411E-6	TEST
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999932189092532	WITHOUT_CLASSIFICATION	6.781090746791344E-6	TEST
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999917990863548	WITHOUT_CLASSIFICATION	8.200913645125262E-6	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999413430029094	WITHOUT_CLASSIFICATION	5.865699709067516E-5	TEST
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999987377459333	WITHOUT_CLASSIFICATION	1.2622540667134764E-6	TEST
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999629799418381	WITHOUT_CLASSIFICATION	3.7020058161966164E-5	TEST
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999191195691155	WITHOUT_CLASSIFICATION	8.088043088447496E-5	TEST
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999200106941181	WITHOUT_CLASSIFICATION	7.998930588192084E-5	TEST
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999959561731222	WITHOUT_CLASSIFICATION	4.0438268777541415E-6	TEST
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998854524768913	WITHOUT_CLASSIFICATION	1.1454752310877442E-4	TEST
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999680351034451	WITHOUT_CLASSIFICATION	3.1964896554928166E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999191195691155	WITHOUT_CLASSIFICATION	8.088043088447496E-5	TEST
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999191195691155	WITHOUT_CLASSIFICATION	8.088043088447496E-5	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999906145088622	WITHOUT_CLASSIFICATION	9.38549113785872E-6	TEST
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999906145088622	WITHOUT_CLASSIFICATION	9.38549113785872E-6	TEST
not supported	WITHOUT_CLASSIFICATION	0.9999503816182755	WITHOUT_CLASSIFICATION	4.96183817244405E-5	TEST
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999413430029094	WITHOUT_CLASSIFICATION	5.865699709067516E-5	TEST
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998349500883623	WITHOUT_CLASSIFICATION	1.6504991163762497E-4	TEST
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999986497277427	WITHOUT_CLASSIFICATION	1.3502722572829421E-5	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999921485810426	WITHOUT_CLASSIFICATION	7.851418957382878E-6	TEST
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999921485810426	WITHOUT_CLASSIFICATION	7.851418957382878E-6	TEST
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999934812406664	WITHOUT_CLASSIFICATION	6.51875933354559E-6	TEST
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999385314057845	WITHOUT_CLASSIFICATION	6.146859421551553E-5	TEST
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999975059940345	WITHOUT_CLASSIFICATION	2.4940059655859678E-6	TEST
skip the driving table	WITHOUT_CLASSIFICATION	0.9999901706456082	WITHOUT_CLASSIFICATION	9.829354391746067E-6	TEST
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999889167407635	WITHOUT_CLASSIFICATION	1.1083259236463436E-5	TEST
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999997045134861	WITHOUT_CLASSIFICATION	2.954865138490398E-7	TEST
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999926626070214	WITHOUT_CLASSIFICATION	7.3373929786746575E-6	TEST
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999977537442045	WITHOUT_CLASSIFICATION	2.2462557955111383E-5	TEST
now render the joins	WITHOUT_CLASSIFICATION	0.999991445421079	WITHOUT_CLASSIFICATION	8.554578920900262E-6	TEST
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999924209212733	WITHOUT_CLASSIFICATION	7.579078726683338E-6	TEST
now render the select clause	WITHOUT_CLASSIFICATION	0.9999892968920714	WITHOUT_CLASSIFICATION	1.0703107928604843E-5	TEST
now tie it all together	WITHOUT_CLASSIFICATION	0.9999720477174221	WITHOUT_CLASSIFICATION	2.795228257797899E-5	TEST
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999755068465089	WITHOUT_CLASSIFICATION	2.449315349110848E-5	TEST
select SQL	WITHOUT_CLASSIFICATION	0.9999853378086015	WITHOUT_CLASSIFICATION	1.4662191398437238E-5	TEST
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999405088016907	WITHOUT_CLASSIFICATION	5.949119830932578E-5	TEST
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999751801994913	WITHOUT_CLASSIFICATION	2.481980050874932E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960315023195	WITHOUT_CLASSIFICATION	3.9684976804968855E-5	TEST
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999990363686856	WITHOUT_CLASSIFICATION	9.636313144008849E-6	TEST
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999840539239693	WITHOUT_CLASSIFICATION	1.594607603074171E-5	TEST
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999975584027301	WITHOUT_CLASSIFICATION	2.4415972697901396E-6	TEST
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999984685654692	WITHOUT_CLASSIFICATION	1.5314345307998747E-5	TEST
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9998654460302046	WITHOUT_CLASSIFICATION	1.3455396979547327E-4	TEST
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999936754198098	WITHOUT_CLASSIFICATION	6.324580190195301E-6	TEST
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999900754203267	WITHOUT_CLASSIFICATION	9.924579673261494E-6	TEST
/	WITHOUT_CLASSIFICATION	0.9999880071727804	WITHOUT_CLASSIFICATION	1.1992827219705935E-5	TEST
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999815369455758	WITHOUT_CLASSIFICATION	1.8463054424257248E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999803907024775	WITHOUT_CLASSIFICATION	1.9609297522446724E-5	TEST
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999863737530024	WITHOUT_CLASSIFICATION	1.3626246997650632E-5	TEST
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999970101531876	WITHOUT_CLASSIFICATION	2.9898468123076387E-6	TEST
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570205625927	WITHOUT_CLASSIFICATION	4.297943740720933E-5	TEST
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999560309906586	WITHOUT_CLASSIFICATION	4.3969009341362284E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.999987417125834	WITHOUT_CLASSIFICATION	1.2582874165913578E-5	TEST
cannot occur	WITHOUT_CLASSIFICATION	0.999987417125834	WITHOUT_CLASSIFICATION	1.2582874165913578E-5	TEST
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999528417217076	WITHOUT_CLASSIFICATION	4.715827829236053E-5	TEST
try "get"	WITHOUT_CLASSIFICATION	0.9999858467396434	WITHOUT_CLASSIFICATION	1.4153260356470105E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999822169241028	WITHOUT_CLASSIFICATION	1.778307589726038E-5	TEST
do nothing...	WITHOUT_CLASSIFICATION	0.9999822169241028	WITHOUT_CLASSIFICATION	1.778307589726038E-5	TEST
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998882849414743	WITHOUT_CLASSIFICATION	1.1171505852576172E-4	TEST
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998983435079051	WITHOUT_CLASSIFICATION	1.0165649209488503E-4	TEST
do not do anything	WITHOUT_CLASSIFICATION	0.9999801702157816	WITHOUT_CLASSIFICATION	1.9829784218424458E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999874894181794	WITHOUT_CLASSIFICATION	1.2510581820694168E-5	TEST
cant instantiate	WITHOUT_CLASSIFICATION	0.9999834549092481	WITHOUT_CLASSIFICATION	1.6545090751891657E-5	TEST
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996020610885901	WITHOUT_CLASSIFICATION	3.97938911409965E-4	TEST
otherwise:	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999812892918567	WITHOUT_CLASSIFICATION	1.871070814324094E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999626976703111	WITHOUT_CLASSIFICATION	3.730232968900216E-5	TEST
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999626976703111	WITHOUT_CLASSIFICATION	3.730232968900216E-5	TEST
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999869273393097	WITHOUT_CLASSIFICATION	1.3072660690276348E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999632646086355	WITHOUT_CLASSIFICATION	3.673539136453294E-5	TEST
while constructor is running	WITHOUT_CLASSIFICATION	0.9999632646086355	WITHOUT_CLASSIFICATION	3.673539136453294E-5	TEST
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999661125724308	WITHOUT_CLASSIFICATION	3.3887427569220124E-5	TEST
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999838470936047	WITHOUT_CLASSIFICATION	1.6152906395384343E-5	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
Get the caller	WITHOUT_CLASSIFICATION	0.9999896628870403	WITHOUT_CLASSIFICATION	1.033711295978869E-5	TEST
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999857878219579	WITHOUT_CLASSIFICATION	1.4212178042140427E-5	TEST
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999832739933404	WITHOUT_CLASSIFICATION	1.67260066595962E-5	TEST
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999731060801144	WITHOUT_CLASSIFICATION	2.689391988560018E-5	TEST
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999857472467583	WITHOUT_CLASSIFICATION	1.4252753241692268E-4	TEST
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999914946265654	WITHOUT_CLASSIFICATION	8.5053734345858E-6	TEST
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997847885158806	WITHOUT_CLASSIFICATION	2.152114841194763E-4	TEST
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999954355589988	WITHOUT_CLASSIFICATION	4.564441001182604E-6	TEST
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999549842726335	WITHOUT_CLASSIFICATION	4.5015727366490404E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999983957950243	WITHOUT_CLASSIFICATION	1.6042049757027772E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999983957950243	WITHOUT_CLASSIFICATION	1.6042049757027772E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999983957950243	WITHOUT_CLASSIFICATION	1.6042049757027772E-5	TEST
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999983957950243	WITHOUT_CLASSIFICATION	1.6042049757027772E-5	TEST
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999642570986582	WITHOUT_CLASSIFICATION	3.5742901341767876E-5	TEST
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999142317540176	WITHOUT_CLASSIFICATION	8.576824598241049E-5	TEST
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
for MySQL	WITHOUT_CLASSIFICATION	0.9999795092042345	WITHOUT_CLASSIFICATION	2.049079576541879E-5	TEST
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999727397360653	WITHOUT_CLASSIFICATION	2.726026393464535E-5	TEST
null caused some problems	WITHOUT_CLASSIFICATION	0.9999549880764914	WITHOUT_CLASSIFICATION	4.5011923508704195E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996128687293602	WITHOUT_CLASSIFICATION	3.8713127063986564E-4	TEST
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999477746843011	WITHOUT_CLASSIFICATION	5.2225315698851496E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999985694088817	WITHOUT_CLASSIFICATION	1.4305911183451302E-6	TEST
we only release the connection	WITHOUT_CLASSIFICATION	0.9999878668204812	WITHOUT_CLASSIFICATION	1.213317951876877E-5	TEST
deprecated option...	WITHOUT_CLASSIFICATION	0.9999839688772868	WITHOUT_CLASSIFICATION	1.603112271319784E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999243013750544	WITHOUT_CLASSIFICATION	7.569862494570659E-5	TEST
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9944573940467694	WITHOUT_CLASSIFICATION	0.00554260595323061	TEST
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999535366477677	WITHOUT_CLASSIFICATION	4.646335223230245E-4	TEST
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999226476774122	WITHOUT_CLASSIFICATION	7.735232258778732E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999243013750544	WITHOUT_CLASSIFICATION	7.569862494570659E-5	TEST
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9968261708313582	WITHOUT_CLASSIFICATION	0.0031738291686418687	TEST
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999953783815119	WITHOUT_CLASSIFICATION	4.621618488174725E-6	TEST
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999044759628204	WITHOUT_CLASSIFICATION	9.552403717964355E-5	TEST
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997154261504606	WITHOUT_CLASSIFICATION	2.845738495394263E-4	TEST
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9996061106660984	WITHOUT_CLASSIFICATION	3.938893339015578E-4	TEST
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.99990592094231	WITHOUT_CLASSIFICATION	9.407905768998948E-5	TEST
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999997085229057	WITHOUT_CLASSIFICATION	2.914770943149505E-6	TEST
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999909868198638	WITHOUT_CLASSIFICATION	9.0131801362405E-6	TEST
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849855812112	WITHOUT_CLASSIFICATION	1.5014418788762766E-5	TEST
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999987233199222	WITHOUT_CLASSIFICATION	1.2766800778045503E-5	TEST
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849855812112	WITHOUT_CLASSIFICATION	1.5014418788762766E-5	TEST
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999884372194724	WITHOUT_CLASSIFICATION	1.1562780527671847E-5	TEST
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999815926833312	WITHOUT_CLASSIFICATION	1.840731666879321E-4	TEST
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997535007428202	WITHOUT_CLASSIFICATION	2.464992571797449E-4	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999995471480894	WITHOUT_CLASSIFICATION	4.5285191059922145E-6	TEST
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999963818758617	WITHOUT_CLASSIFICATION	3.6181241382286623E-6	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999460747470886	WITHOUT_CLASSIFICATION	5.392525291138745E-5	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999817650733385	WITHOUT_CLASSIFICATION	1.8234926661601635E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997574558874441	WITHOUT_CLASSIFICATION	2.425441125558845E-4	TEST
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999817650733385	WITHOUT_CLASSIFICATION	1.8234926661601635E-5	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999846699170211	WITHOUT_CLASSIFICATION	1.5330082978889558E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999651605175447	WITHOUT_CLASSIFICATION	3.4839482455249846E-5	TEST
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999670684186529	WITHOUT_CLASSIFICATION	3.2931581347059956E-5	TEST
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999693441229098	WITHOUT_CLASSIFICATION	3.065587709017505E-5	TEST
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999767344475684	WITHOUT_CLASSIFICATION	2.326555243167502E-5	TEST
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997837894973395	WITHOUT_CLASSIFICATION	2.162105026605144E-4	TEST
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999460747470886	WITHOUT_CLASSIFICATION	5.392525291138745E-5	TEST
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997574558874441	WITHOUT_CLASSIFICATION	2.425441125558845E-4	TEST
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999846699170211	WITHOUT_CLASSIFICATION	1.5330082978889558E-5	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999421035889662	WITHOUT_CLASSIFICATION	5.789641103383537E-5	TEST
return currentId;	WITHOUT_CLASSIFICATION	0.9999924577126794	WITHOUT_CLASSIFICATION	7.542287320550647E-6	TEST
reset the id	WITHOUT_CLASSIFICATION	0.9999913833893082	WITHOUT_CLASSIFICATION	8.616610691785429E-6	TEST
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999993875446146	WITHOUT_CLASSIFICATION	6.124553854438642E-7	TEST
reset the version	WITHOUT_CLASSIFICATION	0.9999935856782177	WITHOUT_CLASSIFICATION	6.414321782342612E-6	TEST
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999823921032207	WITHOUT_CLASSIFICATION	1.760789677934793E-5	TEST
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999903969395987	WITHOUT_CLASSIFICATION	9.603060401368017E-6	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960315023195	WITHOUT_CLASSIFICATION	3.9684976804968855E-5	TEST
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999651605175447	WITHOUT_CLASSIFICATION	3.4839482455249846E-5	TEST
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999932279971562	WITHOUT_CLASSIFICATION	6.772002843869597E-6	TEST
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999818049649231	WITHOUT_CLASSIFICATION	1.8195035076940655E-5	TEST
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999433797156395	WITHOUT_CLASSIFICATION	5.6620284360532954E-5	TEST
superclass entity-name	WITHOUT_CLASSIFICATION	0.999976399302155	WITHOUT_CLASSIFICATION	2.360069784500205E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960315023195	WITHOUT_CLASSIFICATION	3.9684976804968855E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999879743297072	WITHOUT_CLASSIFICATION	1.2025670292826537E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960315023195	WITHOUT_CLASSIFICATION	3.9684976804968855E-5	TEST
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999652335762157	WITHOUT_CLASSIFICATION	3.4766423784273745E-5	TEST
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999823642616623	WITHOUT_CLASSIFICATION	1.7635738337670394E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999791655388712	WITHOUT_CLASSIFICATION	2.083446112884051E-5	TEST
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999581047889952	WITHOUT_CLASSIFICATION	4.189521100478866E-5	TEST
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999954624342893	WITHOUT_CLASSIFICATION	4.537565710724194E-6	TEST
Collection Types:	WITHOUT_CLASSIFICATION	0.9999878041979366	WITHOUT_CLASSIFICATION	1.219580206330045E-5	TEST
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999815678884921	WITHOUT_CLASSIFICATION	1.8432111507818115E-5	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999857898035129	WITHOUT_CLASSIFICATION	1.4210196487105098E-5	TEST
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999970946857055	WITHOUT_CLASSIFICATION	2.9053142944931324E-5	TEST
value is the entity name	WITHOUT_CLASSIFICATION	0.9999430743354986	WITHOUT_CLASSIFICATION	5.692566450146345E-5	TEST
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.99999294350426	WITHOUT_CLASSIFICATION	7.056495739949521E-6	TEST
TODO!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999624500050708	WITHOUT_CLASSIFICATION	3.754999492921503E-5	TEST
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997912217629638	WITHOUT_CLASSIFICATION	2.0877823703613124E-4	TEST
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999822160615344	WITHOUT_CLASSIFICATION	1.7783938465681525E-5	TEST
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999716155594305	WITHOUT_CLASSIFICATION	2.8384440569496434E-5	TEST
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999991551614487	WITHOUT_CLASSIFICATION	8.448385512365871E-7	TEST
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999914066256141	WITHOUT_CLASSIFICATION	8.593374385891089E-6	TEST
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999176494942082	WITHOUT_CLASSIFICATION	8.235050579175857E-5	TEST
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999969116864932	WITHOUT_CLASSIFICATION	3.088313506755204E-6	TEST
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999893346545902	WITHOUT_CLASSIFICATION	1.066534540984524E-5	TEST
TODO!!!	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999244860859753	WITHOUT_CLASSIFICATION	7.551391402475213E-5	TEST
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999244860859753	WITHOUT_CLASSIFICATION	7.551391402475213E-5	TEST
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999904003167787	WITHOUT_CLASSIFICATION	9.599683221323935E-6	TEST
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999780909343506	WITHOUT_CLASSIFICATION	2.1909065649357E-5	TEST
noop	WITHOUT_CLASSIFICATION	0.9999839534013312	WITHOUT_CLASSIFICATION	1.6046598668792286E-5	TEST
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999705828056593	WITHOUT_CLASSIFICATION	2.9417194340620002E-5	TEST
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994721733834	WITHOUT_CLASSIFICATION	5.278266167018159E-7	TEST
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999903435775479	WITHOUT_CLASSIFICATION	9.656422452080562E-6	TEST
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999783549238287	WITHOUT_CLASSIFICATION	2.1645076171349708E-5	TEST
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999347879481787	WITHOUT_CLASSIFICATION	6.52120518212802E-5	TEST
TODO	WITHOUT_CLASSIFICATION	0.9935616328252554	WITHOUT_CLASSIFICATION	0.00643836717474457	TEST
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999932447799439	WITHOUT_CLASSIFICATION	6.7552200560733E-6	TEST
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999596505205274	WITHOUT_CLASSIFICATION	4.0349479472635446E-5	TEST
cache this	WITHOUT_CLASSIFICATION	0.9999609338653604	WITHOUT_CLASSIFICATION	3.906613463949701E-5	TEST
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997990527519495	WITHOUT_CLASSIFICATION	2.0094724805038778E-4	TEST
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999783390736448	WITHOUT_CLASSIFICATION	2.166092635518683E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999964404344541	WITHOUT_CLASSIFICATION	3.5595655459727234E-6	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999799299227125	WITHOUT_CLASSIFICATION	2.0070077287505683E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999861833344952	WITHOUT_CLASSIFICATION	1.3816665504810185E-5	TEST
nothing to do	WITHOUT_CLASSIFICATION	0.9999861833344952	WITHOUT_CLASSIFICATION	1.3816665504810185E-5	TEST
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999963165930996	WITHOUT_CLASSIFICATION	3.6834069003227295E-6	TEST
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999857898035129	WITHOUT_CLASSIFICATION	1.4210196487105098E-5	TEST
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999467343916357	WITHOUT_CLASSIFICATION	5.3265608364260436E-5	TEST
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999497923430168	WITHOUT_CLASSIFICATION	5.020765698326684E-5	TEST
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999933050601265	WITHOUT_CLASSIFICATION	6.694939873487546E-6	TEST
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999854725152596	WITHOUT_CLASSIFICATION	1.452748474038015E-5	TEST
remember the uk value	WITHOUT_CLASSIFICATION	0.999983030872818	WITHOUT_CLASSIFICATION	1.696912718195347E-5	TEST
NOOP	WITHOUT_CLASSIFICATION	0.9999842070065698	WITHOUT_CLASSIFICATION	1.57929934303186E-5	TEST
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999924227391553	WITHOUT_CLASSIFICATION	7.577260844710878E-6	TEST
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998495092160352	WITHOUT_CLASSIFICATION	1.5049078396468465E-4	TEST
return false;	WITHOUT_CLASSIFICATION	0.9999928419534008	WITHOUT_CLASSIFICATION	7.158046599184633E-6	TEST
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999955361460793	WITHOUT_CLASSIFICATION	4.4638539207372036E-6	TEST
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999691387263099	WITHOUT_CLASSIFICATION	3.086127369016746E-5	TEST
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999497530859	WITHOUT_CLASSIFICATION	5.024691409999697E-5	TEST
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999997375157108	WITHOUT_CLASSIFICATION	2.6248428920287703E-6	TEST
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999809142528362	WITHOUT_CLASSIFICATION	1.9085747163759056E-5	TEST
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999917008305403	WITHOUT_CLASSIFICATION	8.299169459603518E-6	TEST
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999969125635632	WITHOUT_CLASSIFICATION	3.0874364367806483E-6	TEST
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999946782540482	WITHOUT_CLASSIFICATION	5.321745951756037E-6	TEST
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999975162150687	WITHOUT_CLASSIFICATION	2.4837849313520776E-6	TEST
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999502234851617	WITHOUT_CLASSIFICATION	4.9776514838293504E-5	TEST
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998448223835749	WITHOUT_CLASSIFICATION	1.5517761642507767E-4	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999554994831727	WITHOUT_CLASSIFICATION	4.450051682711415E-5	TEST
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999858752229538	WITHOUT_CLASSIFICATION	1.4124777046155782E-5	TEST
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999346489728315	WITHOUT_CLASSIFICATION	6.53510271685977E-5	TEST
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999884146547181	WITHOUT_CLASSIFICATION	1.158534528199141E-5	TEST
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998765318201455	WITHOUT_CLASSIFICATION	1.2346817985461469E-4	TEST
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999114984029008	WITHOUT_CLASSIFICATION	8.850159709918443E-5	TEST
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999025258981735	WITHOUT_CLASSIFICATION	9.747410182644206E-5	TEST
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999480972619812	WITHOUT_CLASSIFICATION	5.190273801875869E-5	TEST
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999572788226845	WITHOUT_CLASSIFICATION	4.2721177315546035E-5	TEST
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999583044837962	WITHOUT_CLASSIFICATION	4.1695516203795305E-5	TEST
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999956739102722	WITHOUT_CLASSIFICATION	4.326089727752396E-6	TEST
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999598544128873	WITHOUT_CLASSIFICATION	4.014558711262717E-5	TEST
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999795054827387	WITHOUT_CLASSIFICATION	2.0494517261278634E-5	TEST
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9964437216547739	WITHOUT_CLASSIFICATION	0.0035562783452260495	TEST
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998950620888534	WITHOUT_CLASSIFICATION	1.049379111467064E-4	TEST
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999929306491843	WITHOUT_CLASSIFICATION	7.06935081577561E-6	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998516175374941	WITHOUT_CLASSIFICATION	1.4838246250586175E-4	TEST
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998516175374941	WITHOUT_CLASSIFICATION	1.4838246250586175E-4	TEST
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999761092421771	WITHOUT_CLASSIFICATION	2.3890757822917378E-5	TEST
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999785960482821	WITHOUT_CLASSIFICATION	2.140395171791425E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999318641435748	WITHOUT_CLASSIFICATION	6.813585642519135E-5	TEST
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999318641435748	WITHOUT_CLASSIFICATION	6.813585642519135E-5	TEST
use default behavior	WITHOUT_CLASSIFICATION	0.9999966992088469	WITHOUT_CLASSIFICATION	3.3007911530250237E-6	TEST
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999939064379171	WITHOUT_CLASSIFICATION	6.093562082924491E-6	TEST
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999835087170252	WITHOUT_CLASSIFICATION	1.649128297481939E-5	TEST
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999962888429814	WITHOUT_CLASSIFICATION	3.7111570185451465E-6	TEST
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999577988098143	WITHOUT_CLASSIFICATION	4.22011901857014E-5	TEST
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999570639360135	WITHOUT_CLASSIFICATION	4.2936063986575035E-5	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999940712425235	WITHOUT_CLASSIFICATION	5.9287574764525775E-6	TEST
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999940712425235	WITHOUT_CLASSIFICATION	5.9287574764525775E-6	TEST
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999570639360135	WITHOUT_CLASSIFICATION	4.2936063986575035E-5	TEST
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999762213864647	WITHOUT_CLASSIFICATION	2.377861353527875E-5	TEST
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999823376787339	WITHOUT_CLASSIFICATION	1.7662321266166737E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999821759319856	WITHOUT_CLASSIFICATION	1.7824068014421688E-5	TEST
returnign null!	WITHOUT_CLASSIFICATION	0.9999821759319856	WITHOUT_CLASSIFICATION	1.7824068014421688E-5	TEST
includes last '.'	WITHOUT_CLASSIFICATION	0.9999863776380742	WITHOUT_CLASSIFICATION	1.3622361925731688E-5	TEST
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999946633058007	WITHOUT_CLASSIFICATION	5.3366941993107915E-6	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994017610913	WITHOUT_CLASSIFICATION	5.982389086995644E-6	TEST
first time we find match!	WITHOUT_CLASSIFICATION	0.9999826001743342	WITHOUT_CLASSIFICATION	1.73998256658183E-5	TEST
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999851682024078	WITHOUT_CLASSIFICATION	1.48317975921381E-5	TEST
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999822198479058	WITHOUT_CLASSIFICATION	1.778015209415952E-5	TEST
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999953163012318	WITHOUT_CLASSIFICATION	4.68369876822058E-6	TEST
the current iterator	WITHOUT_CLASSIFICATION	0.9999951336739157	WITHOUT_CLASSIFICATION	4.86632608439409E-6	TEST
the last used iterator	WITHOUT_CLASSIFICATION	0.9999928811116007	WITHOUT_CLASSIFICATION	7.11888839929561E-6	TEST
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999780579359853	WITHOUT_CLASSIFICATION	2.1942064014809503E-5	TEST
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999935128143043	WITHOUT_CLASSIFICATION	6.487185695657328E-6	TEST
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9995503832888837	WITHOUT_CLASSIFICATION	4.496167111164235E-4	TEST
doable if needed	WITHOUT_CLASSIFICATION	0.9999095219924349	WITHOUT_CLASSIFICATION	9.047800756503033E-5	TEST
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999974651109339	WITHOUT_CLASSIFICATION	2.534889066110444E-6	TEST
peek ahead	WITHOUT_CLASSIFICATION	0.9999840486786448	WITHOUT_CLASSIFICATION	1.5951321355218688E-5	TEST
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999572433860683	WITHOUT_CLASSIFICATION	4.275661393170187E-4	TEST
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999927591115506	WITHOUT_CLASSIFICATION	7.240888449485243E-6	TEST
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999606403410317	WITHOUT_CLASSIFICATION	3.9359658968308896E-5	TEST
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999846779598935	WITHOUT_CLASSIFICATION	1.5322040106440362E-5	TEST
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999439356426926	WITHOUT_CLASSIFICATION	5.606435730738802E-5	TEST
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999770809580629	WITHOUT_CLASSIFICATION	2.2919041937082752E-5	TEST
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999657254055259	WITHOUT_CLASSIFICATION	3.427459447401741E-5	TEST
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9961515581318963	WITHOUT_CLASSIFICATION	0.003848441868103724	TEST
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999079758274293	WITHOUT_CLASSIFICATION	9.202417257068323E-5	TEST
faster?	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
the name of a class	WITHOUT_CLASSIFICATION	0.999996673558337	WITHOUT_CLASSIFICATION	3.3264416630978934E-6	TEST
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999920362755822	WITHOUT_CLASSIFICATION	7.963724417760048E-6	TEST
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999808554043806	WITHOUT_CLASSIFICATION	1.9144595619312177E-5	TEST
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999966963863699	WITHOUT_CLASSIFICATION	3.3036136301139756E-6	TEST
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999831386088592	WITHOUT_CLASSIFICATION	1.686139114074638E-5	TEST
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999220509895842	WITHOUT_CLASSIFICATION	7.794901041577708E-5	TEST
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999611035997492	WITHOUT_CLASSIFICATION	3.8896400250773065E-5	TEST
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999831151857199	WITHOUT_CLASSIFICATION	1.6884814280186667E-5	TEST
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999821720266757	WITHOUT_CLASSIFICATION	1.7827973324349267E-5	TEST
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999891917318027	WITHOUT_CLASSIFICATION	1.080826819736813E-5	TEST
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999754883098663	WITHOUT_CLASSIFICATION	2.4511690133738304E-5	TEST
readResolveObject	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999978616119093	WITHOUT_CLASSIFICATION	2.1383880906901635E-5	TEST
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999889837346383	WITHOUT_CLASSIFICATION	1.1016265361707577E-5	TEST
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999941362931445	WITHOUT_CLASSIFICATION	5.8637068555629435E-6	TEST
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999974360467843	WITHOUT_CLASSIFICATION	2.563953215711958E-6	TEST
Write HTML header	WITHOUT_CLASSIFICATION	0.9999848337146081	WITHOUT_CLASSIFICATION	1.5166285391768801E-5	TEST
Handle actions	WITHOUT_CLASSIFICATION	0.9999836120257939	WITHOUT_CLASSIFICATION	1.6387974206068596E-5	TEST
Print page	WITHOUT_CLASSIFICATION	0.9999843813608502	WITHOUT_CLASSIFICATION	1.561863914980474E-5	TEST
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999828322327974	WITHOUT_CLASSIFICATION	1.716776720258489E-5	TEST
End unit of work	WITHOUT_CLASSIFICATION	0.9999974882832755	WITHOUT_CLASSIFICATION	2.5117167244864406E-6	TEST
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999754173807422	WITHOUT_CLASSIFICATION	2.4582619257763E-5	TEST
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999946180549229	WITHOUT_CLASSIFICATION	5.381945077103479E-5	TEST
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999932458859752	WITHOUT_CLASSIFICATION	6.754114024726508E-6	TEST
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999458371104413	WITHOUT_CLASSIFICATION	5.416288955873592E-5	TEST
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999900844664333	WITHOUT_CLASSIFICATION	9.91553356669213E-6	TEST
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9940318963415867	WITHOUT_CLASSIFICATION	0.00596810365841327	TEST
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999956776684611	WITHOUT_CLASSIFICATION	4.32233153889096E-6	TEST
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999976513492604	WITHOUT_CLASSIFICATION	2.3486507395912262E-6	TEST
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999718712707598	WITHOUT_CLASSIFICATION	2.8128729240164398E-5	TEST
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999968109946884	WITHOUT_CLASSIFICATION	3.1890053116086946E-6	TEST
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999807618525687	WITHOUT_CLASSIFICATION	1.923814743130563E-5	TEST
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999906189173476	WITHOUT_CLASSIFICATION	9.38108265234923E-6	TEST
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999269757074242	WITHOUT_CLASSIFICATION	7.302429257580807E-5	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988818043606	WITHOUT_CLASSIFICATION	1.1181956394242673E-6	TEST
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988818043606	WITHOUT_CLASSIFICATION	1.1181956394242673E-6	TEST
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999551881565816	WITHOUT_CLASSIFICATION	4.481184341844239E-5	TEST
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999815994633492	WITHOUT_CLASSIFICATION	1.8400536650855048E-5	TEST
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999885399476105	WITHOUT_CLASSIFICATION	1.1460052389579995E-5	TEST
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999825322239179	WITHOUT_CLASSIFICATION	1.7467776082123012E-5	TEST
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999942075122151	WITHOUT_CLASSIFICATION	5.7924877848929565E-5	TEST
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9994863481079099	WITHOUT_CLASSIFICATION	5.136518920901309E-4	TEST
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999699120064467	WITHOUT_CLASSIFICATION	3.0087993553334933E-5	TEST
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995461693202	WITHOUT_CLASSIFICATION	4.5383067982221606E-7	TEST
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999698429445457	WITHOUT_CLASSIFICATION	3.0157055454247435E-5	TEST
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999822101566694	WITHOUT_CLASSIFICATION	1.778984333059756E-5	TEST
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999856260013446	WITHOUT_CLASSIFICATION	1.4373998655492062E-5	TEST
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999161947399547	WITHOUT_CLASSIFICATION	8.380526004527023E-5	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999952985502231	WITHOUT_CLASSIFICATION	4.701449776891517E-6	TEST
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999802719909951	WITHOUT_CLASSIFICATION	1.9728009004901453E-4	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999791227794099	WITHOUT_CLASSIFICATION	2.087722059015412E-5	TEST
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999791227794099	WITHOUT_CLASSIFICATION	2.087722059015412E-5	TEST
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999712829532474	WITHOUT_CLASSIFICATION	2.8717046752644568E-5	TEST
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999972773309068	WITHOUT_CLASSIFICATION	2.7226690932076808E-5	TEST
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999817345015455	WITHOUT_CLASSIFICATION	1.8265498454483477E-5	TEST
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999989674339276	WITHOUT_CLASSIFICATION	1.0325660723873058E-6	TEST
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999763809326436	WITHOUT_CLASSIFICATION	2.3619067356413716E-5	TEST
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692394746827	WITHOUT_CLASSIFICATION	3.076052531728653E-5	TEST
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999905824016974	WITHOUT_CLASSIFICATION	9.417598302642076E-6	TEST
element index -> id	WITHOUT_CLASSIFICATION	0.9999926785083425	WITHOUT_CLASSIFICATION	7.321491657510345E-6	TEST
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999780925158197	WITHOUT_CLASSIFICATION	2.1907484180271264E-5	TEST
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999979893748664	WITHOUT_CLASSIFICATION	2.0106251335822054E-6	TEST
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9993296004215225	WITHOUT_CLASSIFICATION	6.703995784774583E-4	TEST
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999930434959095	WITHOUT_CLASSIFICATION	6.956504090502128E-6	TEST
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999593886102144	WITHOUT_CLASSIFICATION	4.061138978561842E-5	TEST
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999678945291529	WITHOUT_CLASSIFICATION	3.2105470847025165E-5	TEST
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999789845265122	WITHOUT_CLASSIFICATION	2.1015473487862224E-5	TEST
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999748895054938	WITHOUT_CLASSIFICATION	2.5110494506132713E-5	TEST
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999989764269442	WITHOUT_CLASSIFICATION	1.02357305580943E-5	TEST
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999928266274573	WITHOUT_CLASSIFICATION	7.173372542705279E-5	TEST
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999944612254186	WITHOUT_CLASSIFICATION	5.5387745813978755E-5	TEST
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999715044644529	WITHOUT_CLASSIFICATION	2.8495535547062152E-5	TEST
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999404370404541	WITHOUT_CLASSIFICATION	5.956295954598628E-5	TEST
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999972142892924	WITHOUT_CLASSIFICATION	2.785710707578717E-6	TEST
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999650543633439	WITHOUT_CLASSIFICATION	3.494563665613197E-5	TEST
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994452216096	WITHOUT_CLASSIFICATION	5.5477839049694E-7	TEST
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999860619065528	WITHOUT_CLASSIFICATION	1.393809344728378E-5	TEST
Named Queries:	WITHOUT_CLASSIFICATION	0.999982171570004	WITHOUT_CLASSIFICATION	1.7828429995885337E-5	TEST
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999755391945294	WITHOUT_CLASSIFICATION	2.446080547060107E-4	TEST
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999813815685509	WITHOUT_CLASSIFICATION	1.8618431449088005E-5	TEST
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999930300432541	WITHOUT_CLASSIFICATION	6.969956745802905E-6	TEST
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999885279102316	WITHOUT_CLASSIFICATION	1.147208976835471E-5	TEST
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999761465197688	WITHOUT_CLASSIFICATION	2.385348023113658E-5	TEST
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999822234809127	WITHOUT_CLASSIFICATION	1.7776519087232444E-5	TEST
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999953279844112	WITHOUT_CLASSIFICATION	4.672015588810045E-5	TEST
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999986431433198	WITHOUT_CLASSIFICATION	1.3568566801990801E-6	TEST
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999981720260517	WITHOUT_CLASSIFICATION	1.8279739482943628E-5	TEST
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999839492797172	WITHOUT_CLASSIFICATION	1.605072028277053E-5	TEST
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999278406448382	WITHOUT_CLASSIFICATION	7.21593551617644E-5	TEST
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999947094692135	WITHOUT_CLASSIFICATION	5.290530786419341E-6	TEST
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999682263815572	WITHOUT_CLASSIFICATION	3.177361844268382E-5	TEST
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999434309045567	WITHOUT_CLASSIFICATION	5.656909544321816E-5	TEST
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9998113952495415	WITHOUT_CLASSIFICATION	1.8860475045849053E-4	TEST
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999919835796169	WITHOUT_CLASSIFICATION	8.016420383008271E-6	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999215809541847	WITHOUT_CLASSIFICATION	7.841904581539545E-5	TEST
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999215809541847	WITHOUT_CLASSIFICATION	7.841904581539545E-5	TEST
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999867134266694	WITHOUT_CLASSIFICATION	1.3286573330636284E-5	TEST
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999951156404955	WITHOUT_CLASSIFICATION	4.88435950446297E-6	TEST
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9988513138867959	WITHOUT_CLASSIFICATION	0.0011486861132041497	TEST
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999652824967122	WITHOUT_CLASSIFICATION	3.471750328782396E-5	TEST
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999917340647211	WITHOUT_CLASSIFICATION	8.265935278871844E-6	TEST
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999998480476308	WITHOUT_CLASSIFICATION	1.5195236919280606E-6	TEST
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999675137679916	WITHOUT_CLASSIFICATION	3.248623200840986E-5	TEST
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999914774715192	WITHOUT_CLASSIFICATION	8.522528480797322E-5	TEST
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999989900331584	WITHOUT_CLASSIFICATION	1.0099668416268844E-6	TEST
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581041503582	WITHOUT_CLASSIFICATION	4.189584964174246E-5	TEST
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579575721375	WITHOUT_CLASSIFICATION	4.204242786248238E-5	TEST
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997659667873019	WITHOUT_CLASSIFICATION	2.3403321269799753E-4	TEST
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9964991139286788	WITHOUT_CLASSIFICATION	0.0035008860713212075	TEST
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999997510700174	WITHOUT_CLASSIFICATION	2.4892998260452756E-6	TEST
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999683377563783	WITHOUT_CLASSIFICATION	3.1662243621616596E-5	TEST
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9989930245370148	WITHOUT_CLASSIFICATION	0.0010069754629851771	TEST
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999955592444607	WITHOUT_CLASSIFICATION	4.440755539326666E-6	TEST
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999981433847261	WITHOUT_CLASSIFICATION	1.856615273889703E-6	TEST
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999849680047309	WITHOUT_CLASSIFICATION	1.5031995269042657E-5	TEST
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999063891355299	WITHOUT_CLASSIFICATION	9.361086447000968E-5	TEST
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999585792013285	WITHOUT_CLASSIFICATION	4.142079867147723E-5	TEST
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999787419954	WITHOUT_CLASSIFICATION	2.125800459820073E-7	TEST
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999936396409888	WITHOUT_CLASSIFICATION	6.360359011201082E-5	TEST
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999165881045066	WITHOUT_CLASSIFICATION	8.341189549342318E-5	TEST
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999767615550146	WITHOUT_CLASSIFICATION	2.3238444985447585E-5	TEST
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999511002109857	WITHOUT_CLASSIFICATION	4.889978901439581E-5	TEST
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999973921546732	WITHOUT_CLASSIFICATION	2.6078453267182976E-6	TEST
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999913079003853	WITHOUT_CLASSIFICATION	8.692099614716208E-6	TEST
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999017281297178	WITHOUT_CLASSIFICATION	9.827187028219782E-4	TEST
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998475009291516	WITHOUT_CLASSIFICATION	1.5249907084835876E-4	TEST
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999916126038011	WITHOUT_CLASSIFICATION	8.387396198816693E-6	TEST
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999953773438126	WITHOUT_CLASSIFICATION	4.622656187407285E-6	TEST
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999965895305682	WITHOUT_CLASSIFICATION	3.4104694317798696E-6	TEST
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999980884794774	WITHOUT_CLASSIFICATION	1.9115205226472928E-6	TEST
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999975916281283	WITHOUT_CLASSIFICATION	2.408371871698431E-6	TEST
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999748231171203	WITHOUT_CLASSIFICATION	2.517688287973972E-5	TEST
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999957306218191	WITHOUT_CLASSIFICATION	4.269378180879237E-6	TEST
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999905935708476	WITHOUT_CLASSIFICATION	9.406429152377461E-6	TEST
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999779903133236	WITHOUT_CLASSIFICATION	2.2009686676319463E-5	TEST
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9992191717163391	WITHOUT_CLASSIFICATION	7.808282836608166E-4	TEST
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999992920067958	WITHOUT_CLASSIFICATION	7.079932041938138E-6	TEST
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998683740258157	WITHOUT_CLASSIFICATION	1.3162597418424837E-4	TEST
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999905965851462	WITHOUT_CLASSIFICATION	9.403414853799955E-6	TEST
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993848868272	WITHOUT_CLASSIFICATION	6.151131728810201E-7	TEST
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999966432283048	WITHOUT_CLASSIFICATION	3.3567716950746182E-6	TEST
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998107994455375	WITHOUT_CLASSIFICATION	1.8920055446237477E-4	TEST
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9980896821762864	WITHOUT_CLASSIFICATION	0.0019103178237135647	TEST
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9998963364473499	WITHOUT_CLASSIFICATION	1.0366355265017885E-4	TEST
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999991697843947	WITHOUT_CLASSIFICATION	8.302156052598375E-7	TEST
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999952985502231	WITHOUT_CLASSIFICATION	4.701449776891517E-6	TEST
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999995241042101	WITHOUT_CLASSIFICATION	4.758957899042183E-6	TEST
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995086963666	WITHOUT_CLASSIFICATION	4.913036334673259E-7	TEST
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999919833516265	WITHOUT_CLASSIFICATION	8.016648373420357E-6	TEST
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999969141497923	WITHOUT_CLASSIFICATION	3.0858502075702703E-6	TEST
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999919665058664	WITHOUT_CLASSIFICATION	8.033494133613185E-6	TEST
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999966970329646	WITHOUT_CLASSIFICATION	3.302967035391397E-6	TEST
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998564335601192	WITHOUT_CLASSIFICATION	1.4356643988067954E-4	TEST
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9991023453746916	WITHOUT_CLASSIFICATION	8.976546253084828E-4	TEST
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999533834867722	WITHOUT_CLASSIFICATION	4.661651322779862E-5	TEST
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999909983236752	WITHOUT_CLASSIFICATION	9.0016763246848E-6	TEST
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999972763698842	WITHOUT_CLASSIFICATION	2.7236301156981078E-6	TEST
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999464907232846	WITHOUT_CLASSIFICATION	5.350927671540315E-4	TEST
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998483775821841	WITHOUT_CLASSIFICATION	1.516224178159343E-4	TEST
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999842610153349	WITHOUT_CLASSIFICATION	1.573898466505737E-5	TEST
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998501443615861	WITHOUT_CLASSIFICATION	1.4985563841382724E-4	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175951553512	WITHOUT_CLASSIFICATION	1.8240484464890385E-4	TEST
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999800679532185	WITHOUT_CLASSIFICATION	1.9932046781538866E-5	TEST
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997792121793	WITHOUT_CLASSIFICATION	2.207878205925455E-7	TEST
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999995229917517	WITHOUT_CLASSIFICATION	4.770082484338134E-7	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175951553512	WITHOUT_CLASSIFICATION	1.8240484464890385E-4	TEST
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999340566358351	WITHOUT_CLASSIFICATION	6.594336416484818E-5	TEST
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999990328133733	WITHOUT_CLASSIFICATION	9.67186626583721E-7	TEST
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999982002987552	WITHOUT_CLASSIFICATION	1.7997012448050222E-6	TEST
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.99998864654481	WITHOUT_CLASSIFICATION	1.1353455189986984E-5	TEST
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999780438821027	WITHOUT_CLASSIFICATION	2.195611789737193E-5	TEST
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999936962272881	WITHOUT_CLASSIFICATION	6.303772711900655E-5	TEST
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999972229028252	WITHOUT_CLASSIFICATION	2.77709717476008E-6	TEST
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9958344305885584	WITHOUT_CLASSIFICATION	0.004165569411441636	TEST
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9997632453547775	WITHOUT_CLASSIFICATION	2.3675464522246494E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998550165857149	WITHOUT_CLASSIFICATION	1.4498341428511306E-4	TEST
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998998896424046	WITHOUT_CLASSIFICATION	1.0011035759542787E-4	TEST
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996267235640106	WITHOUT_CLASSIFICATION	3.732764359893435E-4	TEST
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999935448533853	WITHOUT_CLASSIFICATION	6.4551466146321705E-6	TEST
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999482445338153	WITHOUT_CLASSIFICATION	5.175546618468854E-5	TEST
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999974130621422	WITHOUT_CLASSIFICATION	2.5869378578204617E-6	TEST
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999841182568077	WITHOUT_CLASSIFICATION	1.5881743192360523E-5	TEST
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999554994831727	WITHOUT_CLASSIFICATION	4.450051682711415E-5	TEST
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999812366232049	WITHOUT_CLASSIFICATION	1.8763376795028328E-5	TEST
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999961145588062	WITHOUT_CLASSIFICATION	3.8854411938087165E-6	TEST
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995970806448202	WITHOUT_CLASSIFICATION	4.0291935517979146E-4	TEST
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.999994999785896	WITHOUT_CLASSIFICATION	5.000214103888588E-6	TEST
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999958613309551	WITHOUT_CLASSIFICATION	4.1386690448813266E-6	TEST
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999845619917408	WITHOUT_CLASSIFICATION	1.5438008259175486E-5	TEST
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999983341677436	WITHOUT_CLASSIFICATION	1.6658322564451877E-6	TEST
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999996202773689	WITHOUT_CLASSIFICATION	3.797226311150137E-7	TEST
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999991799427856	WITHOUT_CLASSIFICATION	8.200572143822912E-7	TEST
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999636384465694	WITHOUT_CLASSIFICATION	3.636155343057605E-5	TEST
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9991077617272889	WITHOUT_CLASSIFICATION	8.922382727112604E-4	TEST
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999873709205159	WITHOUT_CLASSIFICATION	1.262907948410418E-4	TEST
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999870997214484	WITHOUT_CLASSIFICATION	1.290027855160825E-5	TEST
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999807729006214	WITHOUT_CLASSIFICATION	1.922709937858746E-5	TEST
and perform the load	WITHOUT_CLASSIFICATION	0.9999983319094897	WITHOUT_CLASSIFICATION	1.6680905103167216E-6	TEST
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999830007213195	WITHOUT_CLASSIFICATION	1.69992786803955E-5	TEST
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999960641913775	WITHOUT_CLASSIFICATION	3.935808622522988E-6	TEST
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999986830899426	WITHOUT_CLASSIFICATION	1.3169100574421487E-6	TEST
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999501683928693	WITHOUT_CLASSIFICATION	4.983160713071108E-5	TEST
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999991225303697	WITHOUT_CLASSIFICATION	8.774696303693289E-7	TEST
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999963460572611	WITHOUT_CLASSIFICATION	3.653942739028387E-6	TEST
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999919557988068	WITHOUT_CLASSIFICATION	8.044201193144846E-6	TEST
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999987419583265	WITHOUT_CLASSIFICATION	1.258041673516813E-6	TEST
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999831925072691	WITHOUT_CLASSIFICATION	1.680749273090552E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999884989104358	WITHOUT_CLASSIFICATION	1.1501089564177705E-5	TEST
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999884989104358	WITHOUT_CLASSIFICATION	1.1501089564177705E-5	TEST
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994925777358069	WITHOUT_CLASSIFICATION	5.074222641930678E-4	TEST
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999896286567279	WITHOUT_CLASSIFICATION	1.0371343272087894E-5	TEST
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.99995792905753	WITHOUT_CLASSIFICATION	4.207094247006972E-5	TEST
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999987617560552	WITHOUT_CLASSIFICATION	1.2382439448057009E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999874894181794	WITHOUT_CLASSIFICATION	1.2510581820694168E-5	TEST
ignore	WITHOUT_CLASSIFICATION	0.9999874894181794	WITHOUT_CLASSIFICATION	1.2510581820694168E-5	TEST
}	WITHOUT_CLASSIFICATION	0.9999872374231629	WITHOUT_CLASSIFICATION	1.276257683716622E-5	TEST
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999858742719143	WITHOUT_CLASSIFICATION	1.4125728085755609E-5	TEST
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999752807792155	WITHOUT_CLASSIFICATION	2.4719220784591047E-5	TEST
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999952652819472	WITHOUT_CLASSIFICATION	4.7347180528157076E-6	TEST
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999832357915744	WITHOUT_CLASSIFICATION	1.676420842555425E-5	TEST
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999897918516559	WITHOUT_CLASSIFICATION	1.0208148344006749E-5	TEST
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999332698477037	WITHOUT_CLASSIFICATION	6.67301522963133E-5	TEST
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999871124752957	WITHOUT_CLASSIFICATION	1.288752470417504E-5	TEST
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999976695537016	WITHOUT_CLASSIFICATION	2.3304462984174506E-6	TEST
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997957867770094	WITHOUT_CLASSIFICATION	2.042132229906326E-4	TEST
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9965004139964664	WITHOUT_CLASSIFICATION	0.0034995860035336598	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999010281972427	WITHOUT_CLASSIFICATION	9.897180275728884E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999010281972427	WITHOUT_CLASSIFICATION	9.897180275728884E-5	TEST
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999841182568077	WITHOUT_CLASSIFICATION	1.5881743192360523E-5	TEST
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999839455027059	WITHOUT_CLASSIFICATION	1.605449729413402E-5	TEST
Custom sql	WITHOUT_CLASSIFICATION	0.999983949047835	WITHOUT_CLASSIFICATION	1.6050952164896E-5	TEST
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999715545018111	WITHOUT_CLASSIFICATION	2.8445498188992605E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998884448262103	WITHOUT_CLASSIFICATION	1.1155517378971742E-4	TEST
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834505182925	WITHOUT_CLASSIFICATION	1.6549481707520217E-5	TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999716237815134	WITHOUT_CLASSIFICATION	2.837621848666203E-5	TEST
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999812454348667	WITHOUT_CLASSIFICATION	1.875456513335382E-5	TEST
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999867293614358	WITHOUT_CLASSIFICATION	1.3270638564093975E-5	TEST
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998791267018136	WITHOUT_CLASSIFICATION	1.208732981864275E-4	TEST
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998550165857149	WITHOUT_CLASSIFICATION	1.4498341428511306E-4	TEST
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999969264266345	WITHOUT_CLASSIFICATION	3.073573365493643E-5	TEST
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999435304369378	WITHOUT_CLASSIFICATION	5.646956306219321E-5	TEST
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999531286123597	WITHOUT_CLASSIFICATION	4.687138764023182E-5	TEST
use the id column alias	WITHOUT_CLASSIFICATION	0.9999943811370179	WITHOUT_CLASSIFICATION	5.618862982098446E-6	TEST
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999757662613501	WITHOUT_CLASSIFICATION	2.423373864987773E-5	TEST
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999569912703391	WITHOUT_CLASSIFICATION	4.3008729661036885E-5	TEST
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999571586661222	WITHOUT_CLASSIFICATION	4.284133387771968E-5	TEST
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999581693264915	WITHOUT_CLASSIFICATION	4.1830673508607755E-5	TEST
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999731785542535	WITHOUT_CLASSIFICATION	2.682144574658172E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999316095044495	WITHOUT_CLASSIFICATION	6.83904955505621E-5	TEST
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999316095044495	WITHOUT_CLASSIFICATION	6.83904955505621E-5	TEST
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999243013750544	WITHOUT_CLASSIFICATION	7.569862494570659E-5	TEST
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999999944452937	WITHOUT_CLASSIFICATION	5.5547062987623814E-8	TEST
package	WITHOUT_CLASSIFICATION	0.9999870103403847	WITHOUT_CLASSIFICATION	1.2989659615352578E-5	TEST
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999425874723502	WITHOUT_CLASSIFICATION	5.741252764982389E-5	TEST
ignore it	WITHOUT_CLASSIFICATION	0.9999793028315166	WITHOUT_CLASSIFICATION	2.0697168483424646E-5	TEST
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999873480735058	WITHOUT_CLASSIFICATION	1.2651926494094972E-5	TEST
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999995471480894	WITHOUT_CLASSIFICATION	4.5285191059922145E-6	TEST
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999993062872096	WITHOUT_CLASSIFICATION	6.937127904532141E-7	TEST
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999421035889662	WITHOUT_CLASSIFICATION	5.789641103383537E-5	TEST
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809363517439	WITHOUT_CLASSIFICATION	1.9063648256131806E-5	TEST
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960315023195	WITHOUT_CLASSIFICATION	3.9684976804968855E-5	TEST
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999700005178759	WITHOUT_CLASSIFICATION	2.999948212414001E-5	TEST
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999944450244838	WITHOUT_CLASSIFICATION	5.55497551628489E-6	TEST
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999956081238851	WITHOUT_CLASSIFICATION	4.391876114826171E-6	TEST
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999471609394858	WITHOUT_CLASSIFICATION	5.283906051429029E-5	TEST
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969419913275	WITHOUT_CLASSIFICATION	3.058008672460347E-6	TEST
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999981165786194	WITHOUT_CLASSIFICATION	1.8834213806876568E-6	TEST
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999953061181031	WITHOUT_CLASSIFICATION	4.6938818968975965E-5	TEST
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999171851784238	WITHOUT_CLASSIFICATION	8.281482157616651E-5	TEST
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999955828832391	WITHOUT_CLASSIFICATION	4.417116760915798E-6	TEST
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999919230554762	WITHOUT_CLASSIFICATION	8.07694452382553E-6	TEST
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999994720909936	WITHOUT_CLASSIFICATION	5.279090063917577E-7	TEST
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994017610913	WITHOUT_CLASSIFICATION	5.982389086995644E-6	TEST
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999055141118647	WITHOUT_CLASSIFICATION	9.448588813532E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999772813551936	WITHOUT_CLASSIFICATION	2.2718644806421106E-5	TEST
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999772813551936	WITHOUT_CLASSIFICATION	2.2718644806421106E-5	TEST
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999606647465065	WITHOUT_CLASSIFICATION	3.9335253493504455E-5	TEST
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997327817437326	WITHOUT_CLASSIFICATION	2.6721825626743214E-4	TEST
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999642430119983	WITHOUT_CLASSIFICATION	3.575698800176303E-5	TEST
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999955076679224	WITHOUT_CLASSIFICATION	4.492332077481505E-6	TEST
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888920500767	WITHOUT_CLASSIFICATION	1.110794992339847E-5	TEST
