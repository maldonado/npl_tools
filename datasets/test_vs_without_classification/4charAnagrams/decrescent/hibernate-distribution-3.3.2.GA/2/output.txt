//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997614748438689	WITHOUT_CLASSIFICATION	2.3852515613113928E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998637166788605	WITHOUT_CLASSIFICATION	1.3628332113950928E-4	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995237058936	WITHOUT_CLASSIFICATION	4.762941063854077E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999966825077335	WITHOUT_CLASSIFICATION	3.317492266359501E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993001973755	WITHOUT_CLASSIFICATION	6.998026244778966E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993001973755	WITHOUT_CLASSIFICATION	6.998026244778966E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989042423654	WITHOUT_CLASSIFICATION	1.095757634623133E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997956585164	WITHOUT_CLASSIFICATION	2.0434148352241545E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999995211049614	WITHOUT_CLASSIFICATION	4.788950386445389E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999996736721825	WITHOUT_CLASSIFICATION	3.263278175865592E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983752605569	WITHOUT_CLASSIFICATION	1.6247394430945794E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983752605569	WITHOUT_CLASSIFICATION	1.6247394430945794E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999941583737593	WITHOUT_CLASSIFICATION	5.841626240698685E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998373546382	WITHOUT_CLASSIFICATION	1.6264536191330793E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999996885549587	WITHOUT_CLASSIFICATION	3.1144504134671315E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999893303832995	WITHOUT_CLASSIFICATION	1.0669616700443392E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999465993662	WITHOUT_CLASSIFICATION	5.340063386495121E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999907691449491	WITHOUT_CLASSIFICATION	9.230855050879026E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999879294494812	WITHOUT_CLASSIFICATION	1.2070550518689954E-5	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999904749107602	WITHOUT_CLASSIFICATION	9.525089239760705E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999853584483142	WITHOUT_CLASSIFICATION	1.4641551685863663E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9993889407149804	WITHOUT_CLASSIFICATION	6.110592850196101E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999926595229512	WITHOUT_CLASSIFICATION	7.3404770487339354E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999890319431095	WITHOUT_CLASSIFICATION	1.0968056890485536E-5	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999864975326	WITHOUT_CLASSIFICATION	1.3502467394631274E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999987806852724	WITHOUT_CLASSIFICATION	1.2193147275888775E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999987806852724	WITHOUT_CLASSIFICATION	1.2193147275888775E-5	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999986911803866	WITHOUT_CLASSIFICATION	1.3088196134131384E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999864199387346	WITHOUT_CLASSIFICATION	1.358006126547258E-5	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993403379623	WITHOUT_CLASSIFICATION	6.596620376581997E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999667510213	WITHOUT_CLASSIFICATION	3.324897868963031E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999989399366574	WITHOUT_CLASSIFICATION	1.0600633425234384E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9990484275102193	WITHOUT_CLASSIFICATION	9.515724897807831E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9990484275102193	WITHOUT_CLASSIFICATION	9.515724897807831E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999798925869	WITHOUT_CLASSIFICATION	2.010741311108899E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999997359538856	WITHOUT_CLASSIFICATION	2.6404611435627484E-7	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999467210768	WITHOUT_CLASSIFICATION	5.327892309413876E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944535002887	WITHOUT_CLASSIFICATION	5.546499711299408E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999996328898133	WITHOUT_CLASSIFICATION	3.6711018667687726E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990324462875	WITHOUT_CLASSIFICATION	9.675537124192278E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988767871023	WITHOUT_CLASSIFICATION	1.1232128977328857E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999508838721	WITHOUT_CLASSIFICATION	4.911612789554061E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999729847646627	WITHOUT_CLASSIFICATION	2.7015235337279345E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999841765708	WITHOUT_CLASSIFICATION	1.5823429252938692E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999884820280289	WITHOUT_CLASSIFICATION	1.1517971971161653E-5	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999729847646627	WITHOUT_CLASSIFICATION	2.7015235337279345E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999884820280289	WITHOUT_CLASSIFICATION	1.1517971971161653E-5	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999869855492012	WITHOUT_CLASSIFICATION	1.3014450798837813E-5	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999361047154701	WITHOUT_CLASSIFICATION	6.389528452981587E-5	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999972416721965	WITHOUT_CLASSIFICATION	2.7583278035222992E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999027657112	WITHOUT_CLASSIFICATION	9.723428879929067E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999987413217856	WITHOUT_CLASSIFICATION	1.2586782144667546E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999977923611979	WITHOUT_CLASSIFICATION	2.2076388020340196E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999943946663055	WITHOUT_CLASSIFICATION	5.605333694499065E-6	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999954895673038	WITHOUT_CLASSIFICATION	4.5104326961826034E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999990049370849	WITHOUT_CLASSIFICATION	9.950629150304712E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999687582451126	WITHOUT_CLASSIFICATION	3.124175488745407E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999996041915216	WITHOUT_CLASSIFICATION	3.9580847848468584E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999985646883323	WITHOUT_CLASSIFICATION	1.4353116677627745E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99999904872218	WITHOUT_CLASSIFICATION	9.512778199551365E-7	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999997206878695	WITHOUT_CLASSIFICATION	2.793121305321647E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.99999834634247	WITHOUT_CLASSIFICATION	1.6536575301177582E-6	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999956108374387	WITHOUT_CLASSIFICATION	4.389162561307267E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998698084324	WITHOUT_CLASSIFICATION	1.3019156758915127E-7	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998603498004	WITHOUT_CLASSIFICATION	1.3965019967727E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999994460998727	WITHOUT_CLASSIFICATION	5.539001273420945E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998269156423	WITHOUT_CLASSIFICATION	1.730843576765964E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999922552992013	WITHOUT_CLASSIFICATION	7.744700798651078E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998444775255	WITHOUT_CLASSIFICATION	1.555224743517873E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998898344532	WITHOUT_CLASSIFICATION	1.1016554671828153E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987530735995	WITHOUT_CLASSIFICATION	1.2469264005216092E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999992363347378	WITHOUT_CLASSIFICATION	7.636652622187294E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999212939816	WITHOUT_CLASSIFICATION	7.870601833682567E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999772467725	WITHOUT_CLASSIFICATION	2.2753227447650178E-8	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999736627966	WITHOUT_CLASSIFICATION	2.6337203409590297E-8	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999994590208055	WITHOUT_CLASSIFICATION	5.40979194497667E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999994438139954	WITHOUT_CLASSIFICATION	5.561860045455091E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999962261511837	WITHOUT_CLASSIFICATION	3.773848816351274E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999997032565604	WITHOUT_CLASSIFICATION	2.9674343962957744E-7	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999997514433392	WITHOUT_CLASSIFICATION	2.4855666082316383E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997808359958	WITHOUT_CLASSIFICATION	2.191640040692177E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998451730882	WITHOUT_CLASSIFICATION	1.5482691180132362E-7	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999707241971	WITHOUT_CLASSIFICATION	2.9275802919185914E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997808359958	WITHOUT_CLASSIFICATION	2.191640040692177E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999055236555	WITHOUT_CLASSIFICATION	9.44763445151196E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997377615651	WITHOUT_CLASSIFICATION	2.6223843489386215E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999987019056915	WITHOUT_CLASSIFICATION	1.298094308471482E-6	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994488617139	WITHOUT_CLASSIFICATION	5.511382860458669E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999996372931227	WITHOUT_CLASSIFICATION	3.627068772987653E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999238353697	WITHOUT_CLASSIFICATION	7.616463034465027E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999238353697	WITHOUT_CLASSIFICATION	7.616463034465027E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999937269934228	WITHOUT_CLASSIFICATION	6.273006577190104E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999985400931263	WITHOUT_CLASSIFICATION	1.4599068736995677E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999921500063775	WITHOUT_CLASSIFICATION	7.84999362253535E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999998934491551	WITHOUT_CLASSIFICATION	1.0655084493273671E-7	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998821932186	WITHOUT_CLASSIFICATION	1.1780678144155003E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999995057422293	WITHOUT_CLASSIFICATION	4.942577707641886E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998072419447	WITHOUT_CLASSIFICATION	1.92758055272817E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999136627854	WITHOUT_CLASSIFICATION	8.633721469068255E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999979742744458	WITHOUT_CLASSIFICATION	2.025725554172924E-6	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998546755193	WITHOUT_CLASSIFICATION	1.453244805532876E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993573473823	WITHOUT_CLASSIFICATION	6.426526176192602E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993573473823	WITHOUT_CLASSIFICATION	6.426526176192602E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999325174745	WITHOUT_CLASSIFICATION	6.748252548200544E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.99999991216956	WITHOUT_CLASSIFICATION	8.783043996447331E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999936798648396	WITHOUT_CLASSIFICATION	6.320135160448869E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993573473823	WITHOUT_CLASSIFICATION	6.426526176192602E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999325174745	WITHOUT_CLASSIFICATION	6.748252548200544E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999325174745	WITHOUT_CLASSIFICATION	6.748252548200544E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999817044369284	WITHOUT_CLASSIFICATION	1.829556307164143E-5	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999990481281527	WITHOUT_CLASSIFICATION	9.518718473804823E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999594463578	WITHOUT_CLASSIFICATION	4.055364231299806E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999946009318155	WITHOUT_CLASSIFICATION	5.39906818461947E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999995335019057	WITHOUT_CLASSIFICATION	4.664980941610156E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999995335019057	WITHOUT_CLASSIFICATION	4.664980941610156E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999956197144223	WITHOUT_CLASSIFICATION	4.380285577660213E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999922511981173	WITHOUT_CLASSIFICATION	7.748801882731388E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999986939254285	WITHOUT_CLASSIFICATION	1.3060745714744793E-6	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999390089745	WITHOUT_CLASSIFICATION	6.099102549703513E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999390089745	WITHOUT_CLASSIFICATION	6.099102549703513E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999947741440893	WITHOUT_CLASSIFICATION	5.225855910763548E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999957200728322	WITHOUT_CLASSIFICATION	4.279927167780181E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999978578272368	WITHOUT_CLASSIFICATION	2.1421727631233877E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999996154430267	WITHOUT_CLASSIFICATION	3.8455697326249E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999933537925717	WITHOUT_CLASSIFICATION	6.646207428224033E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998563602017	WITHOUT_CLASSIFICATION	1.4363979832215507E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999945520481477	WITHOUT_CLASSIFICATION	5.4479518523354306E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999995987921307	WITHOUT_CLASSIFICATION	4.01207869253016E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999896127423247	WITHOUT_CLASSIFICATION	1.0387257675320797E-5	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999978578272368	WITHOUT_CLASSIFICATION	2.1421727631233877E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999986057703035	WITHOUT_CLASSIFICATION	1.394229696501759E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951639272905	WITHOUT_CLASSIFICATION	4.836072709508949E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951639272905	WITHOUT_CLASSIFICATION	4.836072709508949E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999950491909	WITHOUT_CLASSIFICATION	4.950809085857765E-9	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999901815198206	WITHOUT_CLASSIFICATION	9.81848017944149E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991845555853	WITHOUT_CLASSIFICATION	8.154444147533234E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999982284259058	WITHOUT_CLASSIFICATION	1.7715740941963247E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999902218350295	WITHOUT_CLASSIFICATION	9.778164970506804E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999819996838784	WITHOUT_CLASSIFICATION	1.800031612158449E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.999999771828768	WITHOUT_CLASSIFICATION	2.2817123216171114E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999997455552928	WITHOUT_CLASSIFICATION	2.544447071652255E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999832923454	WITHOUT_CLASSIFICATION	1.6707654603303744E-7	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999832923454	WITHOUT_CLASSIFICATION	1.6707654603303744E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997614748438689	WITHOUT_CLASSIFICATION	2.3852515613113928E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992883038372	WITHOUT_CLASSIFICATION	7.116961628206403E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999992338414088	WITHOUT_CLASSIFICATION	7.661585913303223E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999975704718728	WITHOUT_CLASSIFICATION	2.4295281271621757E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999985774028205	WITHOUT_CLASSIFICATION	1.4225971795068111E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999997190199077	WITHOUT_CLASSIFICATION	2.8098009230077027E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999981666861638	WITHOUT_CLASSIFICATION	1.8333138360755506E-6	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999992890091428	WITHOUT_CLASSIFICATION	7.109908572371104E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999913869801801	WITHOUT_CLASSIFICATION	8.613019819883621E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999955280326552	WITHOUT_CLASSIFICATION	4.471967344864551E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999973413837848	WITHOUT_CLASSIFICATION	2.658616215187215E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995237058936	WITHOUT_CLASSIFICATION	4.762941063854077E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995214484073	WITHOUT_CLASSIFICATION	4.785515926584372E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995214484073	WITHOUT_CLASSIFICATION	4.785515926584372E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999985803672801	WITHOUT_CLASSIFICATION	1.4196327199584645E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998870930087123	WITHOUT_CLASSIFICATION	1.129069912876844E-4	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999995612580892	WITHOUT_CLASSIFICATION	4.3874191078081346E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999922535550088	WITHOUT_CLASSIFICATION	7.746444991353648E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999987785461653	WITHOUT_CLASSIFICATION	1.2214538347394728E-6	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999994950816886	WITHOUT_CLASSIFICATION	5.049183112955791E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993001973755	WITHOUT_CLASSIFICATION	6.998026244778966E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997050634615	WITHOUT_CLASSIFICATION	2.9493653844336506E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999959583234385	WITHOUT_CLASSIFICATION	4.0416765615864684E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999983935857858	WITHOUT_CLASSIFICATION	1.6064142141928153E-6	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999990282702762	WITHOUT_CLASSIFICATION	9.717297237923084E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999973396568682	WITHOUT_CLASSIFICATION	2.660343131833033E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999965671635465	WITHOUT_CLASSIFICATION	3.4328364536308883E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999987560812995	WITHOUT_CLASSIFICATION	1.2439187005175017E-6	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999867594627	WITHOUT_CLASSIFICATION	1.3240537288822426E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999297176508	WITHOUT_CLASSIFICATION	7.028234913861596E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999999461668659	WITHOUT_CLASSIFICATION	5.383313408656382E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997449572425	WITHOUT_CLASSIFICATION	2.550427575153944E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999995042441588	WITHOUT_CLASSIFICATION	4.957558412430003E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999968575735797	WITHOUT_CLASSIFICATION	3.1424264202986823E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999955280326552	WITHOUT_CLASSIFICATION	4.471967344864551E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999995214484073	WITHOUT_CLASSIFICATION	4.785515926584372E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999987560812995	WITHOUT_CLASSIFICATION	1.2439187005175017E-6	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989042423654	WITHOUT_CLASSIFICATION	1.095757634623133E-6	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999991241976163	WITHOUT_CLASSIFICATION	8.758023837278798E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999965407059492	WITHOUT_CLASSIFICATION	3.4592940506704133E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999998885935504	WITHOUT_CLASSIFICATION	1.1140644959167712E-6	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999895906459678	WITHOUT_CLASSIFICATION	1.0409354032124592E-5	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.99999917291345	WITHOUT_CLASSIFICATION	8.270865500207276E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999954431181503	WITHOUT_CLASSIFICATION	4.556881849732504E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999997517928766	WITHOUT_CLASSIFICATION	2.482071234173641E-7	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999461238999517	WITHOUT_CLASSIFICATION	5.387610004817173E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999221715424452	WITHOUT_CLASSIFICATION	7.782845755480476E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999952643208556	WITHOUT_CLASSIFICATION	4.7356791443940744E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999952643208556	WITHOUT_CLASSIFICATION	4.7356791443940744E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996881350117	WITHOUT_CLASSIFICATION	3.1186498822687495E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999703678565	WITHOUT_CLASSIFICATION	2.9632143448856443E-8	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999187613543171	WITHOUT_CLASSIFICATION	8.123864568290758E-5	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999978836374881	WITHOUT_CLASSIFICATION	2.1163625119437466E-6	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999839089763	WITHOUT_CLASSIFICATION	1.6091023703798603E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999007647928	WITHOUT_CLASSIFICATION	9.923520719340421E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999984334961776	WITHOUT_CLASSIFICATION	1.566503822382562E-6	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997956585164	WITHOUT_CLASSIFICATION	2.0434148352241545E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999985121766961	WITHOUT_CLASSIFICATION	1.4878233039162293E-6	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997254670308	WITHOUT_CLASSIFICATION	2.7453296923952703E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997254670308	WITHOUT_CLASSIFICATION	2.7453296923952703E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999990588999426	WITHOUT_CLASSIFICATION	9.411000573632117E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999991393862715	WITHOUT_CLASSIFICATION	8.60613728477258E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999987972077137	WITHOUT_CLASSIFICATION	1.2027922862956788E-6	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998491889893	WITHOUT_CLASSIFICATION	1.508110105934383E-7	TEST
// int	WITHOUT_CLASSIFICATION	0.9999971827983091	WITHOUT_CLASSIFICATION	2.81720169085192E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999996039842942	WITHOUT_CLASSIFICATION	3.9601570584003704E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999955280326552	WITHOUT_CLASSIFICATION	4.471967344864551E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995237058936	WITHOUT_CLASSIFICATION	4.762941063854077E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999987560812995	WITHOUT_CLASSIFICATION	1.2439187005175017E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999987560812995	WITHOUT_CLASSIFICATION	1.2439187005175017E-6	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999712775492	WITHOUT_CLASSIFICATION	2.8722450797919263E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999712775492	WITHOUT_CLASSIFICATION	2.8722450797919263E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999993010854111	WITHOUT_CLASSIFICATION	6.989145889389368E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999976083493207	WITHOUT_CLASSIFICATION	2.391650679382606E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999976083493207	WITHOUT_CLASSIFICATION	2.391650679382606E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999992014744923	WITHOUT_CLASSIFICATION	7.985255076542796E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999996375561331	WITHOUT_CLASSIFICATION	3.6244386686715877E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999963909764494	WITHOUT_CLASSIFICATION	3.6090235505550257E-6	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999995239362808	WITHOUT_CLASSIFICATION	4.7606371933477705E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998417439188	WITHOUT_CLASSIFICATION	1.5825608131153672E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999996736721825	WITHOUT_CLASSIFICATION	3.263278175865592E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999996736721825	WITHOUT_CLASSIFICATION	3.263278175865592E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999962610515093	WITHOUT_CLASSIFICATION	3.7389484906113475E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999997125829421	WITHOUT_CLASSIFICATION	2.8741705794840827E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.999998897827945	WITHOUT_CLASSIFICATION	1.1021720549061447E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999957723948629	WITHOUT_CLASSIFICATION	4.2276051370971795E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999964363133813	WITHOUT_CLASSIFICATION	3.5636866186918326E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.999992035433495	WITHOUT_CLASSIFICATION	7.964566505062513E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983752605569	WITHOUT_CLASSIFICATION	1.6247394430945794E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999996764895124	WITHOUT_CLASSIFICATION	3.235104876041851E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999996764895124	WITHOUT_CLASSIFICATION	3.235104876041851E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999941583737593	WITHOUT_CLASSIFICATION	5.841626240698685E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999941583737593	WITHOUT_CLASSIFICATION	5.841626240698685E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999969052178929	WITHOUT_CLASSIFICATION	3.094782107178572E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999969052178929	WITHOUT_CLASSIFICATION	3.094782107178572E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995307928663	WITHOUT_CLASSIFICATION	4.6920713381884267E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995307928663	WITHOUT_CLASSIFICATION	4.6920713381884267E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999996736721825	WITHOUT_CLASSIFICATION	3.263278175865592E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999983752605569	WITHOUT_CLASSIFICATION	1.6247394430945794E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999996764895124	WITHOUT_CLASSIFICATION	3.235104876041851E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.999996764895124	WITHOUT_CLASSIFICATION	3.235104876041851E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999941583737593	WITHOUT_CLASSIFICATION	5.841626240698685E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999969052178929	WITHOUT_CLASSIFICATION	3.094782107178572E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999969052178929	WITHOUT_CLASSIFICATION	3.094782107178572E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995307928663	WITHOUT_CLASSIFICATION	4.6920713381884267E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998613252989	WITHOUT_CLASSIFICATION	1.3867470100695503E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999980391787675	WITHOUT_CLASSIFICATION	1.960821232411796E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999967100143479	WITHOUT_CLASSIFICATION	3.2899856521814238E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999907373373897	WITHOUT_CLASSIFICATION	9.262662610260494E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999823064347219	WITHOUT_CLASSIFICATION	1.7693565278216957E-5	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999945250980875	WITHOUT_CLASSIFICATION	5.474901912531256E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998299062363	WITHOUT_CLASSIFICATION	1.700937637578546E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999964811959559	WITHOUT_CLASSIFICATION	3.518804044060796E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999996214965757	WITHOUT_CLASSIFICATION	3.785034242291605E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999995572795238	WITHOUT_CLASSIFICATION	4.427204761189221E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998243576055	WITHOUT_CLASSIFICATION	1.7564239447051553E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999982889308578	WITHOUT_CLASSIFICATION	1.7110691421041125E-6	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999937269934228	WITHOUT_CLASSIFICATION	6.273006577190104E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999945250980875	WITHOUT_CLASSIFICATION	5.474901912531256E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999164175452229	WITHOUT_CLASSIFICATION	8.358245477709324E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999164175452229	WITHOUT_CLASSIFICATION	8.358245477709324E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999998209105226	WITHOUT_CLASSIFICATION	1.7908947738810156E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991456582817	WITHOUT_CLASSIFICATION	8.543417181866906E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991456582817	WITHOUT_CLASSIFICATION	8.543417181866906E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999896773118849	WITHOUT_CLASSIFICATION	1.0322688115050946E-5	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999967333558124	WITHOUT_CLASSIFICATION	3.2666441875803904E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999983103972416	WITHOUT_CLASSIFICATION	1.6896027583230166E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997416906677	WITHOUT_CLASSIFICATION	2.583093322400447E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997416906677	WITHOUT_CLASSIFICATION	2.583093322400447E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999465993662	WITHOUT_CLASSIFICATION	5.340063386495121E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998396454044	WITHOUT_CLASSIFICATION	1.6035459556762364E-7	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998396454044	WITHOUT_CLASSIFICATION	1.6035459556762364E-7	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999550258185511	WITHOUT_CLASSIFICATION	4.497418144876893E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999995273251749	WITHOUT_CLASSIFICATION	4.726748250497242E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999997442390997	WITHOUT_CLASSIFICATION	2.5576090029276814E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999845357042387	WITHOUT_CLASSIFICATION	1.5464295761239335E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999897654626767	WITHOUT_CLASSIFICATION	1.0234537323374871E-5	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999872400185358	WITHOUT_CLASSIFICATION	1.2759981464081623E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999907691449491	WITHOUT_CLASSIFICATION	9.230855050879026E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999991518922389	WITHOUT_CLASSIFICATION	8.481077611044364E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9986214805040187	WITHOUT_CLASSIFICATION	0.0013785194959813484	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999880668099558	WITHOUT_CLASSIFICATION	1.1933190044340166E-5	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999870916329875	WITHOUT_CLASSIFICATION	1.2908367012535838E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999853584483142	WITHOUT_CLASSIFICATION	1.4641551685863663E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994134558049	WITHOUT_CLASSIFICATION	5.865441951126208E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999957585533468	WITHOUT_CLASSIFICATION	4.241446653199226E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999919272130108	WITHOUT_CLASSIFICATION	8.072786989221133E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999853584483142	WITHOUT_CLASSIFICATION	1.4641551685863663E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999516696033	WITHOUT_CLASSIFICATION	4.8330396575071953E-8	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999781569218	WITHOUT_CLASSIFICATION	2.1843078234693858E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999923589985009	WITHOUT_CLASSIFICATION	7.641001499023826E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.999993388237018	WITHOUT_CLASSIFICATION	6.611762981979874E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999939616718618	WITHOUT_CLASSIFICATION	6.038328138241671E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999893408874534	WITHOUT_CLASSIFICATION	1.0659112546565769E-5	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999793529519334	WITHOUT_CLASSIFICATION	2.0647048066576287E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999890319431095	WITHOUT_CLASSIFICATION	1.0968056890485536E-5	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999916711109706	WITHOUT_CLASSIFICATION	8.328889029373443E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999864975326	WITHOUT_CLASSIFICATION	1.3502467394631274E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999981276823178	WITHOUT_CLASSIFICATION	1.8723176822769855E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999991838144145	WITHOUT_CLASSIFICATION	8.161855855119171E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999882815285728	WITHOUT_CLASSIFICATION	1.1718471427158443E-5	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999907691449491	WITHOUT_CLASSIFICATION	9.230855050879026E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999916711109706	WITHOUT_CLASSIFICATION	8.328889029373443E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999981276823178	WITHOUT_CLASSIFICATION	1.8723176822769855E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999882815285728	WITHOUT_CLASSIFICATION	1.1718471427158443E-5	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998982443108	WITHOUT_CLASSIFICATION	1.0175568927513598E-7	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999866124948764	WITHOUT_CLASSIFICATION	1.338750512363206E-5	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999764524045	WITHOUT_CLASSIFICATION	2.3547595465977024E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999987806852724	WITHOUT_CLASSIFICATION	1.2193147275888775E-5	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999956217936493	WITHOUT_CLASSIFICATION	4.378206350634127E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999990197326377	WITHOUT_CLASSIFICATION	9.802673623296895E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999948557823045	WITHOUT_CLASSIFICATION	5.144217695420479E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999994945131365	WITHOUT_CLASSIFICATION	5.054868634137332E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.999997237443898	WITHOUT_CLASSIFICATION	2.7625561019311144E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998320009196	WITHOUT_CLASSIFICATION	1.6799908040263695E-7	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999834057247	WITHOUT_CLASSIFICATION	1.6594275304072058E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999976286504979	WITHOUT_CLASSIFICATION	2.3713495020663005E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999099472118	WITHOUT_CLASSIFICATION	9.005278822748644E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999031529683	WITHOUT_CLASSIFICATION	9.684703181580459E-8	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999881688658909	WITHOUT_CLASSIFICATION	1.1831134109135912E-5	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999921583559669	WITHOUT_CLASSIFICATION	7.841644033125944E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999864199387346	WITHOUT_CLASSIFICATION	1.358006126547258E-5	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999897137432633	WITHOUT_CLASSIFICATION	1.0286256736785893E-5	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999909398915866	WITHOUT_CLASSIFICATION	9.060108413417042E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999916711109706	WITHOUT_CLASSIFICATION	8.328889029373443E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999983830501573	WITHOUT_CLASSIFICATION	1.6169498426493114E-6	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999996552680804	WITHOUT_CLASSIFICATION	3.447319196424349E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999997536116533	WITHOUT_CLASSIFICATION	2.4638834671061793E-7	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9990145572931857	WITHOUT_CLASSIFICATION	9.854427068143423E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999983292013066	WITHOUT_CLASSIFICATION	1.6707986933716382E-6	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998715539973	WITHOUT_CLASSIFICATION	1.2844600270096E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999936958566	WITHOUT_CLASSIFICATION	6.304143329699113E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998594179144	WITHOUT_CLASSIFICATION	1.4058208558815797E-7	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999898375454483	WITHOUT_CLASSIFICATION	1.0162454551625473E-5	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999828065203408	WITHOUT_CLASSIFICATION	1.7193479659266454E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999947610363716	WITHOUT_CLASSIFICATION	5.238963628459635E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999905958980796	WITHOUT_CLASSIFICATION	9.404101920383913E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999999813555626	WITHOUT_CLASSIFICATION	1.8644437402647571E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999667510213	WITHOUT_CLASSIFICATION	3.324897868963031E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999996587960898	WITHOUT_CLASSIFICATION	3.4120391018014205E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999997057260887	WITHOUT_CLASSIFICATION	2.9427391130166755E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999991814391216	WITHOUT_CLASSIFICATION	8.185608784563106E-7	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999996865569502	WITHOUT_CLASSIFICATION	3.134430498220566E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.999999756105908	WITHOUT_CLASSIFICATION	2.4389409208154356E-7	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999955816163545	WITHOUT_CLASSIFICATION	4.418383645432596E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998891860554	WITHOUT_CLASSIFICATION	1.108139445448981E-7	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999998745562565	WITHOUT_CLASSIFICATION	1.2544374358194058E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999982948071607	WITHOUT_CLASSIFICATION	1.7051928393377713E-6	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999901089500187	WITHOUT_CLASSIFICATION	9.891049981319524E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999952624661951	WITHOUT_CLASSIFICATION	4.7375338049963905E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999952624661951	WITHOUT_CLASSIFICATION	4.7375338049963905E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999934792945988	WITHOUT_CLASSIFICATION	6.5207054013004524E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999996685823048	WITHOUT_CLASSIFICATION	3.3141769522168116E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999995276714327	WITHOUT_CLASSIFICATION	4.72328567271124E-7	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999999421238488	WITHOUT_CLASSIFICATION	5.787615120299029E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999993860717979	WITHOUT_CLASSIFICATION	6.13928202097443E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999993309066857	WITHOUT_CLASSIFICATION	6.690933143497051E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998110028003	WITHOUT_CLASSIFICATION	1.889971996278405E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999982628300188	WITHOUT_CLASSIFICATION	1.7371699812020456E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999973338198503	WITHOUT_CLASSIFICATION	2.666180149706173E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999945192873918	WITHOUT_CLASSIFICATION	5.480712608174294E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999908786084389	WITHOUT_CLASSIFICATION	9.12139156110442E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999999824868423	WITHOUT_CLASSIFICATION	1.7513157705374388E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999995167602894	WITHOUT_CLASSIFICATION	4.832397105310893E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999980986748079	WITHOUT_CLASSIFICATION	1.9013251920643368E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996730507716	WITHOUT_CLASSIFICATION	3.2694922832395183E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994668895984	WITHOUT_CLASSIFICATION	5.331104015703018E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999933046624765	WITHOUT_CLASSIFICATION	6.695337523405747E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997323853468	WITHOUT_CLASSIFICATION	2.676146532785E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999977329836727	WITHOUT_CLASSIFICATION	2.2670163273554617E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.99999873273087	WITHOUT_CLASSIFICATION	1.2672691299771917E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999977168672783	WITHOUT_CLASSIFICATION	2.2831327217368244E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999977168672783	WITHOUT_CLASSIFICATION	2.2831327217368244E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999853473570668	WITHOUT_CLASSIFICATION	1.4652642933119356E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999853473570668	WITHOUT_CLASSIFICATION	1.4652642933119356E-5	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999982948071607	WITHOUT_CLASSIFICATION	1.7051928393377713E-6	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999994219380633	WITHOUT_CLASSIFICATION	5.780619366589154E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999739051693028	WITHOUT_CLASSIFICATION	2.6094830697159695E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999969683487713	WITHOUT_CLASSIFICATION	3.0316512288178953E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999739051693028	WITHOUT_CLASSIFICATION	2.6094830697159695E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999969683487713	WITHOUT_CLASSIFICATION	3.0316512288178953E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999981717114559	WITHOUT_CLASSIFICATION	1.8282885440991773E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997609810804122	WITHOUT_CLASSIFICATION	2.3901891958776837E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999721852568	WITHOUT_CLASSIFICATION	2.781474320807198E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998220329959	WITHOUT_CLASSIFICATION	1.7796700413461737E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999986307325108	WITHOUT_CLASSIFICATION	1.3692674891716822E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997489682728449	WITHOUT_CLASSIFICATION	2.510317271551304E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.99999900433797	WITHOUT_CLASSIFICATION	9.956620301207646E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999908835747942	WITHOUT_CLASSIFICATION	9.116425205725226E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999987259605738	WITHOUT_CLASSIFICATION	1.2740394261829207E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998600844544	WITHOUT_CLASSIFICATION	1.3991554561492174E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999992118423079	WITHOUT_CLASSIFICATION	7.881576920534205E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999870308581	WITHOUT_CLASSIFICATION	1.2969141819226522E-8	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999999226955084	WITHOUT_CLASSIFICATION	7.730449159252309E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999627921921598	WITHOUT_CLASSIFICATION	3.720780784011494E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999715436520169	WITHOUT_CLASSIFICATION	2.8456347983070534E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999927454782005	WITHOUT_CLASSIFICATION	7.254521799513631E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999927454782005	WITHOUT_CLASSIFICATION	7.254521799513631E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999250326914	WITHOUT_CLASSIFICATION	7.496730858747666E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999981717114559	WITHOUT_CLASSIFICATION	1.8282885440991773E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999986284456321	WITHOUT_CLASSIFICATION	1.3715543679100542E-6	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999343654777767	WITHOUT_CLASSIFICATION	6.563452222332447E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999505711473	WITHOUT_CLASSIFICATION	4.942885261741565E-8	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999753522432459	WITHOUT_CLASSIFICATION	2.4647756754108006E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9991706600921891	WITHOUT_CLASSIFICATION	8.293399078108199E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999981717114559	WITHOUT_CLASSIFICATION	1.8282885440991773E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999753522432459	WITHOUT_CLASSIFICATION	2.4647756754108006E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9991706600921891	WITHOUT_CLASSIFICATION	8.293399078108199E-4	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999978695905777	WITHOUT_CLASSIFICATION	2.130409422308887E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999939511767623	WITHOUT_CLASSIFICATION	6.048823237847835E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998421714301	WITHOUT_CLASSIFICATION	1.5782856988175908E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999981717114559	WITHOUT_CLASSIFICATION	1.8282885440991773E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999981717114559	WITHOUT_CLASSIFICATION	1.8282885440991773E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999983460783699	WITHOUT_CLASSIFICATION	1.6539216301955001E-6	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999990298954888	WITHOUT_CLASSIFICATION	9.7010451112975E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999976861562424	WITHOUT_CLASSIFICATION	2.313843757579035E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994200329211	WITHOUT_CLASSIFICATION	5.799670788108311E-7	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999988383161242	WITHOUT_CLASSIFICATION	1.161683875766905E-6	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999995824186712	WITHOUT_CLASSIFICATION	4.175813289268698E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999993291819154	WITHOUT_CLASSIFICATION	6.70818084639782E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996794638476	WITHOUT_CLASSIFICATION	3.205361523977541E-7	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996077814136	WITHOUT_CLASSIFICATION	3.922185863275919E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999962877086697	WITHOUT_CLASSIFICATION	3.71229133043557E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999554802513	WITHOUT_CLASSIFICATION	4.451974869251035E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999995876215816	WITHOUT_CLASSIFICATION	4.123784183939746E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999986353362819	WITHOUT_CLASSIFICATION	1.3646637181494815E-6	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993028818805	WITHOUT_CLASSIFICATION	6.971181194485862E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995892066412	WITHOUT_CLASSIFICATION	4.107933586943281E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999755319285861	WITHOUT_CLASSIFICATION	2.4468071413844676E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944535002887	WITHOUT_CLASSIFICATION	5.546499711299408E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999469826675526	WITHOUT_CLASSIFICATION	5.3017332447531036E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999815987365371	WITHOUT_CLASSIFICATION	1.840126346284396E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999995548584092	WITHOUT_CLASSIFICATION	4.4514159081539306E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999956468857659	WITHOUT_CLASSIFICATION	4.353114234029011E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999466940298344	WITHOUT_CLASSIFICATION	5.3305970165581645E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999466940298344	WITHOUT_CLASSIFICATION	5.3305970165581645E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944535002887	WITHOUT_CLASSIFICATION	5.546499711299408E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9883598435568172	WITHOUT_CLASSIFICATION	0.011640156443182902	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999411190710809	WITHOUT_CLASSIFICATION	5.8880928919120497E-5	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9996883607887627	WITHOUT_CLASSIFICATION	3.1163921123735015E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999966630650509	WITHOUT_CLASSIFICATION	3.3369349490291513E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999887515643652	WITHOUT_CLASSIFICATION	1.1248435634846355E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996844177019	WITHOUT_CLASSIFICATION	3.1558229804145696E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999839802484	WITHOUT_CLASSIFICATION	1.6019751626157864E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999976154678427	WITHOUT_CLASSIFICATION	2.3845321573034037E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999939634429	WITHOUT_CLASSIFICATION	6.036557089204269E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999993711462447	WITHOUT_CLASSIFICATION	6.28853755264716E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995749737011	WITHOUT_CLASSIFICATION	4.2502629899020153E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999984279507678	WITHOUT_CLASSIFICATION	1.5720492322955952E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999831204060251	WITHOUT_CLASSIFICATION	1.687959397488239E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999238240216	WITHOUT_CLASSIFICATION	7.617597840863739E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998532925545	WITHOUT_CLASSIFICATION	1.4670744552402886E-7	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999158156173	WITHOUT_CLASSIFICATION	8.418438270393365E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999611221895	WITHOUT_CLASSIFICATION	3.8877810517647025E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999958482397262	WITHOUT_CLASSIFICATION	4.151760273760616E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998112944914	WITHOUT_CLASSIFICATION	1.8870550858625653E-7	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999124353189	WITHOUT_CLASSIFICATION	8.756468107011052E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999994099974032	WITHOUT_CLASSIFICATION	5.900025968216134E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999687196675	WITHOUT_CLASSIFICATION	3.1280332524371204E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995671437382	WITHOUT_CLASSIFICATION	4.328562617169801E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978932300215	WITHOUT_CLASSIFICATION	2.1067699784869512E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987390780961	WITHOUT_CLASSIFICATION	1.260921903873947E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987741854973	WITHOUT_CLASSIFICATION	1.2258145026936432E-6	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959346769633	WITHOUT_CLASSIFICATION	4.065323036665804E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973549416242	WITHOUT_CLASSIFICATION	2.6450583758538894E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977421407145	WITHOUT_CLASSIFICATION	2.257859285519512E-6	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999489675234	WITHOUT_CLASSIFICATION	5.103247660599632E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999997656217292	WITHOUT_CLASSIFICATION	2.3437827085121076E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999349213621	WITHOUT_CLASSIFICATION	6.507863792100546E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987265154597	WITHOUT_CLASSIFICATION	1.2734845402107981E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976747304323	WITHOUT_CLASSIFICATION	2.3252695675431677E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995990250481	WITHOUT_CLASSIFICATION	4.0097495201553277E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972728119944	WITHOUT_CLASSIFICATION	2.727188005583905E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980675222573	WITHOUT_CLASSIFICATION	1.932477742731331E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989183567612	WITHOUT_CLASSIFICATION	1.0816432387575254E-6	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999614396588	WITHOUT_CLASSIFICATION	3.8560341195598155E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955176270698	WITHOUT_CLASSIFICATION	4.48237293010671E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999988560164513	WITHOUT_CLASSIFICATION	1.1439835487567628E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997117477147	WITHOUT_CLASSIFICATION	2.882522852732477E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999978600018387	WITHOUT_CLASSIFICATION	2.139998161401889E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999984478165564	WITHOUT_CLASSIFICATION	1.5521834435607018E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999996302558399	WITHOUT_CLASSIFICATION	3.6974416013537167E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999215052754652	WITHOUT_CLASSIFICATION	7.849472453488341E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999862303045128	WITHOUT_CLASSIFICATION	1.376969548710373E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999977980524744	WITHOUT_CLASSIFICATION	2.201947525622E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999978412218601	WITHOUT_CLASSIFICATION	2.158778139822212E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999993914945057	WITHOUT_CLASSIFICATION	6.0850549430189025E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999941206860592	WITHOUT_CLASSIFICATION	5.8793139407846955E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999899635060158	WITHOUT_CLASSIFICATION	1.0036493984163147E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999944159837136	WITHOUT_CLASSIFICATION	5.584016286350876E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999917474565192	WITHOUT_CLASSIFICATION	8.2525434808772E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999986822159185	WITHOUT_CLASSIFICATION	1.3177840814671453E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999997720037898	WITHOUT_CLASSIFICATION	2.2799621035662469E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997950021993	WITHOUT_CLASSIFICATION	2.0499780074400432E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999858148160524	WITHOUT_CLASSIFICATION	1.4185183947652377E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.99999996331448	WITHOUT_CLASSIFICATION	3.6685520003533055E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994310146264	WITHOUT_CLASSIFICATION	5.689853735265488E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988201469654	WITHOUT_CLASSIFICATION	1.1798530346363763E-6	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993070790143	WITHOUT_CLASSIFICATION	6.929209856953167E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990108690321	WITHOUT_CLASSIFICATION	9.891309679840483E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999981544674906	WITHOUT_CLASSIFICATION	1.8455325093232515E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999302795929	WITHOUT_CLASSIFICATION	6.972040712237511E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999567629669	WITHOUT_CLASSIFICATION	4.323703301070776E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999997030195743	WITHOUT_CLASSIFICATION	2.9698042566350776E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971339920593	WITHOUT_CLASSIFICATION	2.8660079407709933E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998937338194	WITHOUT_CLASSIFICATION	1.0626618062973716E-7	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999934512977444	WITHOUT_CLASSIFICATION	6.548702255693819E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999998373488402	WITHOUT_CLASSIFICATION	1.6265115975131474E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999822623145	WITHOUT_CLASSIFICATION	1.7737685569534854E-8	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999991046539883	WITHOUT_CLASSIFICATION	8.953460116419059E-7	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999498003928	WITHOUT_CLASSIFICATION	5.0199607300617284E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999995242833614	WITHOUT_CLASSIFICATION	4.7571663873599837E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999994637577587	WITHOUT_CLASSIFICATION	5.362422412534279E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999215052754652	WITHOUT_CLASSIFICATION	7.849472453488341E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997014962905	WITHOUT_CLASSIFICATION	2.9850370950565277E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999624454377	WITHOUT_CLASSIFICATION	3.755456235582038E-8	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997268021026	WITHOUT_CLASSIFICATION	2.731978975137573E-7	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999984918725913	WITHOUT_CLASSIFICATION	1.5081274087178703E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999257116551	WITHOUT_CLASSIFICATION	7.42883449176831E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999986049680483	WITHOUT_CLASSIFICATION	1.395031951702385E-6	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999888046621002	WITHOUT_CLASSIFICATION	1.1195337899885778E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999997235667036	WITHOUT_CLASSIFICATION	2.7643329640829432E-6	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999985381587494	WITHOUT_CLASSIFICATION	1.4618412505977315E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997133627726	WITHOUT_CLASSIFICATION	2.866372273925326E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999991232998	WITHOUT_CLASSIFICATION	8.76700200155414E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999483090912	WITHOUT_CLASSIFICATION	5.169090876166365E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996767306144	WITHOUT_CLASSIFICATION	3.2326938563319064E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999372705581	WITHOUT_CLASSIFICATION	6.272944193941167E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999985385273038	WITHOUT_CLASSIFICATION	1.4614726961869245E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996617474122	WITHOUT_CLASSIFICATION	3.3825258781554007E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999946656726812	WITHOUT_CLASSIFICATION	5.33432731879957E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999949744397787	WITHOUT_CLASSIFICATION	5.025560221281546E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999994348541351	WITHOUT_CLASSIFICATION	5.651458649312055E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.999993091262844	WITHOUT_CLASSIFICATION	6.9087371560226515E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999641420285	WITHOUT_CLASSIFICATION	3.5857971442661056E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999957009654337	WITHOUT_CLASSIFICATION	4.299034566270823E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999980025567549	WITHOUT_CLASSIFICATION	1.9974432451171444E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998595264741	WITHOUT_CLASSIFICATION	1.4047352595318803E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999988343131714	WITHOUT_CLASSIFICATION	1.165686828567856E-6	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999973371669081	WITHOUT_CLASSIFICATION	2.662833091922126E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9993889407149804	WITHOUT_CLASSIFICATION	6.110592850196101E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999987996262515	WITHOUT_CLASSIFICATION	1.2003737485918838E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999984133813548	WITHOUT_CLASSIFICATION	1.58661864520038E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991796360428	WITHOUT_CLASSIFICATION	8.203639570949551E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999215052754652	WITHOUT_CLASSIFICATION	7.849472453488341E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999990883790892	WITHOUT_CLASSIFICATION	9.116209108223631E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999988023939925	WITHOUT_CLASSIFICATION	1.1976060074950629E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998005208098736	WITHOUT_CLASSIFICATION	1.9947919012641943E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999215052754652	WITHOUT_CLASSIFICATION	7.849472453488341E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963003489639	WITHOUT_CLASSIFICATION	3.69965103617745E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999641420285	WITHOUT_CLASSIFICATION	3.5857971442661056E-8	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999991185063745	WITHOUT_CLASSIFICATION	8.814936255057746E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999630764590566	WITHOUT_CLASSIFICATION	3.692354094351653E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999908303401097	WITHOUT_CLASSIFICATION	9.169659890267366E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997133627726	WITHOUT_CLASSIFICATION	2.866372273925326E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999991232998	WITHOUT_CLASSIFICATION	8.76700200155414E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999483090912	WITHOUT_CLASSIFICATION	5.169090876166365E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999972564784613	WITHOUT_CLASSIFICATION	2.7435215387146155E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999992996129665	WITHOUT_CLASSIFICATION	7.003870334817075E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999965545340227	WITHOUT_CLASSIFICATION	3.4454659772491836E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999995408628345	WITHOUT_CLASSIFICATION	4.5913716545842673E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999687950323	WITHOUT_CLASSIFICATION	3.12049677523692E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999215052754652	WITHOUT_CLASSIFICATION	7.849472453488341E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996767306144	WITHOUT_CLASSIFICATION	3.2326938563319064E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999372705581	WITHOUT_CLASSIFICATION	6.272944193941167E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999509824346	WITHOUT_CLASSIFICATION	4.901756539006559E-7	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996532531528	WITHOUT_CLASSIFICATION	3.46746847195067E-7	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999988625868991	WITHOUT_CLASSIFICATION	1.1374131009291653E-6	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999970761400442	WITHOUT_CLASSIFICATION	2.92385995590439E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999985778488538	WITHOUT_CLASSIFICATION	1.4221511461896275E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999736936938	WITHOUT_CLASSIFICATION	2.6306306339503682E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955176270698	WITHOUT_CLASSIFICATION	4.48237293010671E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999987277068706	WITHOUT_CLASSIFICATION	1.272293129398882E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997908609747205	WITHOUT_CLASSIFICATION	2.0913902527956032E-4	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999959286751596	WITHOUT_CLASSIFICATION	4.0713248403197225E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999630167854	WITHOUT_CLASSIFICATION	3.6983214678998806E-8	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999149330672	WITHOUT_CLASSIFICATION	8.506693280658521E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959346769633	WITHOUT_CLASSIFICATION	4.065323036665804E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973549416242	WITHOUT_CLASSIFICATION	2.6450583758538894E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976747304323	WITHOUT_CLASSIFICATION	2.3252695675431677E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999149330672	WITHOUT_CLASSIFICATION	8.506693280658521E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999998342671315	WITHOUT_CLASSIFICATION	1.6573286857290436E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.99999995859938	WITHOUT_CLASSIFICATION	4.140061993864946E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991169528673	WITHOUT_CLASSIFICATION	8.83047132719024E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981959153772	WITHOUT_CLASSIFICATION	1.8040846227906052E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999989394414084	WITHOUT_CLASSIFICATION	1.0605585916616262E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999079017971451	WITHOUT_CLASSIFICATION	9.20982028549376E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995990250481	WITHOUT_CLASSIFICATION	4.0097495201553277E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989183567612	WITHOUT_CLASSIFICATION	1.0816432387575254E-6	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999822623145	WITHOUT_CLASSIFICATION	1.7737685569534854E-8	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999993056421307	WITHOUT_CLASSIFICATION	6.94357869421938E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999042154388	WITHOUT_CLASSIFICATION	9.578456120316422E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997752750298	WITHOUT_CLASSIFICATION	2.247249701425069E-7	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999903743522127	WITHOUT_CLASSIFICATION	9.625647787395744E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998513641468	WITHOUT_CLASSIFICATION	1.4863585326922085E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999995652966428	WITHOUT_CLASSIFICATION	4.3470335718537194E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999937169278358	WITHOUT_CLASSIFICATION	6.2830721642161224E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999939634429	WITHOUT_CLASSIFICATION	6.036557089204269E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999609189018	WITHOUT_CLASSIFICATION	3.9081098255065955E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999982913439398	WITHOUT_CLASSIFICATION	1.7086560600978091E-6	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998461353686	WITHOUT_CLASSIFICATION	1.5386463136235029E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999997249119282	WITHOUT_CLASSIFICATION	2.750880717909186E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999443222892	WITHOUT_CLASSIFICATION	5.567771087761106E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999935681499157	WITHOUT_CLASSIFICATION	6.4318500842753975E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995296647148	WITHOUT_CLASSIFICATION	4.703352852195836E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998745005175	WITHOUT_CLASSIFICATION	1.254994824189234E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998478224204	WITHOUT_CLASSIFICATION	1.5217757964480516E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999980235998788	WITHOUT_CLASSIFICATION	1.9764001212718033E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999884086845277	WITHOUT_CLASSIFICATION	1.1591315472304695E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998953814943	WITHOUT_CLASSIFICATION	1.0461850567514864E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999341641853	WITHOUT_CLASSIFICATION	6.583581476317644E-8	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999078251616	WITHOUT_CLASSIFICATION	9.217483843211953E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998724386905	WITHOUT_CLASSIFICATION	1.2756130952022084E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999987145795636	WITHOUT_CLASSIFICATION	1.2854204364798762E-6	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999966854396866	WITHOUT_CLASSIFICATION	3.314560313409917E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999274368823	WITHOUT_CLASSIFICATION	7.25631177780063E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999978118787604	WITHOUT_CLASSIFICATION	2.188121239628521E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997967154068	WITHOUT_CLASSIFICATION	2.0328459302067665E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995754018138	WITHOUT_CLASSIFICATION	4.2459818605329E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999989268341769	WITHOUT_CLASSIFICATION	1.0731658230872196E-6	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999977526193832	WITHOUT_CLASSIFICATION	2.2473806167582485E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996073400224	WITHOUT_CLASSIFICATION	3.926599776649487E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999997341788969	WITHOUT_CLASSIFICATION	2.658211031229073E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999810526008791	WITHOUT_CLASSIFICATION	1.8947399120898525E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999765059700186	WITHOUT_CLASSIFICATION	2.3494029981316555E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999941626036236	WITHOUT_CLASSIFICATION	5.837396376449507E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997888092165	WITHOUT_CLASSIFICATION	2.1119078346793206E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999983476109341	WITHOUT_CLASSIFICATION	1.6523890659182168E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999307056401	WITHOUT_CLASSIFICATION	6.929435989689225E-7	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999842780655	WITHOUT_CLASSIFICATION	1.5721934586048E-8	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999998364813481	WITHOUT_CLASSIFICATION	1.6351865189396474E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999960039401936	WITHOUT_CLASSIFICATION	3.9960598064354375E-6	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997227051232	WITHOUT_CLASSIFICATION	2.772948768683301E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999785999183667	WITHOUT_CLASSIFICATION	2.140008163342092E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999993516741652	WITHOUT_CLASSIFICATION	6.483258347953758E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999982956435014	WITHOUT_CLASSIFICATION	1.7043564985978525E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.99999703004193	WITHOUT_CLASSIFICATION	2.9699580701494442E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999734581771466	WITHOUT_CLASSIFICATION	2.654182285345865E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998727789362943	WITHOUT_CLASSIFICATION	1.2722106370562387E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999996577940945	WITHOUT_CLASSIFICATION	3.4220590542386605E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999994600693045	WITHOUT_CLASSIFICATION	5.399306954995708E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998774781631	WITHOUT_CLASSIFICATION	1.2252183700518025E-7	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999986544407878	WITHOUT_CLASSIFICATION	1.3455592121368362E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995374598915	WITHOUT_CLASSIFICATION	4.625401085517119E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999995518119232	WITHOUT_CLASSIFICATION	4.4818807682938205E-7	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999039078344	WITHOUT_CLASSIFICATION	9.609216565630973E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999972755403684	WITHOUT_CLASSIFICATION	2.724459631638601E-6	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999988408731183	WITHOUT_CLASSIFICATION	1.1591268816434247E-6	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999461341745	WITHOUT_CLASSIFICATION	5.386582550748343E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997328631194	WITHOUT_CLASSIFICATION	2.671368806553139E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999983129506813	WITHOUT_CLASSIFICATION	1.6870493186185808E-6	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999402438869	WITHOUT_CLASSIFICATION	5.975611312555971E-8	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999593922281	WITHOUT_CLASSIFICATION	4.0607771978442345E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999972966043835	WITHOUT_CLASSIFICATION	2.7033956165163284E-6	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999987736292963	WITHOUT_CLASSIFICATION	1.226370703675884E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998033034244	WITHOUT_CLASSIFICATION	1.9669657549940292E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999979446206857	WITHOUT_CLASSIFICATION	2.0553793143782247E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997667103718	WITHOUT_CLASSIFICATION	2.3328962821276826E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999992059592779	WITHOUT_CLASSIFICATION	7.940407221011913E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999882527527834	WITHOUT_CLASSIFICATION	1.1747247216507942E-5	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999993756465099	WITHOUT_CLASSIFICATION	6.243534900704874E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999929317497721	WITHOUT_CLASSIFICATION	7.068250227778123E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999962653418606	WITHOUT_CLASSIFICATION	3.7346581393696827E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999876772277053	WITHOUT_CLASSIFICATION	1.2322772294730425E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999924964881685	WITHOUT_CLASSIFICATION	7.503511831541997E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999999852677167	WITHOUT_CLASSIFICATION	1.4732283301113671E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999936532577061	WITHOUT_CLASSIFICATION	6.3467422939437494E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999951078945546	WITHOUT_CLASSIFICATION	4.892105445439017E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999981789550351	WITHOUT_CLASSIFICATION	1.8210449650175242E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999971140172028	WITHOUT_CLASSIFICATION	2.885982797221406E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999969231006217	WITHOUT_CLASSIFICATION	3.076899378247352E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999203267681	WITHOUT_CLASSIFICATION	7.96732318309428E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999992718377062	WITHOUT_CLASSIFICATION	7.281622938699967E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999723121068341	WITHOUT_CLASSIFICATION	2.768789316583139E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999953997966279	WITHOUT_CLASSIFICATION	4.600203372193999E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997596244030922	WITHOUT_CLASSIFICATION	2.4037559690774535E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999978724678786	WITHOUT_CLASSIFICATION	2.1275321214692045E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999983365530466	WITHOUT_CLASSIFICATION	1.6634469533403145E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999925204126623	WITHOUT_CLASSIFICATION	7.479587337798567E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999976313429865	WITHOUT_CLASSIFICATION	2.3686570135715085E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999992486843593	WITHOUT_CLASSIFICATION	7.513156407663156E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999228742924249	WITHOUT_CLASSIFICATION	7.7125707575093E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999874683508035	WITHOUT_CLASSIFICATION	1.25316491964553E-5	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999814943544155	WITHOUT_CLASSIFICATION	1.8505645584475808E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999973025508944	WITHOUT_CLASSIFICATION	2.6974491057499616E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999922271443873	WITHOUT_CLASSIFICATION	7.772855612712121E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999998789539573	WITHOUT_CLASSIFICATION	1.210460427020342E-6	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999995381368	WITHOUT_CLASSIFICATION	4.6186310481447024E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999987031764016	WITHOUT_CLASSIFICATION	1.2968235983654196E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999979305815603	WITHOUT_CLASSIFICATION	2.069418439748477E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999974741753631	WITHOUT_CLASSIFICATION	2.525824636857345E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999987031764016	WITHOUT_CLASSIFICATION	1.2968235983654196E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995044148778	WITHOUT_CLASSIFICATION	4.955851221157229E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999990173381613	WITHOUT_CLASSIFICATION	9.826618387060233E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999907912203916	WITHOUT_CLASSIFICATION	9.208779608458421E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999848822039262	WITHOUT_CLASSIFICATION	1.5117796073753526E-5	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999471119343	WITHOUT_CLASSIFICATION	5.2888065810064546E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995426889626	WITHOUT_CLASSIFICATION	4.573110374561908E-7	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999269074177155	WITHOUT_CLASSIFICATION	7.309258228448896E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999992863404479	WITHOUT_CLASSIFICATION	7.136595521555279E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999591115335	WITHOUT_CLASSIFICATION	4.0888466598055313E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999926669160423	WITHOUT_CLASSIFICATION	7.333083957690862E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999417602441	WITHOUT_CLASSIFICATION	5.823975585054343E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999993040210482	WITHOUT_CLASSIFICATION	6.959789517829731E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999977285813069	WITHOUT_CLASSIFICATION	2.2714186930912927E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999984790954114	WITHOUT_CLASSIFICATION	1.5209045886202954E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999984339777448	WITHOUT_CLASSIFICATION	1.5660222552180183E-6	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999956062944294	WITHOUT_CLASSIFICATION	4.393705570545225E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999822471782404	WITHOUT_CLASSIFICATION	1.7752821759602394E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999822471782404	WITHOUT_CLASSIFICATION	1.7752821759602394E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997109323795	WITHOUT_CLASSIFICATION	2.8906762051894456E-7	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999501920387773	WITHOUT_CLASSIFICATION	4.9807961222614483E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999733998897128	WITHOUT_CLASSIFICATION	2.6600110287215164E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999760207050044	WITHOUT_CLASSIFICATION	2.3979294995587804E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999993768791363	WITHOUT_CLASSIFICATION	6.231208636362683E-7	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9996884617867059	WITHOUT_CLASSIFICATION	3.1153821329413234E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999883742739999	WITHOUT_CLASSIFICATION	1.1625726000134418E-5	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999595807882	WITHOUT_CLASSIFICATION	4.041921171318842E-8	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999129577204	WITHOUT_CLASSIFICATION	8.704227959015953E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999737125698559	WITHOUT_CLASSIFICATION	2.6287430144175278E-5	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998552536127	WITHOUT_CLASSIFICATION	1.4474638743726858E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999958286622	WITHOUT_CLASSIFICATION	4.17133782488518E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999983904743505	WITHOUT_CLASSIFICATION	1.6095256495580223E-6	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999987395583674	WITHOUT_CLASSIFICATION	1.26044163257375E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998711910797	WITHOUT_CLASSIFICATION	1.2880892033883036E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999935681499157	WITHOUT_CLASSIFICATION	6.4318500842753975E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999935528537132	WITHOUT_CLASSIFICATION	6.447146286791448E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999994583606023	WITHOUT_CLASSIFICATION	5.416393977579521E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999874406454612	WITHOUT_CLASSIFICATION	1.2559354538698853E-5	TEST
//do the test	WITHOUT_CLASSIFICATION	0.996492016654956	WITHOUT_CLASSIFICATION	0.003507983345044083	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999777938139	WITHOUT_CLASSIFICATION	2.2206186136932673E-8	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.999984501823035	WITHOUT_CLASSIFICATION	1.549817696502928E-5	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998845138353	WITHOUT_CLASSIFICATION	1.1548616476591488E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999994058489038	WITHOUT_CLASSIFICATION	5.941510962426724E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999734479552	WITHOUT_CLASSIFICATION	2.6552044787130135E-8	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999785259248	WITHOUT_CLASSIFICATION	2.1474075235926656E-8	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999998315958656	WITHOUT_CLASSIFICATION	1.6840413446784098E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999999804879817	WITHOUT_CLASSIFICATION	1.951201830035753E-7	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999979285795374	WITHOUT_CLASSIFICATION	2.071420462586353E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.99998873855658	WITHOUT_CLASSIFICATION	1.1261443419971979E-5	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999989890743133	WITHOUT_CLASSIFICATION	1.0109256866440586E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999998688267893	WITHOUT_CLASSIFICATION	1.3117321070442505E-6	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999676635992675	WITHOUT_CLASSIFICATION	3.233640073248865E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999909666918478	WITHOUT_CLASSIFICATION	9.033308152242897E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999985998024019	WITHOUT_CLASSIFICATION	1.4001975980771627E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999988442881111	WITHOUT_CLASSIFICATION	1.1557118888404474E-6	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999950952269615	WITHOUT_CLASSIFICATION	4.904773038438977E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999988889535865	WITHOUT_CLASSIFICATION	1.111046413562937E-6	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997592625569	WITHOUT_CLASSIFICATION	2.4073744313394684E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999971177497989	WITHOUT_CLASSIFICATION	2.882250200976176E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999974590485871	WITHOUT_CLASSIFICATION	2.5409514129422787E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999987364407882	WITHOUT_CLASSIFICATION	1.263559211889974E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999685544165	WITHOUT_CLASSIFICATION	3.144558337270855E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999632031009	WITHOUT_CLASSIFICATION	3.6796899111918284E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999960743005551	WITHOUT_CLASSIFICATION	3.925699444799455E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999998171947662	WITHOUT_CLASSIFICATION	1.828052337941389E-6	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982177230439	WITHOUT_CLASSIFICATION	1.7822769561844784E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988424985816	WITHOUT_CLASSIFICATION	1.1575014182843881E-6	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962572311702	WITHOUT_CLASSIFICATION	3.742768829791945E-6	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999926279864	WITHOUT_CLASSIFICATION	7.372013652827498E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999759048445	WITHOUT_CLASSIFICATION	2.409515554059463E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982659239203	WITHOUT_CLASSIFICATION	1.734076079738263E-6	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999704944496	WITHOUT_CLASSIFICATION	2.9505550434302345E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999999716423488	WITHOUT_CLASSIFICATION	2.8357651203500666E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985140031055	WITHOUT_CLASSIFICATION	1.4859968945478063E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999999716423488	WITHOUT_CLASSIFICATION	2.8357651203500666E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999975171028618	WITHOUT_CLASSIFICATION	2.4828971382007154E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999995368957855	WITHOUT_CLASSIFICATION	4.6310421453305874E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999960563644056	WITHOUT_CLASSIFICATION	3.9436355944740005E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998587418899	WITHOUT_CLASSIFICATION	1.4125811011085468E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999922104892046	WITHOUT_CLASSIFICATION	7.78951079538066E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999617542918949	WITHOUT_CLASSIFICATION	3.824570810505095E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999495225383	WITHOUT_CLASSIFICATION	5.0477461550535953E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999247298006	WITHOUT_CLASSIFICATION	7.527019936250327E-8	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999999923141492	WITHOUT_CLASSIFICATION	7.685850797779485E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999791370800798	WITHOUT_CLASSIFICATION	2.086291992021264E-5	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999403150864	WITHOUT_CLASSIFICATION	5.968491356257795E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999176407399	WITHOUT_CLASSIFICATION	8.23592601234178E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999635589073073	WITHOUT_CLASSIFICATION	3.644109269278656E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999614815878763	WITHOUT_CLASSIFICATION	3.8518412123672184E-5	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999470860472	WITHOUT_CLASSIFICATION	5.291395281465408E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999531593434	WITHOUT_CLASSIFICATION	4.684065662066111E-8	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999510152485187	WITHOUT_CLASSIFICATION	4.8984751481270925E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999510152485187	WITHOUT_CLASSIFICATION	4.8984751481270925E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999957784870546	WITHOUT_CLASSIFICATION	4.221512945493833E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999967532523367	WITHOUT_CLASSIFICATION	3.246747663327974E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998664270991	WITHOUT_CLASSIFICATION	1.335729008797025E-7	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998652656242	WITHOUT_CLASSIFICATION	1.347343757481544E-7	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999994720207761	WITHOUT_CLASSIFICATION	5.279792238559189E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999991915876673	WITHOUT_CLASSIFICATION	8.084123327221252E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999995025096338	WITHOUT_CLASSIFICATION	4.974903662825478E-7	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999529883777422	WITHOUT_CLASSIFICATION	4.701162225790179E-5	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999969256163349	WITHOUT_CLASSIFICATION	3.0743836649981248E-6	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999059102229	WITHOUT_CLASSIFICATION	9.408977705705397E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994822993024	WITHOUT_CLASSIFICATION	5.177006975997608E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998911106187	WITHOUT_CLASSIFICATION	1.0888938134149435E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999995650364008	WITHOUT_CLASSIFICATION	4.3496359921090226E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999993411232797	WITHOUT_CLASSIFICATION	6.588767201815323E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997494760297	WITHOUT_CLASSIFICATION	2.5052397034521225E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999990983885583	WITHOUT_CLASSIFICATION	9.016114416181499E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.99999947845425	WITHOUT_CLASSIFICATION	5.215457500908352E-7	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999984085708803	WITHOUT_CLASSIFICATION	1.5914291196966964E-5	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999996275686968	WITHOUT_CLASSIFICATION	3.7243130319602483E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999951174547	WITHOUT_CLASSIFICATION	4.882545317132378E-9	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999994056193691	WITHOUT_CLASSIFICATION	5.94380630889295E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999357638213	WITHOUT_CLASSIFICATION	6.423617867028658E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999919974905	WITHOUT_CLASSIFICATION	8.002509498319098E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999842894545	WITHOUT_CLASSIFICATION	1.571054543154329E-8	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999930808963708	WITHOUT_CLASSIFICATION	6.91910362907306E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997533838688	WITHOUT_CLASSIFICATION	2.4661613110544074E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999984902084215	WITHOUT_CLASSIFICATION	1.509791578521994E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999979361064932	WITHOUT_CLASSIFICATION	2.0638935068078782E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999814258940969	WITHOUT_CLASSIFICATION	1.8574105903106673E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999986048537326	WITHOUT_CLASSIFICATION	1.3951462673321292E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999901130383515	WITHOUT_CLASSIFICATION	9.886961648407132E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999977728131332	WITHOUT_CLASSIFICATION	2.227186866859543E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999328133695256	WITHOUT_CLASSIFICATION	6.718663047447234E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999652160913128	WITHOUT_CLASSIFICATION	3.47839086871686E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999918102761216	WITHOUT_CLASSIFICATION	8.189723878270626E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999750799773	WITHOUT_CLASSIFICATION	2.4920022676682784E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999681663676	WITHOUT_CLASSIFICATION	3.183363245085774E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999876161080344	WITHOUT_CLASSIFICATION	1.238389196562979E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998659114184	WITHOUT_CLASSIFICATION	1.3408858164591172E-7	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998769491882	WITHOUT_CLASSIFICATION	1.2305081180255277E-7	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999615911636	WITHOUT_CLASSIFICATION	3.840883654157094E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966377403335	WITHOUT_CLASSIFICATION	3.3622596665444897E-6	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.999956992131048	WITHOUT_CLASSIFICATION	4.300786895203495E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999060745146	WITHOUT_CLASSIFICATION	9.392548537658104E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999976194319	WITHOUT_CLASSIFICATION	2.380568061643417E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999996565060905	WITHOUT_CLASSIFICATION	3.4349390955896007E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999998625235775	WITHOUT_CLASSIFICATION	1.3747642245202088E-7	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999515053024	WITHOUT_CLASSIFICATION	4.849469752250832E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999995092289452	WITHOUT_CLASSIFICATION	4.907710547709777E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999917948871199	WITHOUT_CLASSIFICATION	8.205112880084752E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954741691782	WITHOUT_CLASSIFICATION	4.525830821803864E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999936682841328	WITHOUT_CLASSIFICATION	6.331715867137798E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999963899715776	WITHOUT_CLASSIFICATION	3.6100284224881944E-6	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999971208197024	WITHOUT_CLASSIFICATION	2.879180297506632E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999887753799995	WITHOUT_CLASSIFICATION	1.12246200005926E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963003489639	WITHOUT_CLASSIFICATION	3.69965103617745E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963003489639	WITHOUT_CLASSIFICATION	3.69965103617745E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999899395081292	WITHOUT_CLASSIFICATION	1.0060491870885448E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999855050374306	WITHOUT_CLASSIFICATION	1.4494962569340723E-5	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999997755895914	WITHOUT_CLASSIFICATION	2.2441040866889957E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999993196590506	WITHOUT_CLASSIFICATION	6.803409493640748E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996270016043	WITHOUT_CLASSIFICATION	3.7299839571326015E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999996066975365	WITHOUT_CLASSIFICATION	3.9330246356171805E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999261801791	WITHOUT_CLASSIFICATION	7.381982093477396E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999728973211	WITHOUT_CLASSIFICATION	2.7102678782868237E-8	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999711526936974	WITHOUT_CLASSIFICATION	2.8847306302602687E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999717616387	WITHOUT_CLASSIFICATION	2.82383613092342E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999973815927635	WITHOUT_CLASSIFICATION	2.6184072364763897E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999989017628157	WITHOUT_CLASSIFICATION	1.098237184280209E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999969213319387	WITHOUT_CLASSIFICATION	3.0786680612973885E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999164208219	WITHOUT_CLASSIFICATION	8.357917814434881E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999625707963538	WITHOUT_CLASSIFICATION	3.742920364613242E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999884893971713	WITHOUT_CLASSIFICATION	1.151060282868596E-5	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999671003837	WITHOUT_CLASSIFICATION	3.289961623350174E-8	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999721203465579	WITHOUT_CLASSIFICATION	2.7879653442051497E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999980041178614	WITHOUT_CLASSIFICATION	1.9958821385126964E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999971113500081	WITHOUT_CLASSIFICATION	2.888649991809738E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999945296156	WITHOUT_CLASSIFICATION	5.470384394978561E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999996059392899	WITHOUT_CLASSIFICATION	3.940607100975031E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999253401813722	WITHOUT_CLASSIFICATION	7.465981862774122E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999998573344409	WITHOUT_CLASSIFICATION	1.426655591689948E-7	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.99999993253718	WITHOUT_CLASSIFICATION	6.74628199315771E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999999455459342	WITHOUT_CLASSIFICATION	5.445406579285465E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999952158415436	WITHOUT_CLASSIFICATION	4.784158456385578E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999229594265052	WITHOUT_CLASSIFICATION	7.704057349474859E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999995183722477	WITHOUT_CLASSIFICATION	4.816277523441382E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999253401813722	WITHOUT_CLASSIFICATION	7.465981862774122E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998029347833	WITHOUT_CLASSIFICATION	1.9706521680608985E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999998694314	WITHOUT_CLASSIFICATION	1.3056856250346664E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9996635146316741	WITHOUT_CLASSIFICATION	3.364853683258596E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999927539771488	WITHOUT_CLASSIFICATION	7.2460228512599025E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996834348197	WITHOUT_CLASSIFICATION	3.165651803846034E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999750149231597	WITHOUT_CLASSIFICATION	2.498507684028516E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997161812354	WITHOUT_CLASSIFICATION	2.838187645516892E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999992935347931	WITHOUT_CLASSIFICATION	7.064652068593714E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999872757177025	WITHOUT_CLASSIFICATION	1.272428229743342E-5	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999927539771488	WITHOUT_CLASSIFICATION	7.2460228512599025E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999990934254078	WITHOUT_CLASSIFICATION	9.065745921162844E-7	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999387612267	WITHOUT_CLASSIFICATION	6.123877329245115E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999999653353164	WITHOUT_CLASSIFICATION	3.4664683600472703E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999438634047655	WITHOUT_CLASSIFICATION	5.6136595234379946E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999984364897238	WITHOUT_CLASSIFICATION	1.5635102761223951E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999994822993024	WITHOUT_CLASSIFICATION	5.177006975997608E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999995912464872	WITHOUT_CLASSIFICATION	4.0875351285853596E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999982227179156	WITHOUT_CLASSIFICATION	1.7772820843956037E-5	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999989861959047	WITHOUT_CLASSIFICATION	1.0138040953244156E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999992521534655	WITHOUT_CLASSIFICATION	7.478465345293385E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999806397712396	WITHOUT_CLASSIFICATION	1.936022876033729E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999989525772677	WITHOUT_CLASSIFICATION	1.0474227322726042E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999045318315	WITHOUT_CLASSIFICATION	9.546816850003084E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999971503235797	WITHOUT_CLASSIFICATION	2.8496764202303057E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999857396941098	WITHOUT_CLASSIFICATION	1.426030589029915E-5	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999996396400529	WITHOUT_CLASSIFICATION	3.603599470649591E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331148565737	WITHOUT_CLASSIFICATION	6.688514342634327E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998606050089	WITHOUT_CLASSIFICATION	1.3939499103018236E-7	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998222550491	WITHOUT_CLASSIFICATION	1.7774495087308997E-7	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999978776203148	WITHOUT_CLASSIFICATION	2.1223796852326576E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999677612288	WITHOUT_CLASSIFICATION	3.2238771081745924E-8	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999981647215825	WITHOUT_CLASSIFICATION	1.8352784173960154E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999975217434771	WITHOUT_CLASSIFICATION	2.4782565228534726E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999996416935544	WITHOUT_CLASSIFICATION	3.5830644562252126E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999998527908612	WITHOUT_CLASSIFICATION	1.4720913886940785E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999913791921461	WITHOUT_CLASSIFICATION	8.620807853990416E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999964007225165	WITHOUT_CLASSIFICATION	3.5992774835255074E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999585870347	WITHOUT_CLASSIFICATION	4.1412965314428676E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999975821563108	WITHOUT_CLASSIFICATION	2.4178436891359064E-6	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999945601945004	WITHOUT_CLASSIFICATION	5.439805499597146E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999941328539247	WITHOUT_CLASSIFICATION	5.867146075299803E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999384595875617	WITHOUT_CLASSIFICATION	6.154041243832329E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999964023471895	WITHOUT_CLASSIFICATION	3.5976528105668078E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994540031664	WITHOUT_CLASSIFICATION	5.459968336685896E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993383622533	WITHOUT_CLASSIFICATION	6.6163774678335E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999999943125695	WITHOUT_CLASSIFICATION	5.6874305183669716E-8	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999989254064027	WITHOUT_CLASSIFICATION	1.0745935973245947E-6	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999996594345606	WITHOUT_CLASSIFICATION	3.405654393141799E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999959747751	WITHOUT_CLASSIFICATION	4.025224969786732E-9	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999999064819046	WITHOUT_CLASSIFICATION	9.351809539686409E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999991878343867	WITHOUT_CLASSIFICATION	8.121656132903737E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999822898852	WITHOUT_CLASSIFICATION	1.771011479454752E-7	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999998345625825	WITHOUT_CLASSIFICATION	1.6543741757857033E-7	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999990143961658	WITHOUT_CLASSIFICATION	9.856038342076458E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999965917911786	WITHOUT_CLASSIFICATION	3.408208821348899E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999999721920871	WITHOUT_CLASSIFICATION	2.7807912894508635E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999983392819262	WITHOUT_CLASSIFICATION	1.6607180739061538E-6	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999816053109	WITHOUT_CLASSIFICATION	1.83946891426264E-8	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999995701608778	WITHOUT_CLASSIFICATION	4.298391221433471E-7	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999992501611417	WITHOUT_CLASSIFICATION	7.498388582050769E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999479145922426	WITHOUT_CLASSIFICATION	5.20854077573875E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999998287126441	WITHOUT_CLASSIFICATION	1.7128735589820906E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999996046437216	WITHOUT_CLASSIFICATION	3.953562784054946E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998844062034	WITHOUT_CLASSIFICATION	1.1559379671783796E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999987612150706	WITHOUT_CLASSIFICATION	1.2387849293154084E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988071536196	WITHOUT_CLASSIFICATION	1.1928463804469799E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998555499807	WITHOUT_CLASSIFICATION	1.4445001933578648E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999921082150504	WITHOUT_CLASSIFICATION	7.891784949704947E-6	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999921224616	WITHOUT_CLASSIFICATION	7.877538476976074E-9	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999966185064836	WITHOUT_CLASSIFICATION	3.381493516367433E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999628275534245	WITHOUT_CLASSIFICATION	3.717244657546985E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999994874021445	WITHOUT_CLASSIFICATION	5.125978554910769E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994540031664	WITHOUT_CLASSIFICATION	5.459968336685896E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998008854241	WITHOUT_CLASSIFICATION	1.9911457583716272E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999914505432	WITHOUT_CLASSIFICATION	8.549456769515333E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999961285419051	WITHOUT_CLASSIFICATION	3.87145809486896E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999969930829772	WITHOUT_CLASSIFICATION	3.0069170228403144E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998809835094	WITHOUT_CLASSIFICATION	1.1901649052019158E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999999686292776	WITHOUT_CLASSIFICATION	3.1370722224676694E-8	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975893341497	WITHOUT_CLASSIFICATION	2.4106658501560646E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999868280089	WITHOUT_CLASSIFICATION	1.3171991095480866E-7	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998533984645	WITHOUT_CLASSIFICATION	1.466015354121173E-7	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999991017066767	WITHOUT_CLASSIFICATION	8.982933233721762E-7	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999385338825	WITHOUT_CLASSIFICATION	6.146611758510192E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997184796971282	WITHOUT_CLASSIFICATION	2.8152030287175854E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999990982024359	WITHOUT_CLASSIFICATION	9.017975640896089E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999965930773651	WITHOUT_CLASSIFICATION	3.406922634897572E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999975171028618	WITHOUT_CLASSIFICATION	2.4828971382007154E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999868013904	WITHOUT_CLASSIFICATION	1.3198609760960241E-8	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999950266754	WITHOUT_CLASSIFICATION	4.973324538321296E-9	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999997483233068	WITHOUT_CLASSIFICATION	2.516766932079988E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999989044089608	WITHOUT_CLASSIFICATION	1.095591039325714E-6	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999896390231	WITHOUT_CLASSIFICATION	1.0360976882286003E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999839074794367	WITHOUT_CLASSIFICATION	1.6092520563371998E-5	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999839074794367	WITHOUT_CLASSIFICATION	1.6092520563371998E-5	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999979812190264	WITHOUT_CLASSIFICATION	2.018780973630704E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999999935549519	WITHOUT_CLASSIFICATION	6.445048091519547E-8	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999152637088	WITHOUT_CLASSIFICATION	8.473629116378128E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999985323081376	WITHOUT_CLASSIFICATION	1.4676918624017376E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999997755345853	WITHOUT_CLASSIFICATION	2.2446541459779838E-7	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999419830075	WITHOUT_CLASSIFICATION	5.8016992532016425E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999913423532752	WITHOUT_CLASSIFICATION	8.65764672469701E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999993591409049	WITHOUT_CLASSIFICATION	6.408590951780434E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999993591409049	WITHOUT_CLASSIFICATION	6.408590951780434E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999861719860655	WITHOUT_CLASSIFICATION	1.382801393439798E-5	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999991997486598	WITHOUT_CLASSIFICATION	8.002513400923143E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999996064448466	WITHOUT_CLASSIFICATION	3.93555153429853E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995313914241	WITHOUT_CLASSIFICATION	4.6860857583773123E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995313914241	WITHOUT_CLASSIFICATION	4.6860857583773123E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995313914241	WITHOUT_CLASSIFICATION	4.6860857583773123E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999999309055796	WITHOUT_CLASSIFICATION	6.909442038843734E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998221291215	WITHOUT_CLASSIFICATION	1.7787087838517929E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999984468053663	WITHOUT_CLASSIFICATION	1.5531946336451216E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999995291640609	WITHOUT_CLASSIFICATION	4.7083593910457816E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999998102425518	WITHOUT_CLASSIFICATION	1.8975744810467737E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999701702407	WITHOUT_CLASSIFICATION	2.9829759362186136E-8	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999722805535	WITHOUT_CLASSIFICATION	2.7719446541951484E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999942333322812	WITHOUT_CLASSIFICATION	5.76666771875357E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999433890337	WITHOUT_CLASSIFICATION	5.661096629301609E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999993040954515	WITHOUT_CLASSIFICATION	6.959045486353272E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999921579183613	WITHOUT_CLASSIFICATION	7.842081638736916E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999993566706434	WITHOUT_CLASSIFICATION	6.433293566568598E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999999963117793	WITHOUT_CLASSIFICATION	3.6882206855273425E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999790127315	WITHOUT_CLASSIFICATION	2.0987268432224552E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999700908283	WITHOUT_CLASSIFICATION	2.9909171710293955E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999989080108974	WITHOUT_CLASSIFICATION	1.0919891025531571E-6	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999935956248774	WITHOUT_CLASSIFICATION	6.404375122624544E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999935956248774	WITHOUT_CLASSIFICATION	6.404375122624544E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999949817414667	WITHOUT_CLASSIFICATION	5.018258533250232E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999949817414667	WITHOUT_CLASSIFICATION	5.018258533250232E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999949616425654	WITHOUT_CLASSIFICATION	5.0383574346195846E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999950231958784	WITHOUT_CLASSIFICATION	4.9768041215466805E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999950231958784	WITHOUT_CLASSIFICATION	4.9768041215466805E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999969278804066	WITHOUT_CLASSIFICATION	3.072119593263243E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999920784622436	WITHOUT_CLASSIFICATION	7.921537756432495E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999764981485	WITHOUT_CLASSIFICATION	2.350185153941548E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999839074794367	WITHOUT_CLASSIFICATION	1.6092520563371998E-5	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999493580225	WITHOUT_CLASSIFICATION	5.064197744364751E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999920784622436	WITHOUT_CLASSIFICATION	7.921537756432495E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999979162856337	WITHOUT_CLASSIFICATION	2.083714366161794E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999988190169371	WITHOUT_CLASSIFICATION	1.180983062894175E-6	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999996675224656	WITHOUT_CLASSIFICATION	3.324775344035749E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999977150093585	WITHOUT_CLASSIFICATION	2.2849906414992467E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999753104895	WITHOUT_CLASSIFICATION	2.4689510629952605E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999850838089769	WITHOUT_CLASSIFICATION	1.4916191023009648E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999993230831927	WITHOUT_CLASSIFICATION	6.769168071690523E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999997098690334	WITHOUT_CLASSIFICATION	2.901309666176811E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999671958016	WITHOUT_CLASSIFICATION	3.280419829810465E-8	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999965445937156	WITHOUT_CLASSIFICATION	3.455406284509661E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999908819475	WITHOUT_CLASSIFICATION	9.118052490684457E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999938767138348	WITHOUT_CLASSIFICATION	6.123286165294575E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991507342529	WITHOUT_CLASSIFICATION	8.49265747138128E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999976093136554	WITHOUT_CLASSIFICATION	2.390686344555396E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999996314106929	WITHOUT_CLASSIFICATION	3.685893070926241E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999998217532033	WITHOUT_CLASSIFICATION	1.7824679676637047E-7	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999898194725	WITHOUT_CLASSIFICATION	1.0180527571672717E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999937888413167	WITHOUT_CLASSIFICATION	6.2111586832046034E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999937888413167	WITHOUT_CLASSIFICATION	6.2111586832046034E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999990268528034	WITHOUT_CLASSIFICATION	9.73147196588159E-7	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999996238499164	WITHOUT_CLASSIFICATION	3.7615008356908864E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994935684784	WITHOUT_CLASSIFICATION	5.064315216952516E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999987128477357	WITHOUT_CLASSIFICATION	1.2871522643727904E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999980398986047	WITHOUT_CLASSIFICATION	1.960101395329456E-6	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999621182015	WITHOUT_CLASSIFICATION	3.788179845382585E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999762252006	WITHOUT_CLASSIFICATION	2.3774799260928878E-8	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999992529877132	WITHOUT_CLASSIFICATION	7.470122867147576E-7	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999995740684688	WITHOUT_CLASSIFICATION	4.259315312446286E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999972650295	WITHOUT_CLASSIFICATION	2.73497049047717E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997355073112	WITHOUT_CLASSIFICATION	2.6449268878164033E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997184796971282	WITHOUT_CLASSIFICATION	2.8152030287175854E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999772682419	WITHOUT_CLASSIFICATION	2.273175820227715E-8	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996011985476	WITHOUT_CLASSIFICATION	3.9880145253207817E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999992875460307	WITHOUT_CLASSIFICATION	7.124539691455042E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999997469610747	WITHOUT_CLASSIFICATION	2.530389252746251E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999127580654	WITHOUT_CLASSIFICATION	8.724193454417971E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999127580654	WITHOUT_CLASSIFICATION	8.724193454417971E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999964650368809	WITHOUT_CLASSIFICATION	3.5349631191004837E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997489531022	WITHOUT_CLASSIFICATION	2.51046897825618E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999993752266603	WITHOUT_CLASSIFICATION	6.24773339679846E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999989340170778	WITHOUT_CLASSIFICATION	1.0659829221227443E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999993906010486	WITHOUT_CLASSIFICATION	6.09398951418825E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999926713185027	WITHOUT_CLASSIFICATION	7.328681497311928E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999991662312796	WITHOUT_CLASSIFICATION	8.337687203936569E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999855516377	WITHOUT_CLASSIFICATION	1.4448362328889794E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999997784943451	WITHOUT_CLASSIFICATION	2.2150565496843507E-7	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996287527089	WITHOUT_CLASSIFICATION	3.712472910855263E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999997165623266	WITHOUT_CLASSIFICATION	2.834376734161435E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999855516377	WITHOUT_CLASSIFICATION	1.4448362328889794E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999998939399469	WITHOUT_CLASSIFICATION	1.0606005303688452E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998683472986	WITHOUT_CLASSIFICATION	1.3165270142883642E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995855804773	WITHOUT_CLASSIFICATION	4.144195227273669E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999992677806738	WITHOUT_CLASSIFICATION	7.322193262360741E-7	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999976730938	WITHOUT_CLASSIFICATION	2.326906307189983E-9	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999808505128	WITHOUT_CLASSIFICATION	1.9149487269658833E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996822982472	WITHOUT_CLASSIFICATION	3.1770175271752086E-7	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997752357778	WITHOUT_CLASSIFICATION	2.2476422225944587E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999231757206	WITHOUT_CLASSIFICATION	7.682427942579215E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999934459768525	WITHOUT_CLASSIFICATION	6.554023147493479E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999984900684861	WITHOUT_CLASSIFICATION	1.509931513956329E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998459515469	WITHOUT_CLASSIFICATION	1.5404845314665293E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999276562151	WITHOUT_CLASSIFICATION	7.234378490838481E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999999582173205	WITHOUT_CLASSIFICATION	4.1782679504524564E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999967784857556	WITHOUT_CLASSIFICATION	3.2215142443807515E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999738874490997	WITHOUT_CLASSIFICATION	2.6112550900322376E-5	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999323053816602	WITHOUT_CLASSIFICATION	6.769461833970989E-5	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999947885642481	WITHOUT_CLASSIFICATION	5.2114357519766395E-6	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999922661039783	WITHOUT_CLASSIFICATION	7.73389602173335E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999997910945733	WITHOUT_CLASSIFICATION	2.0890542676111605E-7	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998259549804	WITHOUT_CLASSIFICATION	1.740450195736544E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999008525665	WITHOUT_CLASSIFICATION	9.914743349245078E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999718367249789	WITHOUT_CLASSIFICATION	2.816327502100562E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999876946115615	WITHOUT_CLASSIFICATION	1.230538843854434E-5	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999995342293142	WITHOUT_CLASSIFICATION	4.657706857111582E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951639272905	WITHOUT_CLASSIFICATION	4.836072709508949E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999198959567	WITHOUT_CLASSIFICATION	8.010404325261684E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999588434115	WITHOUT_CLASSIFICATION	4.115658849253366E-8	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999880237923	WITHOUT_CLASSIFICATION	1.1976207756720826E-8	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999964847804134	WITHOUT_CLASSIFICATION	3.515219586723499E-6	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999908032527	WITHOUT_CLASSIFICATION	9.196747148858702E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999280304761	WITHOUT_CLASSIFICATION	7.19695238350807E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999978011209543	WITHOUT_CLASSIFICATION	2.1988790458127755E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999326906089	WITHOUT_CLASSIFICATION	6.730939106593967E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998305730886	WITHOUT_CLASSIFICATION	1.6942691146300533E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999968184063993	WITHOUT_CLASSIFICATION	3.1815936007209413E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999997213258	WITHOUT_CLASSIFICATION	2.786741829681784E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.99999998609195	WITHOUT_CLASSIFICATION	1.3908050043792044E-8	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999104558441	WITHOUT_CLASSIFICATION	8.954415589834693E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999286640143	WITHOUT_CLASSIFICATION	7.133598568879128E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999956579831452	WITHOUT_CLASSIFICATION	4.3420168548806945E-6	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999850253821	WITHOUT_CLASSIFICATION	1.4974617902309855E-7	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999370953332	WITHOUT_CLASSIFICATION	6.290466686884565E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999996675123737	WITHOUT_CLASSIFICATION	3.324876262992812E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999998422626624	WITHOUT_CLASSIFICATION	1.5773733758602354E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999995948245917	WITHOUT_CLASSIFICATION	4.0517540835483057E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999992987171497	WITHOUT_CLASSIFICATION	7.012828502765046E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999969737684168	WITHOUT_CLASSIFICATION	3.0262315832658864E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999990947058022	WITHOUT_CLASSIFICATION	9.052941978406431E-7	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999999584940775	WITHOUT_CLASSIFICATION	4.1505922499922905E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974501548751	WITHOUT_CLASSIFICATION	2.5498451249118487E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997550140082	WITHOUT_CLASSIFICATION	2.449859918151384E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998117228097	WITHOUT_CLASSIFICATION	1.882771901746695E-7	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997007747189	WITHOUT_CLASSIFICATION	2.9922528107536295E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999521032831	WITHOUT_CLASSIFICATION	4.789671698665978E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999997543026272	WITHOUT_CLASSIFICATION	2.456973727509933E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994885894431	WITHOUT_CLASSIFICATION	5.114105569642212E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998774016389	WITHOUT_CLASSIFICATION	1.2259836111608942E-7	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999986398151569	WITHOUT_CLASSIFICATION	1.3601848431128319E-6	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999989203114796	WITHOUT_CLASSIFICATION	1.0796885204723743E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999997529195116	WITHOUT_CLASSIFICATION	2.4708048837370806E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993679363899	WITHOUT_CLASSIFICATION	6.320636102408861E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999175300227	WITHOUT_CLASSIFICATION	8.246997735258402E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999994620625923	WITHOUT_CLASSIFICATION	5.379374077029894E-7	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999981045939024	WITHOUT_CLASSIFICATION	1.8954060976267577E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999993576390296	WITHOUT_CLASSIFICATION	6.423609704397921E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974501548751	WITHOUT_CLASSIFICATION	2.5498451249118487E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999996170903418	WITHOUT_CLASSIFICATION	3.829096581469636E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999999982689657	WITHOUT_CLASSIFICATION	1.731034303988816E-8	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999976644872	WITHOUT_CLASSIFICATION	2.3355127989132194E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999999929415029	WITHOUT_CLASSIFICATION	7.058497091708984E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999993225028796	WITHOUT_CLASSIFICATION	6.774971204436622E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999982084583325	WITHOUT_CLASSIFICATION	1.7915416675051005E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999997784943451	WITHOUT_CLASSIFICATION	2.2150565496843507E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999914922543689	WITHOUT_CLASSIFICATION	8.507745631092739E-6	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998305730886	WITHOUT_CLASSIFICATION	1.6942691146300533E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999995041337437	WITHOUT_CLASSIFICATION	4.958662562607915E-7	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999216857213	WITHOUT_CLASSIFICATION	7.831427867759308E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999971626684768	WITHOUT_CLASSIFICATION	2.8373315231442324E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999969012561157	WITHOUT_CLASSIFICATION	3.0987438841430008E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997220875462	WITHOUT_CLASSIFICATION	2.779124538144363E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996620812422	WITHOUT_CLASSIFICATION	3.379187577756575E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986186833615	WITHOUT_CLASSIFICATION	1.3813166384686822E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996523655755	WITHOUT_CLASSIFICATION	3.476344244801398E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999803120216	WITHOUT_CLASSIFICATION	1.968797841178442E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999333402673	WITHOUT_CLASSIFICATION	6.66597327392209E-8	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999971564071645	WITHOUT_CLASSIFICATION	2.843592835444385E-6	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999998559290961	WITHOUT_CLASSIFICATION	1.4407090383750392E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999275392085	WITHOUT_CLASSIFICATION	7.246079151536401E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999275392085	WITHOUT_CLASSIFICATION	7.246079151536401E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999974309078	WITHOUT_CLASSIFICATION	2.5690922005720553E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999942202699299	WITHOUT_CLASSIFICATION	5.779730070070733E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999996825046888	WITHOUT_CLASSIFICATION	3.174953112401959E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999994904687541	WITHOUT_CLASSIFICATION	5.095312459405537E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999520447974	WITHOUT_CLASSIFICATION	4.795520267859378E-8	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997451428807	WITHOUT_CLASSIFICATION	2.54857119308762E-7	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999870247817	WITHOUT_CLASSIFICATION	1.2975218298810057E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999994577412641	WITHOUT_CLASSIFICATION	5.422587358237946E-7	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999200796171	WITHOUT_CLASSIFICATION	7.992038288262698E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999973229387432	WITHOUT_CLASSIFICATION	2.677061256825379E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999994666463585	WITHOUT_CLASSIFICATION	5.333536413660629E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999989656648353	WITHOUT_CLASSIFICATION	1.034335164721571E-6	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998763618817	WITHOUT_CLASSIFICATION	1.236381183935187E-7	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999944146253	WITHOUT_CLASSIFICATION	5.585374722512297E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999930812675	WITHOUT_CLASSIFICATION	6.918732494643972E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999997956227669	WITHOUT_CLASSIFICATION	2.0437723309749942E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999860140860372	WITHOUT_CLASSIFICATION	1.3985913962829873E-5	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999998816977675	WITHOUT_CLASSIFICATION	1.1830223251832834E-7	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999948747783	WITHOUT_CLASSIFICATION	5.1252217345924764E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999997001983041	WITHOUT_CLASSIFICATION	2.998016958489058E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999994435170797	WITHOUT_CLASSIFICATION	5.564829202215169E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999985490419852	WITHOUT_CLASSIFICATION	1.4509580149161514E-6	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998735012502	WITHOUT_CLASSIFICATION	1.2649874972879796E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999358205743694	WITHOUT_CLASSIFICATION	6.417942563069212E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999996920322647	WITHOUT_CLASSIFICATION	3.0796773534624215E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244994703	WITHOUT_CLASSIFICATION	5.755005297283813E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995749737011	WITHOUT_CLASSIFICATION	4.2502629899020153E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999998369765281	WITHOUT_CLASSIFICATION	1.6302347199920774E-7	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999987707865554	WITHOUT_CLASSIFICATION	1.2292134445955957E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991595707161	WITHOUT_CLASSIFICATION	8.404292839352289E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9993889407149804	WITHOUT_CLASSIFICATION	6.110592850196101E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999817997140997	WITHOUT_CLASSIFICATION	1.820028590025762E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998912075837	WITHOUT_CLASSIFICATION	1.0879241634096053E-7	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999994167226	WITHOUT_CLASSIFICATION	5.832773441374672E-10	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999985166423492	WITHOUT_CLASSIFICATION	1.483357650769627E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997493573687	WITHOUT_CLASSIFICATION	2.5064263132879425E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999986905329114	WITHOUT_CLASSIFICATION	1.309467088585013E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999223780195	WITHOUT_CLASSIFICATION	7.762198054225134E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999993129649113	WITHOUT_CLASSIFICATION	6.870350887196118E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989134217998	WITHOUT_CLASSIFICATION	1.0865782001426977E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991285406816	WITHOUT_CLASSIFICATION	8.714593183446014E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999927919114	WITHOUT_CLASSIFICATION	7.208088562591496E-9	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999312071275129	WITHOUT_CLASSIFICATION	6.879287248713194E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999735683189124	WITHOUT_CLASSIFICATION	2.6431681087656554E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999905289661724	WITHOUT_CLASSIFICATION	9.471033827546419E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991169528673	WITHOUT_CLASSIFICATION	8.83047132719024E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9953111365190711	WITHOUT_CLASSIFICATION	0.00468886348092892	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997472626709	WITHOUT_CLASSIFICATION	2.5273732908518946E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999570553095	WITHOUT_CLASSIFICATION	4.2944690438473036E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999984820466431	WITHOUT_CLASSIFICATION	1.517953356863211E-6	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993677642725	WITHOUT_CLASSIFICATION	6.322357276611398E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999968457643	WITHOUT_CLASSIFICATION	3.1542356893364875E-8	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999965592336216	WITHOUT_CLASSIFICATION	3.4407663784065343E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999987256292174	WITHOUT_CLASSIFICATION	1.2743707825375715E-6	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999995281993936	WITHOUT_CLASSIFICATION	4.7180060632750153E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994347434621	WITHOUT_CLASSIFICATION	5.65256537954203E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999965920580922	WITHOUT_CLASSIFICATION	3.4079419077189765E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999995850208648	WITHOUT_CLASSIFICATION	4.1497913516564165E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.999999851204983	WITHOUT_CLASSIFICATION	1.4879501692655347E-7	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999997306881687	WITHOUT_CLASSIFICATION	2.6931183132977464E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999971147276203	WITHOUT_CLASSIFICATION	2.8852723795575713E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997617111013	WITHOUT_CLASSIFICATION	2.382888987988912E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999991469171149	WITHOUT_CLASSIFICATION	8.5308288517454E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999999444815872	WITHOUT_CLASSIFICATION	5.551841280312005E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999997194430675	WITHOUT_CLASSIFICATION	2.805569325682847E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999997800564422	WITHOUT_CLASSIFICATION	2.1994355775207577E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999917278556326	WITHOUT_CLASSIFICATION	8.272144367434058E-6	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999996813228383	WITHOUT_CLASSIFICATION	3.186771615762611E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996692475893	WITHOUT_CLASSIFICATION	3.3075241063499315E-7	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999995583798785	WITHOUT_CLASSIFICATION	4.416201215344229E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996692475893	WITHOUT_CLASSIFICATION	3.3075241063499315E-7	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999735304771	WITHOUT_CLASSIFICATION	2.646952293020411E-8	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999414551727	WITHOUT_CLASSIFICATION	5.854482722282756E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998127438241	WITHOUT_CLASSIFICATION	1.872561759005994E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999120823017	WITHOUT_CLASSIFICATION	8.791769837659984E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999927383337	WITHOUT_CLASSIFICATION	7.261666307542064E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999997401456634	WITHOUT_CLASSIFICATION	2.598543366719573E-7	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999998274170476	WITHOUT_CLASSIFICATION	1.7258295239711294E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998521628641147	WITHOUT_CLASSIFICATION	1.4783713588538836E-4	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999812785937	WITHOUT_CLASSIFICATION	1.8721406304636297E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999897299852	WITHOUT_CLASSIFICATION	1.0270014864308318E-8	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999983718013961	WITHOUT_CLASSIFICATION	1.6281986039287268E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999331362621	WITHOUT_CLASSIFICATION	6.686373787787438E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996391449538	WITHOUT_CLASSIFICATION	3.608550461754642E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999978157921003	WITHOUT_CLASSIFICATION	2.1842078996238124E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999347103655	WITHOUT_CLASSIFICATION	6.528963450618973E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999830114221	WITHOUT_CLASSIFICATION	1.6988577863164456E-8	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999568636975	WITHOUT_CLASSIFICATION	4.3136302663364997E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997481346824	WITHOUT_CLASSIFICATION	2.5186531759198365E-7	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999821438542	WITHOUT_CLASSIFICATION	1.7856145765808315E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.99998936856094	WITHOUT_CLASSIFICATION	1.0631439060091756E-5	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999707142573	WITHOUT_CLASSIFICATION	2.9285742744450348E-8	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999945119703232	WITHOUT_CLASSIFICATION	5.488029676849466E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999225027108727	WITHOUT_CLASSIFICATION	7.749728912736386E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999996131377955	WITHOUT_CLASSIFICATION	3.8686220451578045E-7	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999998124114885	WITHOUT_CLASSIFICATION	1.8758851149019697E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999980549242854	WITHOUT_CLASSIFICATION	1.9450757145592463E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999849411332621	WITHOUT_CLASSIFICATION	1.505886673789926E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999923952456421	WITHOUT_CLASSIFICATION	7.604754358002158E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996177389265	WITHOUT_CLASSIFICATION	3.8226107341377534E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999996634091622	WITHOUT_CLASSIFICATION	3.365908378144695E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999883813866832	WITHOUT_CLASSIFICATION	1.1618613316887018E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999996686709189	WITHOUT_CLASSIFICATION	3.3132908096766604E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999855688749	WITHOUT_CLASSIFICATION	1.4431125167278362E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999983902760093	WITHOUT_CLASSIFICATION	1.6097239907128028E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999984815273498	WITHOUT_CLASSIFICATION	1.518472650130662E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999345260221936	WITHOUT_CLASSIFICATION	6.54739778064349E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999846356762111	WITHOUT_CLASSIFICATION	1.5364323788942226E-5	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993198465902	WITHOUT_CLASSIFICATION	6.801534098101914E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999526748293005	WITHOUT_CLASSIFICATION	4.7325170699578894E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999956256102718	WITHOUT_CLASSIFICATION	4.374389728242146E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999963831025416	WITHOUT_CLASSIFICATION	3.6168974583755337E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999987238759761	WITHOUT_CLASSIFICATION	1.2761240238983949E-6	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998005208098736	WITHOUT_CLASSIFICATION	1.9947919012641943E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999980549242854	WITHOUT_CLASSIFICATION	1.9450757145592463E-6	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999958613533364	WITHOUT_CLASSIFICATION	4.138646663593735E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999995450594074	WITHOUT_CLASSIFICATION	4.549405926603537E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999680656186402	WITHOUT_CLASSIFICATION	3.193438135985334E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999742716030758	WITHOUT_CLASSIFICATION	2.5728396924164833E-5	TEST
//special case	WITHOUT_CLASSIFICATION	0.999998338507916	WITHOUT_CLASSIFICATION	1.6614920839870906E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999996701126531	WITHOUT_CLASSIFICATION	3.2988734696976564E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999997757270465	WITHOUT_CLASSIFICATION	2.2427295360864574E-7	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999889849842285	WITHOUT_CLASSIFICATION	1.1015015771524622E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999990625754327	WITHOUT_CLASSIFICATION	9.374245672865916E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999993309528861	WITHOUT_CLASSIFICATION	6.690471139490813E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999915758407615	WITHOUT_CLASSIFICATION	8.42415923850625E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999999435913946	WITHOUT_CLASSIFICATION	5.640860539314391E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999917851798527	WITHOUT_CLASSIFICATION	8.214820147334789E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999796192867499	WITHOUT_CLASSIFICATION	2.038071325004312E-5	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999993555094431	WITHOUT_CLASSIFICATION	6.444905568854856E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999899400221	WITHOUT_CLASSIFICATION	1.0059977797320434E-8	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999984997510265	WITHOUT_CLASSIFICATION	1.5002489735166934E-6	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999982609944107	WITHOUT_CLASSIFICATION	1.7390055892940696E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999683454149	WITHOUT_CLASSIFICATION	3.1654585064922016E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999958613533364	WITHOUT_CLASSIFICATION	4.138646663593735E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999884357218645	WITHOUT_CLASSIFICATION	1.1564278135569478E-5	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999988083614801	WITHOUT_CLASSIFICATION	1.1916385197906928E-6	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999997154361157	WITHOUT_CLASSIFICATION	2.845638843030007E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999987806038482	WITHOUT_CLASSIFICATION	1.2193961519104002E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997840768642	WITHOUT_CLASSIFICATION	2.1592313580158125E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999905367925905	WITHOUT_CLASSIFICATION	9.463207409458305E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999905367925905	WITHOUT_CLASSIFICATION	9.463207409458305E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999995758056345	WITHOUT_CLASSIFICATION	4.2419436553103396E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999905367925905	WITHOUT_CLASSIFICATION	9.463207409458305E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999905367925905	WITHOUT_CLASSIFICATION	9.463207409458305E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999626581906927	WITHOUT_CLASSIFICATION	3.734180930727743E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999777341293518	WITHOUT_CLASSIFICATION	2.2265870648276633E-5	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999981830511904	WITHOUT_CLASSIFICATION	1.8169488096126317E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999978015625037	WITHOUT_CLASSIFICATION	2.198437496280639E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999830448382	WITHOUT_CLASSIFICATION	1.6955161789558083E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999966556387788	WITHOUT_CLASSIFICATION	3.344361221211422E-6	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999949809939445	WITHOUT_CLASSIFICATION	5.019006055619666E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999983847987512	WITHOUT_CLASSIFICATION	1.6152012487512692E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999958884674803	WITHOUT_CLASSIFICATION	4.1115325195681925E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999309463114335	WITHOUT_CLASSIFICATION	6.905368856649438E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999911435249133	WITHOUT_CLASSIFICATION	8.856475086704382E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999986720592665	WITHOUT_CLASSIFICATION	1.3279407334189134E-6	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999911466863488	WITHOUT_CLASSIFICATION	8.853313651275145E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999893097520511	WITHOUT_CLASSIFICATION	1.0690247948879267E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999993148071239	WITHOUT_CLASSIFICATION	6.851928761007315E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999070224598596	WITHOUT_CLASSIFICATION	9.297754014046002E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982659239203	WITHOUT_CLASSIFICATION	1.734076079738263E-6	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999923837040812	WITHOUT_CLASSIFICATION	7.616295918803925E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999729934089154	WITHOUT_CLASSIFICATION	2.700659108459104E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999868749403216	WITHOUT_CLASSIFICATION	1.3125059678584544E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999988899175997	WITHOUT_CLASSIFICATION	1.1100824003046698E-6	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999983518339719	WITHOUT_CLASSIFICATION	1.6481660281601586E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982659239203	WITHOUT_CLASSIFICATION	1.734076079738263E-6	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999849411332621	WITHOUT_CLASSIFICATION	1.505886673789926E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999879385273208	WITHOUT_CLASSIFICATION	1.2061472679316205E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998724386905	WITHOUT_CLASSIFICATION	1.2756130952022084E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999274368823	WITHOUT_CLASSIFICATION	7.25631177780063E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999863494179145	WITHOUT_CLASSIFICATION	1.3650582085437994E-5	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999998394751716	WITHOUT_CLASSIFICATION	1.605248283657108E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999801906613872	WITHOUT_CLASSIFICATION	1.9809338612835602E-5	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999985893307998	WITHOUT_CLASSIFICATION	1.41066920021789E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999990866366907	WITHOUT_CLASSIFICATION	9.133633092366898E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999995442172745	WITHOUT_CLASSIFICATION	4.5578272547352356E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999930500460578	WITHOUT_CLASSIFICATION	6.9499539422494634E-6	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997002666605	WITHOUT_CLASSIFICATION	2.997333394728242E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999990564513397	WITHOUT_CLASSIFICATION	9.435486602785287E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997724062764	WITHOUT_CLASSIFICATION	2.275937236111778E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999632415983035	WITHOUT_CLASSIFICATION	3.675840169636895E-5	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999824331159	WITHOUT_CLASSIFICATION	1.7566884103161966E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999972882513081	WITHOUT_CLASSIFICATION	2.711748691854063E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999994893219535	WITHOUT_CLASSIFICATION	5.106780464873303E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999974607324303	WITHOUT_CLASSIFICATION	2.5392675696788914E-6	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999907062160696	WITHOUT_CLASSIFICATION	9.293783930388571E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999960210302006	WITHOUT_CLASSIFICATION	3.978969799430625E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999876575276386	WITHOUT_CLASSIFICATION	1.2342472361438829E-5	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999991821266	WITHOUT_CLASSIFICATION	8.178735162425965E-10	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999990866366907	WITHOUT_CLASSIFICATION	9.133633092366898E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999949115144371	WITHOUT_CLASSIFICATION	5.088485562895564E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999969127161902	WITHOUT_CLASSIFICATION	3.087283809824587E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999998334878129	WITHOUT_CLASSIFICATION	1.6651218710907814E-6	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999959636243919	WITHOUT_CLASSIFICATION	4.036375608018937E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957185231263	WITHOUT_CLASSIFICATION	4.281476873682155E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999579713533475	WITHOUT_CLASSIFICATION	4.202864665254077E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999916005115348	WITHOUT_CLASSIFICATION	8.39948846510356E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999997425315439	WITHOUT_CLASSIFICATION	2.5746845614218427E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999941008177787	WITHOUT_CLASSIFICATION	5.899182221343278E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999679893966602	WITHOUT_CLASSIFICATION	3.2010603339775716E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989255372373	WITHOUT_CLASSIFICATION	1.0744627625620213E-6	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997861545362	WITHOUT_CLASSIFICATION	2.1384546385647425E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999996334130526	WITHOUT_CLASSIFICATION	3.6658694740205778E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999896413293303	WITHOUT_CLASSIFICATION	1.0358670669704224E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999907638781034	WITHOUT_CLASSIFICATION	9.236121896550031E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999979297500803	WITHOUT_CLASSIFICATION	2.070249919675033E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989255372373	WITHOUT_CLASSIFICATION	1.0744627625620213E-6	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999980851992248	WITHOUT_CLASSIFICATION	1.914800775123281E-6	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999953097073029	WITHOUT_CLASSIFICATION	4.690292697073365E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999991215775724	WITHOUT_CLASSIFICATION	8.784224275403689E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999992835852198	WITHOUT_CLASSIFICATION	7.164147800905843E-7	TEST
// the default...	WITHOUT_CLASSIFICATION	0.999999732651874	WITHOUT_CLASSIFICATION	2.673481259600478E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999325743166	WITHOUT_CLASSIFICATION	6.742568345824849E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999891241312	WITHOUT_CLASSIFICATION	1.087586881496506E-7	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995215860719	WITHOUT_CLASSIFICATION	4.784139281004979E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993661331645	WITHOUT_CLASSIFICATION	6.338668355376263E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994186885452	WITHOUT_CLASSIFICATION	5.813114546380727E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999362503615	WITHOUT_CLASSIFICATION	6.374963837963745E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997992588451	WITHOUT_CLASSIFICATION	2.0074115486282528E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998287469988	WITHOUT_CLASSIFICATION	1.7125300132121526E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998287469988	WITHOUT_CLASSIFICATION	1.7125300132121526E-7	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998683433710351	WITHOUT_CLASSIFICATION	1.3165662896480335E-4	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998199349148	WITHOUT_CLASSIFICATION	1.8006508518652355E-7	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999990621099157	WITHOUT_CLASSIFICATION	9.378900842889827E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999989078009595	WITHOUT_CLASSIFICATION	1.0921990404805046E-6	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999983495074233	WITHOUT_CLASSIFICATION	1.6504925767971955E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998326246531	WITHOUT_CLASSIFICATION	1.6737534690141663E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942234335338	WITHOUT_CLASSIFICATION	5.776566466176693E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979599489697	WITHOUT_CLASSIFICATION	2.0400510303023677E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999980182919134	WITHOUT_CLASSIFICATION	1.9817080865498988E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985693227753	WITHOUT_CLASSIFICATION	1.4306772247962458E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998326246531	WITHOUT_CLASSIFICATION	1.6737534690141663E-6	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942234335338	WITHOUT_CLASSIFICATION	5.776566466176693E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979599489697	WITHOUT_CLASSIFICATION	2.0400510303023677E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999962755156865	WITHOUT_CLASSIFICATION	3.724484313571562E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999747505676995	WITHOUT_CLASSIFICATION	2.5249432300590583E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999242510583	WITHOUT_CLASSIFICATION	7.57489415720511E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999986952892741	WITHOUT_CLASSIFICATION	1.3047107259470807E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999995712794182	WITHOUT_CLASSIFICATION	4.2872058177358935E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999994280661147	WITHOUT_CLASSIFICATION	5.719338852984693E-7	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999979188962341	WITHOUT_CLASSIFICATION	2.081103765925136E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999787659971259	WITHOUT_CLASSIFICATION	2.1234002874142873E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9997793850973473	WITHOUT_CLASSIFICATION	2.2061490265270323E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999976875427165	WITHOUT_CLASSIFICATION	2.3124572836236814E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999986782423442	WITHOUT_CLASSIFICATION	1.321757655729048E-6	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999831736389853	WITHOUT_CLASSIFICATION	1.682636101477381E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999593243804675	WITHOUT_CLASSIFICATION	4.067561953250712E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999996911096853	WITHOUT_CLASSIFICATION	3.0889031466544447E-7	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999329800264	WITHOUT_CLASSIFICATION	6.701997352431602E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999996650720232	WITHOUT_CLASSIFICATION	3.349279767978394E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9986746734488323	WITHOUT_CLASSIFICATION	0.0013253265511675683	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999949709267318	WITHOUT_CLASSIFICATION	5.029073268215666E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994493277966	WITHOUT_CLASSIFICATION	5.506722033902931E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999928271693622	WITHOUT_CLASSIFICATION	7.1728306377725316E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999999116082193	WITHOUT_CLASSIFICATION	8.83917806968421E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999842499335	WITHOUT_CLASSIFICATION	1.5750066475249133E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999997615564048	WITHOUT_CLASSIFICATION	2.3844359519162106E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998567683077	WITHOUT_CLASSIFICATION	1.4323169219967835E-7	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999296740325	WITHOUT_CLASSIFICATION	7.032596749336038E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999902896574341	WITHOUT_CLASSIFICATION	9.710342565929308E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995355938146	WITHOUT_CLASSIFICATION	4.644061854003683E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884912568563	WITHOUT_CLASSIFICATION	1.1508743143635878E-5	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999393391287	WITHOUT_CLASSIFICATION	6.066087131206928E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989300353564	WITHOUT_CLASSIFICATION	1.0699646435904138E-5	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914691963344	WITHOUT_CLASSIFICATION	8.53080366548119E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999976313429865	WITHOUT_CLASSIFICATION	2.3686570135715085E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999976313429865	WITHOUT_CLASSIFICATION	2.3686570135715085E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999984676425118	WITHOUT_CLASSIFICATION	1.532357488204663E-5	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999964185042793	WITHOUT_CLASSIFICATION	3.5814957206637114E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999998968818282	WITHOUT_CLASSIFICATION	1.0311817182297526E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997184796971282	WITHOUT_CLASSIFICATION	2.8152030287175854E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999986979003348	WITHOUT_CLASSIFICATION	1.3020996652838979E-6	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999999692248577	WITHOUT_CLASSIFICATION	3.0775142307642245E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999466455411975	WITHOUT_CLASSIFICATION	5.335445880263506E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999996563820334	WITHOUT_CLASSIFICATION	3.4361796667504035E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999998789539573	WITHOUT_CLASSIFICATION	1.210460427020342E-6	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975468967239	WITHOUT_CLASSIFICATION	2.453103276145855E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987206615815	WITHOUT_CLASSIFICATION	1.2793384185164197E-6	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984556412214	WITHOUT_CLASSIFICATION	1.544358778721847E-6	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970128344468	WITHOUT_CLASSIFICATION	2.98716555329546E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982460182256	WITHOUT_CLASSIFICATION	1.7539817743193539E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966538727093	WITHOUT_CLASSIFICATION	3.3461272905535717E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970440656538	WITHOUT_CLASSIFICATION	2.955934346200162E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990212885643	WITHOUT_CLASSIFICATION	9.787114356816592E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983771516717	WITHOUT_CLASSIFICATION	1.6228483283722269E-6	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970029423833	WITHOUT_CLASSIFICATION	2.9970576167520412E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978961348085	WITHOUT_CLASSIFICATION	2.1038651914915636E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999997022109464	WITHOUT_CLASSIFICATION	2.977890536826611E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999917243697707	WITHOUT_CLASSIFICATION	8.275630229307663E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999614383139128	WITHOUT_CLASSIFICATION	3.856168608720047E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998633317062	WITHOUT_CLASSIFICATION	1.366682938399094E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999993328766369	WITHOUT_CLASSIFICATION	6.671233631360676E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999998469233109	WITHOUT_CLASSIFICATION	1.5307668899058658E-7	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999972648837065	WITHOUT_CLASSIFICATION	2.735116293433893E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999228990024	WITHOUT_CLASSIFICATION	7.710099766175243E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999614383139128	WITHOUT_CLASSIFICATION	3.856168608720047E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999614383139128	WITHOUT_CLASSIFICATION	3.856168608720047E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999839951170457	WITHOUT_CLASSIFICATION	1.6004882954325886E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999406958927	WITHOUT_CLASSIFICATION	5.9304107434063044E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994679774044	WITHOUT_CLASSIFICATION	5.320225957331162E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999980787397669	WITHOUT_CLASSIFICATION	1.921260233108507E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991507342529	WITHOUT_CLASSIFICATION	8.49265747138128E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999928271693622	WITHOUT_CLASSIFICATION	7.1728306377725316E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999869868319609	WITHOUT_CLASSIFICATION	1.3013168039257851E-5	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998725305911	WITHOUT_CLASSIFICATION	1.2746940891017215E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995307550497	WITHOUT_CLASSIFICATION	4.692449503573583E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980094619619	WITHOUT_CLASSIFICATION	1.9905380381422613E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999992875502887	WITHOUT_CLASSIFICATION	7.124497113295593E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977003076408	WITHOUT_CLASSIFICATION	2.2996923592046585E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999995964826599	WITHOUT_CLASSIFICATION	4.035173401204013E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999995964826599	WITHOUT_CLASSIFICATION	4.035173401204013E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988345683363	WITHOUT_CLASSIFICATION	1.1654316636658766E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988345683363	WITHOUT_CLASSIFICATION	1.1654316636658766E-6	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995180218479	WITHOUT_CLASSIFICATION	4.819781520670478E-7	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983047621971	WITHOUT_CLASSIFICATION	1.6952378028711213E-6	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999848728407411	WITHOUT_CLASSIFICATION	1.5127159258898511E-5	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993819074743	WITHOUT_CLASSIFICATION	6.180925257721278E-7	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999262929841	WITHOUT_CLASSIFICATION	7.37070158654726E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999991308777204	WITHOUT_CLASSIFICATION	8.691222796920341E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985537519855	WITHOUT_CLASSIFICATION	1.446248014357354E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972594639616	WITHOUT_CLASSIFICATION	2.7405360384738153E-6	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998432907757	WITHOUT_CLASSIFICATION	1.5670922422815187E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998769145567781	WITHOUT_CLASSIFICATION	1.2308544322188483E-4	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999991136761223	WITHOUT_CLASSIFICATION	8.863238777242223E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999989517290161	WITHOUT_CLASSIFICATION	1.048270983864827E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999988039160141	WITHOUT_CLASSIFICATION	1.1960839858326892E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999996076908141	WITHOUT_CLASSIFICATION	3.9230918591332244E-7	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999963682724473	WITHOUT_CLASSIFICATION	3.631727552755979E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999993621505701	WITHOUT_CLASSIFICATION	6.378494299525367E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999993621505701	WITHOUT_CLASSIFICATION	6.378494299525367E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999003943244	WITHOUT_CLASSIFICATION	9.960567564414505E-8	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999983081795878	WITHOUT_CLASSIFICATION	1.6918204122359732E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998758183172	WITHOUT_CLASSIFICATION	1.241816827348909E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999855050374306	WITHOUT_CLASSIFICATION	1.4494962569340723E-5	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991548647642	WITHOUT_CLASSIFICATION	8.451352357392802E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965450552623	WITHOUT_CLASSIFICATION	3.4549447377269712E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999296116469	WITHOUT_CLASSIFICATION	7.038835317331701E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999348704336	WITHOUT_CLASSIFICATION	6.512956640038395E-8	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999671540696	WITHOUT_CLASSIFICATION	3.284593036506296E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999027594036	WITHOUT_CLASSIFICATION	9.724059630718776E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998325301602	WITHOUT_CLASSIFICATION	1.674698397897298E-7	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999996955851645	WITHOUT_CLASSIFICATION	3.044148355582657E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995892066412	WITHOUT_CLASSIFICATION	4.107933586943281E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999172380313	WITHOUT_CLASSIFICATION	8.276196869940367E-8	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999994680233947	WITHOUT_CLASSIFICATION	5.319766054458078E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999972478378946	WITHOUT_CLASSIFICATION	2.7521621054985252E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997718371285	WITHOUT_CLASSIFICATION	2.2816287148650598E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999996033772945	WITHOUT_CLASSIFICATION	3.9662270536423754E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999996999050792	WITHOUT_CLASSIFICATION	3.000949208472212E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999452306049	WITHOUT_CLASSIFICATION	5.476939513729846E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998489630446	WITHOUT_CLASSIFICATION	1.5103695535032605E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999977663128548	WITHOUT_CLASSIFICATION	2.2336871451695406E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998289152489	WITHOUT_CLASSIFICATION	1.7108475113424919E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996753421002	WITHOUT_CLASSIFICATION	3.246578997488835E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999992099025257	WITHOUT_CLASSIFICATION	7.900974744639088E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998282476754	WITHOUT_CLASSIFICATION	1.7175232454273837E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999989643212135	WITHOUT_CLASSIFICATION	1.0356787865550147E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999980792634545	WITHOUT_CLASSIFICATION	1.9207365455237078E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999990106183537	WITHOUT_CLASSIFICATION	9.893816462981555E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999909666918478	WITHOUT_CLASSIFICATION	9.033308152242897E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999960385622	WITHOUT_CLASSIFICATION	3.9614377946289745E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999985833019578	WITHOUT_CLASSIFICATION	1.4166980421747901E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999944013674098	WITHOUT_CLASSIFICATION	5.5986325901882504E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999995847948164	WITHOUT_CLASSIFICATION	4.152051835268354E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999618952015167	WITHOUT_CLASSIFICATION	3.8104798483234664E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999966963200507	WITHOUT_CLASSIFICATION	3.3036799492984265E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999671003837	WITHOUT_CLASSIFICATION	3.289961623350174E-8	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999176915355	WITHOUT_CLASSIFICATION	8.230846438651361E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999491576117	WITHOUT_CLASSIFICATION	5.084238836030604E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999992913888126	WITHOUT_CLASSIFICATION	7.08611187385705E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999956697073	WITHOUT_CLASSIFICATION	4.330292719121756E-9	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995770094672	WITHOUT_CLASSIFICATION	4.2299053285191194E-7	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999949763085183	WITHOUT_CLASSIFICATION	5.023691481784355E-6	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998450003463	WITHOUT_CLASSIFICATION	1.549996537899821E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999993668345046	WITHOUT_CLASSIFICATION	6.331654953768495E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999976010926244	WITHOUT_CLASSIFICATION	2.398907375673213E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.999993450360382	WITHOUT_CLASSIFICATION	6.5496396180665584E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999510152485187	WITHOUT_CLASSIFICATION	4.8984751481270925E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999992506278376	WITHOUT_CLASSIFICATION	7.493721625464992E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9979731519896923	WITHOUT_CLASSIFICATION	0.002026848010307764	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999994924338672	WITHOUT_CLASSIFICATION	5.075661328228513E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997900186201146	WITHOUT_CLASSIFICATION	2.099813798854026E-4	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999988995830364	WITHOUT_CLASSIFICATION	1.1004169635756492E-6	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999205685280447	WITHOUT_CLASSIFICATION	7.943147195532761E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999973895534185	WITHOUT_CLASSIFICATION	2.6104465815235484E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999986668792771	WITHOUT_CLASSIFICATION	1.3331207228902975E-6	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9989094181604142	WITHOUT_CLASSIFICATION	0.0010905818395857427	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999948776881669	WITHOUT_CLASSIFICATION	5.122311833196119E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999989551252813	WITHOUT_CLASSIFICATION	1.044874718733684E-6	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998973700002628	WITHOUT_CLASSIFICATION	1.0262999973713723E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998208641875	WITHOUT_CLASSIFICATION	1.79135812536411E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999992826396352	WITHOUT_CLASSIFICATION	7.173603647418033E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999065364629	WITHOUT_CLASSIFICATION	9.346353709495897E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999992427322094	WITHOUT_CLASSIFICATION	7.572677905953499E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999829731108	WITHOUT_CLASSIFICATION	1.7026889201617476E-7	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999504308875	WITHOUT_CLASSIFICATION	4.956911237395999E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999804686606	WITHOUT_CLASSIFICATION	1.953133943430366E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997517509674	WITHOUT_CLASSIFICATION	2.482490324788164E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999253401813722	WITHOUT_CLASSIFICATION	7.465981862774122E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999253401813722	WITHOUT_CLASSIFICATION	7.465981862774122E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999991628297472	WITHOUT_CLASSIFICATION	8.371702527919309E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999994318589561	WITHOUT_CLASSIFICATION	5.68141043889836E-7	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999881543029	WITHOUT_CLASSIFICATION	1.1845697091248441E-7	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999983005977713	WITHOUT_CLASSIFICATION	1.6994022287157287E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999998384700018	WITHOUT_CLASSIFICATION	1.6152999815763716E-7	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999777845281753	WITHOUT_CLASSIFICATION	2.2215471824643625E-5	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999614424732	WITHOUT_CLASSIFICATION	3.855752689028591E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997698396215	WITHOUT_CLASSIFICATION	2.3016037845130364E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999970081635987	WITHOUT_CLASSIFICATION	2.9918364012604915E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998904817992	WITHOUT_CLASSIFICATION	1.0951820079927941E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999132087709	WITHOUT_CLASSIFICATION	8.679122910714218E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999964737188	WITHOUT_CLASSIFICATION	3.526281073676584E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999971135818486	WITHOUT_CLASSIFICATION	2.8864181513549736E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999430148223	WITHOUT_CLASSIFICATION	5.6985177765071125E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999975113486232	WITHOUT_CLASSIFICATION	2.4886513767414454E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999979405120578	WITHOUT_CLASSIFICATION	2.0594879422773483E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999987135331082	WITHOUT_CLASSIFICATION	1.2864668918388141E-6	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999976337435579	WITHOUT_CLASSIFICATION	2.366256442031582E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999990440233362	WITHOUT_CLASSIFICATION	9.559766638438326E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999998140597673	WITHOUT_CLASSIFICATION	1.8594023269540417E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999989014462675	WITHOUT_CLASSIFICATION	1.0985537325575294E-6	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996886057264	WITHOUT_CLASSIFICATION	3.1139427354979005E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999913109952004	WITHOUT_CLASSIFICATION	8.689004799602133E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999997078543328	WITHOUT_CLASSIFICATION	2.921456672110504E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997093273122	WITHOUT_CLASSIFICATION	2.9067268781725725E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999968953904704	WITHOUT_CLASSIFICATION	3.1046095294689416E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999990249494849	WITHOUT_CLASSIFICATION	9.750505150736027E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999980539093005	WITHOUT_CLASSIFICATION	1.946090699466134E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999954630744232	WITHOUT_CLASSIFICATION	4.5369255768332095E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999988535439341	WITHOUT_CLASSIFICATION	1.1464560658675633E-6	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999998709991665	WITHOUT_CLASSIFICATION	1.2900083350605156E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999999820165086	WITHOUT_CLASSIFICATION	1.7983491400439467E-7	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999986586783618	WITHOUT_CLASSIFICATION	1.341321638282804E-6	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.999998676442882	WITHOUT_CLASSIFICATION	1.323557118029262E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999985413326886	WITHOUT_CLASSIFICATION	1.4586673113180249E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999985413326886	WITHOUT_CLASSIFICATION	1.4586673113180249E-6	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999997389311773	WITHOUT_CLASSIFICATION	2.610688226330428E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999675059168488	WITHOUT_CLASSIFICATION	3.249408315123014E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999999741434074	WITHOUT_CLASSIFICATION	2.585659259524915E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999989933118459	WITHOUT_CLASSIFICATION	1.006688154051271E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999993407112525	WITHOUT_CLASSIFICATION	6.59288747428185E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999944200161035	WITHOUT_CLASSIFICATION	5.5799838964468564E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999996167295322	WITHOUT_CLASSIFICATION	3.83270467783788E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999721916418	WITHOUT_CLASSIFICATION	2.7808358097260447E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999291905871154	WITHOUT_CLASSIFICATION	7.080941288466154E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998669132882	WITHOUT_CLASSIFICATION	1.3308671175696327E-7	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999839738523	WITHOUT_CLASSIFICATION	1.6026147756632206E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999998939364359	WITHOUT_CLASSIFICATION	1.0606356409182934E-6	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99999728770359	WITHOUT_CLASSIFICATION	2.7122964101077737E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.99999939358561	WITHOUT_CLASSIFICATION	6.064143900901695E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999984202398401	WITHOUT_CLASSIFICATION	1.5797601598948868E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999887564266369	WITHOUT_CLASSIFICATION	1.124357336302851E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999887564266369	WITHOUT_CLASSIFICATION	1.124357336302851E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999960625522	WITHOUT_CLASSIFICATION	3.937447852774574E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999988296690908	WITHOUT_CLASSIFICATION	1.1703309091814788E-6	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999996341970805	WITHOUT_CLASSIFICATION	3.6580291955844364E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997694135745	WITHOUT_CLASSIFICATION	2.3058642554086392E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999229594265052	WITHOUT_CLASSIFICATION	7.704057349474859E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999103270467	WITHOUT_CLASSIFICATION	8.967295335598244E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997023535685	WITHOUT_CLASSIFICATION	2.9764643150611483E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997023535685	WITHOUT_CLASSIFICATION	2.9764643150611483E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999997366618271	WITHOUT_CLASSIFICATION	2.633381729847352E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999983139539	WITHOUT_CLASSIFICATION	1.6860461066247223E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999981478747928	WITHOUT_CLASSIFICATION	1.85212520722821E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997853739399	WITHOUT_CLASSIFICATION	2.146260600506834E-7	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999996495313097	WITHOUT_CLASSIFICATION	3.504686902643393E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999438634047655	WITHOUT_CLASSIFICATION	5.6136595234379946E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999998781683515	WITHOUT_CLASSIFICATION	1.2183164848673745E-7	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999764981485	WITHOUT_CLASSIFICATION	2.350185153941548E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994664752058	WITHOUT_CLASSIFICATION	5.335247941732461E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999956414949023	WITHOUT_CLASSIFICATION	4.3585050976547175E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999998844062034	WITHOUT_CLASSIFICATION	1.1559379671783796E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999969930829772	WITHOUT_CLASSIFICATION	3.0069170228403144E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999898433764526	WITHOUT_CLASSIFICATION	1.0156623547359638E-5	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999949616425654	WITHOUT_CLASSIFICATION	5.0383574346195846E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999987707865554	WITHOUT_CLASSIFICATION	1.2292134445955957E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998197147655	WITHOUT_CLASSIFICATION	1.802852345381431E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999974867986786	WITHOUT_CLASSIFICATION	2.5132013213006636E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999957908359247	WITHOUT_CLASSIFICATION	4.209164075299652E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999988615081432	WITHOUT_CLASSIFICATION	1.1384918567716016E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999999916627104	WITHOUT_CLASSIFICATION	8.337289603833128E-8	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999998126039469	WITHOUT_CLASSIFICATION	1.8739605310553903E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999969278804066	WITHOUT_CLASSIFICATION	3.072119593263243E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999517162084159	WITHOUT_CLASSIFICATION	4.8283791584039824E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998161469371	WITHOUT_CLASSIFICATION	1.8385306275448484E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997524855428	WITHOUT_CLASSIFICATION	2.475144571186429E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999999131692927	WITHOUT_CLASSIFICATION	8.683070727662472E-8	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997177023265684	WITHOUT_CLASSIFICATION	2.8229767343158246E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998070759402	WITHOUT_CLASSIFICATION	1.9292405996129818E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999659228174	WITHOUT_CLASSIFICATION	3.407718268998972E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999127580654	WITHOUT_CLASSIFICATION	8.724193454417971E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999301281609443	WITHOUT_CLASSIFICATION	6.987183905571534E-5	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999968821287667	WITHOUT_CLASSIFICATION	3.1178712333058953E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999961268641633	WITHOUT_CLASSIFICATION	3.873135836730478E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999946384171229	WITHOUT_CLASSIFICATION	5.36158287717311E-6	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999648671567991	WITHOUT_CLASSIFICATION	3.513284320096755E-5	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999941225694748	WITHOUT_CLASSIFICATION	5.877430525116537E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999969594335549	WITHOUT_CLASSIFICATION	3.0405664450557355E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999996522402772	WITHOUT_CLASSIFICATION	3.4775972290568424E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999984612562307	WITHOUT_CLASSIFICATION	1.5387437693167194E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999974291613146	WITHOUT_CLASSIFICATION	2.570838685463153E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998845376187	WITHOUT_CLASSIFICATION	1.1546238138156599E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999994219107233	WITHOUT_CLASSIFICATION	5.780892766895747E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999966278358006	WITHOUT_CLASSIFICATION	3.3721641994832458E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999996391207747	WITHOUT_CLASSIFICATION	3.6087922526481424E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999939564314	WITHOUT_CLASSIFICATION	6.043568671297995E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999949445189915	WITHOUT_CLASSIFICATION	5.0554810084951795E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999984612562307	WITHOUT_CLASSIFICATION	1.5387437693167194E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999974291613146	WITHOUT_CLASSIFICATION	2.570838685463153E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999835131940442	WITHOUT_CLASSIFICATION	1.6486805955890718E-5	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999996443294604	WITHOUT_CLASSIFICATION	3.5567053960201525E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999992269363208	WITHOUT_CLASSIFICATION	7.730636790722627E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999916091615914	WITHOUT_CLASSIFICATION	8.39083840870958E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997337473617	WITHOUT_CLASSIFICATION	2.6625263826006366E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999997101536172	WITHOUT_CLASSIFICATION	2.8984638271194567E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999630978590799	WITHOUT_CLASSIFICATION	3.690214092006218E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999883931145394	WITHOUT_CLASSIFICATION	1.1606885460691015E-5	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999554315665	WITHOUT_CLASSIFICATION	4.456843351461139E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999650783054249	WITHOUT_CLASSIFICATION	3.492169457520035E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999986403788671	WITHOUT_CLASSIFICATION	1.3596211328834927E-6	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999650783054249	WITHOUT_CLASSIFICATION	3.492169457520035E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999995929428956	WITHOUT_CLASSIFICATION	4.070571044053526E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999827078907011	WITHOUT_CLASSIFICATION	1.729210929900508E-5	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999965205531868	WITHOUT_CLASSIFICATION	3.4794468132486228E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946798779183	WITHOUT_CLASSIFICATION	5.320122081740787E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999989677177531	WITHOUT_CLASSIFICATION	1.0322822468576878E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9997474658357502	WITHOUT_CLASSIFICATION	2.525341642497351E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9997474658357502	WITHOUT_CLASSIFICATION	2.525341642497351E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999891120333254	WITHOUT_CLASSIFICATION	1.0887966674578467E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999981847647118	WITHOUT_CLASSIFICATION	1.8152352882106557E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999970113708536	WITHOUT_CLASSIFICATION	2.9886291463853916E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999946965575756	WITHOUT_CLASSIFICATION	5.30344242447497E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999939704380368	WITHOUT_CLASSIFICATION	6.0295619631213316E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999735333863068	WITHOUT_CLASSIFICATION	2.6466613693219737E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999928981552306	WITHOUT_CLASSIFICATION	7.101844769387429E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999998814432827	WITHOUT_CLASSIFICATION	1.1855671730409752E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999882815285728	WITHOUT_CLASSIFICATION	1.1718471427158443E-5	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999609196018019	WITHOUT_CLASSIFICATION	3.908039819812533E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.999975372579458	WITHOUT_CLASSIFICATION	2.4627420542065388E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999964205613152	WITHOUT_CLASSIFICATION	3.5794386848565347E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999047409132309	WITHOUT_CLASSIFICATION	9.525908676906377E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999983896656608	WITHOUT_CLASSIFICATION	1.6103343392682219E-6	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999978742344675	WITHOUT_CLASSIFICATION	2.1257655325281496E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999864876353	WITHOUT_CLASSIFICATION	1.3512364567911792E-8	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999997791998361	WITHOUT_CLASSIFICATION	2.208001639542384E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999467913254	WITHOUT_CLASSIFICATION	5.320867459951891E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999970006168899	WITHOUT_CLASSIFICATION	2.9993831101415057E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998035308520149	WITHOUT_CLASSIFICATION	1.964691479850273E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999773220966	WITHOUT_CLASSIFICATION	2.2677903389346594E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999924716008144	WITHOUT_CLASSIFICATION	7.5283991856280916E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998565424725	WITHOUT_CLASSIFICATION	1.4345752749607924E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999970173778618	WITHOUT_CLASSIFICATION	2.9826221382254803E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999974782213928	WITHOUT_CLASSIFICATION	2.521778607127423E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999483264834722	WITHOUT_CLASSIFICATION	5.167351652784785E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999776148787	WITHOUT_CLASSIFICATION	2.2385121287163923E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999982193643182	WITHOUT_CLASSIFICATION	1.7806356817625392E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999994870050817	WITHOUT_CLASSIFICATION	5.129949183424652E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999992389364771	WITHOUT_CLASSIFICATION	7.610635228636254E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999545643687441	WITHOUT_CLASSIFICATION	4.543563125601699E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999970309718768	WITHOUT_CLASSIFICATION	2.969028123118916E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999928981552306	WITHOUT_CLASSIFICATION	7.101844769387429E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999996993218828	WITHOUT_CLASSIFICATION	3.0067811715440274E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999314913432099	WITHOUT_CLASSIFICATION	6.850865679008193E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9971548928255992	WITHOUT_CLASSIFICATION	0.0028451071744007707	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999875223793793	WITHOUT_CLASSIFICATION	1.2477620620647898E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999991091778383	WITHOUT_CLASSIFICATION	8.908221616406446E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999913896444651	WITHOUT_CLASSIFICATION	8.610355534890181E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999946965575756	WITHOUT_CLASSIFICATION	5.30344242447497E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999946965575756	WITHOUT_CLASSIFICATION	5.30344242447497E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999968972547197	WITHOUT_CLASSIFICATION	3.1027452801173906E-6	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999943708464253	WITHOUT_CLASSIFICATION	5.629153574741767E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999980938866144	WITHOUT_CLASSIFICATION	1.906113385559946E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999985740402587	WITHOUT_CLASSIFICATION	1.4259597413159784E-6	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999949184440853	WITHOUT_CLASSIFICATION	5.081555914767352E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999994566574879	WITHOUT_CLASSIFICATION	5.433425120984003E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999996160375194	WITHOUT_CLASSIFICATION	3.839624805947575E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997340852967	WITHOUT_CLASSIFICATION	2.659147032951619E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999989267030833	WITHOUT_CLASSIFICATION	1.0732969166106978E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996618117752	WITHOUT_CLASSIFICATION	3.3818822470870453E-7	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999839742528508	WITHOUT_CLASSIFICATION	1.6025747149187025E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998342309869914	WITHOUT_CLASSIFICATION	1.6576901300860192E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.999987394334397	WITHOUT_CLASSIFICATION	1.2605665602999573E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996618117752	WITHOUT_CLASSIFICATION	3.3818822470870453E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999969980596497	WITHOUT_CLASSIFICATION	3.00194035023466E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999997389964393	WITHOUT_CLASSIFICATION	2.61003560681108E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.99999834980272	WITHOUT_CLASSIFICATION	1.6501972800431699E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9959801762727265	WITHOUT_CLASSIFICATION	0.004019823727273528	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998342309869914	WITHOUT_CLASSIFICATION	1.6576901300860192E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999843696904179	WITHOUT_CLASSIFICATION	1.5630309582049657E-5	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999068368666	WITHOUT_CLASSIFICATION	9.316313343332084E-8	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998934632439	WITHOUT_CLASSIFICATION	1.0653675604420241E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999989272524	WITHOUT_CLASSIFICATION	1.0727476072175213E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999026480326128	WITHOUT_CLASSIFICATION	9.735196738722294E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999978486809002	WITHOUT_CLASSIFICATION	2.1513190996407664E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996661811941	WITHOUT_CLASSIFICATION	3.3381880602750297E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999932805450237	WITHOUT_CLASSIFICATION	6.719454976382228E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999912174218082	WITHOUT_CLASSIFICATION	8.782578191836164E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999955232066823	WITHOUT_CLASSIFICATION	4.476793317680475E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999997301114941	WITHOUT_CLASSIFICATION	2.698885059067023E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999999945767012	WITHOUT_CLASSIFICATION	5.423298797974914E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996618117752	WITHOUT_CLASSIFICATION	3.3818822470870453E-7	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999843696904179	WITHOUT_CLASSIFICATION	1.5630309582049657E-5	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998934632439	WITHOUT_CLASSIFICATION	1.0653675604420241E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999983218318131	WITHOUT_CLASSIFICATION	1.6781681869358387E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999924940096935	WITHOUT_CLASSIFICATION	7.505990306487798E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999997558616156	WITHOUT_CLASSIFICATION	2.441383843721705E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998342309869914	WITHOUT_CLASSIFICATION	1.6576901300860192E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999917232505777	WITHOUT_CLASSIFICATION	8.276749422242232E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999915746181636	WITHOUT_CLASSIFICATION	8.425381836376036E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999853584483142	WITHOUT_CLASSIFICATION	1.4641551685863663E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999987806852724	WITHOUT_CLASSIFICATION	1.2193147275888775E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999932805450237	WITHOUT_CLASSIFICATION	6.719454976382228E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999969980596497	WITHOUT_CLASSIFICATION	3.00194035023466E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999913089965309	WITHOUT_CLASSIFICATION	8.691003469041882E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999957081912394	WITHOUT_CLASSIFICATION	4.2918087605410615E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999852308851725	WITHOUT_CLASSIFICATION	1.4769114827503477E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999551758710556	WITHOUT_CLASSIFICATION	4.482412894428376E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999079949968294	WITHOUT_CLASSIFICATION	9.200500317069665E-5	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999297618272179	WITHOUT_CLASSIFICATION	7.023817278210602E-5	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.999994225192915	WITHOUT_CLASSIFICATION	5.774807084947059E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946798779183	WITHOUT_CLASSIFICATION	5.320122081740787E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990963043256	WITHOUT_CLASSIFICATION	9.036956743095919E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996760723063	WITHOUT_CLASSIFICATION	3.239276936809194E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997389359859201	WITHOUT_CLASSIFICATION	2.61064014079896E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999888046023786	WITHOUT_CLASSIFICATION	1.1195397621336412E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999978900974803	WITHOUT_CLASSIFICATION	2.1099025197242693E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999300774796	WITHOUT_CLASSIFICATION	6.992252048159239E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999968433027127	WITHOUT_CLASSIFICATION	3.156697287284126E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999990933486309	WITHOUT_CLASSIFICATION	9.066513690539405E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999987806852724	WITHOUT_CLASSIFICATION	1.2193147275888775E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999887216585186	WITHOUT_CLASSIFICATION	1.127834148134101E-5	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999905495233148	WITHOUT_CLASSIFICATION	9.450476685185286E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999577200292463	WITHOUT_CLASSIFICATION	4.227997075362549E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999906065610901	WITHOUT_CLASSIFICATION	9.393438909956024E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999841120772032	WITHOUT_CLASSIFICATION	1.5887922796888686E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999851153234	WITHOUT_CLASSIFICATION	1.488467667188593E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999995964521562	WITHOUT_CLASSIFICATION	4.0354784379162005E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999984785569673	WITHOUT_CLASSIFICATION	1.5214430327501758E-6	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998017203584	WITHOUT_CLASSIFICATION	1.9827964155974877E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999747183896539	WITHOUT_CLASSIFICATION	2.5281610346034917E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999929068639598	WITHOUT_CLASSIFICATION	7.093136040124124E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999950955242515	WITHOUT_CLASSIFICATION	4.904475748443875E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999988783352718	WITHOUT_CLASSIFICATION	1.1216647281912594E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999977363525664	WITHOUT_CLASSIFICATION	2.2636474335544464E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999219006239	WITHOUT_CLASSIFICATION	7.809937604719555E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999996292045368	WITHOUT_CLASSIFICATION	3.7079546324498026E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999980541152	WITHOUT_CLASSIFICATION	1.9458848085836714E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998753912479	WITHOUT_CLASSIFICATION	1.2460875211045413E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999994783259675	WITHOUT_CLASSIFICATION	5.216740325346189E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999950471297228	WITHOUT_CLASSIFICATION	4.952870277290863E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.999993601723025	WITHOUT_CLASSIFICATION	6.398276975055095E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999991995420409	WITHOUT_CLASSIFICATION	8.004579591866423E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996889090632	WITHOUT_CLASSIFICATION	3.11090936780484E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999332152276	WITHOUT_CLASSIFICATION	6.678477238967283E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999587110937	WITHOUT_CLASSIFICATION	4.12889063008821E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9996969595035768	WITHOUT_CLASSIFICATION	3.030404964230987E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999794426359845	WITHOUT_CLASSIFICATION	2.0557364015555075E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999806788516861	WITHOUT_CLASSIFICATION	1.932114831385569E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999989120526394	WITHOUT_CLASSIFICATION	1.0879473606181672E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9995899784320289	WITHOUT_CLASSIFICATION	4.100215679710848E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999989170028817	WITHOUT_CLASSIFICATION	1.0829971182710018E-6	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999934459768525	WITHOUT_CLASSIFICATION	6.554023147493479E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999992321920287	WITHOUT_CLASSIFICATION	7.678079713752681E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999914922543689	WITHOUT_CLASSIFICATION	8.507745631092739E-6	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999990642718726	WITHOUT_CLASSIFICATION	9.357281274212128E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999205365388	WITHOUT_CLASSIFICATION	7.946346119363086E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999997366149734	WITHOUT_CLASSIFICATION	2.6338502649580654E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995419279015	WITHOUT_CLASSIFICATION	4.580720984381284E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999205365388	WITHOUT_CLASSIFICATION	7.946346119363086E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999990642718726	WITHOUT_CLASSIFICATION	9.357281274212128E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999997366149734	WITHOUT_CLASSIFICATION	2.6338502649580654E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999991471550033	WITHOUT_CLASSIFICATION	8.528449966873543E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999592374877	WITHOUT_CLASSIFICATION	4.0762512306921535E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999966242825106	WITHOUT_CLASSIFICATION	3.375717489486809E-6	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999994680279667	WITHOUT_CLASSIFICATION	5.31972033350578E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999873303417	WITHOUT_CLASSIFICATION	1.2669658314660061E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9985072350495785	WITHOUT_CLASSIFICATION	0.0014927649504215368	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999961408140172	WITHOUT_CLASSIFICATION	3.859185982810343E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999876460174509	WITHOUT_CLASSIFICATION	1.235398254910493E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.99999887541112	WITHOUT_CLASSIFICATION	1.124588879997645E-6	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999992302194998	WITHOUT_CLASSIFICATION	7.697805003026446E-7	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999976206060521	WITHOUT_CLASSIFICATION	2.379393947982212E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999907210775278	WITHOUT_CLASSIFICATION	9.27892247217045E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999996169672467	WITHOUT_CLASSIFICATION	3.830327532882703E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999962654532701	WITHOUT_CLASSIFICATION	3.7345467299582683E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996123116317	WITHOUT_CLASSIFICATION	3.8768836825820043E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994513798618	WITHOUT_CLASSIFICATION	5.48620138173918E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997857964437	WITHOUT_CLASSIFICATION	2.1420355629022343E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999444159192	WITHOUT_CLASSIFICATION	5.5584080855611024E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996745902855	WITHOUT_CLASSIFICATION	3.254097145001491E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999975034015283	WITHOUT_CLASSIFICATION	2.4965984716729893E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999992470452411	WITHOUT_CLASSIFICATION	7.529547588864131E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999686807006	WITHOUT_CLASSIFICATION	3.1319299355676205E-8	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999982601386902	WITHOUT_CLASSIFICATION	1.7398613096988219E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999627600909	WITHOUT_CLASSIFICATION	3.7239909099589476E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999973836810554	WITHOUT_CLASSIFICATION	2.616318944560147E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999973836810554	WITHOUT_CLASSIFICATION	2.616318944560147E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999781982611	WITHOUT_CLASSIFICATION	2.1801738866608042E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999781982611	WITHOUT_CLASSIFICATION	2.1801738866608042E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999947645281084	WITHOUT_CLASSIFICATION	5.235471891646205E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997857964437	WITHOUT_CLASSIFICATION	2.1420355629022343E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999980783862962	WITHOUT_CLASSIFICATION	1.921613703802948E-6	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999999960299066	WITHOUT_CLASSIFICATION	3.970093397460076E-8	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999976075606039	WITHOUT_CLASSIFICATION	2.3924393961015973E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999976075606039	WITHOUT_CLASSIFICATION	2.3924393961015973E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999996671695134	WITHOUT_CLASSIFICATION	3.3283048658236873E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999648469545372	WITHOUT_CLASSIFICATION	3.515304546265602E-5	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999999927708752	WITHOUT_CLASSIFICATION	7.229124801626295E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.999995164898894	WITHOUT_CLASSIFICATION	4.8351011060859765E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999993395648717	WITHOUT_CLASSIFICATION	6.604351283083321E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999885214099	WITHOUT_CLASSIFICATION	1.1478590040430191E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999979381667425	WITHOUT_CLASSIFICATION	2.0618332575032245E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999651892599445	WITHOUT_CLASSIFICATION	3.48107400554617E-5	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999978733627966	WITHOUT_CLASSIFICATION	2.126637203390068E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999090016088	WITHOUT_CLASSIFICATION	9.099839122386498E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999994255810903	WITHOUT_CLASSIFICATION	5.744189097508056E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999988944979517	WITHOUT_CLASSIFICATION	1.1055020483194359E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999992160544428	WITHOUT_CLASSIFICATION	7.839455572726176E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999918318914501	WITHOUT_CLASSIFICATION	8.168108549834327E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999943791939221	WITHOUT_CLASSIFICATION	5.6208060778243125E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999999310290406	WITHOUT_CLASSIFICATION	6.897095939331283E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994491931957	WITHOUT_CLASSIFICATION	5.508068043008208E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999591122987	WITHOUT_CLASSIFICATION	4.088770129916348E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999993999698701	WITHOUT_CLASSIFICATION	6.000301299383671E-7	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999920235307	WITHOUT_CLASSIFICATION	7.976469297540548E-9	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999516774447	WITHOUT_CLASSIFICATION	4.832255531878812E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999978653419843	WITHOUT_CLASSIFICATION	2.13465801572437E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999256828316	WITHOUT_CLASSIFICATION	7.431716835067315E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999412401367	WITHOUT_CLASSIFICATION	5.8759863452485395E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997184796971282	WITHOUT_CLASSIFICATION	2.8152030287175854E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999990522153441	WITHOUT_CLASSIFICATION	9.477846558478522E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999950955242515	WITHOUT_CLASSIFICATION	4.904475748443875E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999987777805359	WITHOUT_CLASSIFICATION	1.222219464062462E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997536170597	WITHOUT_CLASSIFICATION	2.463829402624248E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961175689727	WITHOUT_CLASSIFICATION	3.8824310273202025E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982751374701	WITHOUT_CLASSIFICATION	1.7248625298722243E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999995597457743	WITHOUT_CLASSIFICATION	4.402542256888694E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999995597457743	WITHOUT_CLASSIFICATION	4.402542256888694E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994383922326	WITHOUT_CLASSIFICATION	5.61607767340389E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.999998611966081	WITHOUT_CLASSIFICATION	1.388033918935896E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999955051954557	WITHOUT_CLASSIFICATION	4.494804544314044E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999955051954557	WITHOUT_CLASSIFICATION	4.494804544314044E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994885894431	WITHOUT_CLASSIFICATION	5.114105569642212E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999991574919258	WITHOUT_CLASSIFICATION	8.425080742098562E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.99999287404414	WITHOUT_CLASSIFICATION	7.125955860007109E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991507342529	WITHOUT_CLASSIFICATION	8.49265747138128E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999885445395891	WITHOUT_CLASSIFICATION	1.1455460410982063E-5	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999927108644583	WITHOUT_CLASSIFICATION	7.289135541665857E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999991715053828	WITHOUT_CLASSIFICATION	8.284946173757591E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998613252989	WITHOUT_CLASSIFICATION	1.3867470100695503E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999992896651204	WITHOUT_CLASSIFICATION	7.103348796367494E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999992896651204	WITHOUT_CLASSIFICATION	7.103348796367494E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999864501748	WITHOUT_CLASSIFICATION	1.3549825281545415E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999144568881	WITHOUT_CLASSIFICATION	8.554311190223946E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999144568881	WITHOUT_CLASSIFICATION	8.554311190223946E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997567455473	WITHOUT_CLASSIFICATION	2.4325445264348464E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.99999843977481	WITHOUT_CLASSIFICATION	1.5602251900101955E-6	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9922093846300102	WITHOUT_CLASSIFICATION	0.0077906153699897375	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.999999826181481	WITHOUT_CLASSIFICATION	1.738185190402674E-7	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999514365592	WITHOUT_CLASSIFICATION	4.8563440774431805E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999994769182662	WITHOUT_CLASSIFICATION	5.230817339056498E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999897864271803	WITHOUT_CLASSIFICATION	1.0213572819696855E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999317196308686	WITHOUT_CLASSIFICATION	6.828036913142768E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999467064076	WITHOUT_CLASSIFICATION	5.32935924331517E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999792080003768	WITHOUT_CLASSIFICATION	2.0791999623145975E-5	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999664606144	WITHOUT_CLASSIFICATION	3.3539385687475293E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999374741778	WITHOUT_CLASSIFICATION	6.252582219788131E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999887515643652	WITHOUT_CLASSIFICATION	1.1248435634846355E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999887515643652	WITHOUT_CLASSIFICATION	1.1248435634846355E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999887515643652	WITHOUT_CLASSIFICATION	1.1248435634846355E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999887515643652	WITHOUT_CLASSIFICATION	1.1248435634846355E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999993980242874	WITHOUT_CLASSIFICATION	6.019757125711193E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999994134601707	WITHOUT_CLASSIFICATION	5.865398292391897E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999993103322912	WITHOUT_CLASSIFICATION	6.896677088027059E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999739486870464	WITHOUT_CLASSIFICATION	2.605131295370646E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999958410892946	WITHOUT_CLASSIFICATION	4.158910705343927E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999899502573255	WITHOUT_CLASSIFICATION	1.0049742674544174E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998919803953399	WITHOUT_CLASSIFICATION	1.0801960466003845E-4	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999957176242458	WITHOUT_CLASSIFICATION	4.282375754234196E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999756780226	WITHOUT_CLASSIFICATION	2.4321977554168427E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999995581801521	WITHOUT_CLASSIFICATION	4.4181984792814895E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999980978414358	WITHOUT_CLASSIFICATION	1.9021585641243366E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995722523756	WITHOUT_CLASSIFICATION	4.2774762435956984E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9990309618773459	WITHOUT_CLASSIFICATION	9.690381226541052E-4	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999898979647722	WITHOUT_CLASSIFICATION	1.0102035227785145E-5	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999983356309836	WITHOUT_CLASSIFICATION	1.6643690163409788E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995722523756	WITHOUT_CLASSIFICATION	4.2774762435956984E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9996185152002306	WITHOUT_CLASSIFICATION	3.814847997694172E-4	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999825441016	WITHOUT_CLASSIFICATION	1.7455898356851402E-8	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999995813918275	WITHOUT_CLASSIFICATION	4.1860817254855775E-7	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999948750371082	WITHOUT_CLASSIFICATION	5.124962891844122E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998183638937	WITHOUT_CLASSIFICATION	1.8163610634296723E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999986912330899	WITHOUT_CLASSIFICATION	1.3087669101322844E-6	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999968416823	WITHOUT_CLASSIFICATION	3.158317702170311E-8	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999980316235073	WITHOUT_CLASSIFICATION	1.9683764927673364E-6	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999146777884	WITHOUT_CLASSIFICATION	8.532221167295399E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999515176535	WITHOUT_CLASSIFICATION	4.8482346395473993E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996904951121	WITHOUT_CLASSIFICATION	3.0950488795497354E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998752180426	WITHOUT_CLASSIFICATION	1.247819574321688E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999948586403635	WITHOUT_CLASSIFICATION	5.141359636440314E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996434528767822	WITHOUT_CLASSIFICATION	3.565471232176643E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999953966397	WITHOUT_CLASSIFICATION	4.60336029992019E-8	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999968757959045	WITHOUT_CLASSIFICATION	3.124204095506878E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999994578046946	WITHOUT_CLASSIFICATION	5.42195305474945E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998797020584	WITHOUT_CLASSIFICATION	1.2029794166110427E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999971067202336	WITHOUT_CLASSIFICATION	2.893279766458371E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998797020584	WITHOUT_CLASSIFICATION	1.2029794166110427E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999837056784	WITHOUT_CLASSIFICATION	1.6294321514758624E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999963299732632	WITHOUT_CLASSIFICATION	3.6700267369895793E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999996231147221	WITHOUT_CLASSIFICATION	3.7688527787054743E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999792971389598	WITHOUT_CLASSIFICATION	2.0702861040153757E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999994578046946	WITHOUT_CLASSIFICATION	5.42195305474945E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999971067202336	WITHOUT_CLASSIFICATION	2.893279766458371E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999837056784	WITHOUT_CLASSIFICATION	1.6294321514758624E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999248968199	WITHOUT_CLASSIFICATION	7.510318015479436E-8	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999989335487087	WITHOUT_CLASSIFICATION	1.0664512912792412E-6	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999883293332389	WITHOUT_CLASSIFICATION	1.1670666761064795E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999967156048785	WITHOUT_CLASSIFICATION	3.284395121535661E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999999341967032	WITHOUT_CLASSIFICATION	6.580329690262206E-8	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999992315229354	WITHOUT_CLASSIFICATION	7.684770646775222E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994491931957	WITHOUT_CLASSIFICATION	5.508068043008208E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999963299732632	WITHOUT_CLASSIFICATION	3.6700267369895793E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999999983028591	WITHOUT_CLASSIFICATION	1.6971409015099247E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999989126759538	WITHOUT_CLASSIFICATION	1.0873240463095911E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998104061918	WITHOUT_CLASSIFICATION	1.8959380826322567E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994491931957	WITHOUT_CLASSIFICATION	5.508068043008208E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999999627233419	WITHOUT_CLASSIFICATION	3.727665811285947E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994491931957	WITHOUT_CLASSIFICATION	5.508068043008208E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999986501525623	WITHOUT_CLASSIFICATION	1.3498474377835186E-6	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989134217998	WITHOUT_CLASSIFICATION	1.0865782001426977E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999921076890567	WITHOUT_CLASSIFICATION	7.89231094332037E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999995716868035	WITHOUT_CLASSIFICATION	4.2831319644356373E-7	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997472626709	WITHOUT_CLASSIFICATION	2.5273732908518946E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999990056682241	WITHOUT_CLASSIFICATION	9.943317759829723E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999987751607812	WITHOUT_CLASSIFICATION	1.2248392187783757E-6	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999995551879836	WITHOUT_CLASSIFICATION	4.448120164028982E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999970999524376	WITHOUT_CLASSIFICATION	2.9000475624089925E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999941352681335	WITHOUT_CLASSIFICATION	5.864731866407601E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999253401813722	WITHOUT_CLASSIFICATION	7.465981862774122E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999990485213719	WITHOUT_CLASSIFICATION	9.514786282226833E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9922093846300102	WITHOUT_CLASSIFICATION	0.0077906153699897375	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999694644417416	WITHOUT_CLASSIFICATION	3.0535558258423225E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999841068007671	WITHOUT_CLASSIFICATION	1.589319923284208E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999704114051254	WITHOUT_CLASSIFICATION	2.9588594874557103E-5	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999312071275129	WITHOUT_CLASSIFICATION	6.879287248713194E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998173877322	WITHOUT_CLASSIFICATION	1.8261226780882433E-7	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992381081498	WITHOUT_CLASSIFICATION	7.618918500754241E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999737070777	WITHOUT_CLASSIFICATION	2.6292922195136043E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999939924520345	WITHOUT_CLASSIFICATION	6.0075479655657095E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999737357037	WITHOUT_CLASSIFICATION	2.6264296250253417E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999992373528841	WITHOUT_CLASSIFICATION	7.626471159826997E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9900899004621428	WITHOUT_CLASSIFICATION	0.009910099537857245	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999853097546404	WITHOUT_CLASSIFICATION	1.4690245359633152E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999939708793076	WITHOUT_CLASSIFICATION	6.0291206924048865E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999844145262811	WITHOUT_CLASSIFICATION	1.5585473718977027E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999916357610182	WITHOUT_CLASSIFICATION	8.364238981784538E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999164175452229	WITHOUT_CLASSIFICATION	8.358245477709324E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997915204937	WITHOUT_CLASSIFICATION	2.0847950631860706E-7	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999854663103	WITHOUT_CLASSIFICATION	1.4533689626079989E-8	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999656197733	WITHOUT_CLASSIFICATION	3.438022668974076E-8	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999785350533694	WITHOUT_CLASSIFICATION	2.146494663056669E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999982553490802	WITHOUT_CLASSIFICATION	1.7446509197985076E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9952019097772757	WITHOUT_CLASSIFICATION	0.004798090222724284	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999917278556326	WITHOUT_CLASSIFICATION	8.272144367434058E-6	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999983234775879	WITHOUT_CLASSIFICATION	1.6765224121018012E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999285170043216	WITHOUT_CLASSIFICATION	7.148299567837722E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998496253995587	WITHOUT_CLASSIFICATION	1.5037460044118388E-4	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999997766907482	WITHOUT_CLASSIFICATION	2.2330925165868637E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9891996220824524	WITHOUT_CLASSIFICATION	0.01080037791754771	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999380173564	WITHOUT_CLASSIFICATION	6.198264362400639E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999982719790385	WITHOUT_CLASSIFICATION	1.7280209615060746E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999757361618095	WITHOUT_CLASSIFICATION	2.4263838190531923E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999757361618095	WITHOUT_CLASSIFICATION	2.4263838190531923E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999400383413	WITHOUT_CLASSIFICATION	5.99616588025138E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999995551879836	WITHOUT_CLASSIFICATION	4.448120164028982E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999986759537309	WITHOUT_CLASSIFICATION	1.3240462689996523E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999937109844875	WITHOUT_CLASSIFICATION	6.289015512505408E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999754357012	WITHOUT_CLASSIFICATION	2.4564298803921243E-8	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999999512584698	WITHOUT_CLASSIFICATION	4.874153019318802E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999947456129001	WITHOUT_CLASSIFICATION	5.254387099901114E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9997901338089283	WITHOUT_CLASSIFICATION	2.0986619107162034E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999866670240071	WITHOUT_CLASSIFICATION	1.3332975992879528E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999959153618004	WITHOUT_CLASSIFICATION	4.084638199509239E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999334514358	WITHOUT_CLASSIFICATION	6.654856425898112E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999294619575	WITHOUT_CLASSIFICATION	7.053804245516655E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999197309134	WITHOUT_CLASSIFICATION	8.02690865395665E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999823236274903	WITHOUT_CLASSIFICATION	1.7676372509747175E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996099145322	WITHOUT_CLASSIFICATION	3.900854677439439E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999717931978	WITHOUT_CLASSIFICATION	2.8206802278293825E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999999685021065	WITHOUT_CLASSIFICATION	3.1497893507948486E-7	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999559583238	WITHOUT_CLASSIFICATION	4.404167614352278E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999429465852	WITHOUT_CLASSIFICATION	5.705341479194659E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999952812038	WITHOUT_CLASSIFICATION	4.7187962945747775E-9	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999962954924	WITHOUT_CLASSIFICATION	3.7045075323040223E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999994714320598	WITHOUT_CLASSIFICATION	5.285679402055918E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999995995796256	WITHOUT_CLASSIFICATION	4.00420374348496E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999892357831	WITHOUT_CLASSIFICATION	1.0764216769637471E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9891996220824524	WITHOUT_CLASSIFICATION	0.01080037791754771	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999571283533	WITHOUT_CLASSIFICATION	4.287164679766E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999890741059	WITHOUT_CLASSIFICATION	1.0925894054545344E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998688339519	WITHOUT_CLASSIFICATION	1.3116604813909288E-7	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999955186028089	WITHOUT_CLASSIFICATION	4.4813971911422105E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999999448058207	WITHOUT_CLASSIFICATION	5.519417930294011E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999995387810396	WITHOUT_CLASSIFICATION	4.612189603194569E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999560313139739	WITHOUT_CLASSIFICATION	4.3968686026015106E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999984491186731	WITHOUT_CLASSIFICATION	1.5508813268633426E-6	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999991220323841	WITHOUT_CLASSIFICATION	8.779676159813879E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999993029065457	WITHOUT_CLASSIFICATION	6.970934543252412E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999992639865816	WITHOUT_CLASSIFICATION	7.360134183331855E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9990931538473394	WITHOUT_CLASSIFICATION	9.068461526605725E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999755702687745	WITHOUT_CLASSIFICATION	2.4429731225480542E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999997867676462	WITHOUT_CLASSIFICATION	2.1323235378829349E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999996324827257	WITHOUT_CLASSIFICATION	3.6751727434383403E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999996324827257	WITHOUT_CLASSIFICATION	3.6751727434383403E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999997288917784	WITHOUT_CLASSIFICATION	2.7110822158978433E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999995323179256	WITHOUT_CLASSIFICATION	4.6768207430844485E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999964739793828	WITHOUT_CLASSIFICATION	3.526020617156723E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999964739793828	WITHOUT_CLASSIFICATION	3.526020617156723E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999604881172	WITHOUT_CLASSIFICATION	3.951188273215548E-8	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999986720592665	WITHOUT_CLASSIFICATION	1.3279407334189134E-6	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999659164439	WITHOUT_CLASSIFICATION	3.408355609725824E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999992662806498	WITHOUT_CLASSIFICATION	7.337193502430644E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999965743953464	WITHOUT_CLASSIFICATION	3.4256046536259287E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995690631559	WITHOUT_CLASSIFICATION	4.309368440632597E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998037010277	WITHOUT_CLASSIFICATION	1.9629897234409512E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998037010277	WITHOUT_CLASSIFICATION	1.9629897234409512E-7	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990688182452	WITHOUT_CLASSIFICATION	9.311817548124584E-7	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999992578145053	WITHOUT_CLASSIFICATION	7.421854946736789E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999626702119073	WITHOUT_CLASSIFICATION	3.732978809275661E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998474645848	WITHOUT_CLASSIFICATION	1.5253541507983125E-7	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998474645848	WITHOUT_CLASSIFICATION	1.5253541507983125E-7	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999990501233234	WITHOUT_CLASSIFICATION	9.498766767410277E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999996452654277	WITHOUT_CLASSIFICATION	3.547345722688407E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999997931582192	WITHOUT_CLASSIFICATION	2.0684178086032699E-7	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999989213953246	WITHOUT_CLASSIFICATION	1.078604675303291E-6	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996203854129	WITHOUT_CLASSIFICATION	3.7961458707932745E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999978831944091	WITHOUT_CLASSIFICATION	2.1168055909396504E-6	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999997967906569	WITHOUT_CLASSIFICATION	2.032093430706811E-7	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999996618867799	WITHOUT_CLASSIFICATION	3.3811322011252603E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999993573485597	WITHOUT_CLASSIFICATION	6.426514403767539E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999977451299853	WITHOUT_CLASSIFICATION	2.254870014763204E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999994515410954	WITHOUT_CLASSIFICATION	5.48458904608394E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999963440859343	WITHOUT_CLASSIFICATION	3.6559140656005067E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9998180778182254	WITHOUT_CLASSIFICATION	1.8192218177451235E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999989299380347	WITHOUT_CLASSIFICATION	1.0700619652554096E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.999997267557273	WITHOUT_CLASSIFICATION	2.7324427269812704E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999979668250556	WITHOUT_CLASSIFICATION	2.0331749443777183E-6	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999682220905	WITHOUT_CLASSIFICATION	3.177790956036136E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999997988618612	WITHOUT_CLASSIFICATION	2.011381388893991E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999991248987563	WITHOUT_CLASSIFICATION	8.751012435811105E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999962796020152	WITHOUT_CLASSIFICATION	3.720397984848471E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999988148627177	WITHOUT_CLASSIFICATION	1.1851372822858554E-6	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999991161234802	WITHOUT_CLASSIFICATION	8.838765197652772E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999030795526155	WITHOUT_CLASSIFICATION	9.692044738456681E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999361765173841	WITHOUT_CLASSIFICATION	6.382348261588481E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999613951290915	WITHOUT_CLASSIFICATION	3.8604870908402495E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999990871418519	WITHOUT_CLASSIFICATION	9.128581479867394E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988865049545	WITHOUT_CLASSIFICATION	1.113495045501081E-6	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999480960779901	WITHOUT_CLASSIFICATION	5.190392200985482E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999725602996	WITHOUT_CLASSIFICATION	2.743970041481811E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999329800264	WITHOUT_CLASSIFICATION	6.701997352431602E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999842499335	WITHOUT_CLASSIFICATION	1.5750066475249133E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999517781603	WITHOUT_CLASSIFICATION	4.822183982628446E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999074633238	WITHOUT_CLASSIFICATION	9.253667621091628E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999945063681894	WITHOUT_CLASSIFICATION	5.493631810487853E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999298677784	WITHOUT_CLASSIFICATION	7.013222168763826E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999670564399724	WITHOUT_CLASSIFICATION	3.294356002755632E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999692126406312	WITHOUT_CLASSIFICATION	3.078735936874242E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999998172845213	WITHOUT_CLASSIFICATION	1.8271547870763622E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999992291288624	WITHOUT_CLASSIFICATION	7.708711375368662E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999997155362516	WITHOUT_CLASSIFICATION	2.8446374842511407E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998616156459	WITHOUT_CLASSIFICATION	1.3838435408119723E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996569995488	WITHOUT_CLASSIFICATION	3.4300045109830324E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999995607451643	WITHOUT_CLASSIFICATION	4.392548357033357E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998605720112	WITHOUT_CLASSIFICATION	1.3942798890162592E-7	TEST
// Print page	WITHOUT_CLASSIFICATION	0.999997968850695	WITHOUT_CLASSIFICATION	2.0311493050462645E-6	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996158457962	WITHOUT_CLASSIFICATION	3.841542037645647E-7	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999993727015323	WITHOUT_CLASSIFICATION	6.272984677261631E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999964313458541	WITHOUT_CLASSIFICATION	3.568654145950004E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999995283817038	WITHOUT_CLASSIFICATION	4.7161829622497745E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999989024051118	WITHOUT_CLASSIFICATION	1.097594888179349E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999993420368742	WITHOUT_CLASSIFICATION	6.579631258245011E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999997758349303	WITHOUT_CLASSIFICATION	2.2416506968996367E-7	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999956386655618	WITHOUT_CLASSIFICATION	4.3613344381331865E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999754925643	WITHOUT_CLASSIFICATION	2.4507435779491194E-8	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999999398849065	WITHOUT_CLASSIFICATION	6.011509349990569E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999998689130913	WITHOUT_CLASSIFICATION	1.3108690861198694E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999998765653692	WITHOUT_CLASSIFICATION	1.2343463087995145E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999995733282961	WITHOUT_CLASSIFICATION	4.2667170391988946E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999999817056202	WITHOUT_CLASSIFICATION	1.8294379805460462E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999399473626437	WITHOUT_CLASSIFICATION	6.005263735628604E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991690307234	WITHOUT_CLASSIFICATION	8.309692766623349E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999991690307234	WITHOUT_CLASSIFICATION	8.309692766623349E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999573311357329	WITHOUT_CLASSIFICATION	4.26688642670207E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999461787996566	WITHOUT_CLASSIFICATION	5.3821200343396324E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999547769481	WITHOUT_CLASSIFICATION	4.522305192612231E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999997934838547	WITHOUT_CLASSIFICATION	2.0651614536251988E-7	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999978637092262	WITHOUT_CLASSIFICATION	2.136290773904815E-6	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999931926999422	WITHOUT_CLASSIFICATION	6.807300057735018E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999058366247	WITHOUT_CLASSIFICATION	9.416337536920735E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999806818147	WITHOUT_CLASSIFICATION	1.9318185255816792E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999981538362024	WITHOUT_CLASSIFICATION	1.8461637975191965E-6	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999957846160973	WITHOUT_CLASSIFICATION	4.215383902784163E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999282229979	WITHOUT_CLASSIFICATION	7.17770020663484E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999921686360804	WITHOUT_CLASSIFICATION	7.83136391962848E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999990839345526	WITHOUT_CLASSIFICATION	9.160654474715197E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999338931588	WITHOUT_CLASSIFICATION	6.610684115334365E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999979297500803	WITHOUT_CLASSIFICATION	2.070249919675033E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999979297500803	WITHOUT_CLASSIFICATION	2.070249919675033E-6	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999134301287	WITHOUT_CLASSIFICATION	8.656987136835985E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999955531257438	WITHOUT_CLASSIFICATION	4.446874256203084E-6	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999987933877873	WITHOUT_CLASSIFICATION	1.2066122127050216E-6	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999999993303903	WITHOUT_CLASSIFICATION	6.696097035782513E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989255372373	WITHOUT_CLASSIFICATION	1.0744627625620213E-6	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872600998526	WITHOUT_CLASSIFICATION	1.2739900147396375E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999947810788639	WITHOUT_CLASSIFICATION	5.218921136199798E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999991078888013	WITHOUT_CLASSIFICATION	8.921111986347652E-7	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999944173803	WITHOUT_CLASSIFICATION	5.582619676193656E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999995868423042	WITHOUT_CLASSIFICATION	4.1315769585790443E-7	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999502396304	WITHOUT_CLASSIFICATION	4.976036968168719E-8	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999956286097766	WITHOUT_CLASSIFICATION	4.371390223339242E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999991097466	WITHOUT_CLASSIFICATION	8.902532784408624E-10	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994440426403	WITHOUT_CLASSIFICATION	5.559573596888635E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999941671078693	WITHOUT_CLASSIFICATION	5.832892130714777E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997014962905	WITHOUT_CLASSIFICATION	2.9850370950565277E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999908303401097	WITHOUT_CLASSIFICATION	9.169659890267366E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999998059993355	WITHOUT_CLASSIFICATION	1.9400066449241346E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999222149246	WITHOUT_CLASSIFICATION	7.778507536307378E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999999128222	WITHOUT_CLASSIFICATION	8.717780291201339E-10	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999876585132	WITHOUT_CLASSIFICATION	1.2341486782906239E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999710867943	WITHOUT_CLASSIFICATION	2.891320572897506E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999994338067443	WITHOUT_CLASSIFICATION	5.661932558017313E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999415160338481	WITHOUT_CLASSIFICATION	5.848396615198254E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999831736389853	WITHOUT_CLASSIFICATION	1.682636101477381E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999985033339542	WITHOUT_CLASSIFICATION	1.4966660458656818E-6	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999397726048	WITHOUT_CLASSIFICATION	6.022739522067463E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999995708818683	WITHOUT_CLASSIFICATION	4.2911813176203564E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999959646119496	WITHOUT_CLASSIFICATION	4.03538805034252E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999993897523715	WITHOUT_CLASSIFICATION	6.10247628580897E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999802952486397	WITHOUT_CLASSIFICATION	1.970475136035025E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998617805462	WITHOUT_CLASSIFICATION	1.3821945371636454E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999992627294	WITHOUT_CLASSIFICATION	7.372705949833078E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997306179628	WITHOUT_CLASSIFICATION	2.6938203720899355E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999999650096352	WITHOUT_CLASSIFICATION	3.4990364810569226E-8	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995086687629	WITHOUT_CLASSIFICATION	4.913312370598513E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999901449901	WITHOUT_CLASSIFICATION	9.855009884490346E-9	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999969667290763	WITHOUT_CLASSIFICATION	3.0332709236979555E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999991618196317	WITHOUT_CLASSIFICATION	8.381803683006597E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999347872592	WITHOUT_CLASSIFICATION	6.521274079794318E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998093853945	WITHOUT_CLASSIFICATION	1.9061460561748356E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998093853945	WITHOUT_CLASSIFICATION	1.9061460561748356E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999999846553013	WITHOUT_CLASSIFICATION	1.5344698704060548E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998811000596	WITHOUT_CLASSIFICATION	1.1889994046443065E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999378161388	WITHOUT_CLASSIFICATION	6.218386112795224E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999997941192571	WITHOUT_CLASSIFICATION	2.0588074292438983E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998027455694	WITHOUT_CLASSIFICATION	1.972544304564368E-7	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999411268561	WITHOUT_CLASSIFICATION	5.887314397849862E-8	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999995831348016	WITHOUT_CLASSIFICATION	4.1686519824417715E-7	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999960691176178	WITHOUT_CLASSIFICATION	3.930882382190642E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999996097184	WITHOUT_CLASSIFICATION	3.902815936980263E-9	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963977847067	WITHOUT_CLASSIFICATION	3.6022152933065225E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960793493907	WITHOUT_CLASSIFICATION	3.920650609298248E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999614383139128	WITHOUT_CLASSIFICATION	3.856168608720047E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999972337845837	WITHOUT_CLASSIFICATION	2.7662154161997396E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999745047248	WITHOUT_CLASSIFICATION	2.5495275308697044E-8	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999981937296926	WITHOUT_CLASSIFICATION	1.8062703075295459E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999994377744873	WITHOUT_CLASSIFICATION	5.622255127334348E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999780076144	WITHOUT_CLASSIFICATION	2.1992385545251066E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999995081861	WITHOUT_CLASSIFICATION	4.918138880465836E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999998508293785	WITHOUT_CLASSIFICATION	1.4917062156127845E-7	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999991466540761	WITHOUT_CLASSIFICATION	8.533459239786872E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999541245905	WITHOUT_CLASSIFICATION	4.5875409583372866E-8	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999994727918512	WITHOUT_CLASSIFICATION	5.272081489306282E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999954962982616	WITHOUT_CLASSIFICATION	4.503701738413401E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999989900771341	WITHOUT_CLASSIFICATION	1.0099228659111191E-5	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999998610522619	WITHOUT_CLASSIFICATION	1.3894773810680453E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999896146127581	WITHOUT_CLASSIFICATION	1.0385387241946669E-5	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999774430773	WITHOUT_CLASSIFICATION	2.2556922623461403E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999392992158	WITHOUT_CLASSIFICATION	6.070078421074581E-8	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999993518473086	WITHOUT_CLASSIFICATION	6.481526914988939E-7	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999999853876315	WITHOUT_CLASSIFICATION	1.4612368496294891E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999464021178	WITHOUT_CLASSIFICATION	5.35978822852913E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999870714323	WITHOUT_CLASSIFICATION	1.2928567659377015E-8	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999997831961726	WITHOUT_CLASSIFICATION	2.1680382747462689E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999333402673	WITHOUT_CLASSIFICATION	6.66597327392209E-8	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999994690517464	WITHOUT_CLASSIFICATION	5.309482535339241E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999996131377955	WITHOUT_CLASSIFICATION	3.8686220451578045E-7	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999035937586	WITHOUT_CLASSIFICATION	9.640624150633464E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999779728044	WITHOUT_CLASSIFICATION	2.2027195559969748E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999998498894593	WITHOUT_CLASSIFICATION	1.5011054069740411E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999958870829541	WITHOUT_CLASSIFICATION	4.112917045965783E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999980468879026	WITHOUT_CLASSIFICATION	1.9531120973458784E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999920931043	WITHOUT_CLASSIFICATION	7.906895693655259E-9	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999942356805	WITHOUT_CLASSIFICATION	5.764319534320228E-9	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999998433348473	WITHOUT_CLASSIFICATION	1.566651527031853E-7	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999942148571	WITHOUT_CLASSIFICATION	5.785142986073723E-9	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999994115742804	WITHOUT_CLASSIFICATION	5.884257195506331E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999893585049583	WITHOUT_CLASSIFICATION	1.0641495041679906E-5	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999990839345526	WITHOUT_CLASSIFICATION	9.160654474715197E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999945666925679	WITHOUT_CLASSIFICATION	5.433307432006406E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999992371471053	WITHOUT_CLASSIFICATION	7.628528947383412E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999934539643242	WITHOUT_CLASSIFICATION	6.546035675869195E-6	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999997700217859	WITHOUT_CLASSIFICATION	2.2997821412383802E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999198227913	WITHOUT_CLASSIFICATION	8.017720866080629E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999406619389	WITHOUT_CLASSIFICATION	5.93380610655881E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999999118289223	WITHOUT_CLASSIFICATION	8.817107769213595E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999081511793565	WITHOUT_CLASSIFICATION	9.184882064344014E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999991136761223	WITHOUT_CLASSIFICATION	8.863238777242223E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999990428217495	WITHOUT_CLASSIFICATION	9.571782506159293E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998278114686	WITHOUT_CLASSIFICATION	1.7218853146440302E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999987806038482	WITHOUT_CLASSIFICATION	1.2193961519104002E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999989804800857	WITHOUT_CLASSIFICATION	1.0195199143116293E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999471077481	WITHOUT_CLASSIFICATION	5.28922520130584E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976216396784	WITHOUT_CLASSIFICATION	2.378360321657399E-6	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999825390597736	WITHOUT_CLASSIFICATION	1.7460940226341302E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999639471683006	WITHOUT_CLASSIFICATION	3.605283169940222E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998056880786	WITHOUT_CLASSIFICATION	1.9431192141693432E-7	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999953765669217	WITHOUT_CLASSIFICATION	4.6234330783580395E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976216396784	WITHOUT_CLASSIFICATION	2.378360321657399E-6	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9994158894630458	WITHOUT_CLASSIFICATION	5.841105369542376E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999977845283248	WITHOUT_CLASSIFICATION	2.215471675163886E-6	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999746197538	WITHOUT_CLASSIFICATION	2.5380246249293617E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999986588329106	WITHOUT_CLASSIFICATION	1.3411670894039222E-6	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999624570599476	WITHOUT_CLASSIFICATION	3.754294005236365E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999810998289	WITHOUT_CLASSIFICATION	1.890017109874723E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999144870774	WITHOUT_CLASSIFICATION	8.551292261914354E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999957340700253	WITHOUT_CLASSIFICATION	4.265929974677133E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998626721353	WITHOUT_CLASSIFICATION	1.3732786471021212E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999765135861	WITHOUT_CLASSIFICATION	2.3486413947676726E-8	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999987557278881	WITHOUT_CLASSIFICATION	1.2442721119801842E-6	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996962665444385	WITHOUT_CLASSIFICATION	3.0373345556147113E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999875024908	WITHOUT_CLASSIFICATION	1.2497509284975344E-8	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999118770956	WITHOUT_CLASSIFICATION	8.81229044651024E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999998463255928	WITHOUT_CLASSIFICATION	1.5367440727025655E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999892357831	WITHOUT_CLASSIFICATION	1.0764216769637471E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999922901879	WITHOUT_CLASSIFICATION	7.709811989682112E-9	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998430162608	WITHOUT_CLASSIFICATION	1.5698373918828823E-7	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999981383655031	WITHOUT_CLASSIFICATION	1.8616344968669502E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999998853855143	WITHOUT_CLASSIFICATION	1.1461448567111714E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999439782012	WITHOUT_CLASSIFICATION	5.602179878920526E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999999867365371	WITHOUT_CLASSIFICATION	1.3263462896218977E-7	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999884854062	WITHOUT_CLASSIFICATION	1.1514593784702908E-8	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999965864207	WITHOUT_CLASSIFICATION	3.4135793322471307E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999852397292	WITHOUT_CLASSIFICATION	1.476027069170577E-8	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999422946115	WITHOUT_CLASSIFICATION	5.770538850214398E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999985935222075	WITHOUT_CLASSIFICATION	1.4064777923568972E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997718371285	WITHOUT_CLASSIFICATION	2.2816287148650598E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999994534900699	WITHOUT_CLASSIFICATION	5.465099301020791E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999997036764856	WITHOUT_CLASSIFICATION	2.9632351440852366E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998525089778	WITHOUT_CLASSIFICATION	1.4749102214996237E-7	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999928434436458	WITHOUT_CLASSIFICATION	7.156556354254762E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999987658539741	WITHOUT_CLASSIFICATION	1.2341460259642218E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999880207823	WITHOUT_CLASSIFICATION	1.1979217704318671E-8	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999684893768	WITHOUT_CLASSIFICATION	3.1510623232690465E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999725271665	WITHOUT_CLASSIFICATION	2.7472833511973663E-8	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999976734055295	WITHOUT_CLASSIFICATION	2.3265944705544914E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999402563615	WITHOUT_CLASSIFICATION	5.97436384557953E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999541629367	WITHOUT_CLASSIFICATION	4.5837063296422395E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997093273122	WITHOUT_CLASSIFICATION	2.9067268781725725E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999698931281	WITHOUT_CLASSIFICATION	3.0106871889682614E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999698931281	WITHOUT_CLASSIFICATION	3.0106871889682614E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999944200161035	WITHOUT_CLASSIFICATION	5.5799838964468564E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998669132882	WITHOUT_CLASSIFICATION	1.3308671175696327E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997694135745	WITHOUT_CLASSIFICATION	2.3058642554086392E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.9990484275102193	WITHOUT_CLASSIFICATION	9.515724897807831E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991507342529	WITHOUT_CLASSIFICATION	8.49265747138128E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999991507342529	WITHOUT_CLASSIFICATION	8.49265747138128E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999847374881194	WITHOUT_CLASSIFICATION	1.5262511880523287E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998197147655	WITHOUT_CLASSIFICATION	1.802852345381431E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998149821880258	WITHOUT_CLASSIFICATION	1.8501781197412132E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999517162084159	WITHOUT_CLASSIFICATION	4.8283791584039824E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999997987370753	WITHOUT_CLASSIFICATION	2.0126292475991498E-7	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999970801082169	WITHOUT_CLASSIFICATION	2.9198917830644822E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998119531655	WITHOUT_CLASSIFICATION	1.8804683465293473E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999376930974	WITHOUT_CLASSIFICATION	6.230690262016649E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999996187016345	WITHOUT_CLASSIFICATION	3.8129836547385824E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907683185775	WITHOUT_CLASSIFICATION	9.231681422649396E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907683185775	WITHOUT_CLASSIFICATION	9.231681422649396E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999943606440815	WITHOUT_CLASSIFICATION	5.639355918485085E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999932805450237	WITHOUT_CLASSIFICATION	6.719454976382228E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999978486809002	WITHOUT_CLASSIFICATION	2.1513190996407664E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998046941095748	WITHOUT_CLASSIFICATION	1.953058904251447E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999925231490856	WITHOUT_CLASSIFICATION	7.476850914331394E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990963043256	WITHOUT_CLASSIFICATION	9.036956743095919E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754312837021	WITHOUT_CLASSIFICATION	2.456871629791595E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997666691451	WITHOUT_CLASSIFICATION	2.3333085481171934E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999987020909753	WITHOUT_CLASSIFICATION	1.2979090247118709E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999951222284178	WITHOUT_CLASSIFICATION	4.877771582107311E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999995413008028	WITHOUT_CLASSIFICATION	4.586991971056394E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999765135861	WITHOUT_CLASSIFICATION	2.3486413947676726E-8	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999912548282818	WITHOUT_CLASSIFICATION	8.745171718229575E-6	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999195164673407	WITHOUT_CLASSIFICATION	8.048353265928756E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999996473186864	WITHOUT_CLASSIFICATION	3.5268131349837466E-7	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999986135453022	WITHOUT_CLASSIFICATION	1.3864546978403057E-6	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999674901917426	WITHOUT_CLASSIFICATION	3.2509808257396745E-5	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999904511789415	WITHOUT_CLASSIFICATION	9.548821058431602E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999950203618169	WITHOUT_CLASSIFICATION	4.9796381830349256E-6	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999788219754	WITHOUT_CLASSIFICATION	2.1178024574736565E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999992252915607	WITHOUT_CLASSIFICATION	7.747084392172989E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999975592497832	WITHOUT_CLASSIFICATION	2.4407502167024167E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999975592497832	WITHOUT_CLASSIFICATION	2.4407502167024167E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995722523756	WITHOUT_CLASSIFICATION	4.2774762435956984E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999999506353	WITHOUT_CLASSIFICATION	4.936470316097315E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999285789111411	WITHOUT_CLASSIFICATION	7.142108885886964E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999995598837902	WITHOUT_CLASSIFICATION	4.401162097047173E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999994488617139	WITHOUT_CLASSIFICATION	5.511382860458669E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999655642321	WITHOUT_CLASSIFICATION	3.443576786377375E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999999953966397	WITHOUT_CLASSIFICATION	4.60336029992019E-8	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999670723235	WITHOUT_CLASSIFICATION	3.2927676479385005E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999248968199	WITHOUT_CLASSIFICATION	7.510318015479436E-8	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999999027657112	WITHOUT_CLASSIFICATION	9.723428879929067E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994491931957	WITHOUT_CLASSIFICATION	5.508068043008208E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999991967698478	WITHOUT_CLASSIFICATION	8.032301521115112E-7	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998665647593	WITHOUT_CLASSIFICATION	1.3343524073084417E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99999904872218	WITHOUT_CLASSIFICATION	9.512778199551365E-7	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999974330592426	WITHOUT_CLASSIFICATION	2.5669407574055173E-6	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998898344532	WITHOUT_CLASSIFICATION	1.1016554671828153E-7	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998934857399	WITHOUT_CLASSIFICATION	1.0651426017869867E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987530735995	WITHOUT_CLASSIFICATION	1.2469264005216092E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999924179591368	WITHOUT_CLASSIFICATION	7.582040863150465E-6	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998009812562	WITHOUT_CLASSIFICATION	1.9901874373045682E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999881485445	WITHOUT_CLASSIFICATION	1.1851455401211028E-8	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997544641376	WITHOUT_CLASSIFICATION	2.4553586248071675E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999997931582192	WITHOUT_CLASSIFICATION	2.0684178086032699E-7	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999808916519	WITHOUT_CLASSIFICATION	1.9108348097303383E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999238353697	WITHOUT_CLASSIFICATION	7.616463034465027E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999238353697	WITHOUT_CLASSIFICATION	7.616463034465027E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999957200728322	WITHOUT_CLASSIFICATION	4.279927167780181E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999991845555853	WITHOUT_CLASSIFICATION	8.154444147533234E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999997955650788	WITHOUT_CLASSIFICATION	2.044349211078203E-7	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999988918616354	WITHOUT_CLASSIFICATION	1.108138364630289E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996481665381	WITHOUT_CLASSIFICATION	3.5183346198847813E-7	TEST
