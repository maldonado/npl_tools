//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991684309398653	WITHOUT_CLASSIFICATION	8.315690601347712E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999872501432742	WITHOUT_CLASSIFICATION	1.2749856725864172E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395171764	WITHOUT_CLASSIFICATION	6.048282363836303E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999999419493251	WITHOUT_CLASSIFICATION	5.805067489507995E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412483469	WITHOUT_CLASSIFICATION	5.875165303090486E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412483469	WITHOUT_CLASSIFICATION	5.875165303090486E-8	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999625002435	WITHOUT_CLASSIFICATION	3.749975657923165E-8	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998159516706	WITHOUT_CLASSIFICATION	1.8404832947687273E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999982126050152	WITHOUT_CLASSIFICATION	1.7873949848049755E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759147591	WITHOUT_CLASSIFICATION	2.4085241017255554E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999998159369584	WITHOUT_CLASSIFICATION	1.8406304152582542E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999998159369584	WITHOUT_CLASSIFICATION	1.8406304152582542E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807376582	WITHOUT_CLASSIFICATION	7.192623418702211E-7	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999901060443	WITHOUT_CLASSIFICATION	9.893955624298088E-9	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999781421056	WITHOUT_CLASSIFICATION	2.1857894376951273E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990453679888	WITHOUT_CLASSIFICATION	9.546320111413888E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999679837552	WITHOUT_CLASSIFICATION	3.201624466143302E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855661898	WITHOUT_CLASSIFICATION	1.014433810159034E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999973752217536	WITHOUT_CLASSIFICATION	2.6247782464995876E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999974569203118	WITHOUT_CLASSIFICATION	2.5430796881887167E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880453508	WITHOUT_CLASSIFICATION	2.8119546492619535E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734822626882	WITHOUT_CLASSIFICATION	1.2651773731180266E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999988925319542	WITHOUT_CLASSIFICATION	1.1074680457940612E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999988135307818	WITHOUT_CLASSIFICATION	1.186469218283407E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999672167762	WITHOUT_CLASSIFICATION	3.278322378630475E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454178486	WITHOUT_CLASSIFICATION	1.854582151444741E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454178486	WITHOUT_CLASSIFICATION	1.854582151444741E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999281681486	WITHOUT_CLASSIFICATION	7.183185144485066E-8	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999978441705942	WITHOUT_CLASSIFICATION	2.155829405835621E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999869590457	WITHOUT_CLASSIFICATION	1.3040954276410413E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999984172261	WITHOUT_CLASSIFICATION	1.5827739015269976E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999996817106501	WITHOUT_CLASSIFICATION	3.1828934984669545E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.5438924358473677	WITHOUT_CLASSIFICATION	0.45610756415263237	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5438924358473677	WITHOUT_CLASSIFICATION	0.45610756415263237	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998030768251	WITHOUT_CLASSIFICATION	1.969231748535083E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999984127086736	WITHOUT_CLASSIFICATION	1.5872913263159788E-6	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999965926039	WITHOUT_CLASSIFICATION	3.4073961103665778E-9	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993499991836	WITHOUT_CLASSIFICATION	6.500008164531376E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999999801506037	WITHOUT_CLASSIFICATION	1.984939629929919E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992919093608	WITHOUT_CLASSIFICATION	7.080906391776235E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993184102174	WITHOUT_CLASSIFICATION	6.815897826372303E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999713013125	WITHOUT_CLASSIFICATION	2.8698687612924695E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999948822404838	WITHOUT_CLASSIFICATION	5.1177595162177625E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999986682679	WITHOUT_CLASSIFICATION	1.331732101774084E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995222594799	WITHOUT_CLASSIFICATION	4.777405202249691E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999948822404838	WITHOUT_CLASSIFICATION	5.1177595162177625E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995222594799	WITHOUT_CLASSIFICATION	4.777405202249691E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995190606099	WITHOUT_CLASSIFICATION	4.809393900105301E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.997624695583194	WITHOUT_CLASSIFICATION	0.00237530441680598	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993950193219	WITHOUT_CLASSIFICATION	6.049806781655426E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996677773515	WITHOUT_CLASSIFICATION	3.322226485315565E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999985317528466	WITHOUT_CLASSIFICATION	1.4682471533734503E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999862168842666	WITHOUT_CLASSIFICATION	1.3783115733280054E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999239571807567	WITHOUT_CLASSIFICATION	7.604281924332463E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999999690344608	WITHOUT_CLASSIFICATION	3.0965539195011357E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998280737389	WITHOUT_CLASSIFICATION	1.7192626105682074E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999865418484853	WITHOUT_CLASSIFICATION	1.3458151514747846E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994750594395	WITHOUT_CLASSIFICATION	5.249405604798043E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.999999951767164	WITHOUT_CLASSIFICATION	4.823283604081262E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999914991621	WITHOUT_CLASSIFICATION	8.500837820427037E-9	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999718310004	WITHOUT_CLASSIFICATION	2.8168999586971057E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999885799863	WITHOUT_CLASSIFICATION	1.1420013622767271E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999972877954902	WITHOUT_CLASSIFICATION	2.712204509679916E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999890321352	WITHOUT_CLASSIFICATION	1.0967864776286663E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999815067294	WITHOUT_CLASSIFICATION	1.8493270525826806E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999936777819	WITHOUT_CLASSIFICATION	6.322218104217219E-8	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999520976387	WITHOUT_CLASSIFICATION	4.7902361293144736E-8	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999997873258016	WITHOUT_CLASSIFICATION	2.1267419836633616E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999742498574	WITHOUT_CLASSIFICATION	2.5750142569057342E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999952698223	WITHOUT_CLASSIFICATION	4.7301776887647014E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980904018335	WITHOUT_CLASSIFICATION	1.9095981665211373E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999960914340655	WITHOUT_CLASSIFICATION	3.908565934406158E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999882129887	WITHOUT_CLASSIFICATION	1.178701132050947E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999980786514	WITHOUT_CLASSIFICATION	1.921348591256892E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999993005940173	WITHOUT_CLASSIFICATION	6.99405982751171E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999990206950835	WITHOUT_CLASSIFICATION	9.793049164784747E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999992240989248	WITHOUT_CLASSIFICATION	7.759010752458759E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999713807651	WITHOUT_CLASSIFICATION	2.861923490890993E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999896209412	WITHOUT_CLASSIFICATION	1.0379058759961119E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999376347671	WITHOUT_CLASSIFICATION	6.236523290682617E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999964455375	WITHOUT_CLASSIFICATION	3.5544624965411494E-9	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999415670354	WITHOUT_CLASSIFICATION	5.843296449803507E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999582250085	WITHOUT_CLASSIFICATION	4.177499152415271E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999964455375	WITHOUT_CLASSIFICATION	3.5544624965411494E-9	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999835577303	WITHOUT_CLASSIFICATION	1.6442269653814967E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999987386324	WITHOUT_CLASSIFICATION	1.2613676120585788E-8	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999998334075995	WITHOUT_CLASSIFICATION	1.6659240061842726E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999276601199	WITHOUT_CLASSIFICATION	7.233988010644885E-8	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999655575925	WITHOUT_CLASSIFICATION	3.4442407472214236E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843441	WITHOUT_CLASSIFICATION	1.615655914869929E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843441	WITHOUT_CLASSIFICATION	1.615655914869929E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999995430077331	WITHOUT_CLASSIFICATION	4.569922668087205E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998583778834	WITHOUT_CLASSIFICATION	1.4162211663241586E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999974885778435	WITHOUT_CLASSIFICATION	2.5114221565951835E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999815432217	WITHOUT_CLASSIFICATION	1.8456778340968044E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999718345122	WITHOUT_CLASSIFICATION	2.816548778605236E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999709759544	WITHOUT_CLASSIFICATION	2.902404566191706E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999435823009	WITHOUT_CLASSIFICATION	5.641769898490683E-8	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.999999994801394	WITHOUT_CLASSIFICATION	5.198605987209571E-9	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999191101941	WITHOUT_CLASSIFICATION	8.088980586562963E-8	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999601709978	WITHOUT_CLASSIFICATION	3.982900224357891E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739160765	WITHOUT_CLASSIFICATION	2.6083923495407696E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739160765	WITHOUT_CLASSIFICATION	2.6083923495407696E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999835029939	WITHOUT_CLASSIFICATION	1.6497006073635364E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999648758569	WITHOUT_CLASSIFICATION	3.512414324344545E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999992474289976	WITHOUT_CLASSIFICATION	7.525710024436998E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739160765	WITHOUT_CLASSIFICATION	2.6083923495407696E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999835029939	WITHOUT_CLASSIFICATION	1.6497006073635364E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999835029939	WITHOUT_CLASSIFICATION	1.6497006073635364E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999953023055002	WITHOUT_CLASSIFICATION	4.697694499742667E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999998567677991	WITHOUT_CLASSIFICATION	1.4323220080011477E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999616759534	WITHOUT_CLASSIFICATION	3.83240467196891E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999990458262018	WITHOUT_CLASSIFICATION	9.54173798148963E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997773132105	WITHOUT_CLASSIFICATION	2.226867893719941E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997773132105	WITHOUT_CLASSIFICATION	2.226867893719941E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999996976277823	WITHOUT_CLASSIFICATION	3.0237221780509695E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999988221369336	WITHOUT_CLASSIFICATION	1.1778630663869277E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999998450593203	WITHOUT_CLASSIFICATION	1.5494067963435762E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999335696745	WITHOUT_CLASSIFICATION	6.643032544708402E-8	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999335696745	WITHOUT_CLASSIFICATION	6.643032544708402E-8	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999994416094891	WITHOUT_CLASSIFICATION	5.583905108501512E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974765912772	WITHOUT_CLASSIFICATION	2.5234087227633973E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999536164324099	WITHOUT_CLASSIFICATION	4.638356759015362E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999999940763037	WITHOUT_CLASSIFICATION	5.9236962853963044E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999996238085107	WITHOUT_CLASSIFICATION	3.7619148937815943E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.99999957833548	WITHOUT_CLASSIFICATION	4.2166451988266626E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999986767312928	WITHOUT_CLASSIFICATION	1.3232687071417503E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999996424534304	WITHOUT_CLASSIFICATION	3.575465695758573E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999950728213077	WITHOUT_CLASSIFICATION	4.927178692252584E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999536164324099	WITHOUT_CLASSIFICATION	4.638356759015362E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999903230332694	WITHOUT_CLASSIFICATION	9.676966730674794E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111207375	WITHOUT_CLASSIFICATION	1.4888792624239792E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111207375	WITHOUT_CLASSIFICATION	1.4888792624239792E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999172309432	WITHOUT_CLASSIFICATION	8.276905677826593E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999984318565408	WITHOUT_CLASSIFICATION	1.5681434592721098E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996989918214	WITHOUT_CLASSIFICATION	3.0100817857142645E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999923662587492	WITHOUT_CLASSIFICATION	7.633741250807867E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999967604894027	WITHOUT_CLASSIFICATION	3.2395105972649285E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999923807628592	WITHOUT_CLASSIFICATION	7.619237140823603E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999999658138916	WITHOUT_CLASSIFICATION	3.4186108324203264E-8	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999914172539	WITHOUT_CLASSIFICATION	8.582746132137568E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927778553	WITHOUT_CLASSIFICATION	7.222144554474309E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927778553	WITHOUT_CLASSIFICATION	7.222144554474309E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991684309398653	WITHOUT_CLASSIFICATION	8.315690601347712E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999827779972	WITHOUT_CLASSIFICATION	1.7222002808743708E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.999999914168474	WITHOUT_CLASSIFICATION	8.583152598951433E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999995014068664	WITHOUT_CLASSIFICATION	4.985931334832482E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999996659517035	WITHOUT_CLASSIFICATION	3.340482964610631E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999990124814778	WITHOUT_CLASSIFICATION	9.875185221442088E-7	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999998725550401	WITHOUT_CLASSIFICATION	1.274449599122756E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999999908227845	WITHOUT_CLASSIFICATION	9.177215493729963E-8	TEST
// new	WITHOUT_CLASSIFICATION	0.9999990959305708	WITHOUT_CLASSIFICATION	9.040694292009483E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409014248	WITHOUT_CLASSIFICATION	6.590985750701576E-7	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999994997226218	WITHOUT_CLASSIFICATION	5.00277378119993E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395171764	WITHOUT_CLASSIFICATION	6.048282363836303E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020549379	WITHOUT_CLASSIFICATION	9.794506205845556E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020549379	WITHOUT_CLASSIFICATION	9.794506205845556E-8	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997057225732	WITHOUT_CLASSIFICATION	2.942774266852566E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999969484939712	WITHOUT_CLASSIFICATION	3.051506028736722E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999879885546	WITHOUT_CLASSIFICATION	1.2011445433420306E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999973703457363	WITHOUT_CLASSIFICATION	2.6296542637453557E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999997738011258	WITHOUT_CLASSIFICATION	2.2619887423817904E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999682167787	WITHOUT_CLASSIFICATION	3.178322127006154E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412483469	WITHOUT_CLASSIFICATION	5.875165303090486E-8	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999999005725607	WITHOUT_CLASSIFICATION	9.942743924727639E-8	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996410357552	WITHOUT_CLASSIFICATION	3.5896424474160685E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997688299687	WITHOUT_CLASSIFICATION	2.3117003130735817E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998558390241	WITHOUT_CLASSIFICATION	1.441609760617367E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999998407500783	WITHOUT_CLASSIFICATION	1.5924992174268614E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.999999580079937	WITHOUT_CLASSIFICATION	4.19920063081724E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999998212295351	WITHOUT_CLASSIFICATION	1.7877046474555408E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999441184563	WITHOUT_CLASSIFICATION	5.588154369368224E-8	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999766243431	WITHOUT_CLASSIFICATION	2.3375656796732054E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999999469015505	WITHOUT_CLASSIFICATION	5.3098449601681024E-8	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999999400765432	WITHOUT_CLASSIFICATION	5.99234567980985E-8	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999490989433	WITHOUT_CLASSIFICATION	5.09010567990544E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122105817	WITHOUT_CLASSIFICATION	2.8778941836565244E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409014248	WITHOUT_CLASSIFICATION	6.590985750701576E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020549379	WITHOUT_CLASSIFICATION	9.794506205845556E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999998212295351	WITHOUT_CLASSIFICATION	1.7877046474555408E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999625002435	WITHOUT_CLASSIFICATION	3.749975657923165E-8	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999257317294	WITHOUT_CLASSIFICATION	7.42682706922957E-8	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997480511521	WITHOUT_CLASSIFICATION	2.519488479726401E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999513130187	WITHOUT_CLASSIFICATION	4.8686981385155544E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999986152910794	WITHOUT_CLASSIFICATION	1.3847089206310931E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998522563989	WITHOUT_CLASSIFICATION	1.4774360107816768E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999994787248542	WITHOUT_CLASSIFICATION	5.21275145858126E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999658916343	WITHOUT_CLASSIFICATION	3.4108365648637824E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999896852633879	WITHOUT_CLASSIFICATION	1.031473661203376E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999985806408852	WITHOUT_CLASSIFICATION	1.4193591147611618E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963039082719	WITHOUT_CLASSIFICATION	3.69609172815535E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963039082719	WITHOUT_CLASSIFICATION	3.69609172815535E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998333348106	WITHOUT_CLASSIFICATION	1.6666518943945386E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999799634265	WITHOUT_CLASSIFICATION	2.0036573599867316E-8	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999998333460158	WITHOUT_CLASSIFICATION	1.6665398419625268E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999998012442816	WITHOUT_CLASSIFICATION	1.9875571846043326E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998989471143	WITHOUT_CLASSIFICATION	1.0105288576924671E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999842165987	WITHOUT_CLASSIFICATION	1.5783401291272997E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999991149433418	WITHOUT_CLASSIFICATION	8.850566581700551E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998159516706	WITHOUT_CLASSIFICATION	1.8404832947687273E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999998417567085	WITHOUT_CLASSIFICATION	1.5824329149048228E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999987761419	WITHOUT_CLASSIFICATION	1.2238581079955445E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.999999987761419	WITHOUT_CLASSIFICATION	1.2238581079955445E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998939138263	WITHOUT_CLASSIFICATION	1.0608617373444737E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999995445411328	WITHOUT_CLASSIFICATION	4.554588671686274E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999334990641	WITHOUT_CLASSIFICATION	6.650093584940286E-8	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999727948845	WITHOUT_CLASSIFICATION	2.720511553624451E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999996062756328	WITHOUT_CLASSIFICATION	3.93724367333269E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.999999960550098	WITHOUT_CLASSIFICATION	3.9449902089556305E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409014248	WITHOUT_CLASSIFICATION	6.590985750701576E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395171764	WITHOUT_CLASSIFICATION	6.048282363836303E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999998212295351	WITHOUT_CLASSIFICATION	1.7877046474555408E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999998212295351	WITHOUT_CLASSIFICATION	1.7877046474555408E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998165192069	WITHOUT_CLASSIFICATION	1.8348079307408665E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998165192069	WITHOUT_CLASSIFICATION	1.8348079307408665E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999999008960927	WITHOUT_CLASSIFICATION	9.910390720936273E-8	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999996774706225	WITHOUT_CLASSIFICATION	3.2252937753892665E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999996774706225	WITHOUT_CLASSIFICATION	3.2252937753892665E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999996551278933	WITHOUT_CLASSIFICATION	3.448721066808064E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999999768427089	WITHOUT_CLASSIFICATION	2.3157291085098158E-8	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.999999387267926	WITHOUT_CLASSIFICATION	6.127320739470232E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999975561018726	WITHOUT_CLASSIFICATION	2.4438981273728454E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999677395317	WITHOUT_CLASSIFICATION	3.226046832738382E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759147591	WITHOUT_CLASSIFICATION	2.4085241017255554E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759147591	WITHOUT_CLASSIFICATION	2.4085241017255554E-8	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999997204067284	WITHOUT_CLASSIFICATION	2.79593271723299E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999999652768441	WITHOUT_CLASSIFICATION	3.4723155854871575E-8	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999996252058548	WITHOUT_CLASSIFICATION	3.7479414511202316E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999991872860594	WITHOUT_CLASSIFICATION	8.127139407376981E-7	TEST
// char	WITHOUT_CLASSIFICATION	0.999999808165021	WITHOUT_CLASSIFICATION	1.918349790584848E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999983348880018	WITHOUT_CLASSIFICATION	1.6651119981412866E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999998159369584	WITHOUT_CLASSIFICATION	1.8406304152582542E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025408923	WITHOUT_CLASSIFICATION	4.974591078190345E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025408923	WITHOUT_CLASSIFICATION	4.974591078190345E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807376582	WITHOUT_CLASSIFICATION	7.192623418702211E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807376582	WITHOUT_CLASSIFICATION	7.192623418702211E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999998123163614	WITHOUT_CLASSIFICATION	1.8768363868122404E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999998123163614	WITHOUT_CLASSIFICATION	1.8768363868122404E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974979927	WITHOUT_CLASSIFICATION	1.0250200737222887E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974979927	WITHOUT_CLASSIFICATION	1.0250200737222887E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759147591	WITHOUT_CLASSIFICATION	2.4085241017255554E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999998159369584	WITHOUT_CLASSIFICATION	1.8406304152582542E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025408923	WITHOUT_CLASSIFICATION	4.974591078190345E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025408923	WITHOUT_CLASSIFICATION	4.974591078190345E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807376582	WITHOUT_CLASSIFICATION	7.192623418702211E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999998123163614	WITHOUT_CLASSIFICATION	1.8768363868122404E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999998123163614	WITHOUT_CLASSIFICATION	1.8768363868122404E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974979927	WITHOUT_CLASSIFICATION	1.0250200737222887E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999105826544	WITHOUT_CLASSIFICATION	8.941734567727187E-8	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999989302234066	WITHOUT_CLASSIFICATION	1.0697765934201442E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999991013160607	WITHOUT_CLASSIFICATION	8.986839392610884E-7	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999995465319851	WITHOUT_CLASSIFICATION	4.534680148320749E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999986997889664	WITHOUT_CLASSIFICATION	1.300211033599589E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999993844596051	WITHOUT_CLASSIFICATION	6.155403948919132E-7	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998500312812	WITHOUT_CLASSIFICATION	1.499687187841466E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999996458261661	WITHOUT_CLASSIFICATION	3.5417383399617224E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999994044090166	WITHOUT_CLASSIFICATION	5.955909834370379E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998677127167	WITHOUT_CLASSIFICATION	1.3228728326866474E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999315022616	WITHOUT_CLASSIFICATION	6.84977383471577E-8	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997987787691	WITHOUT_CLASSIFICATION	2.012212308696089E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999995430077331	WITHOUT_CLASSIFICATION	4.569922668087205E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999993844596051	WITHOUT_CLASSIFICATION	6.155403948919132E-7	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854563832963	WITHOUT_CLASSIFICATION	1.4543616703754056E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854563832963	WITHOUT_CLASSIFICATION	1.4543616703754056E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997832551674	WITHOUT_CLASSIFICATION	2.1674483255257857E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998482237359	WITHOUT_CLASSIFICATION	1.517762642084821E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998482237359	WITHOUT_CLASSIFICATION	1.517762642084821E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999998824778281	WITHOUT_CLASSIFICATION	1.1752217181185367E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999987130755209	WITHOUT_CLASSIFICATION	1.2869244791613728E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996067469111	WITHOUT_CLASSIFICATION	3.932530887892918E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999731666649	WITHOUT_CLASSIFICATION	2.6833335053591613E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999731666649	WITHOUT_CLASSIFICATION	2.6833335053591613E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999679837552	WITHOUT_CLASSIFICATION	3.201624466143302E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999925759514	WITHOUT_CLASSIFICATION	7.42404867713522E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999925759514	WITHOUT_CLASSIFICATION	7.42404867713522E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999969194033915	WITHOUT_CLASSIFICATION	3.080596608507702E-6	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999999700669021	WITHOUT_CLASSIFICATION	2.993309791037297E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999233916311	WITHOUT_CLASSIFICATION	7.660836878997698E-8	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999970188150352	WITHOUT_CLASSIFICATION	2.981184964790768E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999986375450001	WITHOUT_CLASSIFICATION	1.362454999873198E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999984520964967	WITHOUT_CLASSIFICATION	1.547903503265594E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855661898	WITHOUT_CLASSIFICATION	1.014433810159034E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999988812760794	WITHOUT_CLASSIFICATION	1.1187239205597007E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9990825289079742	WITHOUT_CLASSIFICATION	9.174710920256971E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.999996883937325	WITHOUT_CLASSIFICATION	3.1160626750618875E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999946478013674	WITHOUT_CLASSIFICATION	5.3521986326121874E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880453508	WITHOUT_CLASSIFICATION	2.8119546492619535E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999684123888	WITHOUT_CLASSIFICATION	3.158761109850661E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999754642124892	WITHOUT_CLASSIFICATION	2.4535787510859585E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999873902322851	WITHOUT_CLASSIFICATION	1.2609767714952397E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880453508	WITHOUT_CLASSIFICATION	2.8119546492619535E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999968275727	WITHOUT_CLASSIFICATION	3.1724273302114103E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999933787611	WITHOUT_CLASSIFICATION	6.621238900517253E-9	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999990289624	WITHOUT_CLASSIFICATION	9.71037599988872E-7	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999978082058515	WITHOUT_CLASSIFICATION	2.1917941485104274E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999994849906175	WITHOUT_CLASSIFICATION	5.150093825240089E-7	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999982465174654	WITHOUT_CLASSIFICATION	1.7534825346718832E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999938569758365	WITHOUT_CLASSIFICATION	6.143024163525748E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999988135307818	WITHOUT_CLASSIFICATION	1.186469218283407E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273927133	WITHOUT_CLASSIFICATION	1.3726072866922577E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999672167762	WITHOUT_CLASSIFICATION	3.278322378630475E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.999999644896681	WITHOUT_CLASSIFICATION	3.5510331901912443E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999968903825	WITHOUT_CLASSIFICATION	3.1096174961546036E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991155814	WITHOUT_CLASSIFICATION	1.6008844186720768E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855661898	WITHOUT_CLASSIFICATION	1.014433810159034E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273927133	WITHOUT_CLASSIFICATION	1.3726072866922577E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.999999644896681	WITHOUT_CLASSIFICATION	3.5510331901912443E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991155814	WITHOUT_CLASSIFICATION	1.6008844186720768E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999866986858	WITHOUT_CLASSIFICATION	1.3301314213836945E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999970439040825	WITHOUT_CLASSIFICATION	2.9560959174829353E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999965562163	WITHOUT_CLASSIFICATION	3.443783746927024E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454178486	WITHOUT_CLASSIFICATION	1.854582151444741E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986377331449	WITHOUT_CLASSIFICATION	1.3622668550761337E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999614906298	WITHOUT_CLASSIFICATION	3.850937013631527E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999981165566266	WITHOUT_CLASSIFICATION	1.883443373365385E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995235011649	WITHOUT_CLASSIFICATION	4.764988351053903E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.999998964199875	WITHOUT_CLASSIFICATION	1.0358001249983345E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999781424936	WITHOUT_CLASSIFICATION	2.185750636248033E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987105519623	WITHOUT_CLASSIFICATION	1.2894480376483618E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999996714443539	WITHOUT_CLASSIFICATION	3.2855564612037774E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999942315554	WITHOUT_CLASSIFICATION	5.768444628482291E-9	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993535205057	WITHOUT_CLASSIFICATION	6.464794942362296E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999983208944457	WITHOUT_CLASSIFICATION	1.6791055541919309E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999999181527474	WITHOUT_CLASSIFICATION	8.184725258987632E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999978441705942	WITHOUT_CLASSIFICATION	2.155829405835621E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999994547259356	WITHOUT_CLASSIFICATION	5.452740643999576E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999984986701891	WITHOUT_CLASSIFICATION	1.5013298108733988E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273927133	WITHOUT_CLASSIFICATION	1.3726072866922577E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999178162426	WITHOUT_CLASSIFICATION	8.218375742250911E-8	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999301242658	WITHOUT_CLASSIFICATION	6.987573420931117E-8	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999600946201	WITHOUT_CLASSIFICATION	3.990537994416802E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999298966251262	WITHOUT_CLASSIFICATION	7.010337487379297E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999995752532065	WITHOUT_CLASSIFICATION	4.247467935393886E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998179385964	WITHOUT_CLASSIFICATION	1.8206140366927997E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999997436364	WITHOUT_CLASSIFICATION	2.5636362389832224E-10	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999877136547	WITHOUT_CLASSIFICATION	1.2286345267484252E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999987374377312	WITHOUT_CLASSIFICATION	1.2625622688474555E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999978599432983	WITHOUT_CLASSIFICATION	2.1400567017024084E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999987020201238	WITHOUT_CLASSIFICATION	1.2979798762485705E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999972645354757	WITHOUT_CLASSIFICATION	2.7354645244390387E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999600584039	WITHOUT_CLASSIFICATION	3.994159622634304E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999984172261	WITHOUT_CLASSIFICATION	1.5827739015269976E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999842070468	WITHOUT_CLASSIFICATION	1.5792953235710723E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999792184804	WITHOUT_CLASSIFICATION	2.0781519556635436E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999981716996831	WITHOUT_CLASSIFICATION	1.828300316893092E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998796273939	WITHOUT_CLASSIFICATION	1.2037260614304474E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999330424976	WITHOUT_CLASSIFICATION	6.695750238742821E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995361877433	WITHOUT_CLASSIFICATION	4.638122567239809E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999732592914	WITHOUT_CLASSIFICATION	2.674070863869771E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999997520478261	WITHOUT_CLASSIFICATION	2.4795217391692596E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999233581033	WITHOUT_CLASSIFICATION	7.664189671517823E-8	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999981375934729	WITHOUT_CLASSIFICATION	1.862406527045045E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994711676681	WITHOUT_CLASSIFICATION	5.288323319553818E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994711676681	WITHOUT_CLASSIFICATION	5.288323319553818E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999919664476091	WITHOUT_CLASSIFICATION	8.033552390938434E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999782763085	WITHOUT_CLASSIFICATION	2.1723691563089468E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999999929022668	WITHOUT_CLASSIFICATION	7.097733198706467E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999999924202691	WITHOUT_CLASSIFICATION	7.57973089426678E-8	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999993012992794	WITHOUT_CLASSIFICATION	6.987007205304076E-7	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996427385781	WITHOUT_CLASSIFICATION	3.572614217793503E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999554435943	WITHOUT_CLASSIFICATION	4.455640574497906E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999928789462406	WITHOUT_CLASSIFICATION	7.121053759372275E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999975790529996	WITHOUT_CLASSIFICATION	2.4209470005099653E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999995238162533	WITHOUT_CLASSIFICATION	4.761837466847518E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999992181865967	WITHOUT_CLASSIFICATION	7.818134032891043E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998709081345	WITHOUT_CLASSIFICATION	1.290918655261454E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999994655736182	WITHOUT_CLASSIFICATION	5.344263817446238E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999998679670502	WITHOUT_CLASSIFICATION	1.3203294989007474E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997670545407	WITHOUT_CLASSIFICATION	2.329454593095397E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998129968863	WITHOUT_CLASSIFICATION	1.8700311370688199E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999999298541828	WITHOUT_CLASSIFICATION	7.014581708267916E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999023895593	WITHOUT_CLASSIFICATION	9.761044070198011E-8	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998440363631	WITHOUT_CLASSIFICATION	1.5596363686376882E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999996759292542	WITHOUT_CLASSIFICATION	3.2407074579783163E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995714944059	WITHOUT_CLASSIFICATION	4.2850559410805093E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995714944059	WITHOUT_CLASSIFICATION	4.2850559410805093E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999980582780356	WITHOUT_CLASSIFICATION	1.9417219643919353E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999980582780356	WITHOUT_CLASSIFICATION	1.9417219643919353E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999233581033	WITHOUT_CLASSIFICATION	7.664189671517823E-8	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997085622513	WITHOUT_CLASSIFICATION	2.914377485989663E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999884057349988	WITHOUT_CLASSIFICATION	1.1594265001238097E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999944213528197	WITHOUT_CLASSIFICATION	5.578647180330156E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999884057349988	WITHOUT_CLASSIFICATION	1.1594265001238097E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999944213528197	WITHOUT_CLASSIFICATION	5.578647180330156E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213441398	WITHOUT_CLASSIFICATION	2.5786558602308575E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999932975076836	WITHOUT_CLASSIFICATION	6.702492316320841E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999819074209	WITHOUT_CLASSIFICATION	1.8092579142371435E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998477892713	WITHOUT_CLASSIFICATION	1.522107287531965E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999991431135837	WITHOUT_CLASSIFICATION	8.568864163510152E-7	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999958486022723	WITHOUT_CLASSIFICATION	4.151397727716091E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999706017098	WITHOUT_CLASSIFICATION	2.9398290212688917E-8	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.999999656748868	WITHOUT_CLASSIFICATION	3.432511318946503E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999960255657884	WITHOUT_CLASSIFICATION	3.974434211630826E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999777519725	WITHOUT_CLASSIFICATION	2.224802753734478E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999998660030691	WITHOUT_CLASSIFICATION	1.339969308606279E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999991177712	WITHOUT_CLASSIFICATION	8.822288484888912E-10	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999996865487298	WITHOUT_CLASSIFICATION	3.134512702008307E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999910165752597	WITHOUT_CLASSIFICATION	8.983424740349173E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999915588035161	WITHOUT_CLASSIFICATION	8.441196483905426E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999918867795759	WITHOUT_CLASSIFICATION	8.113220424101251E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999918867795759	WITHOUT_CLASSIFICATION	8.113220424101251E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999963114832	WITHOUT_CLASSIFICATION	3.6885167689521874E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213441398	WITHOUT_CLASSIFICATION	2.5786558602308575E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999995811322508	WITHOUT_CLASSIFICATION	4.1886774908889355E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999940845861102	WITHOUT_CLASSIFICATION	5.915413889800714E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999998920427287	WITHOUT_CLASSIFICATION	1.079572713429926E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987540793799	WITHOUT_CLASSIFICATION	1.245920620064363E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999067200703955	WITHOUT_CLASSIFICATION	9.32799296046068E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213441398	WITHOUT_CLASSIFICATION	2.5786558602308575E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987540793799	WITHOUT_CLASSIFICATION	1.245920620064363E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999067200703955	WITHOUT_CLASSIFICATION	9.32799296046068E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999908097091272	WITHOUT_CLASSIFICATION	9.190290872788338E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999985835532055	WITHOUT_CLASSIFICATION	1.4164467945122409E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999563353625	WITHOUT_CLASSIFICATION	4.366463735991844E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213441398	WITHOUT_CLASSIFICATION	2.5786558602308575E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213441398	WITHOUT_CLASSIFICATION	2.5786558602308575E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999996004936392	WITHOUT_CLASSIFICATION	3.9950636069747444E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.999999716683135	WITHOUT_CLASSIFICATION	2.8331686494929124E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999995615530906	WITHOUT_CLASSIFICATION	4.384469094614901E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999582234049	WITHOUT_CLASSIFICATION	4.177659505332252E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998122240937	WITHOUT_CLASSIFICATION	1.8777590614067545E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999653387137	WITHOUT_CLASSIFICATION	3.4661286285443334E-8	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999990575629937	WITHOUT_CLASSIFICATION	9.424370064175322E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999528846021	WITHOUT_CLASSIFICATION	4.7115397904607874E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999935421556	WITHOUT_CLASSIFICATION	6.4578443572248575E-9	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999984703415278	WITHOUT_CLASSIFICATION	1.5296584722041121E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999827694033	WITHOUT_CLASSIFICATION	1.7230596723132234E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999998414852086	WITHOUT_CLASSIFICATION	1.5851479144459422E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999230326013	WITHOUT_CLASSIFICATION	7.696739868546831E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999999091865153	WITHOUT_CLASSIFICATION	9.081348480445597E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999953286584	WITHOUT_CLASSIFICATION	4.6713416085834835E-8	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989877054773	WITHOUT_CLASSIFICATION	1.01229452262924E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993499991836	WITHOUT_CLASSIFICATION	6.500008164531376E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999796204053994	WITHOUT_CLASSIFICATION	2.0379594600583162E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999964518856963	WITHOUT_CLASSIFICATION	3.5481143036974993E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998348219596	WITHOUT_CLASSIFICATION	1.651780403792675E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999969942054695	WITHOUT_CLASSIFICATION	3.0057945305828463E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999917806902916	WITHOUT_CLASSIFICATION	8.219309708355575E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999917806902916	WITHOUT_CLASSIFICATION	8.219309708355575E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993499991836	WITHOUT_CLASSIFICATION	6.500008164531376E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996845122011631	WITHOUT_CLASSIFICATION	3.1548779883692194E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999939210136142	WITHOUT_CLASSIFICATION	6.078986385786235E-6	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998522934108749	WITHOUT_CLASSIFICATION	1.477065891251944E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999997483429074	WITHOUT_CLASSIFICATION	2.5165709260259103E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804254956	WITHOUT_CLASSIFICATION	6.319574504375135E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999162370959	WITHOUT_CLASSIFICATION	8.376290413844571E-8	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999618251373	WITHOUT_CLASSIFICATION	3.817486264883164E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999990642194643	WITHOUT_CLASSIFICATION	9.357805357156255E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999959331406	WITHOUT_CLASSIFICATION	4.066859509095922E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999709059423	WITHOUT_CLASSIFICATION	2.909405762095664E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999108481094	WITHOUT_CLASSIFICATION	8.915189057940925E-8	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999917327043507	WITHOUT_CLASSIFICATION	8.267295649346385E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999816434458529	WITHOUT_CLASSIFICATION	1.8356554147100506E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999993847924	WITHOUT_CLASSIFICATION	6.152076575114609E-10	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999887249383	WITHOUT_CLASSIFICATION	1.1275061652922028E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999996499925754	WITHOUT_CLASSIFICATION	3.5000742464010997E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999865761584	WITHOUT_CLASSIFICATION	1.3423841604824148E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999997855395303	WITHOUT_CLASSIFICATION	2.144604698130594E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999868293673	WITHOUT_CLASSIFICATION	1.3170632626280484E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999961028236	WITHOUT_CLASSIFICATION	3.8971763683098365E-9	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999806801098	WITHOUT_CLASSIFICATION	1.9319890249426866E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999830126151	WITHOUT_CLASSIFICATION	1.6987385004993367E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999304799894	WITHOUT_CLASSIFICATION	6.952001070599783E-8	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986678163666	WITHOUT_CLASSIFICATION	1.3321836334280944E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997738647378	WITHOUT_CLASSIFICATION	2.261352622065449E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999857791671	WITHOUT_CLASSIFICATION	1.4220832900659751E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981582458164	WITHOUT_CLASSIFICATION	1.8417541836523352E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999479765637	WITHOUT_CLASSIFICATION	5.202343630631516E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995741014502	WITHOUT_CLASSIFICATION	4.2589854973329315E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998566872357	WITHOUT_CLASSIFICATION	1.433127643505057E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999484526175	WITHOUT_CLASSIFICATION	5.154738249027665E-8	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999723776858	WITHOUT_CLASSIFICATION	2.7622314236109367E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998553793473	WITHOUT_CLASSIFICATION	1.4462065264692114E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998388742405	WITHOUT_CLASSIFICATION	1.6112575942706624E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999722533984	WITHOUT_CLASSIFICATION	2.774660158662716E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999129965136	WITHOUT_CLASSIFICATION	8.700348640473684E-7	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999239423888	WITHOUT_CLASSIFICATION	7.605761116878313E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999006429657	WITHOUT_CLASSIFICATION	9.93570341943871E-8	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998151205224	WITHOUT_CLASSIFICATION	1.848794775066638E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992309944079	WITHOUT_CLASSIFICATION	7.690055920105838E-7	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999994739240726	WITHOUT_CLASSIFICATION	5.260759273077129E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999165780156	WITHOUT_CLASSIFICATION	8.342198442259294E-8	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999982864969137	WITHOUT_CLASSIFICATION	1.7135030862987373E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999740911066	WITHOUT_CLASSIFICATION	2.5908893463806624E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999938349335	WITHOUT_CLASSIFICATION	6.165066418059169E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037037818359	WITHOUT_CLASSIFICATION	9.629621816411411E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999991114047166	WITHOUT_CLASSIFICATION	8.885952833666496E-7	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999993449039112	WITHOUT_CLASSIFICATION	6.55096088860463E-7	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999988833368174	WITHOUT_CLASSIFICATION	1.1166631826171638E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999992209090226	WITHOUT_CLASSIFICATION	7.790909774290235E-7	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999987860311662	WITHOUT_CLASSIFICATION	1.2139688337344939E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999959347367248	WITHOUT_CLASSIFICATION	4.065263275243435E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999992753669914	WITHOUT_CLASSIFICATION	7.246330085961787E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999992536041167	WITHOUT_CLASSIFICATION	7.463958832804466E-7	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995707619832	WITHOUT_CLASSIFICATION	4.292380167181781E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999998882539914	WITHOUT_CLASSIFICATION	1.1174600855559119E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997579677031	WITHOUT_CLASSIFICATION	2.4203229688989914E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999987347138929	WITHOUT_CLASSIFICATION	1.265286107173957E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999985841214	WITHOUT_CLASSIFICATION	1.4158786498534234E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999021783063	WITHOUT_CLASSIFICATION	9.782169372179723E-8	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999264729053	WITHOUT_CLASSIFICATION	7.352709473708969E-8	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999613043431	WITHOUT_CLASSIFICATION	3.869565690111443E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998304759237	WITHOUT_CLASSIFICATION	1.6952407628850783E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999947910211433	WITHOUT_CLASSIFICATION	5.208978856748974E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999968531526	WITHOUT_CLASSIFICATION	3.1468475685904725E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999717257261	WITHOUT_CLASSIFICATION	2.8274273990661836E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999284764282	WITHOUT_CLASSIFICATION	7.152357182216682E-8	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995566774946	WITHOUT_CLASSIFICATION	4.433225053692048E-7	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999848278003	WITHOUT_CLASSIFICATION	1.517219967650559E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999991115603085	WITHOUT_CLASSIFICATION	8.884396915443486E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999865675524	WITHOUT_CLASSIFICATION	1.3432447553802718E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993407875	WITHOUT_CLASSIFICATION	6.59212594059247E-10	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999949253524854	WITHOUT_CLASSIFICATION	5.074647514591817E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999588150056	WITHOUT_CLASSIFICATION	4.1184994453580994E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999716060323	WITHOUT_CLASSIFICATION	2.8393967817348726E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999996198454632	WITHOUT_CLASSIFICATION	3.8015453678234675E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037037818359	WITHOUT_CLASSIFICATION	9.629621816411411E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999232552511	WITHOUT_CLASSIFICATION	7.674474886645107E-8	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999959518951	WITHOUT_CLASSIFICATION	4.048104863720666E-9	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999530943658	WITHOUT_CLASSIFICATION	4.690563421538423E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998897785546	WITHOUT_CLASSIFICATION	1.1022144535086859E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999900761048	WITHOUT_CLASSIFICATION	9.923895129592499E-9	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999997521237652	WITHOUT_CLASSIFICATION	2.47876234819734E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999678842810799	WITHOUT_CLASSIFICATION	3.21157189201712E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.99999984882952	WITHOUT_CLASSIFICATION	1.5117047998917703E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999999987922492	WITHOUT_CLASSIFICATION	1.2077507967431993E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999831165348	WITHOUT_CLASSIFICATION	1.6883465236256133E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999994883075	WITHOUT_CLASSIFICATION	5.116925048058597E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999908174068	WITHOUT_CLASSIFICATION	9.182593321702155E-9	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999801404571	WITHOUT_CLASSIFICATION	1.9859542846149714E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999978769547	WITHOUT_CLASSIFICATION	2.1230453476978072E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999931472440409	WITHOUT_CLASSIFICATION	6.8527559591106325E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999999564057808	WITHOUT_CLASSIFICATION	4.359421927799769E-8	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999975713524295	WITHOUT_CLASSIFICATION	2.4286475705724442E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998414907447	WITHOUT_CLASSIFICATION	1.5850925528097267E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998319511961	WITHOUT_CLASSIFICATION	1.6804880388059964E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999991629386149	WITHOUT_CLASSIFICATION	8.370613851409299E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999963848614	WITHOUT_CLASSIFICATION	3.6151385421591673E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999992628192227	WITHOUT_CLASSIFICATION	7.371807772909746E-7	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999996089375193	WITHOUT_CLASSIFICATION	3.910624807253992E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999999884042039	WITHOUT_CLASSIFICATION	1.1595796103964849E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994525149993	WITHOUT_CLASSIFICATION	5.474850006678125E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997210281552	WITHOUT_CLASSIFICATION	2.7897184485089715E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734822626882	WITHOUT_CLASSIFICATION	1.2651773731180266E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.99999986987677	WITHOUT_CLASSIFICATION	1.3012322990908549E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999638351498	WITHOUT_CLASSIFICATION	3.616485020726318E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999836949411	WITHOUT_CLASSIFICATION	1.6305058841315767E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037037818359	WITHOUT_CLASSIFICATION	9.629621816411411E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999998816936142	WITHOUT_CLASSIFICATION	1.1830638580442034E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999906069651	WITHOUT_CLASSIFICATION	9.39303489909032E-9	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999538204777447	WITHOUT_CLASSIFICATION	4.617952225527408E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037037818359	WITHOUT_CLASSIFICATION	9.629621816411411E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997338156047	WITHOUT_CLASSIFICATION	2.6618439528588265E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999963848614	WITHOUT_CLASSIFICATION	3.6151385421591673E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999975906697476	WITHOUT_CLASSIFICATION	2.4093302523397674E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993775575622148	WITHOUT_CLASSIFICATION	6.224424377851613E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999389335712	WITHOUT_CLASSIFICATION	6.106642880669298E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999831165348	WITHOUT_CLASSIFICATION	1.6883465236256133E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999994883075	WITHOUT_CLASSIFICATION	5.116925048058597E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999908174068	WITHOUT_CLASSIFICATION	9.182593321702155E-9	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999997072211398	WITHOUT_CLASSIFICATION	2.9277886019899937E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999997342948522	WITHOUT_CLASSIFICATION	2.6570514773683167E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999991846821503	WITHOUT_CLASSIFICATION	8.153178496848517E-7	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999998153074766	WITHOUT_CLASSIFICATION	1.8469252335157472E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999996084159923	WITHOUT_CLASSIFICATION	3.9158400766637553E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037037818359	WITHOUT_CLASSIFICATION	9.629621816411411E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999801404571	WITHOUT_CLASSIFICATION	1.9859542846149714E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999978769547	WITHOUT_CLASSIFICATION	2.1230453476978072E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999690973168	WITHOUT_CLASSIFICATION	3.0902683128023E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999942756562	WITHOUT_CLASSIFICATION	5.7243437048924326E-9	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998455298448	WITHOUT_CLASSIFICATION	1.544701552266242E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999972965818564	WITHOUT_CLASSIFICATION	2.7034181435759126E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999993790787901	WITHOUT_CLASSIFICATION	6.209212098887456E-7	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999945634057	WITHOUT_CLASSIFICATION	5.436594276757985E-9	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992309944079	WITHOUT_CLASSIFICATION	7.690055920105838E-7	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999979180134304	WITHOUT_CLASSIFICATION	2.081986569556663E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999902462372786	WITHOUT_CLASSIFICATION	9.753762721394023E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999992396959315	WITHOUT_CLASSIFICATION	7.603040685671995E-7	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999999180234	WITHOUT_CLASSIFICATION	8.197659630053987E-10	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999833184743	WITHOUT_CLASSIFICATION	1.668152565722408E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981582458164	WITHOUT_CLASSIFICATION	1.8417541836523352E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999479765637	WITHOUT_CLASSIFICATION	5.202343630631516E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998388742405	WITHOUT_CLASSIFICATION	1.6112575942706624E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999833184743	WITHOUT_CLASSIFICATION	1.668152565722408E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999973186172	WITHOUT_CLASSIFICATION	2.681382669000152E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999760923015	WITHOUT_CLASSIFICATION	2.390769843868234E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999930361132	WITHOUT_CLASSIFICATION	6.963886804973636E-8	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994697906952	WITHOUT_CLASSIFICATION	5.302093048756663E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999361565203	WITHOUT_CLASSIFICATION	6.384347972291684E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999922963988164	WITHOUT_CLASSIFICATION	7.703601183616395E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999722533984	WITHOUT_CLASSIFICATION	2.774660158662716E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999006429657	WITHOUT_CLASSIFICATION	9.93570341943871E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993407875	WITHOUT_CLASSIFICATION	6.59212594059247E-10	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999998584248401	WITHOUT_CLASSIFICATION	1.4157515999772378E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999666242638	WITHOUT_CLASSIFICATION	3.3375736169614975E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999972555607	WITHOUT_CLASSIFICATION	2.744439241816864E-9	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999942351197691	WITHOUT_CLASSIFICATION	5.7648802308234525E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999557927315	WITHOUT_CLASSIFICATION	4.4207268500941756E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999522745944	WITHOUT_CLASSIFICATION	4.772540548038322E-8	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999978362989742	WITHOUT_CLASSIFICATION	2.163701025797314E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999959331406	WITHOUT_CLASSIFICATION	4.066859509095922E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999886850496	WITHOUT_CLASSIFICATION	1.1314950308952652E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999905863691	WITHOUT_CLASSIFICATION	9.413630826797276E-9	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999999279883198	WITHOUT_CLASSIFICATION	7.201168024034274E-8	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999986219389623	WITHOUT_CLASSIFICATION	1.3780610377929016E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998929551668	WITHOUT_CLASSIFICATION	1.070448332582889E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991532923448	WITHOUT_CLASSIFICATION	8.467076551876465E-7	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999554373048	WITHOUT_CLASSIFICATION	4.45626952474317E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999449443223	WITHOUT_CLASSIFICATION	5.5055677724988086E-8	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998866412515	WITHOUT_CLASSIFICATION	1.1335874855717138E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999999882748262	WITHOUT_CLASSIFICATION	1.1725173808894905E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999937442423283	WITHOUT_CLASSIFICATION	6.255757671607736E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997851133051	WITHOUT_CLASSIFICATION	2.148866947996361E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998104788824	WITHOUT_CLASSIFICATION	1.89521117620347E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999628277368	WITHOUT_CLASSIFICATION	3.717226322910994E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998454562865	WITHOUT_CLASSIFICATION	1.5454371342735597E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998797770265	WITHOUT_CLASSIFICATION	1.2022297344831446E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996328318929	WITHOUT_CLASSIFICATION	3.671681071241008E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999474096785	WITHOUT_CLASSIFICATION	5.259032160853179E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999999828955841	WITHOUT_CLASSIFICATION	1.7104415901807476E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998151918468	WITHOUT_CLASSIFICATION	1.8480815325499535E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999614777125	WITHOUT_CLASSIFICATION	3.852228742887919E-8	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999191520801	WITHOUT_CLASSIFICATION	8.084791988287517E-8	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999956083931392	WITHOUT_CLASSIFICATION	4.39160686084787E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999768418414	WITHOUT_CLASSIFICATION	2.3158158644811506E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999914947387	WITHOUT_CLASSIFICATION	8.505261292545463E-9	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999249579920655	WITHOUT_CLASSIFICATION	7.504200793446717E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999116755781269	WITHOUT_CLASSIFICATION	8.832442187313749E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984368278794	WITHOUT_CLASSIFICATION	1.5631721207078648E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999798830261	WITHOUT_CLASSIFICATION	2.0116973788103924E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999993034524677	WITHOUT_CLASSIFICATION	6.965475324327105E-7	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999761421098	WITHOUT_CLASSIFICATION	2.3857890219992968E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999957850452	WITHOUT_CLASSIFICATION	4.214954759812738E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999985038437686	WITHOUT_CLASSIFICATION	1.496156231330307E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999896062609912	WITHOUT_CLASSIFICATION	1.0393739008776297E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999965369418	WITHOUT_CLASSIFICATION	3.463058189773638E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999860287519208	WITHOUT_CLASSIFICATION	1.3971248079197708E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998855924256	WITHOUT_CLASSIFICATION	1.1440757435356343E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999984997223688	WITHOUT_CLASSIFICATION	1.5002776311337612E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993260279821	WITHOUT_CLASSIFICATION	6.739720178983589E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997411687299732	WITHOUT_CLASSIFICATION	2.58831270026753E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999592122730983	WITHOUT_CLASSIFICATION	4.0787726901712556E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999875483229	WITHOUT_CLASSIFICATION	1.2451677157841626E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999982119135378	WITHOUT_CLASSIFICATION	1.7880864621458649E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999976843066	WITHOUT_CLASSIFICATION	2.3156934155281254E-9	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999996579247805	WITHOUT_CLASSIFICATION	3.420752194599268E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999997294541202	WITHOUT_CLASSIFICATION	2.7054587984532255E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.99999996982012	WITHOUT_CLASSIFICATION	3.017987995636471E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999784452105	WITHOUT_CLASSIFICATION	2.1554789569117734E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993905990531	WITHOUT_CLASSIFICATION	6.094009468774747E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999192188125	WITHOUT_CLASSIFICATION	8.078118755900484E-8	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999819948885	WITHOUT_CLASSIFICATION	1.8005111531279665E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998755379618	WITHOUT_CLASSIFICATION	1.2446203835680596E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999383343873	WITHOUT_CLASSIFICATION	6.166561270045274E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999949787598	WITHOUT_CLASSIFICATION	5.021240139739635E-9	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999961967657	WITHOUT_CLASSIFICATION	3.8032343139708515E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999991939708095	WITHOUT_CLASSIFICATION	8.060291905319069E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999999431627917	WITHOUT_CLASSIFICATION	5.683720825052982E-8	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999999902084665	WITHOUT_CLASSIFICATION	9.791533491308343E-8	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999997461535182	WITHOUT_CLASSIFICATION	2.538464818464373E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997757122537	WITHOUT_CLASSIFICATION	2.2428774631987493E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.999999893986121	WITHOUT_CLASSIFICATION	1.0601387911311189E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999997559486463	WITHOUT_CLASSIFICATION	2.4405135370581107E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999998952005196	WITHOUT_CLASSIFICATION	1.0479948045073637E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999987478590604	WITHOUT_CLASSIFICATION	1.252140939600404E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999994327742819	WITHOUT_CLASSIFICATION	5.672257180114594E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999948153432744	WITHOUT_CLASSIFICATION	5.184656725629769E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999254550169	WITHOUT_CLASSIFICATION	7.454498307138689E-8	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998614074468	WITHOUT_CLASSIFICATION	1.385925531600882E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999932847997711	WITHOUT_CLASSIFICATION	6.715200228856914E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999934111777254	WITHOUT_CLASSIFICATION	6.588822274590946E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999983787068022	WITHOUT_CLASSIFICATION	1.6212931978557064E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999992704802644	WITHOUT_CLASSIFICATION	7.29519735622214E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999978141229223	WITHOUT_CLASSIFICATION	2.185877077739043E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999604955497	WITHOUT_CLASSIFICATION	3.950445025287142E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999999864118696	WITHOUT_CLASSIFICATION	1.358813039405126E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999960849378552	WITHOUT_CLASSIFICATION	3.91506214481117E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999982432797786	WITHOUT_CLASSIFICATION	1.756720221429911E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999607379090075	WITHOUT_CLASSIFICATION	3.926209099239456E-5	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999979892580124	WITHOUT_CLASSIFICATION	2.010741987679969E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999988079033467	WITHOUT_CLASSIFICATION	1.1920966532363303E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999982924625888	WITHOUT_CLASSIFICATION	1.7075374112131288E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984281748165	WITHOUT_CLASSIFICATION	1.571825183547997E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997148368494	WITHOUT_CLASSIFICATION	2.8516315062732196E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999993909206	WITHOUT_CLASSIFICATION	6.090794000054647E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999968125670466	WITHOUT_CLASSIFICATION	3.1874329532701016E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999992463108471	WITHOUT_CLASSIFICATION	7.536891529040443E-6	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999972135824836	WITHOUT_CLASSIFICATION	2.7864175164364864E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.999996210731837	WITHOUT_CLASSIFICATION	3.7892681630084217E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999534474795	WITHOUT_CLASSIFICATION	4.6552520529823065E-8	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999993362034	WITHOUT_CLASSIFICATION	6.637966241997445E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999996607469198	WITHOUT_CLASSIFICATION	3.3925308015460233E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999903874914998	WITHOUT_CLASSIFICATION	9.612508500129003E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999976008310518	WITHOUT_CLASSIFICATION	2.399168948283651E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999996607469198	WITHOUT_CLASSIFICATION	3.3925308015460233E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999069446879	WITHOUT_CLASSIFICATION	9.30553121389285E-8	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997853688586	WITHOUT_CLASSIFICATION	2.1463114140759196E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999993915412254	WITHOUT_CLASSIFICATION	6.084587745073726E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999972690395521	WITHOUT_CLASSIFICATION	2.7309604479867154E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999842917725	WITHOUT_CLASSIFICATION	1.5708227458335937E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999542451473	WITHOUT_CLASSIFICATION	4.5754852619717787E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999672186440502	WITHOUT_CLASSIFICATION	3.2781355949693436E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999629876327	WITHOUT_CLASSIFICATION	3.701236730227441E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999870824026	WITHOUT_CLASSIFICATION	1.2917597419165956E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999982365492043	WITHOUT_CLASSIFICATION	1.7634507956929763E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999902442329	WITHOUT_CLASSIFICATION	9.755767102493367E-9	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999469432902	WITHOUT_CLASSIFICATION	5.305670978398219E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998535068768	WITHOUT_CLASSIFICATION	1.4649312316795473E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999994087701919	WITHOUT_CLASSIFICATION	5.912298082299777E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999747873514	WITHOUT_CLASSIFICATION	2.5212648679722767E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999772432945393	WITHOUT_CLASSIFICATION	2.2756705460660378E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999941273173357	WITHOUT_CLASSIFICATION	5.872682664234655E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999941273173357	WITHOUT_CLASSIFICATION	5.872682664234655E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999920466887	WITHOUT_CLASSIFICATION	7.953311442472181E-9	TEST
//optimization	WITHOUT_CLASSIFICATION	0.999992903031775	WITHOUT_CLASSIFICATION	7.096968224971692E-6	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999959768127139	WITHOUT_CLASSIFICATION	4.023187286139582E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.999992415361931	WITHOUT_CLASSIFICATION	7.584638069059517E-6	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999719707127	WITHOUT_CLASSIFICATION	2.8029287335239568E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995342720134884	WITHOUT_CLASSIFICATION	4.657279865116294E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999981810210007	WITHOUT_CLASSIFICATION	1.8189789993338428E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999972413119	WITHOUT_CLASSIFICATION	2.758688060162491E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999815185669	WITHOUT_CLASSIFICATION	1.8481433081984915E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999997498992105	WITHOUT_CLASSIFICATION	2.5010078946756E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999999933745382	WITHOUT_CLASSIFICATION	6.625461805807745E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999979010182	WITHOUT_CLASSIFICATION	2.09898172117861E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998791928322	WITHOUT_CLASSIFICATION	1.2080716785701253E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999988671420422	WITHOUT_CLASSIFICATION	1.1328579576651754E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999946642809	WITHOUT_CLASSIFICATION	5.335719061834852E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991532923448	WITHOUT_CLASSIFICATION	8.467076551876465E-7	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999923743778922	WITHOUT_CLASSIFICATION	7.625622107749786E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999498011256	WITHOUT_CLASSIFICATION	5.019887443040981E-8	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999979140197175	WITHOUT_CLASSIFICATION	2.085980282572223E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.995730028516592	WITHOUT_CLASSIFICATION	0.004269971483407948	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999918445375	WITHOUT_CLASSIFICATION	8.155462616474047E-9	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999980200246074	WITHOUT_CLASSIFICATION	1.979975392603967E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999599949584	WITHOUT_CLASSIFICATION	4.000504163715896E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999691638192	WITHOUT_CLASSIFICATION	3.083618083844808E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999968690131	WITHOUT_CLASSIFICATION	3.1309869393553337E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999915436153	WITHOUT_CLASSIFICATION	8.456384689156792E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997747786563	WITHOUT_CLASSIFICATION	2.252213436003218E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999164739529	WITHOUT_CLASSIFICATION	8.352604715253473E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999960210316178	WITHOUT_CLASSIFICATION	3.978968382228519E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999993224652788	WITHOUT_CLASSIFICATION	6.775347211805874E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999954652156889	WITHOUT_CLASSIFICATION	4.534784310966761E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996878042925	WITHOUT_CLASSIFICATION	3.1219570758285046E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999956671417424	WITHOUT_CLASSIFICATION	4.332858257650281E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999945868808063	WITHOUT_CLASSIFICATION	5.413119193591513E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999994485091057	WITHOUT_CLASSIFICATION	5.514908943010253E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998083447657	WITHOUT_CLASSIFICATION	1.91655234268058E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999893669450571	WITHOUT_CLASSIFICATION	1.0633054942859908E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999997442700698	WITHOUT_CLASSIFICATION	2.5572993019067954E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997273399901	WITHOUT_CLASSIFICATION	2.7266000990098867E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999991380754885	WITHOUT_CLASSIFICATION	8.619245116138188E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999993915312976	WITHOUT_CLASSIFICATION	6.084687024513843E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999998956796068	WITHOUT_CLASSIFICATION	1.0432039312270185E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999968379205	WITHOUT_CLASSIFICATION	3.1620795754971614E-9	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999903654259	WITHOUT_CLASSIFICATION	9.634574193216636E-9	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996968707691	WITHOUT_CLASSIFICATION	3.031292308600038E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999574424246	WITHOUT_CLASSIFICATION	4.255757535578992E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998834241074	WITHOUT_CLASSIFICATION	1.1657589267015017E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999904129088	WITHOUT_CLASSIFICATION	9.587091196014088E-8	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999064388527	WITHOUT_CLASSIFICATION	9.356114720795439E-8	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999957781641	WITHOUT_CLASSIFICATION	4.221835808205075E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999885769913	WITHOUT_CLASSIFICATION	1.1423008723586615E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000164538	WITHOUT_CLASSIFICATION	9.998354612722891E-8	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999995820708	WITHOUT_CLASSIFICATION	4.17929308840156E-10	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999474880972	WITHOUT_CLASSIFICATION	5.2511902694942844E-8	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999352945009	WITHOUT_CLASSIFICATION	6.470549902130296E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999474880972	WITHOUT_CLASSIFICATION	5.2511902694942844E-8	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999919202239339	WITHOUT_CLASSIFICATION	8.079776066128599E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998062702689	WITHOUT_CLASSIFICATION	1.9372973112847058E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999997617009351	WITHOUT_CLASSIFICATION	2.3829906499787488E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999676564513	WITHOUT_CLASSIFICATION	3.2343548744166516E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999993569081532	WITHOUT_CLASSIFICATION	6.430918469000191E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999953826178405	WITHOUT_CLASSIFICATION	4.61738215950647E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.99999995357647	WITHOUT_CLASSIFICATION	4.642352995156309E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999021660543	WITHOUT_CLASSIFICATION	9.783394575896495E-8	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999854133347	WITHOUT_CLASSIFICATION	1.4586665294402078E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999975688193005	WITHOUT_CLASSIFICATION	2.431180699574695E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999706819505	WITHOUT_CLASSIFICATION	2.931804953849945E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999987000268	WITHOUT_CLASSIFICATION	1.299973328845612E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999903790630228	WITHOUT_CLASSIFICATION	9.620936977284271E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999993642228381	WITHOUT_CLASSIFICATION	6.35777161818551E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999211718855	WITHOUT_CLASSIFICATION	7.882811440913932E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999993254255	WITHOUT_CLASSIFICATION	6.745745544108879E-10	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501199079	WITHOUT_CLASSIFICATION	9.94988009212802E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501199079	WITHOUT_CLASSIFICATION	9.94988009212802E-6	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999997427343152	WITHOUT_CLASSIFICATION	2.572656847541496E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999969619716543	WITHOUT_CLASSIFICATION	3.038028345721391E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999956093725	WITHOUT_CLASSIFICATION	4.390627544303894E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999889253574	WITHOUT_CLASSIFICATION	1.1074642602471249E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999951132284	WITHOUT_CLASSIFICATION	4.886771606303158E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994741283512	WITHOUT_CLASSIFICATION	5.258716487981103E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999972817013743	WITHOUT_CLASSIFICATION	2.7182986258137287E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999998517402493	WITHOUT_CLASSIFICATION	1.4825975069752634E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999998602216584	WITHOUT_CLASSIFICATION	1.3977834149503206E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999731391087	WITHOUT_CLASSIFICATION	2.6860891168692524E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999535228364	WITHOUT_CLASSIFICATION	4.647716352121589E-8	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999200185135	WITHOUT_CLASSIFICATION	7.998148653328678E-8	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999903824394	WITHOUT_CLASSIFICATION	9.617560726363422E-9	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999361927169	WITHOUT_CLASSIFICATION	6.380728309539025E-8	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999937441861	WITHOUT_CLASSIFICATION	6.25581390803388E-8	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999389009793	WITHOUT_CLASSIFICATION	6.10990206718673E-8	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999269283336	WITHOUT_CLASSIFICATION	7.307166646414924E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999985993873215	WITHOUT_CLASSIFICATION	1.4006126786111508E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999491742401	WITHOUT_CLASSIFICATION	5.0825759985986506E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999995512588	WITHOUT_CLASSIFICATION	4.4874117005053074E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997433378752	WITHOUT_CLASSIFICATION	2.566621248631915E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999582321761	WITHOUT_CLASSIFICATION	4.1767823890271094E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999806826617	WITHOUT_CLASSIFICATION	1.9317338368772157E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999815080391	WITHOUT_CLASSIFICATION	1.8491960818311617E-8	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.99999944247774	WITHOUT_CLASSIFICATION	5.575222600593187E-7	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997689373212	WITHOUT_CLASSIFICATION	2.3106267881568715E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998307526679	WITHOUT_CLASSIFICATION	1.6924733215391414E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999984256619104	WITHOUT_CLASSIFICATION	1.5743380896194762E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999978860575753	WITHOUT_CLASSIFICATION	2.113942424692525E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999995013286802	WITHOUT_CLASSIFICATION	4.986713197688881E-7	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999951418217042	WITHOUT_CLASSIFICATION	4.858178295717777E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999999729375121	WITHOUT_CLASSIFICATION	2.7062487902165486E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999036533021082	WITHOUT_CLASSIFICATION	9.634669789191528E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999985052256123	WITHOUT_CLASSIFICATION	1.4947743877022225E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999995711613054	WITHOUT_CLASSIFICATION	4.2883869447877277E-7	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999925774706	WITHOUT_CLASSIFICATION	7.4225294346076935E-9	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999840205914	WITHOUT_CLASSIFICATION	1.5979408553139687E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999992495715787	WITHOUT_CLASSIFICATION	7.504284213528998E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999878240348	WITHOUT_CLASSIFICATION	1.2175965252716263E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999744116413	WITHOUT_CLASSIFICATION	2.558835861328247E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999889802629	WITHOUT_CLASSIFICATION	1.1019737092758764E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999698513877	WITHOUT_CLASSIFICATION	3.014861230357412E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999988575971689	WITHOUT_CLASSIFICATION	1.1424028311307832E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999821358654	WITHOUT_CLASSIFICATION	1.7864134579500546E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999984765594	WITHOUT_CLASSIFICATION	1.52344064830445E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999794754343	WITHOUT_CLASSIFICATION	2.0524565712974042E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999942041327	WITHOUT_CLASSIFICATION	5.7958673632834595E-9	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999701859986	WITHOUT_CLASSIFICATION	2.981400133479394E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998557227415	WITHOUT_CLASSIFICATION	1.442772585314003E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999969846154674	WITHOUT_CLASSIFICATION	3.0153845325965473E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993730424422	WITHOUT_CLASSIFICATION	6.269575577645553E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999966794308741	WITHOUT_CLASSIFICATION	3.3205691259099918E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.99999906885593	WITHOUT_CLASSIFICATION	9.311440699655093E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999991249098096	WITHOUT_CLASSIFICATION	8.75090190419339E-7	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999980467112203	WITHOUT_CLASSIFICATION	1.953288779670186E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997338156047	WITHOUT_CLASSIFICATION	2.6618439528588265E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997338156047	WITHOUT_CLASSIFICATION	2.6618439528588265E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999356127266511	WITHOUT_CLASSIFICATION	6.438727334882161E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999998739730394	WITHOUT_CLASSIFICATION	1.260269605955652E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998532673476	WITHOUT_CLASSIFICATION	1.4673265240807745E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999827977917	WITHOUT_CLASSIFICATION	1.7202208345988283E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999921106374	WITHOUT_CLASSIFICATION	7.889362689207624E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999999890087084	WITHOUT_CLASSIFICATION	1.0991291605482998E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999752482259	WITHOUT_CLASSIFICATION	2.475177411772369E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999995574599111	WITHOUT_CLASSIFICATION	4.425400889249247E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997954473982243	WITHOUT_CLASSIFICATION	2.0455260177564027E-4	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999786280833	WITHOUT_CLASSIFICATION	2.13719165798776E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999919098773784	WITHOUT_CLASSIFICATION	8.090122621553887E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998618600655	WITHOUT_CLASSIFICATION	1.3813993449928068E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999865285731364	WITHOUT_CLASSIFICATION	1.3471426863626545E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999922495052	WITHOUT_CLASSIFICATION	7.750494700143817E-9	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999990372068386	WITHOUT_CLASSIFICATION	9.62793161502339E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999982031764236	WITHOUT_CLASSIFICATION	1.7968235763949366E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999991522414	WITHOUT_CLASSIFICATION	8.477585403301246E-10	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999973642417941	WITHOUT_CLASSIFICATION	2.635758205913531E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999959316502625	WITHOUT_CLASSIFICATION	4.0683497375562965E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997022213579	WITHOUT_CLASSIFICATION	2.977786420782599E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999910434062	WITHOUT_CLASSIFICATION	8.956593834258944E-9	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999999410306222	WITHOUT_CLASSIFICATION	5.896937779354206E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219631999	WITHOUT_CLASSIFICATION	7.8780368001698E-6	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999942552711	WITHOUT_CLASSIFICATION	5.744728903147745E-9	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999653490688	WITHOUT_CLASSIFICATION	3.465093127867994E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999998642954974	WITHOUT_CLASSIFICATION	1.3570450256477775E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.99999902487823	WITHOUT_CLASSIFICATION	9.751217700107831E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999730699176519	WITHOUT_CLASSIFICATION	2.693008234811659E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999134529083	WITHOUT_CLASSIFICATION	8.654709171527591E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219631999	WITHOUT_CLASSIFICATION	7.8780368001698E-6	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998126309332	WITHOUT_CLASSIFICATION	1.873690667501717E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999996500796	WITHOUT_CLASSIFICATION	3.4992046154511564E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9998585951862337	WITHOUT_CLASSIFICATION	1.4140481376631096E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993891448055	WITHOUT_CLASSIFICATION	6.108551946001249E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999249339449	WITHOUT_CLASSIFICATION	7.50660551971183E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999516995214489	WITHOUT_CLASSIFICATION	4.830047855112665E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999814019805	WITHOUT_CLASSIFICATION	1.859801942087621E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998552952858	WITHOUT_CLASSIFICATION	1.4470471419562458E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999966687557647	WITHOUT_CLASSIFICATION	3.331244235345606E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993891448055	WITHOUT_CLASSIFICATION	6.108551946001249E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999911094429851	WITHOUT_CLASSIFICATION	8.890557014829477E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998413054452	WITHOUT_CLASSIFICATION	1.5869455487851367E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999999830921552	WITHOUT_CLASSIFICATION	1.6907844805129032E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999938342683921	WITHOUT_CLASSIFICATION	6.1657316079105885E-6	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998495980347	WITHOUT_CLASSIFICATION	1.504019652942437E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999535228364	WITHOUT_CLASSIFICATION	4.647716352121589E-8	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999466710994	WITHOUT_CLASSIFICATION	5.332890062170928E-8	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999987968463458	WITHOUT_CLASSIFICATION	1.2031536542308652E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997885565749	WITHOUT_CLASSIFICATION	2.1144342507651469E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998048990305	WITHOUT_CLASSIFICATION	1.951009694618046E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999909986808517	WITHOUT_CLASSIFICATION	9.001319148191862E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999983323515226	WITHOUT_CLASSIFICATION	1.667648477421912E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999831059150801	WITHOUT_CLASSIFICATION	1.6894084919925825E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999990002695703	WITHOUT_CLASSIFICATION	9.997304296750125E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999969549649828	WITHOUT_CLASSIFICATION	3.0450350171303007E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997966870058	WITHOUT_CLASSIFICATION	2.03312994218594E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999814959798038	WITHOUT_CLASSIFICATION	1.85040201962788E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999844588365	WITHOUT_CLASSIFICATION	1.5541163430792168E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999153662927	WITHOUT_CLASSIFICATION	8.463370727076554E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999998912828374	WITHOUT_CLASSIFICATION	1.087171625695722E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999984129063	WITHOUT_CLASSIFICATION	1.5870937010781872E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.99999986962146	WITHOUT_CLASSIFICATION	1.3037853995784603E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999985939415751	WITHOUT_CLASSIFICATION	1.4060584249145812E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998373398933	WITHOUT_CLASSIFICATION	1.6266010662005699E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999524247315	WITHOUT_CLASSIFICATION	4.757526850000866E-8	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999940533141431	WITHOUT_CLASSIFICATION	5.946685856813892E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999984837861344	WITHOUT_CLASSIFICATION	1.5162138655423215E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999860893655	WITHOUT_CLASSIFICATION	1.391063458745291E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999993173904105	WITHOUT_CLASSIFICATION	6.82609589604698E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999991241314706	WITHOUT_CLASSIFICATION	8.758685293776131E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999986587246433	WITHOUT_CLASSIFICATION	1.3412753566885249E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999871029317642	WITHOUT_CLASSIFICATION	1.289706823576033E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.999999922738029	WITHOUT_CLASSIFICATION	7.726197102063077E-8	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998763717604	WITHOUT_CLASSIFICATION	1.2362823954926097E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999295604267	WITHOUT_CLASSIFICATION	7.043957327238965E-8	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999989359427219	WITHOUT_CLASSIFICATION	1.0640572781096231E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999997267532384	WITHOUT_CLASSIFICATION	2.732467615159454E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999432220519	WITHOUT_CLASSIFICATION	5.677794824065067E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999997331949	WITHOUT_CLASSIFICATION	2.668051425553548E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999994469214945	WITHOUT_CLASSIFICATION	5.530785054606555E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999997489663869	WITHOUT_CLASSIFICATION	2.5103361316032795E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999899509879	WITHOUT_CLASSIFICATION	1.0049012022893853E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999675391589	WITHOUT_CLASSIFICATION	3.246084109642294E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999993852171303	WITHOUT_CLASSIFICATION	6.147828697041091E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999258171667	WITHOUT_CLASSIFICATION	7.41828332468826E-8	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993436640172	WITHOUT_CLASSIFICATION	6.563359827707917E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999185552895	WITHOUT_CLASSIFICATION	8.14447105481531E-8	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999945380753	WITHOUT_CLASSIFICATION	5.461924682766647E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999964302690176	WITHOUT_CLASSIFICATION	3.5697309823998676E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995494022788	WITHOUT_CLASSIFICATION	4.5059772119021746E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999681060453504	WITHOUT_CLASSIFICATION	3.18939546497339E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999998346779913	WITHOUT_CLASSIFICATION	1.6532200870514048E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999996203004293	WITHOUT_CLASSIFICATION	3.796995706898427E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999992821188426	WITHOUT_CLASSIFICATION	7.178811574958624E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999994100554924	WITHOUT_CLASSIFICATION	5.899445075396006E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999975797186478	WITHOUT_CLASSIFICATION	2.4202813523577834E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999949274667	WITHOUT_CLASSIFICATION	5.072533230158596E-9	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999997919229731	WITHOUT_CLASSIFICATION	2.0807702699817246E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999886908688	WITHOUT_CLASSIFICATION	1.1309131248426387E-8	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999998927082406	WITHOUT_CLASSIFICATION	1.0729175936532472E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999979135443355	WITHOUT_CLASSIFICATION	2.086455664494215E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999911074170668	WITHOUT_CLASSIFICATION	8.892582933341028E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998763717604	WITHOUT_CLASSIFICATION	1.2362823954926097E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999936375654	WITHOUT_CLASSIFICATION	6.362434508189793E-9	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999998529543	WITHOUT_CLASSIFICATION	1.47045719702607E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999996566735853	WITHOUT_CLASSIFICATION	3.433264147459612E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999988435391898	WITHOUT_CLASSIFICATION	1.1564608102583709E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999515673093	WITHOUT_CLASSIFICATION	4.843269077000119E-8	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997508335094	WITHOUT_CLASSIFICATION	2.491664905476676E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997847190479	WITHOUT_CLASSIFICATION	2.1528095206566622E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999951777342	WITHOUT_CLASSIFICATION	4.822265882208432E-9	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999930492188	WITHOUT_CLASSIFICATION	6.950781258545536E-9	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999989994296892	WITHOUT_CLASSIFICATION	1.0005703107782211E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999981830188	WITHOUT_CLASSIFICATION	1.8169812261232178E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406544743354	WITHOUT_CLASSIFICATION	5.934552566452371E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998991806573	WITHOUT_CLASSIFICATION	1.0081934266088473E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999999384203339	WITHOUT_CLASSIFICATION	6.157966608796647E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999919202239339	WITHOUT_CLASSIFICATION	8.079776066128599E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999986420408	WITHOUT_CLASSIFICATION	1.3579591510124282E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999995014824	WITHOUT_CLASSIFICATION	4.985175466999789E-10	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999755014894	WITHOUT_CLASSIFICATION	2.4498510540399036E-8	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999999127169396	WITHOUT_CLASSIFICATION	8.728306040455471E-8	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999999378907	WITHOUT_CLASSIFICATION	6.210929045930725E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641657769	WITHOUT_CLASSIFICATION	2.135834223091174E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641657769	WITHOUT_CLASSIFICATION	2.135834223091174E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998722184242	WITHOUT_CLASSIFICATION	1.2778157576344037E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999993010994422	WITHOUT_CLASSIFICATION	6.989005578176023E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999713630158	WITHOUT_CLASSIFICATION	2.8636984250563094E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999997815026785	WITHOUT_CLASSIFICATION	2.1849732142556126E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999762904329	WITHOUT_CLASSIFICATION	2.370956708006076E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999896554777	WITHOUT_CLASSIFICATION	1.0344522320561708E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999988780096793	WITHOUT_CLASSIFICATION	1.1219903207140336E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998171217953	WITHOUT_CLASSIFICATION	1.8287820469354428E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998171217953	WITHOUT_CLASSIFICATION	1.8287820469354428E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999986571137546	WITHOUT_CLASSIFICATION	1.3428862454642448E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999995307073241	WITHOUT_CLASSIFICATION	4.692926759858068E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999769202746	WITHOUT_CLASSIFICATION	2.3079725310112967E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997013972759	WITHOUT_CLASSIFICATION	2.986027240473331E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997013972759	WITHOUT_CLASSIFICATION	2.986027240473331E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997013972759	WITHOUT_CLASSIFICATION	2.986027240473331E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999994288207631	WITHOUT_CLASSIFICATION	5.711792369649984E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999926435838	WITHOUT_CLASSIFICATION	7.35641619659396E-8	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999975407930665	WITHOUT_CLASSIFICATION	2.4592069335290807E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999926617805255	WITHOUT_CLASSIFICATION	7.338219474492752E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999885184401	WITHOUT_CLASSIFICATION	1.148156001201291E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999999992364813	WITHOUT_CLASSIFICATION	7.63518698317745E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999813048512	WITHOUT_CLASSIFICATION	1.8695148750503323E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999982174760018	WITHOUT_CLASSIFICATION	1.7825239981892244E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999394567697	WITHOUT_CLASSIFICATION	6.054323026380481E-8	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999997366385702	WITHOUT_CLASSIFICATION	2.633614297589476E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997997031296	WITHOUT_CLASSIFICATION	2.0029687042598466E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997151671487	WITHOUT_CLASSIFICATION	2.848328513618108E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999631777262	WITHOUT_CLASSIFICATION	3.6822273915356545E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999812336549	WITHOUT_CLASSIFICATION	1.876634514507395E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999555492061	WITHOUT_CLASSIFICATION	4.445079399541619E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999997149286108	WITHOUT_CLASSIFICATION	2.850713892332968E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999976655876388	WITHOUT_CLASSIFICATION	2.334412361216512E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999976655876388	WITHOUT_CLASSIFICATION	2.334412361216512E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982040611654	WITHOUT_CLASSIFICATION	1.7959388347137113E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982040611654	WITHOUT_CLASSIFICATION	1.7959388347137113E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999982210835368	WITHOUT_CLASSIFICATION	1.7789164631391317E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999978475224003	WITHOUT_CLASSIFICATION	2.1524775997398306E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999978475224003	WITHOUT_CLASSIFICATION	2.1524775997398306E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999987579963202	WITHOUT_CLASSIFICATION	1.2420036797936826E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.99999678402203	WITHOUT_CLASSIFICATION	3.215977970083892E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999221363042	WITHOUT_CLASSIFICATION	7.786369583443199E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641657769	WITHOUT_CLASSIFICATION	2.135834223091174E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999722136327	WITHOUT_CLASSIFICATION	2.7786367405113336E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.99999678402203	WITHOUT_CLASSIFICATION	3.215977970083892E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999994195686867	WITHOUT_CLASSIFICATION	5.804313132630113E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999998478811195	WITHOUT_CLASSIFICATION	1.5211888051251185E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999988446583067	WITHOUT_CLASSIFICATION	1.1553416933011447E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995230027986	WITHOUT_CLASSIFICATION	4.769972013819516E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999532176774	WITHOUT_CLASSIFICATION	4.678232258805419E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999424043728408	WITHOUT_CLASSIFICATION	5.759562715928383E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998590008831	WITHOUT_CLASSIFICATION	1.4099911691759908E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999993905177288	WITHOUT_CLASSIFICATION	6.094822712655031E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999990991239558	WITHOUT_CLASSIFICATION	9.008760442279905E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999923870406432	WITHOUT_CLASSIFICATION	7.612959356883437E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999962972065	WITHOUT_CLASSIFICATION	3.7027934299316616E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999991701295942	WITHOUT_CLASSIFICATION	8.298704057736073E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500340623	WITHOUT_CLASSIFICATION	1.4996593765325321E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999992050964757	WITHOUT_CLASSIFICATION	7.949035242395171E-7	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999997417332278	WITHOUT_CLASSIFICATION	2.582667721763633E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999746470597	WITHOUT_CLASSIFICATION	2.5352940352732577E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999975952072	WITHOUT_CLASSIFICATION	2.4047928027754942E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997807039772	WITHOUT_CLASSIFICATION	2.1929602279036799E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997807039772	WITHOUT_CLASSIFICATION	2.1929602279036799E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999998153699333	WITHOUT_CLASSIFICATION	1.8463006670064728E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999987656267558	WITHOUT_CLASSIFICATION	1.2343732442491754E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994219386278	WITHOUT_CLASSIFICATION	5.780613721532947E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999989070638228	WITHOUT_CLASSIFICATION	1.092936177289536E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999993315639363	WITHOUT_CLASSIFICATION	6.684360637663128E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999887804308	WITHOUT_CLASSIFICATION	1.1219569123131959E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999973544457	WITHOUT_CLASSIFICATION	2.645554271067669E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999940476306378	WITHOUT_CLASSIFICATION	5.9523693621015165E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999995600974082	WITHOUT_CLASSIFICATION	4.3990259192749625E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999540791814	WITHOUT_CLASSIFICATION	4.5920818627819814E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999344664072	WITHOUT_CLASSIFICATION	6.553359277748261E-8	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406544743354	WITHOUT_CLASSIFICATION	5.934552566452371E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999971810539	WITHOUT_CLASSIFICATION	2.818946152107115E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996788212571	WITHOUT_CLASSIFICATION	3.211787428937794E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999992581438485	WITHOUT_CLASSIFICATION	7.418561515412292E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999992574705124	WITHOUT_CLASSIFICATION	7.425294876408975E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999903604129	WITHOUT_CLASSIFICATION	9.63958709064641E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999903604129	WITHOUT_CLASSIFICATION	9.63958709064641E-9	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999938740380758	WITHOUT_CLASSIFICATION	6.125961924195771E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999216758578	WITHOUT_CLASSIFICATION	7.832414216031531E-8	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999996347845739	WITHOUT_CLASSIFICATION	3.6521542606573395E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999991637177774	WITHOUT_CLASSIFICATION	8.362822226705751E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999993641217899	WITHOUT_CLASSIFICATION	6.35878210112819E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999985920254804	WITHOUT_CLASSIFICATION	1.4079745196599485E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999679338568	WITHOUT_CLASSIFICATION	3.206614318460329E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999966171812	WITHOUT_CLASSIFICATION	3.3828188038695467E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999891281056	WITHOUT_CLASSIFICATION	1.0871894293342464E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999897503375	WITHOUT_CLASSIFICATION	1.0249662491569493E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999999970102714	WITHOUT_CLASSIFICATION	2.989728593990535E-8	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999966171812	WITHOUT_CLASSIFICATION	3.3828188038695467E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999896562658	WITHOUT_CLASSIFICATION	1.0343734135120556E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999997388423494	WITHOUT_CLASSIFICATION	2.6115765055090365E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999937995359	WITHOUT_CLASSIFICATION	6.200464033449112E-9	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999978201500264	WITHOUT_CLASSIFICATION	2.1798499737460825E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999805054484	WITHOUT_CLASSIFICATION	1.949455161356162E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999910302275	WITHOUT_CLASSIFICATION	8.96977236188558E-9	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999920138918	WITHOUT_CLASSIFICATION	7.986108118749932E-9	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999999928706915	WITHOUT_CLASSIFICATION	7.129308500943346E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999810980691	WITHOUT_CLASSIFICATION	1.8901930907526237E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986770949688	WITHOUT_CLASSIFICATION	1.3229050312677941E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999995595937999	WITHOUT_CLASSIFICATION	4.4040620012530824E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999553049891	WITHOUT_CLASSIFICATION	4.469501094795082E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999674186514	WITHOUT_CLASSIFICATION	3.2581348626997317E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996202428295	WITHOUT_CLASSIFICATION	3.797571705363959E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999998484262119	WITHOUT_CLASSIFICATION	1.5157378809844297E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999992863385321	WITHOUT_CLASSIFICATION	7.136614678257016E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994048393069	WITHOUT_CLASSIFICATION	5.951606931687999E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999889030743233	WITHOUT_CLASSIFICATION	1.109692567662222E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999818301172051	WITHOUT_CLASSIFICATION	1.8169882794957444E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999924517535	WITHOUT_CLASSIFICATION	7.548246563825054E-9	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998850137146	WITHOUT_CLASSIFICATION	1.1498628535163524E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999777251374	WITHOUT_CLASSIFICATION	2.2274862581361528E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999883910949033	WITHOUT_CLASSIFICATION	1.1608905096668113E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999982788166223	WITHOUT_CLASSIFICATION	1.7211833777199717E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999925874261	WITHOUT_CLASSIFICATION	7.41257382038878E-9	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111207375	WITHOUT_CLASSIFICATION	1.4888792624239792E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999883890905	WITHOUT_CLASSIFICATION	1.1610909559204001E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999990064374	WITHOUT_CLASSIFICATION	9.935625891695216E-10	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999984251386	WITHOUT_CLASSIFICATION	1.5748613242069202E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.999999784485616	WITHOUT_CLASSIFICATION	2.155143840005694E-7	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999995574729	WITHOUT_CLASSIFICATION	4.425271619456048E-10	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999523585121	WITHOUT_CLASSIFICATION	4.764148789070116E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999997387672586	WITHOUT_CLASSIFICATION	2.612327413669064E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999663128615	WITHOUT_CLASSIFICATION	3.368713844324311E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999827493314	WITHOUT_CLASSIFICATION	1.7250668573542718E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998288544024	WITHOUT_CLASSIFICATION	1.7114559770433043E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999984073514	WITHOUT_CLASSIFICATION	1.5926485097887038E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999996536736	WITHOUT_CLASSIFICATION	3.46326406644566E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999996974180594	WITHOUT_CLASSIFICATION	3.0258194062756316E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999999973631823	WITHOUT_CLASSIFICATION	2.6368176936534536E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998324170706	WITHOUT_CLASSIFICATION	1.6758292940625675E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999854826193	WITHOUT_CLASSIFICATION	1.4517380681412346E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999981353566	WITHOUT_CLASSIFICATION	1.8646435022730677E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999919261897	WITHOUT_CLASSIFICATION	8.07381019034875E-9	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999999971997701	WITHOUT_CLASSIFICATION	2.800229906047002E-8	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999940363986	WITHOUT_CLASSIFICATION	5.963601481363535E-9	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998600038085	WITHOUT_CLASSIFICATION	1.39996191434567E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999893770292528	WITHOUT_CLASSIFICATION	1.0622970747204522E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999995885826916	WITHOUT_CLASSIFICATION	4.114173084030283E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997501407397	WITHOUT_CLASSIFICATION	2.4985926021584973E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984011634808	WITHOUT_CLASSIFICATION	1.598836519266515E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999548408757	WITHOUT_CLASSIFICATION	4.515912442928047E-8	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999825661388	WITHOUT_CLASSIFICATION	1.7433861183188684E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998790702624	WITHOUT_CLASSIFICATION	1.2092973746510135E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999961425625	WITHOUT_CLASSIFICATION	3.857437377784983E-9	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998561189107	WITHOUT_CLASSIFICATION	1.4388108933629955E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997585899727	WITHOUT_CLASSIFICATION	2.4141002722547195E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999722392126	WITHOUT_CLASSIFICATION	2.776078741613185E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.999999926307192	WITHOUT_CLASSIFICATION	7.36928079251203E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999993345582973	WITHOUT_CLASSIFICATION	6.654417028409124E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998700916769	WITHOUT_CLASSIFICATION	1.299083229966252E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996530595582	WITHOUT_CLASSIFICATION	3.4694044182175867E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999662289358	WITHOUT_CLASSIFICATION	3.377106428484225E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999834954699105	WITHOUT_CLASSIFICATION	1.6504530089543586E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998138015054	WITHOUT_CLASSIFICATION	1.8619849469572068E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999973442787243	WITHOUT_CLASSIFICATION	2.655721275768231E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984011634808	WITHOUT_CLASSIFICATION	1.598836519266515E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998937713768	WITHOUT_CLASSIFICATION	1.062286232811173E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999999549675737	WITHOUT_CLASSIFICATION	4.503242630249716E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999729232102	WITHOUT_CLASSIFICATION	2.7076789896115063E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999805622193	WITHOUT_CLASSIFICATION	1.943778072288028E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999980704135708	WITHOUT_CLASSIFICATION	1.9295864291626688E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997505870296	WITHOUT_CLASSIFICATION	2.4941297036397226E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999891281056	WITHOUT_CLASSIFICATION	1.0871894293342464E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999723212949542	WITHOUT_CLASSIFICATION	2.76787050457664E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999827493314	WITHOUT_CLASSIFICATION	1.7250668573542718E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999990260896847	WITHOUT_CLASSIFICATION	9.739103152987375E-7	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999892314223	WITHOUT_CLASSIFICATION	1.0768577671439448E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995399749942	WITHOUT_CLASSIFICATION	4.6002500572633553E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995785124981	WITHOUT_CLASSIFICATION	4.2148750191253066E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997066287383	WITHOUT_CLASSIFICATION	2.9337126177106617E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999997850271757	WITHOUT_CLASSIFICATION	2.149728242750278E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999990338939378	WITHOUT_CLASSIFICATION	9.66106062107262E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997034385085	WITHOUT_CLASSIFICATION	2.9656149151030184E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999946004482	WITHOUT_CLASSIFICATION	5.399551892699765E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947579289	WITHOUT_CLASSIFICATION	5.2420710634589195E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999900046949	WITHOUT_CLASSIFICATION	9.995305092513962E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999598909299	WITHOUT_CLASSIFICATION	4.010907005362728E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999607307093	WITHOUT_CLASSIFICATION	3.926929079801657E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999607307093	WITHOUT_CLASSIFICATION	3.926929079801657E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999761778248	WITHOUT_CLASSIFICATION	2.382217526878489E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996225425244	WITHOUT_CLASSIFICATION	3.774574755682274E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999820333929	WITHOUT_CLASSIFICATION	1.7966607095399996E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999996423831672	WITHOUT_CLASSIFICATION	3.576168327930264E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999919724338	WITHOUT_CLASSIFICATION	8.027566168910655E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999650005967	WITHOUT_CLASSIFICATION	3.499940336729345E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999988411605	WITHOUT_CLASSIFICATION	1.1588395219531958E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999979927565491	WITHOUT_CLASSIFICATION	2.007243450891717E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999886973033	WITHOUT_CLASSIFICATION	1.1302696638495341E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994773903101	WITHOUT_CLASSIFICATION	5.226096897911855E-7	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999691819058	WITHOUT_CLASSIFICATION	3.081809420875986E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999476579039	WITHOUT_CLASSIFICATION	5.234209606041993E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999978429757	WITHOUT_CLASSIFICATION	2.1570242380857518E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999937558213	WITHOUT_CLASSIFICATION	6.244178705776182E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999746838079	WITHOUT_CLASSIFICATION	2.5316192063739634E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999506854091	WITHOUT_CLASSIFICATION	4.931459076345031E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999986376392855	WITHOUT_CLASSIFICATION	1.3623607145205228E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999971970364	WITHOUT_CLASSIFICATION	2.8029636000495647E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999817296537	WITHOUT_CLASSIFICATION	1.8270346337913056E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999997205394827	WITHOUT_CLASSIFICATION	2.7946051731005508E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999611850295	WITHOUT_CLASSIFICATION	3.881497044653544E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999994993414574	WITHOUT_CLASSIFICATION	5.006585427202332E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999560320896	WITHOUT_CLASSIFICATION	4.396791042361136E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999611848731287	WITHOUT_CLASSIFICATION	3.881512687132212E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990581229594	WITHOUT_CLASSIFICATION	9.418770406081873E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099899396	WITHOUT_CLASSIFICATION	9.001006040859007E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999108481094	WITHOUT_CLASSIFICATION	8.915189057940925E-8	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999970263291	WITHOUT_CLASSIFICATION	2.973670914998755E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999964382206858	WITHOUT_CLASSIFICATION	3.561779314152948E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999676114688	WITHOUT_CLASSIFICATION	3.2388531275337886E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734822626882	WITHOUT_CLASSIFICATION	1.2651773731180266E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999771997324274	WITHOUT_CLASSIFICATION	2.2800267572653164E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999885751697	WITHOUT_CLASSIFICATION	1.1424830339060887E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999985338727	WITHOUT_CLASSIFICATION	1.4661272661637988E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998093457445	WITHOUT_CLASSIFICATION	1.9065425556826785E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997906126643	WITHOUT_CLASSIFICATION	2.0938733576519632E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999948923930887	WITHOUT_CLASSIFICATION	5.107606911320925E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999940963743	WITHOUT_CLASSIFICATION	5.903625593849548E-9	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999329299396	WITHOUT_CLASSIFICATION	6.707006039294119E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996501042555	WITHOUT_CLASSIFICATION	3.498957444831226E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998980065807	WITHOUT_CLASSIFICATION	1.0199341934186684E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999941621066	WITHOUT_CLASSIFICATION	5.837893391030886E-9	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999726794433158	WITHOUT_CLASSIFICATION	2.732055668417578E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999958318748762	WITHOUT_CLASSIFICATION	4.168125123770165E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999983847529375	WITHOUT_CLASSIFICATION	1.6152470626304147E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999930361132	WITHOUT_CLASSIFICATION	6.963886804973636E-8	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9972570152233977	WITHOUT_CLASSIFICATION	0.0027429847766021905	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999767608861	WITHOUT_CLASSIFICATION	2.3239113886341305E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.99999999296875	WITHOUT_CLASSIFICATION	7.0312500616518064E-9	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999060154143	WITHOUT_CLASSIFICATION	9.398458568210688E-8	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999347921696	WITHOUT_CLASSIFICATION	6.520783036882973E-8	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999952004179	WITHOUT_CLASSIFICATION	4.7995820227168156E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999991703498406	WITHOUT_CLASSIFICATION	8.296501593542801E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999997779326941	WITHOUT_CLASSIFICATION	2.2206730593225724E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999999227245303	WITHOUT_CLASSIFICATION	7.72754696584011E-8	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999974475626	WITHOUT_CLASSIFICATION	2.552437354931658E-9	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999970378345572	WITHOUT_CLASSIFICATION	2.9621654427588462E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998911692065	WITHOUT_CLASSIFICATION	1.0883079346020615E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999762216979	WITHOUT_CLASSIFICATION	2.37783020517525E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999929467952	WITHOUT_CLASSIFICATION	7.053204793253569E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999993647476696	WITHOUT_CLASSIFICATION	6.352523304890794E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997970385343	WITHOUT_CLASSIFICATION	2.0296146562981554E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999999090159404	WITHOUT_CLASSIFICATION	9.098405967915171E-8	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998599261903	WITHOUT_CLASSIFICATION	1.400738096093331E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999499213823	WITHOUT_CLASSIFICATION	5.007861768808094E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999071136285	WITHOUT_CLASSIFICATION	9.288637153981363E-8	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999818888878759	WITHOUT_CLASSIFICATION	1.811111212415256E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999750989986	WITHOUT_CLASSIFICATION	2.4901001368021988E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999414406676	WITHOUT_CLASSIFICATION	5.855933242921426E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999613655388	WITHOUT_CLASSIFICATION	3.863446127581912E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999414406676	WITHOUT_CLASSIFICATION	5.855933242921426E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998680528147	WITHOUT_CLASSIFICATION	1.3194718525028767E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999943669664	WITHOUT_CLASSIFICATION	5.633033561120138E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999915969959	WITHOUT_CLASSIFICATION	8.403004107082072E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999628912123	WITHOUT_CLASSIFICATION	3.710878772544678E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999697134659	WITHOUT_CLASSIFICATION	3.028653398958693E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999925509149	WITHOUT_CLASSIFICATION	7.449085100422477E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993626572352	WITHOUT_CLASSIFICATION	6.373427649166024E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999965507455603	WITHOUT_CLASSIFICATION	3.4492544397671715E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999671995904	WITHOUT_CLASSIFICATION	3.280040960161055E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999986885467	WITHOUT_CLASSIFICATION	1.311453313129529E-8	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999992397372114	WITHOUT_CLASSIFICATION	7.602627886257317E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999789636156	WITHOUT_CLASSIFICATION	2.103638441999284E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997886326413	WITHOUT_CLASSIFICATION	2.1136735859403706E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999982329987438	WITHOUT_CLASSIFICATION	1.7670012561692271E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999221104092	WITHOUT_CLASSIFICATION	7.788959078391077E-8	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999965931355	WITHOUT_CLASSIFICATION	3.4068643531362926E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999905798281	WITHOUT_CLASSIFICATION	9.420171893363741E-9	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999154321388	WITHOUT_CLASSIFICATION	8.456786108432866E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999862291439	WITHOUT_CLASSIFICATION	1.3770856213131387E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999975415469748	WITHOUT_CLASSIFICATION	2.458453025088047E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999994946143363	WITHOUT_CLASSIFICATION	5.05385663740201E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999984391761861	WITHOUT_CLASSIFICATION	1.5608238138706167E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998423956300497	WITHOUT_CLASSIFICATION	1.5760436995035701E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999941852732	WITHOUT_CLASSIFICATION	5.814726874477168E-9	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999981062062373	WITHOUT_CLASSIFICATION	1.8937937627225638E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999863254326236	WITHOUT_CLASSIFICATION	1.367456737655251E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999968294505118	WITHOUT_CLASSIFICATION	3.1705494881889836E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999992733525176	WITHOUT_CLASSIFICATION	7.266474824117048E-7	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999486790718	WITHOUT_CLASSIFICATION	5.13209280443972E-8	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999945587065061	WITHOUT_CLASSIFICATION	5.441293493898083E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999929971475413	WITHOUT_CLASSIFICATION	7.0028524587079E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999997124724406	WITHOUT_CLASSIFICATION	2.875275595193508E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999111422749	WITHOUT_CLASSIFICATION	8.885772513557057E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998281434875	WITHOUT_CLASSIFICATION	1.7185651240535093E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999997333713497	WITHOUT_CLASSIFICATION	2.6662865029694405E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999958808199256	WITHOUT_CLASSIFICATION	4.1191800743682076E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999948518571855	WITHOUT_CLASSIFICATION	5.148142814492193E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999480852716	WITHOUT_CLASSIFICATION	5.1914728387969516E-8	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999912005189185	WITHOUT_CLASSIFICATION	8.799481081435054E-6	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999989326420358	WITHOUT_CLASSIFICATION	1.0673579642378758E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999974624169458	WITHOUT_CLASSIFICATION	2.5375830543139805E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999996158291552	WITHOUT_CLASSIFICATION	3.8417084470706284E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999538204777447	WITHOUT_CLASSIFICATION	4.617952225527408E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999863254326236	WITHOUT_CLASSIFICATION	1.367456737655251E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999885351260979	WITHOUT_CLASSIFICATION	1.1464873902097484E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.999999972095847	WITHOUT_CLASSIFICATION	2.790415285964259E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999942908860646	WITHOUT_CLASSIFICATION	5.70911393538328E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999983959611366	WITHOUT_CLASSIFICATION	1.604038863448321E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999998137453943	WITHOUT_CLASSIFICATION	1.8625460567486193E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999125215971	WITHOUT_CLASSIFICATION	8.747840277687574E-8	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999965965264	WITHOUT_CLASSIFICATION	3.4034735628643116E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999934974714998	WITHOUT_CLASSIFICATION	6.5025285002192295E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999277909695	WITHOUT_CLASSIFICATION	7.220903049660325E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999904905958	WITHOUT_CLASSIFICATION	9.509404182494498E-9	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999971981483993	WITHOUT_CLASSIFICATION	2.801851600730619E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998880876757	WITHOUT_CLASSIFICATION	1.1191232432008057E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999951866658663	WITHOUT_CLASSIFICATION	4.81333413363525E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999981342731847	WITHOUT_CLASSIFICATION	1.865726815203256E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999999985136669	WITHOUT_CLASSIFICATION	1.4863331118711223E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999955806224	WITHOUT_CLASSIFICATION	4.419377583992221E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999067013866	WITHOUT_CLASSIFICATION	9.329861335993254E-8	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998334759248	WITHOUT_CLASSIFICATION	1.6652407513408682E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999952782177	WITHOUT_CLASSIFICATION	4.721782207090839E-9	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999885351260979	WITHOUT_CLASSIFICATION	1.1464873902097484E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999978007868916	WITHOUT_CLASSIFICATION	2.199213108478775E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999712352031	WITHOUT_CLASSIFICATION	2.8764796974842266E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999999883213616	WITHOUT_CLASSIFICATION	1.1678638412088914E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998662795408	WITHOUT_CLASSIFICATION	1.3372045917400657E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998819914697	WITHOUT_CLASSIFICATION	1.1800853018156903E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999985905580979	WITHOUT_CLASSIFICATION	1.409441902085625E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999985905580979	WITHOUT_CLASSIFICATION	1.409441902085625E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999345483412	WITHOUT_CLASSIFICATION	6.545165883097263E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999985905580979	WITHOUT_CLASSIFICATION	1.409441902085625E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999985905580979	WITHOUT_CLASSIFICATION	1.409441902085625E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999982808877675	WITHOUT_CLASSIFICATION	1.7191122324603314E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999977062510377	WITHOUT_CLASSIFICATION	2.2937489622201457E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999518916836	WITHOUT_CLASSIFICATION	4.810831639769663E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999534647098	WITHOUT_CLASSIFICATION	4.653529020732648E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999973069337	WITHOUT_CLASSIFICATION	2.6930663040012162E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998124933872	WITHOUT_CLASSIFICATION	1.8750661278033898E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999992598778732	WITHOUT_CLASSIFICATION	7.40122126808193E-7	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999968803386416	WITHOUT_CLASSIFICATION	3.1196613583884283E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999989523395572	WITHOUT_CLASSIFICATION	1.0476604428184723E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999802788112774	WITHOUT_CLASSIFICATION	1.9721188722679197E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999992819248924	WITHOUT_CLASSIFICATION	7.180751076112554E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994446724342	WITHOUT_CLASSIFICATION	5.553275658765377E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992339436985	WITHOUT_CLASSIFICATION	7.660563015269398E-7	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999824434733704	WITHOUT_CLASSIFICATION	1.7556526629652873E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997355651015	WITHOUT_CLASSIFICATION	2.644348985048806E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998813794995391	WITHOUT_CLASSIFICATION	1.1862050046082239E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000164538	WITHOUT_CLASSIFICATION	9.998354612722891E-8	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999966209525889	WITHOUT_CLASSIFICATION	3.3790474111402414E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999834079157678	WITHOUT_CLASSIFICATION	1.6592084232161715E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999776800106772	WITHOUT_CLASSIFICATION	2.2319989322723622E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999997020811896	WITHOUT_CLASSIFICATION	2.9791881032846686E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999998485907364	WITHOUT_CLASSIFICATION	1.5140926350488384E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000164538	WITHOUT_CLASSIFICATION	9.998354612722891E-8	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999968294505118	WITHOUT_CLASSIFICATION	3.1705494881889836E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999982146700145	WITHOUT_CLASSIFICATION	1.7853299855335426E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998454562865	WITHOUT_CLASSIFICATION	1.5454371342735597E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999474096785	WITHOUT_CLASSIFICATION	5.259032160853179E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999978580081217	WITHOUT_CLASSIFICATION	2.141991878222336E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999671845086	WITHOUT_CLASSIFICATION	3.2815491466747143E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999982462953104	WITHOUT_CLASSIFICATION	1.7537046896235842E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999995623128513	WITHOUT_CLASSIFICATION	4.3768714876517926E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999698211085	WITHOUT_CLASSIFICATION	3.0178891495198677E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998276438575	WITHOUT_CLASSIFICATION	1.7235614257308867E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999996260588887	WITHOUT_CLASSIFICATION	3.7394111133176113E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998924351476	WITHOUT_CLASSIFICATION	1.075648522842861E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999998903990737	WITHOUT_CLASSIFICATION	1.0960092630442049E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998423517487	WITHOUT_CLASSIFICATION	1.5764825147075208E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999974443786505	WITHOUT_CLASSIFICATION	2.5556213496480962E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999818942958	WITHOUT_CLASSIFICATION	1.8105704196538307E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999439889294	WITHOUT_CLASSIFICATION	5.601107057610011E-8	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999996935212235	WITHOUT_CLASSIFICATION	3.0647877636977005E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999537066585	WITHOUT_CLASSIFICATION	4.629334150041022E-8	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999997707990912	WITHOUT_CLASSIFICATION	2.2920090884014143E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999997948231553	WITHOUT_CLASSIFICATION	2.0517684470948054E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999952883016728	WITHOUT_CLASSIFICATION	4.711698327231534E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999986226162	WITHOUT_CLASSIFICATION	1.3773837520193648E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999698211085	WITHOUT_CLASSIFICATION	3.0178891495198677E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999999297167912	WITHOUT_CLASSIFICATION	7.028320880560795E-7	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999997964569912	WITHOUT_CLASSIFICATION	2.0354300878168413E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998181210029	WITHOUT_CLASSIFICATION	1.8187899700250142E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999984418246348	WITHOUT_CLASSIFICATION	1.5581753651125244E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981401492086	WITHOUT_CLASSIFICATION	1.8598507913761359E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999954752649707	WITHOUT_CLASSIFICATION	4.524735029352453E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999990086880985	WITHOUT_CLASSIFICATION	9.913119013806206E-7	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999999559123938	WITHOUT_CLASSIFICATION	4.408760615482052E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999991796745101	WITHOUT_CLASSIFICATION	8.203254899610746E-7	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999972652954591	WITHOUT_CLASSIFICATION	2.7347045408842416E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999739926019	WITHOUT_CLASSIFICATION	2.600739814394902E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996872996508	WITHOUT_CLASSIFICATION	3.1270034923489164E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999986230765253	WITHOUT_CLASSIFICATION	1.3769234747215316E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999984215210819	WITHOUT_CLASSIFICATION	1.5784789181022E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999954905878278	WITHOUT_CLASSIFICATION	4.509412172194829E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772003043	WITHOUT_CLASSIFICATION	7.227996957400263E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999739926019	WITHOUT_CLASSIFICATION	2.600739814394902E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999992373033905	WITHOUT_CLASSIFICATION	7.626966096075528E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999989523637844	WITHOUT_CLASSIFICATION	1.0476362155358014E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999506183478	WITHOUT_CLASSIFICATION	4.9381652227303224E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999965185724711	WITHOUT_CLASSIFICATION	3.481427528849135E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999999464235559	WITHOUT_CLASSIFICATION	5.35764440331233E-8	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999942987158	WITHOUT_CLASSIFICATION	5.701284263213645E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999893197329	WITHOUT_CLASSIFICATION	1.0680267047636201E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997397671226	WITHOUT_CLASSIFICATION	2.6023287736406953E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999610776809	WITHOUT_CLASSIFICATION	3.892231916310308E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998459997604	WITHOUT_CLASSIFICATION	1.5400023958355498E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999483242719	WITHOUT_CLASSIFICATION	5.167572819886408E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998543670261	WITHOUT_CLASSIFICATION	1.4563297390419195E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999967878576	WITHOUT_CLASSIFICATION	3.2121423849550137E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999967878576	WITHOUT_CLASSIFICATION	3.2121423849550137E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999955214721953	WITHOUT_CLASSIFICATION	4.478527804799185E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999625428406	WITHOUT_CLASSIFICATION	3.7457159316006026E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999999354596644	WITHOUT_CLASSIFICATION	6.454033569467277E-8	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999999483774856	WITHOUT_CLASSIFICATION	5.1622514475817247E-8	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999960084594594	WITHOUT_CLASSIFICATION	3.9915405406169304E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999862559932	WITHOUT_CLASSIFICATION	1.3744006788427804E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990634903404	WITHOUT_CLASSIFICATION	9.365096596081506E-7	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999344135834	WITHOUT_CLASSIFICATION	6.558641660022731E-7	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999982954332779	WITHOUT_CLASSIFICATION	1.7045667221438266E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996326201221	WITHOUT_CLASSIFICATION	3.673798778481751E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999862559932	WITHOUT_CLASSIFICATION	1.3744006788427804E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990634903404	WITHOUT_CLASSIFICATION	9.365096596081506E-7	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999344135834	WITHOUT_CLASSIFICATION	6.558641660022731E-7	TEST
// Caches	WITHOUT_CLASSIFICATION	0.999999657918871	WITHOUT_CLASSIFICATION	3.420811289828724E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999959240105482	WITHOUT_CLASSIFICATION	4.0759894518528465E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999418673163	WITHOUT_CLASSIFICATION	5.813268364328832E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999981149160488	WITHOUT_CLASSIFICATION	1.885083951186861E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998187169616	WITHOUT_CLASSIFICATION	1.812830384267044E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999920766160012	WITHOUT_CLASSIFICATION	7.923383998830385E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999992105234699	WITHOUT_CLASSIFICATION	7.894765300268791E-7	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999919434465655	WITHOUT_CLASSIFICATION	8.0565534345602E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999765148748043	WITHOUT_CLASSIFICATION	2.348512519568292E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999989331870323	WITHOUT_CLASSIFICATION	1.0668129676832947E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998421990404	WITHOUT_CLASSIFICATION	1.578009596853583E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999699444446939	WITHOUT_CLASSIFICATION	3.0055555306178152E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999922882963693	WITHOUT_CLASSIFICATION	7.711703630677377E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999693943059	WITHOUT_CLASSIFICATION	3.060569415888367E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999701621787	WITHOUT_CLASSIFICATION	2.9837821402980945E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999996123631492	WITHOUT_CLASSIFICATION	3.8763685080819654E-7	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9985851933658852	WITHOUT_CLASSIFICATION	0.0014148066341147332	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999855178277791	WITHOUT_CLASSIFICATION	1.4482172220785807E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999999491687049	WITHOUT_CLASSIFICATION	5.083129514630637E-8	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995340938734	WITHOUT_CLASSIFICATION	4.6590612657249675E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996780225205	WITHOUT_CLASSIFICATION	3.21977479470369E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999370786347	WITHOUT_CLASSIFICATION	6.292136540623415E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999994732343457	WITHOUT_CLASSIFICATION	5.267656543653309E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999815768323	WITHOUT_CLASSIFICATION	1.8423167674749075E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999717453134	WITHOUT_CLASSIFICATION	2.8254686543205855E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999938303799557	WITHOUT_CLASSIFICATION	6.16962004434402E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999057354277	WITHOUT_CLASSIFICATION	9.426457230497975E-7	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969186780451	WITHOUT_CLASSIFICATION	3.0813219550001836E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999832472823	WITHOUT_CLASSIFICATION	1.6752717647316426E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995783745441	WITHOUT_CLASSIFICATION	4.216254559109382E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980194666873	WITHOUT_CLASSIFICATION	1.9805333126784095E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984281748165	WITHOUT_CLASSIFICATION	1.571825183547997E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999984281748165	WITHOUT_CLASSIFICATION	1.571825183547997E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999984805698651	WITHOUT_CLASSIFICATION	1.5194301349541664E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999929493339066	WITHOUT_CLASSIFICATION	7.050666093391786E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999997966456446	WITHOUT_CLASSIFICATION	2.0335435531601912E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406544743354	WITHOUT_CLASSIFICATION	5.934552566452371E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998894378904	WITHOUT_CLASSIFICATION	1.1056210955013898E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998167465187	WITHOUT_CLASSIFICATION	1.832534813011797E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999854635616016	WITHOUT_CLASSIFICATION	1.45364383984498E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999999336577311	WITHOUT_CLASSIFICATION	6.6342268990478E-8	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999534474795	WITHOUT_CLASSIFICATION	4.6552520529823065E-8	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995333464101	WITHOUT_CLASSIFICATION	4.6665358989729393E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996996357088	WITHOUT_CLASSIFICATION	3.0036429126154543E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999888718664	WITHOUT_CLASSIFICATION	1.1128133598188728E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996385369653	WITHOUT_CLASSIFICATION	3.6146303475326656E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997136175076	WITHOUT_CLASSIFICATION	2.8638249233000286E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995465639951	WITHOUT_CLASSIFICATION	4.53436004900047E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995845313294	WITHOUT_CLASSIFICATION	4.154686705304304E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998789121877	WITHOUT_CLASSIFICATION	1.2108781235140854E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998775049486	WITHOUT_CLASSIFICATION	1.2249505141141927E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994531198745	WITHOUT_CLASSIFICATION	5.468801254253342E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996764324364	WITHOUT_CLASSIFICATION	3.2356756361606864E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999999996915039	WITHOUT_CLASSIFICATION	3.0849610071473405E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999940452438263	WITHOUT_CLASSIFICATION	5.954756173668054E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362345812096	WITHOUT_CLASSIFICATION	6.376541879041758E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999900314142	WITHOUT_CLASSIFICATION	9.968585894164865E-9	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998817112761	WITHOUT_CLASSIFICATION	1.182887238718932E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999029565289	WITHOUT_CLASSIFICATION	9.704347118075811E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999994053812215	WITHOUT_CLASSIFICATION	5.946187784466457E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999147985229	WITHOUT_CLASSIFICATION	8.520147704740341E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362345812096	WITHOUT_CLASSIFICATION	6.376541879041758E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362345812096	WITHOUT_CLASSIFICATION	6.376541879041758E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999388644406909	WITHOUT_CLASSIFICATION	6.113555930907378E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999262610683	WITHOUT_CLASSIFICATION	7.373893170156127E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973816807523	WITHOUT_CLASSIFICATION	2.6183192477367586E-6	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999998031705806	WITHOUT_CLASSIFICATION	1.9682941935303159E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500340623	WITHOUT_CLASSIFICATION	1.4996593765325321E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995340938734	WITHOUT_CLASSIFICATION	4.6590612657249675E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997249610018	WITHOUT_CLASSIFICATION	2.7503899817201383E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998978400338	WITHOUT_CLASSIFICATION	1.0215996621301257E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999997491603567	WITHOUT_CLASSIFICATION	2.5083964327273197E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991269753256	WITHOUT_CLASSIFICATION	8.730246745348842E-7	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996099983306	WITHOUT_CLASSIFICATION	3.9000166941396574E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998016688434	WITHOUT_CLASSIFICATION	1.9833115666576254E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999242144715	WITHOUT_CLASSIFICATION	7.578552845619798E-8	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999242144715	WITHOUT_CLASSIFICATION	7.578552845619798E-8	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997590944429	WITHOUT_CLASSIFICATION	2.409055571092509E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997590944429	WITHOUT_CLASSIFICATION	2.409055571092509E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987095861105	WITHOUT_CLASSIFICATION	1.2904138894566783E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998362960365	WITHOUT_CLASSIFICATION	1.6370396353393483E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999950405779162	WITHOUT_CLASSIFICATION	4.959422083838459E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932199952855	WITHOUT_CLASSIFICATION	6.780004714603193E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999999984730023	WITHOUT_CLASSIFICATION	1.526997698211848E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999516825742	WITHOUT_CLASSIFICATION	4.831742589998265E-8	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997659595486	WITHOUT_CLASSIFICATION	2.3404045137107385E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999819625104	WITHOUT_CLASSIFICATION	1.8037489620882898E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999883693756	WITHOUT_CLASSIFICATION	1.1630624398479743E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999407344832368	WITHOUT_CLASSIFICATION	5.9265516763096706E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998342245348	WITHOUT_CLASSIFICATION	1.657754652655427E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999999001143134	WITHOUT_CLASSIFICATION	9.988568663141061E-8	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999995283583883	WITHOUT_CLASSIFICATION	4.7164161161527544E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999724198461	WITHOUT_CLASSIFICATION	2.7580153934819593E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999996036029788	WITHOUT_CLASSIFICATION	3.9639702125211726E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999473565621	WITHOUT_CLASSIFICATION	5.2643437891383117E-8	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999473565621	WITHOUT_CLASSIFICATION	5.2643437891383117E-8	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996581330439	WITHOUT_CLASSIFICATION	3.418669561148362E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999018093643	WITHOUT_CLASSIFICATION	9.819063573997176E-8	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999497933303	WITHOUT_CLASSIFICATION	5.02066696674182E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999987397375311	WITHOUT_CLASSIFICATION	1.2602624689833068E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993247674953	WITHOUT_CLASSIFICATION	6.752325047019063E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938984550701	WITHOUT_CLASSIFICATION	6.101544929837212E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999929190017	WITHOUT_CLASSIFICATION	7.080998271770362E-9	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999551154881	WITHOUT_CLASSIFICATION	4.48845117881966E-8	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999962302804	WITHOUT_CLASSIFICATION	3.769719624116611E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999848307423	WITHOUT_CLASSIFICATION	1.5169257748700576E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999997427739	WITHOUT_CLASSIFICATION	2.572260626849265E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999688266604	WITHOUT_CLASSIFICATION	3.117333964304138E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999953286584	WITHOUT_CLASSIFICATION	4.6713416085834835E-8	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998444148795	WITHOUT_CLASSIFICATION	1.5558512048376406E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999995595746808	WITHOUT_CLASSIFICATION	4.4042531921608784E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999989355237294	WITHOUT_CLASSIFICATION	1.0644762706083997E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995734373087	WITHOUT_CLASSIFICATION	4.2656269126536324E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999993915388521	WITHOUT_CLASSIFICATION	6.084611480325099E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999994055555037	WITHOUT_CLASSIFICATION	5.944444963352811E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999946849805	WITHOUT_CLASSIFICATION	5.315019524762685E-9	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998993505376	WITHOUT_CLASSIFICATION	1.00649462385148E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.99999853803401	WITHOUT_CLASSIFICATION	1.4619659901279393E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999884276297	WITHOUT_CLASSIFICATION	1.1572370299105711E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996523465436	WITHOUT_CLASSIFICATION	3.47653456345151E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999997991672874	WITHOUT_CLASSIFICATION	2.0083271261180096E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999992875175884	WITHOUT_CLASSIFICATION	7.124824115735078E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997523209204	WITHOUT_CLASSIFICATION	2.4767907955299875E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999991890324555	WITHOUT_CLASSIFICATION	8.109675445061922E-7	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999838643843	WITHOUT_CLASSIFICATION	1.6135615734174108E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999945868808063	WITHOUT_CLASSIFICATION	5.413119193591513E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999951471166	WITHOUT_CLASSIFICATION	4.852883425159507E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998261050059	WITHOUT_CLASSIFICATION	1.7389499414283124E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999992515595283	WITHOUT_CLASSIFICATION	7.484404716346942E-7	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999999991151016	WITHOUT_CLASSIFICATION	8.848983926036319E-9	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999849611399656	WITHOUT_CLASSIFICATION	1.5038860034526787E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999997087384697	WITHOUT_CLASSIFICATION	2.912615303178344E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999991522414	WITHOUT_CLASSIFICATION	8.477585403301246E-10	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999638803236	WITHOUT_CLASSIFICATION	3.6119676398861275E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999975142955	WITHOUT_CLASSIFICATION	2.4857044630855626E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999998451489008	WITHOUT_CLASSIFICATION	1.5485109920371497E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999867259289	WITHOUT_CLASSIFICATION	1.3274071165470961E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999758702786	WITHOUT_CLASSIFICATION	2.4129721374967158E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999996481124888	WITHOUT_CLASSIFICATION	3.5188751119876087E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999900883966	WITHOUT_CLASSIFICATION	9.91160343314752E-9	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995770992935	WITHOUT_CLASSIFICATION	4.2290070653065405E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999996344017156	WITHOUT_CLASSIFICATION	3.6559828432148713E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999982527724585	WITHOUT_CLASSIFICATION	1.747227541480865E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501199079	WITHOUT_CLASSIFICATION	9.94988009212802E-6	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999999407525269	WITHOUT_CLASSIFICATION	5.924747311497712E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9912596685898499	WITHOUT_CLASSIFICATION	0.008740331410150065	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999014769569	WITHOUT_CLASSIFICATION	9.852304308687886E-8	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999633774168956	WITHOUT_CLASSIFICATION	3.66225831044045E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999997912813721	WITHOUT_CLASSIFICATION	2.0871862796039094E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999537693532297	WITHOUT_CLASSIFICATION	4.623064677031623E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999999039884118	WITHOUT_CLASSIFICATION	9.601158820513358E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999998887407747	WITHOUT_CLASSIFICATION	1.1125922530764628E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9979655119562055	WITHOUT_CLASSIFICATION	0.0020344880437944326	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999989191112008	WITHOUT_CLASSIFICATION	1.0808887991814662E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999530667204	WITHOUT_CLASSIFICATION	4.6933279643677536E-8	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998416220496913	WITHOUT_CLASSIFICATION	1.5837795030874827E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999943759881	WITHOUT_CLASSIFICATION	5.624011936772682E-9	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998509381475	WITHOUT_CLASSIFICATION	1.4906185254436677E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999992346023845	WITHOUT_CLASSIFICATION	7.653976155247643E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994001104625	WITHOUT_CLASSIFICATION	5.998895375312651E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998764125778	WITHOUT_CLASSIFICATION	1.235874222089135E-7	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999971247459	WITHOUT_CLASSIFICATION	2.8752540840874844E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999958750436	WITHOUT_CLASSIFICATION	4.1249564132529404E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997874425269	WITHOUT_CLASSIFICATION	2.1255747314787558E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219631999	WITHOUT_CLASSIFICATION	7.8780368001698E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219631999	WITHOUT_CLASSIFICATION	7.8780368001698E-6	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999994462691555	WITHOUT_CLASSIFICATION	5.537308444385196E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999992076046936	WITHOUT_CLASSIFICATION	7.92395306249347E-7	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999823546252	WITHOUT_CLASSIFICATION	1.7645374908676796E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996322618521	WITHOUT_CLASSIFICATION	3.6773814795252877E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999935624373	WITHOUT_CLASSIFICATION	6.437562759062955E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999984812686686	WITHOUT_CLASSIFICATION	1.5187313313858784E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999860437188	WITHOUT_CLASSIFICATION	1.3956281277931627E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997889000191	WITHOUT_CLASSIFICATION	2.1109998089514202E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999992577504168	WITHOUT_CLASSIFICATION	7.422495832933592E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998160013542	WITHOUT_CLASSIFICATION	1.8399864582635932E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999991717793	WITHOUT_CLASSIFICATION	8.282207096369095E-9	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999961066895	WITHOUT_CLASSIFICATION	3.893310438897186E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999995193983162	WITHOUT_CLASSIFICATION	4.806016838373065E-7	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999995331151	WITHOUT_CLASSIFICATION	4.6688489207756214E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996540272389	WITHOUT_CLASSIFICATION	3.459727610707746E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999989231416816	WITHOUT_CLASSIFICATION	1.0768583183485193E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999998370950786	WITHOUT_CLASSIFICATION	1.6290492133341614E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999998920336608	WITHOUT_CLASSIFICATION	1.0796633924733301E-7	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994981751625	WITHOUT_CLASSIFICATION	5.018248375013686E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999975052815774	WITHOUT_CLASSIFICATION	2.494718422552163E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998865277913	WITHOUT_CLASSIFICATION	1.1347220873315266E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997635911375	WITHOUT_CLASSIFICATION	2.3640886250576606E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999962900817967	WITHOUT_CLASSIFICATION	3.7099182033625724E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999629461865701	WITHOUT_CLASSIFICATION	3.7053813429875844E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999821384149	WITHOUT_CLASSIFICATION	1.7861585128139093E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999993012975282	WITHOUT_CLASSIFICATION	6.987024717881176E-7	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997960907344	WITHOUT_CLASSIFICATION	2.0390926569766177E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999990492616467	WITHOUT_CLASSIFICATION	9.507383531948045E-7	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999999670860512	WITHOUT_CLASSIFICATION	3.29139487987847E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999313848352	WITHOUT_CLASSIFICATION	6.86151648065374E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999999784706282	WITHOUT_CLASSIFICATION	2.1529371804977725E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999518364338	WITHOUT_CLASSIFICATION	4.816356625731109E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999999092791022	WITHOUT_CLASSIFICATION	9.072089789654235E-8	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999998579866051	WITHOUT_CLASSIFICATION	1.4201339492213445E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999966226719683	WITHOUT_CLASSIFICATION	3.377328031748013E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999966226719683	WITHOUT_CLASSIFICATION	3.377328031748013E-6	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999999227232375	WITHOUT_CLASSIFICATION	7.72767625090078E-8	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999962346463783	WITHOUT_CLASSIFICATION	3.7653536216626036E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999998940120246	WITHOUT_CLASSIFICATION	1.0598797530004619E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999993305192586	WITHOUT_CLASSIFICATION	6.694807413451038E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999287182348	WITHOUT_CLASSIFICATION	7.128176518455765E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999922430715685	WITHOUT_CLASSIFICATION	7.756928431372887E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999993572379821	WITHOUT_CLASSIFICATION	6.427620178802594E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999957096485	WITHOUT_CLASSIFICATION	4.290351536405498E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998685096766288	WITHOUT_CLASSIFICATION	1.3149032337131047E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999881463714	WITHOUT_CLASSIFICATION	1.1853628631374491E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999589349408	WITHOUT_CLASSIFICATION	4.106505918991519E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999997090584603	WITHOUT_CLASSIFICATION	2.909415397856763E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999994862079249	WITHOUT_CLASSIFICATION	5.137920751679317E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998987322997	WITHOUT_CLASSIFICATION	1.0126770031145317E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996524359236	WITHOUT_CLASSIFICATION	3.4756407636184166E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999986498119013	WITHOUT_CLASSIFICATION	1.350188098722398E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999986498119013	WITHOUT_CLASSIFICATION	1.350188098722398E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999952777114	WITHOUT_CLASSIFICATION	4.722288573562561E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999998737522449	WITHOUT_CLASSIFICATION	1.262477551403925E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999987940778067	WITHOUT_CLASSIFICATION	1.20592219330945E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998245628068	WITHOUT_CLASSIFICATION	1.7543719329082913E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999730699176519	WITHOUT_CLASSIFICATION	2.693008234811659E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999146975503	WITHOUT_CLASSIFICATION	8.530244971364067E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996855336032	WITHOUT_CLASSIFICATION	3.144663968493232E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996855336032	WITHOUT_CLASSIFICATION	3.144663968493232E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999994761787879	WITHOUT_CLASSIFICATION	5.238212121897177E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999964967446	WITHOUT_CLASSIFICATION	3.5032552984078782E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999979473133034	WITHOUT_CLASSIFICATION	2.0526866966554797E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999994087871	WITHOUT_CLASSIFICATION	5.91212912915469E-10	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999998141640083	WITHOUT_CLASSIFICATION	1.858359917466521E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999938342683921	WITHOUT_CLASSIFICATION	6.1657316079105885E-6	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999961335017	WITHOUT_CLASSIFICATION	3.866498250885104E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999221363042	WITHOUT_CLASSIFICATION	7.786369583443199E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999930201321	WITHOUT_CLASSIFICATION	6.979867887533168E-8	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999985155822543	WITHOUT_CLASSIFICATION	1.4844177457009264E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999992821188426	WITHOUT_CLASSIFICATION	7.178811574958624E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999988435391898	WITHOUT_CLASSIFICATION	1.1564608102583709E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999984449008438	WITHOUT_CLASSIFICATION	1.5550991561185478E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999982210835368	WITHOUT_CLASSIFICATION	1.7789164631391317E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999964382206858	WITHOUT_CLASSIFICATION	3.561779314152948E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998589817399	WITHOUT_CLASSIFICATION	1.4101826007685568E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999998164356902	WITHOUT_CLASSIFICATION	1.8356430981557213E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999994945235041	WITHOUT_CLASSIFICATION	5.054764958787797E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999991504828499	WITHOUT_CLASSIFICATION	8.495171500286359E-7	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999999430191807	WITHOUT_CLASSIFICATION	5.698081924814197E-8	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997042746325	WITHOUT_CLASSIFICATION	2.9572536759731005E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999987579963202	WITHOUT_CLASSIFICATION	1.2420036797936826E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999484207343872	WITHOUT_CLASSIFICATION	5.157926561285594E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999999796602439	WITHOUT_CLASSIFICATION	2.0339756072350028E-8	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999573650673	WITHOUT_CLASSIFICATION	4.263493274926099E-8	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999999483698986	WITHOUT_CLASSIFICATION	5.163010146913521E-8	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999735090335733	WITHOUT_CLASSIFICATION	2.6490966426680336E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999027054297	WITHOUT_CLASSIFICATION	9.729457034372972E-8	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999987596438	WITHOUT_CLASSIFICATION	1.2403562187679994E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999903604129	WITHOUT_CLASSIFICATION	9.63958709064641E-9	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999969507640455	WITHOUT_CLASSIFICATION	3.049235954532924E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999986172198666	WITHOUT_CLASSIFICATION	1.3827801334090076E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997086744967	WITHOUT_CLASSIFICATION	2.913255032689378E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998740175696	WITHOUT_CLASSIFICATION	1.259824303916526E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999998960614411	WITHOUT_CLASSIFICATION	1.039385589086918E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999967287894092	WITHOUT_CLASSIFICATION	3.2712105908740785E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999993619689406	WITHOUT_CLASSIFICATION	6.380310595219302E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999999402736582	WITHOUT_CLASSIFICATION	5.972634168858156E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997782285195	WITHOUT_CLASSIFICATION	2.2177148050112497E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998183813901	WITHOUT_CLASSIFICATION	1.816186099799205E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999214796966	WITHOUT_CLASSIFICATION	7.85203033995301E-8	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999998687695455	WITHOUT_CLASSIFICATION	1.3123045447907773E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999993915943003	WITHOUT_CLASSIFICATION	6.084056996652411E-7	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998204462381	WITHOUT_CLASSIFICATION	1.7955376190019112E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999986177235	WITHOUT_CLASSIFICATION	1.3822765328812694E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995826175546	WITHOUT_CLASSIFICATION	4.1738244543378825E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997782285195	WITHOUT_CLASSIFICATION	2.2177148050112497E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998183813901	WITHOUT_CLASSIFICATION	1.816186099799205E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999983459584775	WITHOUT_CLASSIFICATION	1.6540415224422126E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999988797795204	WITHOUT_CLASSIFICATION	1.1202204795600694E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999709955755	WITHOUT_CLASSIFICATION	2.9004424538469706E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999987811028931	WITHOUT_CLASSIFICATION	1.2188971069213082E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999995656322	WITHOUT_CLASSIFICATION	4.343677977861285E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998604800038	WITHOUT_CLASSIFICATION	1.3951999622331267E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999957821318424	WITHOUT_CLASSIFICATION	4.217868157718209E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999988334309694	WITHOUT_CLASSIFICATION	1.16656903067332E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999895567032	WITHOUT_CLASSIFICATION	1.0443296843157363E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999950112492341	WITHOUT_CLASSIFICATION	4.988750765963917E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999997266103777	WITHOUT_CLASSIFICATION	2.7338962224386427E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999950112492341	WITHOUT_CLASSIFICATION	4.988750765963917E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999975813608828	WITHOUT_CLASSIFICATION	2.4186391171724482E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999963367959919	WITHOUT_CLASSIFICATION	3.6632040080487104E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999997574482367	WITHOUT_CLASSIFICATION	2.42551763300806E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988872491783	WITHOUT_CLASSIFICATION	1.1127508216667646E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999999476795024	WITHOUT_CLASSIFICATION	5.232049759730094E-7	TEST
//}	WITHOUT_CLASSIFICATION	0.9999796083927032	WITHOUT_CLASSIFICATION	2.0391607296820615E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999796083927032	WITHOUT_CLASSIFICATION	2.0391607296820615E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999939094828778	WITHOUT_CLASSIFICATION	6.09051712219602E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999990354309827	WITHOUT_CLASSIFICATION	9.645690174117594E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990185993922	WITHOUT_CLASSIFICATION	9.814006076806793E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999999158855029	WITHOUT_CLASSIFICATION	8.411449709970235E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999995207972414	WITHOUT_CLASSIFICATION	4.792027586733809E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999947092848669	WITHOUT_CLASSIFICATION	5.290715133033552E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986374498369	WITHOUT_CLASSIFICATION	1.362550163245746E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999995991181918	WITHOUT_CLASSIFICATION	4.0088180824549214E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991155814	WITHOUT_CLASSIFICATION	1.6008844186720768E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999959312582298	WITHOUT_CLASSIFICATION	4.0687417701251426E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999987279726034	WITHOUT_CLASSIFICATION	1.2720273966713747E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999996749700495	WITHOUT_CLASSIFICATION	3.2502995061508814E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999831235614887	WITHOUT_CLASSIFICATION	1.6876438511334455E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.999999881250526	WITHOUT_CLASSIFICATION	1.1874947403801677E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999983326510467	WITHOUT_CLASSIFICATION	1.6673489533692616E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999988768955	WITHOUT_CLASSIFICATION	1.1231044788667728E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999306913259	WITHOUT_CLASSIFICATION	6.93086741766213E-8	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999158573432	WITHOUT_CLASSIFICATION	8.414265685519768E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999984970886676	WITHOUT_CLASSIFICATION	1.5029113324068692E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.999909253153431	WITHOUT_CLASSIFICATION	9.074684656898297E-5	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999826052974	WITHOUT_CLASSIFICATION	1.739470251239451E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999970751615652	WITHOUT_CLASSIFICATION	2.924838434922032E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999903079639	WITHOUT_CLASSIFICATION	9.692036101663698E-8	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999986352991174	WITHOUT_CLASSIFICATION	1.3647008826985547E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999992003272867	WITHOUT_CLASSIFICATION	7.996727133752387E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999935073763603	WITHOUT_CLASSIFICATION	6.492623639745613E-6	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999965589061	WITHOUT_CLASSIFICATION	3.4410938395792247E-9	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999969730578805	WITHOUT_CLASSIFICATION	3.0269421194653495E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996864664221	WITHOUT_CLASSIFICATION	3.135335779353497E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999994302901326	WITHOUT_CLASSIFICATION	5.697098674034921E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999726718475955	WITHOUT_CLASSIFICATION	2.7328152404478957E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999995074594259	WITHOUT_CLASSIFICATION	4.9254057410444725E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986374498369	WITHOUT_CLASSIFICATION	1.362550163245746E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999999836798126	WITHOUT_CLASSIFICATION	1.63201874672162E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999832317222223	WITHOUT_CLASSIFICATION	1.6768277777782942E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9976022354191596	WITHOUT_CLASSIFICATION	0.0023977645808404527	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999747765252439	WITHOUT_CLASSIFICATION	2.522347475602698E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999998162298782	WITHOUT_CLASSIFICATION	1.837701218374551E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999991470902403	WITHOUT_CLASSIFICATION	8.529097596574596E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999999158855029	WITHOUT_CLASSIFICATION	8.411449709970235E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999999158855029	WITHOUT_CLASSIFICATION	8.411449709970235E-7	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999993935998021	WITHOUT_CLASSIFICATION	6.064001980408987E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999974263460691	WITHOUT_CLASSIFICATION	2.573653930902816E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999995450679309	WITHOUT_CLASSIFICATION	4.549320690825192E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999993984792493	WITHOUT_CLASSIFICATION	6.015207505893738E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999996962694626	WITHOUT_CLASSIFICATION	3.0373053736206955E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995985379959	WITHOUT_CLASSIFICATION	4.0146200400202273E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999998289978183	WITHOUT_CLASSIFICATION	1.710021817245931E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999451228371	WITHOUT_CLASSIFICATION	5.487716295447646E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999283397218	WITHOUT_CLASSIFICATION	7.166027817551901E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999949900253	WITHOUT_CLASSIFICATION	5.009974711135364E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999956505444066	WITHOUT_CLASSIFICATION	4.34945559332907E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444589758207	WITHOUT_CLASSIFICATION	5.554102417918783E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999976682766804	WITHOUT_CLASSIFICATION	2.331723319657206E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999949900253	WITHOUT_CLASSIFICATION	5.009974711135364E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999814898377	WITHOUT_CLASSIFICATION	1.8510162296845977E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999999284002995	WITHOUT_CLASSIFICATION	7.159970042016518E-8	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999994563305995	WITHOUT_CLASSIFICATION	5.436694005995677E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9985153052546049	WITHOUT_CLASSIFICATION	0.0014846947453951134	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444589758207	WITHOUT_CLASSIFICATION	5.554102417918783E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985822834576	WITHOUT_CLASSIFICATION	1.4177165423105874E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999912176611	WITHOUT_CLASSIFICATION	8.782338790360258E-9	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999831050262	WITHOUT_CLASSIFICATION	1.689497366749102E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999984004713	WITHOUT_CLASSIFICATION	1.5995288433260413E-9	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999751746981724	WITHOUT_CLASSIFICATION	2.4825301827537197E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997369594127	WITHOUT_CLASSIFICATION	2.6304058734795956E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999628523744	WITHOUT_CLASSIFICATION	3.714762575763705E-8	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234253948	WITHOUT_CLASSIFICATION	4.7657460526371774E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999977526801397	WITHOUT_CLASSIFICATION	2.247319860296827E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999990658997617	WITHOUT_CLASSIFICATION	9.341002382338323E-7	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999964919997	WITHOUT_CLASSIFICATION	3.5080003578789454E-9	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999885471862	WITHOUT_CLASSIFICATION	1.145281388400395E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999949900253	WITHOUT_CLASSIFICATION	5.009974711135364E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985822834576	WITHOUT_CLASSIFICATION	1.4177165423105874E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999831050262	WITHOUT_CLASSIFICATION	1.689497366749102E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999997120354002	WITHOUT_CLASSIFICATION	2.8796459978250804E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999951556657837	WITHOUT_CLASSIFICATION	4.844334216383525E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999718535633	WITHOUT_CLASSIFICATION	2.8146436762744632E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444589758207	WITHOUT_CLASSIFICATION	5.554102417918783E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999939334929187	WITHOUT_CLASSIFICATION	6.066507081453616E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999990043852107	WITHOUT_CLASSIFICATION	9.956147892502682E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880453508	WITHOUT_CLASSIFICATION	2.8119546492619535E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454178486	WITHOUT_CLASSIFICATION	1.854582151444741E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234253948	WITHOUT_CLASSIFICATION	4.7657460526371774E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999814898377	WITHOUT_CLASSIFICATION	1.8510162296845977E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999975076617905	WITHOUT_CLASSIFICATION	2.492338209590058E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999882333715255	WITHOUT_CLASSIFICATION	1.1766628474385405E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999986914408734	WITHOUT_CLASSIFICATION	1.308559126691182E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999954774597197	WITHOUT_CLASSIFICATION	4.522540280219188E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999996562635003	WITHOUT_CLASSIFICATION	3.437364997009275E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999959849872329	WITHOUT_CLASSIFICATION	4.0150127671429384E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999986333345788	WITHOUT_CLASSIFICATION	1.3666654211384552E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988872491783	WITHOUT_CLASSIFICATION	1.1127508216667646E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999421489685	WITHOUT_CLASSIFICATION	5.785103154039268E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999450355587	WITHOUT_CLASSIFICATION	5.496444138878048E-8	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999576627440612	WITHOUT_CLASSIFICATION	4.23372559387294E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999992169667138	WITHOUT_CLASSIFICATION	7.830332862111824E-7	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999155738888	WITHOUT_CLASSIFICATION	8.442611116402224E-8	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999866848661	WITHOUT_CLASSIFICATION	1.3315133768095616E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999998184325849	WITHOUT_CLASSIFICATION	1.8156741518685075E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999504142946	WITHOUT_CLASSIFICATION	4.95857053174798E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454178486	WITHOUT_CLASSIFICATION	1.854582151444741E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999996035365644	WITHOUT_CLASSIFICATION	3.964634356108575E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999974745360019	WITHOUT_CLASSIFICATION	2.525463998142329E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999925021008487	WITHOUT_CLASSIFICATION	7.49789915137035E-6	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999986328424831	WITHOUT_CLASSIFICATION	1.367157516899283E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999973619966663	WITHOUT_CLASSIFICATION	2.638003333584898E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999668977647	WITHOUT_CLASSIFICATION	3.310223528476197E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997393241402	WITHOUT_CLASSIFICATION	2.606758597724693E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999898402183766	WITHOUT_CLASSIFICATION	1.0159781623524715E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999909294057	WITHOUT_CLASSIFICATION	9.070594296463525E-8	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9992808179214341	WITHOUT_CLASSIFICATION	7.191820785658426E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999986109668683	WITHOUT_CLASSIFICATION	1.3890331317317782E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999946748761078	WITHOUT_CLASSIFICATION	5.325123892142493E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999973049034642	WITHOUT_CLASSIFICATION	2.6950965359153826E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999986591184327	WITHOUT_CLASSIFICATION	1.340881567349783E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999926161012	WITHOUT_CLASSIFICATION	7.383898872455824E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999999863125901	WITHOUT_CLASSIFICATION	1.368740990208328E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999843833152	WITHOUT_CLASSIFICATION	1.561668479351484E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999836510377	WITHOUT_CLASSIFICATION	1.6348962302189215E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999991369033092	WITHOUT_CLASSIFICATION	8.630966908426975E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999987477128587	WITHOUT_CLASSIFICATION	1.2522871412852382E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999992712045728	WITHOUT_CLASSIFICATION	7.287954272398585E-7	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998271094981	WITHOUT_CLASSIFICATION	1.7289050201868237E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998557786874	WITHOUT_CLASSIFICATION	1.4422131256328893E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999978212335	WITHOUT_CLASSIFICATION	2.1787664900467086E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999688996932	WITHOUT_CLASSIFICATION	3.110030683031125E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997982788630255	WITHOUT_CLASSIFICATION	2.0172113697453314E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999966702617172	WITHOUT_CLASSIFICATION	3.3297382828740933E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999992346441801	WITHOUT_CLASSIFICATION	7.65355819906955E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996485287659	WITHOUT_CLASSIFICATION	3.514712340028414E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9993793919608019	WITHOUT_CLASSIFICATION	6.206080391980724E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998597497471	WITHOUT_CLASSIFICATION	1.402502528514364E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986770949688	WITHOUT_CLASSIFICATION	1.3229050312677941E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999649775074	WITHOUT_CLASSIFICATION	3.502249259257267E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999723212949542	WITHOUT_CLASSIFICATION	2.76787050457664E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983641597292	WITHOUT_CLASSIFICATION	1.6358402708813213E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999216554998	WITHOUT_CLASSIFICATION	7.834450014521459E-8	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999571167444	WITHOUT_CLASSIFICATION	4.288325553305414E-8	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995265660585	WITHOUT_CLASSIFICATION	4.7343394150531744E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999216554998	WITHOUT_CLASSIFICATION	7.834450014521459E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983641597292	WITHOUT_CLASSIFICATION	1.6358402708813213E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999571167444	WITHOUT_CLASSIFICATION	4.288325553305414E-8	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.999999730309179	WITHOUT_CLASSIFICATION	2.6969082096810856E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998556004707	WITHOUT_CLASSIFICATION	1.4439952938984383E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999553079119	WITHOUT_CLASSIFICATION	4.46920880537893E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999866605951	WITHOUT_CLASSIFICATION	1.333940490931551E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999734156415	WITHOUT_CLASSIFICATION	2.6584358429623088E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997155859362815	WITHOUT_CLASSIFICATION	2.844140637184213E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999861514945699	WITHOUT_CLASSIFICATION	1.3848505430170256E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999958894332329	WITHOUT_CLASSIFICATION	4.1105667670465185E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999994570758671	WITHOUT_CLASSIFICATION	5.429241329071075E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999983625971186	WITHOUT_CLASSIFICATION	1.637402881421876E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.999999877548917	WITHOUT_CLASSIFICATION	1.2245108299747208E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999975633828357	WITHOUT_CLASSIFICATION	2.436617164355425E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.99999993811082	WITHOUT_CLASSIFICATION	6.188918002362389E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.99999844785164	WITHOUT_CLASSIFICATION	1.552148360022265E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998959528709	WITHOUT_CLASSIFICATION	1.0404712913140158E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998313322782	WITHOUT_CLASSIFICATION	1.6866772181246726E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998898302035	WITHOUT_CLASSIFICATION	1.1016979645605016E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999802363683	WITHOUT_CLASSIFICATION	1.9763631753448994E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995625347909	WITHOUT_CLASSIFICATION	4.374652090886429E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999984662929667	WITHOUT_CLASSIFICATION	1.5337070332895311E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999993254883143	WITHOUT_CLASSIFICATION	6.74511685716545E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999979690598	WITHOUT_CLASSIFICATION	2.030940321324348E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999984284518507	WITHOUT_CLASSIFICATION	1.5715481492904192E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998817019634	WITHOUT_CLASSIFICATION	1.1829803657920265E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999955900865034	WITHOUT_CLASSIFICATION	4.409913496511001E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999955900865034	WITHOUT_CLASSIFICATION	4.409913496511001E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999948766135	WITHOUT_CLASSIFICATION	5.123386397440313E-9	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999948766135	WITHOUT_CLASSIFICATION	5.123386397440313E-9	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999999426626539	WITHOUT_CLASSIFICATION	5.7337346098467E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998898302035	WITHOUT_CLASSIFICATION	1.1016979645605016E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999998610816342	WITHOUT_CLASSIFICATION	1.3891836572551236E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999979247672	WITHOUT_CLASSIFICATION	2.075232709213267E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999700790193	WITHOUT_CLASSIFICATION	2.9920980700771507E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999700790193	WITHOUT_CLASSIFICATION	2.9920980700771507E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999999819547087	WITHOUT_CLASSIFICATION	1.80452913009098E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996346713463	WITHOUT_CLASSIFICATION	3.6532865365818207E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999938115578	WITHOUT_CLASSIFICATION	6.188442187400043E-9	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999987351619097	WITHOUT_CLASSIFICATION	1.26483809025547E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999990703555524	WITHOUT_CLASSIFICATION	9.296444477468221E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999819103742	WITHOUT_CLASSIFICATION	1.8089625763203183E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999994778527115	WITHOUT_CLASSIFICATION	5.221472884897866E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999995536475028	WITHOUT_CLASSIFICATION	4.4635249713018677E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999993783820853	WITHOUT_CLASSIFICATION	6.216179146656376E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999563849201	WITHOUT_CLASSIFICATION	4.361507993222954E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999999525922427	WITHOUT_CLASSIFICATION	4.7407757300469316E-8	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999992213999793	WITHOUT_CLASSIFICATION	7.786000206165749E-7	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996077304293	WITHOUT_CLASSIFICATION	3.9226957064602735E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999993581035472	WITHOUT_CLASSIFICATION	6.418964528275388E-7	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999979963985601	WITHOUT_CLASSIFICATION	2.0036014398658307E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991989444145	WITHOUT_CLASSIFICATION	8.010555855597804E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387559683	WITHOUT_CLASSIFICATION	5.612440317187971E-7	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999743988948	WITHOUT_CLASSIFICATION	2.5601105334110352E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999945866217	WITHOUT_CLASSIFICATION	5.413378283452923E-9	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999754077935	WITHOUT_CLASSIFICATION	2.4592206577451648E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999956702139	WITHOUT_CLASSIFICATION	4.329786086441413E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999984507362297	WITHOUT_CLASSIFICATION	1.549263770258123E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999781366254	WITHOUT_CLASSIFICATION	2.1863374668413474E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999946216972	WITHOUT_CLASSIFICATION	5.3783028648278254E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406544743354	WITHOUT_CLASSIFICATION	5.934552566452371E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997608946766	WITHOUT_CLASSIFICATION	2.3910532343097656E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999946748761078	WITHOUT_CLASSIFICATION	5.325123892142493E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999994643160801	WITHOUT_CLASSIFICATION	5.356839198446039E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999998061057548	WITHOUT_CLASSIFICATION	1.9389424520330894E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999337018928	WITHOUT_CLASSIFICATION	6.629810720280027E-7	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998841532278	WITHOUT_CLASSIFICATION	1.158467722048235E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999994487004937	WITHOUT_CLASSIFICATION	5.512995063260926E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999994487004937	WITHOUT_CLASSIFICATION	5.512995063260926E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999999924426995	WITHOUT_CLASSIFICATION	7.557300497256155E-8	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999998228761997	WITHOUT_CLASSIFICATION	1.7712380027986327E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999990625198025	WITHOUT_CLASSIFICATION	9.374801974227206E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999990625198025	WITHOUT_CLASSIFICATION	9.374801974227206E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997585899727	WITHOUT_CLASSIFICATION	2.4141002722547195E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999994536351267	WITHOUT_CLASSIFICATION	5.463648734291268E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999984316319286	WITHOUT_CLASSIFICATION	1.5683680714191896E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500340623	WITHOUT_CLASSIFICATION	1.4996593765325321E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999994938205913	WITHOUT_CLASSIFICATION	5.061794087869446E-7	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999985574992739	WITHOUT_CLASSIFICATION	1.4425007260668561E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999997713067312	WITHOUT_CLASSIFICATION	2.2869326891539506E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999105826544	WITHOUT_CLASSIFICATION	8.941734567727187E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999609372787	WITHOUT_CLASSIFICATION	3.906272123724768E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999609372787	WITHOUT_CLASSIFICATION	3.906272123724768E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999998295227	WITHOUT_CLASSIFICATION	1.7047734907732583E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999222094106	WITHOUT_CLASSIFICATION	7.779058941764177E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999222094106	WITHOUT_CLASSIFICATION	7.779058941764177E-8	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999857820567	WITHOUT_CLASSIFICATION	1.4217943320891252E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999259856088	WITHOUT_CLASSIFICATION	7.401439114276271E-8	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9963855336692126	WITHOUT_CLASSIFICATION	0.003614466330787428	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.999999956431641	WITHOUT_CLASSIFICATION	4.356835896805581E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999798477311	WITHOUT_CLASSIFICATION	2.01522689133255E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999734564113	WITHOUT_CLASSIFICATION	2.6543588710393027E-8	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999954550081107	WITHOUT_CLASSIFICATION	4.544991889365198E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999883084073102	WITHOUT_CLASSIFICATION	1.1691592689791504E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999765895216	WITHOUT_CLASSIFICATION	2.3410478456662093E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999991098722502	WITHOUT_CLASSIFICATION	8.901277497965028E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999951603007	WITHOUT_CLASSIFICATION	4.839699335136317E-9	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999221091355	WITHOUT_CLASSIFICATION	7.789086456869277E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804254956	WITHOUT_CLASSIFICATION	6.319574504375135E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804254956	WITHOUT_CLASSIFICATION	6.319574504375135E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804254956	WITHOUT_CLASSIFICATION	6.319574504375135E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804254956	WITHOUT_CLASSIFICATION	6.319574504375135E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995269083192	WITHOUT_CLASSIFICATION	4.7309168084195654E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999996473285302	WITHOUT_CLASSIFICATION	3.526714697672204E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999975816643365	WITHOUT_CLASSIFICATION	2.4183356634688993E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.99999277588596	WITHOUT_CLASSIFICATION	7.2241140399118325E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993163841774	WITHOUT_CLASSIFICATION	6.836158226738355E-7	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999997310669493	WITHOUT_CLASSIFICATION	2.689330506970671E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999976170021235	WITHOUT_CLASSIFICATION	2.3829978764603237E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999989325730169	WITHOUT_CLASSIFICATION	1.0674269831920991E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999519253802	WITHOUT_CLASSIFICATION	4.807461983131289E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999837358412	WITHOUT_CLASSIFICATION	1.626415880411933E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999998603302064	WITHOUT_CLASSIFICATION	1.3966979357162198E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997816240103	WITHOUT_CLASSIFICATION	2.1837598975902872E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9547197303259436	WITHOUT_CLASSIFICATION	0.045280269674056475	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999967168504871	WITHOUT_CLASSIFICATION	3.283149512829036E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999929969070017	WITHOUT_CLASSIFICATION	7.0030929982536365E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997816240103	WITHOUT_CLASSIFICATION	2.1837598975902872E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999480695953612	WITHOUT_CLASSIFICATION	5.193040463888715E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999997633152	WITHOUT_CLASSIFICATION	2.3668475672702164E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999862087533	WITHOUT_CLASSIFICATION	1.3791246797651537E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999978889421238	WITHOUT_CLASSIFICATION	2.1110578760838652E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998968668878	WITHOUT_CLASSIFICATION	1.0313311218473591E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998812176474	WITHOUT_CLASSIFICATION	1.1878235261769036E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999996418698	WITHOUT_CLASSIFICATION	3.5813017448057885E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999997415774424	WITHOUT_CLASSIFICATION	2.5842255758943743E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999929578385	WITHOUT_CLASSIFICATION	7.042161575961891E-9	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999641815367	WITHOUT_CLASSIFICATION	3.581846323162999E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999824796426	WITHOUT_CLASSIFICATION	1.7520357341427234E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.99999987683102	WITHOUT_CLASSIFICATION	1.2316898009818532E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999983118098654	WITHOUT_CLASSIFICATION	1.6881901346398555E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998690629454267	WITHOUT_CLASSIFICATION	1.3093705457327648E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998951130548	WITHOUT_CLASSIFICATION	1.0488694523203548E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999999590732654	WITHOUT_CLASSIFICATION	4.092673460474781E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998109457066	WITHOUT_CLASSIFICATION	1.8905429339397445E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998519439423	WITHOUT_CLASSIFICATION	1.4805605780848856E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991325153799	WITHOUT_CLASSIFICATION	8.674846200656178E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998519439423	WITHOUT_CLASSIFICATION	1.4805605780848856E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999777533896	WITHOUT_CLASSIFICATION	2.2246610467843976E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999996089290188	WITHOUT_CLASSIFICATION	3.9107098108616875E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999999452618822	WITHOUT_CLASSIFICATION	5.4738117841558545E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999945796500839	WITHOUT_CLASSIFICATION	5.4203499161429705E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998109457066	WITHOUT_CLASSIFICATION	1.8905429339397445E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991325153799	WITHOUT_CLASSIFICATION	8.674846200656178E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999777533896	WITHOUT_CLASSIFICATION	2.2246610467843976E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998921637769	WITHOUT_CLASSIFICATION	1.0783622312377089E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999999507560456	WITHOUT_CLASSIFICATION	4.9243954240931804E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.999995661178449	WITHOUT_CLASSIFICATION	4.338821551078244E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.999998502851481	WITHOUT_CLASSIFICATION	1.4971485190552434E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998303207993	WITHOUT_CLASSIFICATION	1.6967920070258525E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999917853345	WITHOUT_CLASSIFICATION	8.214665525850394E-9	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387559683	WITHOUT_CLASSIFICATION	5.612440317187971E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999996089290188	WITHOUT_CLASSIFICATION	3.9107098108616875E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998739086129	WITHOUT_CLASSIFICATION	1.2609138703425874E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999452325065	WITHOUT_CLASSIFICATION	5.476749358785437E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999875280796	WITHOUT_CLASSIFICATION	1.2471920465105906E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387559683	WITHOUT_CLASSIFICATION	5.612440317187971E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999994898105405	WITHOUT_CLASSIFICATION	5.101894594214242E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387559683	WITHOUT_CLASSIFICATION	5.612440317187971E-7	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999164662534	WITHOUT_CLASSIFICATION	8.353374651354574E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996501042555	WITHOUT_CLASSIFICATION	3.498957444831226E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999998643895539	WITHOUT_CLASSIFICATION	1.356104460932758E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999987058463303	WITHOUT_CLASSIFICATION	1.2941536696712582E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999767608861	WITHOUT_CLASSIFICATION	2.3239113886341305E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999999096953831	WITHOUT_CLASSIFICATION	9.030461684095947E-8	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999648437902	WITHOUT_CLASSIFICATION	3.5156209929392036E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999996788194351	WITHOUT_CLASSIFICATION	3.2118056493527515E-7	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999998531203347	WITHOUT_CLASSIFICATION	1.4687966530016537E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999968803032854	WITHOUT_CLASSIFICATION	3.119696714640377E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219631999	WITHOUT_CLASSIFICATION	7.8780368001698E-6	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995333624956	WITHOUT_CLASSIFICATION	4.6663750433946576E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9963855336692126	WITHOUT_CLASSIFICATION	0.003614466330787428	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999994966299609	WITHOUT_CLASSIFICATION	5.033700390954006E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999946948476377	WITHOUT_CLASSIFICATION	5.305152362351241E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999958694698048	WITHOUT_CLASSIFICATION	4.130530195200639E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999726794433158	WITHOUT_CLASSIFICATION	2.732055668417578E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999619039471	WITHOUT_CLASSIFICATION	3.809605291559048E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999796906328	WITHOUT_CLASSIFICATION	2.0309367175048085E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999911442579	WITHOUT_CLASSIFICATION	8.855742211414569E-9	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999996358223447	WITHOUT_CLASSIFICATION	3.641776552860756E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999989012355	WITHOUT_CLASSIFICATION	1.0987645330606882E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999040544174	WITHOUT_CLASSIFICATION	9.594558253906796E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9955919529653947	WITHOUT_CLASSIFICATION	0.004408047034605351	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999899172745385	WITHOUT_CLASSIFICATION	1.008272546154846E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999977635030509	WITHOUT_CLASSIFICATION	2.2364969490214134E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999938562143056	WITHOUT_CLASSIFICATION	6.143785694397051E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999964364547252	WITHOUT_CLASSIFICATION	3.563545274637368E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854563832963	WITHOUT_CLASSIFICATION	1.4543616703754056E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999983757122166	WITHOUT_CLASSIFICATION	1.6242877833412991E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999982186336	WITHOUT_CLASSIFICATION	1.78136645714798E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999991657702	WITHOUT_CLASSIFICATION	8.342298427302557E-10	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999937507662475	WITHOUT_CLASSIFICATION	6.249233752500556E-6	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999759384222566	WITHOUT_CLASSIFICATION	2.4061577743338107E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.998720129368842	WITHOUT_CLASSIFICATION	0.0012798706311580286	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999818888878759	WITHOUT_CLASSIFICATION	1.811111212415256E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999987208067167	WITHOUT_CLASSIFICATION	1.2791932832816489E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999970412814686	WITHOUT_CLASSIFICATION	2.9587185313362112E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999650139531061	WITHOUT_CLASSIFICATION	3.4986046893783175E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999987700816815	WITHOUT_CLASSIFICATION	1.2299183184199795E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9961068521306194	WITHOUT_CLASSIFICATION	0.003893147869380523	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999960209321	WITHOUT_CLASSIFICATION	3.9790679095576745E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995240668641	WITHOUT_CLASSIFICATION	4.7593313597118346E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999900558556507	WITHOUT_CLASSIFICATION	9.944144349277187E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999900558556507	WITHOUT_CLASSIFICATION	9.944144349277187E-6	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999621301336	WITHOUT_CLASSIFICATION	3.786986634643186E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999996788194351	WITHOUT_CLASSIFICATION	3.2118056493527515E-7	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999991944063146	WITHOUT_CLASSIFICATION	8.055936854245795E-7	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999985800679855	WITHOUT_CLASSIFICATION	1.4199320145363834E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999973844415	WITHOUT_CLASSIFICATION	2.6155586177863456E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999782876947	WITHOUT_CLASSIFICATION	2.1712305220598274E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999964161675915	WITHOUT_CLASSIFICATION	3.5838324084949782E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9999116547722676	WITHOUT_CLASSIFICATION	8.834522773234631E-5	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999759018279586	WITHOUT_CLASSIFICATION	2.4098172041413388E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999998931750303	WITHOUT_CLASSIFICATION	1.0682496971195568E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999698684054	WITHOUT_CLASSIFICATION	3.013159459327773E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.999999995044698	WITHOUT_CLASSIFICATION	4.95530204912891E-9	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999707990873	WITHOUT_CLASSIFICATION	2.9200912698475852E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999624806256984	WITHOUT_CLASSIFICATION	3.751937430159046E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999990823740306	WITHOUT_CLASSIFICATION	9.176259695236587E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999753384862	WITHOUT_CLASSIFICATION	2.466151386703786E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999680091837	WITHOUT_CLASSIFICATION	3.199081631492025E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999997621312	WITHOUT_CLASSIFICATION	2.37868809044664E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999982061957	WITHOUT_CLASSIFICATION	1.7938043090977485E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999999991365228	WITHOUT_CLASSIFICATION	8.634771948824856E-9	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999999162831	WITHOUT_CLASSIFICATION	8.371689948897373E-10	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999160431331	WITHOUT_CLASSIFICATION	8.395686697822423E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996526725843	WITHOUT_CLASSIFICATION	3.4732741576948694E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999417944064	WITHOUT_CLASSIFICATION	5.820559361486292E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9961068521306194	WITHOUT_CLASSIFICATION	0.003893147869380523	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999911215273	WITHOUT_CLASSIFICATION	8.878472770380008E-9	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999960478123	WITHOUT_CLASSIFICATION	3.9521876479670455E-9	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999943424155	WITHOUT_CLASSIFICATION	5.657584467177864E-9	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999856306828907	WITHOUT_CLASSIFICATION	1.4369317109403819E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999999413833197	WITHOUT_CLASSIFICATION	5.861668024485282E-8	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997286124944	WITHOUT_CLASSIFICATION	2.7138750560742294E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999144349319931	WITHOUT_CLASSIFICATION	8.556506800696213E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999860501042	WITHOUT_CLASSIFICATION	1.394989580202459E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999659711741	WITHOUT_CLASSIFICATION	3.4028825845977075E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998893682449	WITHOUT_CLASSIFICATION	1.1063175519631968E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998760836671	WITHOUT_CLASSIFICATION	1.2391633282973693E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999047079691415	WITHOUT_CLASSIFICATION	9.529203085848708E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999969651064918	WITHOUT_CLASSIFICATION	3.0348935082305955E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995194279442	WITHOUT_CLASSIFICATION	4.805720557834854E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999895431596	WITHOUT_CLASSIFICATION	1.0456840380350658E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999895431596	WITHOUT_CLASSIFICATION	1.0456840380350658E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999416110905	WITHOUT_CLASSIFICATION	5.8388909567349155E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999997657095633	WITHOUT_CLASSIFICATION	2.3429043675093222E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983620010919	WITHOUT_CLASSIFICATION	1.63799890806473E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983620010919	WITHOUT_CLASSIFICATION	1.63799890806473E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999959531092	WITHOUT_CLASSIFICATION	4.046890877671145E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994446724342	WITHOUT_CLASSIFICATION	5.553275658765377E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999833431583	WITHOUT_CLASSIFICATION	1.6656841661023828E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996387473831	WITHOUT_CLASSIFICATION	3.6125261693211015E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999018644288	WITHOUT_CLASSIFICATION	9.813557120765022E-7	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997727464867	WITHOUT_CLASSIFICATION	2.272535132361647E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999860333565	WITHOUT_CLASSIFICATION	1.3966643448359489E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999860333565	WITHOUT_CLASSIFICATION	1.3966643448359489E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992423761667	WITHOUT_CLASSIFICATION	7.57623833337086E-7	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999929324033	WITHOUT_CLASSIFICATION	7.067596753725702E-9	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999996011087524	WITHOUT_CLASSIFICATION	3.988912476011947E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999931871585	WITHOUT_CLASSIFICATION	6.8128416065344335E-9	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999931871585	WITHOUT_CLASSIFICATION	6.8128416065344335E-9	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.999999947797224	WITHOUT_CLASSIFICATION	5.220277587268229E-8	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999734660806	WITHOUT_CLASSIFICATION	2.6533919280715988E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999944954827161	WITHOUT_CLASSIFICATION	5.5045172839552E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998310862959	WITHOUT_CLASSIFICATION	1.6891370425035013E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999672878723	WITHOUT_CLASSIFICATION	3.271212758437635E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998751398428	WITHOUT_CLASSIFICATION	1.2486015727123806E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999747820474	WITHOUT_CLASSIFICATION	2.521795262541145E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998955541253	WITHOUT_CLASSIFICATION	1.0444587476699776E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998814343277	WITHOUT_CLASSIFICATION	1.1856567220248764E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999994702116266	WITHOUT_CLASSIFICATION	5.297883733427444E-7	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999999630334242	WITHOUT_CLASSIFICATION	3.696657575729862E-8	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999966639841348	WITHOUT_CLASSIFICATION	3.3360158651079655E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.999954897015155	WITHOUT_CLASSIFICATION	4.5102984845009875E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999999397028218	WITHOUT_CLASSIFICATION	6.029717819810487E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994017877625	WITHOUT_CLASSIFICATION	5.982122373938442E-7	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999995094373468	WITHOUT_CLASSIFICATION	4.905626531931784E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999897705586	WITHOUT_CLASSIFICATION	1.022944146471607E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999991432903348	WITHOUT_CLASSIFICATION	8.567096652715553E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999999333340263	WITHOUT_CLASSIFICATION	6.666597381133272E-8	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999994843593907	WITHOUT_CLASSIFICATION	5.156406093402076E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999999879532996	WITHOUT_CLASSIFICATION	1.2046700398280005E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999998873128042	WITHOUT_CLASSIFICATION	1.1268719572841173E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999805189670941	WITHOUT_CLASSIFICATION	1.9481032905954324E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999707868386137	WITHOUT_CLASSIFICATION	2.9213161386265727E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999828996257314	WITHOUT_CLASSIFICATION	1.7100374268620682E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999413980907	WITHOUT_CLASSIFICATION	5.8601909192659614E-8	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999999776592063	WITHOUT_CLASSIFICATION	2.2340793700371887E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999882133788649	WITHOUT_CLASSIFICATION	1.1786621135151382E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999998061375	WITHOUT_CLASSIFICATION	1.938625062640865E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999701621787	WITHOUT_CLASSIFICATION	2.9837821402980945E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999370786347	WITHOUT_CLASSIFICATION	6.292136540623415E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999880140232	WITHOUT_CLASSIFICATION	1.1985976687828396E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999787005462	WITHOUT_CLASSIFICATION	2.1299453714574365E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999984111454269	WITHOUT_CLASSIFICATION	1.588854573121262E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.99999987263392	WITHOUT_CLASSIFICATION	1.2736608006118535E-7	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.99998423370344	WITHOUT_CLASSIFICATION	1.576629655995841E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.999996530721345	WITHOUT_CLASSIFICATION	3.4692786549905523E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999991494307826	WITHOUT_CLASSIFICATION	8.505692173181746E-7	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999998977681842	WITHOUT_CLASSIFICATION	1.022318158510378E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999168143809	WITHOUT_CLASSIFICATION	8.318561906571636E-8	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999582371801	WITHOUT_CLASSIFICATION	4.1762819808617965E-8	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997409154098	WITHOUT_CLASSIFICATION	2.5908459029709415E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999999057423903	WITHOUT_CLASSIFICATION	9.425760967063711E-8	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999901361734	WITHOUT_CLASSIFICATION	9.863826554836085E-9	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999998772845696	WITHOUT_CLASSIFICATION	1.2271543045166978E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999999908541132	WITHOUT_CLASSIFICATION	9.145886804983233E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997490804494	WITHOUT_CLASSIFICATION	2.5091955055286723E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999989389431437	WITHOUT_CLASSIFICATION	1.0610568562925856E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999999975916944	WITHOUT_CLASSIFICATION	2.4083055992510425E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999958805014912	WITHOUT_CLASSIFICATION	4.1194985087032154E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999999468736189	WITHOUT_CLASSIFICATION	5.3126381175728864E-8	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999857244894	WITHOUT_CLASSIFICATION	1.4275510501605795E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999993623748559	WITHOUT_CLASSIFICATION	6.376251440616488E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999988792597	WITHOUT_CLASSIFICATION	1.1207402701860914E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999995474904402	WITHOUT_CLASSIFICATION	4.525095597021451E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999999942882954	WITHOUT_CLASSIFICATION	5.711704599258853E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999718788453	WITHOUT_CLASSIFICATION	2.8121154644657447E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999585000814	WITHOUT_CLASSIFICATION	4.1499918541749576E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999999411288314	WITHOUT_CLASSIFICATION	5.8871168567228906E-8	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999282101302949	WITHOUT_CLASSIFICATION	7.178986970511824E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998298267551	WITHOUT_CLASSIFICATION	1.7017324484519418E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998298267551	WITHOUT_CLASSIFICATION	1.7017324484519418E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999955140951265	WITHOUT_CLASSIFICATION	4.4859048733806175E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999949570409413	WITHOUT_CLASSIFICATION	5.0429590587019245E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999791796459	WITHOUT_CLASSIFICATION	2.0820354050592766E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999793485798	WITHOUT_CLASSIFICATION	2.0651420302576695E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998715226108	WITHOUT_CLASSIFICATION	1.2847738911157036E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999998553266114	WITHOUT_CLASSIFICATION	1.4467338860030315E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999978680722	WITHOUT_CLASSIFICATION	2.1319277948302244E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999989349703	WITHOUT_CLASSIFICATION	1.0650296617910333E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999996842753143	WITHOUT_CLASSIFICATION	3.1572468569806963E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999991707747358	WITHOUT_CLASSIFICATION	8.292252643366196E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999957457372	WITHOUT_CLASSIFICATION	4.254262885937605E-9	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999943276770104	WITHOUT_CLASSIFICATION	5.6723229896291305E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998857039569	WITHOUT_CLASSIFICATION	1.1429604312809858E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999920613347	WITHOUT_CLASSIFICATION	7.938665190890154E-9	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772003043	WITHOUT_CLASSIFICATION	7.227996957400263E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772003043	WITHOUT_CLASSIFICATION	7.227996957400263E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999754373339	WITHOUT_CLASSIFICATION	2.4562666185230428E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999998575519607	WITHOUT_CLASSIFICATION	1.424480392939579E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998792488948	WITHOUT_CLASSIFICATION	1.2075110532942935E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999974378202	WITHOUT_CLASSIFICATION	2.5621798847839708E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999739926019	WITHOUT_CLASSIFICATION	2.600739814394902E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980356897159	WITHOUT_CLASSIFICATION	1.964310284136838E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999976299350221	WITHOUT_CLASSIFICATION	2.3700649779326035E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999866054469643	WITHOUT_CLASSIFICATION	1.3394553035807254E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999987662629	WITHOUT_CLASSIFICATION	1.2337371582305487E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999744464861304	WITHOUT_CLASSIFICATION	2.555351386955858E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999999998846555	WITHOUT_CLASSIFICATION	1.1534450101696273E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991337504064	WITHOUT_CLASSIFICATION	8.662495935213268E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999952708796	WITHOUT_CLASSIFICATION	4.7291203439274934E-9	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998375607577	WITHOUT_CLASSIFICATION	1.6243924218410695E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999985016321457	WITHOUT_CLASSIFICATION	1.498367854352963E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999232552511	WITHOUT_CLASSIFICATION	7.674474886645107E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999389335712	WITHOUT_CLASSIFICATION	6.106642880669298E-7	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999990034688689	WITHOUT_CLASSIFICATION	9.965311310767093E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999729277521	WITHOUT_CLASSIFICATION	2.7072247874724762E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999948795374	WITHOUT_CLASSIFICATION	5.1204625489746045E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999896326957	WITHOUT_CLASSIFICATION	1.0367304389930415E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999810515171	WITHOUT_CLASSIFICATION	1.8948482931200335E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997762349384	WITHOUT_CLASSIFICATION	2.2376506152586913E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999844571996954	WITHOUT_CLASSIFICATION	1.5542800304490174E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999699444446939	WITHOUT_CLASSIFICATION	3.0055555306178152E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998880329681	WITHOUT_CLASSIFICATION	1.1196703180958924E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999999991811159	WITHOUT_CLASSIFICATION	8.188841002785503E-9	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999678350784	WITHOUT_CLASSIFICATION	3.216492148740777E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999991762720256	WITHOUT_CLASSIFICATION	8.237279743774808E-7	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998443267737	WITHOUT_CLASSIFICATION	1.5567322641715461E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999736461189548	WITHOUT_CLASSIFICATION	2.6353881045308538E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999999916325119	WITHOUT_CLASSIFICATION	8.367488095505612E-8	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999985346716	WITHOUT_CLASSIFICATION	1.4653284264909286E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999948744861	WITHOUT_CLASSIFICATION	5.125513914710567E-9	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999984344457507	WITHOUT_CLASSIFICATION	1.565554249364169E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999737351606	WITHOUT_CLASSIFICATION	2.6264839464431122E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999926035067	WITHOUT_CLASSIFICATION	7.396493298589665E-9	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999992952186108	WITHOUT_CLASSIFICATION	7.047813892047258E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999996515352295	WITHOUT_CLASSIFICATION	3.484647703820491E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999572589576	WITHOUT_CLASSIFICATION	4.27410423906384E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990538734491	WITHOUT_CLASSIFICATION	9.461265509989488E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990538734491	WITHOUT_CLASSIFICATION	9.461265509989488E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999162529319	WITHOUT_CLASSIFICATION	8.374706803140067E-8	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999990691479288	WITHOUT_CLASSIFICATION	9.30852071143031E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999978265304	WITHOUT_CLASSIFICATION	2.1734696629348245E-9	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999556842238	WITHOUT_CLASSIFICATION	4.4315776068478636E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999724214365	WITHOUT_CLASSIFICATION	2.7578563614515218E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999995533748	WITHOUT_CLASSIFICATION	4.466252119917632E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999881605053	WITHOUT_CLASSIFICATION	1.1839494626213559E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999983204890426	WITHOUT_CLASSIFICATION	1.679510957400207E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999941651777	WITHOUT_CLASSIFICATION	5.834822280678539E-9	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996709861393	WITHOUT_CLASSIFICATION	3.290138607067951E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999833835216	WITHOUT_CLASSIFICATION	1.6616478406443858E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362345812096	WITHOUT_CLASSIFICATION	6.376541879041758E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999868616150324	WITHOUT_CLASSIFICATION	1.3138384967718434E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998005280964	WITHOUT_CLASSIFICATION	1.9947190353941186E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999851519091	WITHOUT_CLASSIFICATION	1.484809084657877E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999997828110639	WITHOUT_CLASSIFICATION	2.1718893604137635E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999820025596	WITHOUT_CLASSIFICATION	1.7997440406549927E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999995543907	WITHOUT_CLASSIFICATION	4.4560928795773544E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999984231638599	WITHOUT_CLASSIFICATION	1.5768361400821024E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999138453262	WITHOUT_CLASSIFICATION	8.615467380542546E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997220509708	WITHOUT_CLASSIFICATION	2.7794902919802476E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999910568823	WITHOUT_CLASSIFICATION	8.943117763632087E-9	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999934711356652	WITHOUT_CLASSIFICATION	6.528864334861243E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999955617922947	WITHOUT_CLASSIFICATION	4.438207705356214E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999942214950789	WITHOUT_CLASSIFICATION	5.778504921089639E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999961645697182	WITHOUT_CLASSIFICATION	3.83543028177963E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999985812152	WITHOUT_CLASSIFICATION	1.4187848465458741E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999913112414281	WITHOUT_CLASSIFICATION	8.688758571828523E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999999988559206	WITHOUT_CLASSIFICATION	1.1440793952515864E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999560086891	WITHOUT_CLASSIFICATION	4.399131093493357E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999882577817	WITHOUT_CLASSIFICATION	1.1742218366376705E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998925993963	WITHOUT_CLASSIFICATION	1.0740060382756801E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999988273124	WITHOUT_CLASSIFICATION	1.172687609579681E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947579289	WITHOUT_CLASSIFICATION	5.2420710634589195E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999918333130327	WITHOUT_CLASSIFICATION	8.166686967393547E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999941852732	WITHOUT_CLASSIFICATION	5.814726874477168E-9	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995420810448	WITHOUT_CLASSIFICATION	4.579189551484962E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999991192378	WITHOUT_CLASSIFICATION	8.807621990991335E-9	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999988055063539	WITHOUT_CLASSIFICATION	1.194493646103197E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999989437291472	WITHOUT_CLASSIFICATION	1.056270852786031E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999776829219	WITHOUT_CLASSIFICATION	2.2317078101713779E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999898949843	WITHOUT_CLASSIFICATION	1.0105015795322226E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997501547346	WITHOUT_CLASSIFICATION	2.498452653274614E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999580336090502	WITHOUT_CLASSIFICATION	4.196639094976689E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999716305953	WITHOUT_CLASSIFICATION	2.8369404655157823E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999394917329	WITHOUT_CLASSIFICATION	6.050826697014232E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998989339388	WITHOUT_CLASSIFICATION	1.010660611971702E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998857039569	WITHOUT_CLASSIFICATION	1.1429604312809858E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998805559351	WITHOUT_CLASSIFICATION	1.194440649496411E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999924396926	WITHOUT_CLASSIFICATION	7.560307364563614E-9	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999878068205	WITHOUT_CLASSIFICATION	1.219317946176397E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999890859941	WITHOUT_CLASSIFICATION	1.0914005978137944E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999925209754	WITHOUT_CLASSIFICATION	7.479024596699575E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999807976607	WITHOUT_CLASSIFICATION	1.9202339268388604E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999996979094615	WITHOUT_CLASSIFICATION	3.020905384150614E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999956635591559	WITHOUT_CLASSIFICATION	4.336440844095505E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998342245348	WITHOUT_CLASSIFICATION	1.657754652655427E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999128833629	WITHOUT_CLASSIFICATION	8.711663708615264E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999983202369	WITHOUT_CLASSIFICATION	1.679763092166374E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998662795408	WITHOUT_CLASSIFICATION	1.3372045917400657E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999569491594	WITHOUT_CLASSIFICATION	4.305084049428611E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999810613636	WITHOUT_CLASSIFICATION	1.893863645435579E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996240078678	WITHOUT_CLASSIFICATION	3.7599213221247956E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999973266374971	WITHOUT_CLASSIFICATION	2.6733625029540986E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999981850356273	WITHOUT_CLASSIFICATION	1.8149643727031618E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999999953323167	WITHOUT_CLASSIFICATION	4.667683298713851E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999991386048114	WITHOUT_CLASSIFICATION	8.613951887295102E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996240078678	WITHOUT_CLASSIFICATION	3.7599213221247956E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997849254837365	WITHOUT_CLASSIFICATION	2.1507451626337162E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999975794364	WITHOUT_CLASSIFICATION	2.4205636007039838E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999909816535	WITHOUT_CLASSIFICATION	9.018346586298795E-9	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999804651664	WITHOUT_CLASSIFICATION	1.9534833604957425E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999996576192032	WITHOUT_CLASSIFICATION	3.4238079679582555E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999301538994	WITHOUT_CLASSIFICATION	6.984610061248093E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999988905833	WITHOUT_CLASSIFICATION	1.1094167240995848E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999991591414256	WITHOUT_CLASSIFICATION	8.408585745396755E-7	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999360343609	WITHOUT_CLASSIFICATION	6.396563917967056E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988156024108	WITHOUT_CLASSIFICATION	1.1843975892514986E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999999172273267	WITHOUT_CLASSIFICATION	8.277267330152309E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9995561267627109	WITHOUT_CLASSIFICATION	4.4387323728907544E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999887233629	WITHOUT_CLASSIFICATION	1.1276637097321769E-8	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999970770076	WITHOUT_CLASSIFICATION	2.9229924372718026E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999658804097	WITHOUT_CLASSIFICATION	3.411959019796573E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999417944064	WITHOUT_CLASSIFICATION	5.820559361486292E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999790041233	WITHOUT_CLASSIFICATION	2.0995876672240103E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999977313865	WITHOUT_CLASSIFICATION	2.268613571655831E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999912184611844	WITHOUT_CLASSIFICATION	8.781538815522222E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999853336549	WITHOUT_CLASSIFICATION	1.4666345209906384E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999968687072	WITHOUT_CLASSIFICATION	3.131292792376922E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999864292954	WITHOUT_CLASSIFICATION	1.3570704495785802E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999967866013	WITHOUT_CLASSIFICATION	3.213398588743233E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999996192599	WITHOUT_CLASSIFICATION	3.8074009114793815E-10	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999987423962	WITHOUT_CLASSIFICATION	1.2576037864358365E-9	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999994757762009	WITHOUT_CLASSIFICATION	5.242237991741987E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999994579914649	WITHOUT_CLASSIFICATION	5.420085350905423E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999995734373087	WITHOUT_CLASSIFICATION	4.2656269126536324E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999995236721914	WITHOUT_CLASSIFICATION	4.7632780864470766E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999996859399861	WITHOUT_CLASSIFICATION	3.1406001383311497E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999457643853	WITHOUT_CLASSIFICATION	5.4235614700880846E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999993731914792	WITHOUT_CLASSIFICATION	6.268085208694683E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999195627686	WITHOUT_CLASSIFICATION	8.043723141072434E-8	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999986056716	WITHOUT_CLASSIFICATION	1.3943284203555734E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999394171646	WITHOUT_CLASSIFICATION	6.058283547116114E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997587451509	WITHOUT_CLASSIFICATION	2.412548491375637E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999984150101761	WITHOUT_CLASSIFICATION	1.5849898239978157E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999904822046	WITHOUT_CLASSIFICATION	9.517795405008348E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999961866627	WITHOUT_CLASSIFICATION	3.813337294687467E-9	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999821384149	WITHOUT_CLASSIFICATION	1.7861585128139093E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999801739613	WITHOUT_CLASSIFICATION	1.9826038750550343E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999801739613	WITHOUT_CLASSIFICATION	1.9826038750550343E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999922430715685	WITHOUT_CLASSIFICATION	7.756928431372887E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999881463714	WITHOUT_CLASSIFICATION	1.1853628631374491E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998245628068	WITHOUT_CLASSIFICATION	1.7543719329082913E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.5438924358473677	WITHOUT_CLASSIFICATION	0.45610756415263237	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500340623	WITHOUT_CLASSIFICATION	1.4996593765325321E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500340623	WITHOUT_CLASSIFICATION	1.4996593765325321E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999987837590562	WITHOUT_CLASSIFICATION	1.2162409438162315E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998589817399	WITHOUT_CLASSIFICATION	1.4101826007685568E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230155045	WITHOUT_CLASSIFICATION	2.7876984495416314E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999484207343872	WITHOUT_CLASSIFICATION	5.157926561285594E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999848276657	WITHOUT_CLASSIFICATION	1.5172334341836646E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999994867681553	WITHOUT_CLASSIFICATION	5.132318447494203E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997946140985	WITHOUT_CLASSIFICATION	2.0538590146050603E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999935680222	WITHOUT_CLASSIFICATION	6.431977801039725E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999913090064491	WITHOUT_CLASSIFICATION	8.690993550896156E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979831894229	WITHOUT_CLASSIFICATION	2.0168105770545676E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979831894229	WITHOUT_CLASSIFICATION	2.0168105770545676E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999854424080732	WITHOUT_CLASSIFICATION	1.4557591926884603E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234253948	WITHOUT_CLASSIFICATION	4.7657460526371774E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997369594127	WITHOUT_CLASSIFICATION	2.6304058734795956E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999905444337751	WITHOUT_CLASSIFICATION	9.455566224907796E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999712928061159	WITHOUT_CLASSIFICATION	2.8707193884158665E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999421489685	WITHOUT_CLASSIFICATION	5.785103154039268E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794247043	WITHOUT_CLASSIFICATION	4.820575295657498E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999340400292	WITHOUT_CLASSIFICATION	6.595997081766297E-8	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999983923542196	WITHOUT_CLASSIFICATION	1.6076457804597338E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999997515672171	WITHOUT_CLASSIFICATION	2.484327828904825E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999787573749	WITHOUT_CLASSIFICATION	2.1242625093018683E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988156024108	WITHOUT_CLASSIFICATION	1.1843975892514986E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999926316216	WITHOUT_CLASSIFICATION	7.3683783586536054E-9	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999718438620877	WITHOUT_CLASSIFICATION	2.8156137912250453E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999967121432	WITHOUT_CLASSIFICATION	3.2878567457547297E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999998529834506	WITHOUT_CLASSIFICATION	1.4701654932834597E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999978805475638	WITHOUT_CLASSIFICATION	2.1194524362862938E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999984857985219	WITHOUT_CLASSIFICATION	1.5142014781402493E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999857886741242	WITHOUT_CLASSIFICATION	1.4211325875713016E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999480497421	WITHOUT_CLASSIFICATION	5.195025789898014E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999807773019	WITHOUT_CLASSIFICATION	1.922269810307896E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997907772683	WITHOUT_CLASSIFICATION	2.0922273175069653E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997907772683	WITHOUT_CLASSIFICATION	2.0922273175069653E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997816240103	WITHOUT_CLASSIFICATION	2.1837598975902872E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999999971773	WITHOUT_CLASSIFICATION	2.8227034030341446E-11	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937816906752	WITHOUT_CLASSIFICATION	6.218309324792046E-6	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998596402371	WITHOUT_CLASSIFICATION	1.403597628487736E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999276601199	WITHOUT_CLASSIFICATION	7.233988010644885E-8	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999937434005	WITHOUT_CLASSIFICATION	6.256599414992121E-9	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998951130548	WITHOUT_CLASSIFICATION	1.0488694523203548E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999999762698	WITHOUT_CLASSIFICATION	2.3730198265400406E-10	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998921637769	WITHOUT_CLASSIFICATION	1.0783622312377089E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996677773515	WITHOUT_CLASSIFICATION	3.322226485315565E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387559683	WITHOUT_CLASSIFICATION	5.612440317187971E-7	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999979885580698	WITHOUT_CLASSIFICATION	2.0114419301793264E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999633088649	WITHOUT_CLASSIFICATION	3.669113508936389E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999914991621	WITHOUT_CLASSIFICATION	8.500837820427037E-9	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999320955383	WITHOUT_CLASSIFICATION	6.79044616589342E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999952698223	WITHOUT_CLASSIFICATION	4.7301776887647014E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999824726478	WITHOUT_CLASSIFICATION	1.7527352227388428E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980904018335	WITHOUT_CLASSIFICATION	1.9095981665211373E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999997883525172	WITHOUT_CLASSIFICATION	2.1164748270640083E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999999551166289	WITHOUT_CLASSIFICATION	4.4883371093742067E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999999590529296	WITHOUT_CLASSIFICATION	4.094707040255289E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997411365767	WITHOUT_CLASSIFICATION	2.588634232023604E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999944954827161	WITHOUT_CLASSIFICATION	5.5045172839552E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999429842514	WITHOUT_CLASSIFICATION	5.701574857427807E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843441	WITHOUT_CLASSIFICATION	1.615655914869929E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843441	WITHOUT_CLASSIFICATION	1.615655914869929E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974765912772	WITHOUT_CLASSIFICATION	2.5234087227633973E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996989918214	WITHOUT_CLASSIFICATION	3.0100817857142645E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999847640262	WITHOUT_CLASSIFICATION	1.523597374756858E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999951601647	WITHOUT_CLASSIFICATION	4.839835242314733E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998466997593	WITHOUT_CLASSIFICATION	1.5330024075163806E-7	TEST
