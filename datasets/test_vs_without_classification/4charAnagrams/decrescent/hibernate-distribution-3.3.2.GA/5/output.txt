//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999455522837259	WITHOUT_CLASSIFICATION	5.44477162740972E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999627259605615	WITHOUT_CLASSIFICATION	3.727403943850686E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999063112934	WITHOUT_CLASSIFICATION	9.368870660869552E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999986842741918	WITHOUT_CLASSIFICATION	1.3157258081532331E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997822789147	WITHOUT_CLASSIFICATION	2.1772108525143277E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997822789147	WITHOUT_CLASSIFICATION	2.1772108525143277E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999055652379	WITHOUT_CLASSIFICATION	9.443476207443611E-8	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999935918937	WITHOUT_CLASSIFICATION	6.408106296760952E-8	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999997417108722	WITHOUT_CLASSIFICATION	2.5828912776208145E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998757121125	WITHOUT_CLASSIFICATION	1.2428788757126895E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994340692171	WITHOUT_CLASSIFICATION	5.659307830277393E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994340692171	WITHOUT_CLASSIFICATION	5.659307830277393E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972227626988	WITHOUT_CLASSIFICATION	2.7772373011722018E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999379063615	WITHOUT_CLASSIFICATION	6.209363846557621E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.999999872256883	WITHOUT_CLASSIFICATION	1.2774311690179241E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999964239286634	WITHOUT_CLASSIFICATION	3.5760713365764387E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999723850349	WITHOUT_CLASSIFICATION	2.761496499788439E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999964164407331	WITHOUT_CLASSIFICATION	3.583559266897626E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999942441061008	WITHOUT_CLASSIFICATION	5.755893899277133E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999942731122836	WITHOUT_CLASSIFICATION	5.726887716386252E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944631140144	WITHOUT_CLASSIFICATION	5.53688598552189E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997043880957622	WITHOUT_CLASSIFICATION	2.956119042376964E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999976768172747	WITHOUT_CLASSIFICATION	2.323182725266984E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999966337951237	WITHOUT_CLASSIFICATION	3.3662048761849344E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999079186976	WITHOUT_CLASSIFICATION	9.208130227324706E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951626616872	WITHOUT_CLASSIFICATION	4.837338312809721E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951626616872	WITHOUT_CLASSIFICATION	4.837338312809721E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996663631853	WITHOUT_CLASSIFICATION	3.3363681471399615E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999916315964416	WITHOUT_CLASSIFICATION	8.368403558439667E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999900819201	WITHOUT_CLASSIFICATION	9.918079898736001E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999699288795	WITHOUT_CLASSIFICATION	3.0071120520444965E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999981151703096	WITHOUT_CLASSIFICATION	1.8848296905270591E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9005203118142533	TEST	0.09947968818574673	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.9005203118142533	TEST	0.09947968818574673	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999703706659	WITHOUT_CLASSIFICATION	2.962933406495857E-8	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999876976042916	WITHOUT_CLASSIFICATION	1.2302395708454021E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999202946656	WITHOUT_CLASSIFICATION	7.970533441785008E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994275185244	WITHOUT_CLASSIFICATION	5.724814755713892E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998951315686	WITHOUT_CLASSIFICATION	1.0486843139928826E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979478278462	WITHOUT_CLASSIFICATION	2.052172153640771E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982835738314	WITHOUT_CLASSIFICATION	1.7164261686121184E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999416685615	WITHOUT_CLASSIFICATION	5.83314384161975E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.999986474448372	WITHOUT_CLASSIFICATION	1.3525551628188025E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999998855960481	WITHOUT_CLASSIFICATION	1.1440395187428816E-7	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999981132645318	WITHOUT_CLASSIFICATION	1.8867354681688291E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.999986474448372	WITHOUT_CLASSIFICATION	1.3525551628188025E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999981132645318	WITHOUT_CLASSIFICATION	1.8867354681688291E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999990243379975	WITHOUT_CLASSIFICATION	9.756620025504916E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9993651571225656	WITHOUT_CLASSIFICATION	6.348428774343376E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999994810737961	WITHOUT_CLASSIFICATION	5.189262039244614E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999991571791226	WITHOUT_CLASSIFICATION	8.428208775338881E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999895664882372	WITHOUT_CLASSIFICATION	1.043351176274419E-5	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999891028746326	WITHOUT_CLASSIFICATION	1.0897125367484192E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998551963989096	WITHOUT_CLASSIFICATION	1.448036010904091E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999995470756909	WITHOUT_CLASSIFICATION	4.5292430899764405E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999988574831639	WITHOUT_CLASSIFICATION	1.1425168362045726E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999930038416813	WITHOUT_CLASSIFICATION	6.996158318642359E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999990738595762	WITHOUT_CLASSIFICATION	9.261404237454949E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999997948673578	WITHOUT_CLASSIFICATION	2.0513264215726338E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998720005895	WITHOUT_CLASSIFICATION	1.279994104805985E-7	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999138967512	WITHOUT_CLASSIFICATION	8.610324869411589E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999999957791213	WITHOUT_CLASSIFICATION	4.220878702099092E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999908393727481	WITHOUT_CLASSIFICATION	9.160627251941203E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999861265589	WITHOUT_CLASSIFICATION	1.3873440998407506E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999161795659	WITHOUT_CLASSIFICATION	8.382043414042921E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997779647323	WITHOUT_CLASSIFICATION	2.2203526767716666E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998472274128	WITHOUT_CLASSIFICATION	1.5277258718735725E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999983870576329	WITHOUT_CLASSIFICATION	1.612942367194342E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998953391533	WITHOUT_CLASSIFICATION	1.0466084664498118E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999912881449	WITHOUT_CLASSIFICATION	8.711855113931572E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962460965702	WITHOUT_CLASSIFICATION	3.75390342989901E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999848503564829	WITHOUT_CLASSIFICATION	1.5149643517149299E-5	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999502266297	WITHOUT_CLASSIFICATION	4.977337033869685E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999948098859	WITHOUT_CLASSIFICATION	5.190114180813728E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999996997585554	WITHOUT_CLASSIFICATION	3.0024144459939373E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999188615695	WITHOUT_CLASSIFICATION	8.113843049400338E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999997989274243	WITHOUT_CLASSIFICATION	2.0107257571222237E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999975529607719	WITHOUT_CLASSIFICATION	2.4470392282362566E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999907871576	WITHOUT_CLASSIFICATION	9.212842443297694E-9	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998726329429	WITHOUT_CLASSIFICATION	1.273670571774883E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999788895666	WITHOUT_CLASSIFICATION	2.1110433394140842E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999285336875	WITHOUT_CLASSIFICATION	7.14663125821681E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996485011707	WITHOUT_CLASSIFICATION	3.514988293093165E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999788895666	WITHOUT_CLASSIFICATION	2.1110433394140842E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998183513826	WITHOUT_CLASSIFICATION	1.816486174109538E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998231299038	WITHOUT_CLASSIFICATION	1.7687009620775574E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999995050112064	WITHOUT_CLASSIFICATION	4.949887935900505E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997817567406	WITHOUT_CLASSIFICATION	2.182432593594661E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999217294463	WITHOUT_CLASSIFICATION	7.827055377709483E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999889343969	WITHOUT_CLASSIFICATION	1.1065603044970957E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999889343969	WITHOUT_CLASSIFICATION	1.1065603044970957E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999988826232995	WITHOUT_CLASSIFICATION	1.117376700486206E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999998617452157	WITHOUT_CLASSIFICATION	1.382547843080338E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999978791900387	WITHOUT_CLASSIFICATION	2.1208099612803612E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999778518306	WITHOUT_CLASSIFICATION	2.2148169488967843E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999927764977	WITHOUT_CLASSIFICATION	7.22350228538276E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999487395368	WITHOUT_CLASSIFICATION	5.12604632939123E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998570243226	WITHOUT_CLASSIFICATION	1.4297567734172863E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999777422028	WITHOUT_CLASSIFICATION	2.225779720755374E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999754487312	WITHOUT_CLASSIFICATION	2.4551268795823327E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999508387541	WITHOUT_CLASSIFICATION	4.916124586265198E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999142064023	WITHOUT_CLASSIFICATION	8.579359768324208E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999142064023	WITHOUT_CLASSIFICATION	8.579359768324208E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999822830354	WITHOUT_CLASSIFICATION	1.7716964494255286E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999270304079	WITHOUT_CLASSIFICATION	7.296959217343293E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999993054130163	WITHOUT_CLASSIFICATION	6.945869836509854E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999142064023	WITHOUT_CLASSIFICATION	8.579359768324208E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999822830354	WITHOUT_CLASSIFICATION	1.7716964494255286E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999822830354	WITHOUT_CLASSIFICATION	1.7716964494255286E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999916738439545	WITHOUT_CLASSIFICATION	8.326156045443541E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999999474996302	WITHOUT_CLASSIFICATION	5.250036979060747E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999397898363	WITHOUT_CLASSIFICATION	6.021016368691277E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999990280808165	WITHOUT_CLASSIFICATION	9.719191834766945E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.99999924799826	WITHOUT_CLASSIFICATION	7.520017399420838E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.99999924799826	WITHOUT_CLASSIFICATION	7.520017399420838E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999989745219117	WITHOUT_CLASSIFICATION	1.0254780884209687E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999985323156018	WITHOUT_CLASSIFICATION	1.467684398240672E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999997204885521	WITHOUT_CLASSIFICATION	2.795114478877695E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998875670087	WITHOUT_CLASSIFICATION	1.1243299118992764E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998875670087	WITHOUT_CLASSIFICATION	1.1243299118992764E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999987648083883	WITHOUT_CLASSIFICATION	1.2351916116305758E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999996869349378	WITHOUT_CLASSIFICATION	3.130650622039223E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999953445681027	WITHOUT_CLASSIFICATION	4.655431897310502E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999319408295	WITHOUT_CLASSIFICATION	6.805917048995145E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999971919321746	WITHOUT_CLASSIFICATION	2.8080678253767153E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999993887779784	WITHOUT_CLASSIFICATION	6.112220215956288E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999967347747992	WITHOUT_CLASSIFICATION	3.265225200915135E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998633337279	WITHOUT_CLASSIFICATION	1.3666627215141108E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999936460552781	WITHOUT_CLASSIFICATION	6.353944721974063E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999953445681027	WITHOUT_CLASSIFICATION	4.655431897310502E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999833548559232	WITHOUT_CLASSIFICATION	1.6645144076823288E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960536124812	WITHOUT_CLASSIFICATION	3.946387518807526E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960536124812	WITHOUT_CLASSIFICATION	3.946387518807526E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998306152976	WITHOUT_CLASSIFICATION	1.6938470234191425E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999827889121812	WITHOUT_CLASSIFICATION	1.721108781891896E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995688597684	WITHOUT_CLASSIFICATION	4.311402316435027E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999822030542653	WITHOUT_CLASSIFICATION	1.779694573461542E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999956466724536	WITHOUT_CLASSIFICATION	4.353327546472326E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.999985578403506	WITHOUT_CLASSIFICATION	1.4421596493940414E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.999999834370693	WITHOUT_CLASSIFICATION	1.6562930705205918E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999862236916	WITHOUT_CLASSIFICATION	1.3776308511550683E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999666018246	WITHOUT_CLASSIFICATION	3.33981753317689E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999666018246	WITHOUT_CLASSIFICATION	3.33981753317689E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999455522837259	WITHOUT_CLASSIFICATION	5.44477162740972E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997173748967	WITHOUT_CLASSIFICATION	2.8262510338913335E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.999999832375551	WITHOUT_CLASSIFICATION	1.676244490673115E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999991815396996	WITHOUT_CLASSIFICATION	8.184603004767376E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999989581586416	WITHOUT_CLASSIFICATION	1.0418413583539016E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999953470818747	WITHOUT_CLASSIFICATION	4.652918125432434E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999996417032373	WITHOUT_CLASSIFICATION	3.5829676273916016E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996982578249	WITHOUT_CLASSIFICATION	3.0174217519023587E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999958364026521	WITHOUT_CLASSIFICATION	4.163597347922704E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999977345741333	WITHOUT_CLASSIFICATION	2.265425866701381E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999988551227607	WITHOUT_CLASSIFICATION	1.1448772393993262E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999063112934	WITHOUT_CLASSIFICATION	9.368870660869552E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998228046106	WITHOUT_CLASSIFICATION	1.7719538928510094E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998228046106	WITHOUT_CLASSIFICATION	1.7719538928510094E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.999999183563834	WITHOUT_CLASSIFICATION	8.164361659135867E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999862950983486	WITHOUT_CLASSIFICATION	1.3704901651427963E-5	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998933648668	WITHOUT_CLASSIFICATION	1.0663513313640111E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999936613025737	WITHOUT_CLASSIFICATION	6.338697426265572E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999995661299007	WITHOUT_CLASSIFICATION	4.338700992599346E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998856052625	WITHOUT_CLASSIFICATION	1.14394737437034E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997822789147	WITHOUT_CLASSIFICATION	2.1772108525143277E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995176654476	WITHOUT_CLASSIFICATION	4.823345524153071E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999990036398235	WITHOUT_CLASSIFICATION	9.963601765478421E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999995697614043	WITHOUT_CLASSIFICATION	4.302385957299118E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999997689881368	WITHOUT_CLASSIFICATION	2.3101186318753011E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999994643288621	WITHOUT_CLASSIFICATION	5.35671137840217E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999990975036126	WITHOUT_CLASSIFICATION	9.024963874567739E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995524628239	WITHOUT_CLASSIFICATION	4.4753717609917244E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999858446175	WITHOUT_CLASSIFICATION	1.4155382502249E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999631211999	WITHOUT_CLASSIFICATION	3.68788002153547E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999999784839928	WITHOUT_CLASSIFICATION	2.1516007201346973E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997138516141	WITHOUT_CLASSIFICATION	2.8614838584911604E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999998244875969	WITHOUT_CLASSIFICATION	1.7551240304628696E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999992599457785	WITHOUT_CLASSIFICATION	7.400542215608441E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999977345741333	WITHOUT_CLASSIFICATION	2.265425866701381E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998228046106	WITHOUT_CLASSIFICATION	1.7719538928510094E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995524628239	WITHOUT_CLASSIFICATION	4.4753717609917244E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999055652379	WITHOUT_CLASSIFICATION	9.443476207443611E-8	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999996289151835	WITHOUT_CLASSIFICATION	3.7108481647479083E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999986866980086	WITHOUT_CLASSIFICATION	1.3133019913839165E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998169531189	WITHOUT_CLASSIFICATION	1.8304688104475005E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999956485724784	WITHOUT_CLASSIFICATION	4.351427521651889E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995865433479	WITHOUT_CLASSIFICATION	4.13456652208962E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999986498925418	WITHOUT_CLASSIFICATION	1.350107458158545E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999198511595	WITHOUT_CLASSIFICATION	8.014884049308067E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999830290118014	WITHOUT_CLASSIFICATION	1.6970988198553594E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999922635520854	WITHOUT_CLASSIFICATION	7.73644791470661E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999938738274938	WITHOUT_CLASSIFICATION	6.126172506121797E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999938738274938	WITHOUT_CLASSIFICATION	6.126172506121797E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999496908862	WITHOUT_CLASSIFICATION	5.0309113787729415E-8	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999946214804	WITHOUT_CLASSIFICATION	5.378519531355834E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999944678083482	WITHOUT_CLASSIFICATION	5.5321916517237935E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999995175641901	WITHOUT_CLASSIFICATION	4.824358098578389E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999669789698	WITHOUT_CLASSIFICATION	3.302103029027292E-8	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999873045277	WITHOUT_CLASSIFICATION	1.2695472341891358E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999999786810598	WITHOUT_CLASSIFICATION	2.1318940194193694E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999935918937	WITHOUT_CLASSIFICATION	6.408106296760952E-8	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999995475730264	WITHOUT_CLASSIFICATION	4.5242697349004023E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.99999993078925	WITHOUT_CLASSIFICATION	6.921075006758785E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.99999993078925	WITHOUT_CLASSIFICATION	6.921075006758785E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999996561935562	WITHOUT_CLASSIFICATION	3.4380644381096196E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997390910014	WITHOUT_CLASSIFICATION	2.609089986143453E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998035383297	WITHOUT_CLASSIFICATION	1.9646167034624803E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999569147116	WITHOUT_CLASSIFICATION	4.3085288491625265E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999987351823656	WITHOUT_CLASSIFICATION	1.264817634417883E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999998437169003	WITHOUT_CLASSIFICATION	1.5628309975724008E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999977345741333	WITHOUT_CLASSIFICATION	2.265425866701381E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999063112934	WITHOUT_CLASSIFICATION	9.368870660869552E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995524628239	WITHOUT_CLASSIFICATION	4.4753717609917244E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999995524628239	WITHOUT_CLASSIFICATION	4.4753717609917244E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999335793516	WITHOUT_CLASSIFICATION	6.642064839948313E-8	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999335793516	WITHOUT_CLASSIFICATION	6.642064839948313E-8	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997420248764	WITHOUT_CLASSIFICATION	2.5797512360557676E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999993894696845	WITHOUT_CLASSIFICATION	6.105303156536095E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999993894696845	WITHOUT_CLASSIFICATION	6.105303156536095E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999998160843719	WITHOUT_CLASSIFICATION	1.839156281447267E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999998906140246	WITHOUT_CLASSIFICATION	1.0938597540718433E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999995513454542	WITHOUT_CLASSIFICATION	4.4865454593468747E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999998581447539	WITHOUT_CLASSIFICATION	1.4185524610881498E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999259483082	WITHOUT_CLASSIFICATION	7.405169183542417E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998757121125	WITHOUT_CLASSIFICATION	1.2428788757126895E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998757121125	WITHOUT_CLASSIFICATION	1.2428788757126895E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999992096207428	WITHOUT_CLASSIFICATION	7.903792572451933E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.999999873867357	WITHOUT_CLASSIFICATION	1.261326429576352E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999988878959575	WITHOUT_CLASSIFICATION	1.1121040425035867E-6	TEST
// byte	WITHOUT_CLASSIFICATION	0.999997425603174	WITHOUT_CLASSIFICATION	2.5743968260875256E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999992786875798	WITHOUT_CLASSIFICATION	7.213124203096057E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999934264632754	WITHOUT_CLASSIFICATION	6.573536724627823E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994340692171	WITHOUT_CLASSIFICATION	5.659307830277393E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999990314943954	WITHOUT_CLASSIFICATION	9.685056045416154E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999990314943954	WITHOUT_CLASSIFICATION	9.685056045416154E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972227626988	WITHOUT_CLASSIFICATION	2.7772373011722018E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972227626988	WITHOUT_CLASSIFICATION	2.7772373011722018E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999993228974609	WITHOUT_CLASSIFICATION	6.771025391131793E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999993228974609	WITHOUT_CLASSIFICATION	6.771025391131793E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997220203475	WITHOUT_CLASSIFICATION	2.779796524568894E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997220203475	WITHOUT_CLASSIFICATION	2.779796524568894E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998757121125	WITHOUT_CLASSIFICATION	1.2428788757126895E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999994340692171	WITHOUT_CLASSIFICATION	5.659307830277393E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999990314943954	WITHOUT_CLASSIFICATION	9.685056045416154E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999990314943954	WITHOUT_CLASSIFICATION	9.685056045416154E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999972227626988	WITHOUT_CLASSIFICATION	2.7772373011722018E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999993228974609	WITHOUT_CLASSIFICATION	6.771025391131793E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999993228974609	WITHOUT_CLASSIFICATION	6.771025391131793E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997220203475	WITHOUT_CLASSIFICATION	2.779796524568894E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999996880747547	WITHOUT_CLASSIFICATION	3.1192524524833023E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999998482731787	WITHOUT_CLASSIFICATION	1.5172682128779125E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999970616907796	WITHOUT_CLASSIFICATION	2.938309220321936E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999986043985638	WITHOUT_CLASSIFICATION	1.3956014362228043E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.999998619625342	WITHOUT_CLASSIFICATION	1.3803746581036014E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999979418271102	WITHOUT_CLASSIFICATION	2.05817288978626E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999997710256114	WITHOUT_CLASSIFICATION	2.289743885498521E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999990648533874	WITHOUT_CLASSIFICATION	9.351466124354889E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999987227269418	WITHOUT_CLASSIFICATION	1.2772730582747666E-6	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996901290058	WITHOUT_CLASSIFICATION	3.098709941787419E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998766389327	WITHOUT_CLASSIFICATION	1.233610672682406E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995999008593	WITHOUT_CLASSIFICATION	4.000991406586112E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999988826232995	WITHOUT_CLASSIFICATION	1.117376700486206E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999979418271102	WITHOUT_CLASSIFICATION	2.05817288978626E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999606815851624	WITHOUT_CLASSIFICATION	3.93184148375196E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999606815851624	WITHOUT_CLASSIFICATION	3.93184148375196E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999998807842858	WITHOUT_CLASSIFICATION	1.1921571420421106E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994931813276	WITHOUT_CLASSIFICATION	5.068186723360708E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994931813276	WITHOUT_CLASSIFICATION	5.068186723360708E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999969715688336	WITHOUT_CLASSIFICATION	3.028431166283194E-6	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999997103226979	WITHOUT_CLASSIFICATION	2.896773020934595E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999994158545347	WITHOUT_CLASSIFICATION	5.841454652700873E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999924178881	WITHOUT_CLASSIFICATION	7.582111905240815E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999924178881	WITHOUT_CLASSIFICATION	7.582111905240815E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999723850349	WITHOUT_CLASSIFICATION	2.761496499788439E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999959731133	WITHOUT_CLASSIFICATION	4.026886702895326E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999959731133	WITHOUT_CLASSIFICATION	4.026886702895326E-8	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999649368782324	WITHOUT_CLASSIFICATION	3.506312176764138E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996537530695	WITHOUT_CLASSIFICATION	3.4624693055579957E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999998111159333	WITHOUT_CLASSIFICATION	1.8888406671062815E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999921855063076	WITHOUT_CLASSIFICATION	7.814493692332642E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999952254181326	WITHOUT_CLASSIFICATION	4.7745818674096315E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999955850637482	WITHOUT_CLASSIFICATION	4.4149362517714575E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999964164407331	WITHOUT_CLASSIFICATION	3.583559266897626E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999969879549829	WITHOUT_CLASSIFICATION	3.0120450170441527E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.998569972530433	WITHOUT_CLASSIFICATION	0.0014300274695670265	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999950680631401	WITHOUT_CLASSIFICATION	4.931936859839958E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999874940466557	WITHOUT_CLASSIFICATION	1.2505953344423944E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944631140144	WITHOUT_CLASSIFICATION	5.53688598552189E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998539991446	WITHOUT_CLASSIFICATION	1.4600085548265913E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999657680856098	WITHOUT_CLASSIFICATION	3.423191439026943E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999578466633539	WITHOUT_CLASSIFICATION	4.2153336646143214E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944631140144	WITHOUT_CLASSIFICATION	5.53688598552189E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999902280283	WITHOUT_CLASSIFICATION	9.771971722698935E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999883354518	WITHOUT_CLASSIFICATION	1.1664548276068913E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999978113511107	WITHOUT_CLASSIFICATION	2.1886488893161863E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999965307852462	WITHOUT_CLASSIFICATION	3.469214753938327E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999981935243227	WITHOUT_CLASSIFICATION	1.8064756772334384E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999957408235521	WITHOUT_CLASSIFICATION	4.259176447915919E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999855423505103	WITHOUT_CLASSIFICATION	1.4457649489741232E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999966337951237	WITHOUT_CLASSIFICATION	3.3662048761849344E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999961705210344	WITHOUT_CLASSIFICATION	3.829478965589829E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999079186976	WITHOUT_CLASSIFICATION	9.208130227324706E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999992554954538	WITHOUT_CLASSIFICATION	7.445045461683468E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999916673392	WITHOUT_CLASSIFICATION	8.33266079697768E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999949592121979	WITHOUT_CLASSIFICATION	5.04078780213538E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999964164407331	WITHOUT_CLASSIFICATION	3.583559266897626E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999961705210344	WITHOUT_CLASSIFICATION	3.829478965589829E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999992554954538	WITHOUT_CLASSIFICATION	7.445045461683468E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999949592121979	WITHOUT_CLASSIFICATION	5.04078780213538E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999724153584	WITHOUT_CLASSIFICATION	2.7584641594463574E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999908940801553	WITHOUT_CLASSIFICATION	9.10591984476489E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999923333615	WITHOUT_CLASSIFICATION	7.666638541457906E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951626616872	WITHOUT_CLASSIFICATION	4.837338312809721E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999974560467046	WITHOUT_CLASSIFICATION	2.5439532953740428E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999998245030864	WITHOUT_CLASSIFICATION	1.7549691353076226E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999963952769036	WITHOUT_CLASSIFICATION	3.6047230962412078E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995497953871	WITHOUT_CLASSIFICATION	4.5020461288737823E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999970867146543	WITHOUT_CLASSIFICATION	2.913285345715581E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999436761824	WITHOUT_CLASSIFICATION	5.632381763712791E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993606577025	WITHOUT_CLASSIFICATION	6.393422976168443E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999993318764266	WITHOUT_CLASSIFICATION	6.681235733134369E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999860859948	WITHOUT_CLASSIFICATION	1.3914005106209008E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998129670732	WITHOUT_CLASSIFICATION	1.870329267998977E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999947837054257	WITHOUT_CLASSIFICATION	5.216294574364592E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999965588674335	WITHOUT_CLASSIFICATION	3.4411325664339817E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999916315964416	WITHOUT_CLASSIFICATION	8.368403558439667E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999978029405856	WITHOUT_CLASSIFICATION	2.197059414420732E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999957909115995	WITHOUT_CLASSIFICATION	4.209088400532516E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999961705210344	WITHOUT_CLASSIFICATION	3.829478965589829E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998248043326	WITHOUT_CLASSIFICATION	1.7519566739469918E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998887164165	WITHOUT_CLASSIFICATION	1.1128358352844068E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999458116932	WITHOUT_CLASSIFICATION	5.418830695164932E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9988680171853511	WITHOUT_CLASSIFICATION	0.0011319828146489348	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999994479643292	WITHOUT_CLASSIFICATION	5.520356708623177E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999994762235874	WITHOUT_CLASSIFICATION	5.237764126691448E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999998599792	WITHOUT_CLASSIFICATION	1.4002078911145253E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999938802712	WITHOUT_CLASSIFICATION	6.11972886578512E-9	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999969882357815	WITHOUT_CLASSIFICATION	3.0117642183780805E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999944656095906	WITHOUT_CLASSIFICATION	5.534390409447884E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999983977738731	WITHOUT_CLASSIFICATION	1.6022261268945365E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999951835881405	WITHOUT_CLASSIFICATION	4.816411859467629E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999039948804	WITHOUT_CLASSIFICATION	9.600511957706339E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999699288795	WITHOUT_CLASSIFICATION	3.0071120520444965E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999499204417	WITHOUT_CLASSIFICATION	5.007955826338616E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999330295511	WITHOUT_CLASSIFICATION	6.697044881458803E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999977122014752	WITHOUT_CLASSIFICATION	2.2877985247587104E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998676982775	WITHOUT_CLASSIFICATION	1.323017224937458E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999381112492	WITHOUT_CLASSIFICATION	6.188875083633806E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999987401346409	WITHOUT_CLASSIFICATION	1.2598653591288238E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999221847066	WITHOUT_CLASSIFICATION	7.781529340937972E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999990864040388	WITHOUT_CLASSIFICATION	9.135959612066719E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998014844431	WITHOUT_CLASSIFICATION	1.9851555679100268E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999942035949667	WITHOUT_CLASSIFICATION	5.796405033222398E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999985090352099	WITHOUT_CLASSIFICATION	1.4909647901742639E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999985090352099	WITHOUT_CLASSIFICATION	1.4909647901742639E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999955992375142	WITHOUT_CLASSIFICATION	4.400762485752411E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999578876884	WITHOUT_CLASSIFICATION	4.211231176437975E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999998602491229	WITHOUT_CLASSIFICATION	1.397508771406472E-7	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997565082709	WITHOUT_CLASSIFICATION	2.4349172907260834E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999969905686976	WITHOUT_CLASSIFICATION	3.0094313023174804E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999993560244357	WITHOUT_CLASSIFICATION	6.439755643420976E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999999854560139	WITHOUT_CLASSIFICATION	1.454398610101011E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999950105001459	WITHOUT_CLASSIFICATION	4.989499854093811E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999892421368329	WITHOUT_CLASSIFICATION	1.0757863167035261E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999988986860198	WITHOUT_CLASSIFICATION	1.101313980238617E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999961983600216	WITHOUT_CLASSIFICATION	3.8016399783824186E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998860239175	WITHOUT_CLASSIFICATION	1.1397608246756755E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999980996748769	WITHOUT_CLASSIFICATION	1.9003251231405427E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999996811656073	WITHOUT_CLASSIFICATION	3.1883439275273245E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998708459672	WITHOUT_CLASSIFICATION	1.2915403281462174E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999172668671	WITHOUT_CLASSIFICATION	8.273313292013816E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998379202345	WITHOUT_CLASSIFICATION	1.6207976548831029E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998265779505	WITHOUT_CLASSIFICATION	1.734220495915109E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999980563049503	WITHOUT_CLASSIFICATION	1.9436950496737426E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999989018868909	WITHOUT_CLASSIFICATION	1.0981131090607544E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999992411823725	WITHOUT_CLASSIFICATION	7.588176275482965E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999992411823725	WITHOUT_CLASSIFICATION	7.588176275482965E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999944181303194	WITHOUT_CLASSIFICATION	5.581869680626397E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999944181303194	WITHOUT_CLASSIFICATION	5.581869680626397E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998014844431	WITHOUT_CLASSIFICATION	1.9851555679100268E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999996569596622	WITHOUT_CLASSIFICATION	3.430403377590217E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999916513994505	WITHOUT_CLASSIFICATION	8.348600549603865E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999992635671487	WITHOUT_CLASSIFICATION	7.364328512400144E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999916513994505	WITHOUT_CLASSIFICATION	8.348600549603865E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999992635671487	WITHOUT_CLASSIFICATION	7.364328512400144E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999967305219801	WITHOUT_CLASSIFICATION	3.2694780199988494E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999610822551297	WITHOUT_CLASSIFICATION	3.8917744870269055E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999776519494	WITHOUT_CLASSIFICATION	2.2348050601085422E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998474256984	WITHOUT_CLASSIFICATION	1.5257430172935533E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999947793704579	WITHOUT_CLASSIFICATION	5.220629542131845E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999850472345723	WITHOUT_CLASSIFICATION	1.4952765427655762E-5	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998188576823	WITHOUT_CLASSIFICATION	1.811423178241916E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999981151341689	WITHOUT_CLASSIFICATION	1.8848658310383272E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999970940668064	WITHOUT_CLASSIFICATION	2.905933193608818E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999318514246	WITHOUT_CLASSIFICATION	6.814857553097302E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999997226160124	WITHOUT_CLASSIFICATION	2.77383987583507E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999999998606143	WITHOUT_CLASSIFICATION	1.3938569936292047E-9	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998453251056	WITHOUT_CLASSIFICATION	1.5467489452101387E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999846391727593	WITHOUT_CLASSIFICATION	1.5360827240698386E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999826548880433	WITHOUT_CLASSIFICATION	1.734511195672126E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997788668155898	WITHOUT_CLASSIFICATION	2.2113318441017513E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9997788668155898	WITHOUT_CLASSIFICATION	2.2113318441017513E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999905466403	WITHOUT_CLASSIFICATION	9.453359742023898E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999967305219801	WITHOUT_CLASSIFICATION	3.2694780199988494E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999994418072479	WITHOUT_CLASSIFICATION	5.581927521635079E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999912467237334	WITHOUT_CLASSIFICATION	8.753276266576479E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.99999890526158	WITHOUT_CLASSIFICATION	1.094738420044921E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999882440442137	WITHOUT_CLASSIFICATION	1.1755955786332685E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998772365867059	WITHOUT_CLASSIFICATION	1.2276341329410347E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999967305219801	WITHOUT_CLASSIFICATION	3.2694780199988494E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999882440442137	WITHOUT_CLASSIFICATION	1.1755955786332685E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998772365867059	WITHOUT_CLASSIFICATION	1.2276341329410347E-4	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999786649725542	WITHOUT_CLASSIFICATION	2.133502744588754E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999978904508768	WITHOUT_CLASSIFICATION	2.1095491232827873E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999400398357	WITHOUT_CLASSIFICATION	5.996016426081825E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999967305219801	WITHOUT_CLASSIFICATION	3.2694780199988494E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999967305219801	WITHOUT_CLASSIFICATION	3.2694780199988494E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999990114133728	WITHOUT_CLASSIFICATION	9.885866272674888E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999994545997737	WITHOUT_CLASSIFICATION	5.45400226357445E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999991154690737	WITHOUT_CLASSIFICATION	8.845309262462328E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999562713624	WITHOUT_CLASSIFICATION	4.372863757460225E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999996553442475	WITHOUT_CLASSIFICATION	3.44655752489587E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999493697309	WITHOUT_CLASSIFICATION	5.063026914242118E-8	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999994796617903	WITHOUT_CLASSIFICATION	5.203382096470133E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998730824514	WITHOUT_CLASSIFICATION	1.2691754851958097E-7	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999737532569	WITHOUT_CLASSIFICATION	2.6246743066789482E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999985252821392	WITHOUT_CLASSIFICATION	1.474717860806301E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998919963807	WITHOUT_CLASSIFICATION	1.0800361934913586E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999995855089202	WITHOUT_CLASSIFICATION	4.144910798590253E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999994544608598	WITHOUT_CLASSIFICATION	5.455391401428522E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997006625444	WITHOUT_CLASSIFICATION	2.9933745560888737E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997659387051	WITHOUT_CLASSIFICATION	2.3406129480205375E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999964904141151	WITHOUT_CLASSIFICATION	3.5095858848709018E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994275185244	WITHOUT_CLASSIFICATION	5.724814755713892E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999696694045901	WITHOUT_CLASSIFICATION	3.0330595409865657E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999872182102175	WITHOUT_CLASSIFICATION	1.2781789782447222E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998210225682	WITHOUT_CLASSIFICATION	1.7897743174448564E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999913828797369	WITHOUT_CLASSIFICATION	8.617120263083572E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999885321076739	WITHOUT_CLASSIFICATION	1.146789232610675E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999885321076739	WITHOUT_CLASSIFICATION	1.146789232610675E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994275185244	WITHOUT_CLASSIFICATION	5.724814755713892E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997456162965113	WITHOUT_CLASSIFICATION	2.543837034888023E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999843103955041	WITHOUT_CLASSIFICATION	1.5689604495978595E-5	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998916624088239	WITHOUT_CLASSIFICATION	1.0833759117612744E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999995586978016	WITHOUT_CLASSIFICATION	4.413021983978889E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999926705767266	WITHOUT_CLASSIFICATION	7.329423273407355E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998195862618	WITHOUT_CLASSIFICATION	1.8041373812624462E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999759149469	WITHOUT_CLASSIFICATION	2.408505312829747E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999989756313813	WITHOUT_CLASSIFICATION	1.0243686186782506E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999918008552	WITHOUT_CLASSIFICATION	8.199144744859767E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999090201263	WITHOUT_CLASSIFICATION	9.097987381968601E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996415977281	WITHOUT_CLASSIFICATION	3.5840227177978956E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999853870549856	WITHOUT_CLASSIFICATION	1.461294501436694E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999732146700386	WITHOUT_CLASSIFICATION	2.6785329961406703E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999933814125	WITHOUT_CLASSIFICATION	6.618587498074179E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999631187232	WITHOUT_CLASSIFICATION	3.68812767020383E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999990668571448	WITHOUT_CLASSIFICATION	9.331428552730379E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999956857005	WITHOUT_CLASSIFICATION	4.314299556735073E-9	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999984780916005	WITHOUT_CLASSIFICATION	1.5219083994924902E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999247515763	WITHOUT_CLASSIFICATION	7.524842373617448E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999675821477	WITHOUT_CLASSIFICATION	3.241785234737984E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999998880999873	WITHOUT_CLASSIFICATION	1.1190001269837535E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999522217538	WITHOUT_CLASSIFICATION	4.7778246137915934E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997233679931	WITHOUT_CLASSIFICATION	2.766320068711528E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974628638392	WITHOUT_CLASSIFICATION	2.5371361608109596E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995846295626	WITHOUT_CLASSIFICATION	4.1537043742801315E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994999670008	WITHOUT_CLASSIFICATION	5.000329991953949E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986022863708	WITHOUT_CLASSIFICATION	1.39771362911375E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991150249327	WITHOUT_CLASSIFICATION	8.849750673068149E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993524844358	WITHOUT_CLASSIFICATION	6.475155641539934E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997708824101	WITHOUT_CLASSIFICATION	2.2911759000875996E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999997330332387	WITHOUT_CLASSIFICATION	2.6696676135752754E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999942917363	WITHOUT_CLASSIFICATION	5.7082637035851605E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996259965379	WITHOUT_CLASSIFICATION	3.7400346208074034E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993164757864	WITHOUT_CLASSIFICATION	6.835242134755489E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999162994243	WITHOUT_CLASSIFICATION	8.370057563710994E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997859289298	WITHOUT_CLASSIFICATION	2.140710702149691E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997076482879	WITHOUT_CLASSIFICATION	2.9235171203890275E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996710188954	WITHOUT_CLASSIFICATION	3.2898110454328196E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997364325718	WITHOUT_CLASSIFICATION	2.6356742820758645E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985914256033	WITHOUT_CLASSIFICATION	1.4085743965773055E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999973613017854	WITHOUT_CLASSIFICATION	2.6386982145736254E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997981554037	WITHOUT_CLASSIFICATION	2.018445962693881E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999989726596627	WITHOUT_CLASSIFICATION	1.0273403372912222E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999803451691	WITHOUT_CLASSIFICATION	1.9654830889634027E-7	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999746630941	WITHOUT_CLASSIFICATION	2.5336905945394225E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998317288054672	WITHOUT_CLASSIFICATION	1.6827119453274194E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999964498971775	WITHOUT_CLASSIFICATION	3.5501028225285252E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999983829786959	WITHOUT_CLASSIFICATION	1.617021304085626E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999979086048032	WITHOUT_CLASSIFICATION	2.0913951968581773E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999979383016656	WITHOUT_CLASSIFICATION	2.061698334318244E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999971299233394	WITHOUT_CLASSIFICATION	2.8700766605333223E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999907653318446	WITHOUT_CLASSIFICATION	9.234668155370124E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999977148846044	WITHOUT_CLASSIFICATION	2.285115395456405E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999977025318769	WITHOUT_CLASSIFICATION	2.2974681230132287E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995824326929	WITHOUT_CLASSIFICATION	4.175673069981567E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999996538332218	WITHOUT_CLASSIFICATION	3.461667781809177E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997163850745	WITHOUT_CLASSIFICATION	2.836149255342248E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999949693388872	WITHOUT_CLASSIFICATION	5.030661112829912E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999959256856	WITHOUT_CLASSIFICATION	4.07431444293208E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998338506191	WITHOUT_CLASSIFICATION	1.6614938094077235E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999797670098	WITHOUT_CLASSIFICATION	2.0232990197171739E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992436613461	WITHOUT_CLASSIFICATION	7.563386538432525E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997288286913	WITHOUT_CLASSIFICATION	2.7117130873282166E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.999991818511157	WITHOUT_CLASSIFICATION	8.181488843047612E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999676298179	WITHOUT_CLASSIFICATION	3.237018214803671E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999733878656	WITHOUT_CLASSIFICATION	2.6612134365879197E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999257768044	WITHOUT_CLASSIFICATION	7.422319556768074E-8	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982826619072	WITHOUT_CLASSIFICATION	1.717338092841611E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999807016284	WITHOUT_CLASSIFICATION	1.9298371609722067E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999941662172782	WITHOUT_CLASSIFICATION	5.833782721775571E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999436177709	WITHOUT_CLASSIFICATION	5.638222908248584E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999997193625	WITHOUT_CLASSIFICATION	2.8063750102128293E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999879759326878	WITHOUT_CLASSIFICATION	1.20240673122553E-5	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999259265997	WITHOUT_CLASSIFICATION	7.407340036589008E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999027333785	WITHOUT_CLASSIFICATION	9.726662158688864E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999957463796155	WITHOUT_CLASSIFICATION	4.253620384565032E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998317288054672	WITHOUT_CLASSIFICATION	1.6827119453274194E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997269428695	WITHOUT_CLASSIFICATION	2.730571304745004E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999902836071	WITHOUT_CLASSIFICATION	9.716392872530039E-9	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999762401768	WITHOUT_CLASSIFICATION	2.3759823119322407E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997704655924	WITHOUT_CLASSIFICATION	2.2953440752534555E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999999977487219	WITHOUT_CLASSIFICATION	2.251278095315939E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999992385312759	WITHOUT_CLASSIFICATION	7.614687242125619E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.999954503586778	WITHOUT_CLASSIFICATION	4.549641322208665E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997794094786	WITHOUT_CLASSIFICATION	2.205905214867934E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999614049639	WITHOUT_CLASSIFICATION	3.85950360856972E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999469947879	WITHOUT_CLASSIFICATION	5.300521209029051E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999813066676	WITHOUT_CLASSIFICATION	1.8693332452331602E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999819340203	WITHOUT_CLASSIFICATION	1.806597969354441E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999187851064	WITHOUT_CLASSIFICATION	8.12148936549039E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999933770626	WITHOUT_CLASSIFICATION	6.622937446292116E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999689198443229	WITHOUT_CLASSIFICATION	3.108015567714854E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999994494740183	WITHOUT_CLASSIFICATION	5.505259817539723E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999965315777611	WITHOUT_CLASSIFICATION	3.468422238849697E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998790848324	WITHOUT_CLASSIFICATION	1.2091516760236988E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999909279015	WITHOUT_CLASSIFICATION	9.072098499772849E-8	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999940437411616	WITHOUT_CLASSIFICATION	5.956258838305026E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999905040355	WITHOUT_CLASSIFICATION	9.495964478959983E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999985376745423	WITHOUT_CLASSIFICATION	1.4623254577571686E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999991964401811	WITHOUT_CLASSIFICATION	8.035598189551833E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999999862406764	WITHOUT_CLASSIFICATION	1.3759323606097347E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999996517670159	WITHOUT_CLASSIFICATION	3.4823298404131606E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999994271646768	WITHOUT_CLASSIFICATION	5.728353231330417E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997043880957622	WITHOUT_CLASSIFICATION	2.956119042376964E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996884033375	WITHOUT_CLASSIFICATION	3.115966625021985E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.99999941044427	WITHOUT_CLASSIFICATION	5.895557300117715E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998634384584	WITHOUT_CLASSIFICATION	1.3656154165666243E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998317288054672	WITHOUT_CLASSIFICATION	1.6827119453274194E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999993503739208	WITHOUT_CLASSIFICATION	6.496260792479052E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998795588305	WITHOUT_CLASSIFICATION	1.2044116951590028E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998206326825421	WITHOUT_CLASSIFICATION	1.793673174579081E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998317288054672	WITHOUT_CLASSIFICATION	1.6827119453274194E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999990856368477	WITHOUT_CLASSIFICATION	9.143631523664074E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999905040355	WITHOUT_CLASSIFICATION	9.495964478959983E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999953989597712	WITHOUT_CLASSIFICATION	4.601040228795591E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9996873204936145	WITHOUT_CLASSIFICATION	3.126795063854518E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999942491673852	WITHOUT_CLASSIFICATION	5.750832614845092E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999469947879	WITHOUT_CLASSIFICATION	5.300521209029051E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999813066676	WITHOUT_CLASSIFICATION	1.8693332452331602E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999819340203	WITHOUT_CLASSIFICATION	1.806597969354441E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999975769758263	WITHOUT_CLASSIFICATION	2.423024173785545E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999994141191365	WITHOUT_CLASSIFICATION	5.85880863417902E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999988504939791	WITHOUT_CLASSIFICATION	1.1495060208919316E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999996739204238	WITHOUT_CLASSIFICATION	3.2607957626148126E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999994637841925	WITHOUT_CLASSIFICATION	5.362158074931117E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998317288054672	WITHOUT_CLASSIFICATION	1.6827119453274194E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999187851064	WITHOUT_CLASSIFICATION	8.12148936549039E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999933770626	WITHOUT_CLASSIFICATION	6.622937446292116E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999673692007	WITHOUT_CLASSIFICATION	3.2630799375965594E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999802130256	WITHOUT_CLASSIFICATION	1.978697429685817E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999997120669619	WITHOUT_CLASSIFICATION	2.879330381107585E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999974172523091	WITHOUT_CLASSIFICATION	2.58274769088891E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999998497510512	WITHOUT_CLASSIFICATION	1.502489488033823E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999683487059	WITHOUT_CLASSIFICATION	3.165129409963966E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985914256033	WITHOUT_CLASSIFICATION	1.4085743965773055E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999978960337161	WITHOUT_CLASSIFICATION	2.1039662838600487E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999909437421561	WITHOUT_CLASSIFICATION	9.056257843797706E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999988424407347	WITHOUT_CLASSIFICATION	1.1575592652668633E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999967573594	WITHOUT_CLASSIFICATION	3.24264053671904E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999585974602	WITHOUT_CLASSIFICATION	4.1402539895290795E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986022863708	WITHOUT_CLASSIFICATION	1.39771362911375E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991150249327	WITHOUT_CLASSIFICATION	8.849750673068149E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993164757864	WITHOUT_CLASSIFICATION	6.835242134755489E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999585974602	WITHOUT_CLASSIFICATION	4.1402539895290795E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999834642967	WITHOUT_CLASSIFICATION	1.6535703149013584E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999487655914	WITHOUT_CLASSIFICATION	5.123440855519811E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999718065841	WITHOUT_CLASSIFICATION	2.8193415898091914E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992343552861	WITHOUT_CLASSIFICATION	7.656447138509386E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998570243736	WITHOUT_CLASSIFICATION	1.4297562655891087E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999698527034099	WITHOUT_CLASSIFICATION	3.0147296590086327E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999162994243	WITHOUT_CLASSIFICATION	8.370057563710994E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996710188954	WITHOUT_CLASSIFICATION	3.2898110454328196E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999997193625	WITHOUT_CLASSIFICATION	2.8063750102128293E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999990797891245	WITHOUT_CLASSIFICATION	9.202108753405538E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999931418612	WITHOUT_CLASSIFICATION	6.858138829664174E-9	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999726060383	WITHOUT_CLASSIFICATION	2.7393961652416412E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999890853587373	WITHOUT_CLASSIFICATION	1.09146412626933E-5	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997749379029	WITHOUT_CLASSIFICATION	2.2506209698158089E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997863335284	WITHOUT_CLASSIFICATION	2.1366647163133997E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999971179992003	WITHOUT_CLASSIFICATION	2.8820007996862302E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999918008552	WITHOUT_CLASSIFICATION	8.199144744859767E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999999943476466	WITHOUT_CLASSIFICATION	5.652353387151753E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999681394415	WITHOUT_CLASSIFICATION	3.186055855433529E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998805240066	WITHOUT_CLASSIFICATION	1.1947599345010323E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999979015184068	WITHOUT_CLASSIFICATION	2.098481593206141E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999716665469	WITHOUT_CLASSIFICATION	2.833345323056577E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999980582397596	WITHOUT_CLASSIFICATION	1.9417602403531128E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998962080572	WITHOUT_CLASSIFICATION	1.0379194276216078E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998501009849	WITHOUT_CLASSIFICATION	1.498990150694414E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998502332802	WITHOUT_CLASSIFICATION	1.4976671985814992E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999999825296512	WITHOUT_CLASSIFICATION	1.7470348795216082E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999833730795059	WITHOUT_CLASSIFICATION	1.662692049410511E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997294648854	WITHOUT_CLASSIFICATION	2.7053511466106024E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997620366795	WITHOUT_CLASSIFICATION	2.379633204584724E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999465765559	WITHOUT_CLASSIFICATION	5.3423444203480135E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998918360082	WITHOUT_CLASSIFICATION	1.0816399179800288E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998847354774	WITHOUT_CLASSIFICATION	1.1526452247916627E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999995512790536	WITHOUT_CLASSIFICATION	4.4872094632011885E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999319120185	WITHOUT_CLASSIFICATION	6.80879815723119E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999996422848396	WITHOUT_CLASSIFICATION	3.577151603774462E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999696085653	WITHOUT_CLASSIFICATION	3.0391434703063487E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997057244788	WITHOUT_CLASSIFICATION	2.942755211465372E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998937328205	WITHOUT_CLASSIFICATION	1.0626717952059439E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999978900753657	WITHOUT_CLASSIFICATION	2.1099246342915827E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999009511912	WITHOUT_CLASSIFICATION	9.904880875012707E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999999953294929	WITHOUT_CLASSIFICATION	4.670507110581487E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999670277491011	WITHOUT_CLASSIFICATION	3.297225089885244E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999596164140818	WITHOUT_CLASSIFICATION	4.038358591820328E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999985548149287	WITHOUT_CLASSIFICATION	1.445185071292369E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999498121478	WITHOUT_CLASSIFICATION	5.0187852252821135E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999998731486102	WITHOUT_CLASSIFICATION	1.2685138980013845E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999968568043	WITHOUT_CLASSIFICATION	3.1431956984177705E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999999997669798	WITHOUT_CLASSIFICATION	2.330201983111372E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999992559411282	WITHOUT_CLASSIFICATION	7.440588719452277E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999845802978422	WITHOUT_CLASSIFICATION	1.5419702157857234E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999361136576	WITHOUT_CLASSIFICATION	6.388634247409819E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999932784842416	WITHOUT_CLASSIFICATION	6.7215157583596965E-6	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999996587497927	WITHOUT_CLASSIFICATION	3.412502073107404E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999989517610337	WITHOUT_CLASSIFICATION	1.048238966249313E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999255200472	WITHOUT_CLASSIFICATION	7.447995279423676E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998756494399359	WITHOUT_CLASSIFICATION	1.2435056006420548E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999719153238384	WITHOUT_CLASSIFICATION	2.808467616157316E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999446150201	WITHOUT_CLASSIFICATION	5.5384979982116126E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999973774822125	WITHOUT_CLASSIFICATION	2.6225177875129023E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999812116075	WITHOUT_CLASSIFICATION	1.878839257025081E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999995532486823	WITHOUT_CLASSIFICATION	4.4675131772672564E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995851294975	WITHOUT_CLASSIFICATION	4.1487050249267616E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999435380366	WITHOUT_CLASSIFICATION	5.646196331823513E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999758213446	WITHOUT_CLASSIFICATION	2.4178655526232933E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990751862424	WITHOUT_CLASSIFICATION	9.248137575923578E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998580037252	WITHOUT_CLASSIFICATION	1.419962748084714E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999801660066	WITHOUT_CLASSIFICATION	1.9833993415132765E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997986523324	WITHOUT_CLASSIFICATION	2.0134766773686543E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998343510177	WITHOUT_CLASSIFICATION	1.656489822847539E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999893001029	WITHOUT_CLASSIFICATION	1.06998970627403E-8	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999995419449657	WITHOUT_CLASSIFICATION	4.580550342812535E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999995569535213	WITHOUT_CLASSIFICATION	4.4304647862786934E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999997968561654	WITHOUT_CLASSIFICATION	2.0314383469994225E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998462073116	WITHOUT_CLASSIFICATION	1.5379268826083293E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999991872683301	WITHOUT_CLASSIFICATION	8.127316698627998E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997097989645	WITHOUT_CLASSIFICATION	2.9020103547124015E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999998531440585	WITHOUT_CLASSIFICATION	1.468559415291703E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999978852388763	WITHOUT_CLASSIFICATION	2.1147611235890324E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999995647480985	WITHOUT_CLASSIFICATION	4.3525190153664757E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999998813794823	WITHOUT_CLASSIFICATION	1.1862051770756292E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999970173340966	WITHOUT_CLASSIFICATION	2.982665903383458E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999864858180583	WITHOUT_CLASSIFICATION	1.3514181941714146E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997897620942	WITHOUT_CLASSIFICATION	2.102379057972229E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999997508220011	WITHOUT_CLASSIFICATION	2.4917799897922917E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999873377226711	WITHOUT_CLASSIFICATION	1.266227732899558E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999866789340666	WITHOUT_CLASSIFICATION	1.332106593338894E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999995230390021	WITHOUT_CLASSIFICATION	4.769609979723722E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999996255187814	WITHOUT_CLASSIFICATION	3.744812185833202E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999981892602456	WITHOUT_CLASSIFICATION	1.8107397543649305E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998956117593	WITHOUT_CLASSIFICATION	1.0438824064507122E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999991960288032	WITHOUT_CLASSIFICATION	8.039711969307414E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999886575101731	WITHOUT_CLASSIFICATION	1.1342489827004733E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999985437824738	WITHOUT_CLASSIFICATION	1.4562175261338507E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997176994854603	WITHOUT_CLASSIFICATION	2.823005145396494E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999945643776332	WITHOUT_CLASSIFICATION	5.435622366714251E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999972090379802	WITHOUT_CLASSIFICATION	2.79096201981875E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999948681758506	WITHOUT_CLASSIFICATION	5.131824149466785E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999997096903577	WITHOUT_CLASSIFICATION	2.903096423128551E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997872120299	WITHOUT_CLASSIFICATION	2.127879701945707E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999908918984862	WITHOUT_CLASSIFICATION	9.108101513754552E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999955732224041	WITHOUT_CLASSIFICATION	4.426777596003855E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999794342266819	WITHOUT_CLASSIFICATION	2.0565773318027338E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999984848185288	WITHOUT_CLASSIFICATION	1.5151814711282142E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999910538933633	WITHOUT_CLASSIFICATION	8.946106636718126E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999997900645213	WITHOUT_CLASSIFICATION	2.0993547858825564E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999997824209	WITHOUT_CLASSIFICATION	2.175789209347398E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999990184041443	WITHOUT_CLASSIFICATION	9.815958557092446E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999859306216538	WITHOUT_CLASSIFICATION	1.4069378346314331E-5	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999966225760565	WITHOUT_CLASSIFICATION	3.3774239435554298E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999990184041443	WITHOUT_CLASSIFICATION	9.815958557092446E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998187400103	WITHOUT_CLASSIFICATION	1.8125998962434728E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997407040708	WITHOUT_CLASSIFICATION	2.592959292006337E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999977667604734	WITHOUT_CLASSIFICATION	2.2332395266955094E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999949866620335	WITHOUT_CLASSIFICATION	5.013337966532448E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999648756482	WITHOUT_CLASSIFICATION	3.5124351739664494E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999301277784	WITHOUT_CLASSIFICATION	6.987222158950575E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999654734126403	WITHOUT_CLASSIFICATION	3.452658735963733E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999598590203	WITHOUT_CLASSIFICATION	4.014097968557928E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999999971141358	WITHOUT_CLASSIFICATION	2.885864208971333E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999972428438549	WITHOUT_CLASSIFICATION	2.757156145042228E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999846912274	WITHOUT_CLASSIFICATION	1.5308772626395712E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999999913102904	WITHOUT_CLASSIFICATION	8.68970958766347E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999990554523059	WITHOUT_CLASSIFICATION	9.445476939792419E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999966986673532	WITHOUT_CLASSIFICATION	3.3013326469629046E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998935719723	WITHOUT_CLASSIFICATION	1.064280277277567E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999992040696063	WITHOUT_CLASSIFICATION	7.959303938307826E-7	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999882701147064	WITHOUT_CLASSIFICATION	1.172988529361618E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999882701147064	WITHOUT_CLASSIFICATION	1.172988529361618E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999858850492	WITHOUT_CLASSIFICATION	1.4114950826211077E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999693005055648	WITHOUT_CLASSIFICATION	3.069949443529135E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999792963573788	WITHOUT_CLASSIFICATION	2.0703642621155767E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.999978459333889	WITHOUT_CLASSIFICATION	2.154066611101436E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999297635886	WITHOUT_CLASSIFICATION	7.023641135483277E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.999941665880518	WITHOUT_CLASSIFICATION	5.833411948204748E-5	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999945412921615	WITHOUT_CLASSIFICATION	5.458707838555788E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999984901331	WITHOUT_CLASSIFICATION	1.509866991089056E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999995470265274	WITHOUT_CLASSIFICATION	4.5297347265478416E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999999752084976	WITHOUT_CLASSIFICATION	2.4791502393472506E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999994558728379	WITHOUT_CLASSIFICATION	5.441271620542091E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999958264667	WITHOUT_CLASSIFICATION	4.173533213983315E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999999725617798	WITHOUT_CLASSIFICATION	2.7438220199063186E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999992068594462	WITHOUT_CLASSIFICATION	7.931405537436489E-7	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999798094915	WITHOUT_CLASSIFICATION	2.0190508548754957E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999980582397596	WITHOUT_CLASSIFICATION	1.9417602403531128E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999854889087785	WITHOUT_CLASSIFICATION	1.4511091221588831E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998801745483	WITHOUT_CLASSIFICATION	1.198254517713778E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999966696727106	WITHOUT_CLASSIFICATION	3.3303272894508302E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9956269803623872	WITHOUT_CLASSIFICATION	0.004373019637612843	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999835260783	WITHOUT_CLASSIFICATION	1.647392163420844E-8	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999937726223073	WITHOUT_CLASSIFICATION	6.227377692851028E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999143396169	WITHOUT_CLASSIFICATION	8.56603831416467E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998404093635	WITHOUT_CLASSIFICATION	1.5959063658246048E-7	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999957863218	WITHOUT_CLASSIFICATION	4.213678125113027E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999995670322	WITHOUT_CLASSIFICATION	4.329677917353425E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999994143705646	WITHOUT_CLASSIFICATION	5.856294353360156E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999166554912	WITHOUT_CLASSIFICATION	8.334450884228547E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999943330152783	WITHOUT_CLASSIFICATION	5.666984721730285E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999981333899566	WITHOUT_CLASSIFICATION	1.8666100433574555E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999992852801518	WITHOUT_CLASSIFICATION	7.147198480883632E-7	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999995214740088	WITHOUT_CLASSIFICATION	4.785259911460036E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999872862936536	WITHOUT_CLASSIFICATION	1.271370634623811E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999964359657508	WITHOUT_CLASSIFICATION	3.564034249061934E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999990272685539	WITHOUT_CLASSIFICATION	9.727314460386875E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998328139597	WITHOUT_CLASSIFICATION	1.6718604034100793E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999978424653503	WITHOUT_CLASSIFICATION	2.1575346497843448E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999995550927328	WITHOUT_CLASSIFICATION	4.449072672611107E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999716745139	WITHOUT_CLASSIFICATION	2.832548609813141E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999994376622162	WITHOUT_CLASSIFICATION	5.623377837045855E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999985932162865	WITHOUT_CLASSIFICATION	1.4067837136093321E-6	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999994729681895	WITHOUT_CLASSIFICATION	5.270318106169042E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999979913701	WITHOUT_CLASSIFICATION	2.0086298921021842E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999484724583	WITHOUT_CLASSIFICATION	5.152754163798585E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999994720216219	WITHOUT_CLASSIFICATION	5.279783780775985E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998288824061	WITHOUT_CLASSIFICATION	1.7111759384951684E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995856504353	WITHOUT_CLASSIFICATION	4.143495647030832E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997517989029	WITHOUT_CLASSIFICATION	2.482010971993384E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997511569338	WITHOUT_CLASSIFICATION	2.4884306609108145E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999930453404	WITHOUT_CLASSIFICATION	6.954659741152859E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999834885657	WITHOUT_CLASSIFICATION	1.6511434297168944E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997533231629	WITHOUT_CLASSIFICATION	2.466768370595185E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999982069308	WITHOUT_CLASSIFICATION	1.7930692242519145E-9	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996681984835	WITHOUT_CLASSIFICATION	3.318015165554557E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997236167986	WITHOUT_CLASSIFICATION	2.763832014416904E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999996681984835	WITHOUT_CLASSIFICATION	3.318015165554557E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993842860152	WITHOUT_CLASSIFICATION	6.157139848322205E-7	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999997918543091	WITHOUT_CLASSIFICATION	2.0814569091716662E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999993127390092	WITHOUT_CLASSIFICATION	6.872609907175226E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999230847286	WITHOUT_CLASSIFICATION	7.691527135118022E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999998699505843	WITHOUT_CLASSIFICATION	1.3004941570035344E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999991225244285	WITHOUT_CLASSIFICATION	8.774755715075202E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999247810937	WITHOUT_CLASSIFICATION	7.52189063567897E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.999999816647029	WITHOUT_CLASSIFICATION	1.833529709180885E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999313833292	WITHOUT_CLASSIFICATION	6.861667072046861E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999990552911659	WITHOUT_CLASSIFICATION	9.447088341023515E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999868316202	WITHOUT_CLASSIFICATION	1.316837986759291E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999946853454	WITHOUT_CLASSIFICATION	5.314654634009745E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999944082963681	WITHOUT_CLASSIFICATION	5.5917036318419875E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999957901159069	WITHOUT_CLASSIFICATION	4.209884093081237E-6	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999998876885876	WITHOUT_CLASSIFICATION	1.123114123782115E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999987137193	WITHOUT_CLASSIFICATION	1.2862806817413082E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999813044935835	WITHOUT_CLASSIFICATION	1.8695506416562588E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999813044935835	WITHOUT_CLASSIFICATION	1.8695506416562588E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999989441472317	WITHOUT_CLASSIFICATION	1.0558527683692019E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999951672218947	WITHOUT_CLASSIFICATION	4.832778105159114E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999903480046	WITHOUT_CLASSIFICATION	9.651995421924625E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999544121058	WITHOUT_CLASSIFICATION	4.5587894170604145E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999997851556583	WITHOUT_CLASSIFICATION	2.1484434169363074E-7	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999998669814972	WITHOUT_CLASSIFICATION	1.3301850280034795E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999977325309604	WITHOUT_CLASSIFICATION	2.267469039632683E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999966233343818	WITHOUT_CLASSIFICATION	3.3766656182759525E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999995831707817	WITHOUT_CLASSIFICATION	4.1682921830435374E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999939120178	WITHOUT_CLASSIFICATION	6.087982190565508E-9	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999061435995	WITHOUT_CLASSIFICATION	9.385640058357014E-8	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999800991317	WITHOUT_CLASSIFICATION	1.9900868305352718E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999606514308	WITHOUT_CLASSIFICATION	3.9348569293584785E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998081221085	WITHOUT_CLASSIFICATION	1.918778915858198E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997921269356	WITHOUT_CLASSIFICATION	2.0787306448755374E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997766552413	WITHOUT_CLASSIFICATION	2.2334475862335425E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999281581242	WITHOUT_CLASSIFICATION	7.184187580935458E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999966479613926	WITHOUT_CLASSIFICATION	3.352038607326942E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999106056869	WITHOUT_CLASSIFICATION	8.939431310394433E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999996538596	WITHOUT_CLASSIFICATION	3.461405587914043E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998379148191	WITHOUT_CLASSIFICATION	1.6208518097516214E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999675402743	WITHOUT_CLASSIFICATION	3.245972565298789E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999853985749	WITHOUT_CLASSIFICATION	1.4601425095014102E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999919808461	WITHOUT_CLASSIFICATION	8.019153936710797E-9	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999983233074305	WITHOUT_CLASSIFICATION	1.6766925693663072E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997602436428	WITHOUT_CLASSIFICATION	2.3975635721901227E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999991690315618	WITHOUT_CLASSIFICATION	8.3096843807382E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999985450378216	WITHOUT_CLASSIFICATION	1.4549621783940097E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999921668925711	WITHOUT_CLASSIFICATION	7.83310742898553E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999974369829411	WITHOUT_CLASSIFICATION	2.5630170589258884E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999839878293151	WITHOUT_CLASSIFICATION	1.6012170684949652E-5	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999977282550269	WITHOUT_CLASSIFICATION	2.2717449730161603E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999417526986037	WITHOUT_CLASSIFICATION	5.824730139620165E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999942049566191	WITHOUT_CLASSIFICATION	5.795043380981769E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999989098563994	WITHOUT_CLASSIFICATION	1.0901436006247682E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999658764478	WITHOUT_CLASSIFICATION	3.41235522420038E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999978959816	WITHOUT_CLASSIFICATION	2.1040184002137852E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999986662296357	WITHOUT_CLASSIFICATION	1.3337703642927978E-6	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999589963052	WITHOUT_CLASSIFICATION	4.1003694781954145E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999172198537	WITHOUT_CLASSIFICATION	8.278014623678865E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999432071256	WITHOUT_CLASSIFICATION	5.6792874431212884E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984721859063	WITHOUT_CLASSIFICATION	1.5278140937900494E-6	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999951673272411	WITHOUT_CLASSIFICATION	4.8326727588879395E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999640550485	WITHOUT_CLASSIFICATION	3.5944951346094886E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999980094769	WITHOUT_CLASSIFICATION	1.9905230573992596E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999826462783	WITHOUT_CLASSIFICATION	1.7353721758340516E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999210780448	WITHOUT_CLASSIFICATION	7.89219551151597E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999834474951	WITHOUT_CLASSIFICATION	1.655250494146606E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999999253783212	WITHOUT_CLASSIFICATION	7.462167875752974E-8	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999992887944126	WITHOUT_CLASSIFICATION	7.112055874067428E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979324980596	WITHOUT_CLASSIFICATION	2.067501940373774E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999955229494348	WITHOUT_CLASSIFICATION	4.47705056509148E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999983200223502	WITHOUT_CLASSIFICATION	1.6799776497574473E-6	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999984582322776	WITHOUT_CLASSIFICATION	1.5417677223348298E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999952426838514	WITHOUT_CLASSIFICATION	4.7573161485982855E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999990856368477	WITHOUT_CLASSIFICATION	9.143631523664074E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999990856368477	WITHOUT_CLASSIFICATION	9.143631523664074E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999402630331927	WITHOUT_CLASSIFICATION	5.9736966807292975E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999958509385732	WITHOUT_CLASSIFICATION	4.149061426773024E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999340145206	WITHOUT_CLASSIFICATION	6.598547941534919E-8	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999485006008	WITHOUT_CLASSIFICATION	5.149939920208467E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999975935727	WITHOUT_CLASSIFICATION	2.40642729568872E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998928150001	WITHOUT_CLASSIFICATION	1.0718499988671852E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999471386405	WITHOUT_CLASSIFICATION	5.286135953370336E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999999486311981	WITHOUT_CLASSIFICATION	5.136880190184812E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998938926626731	WITHOUT_CLASSIFICATION	1.0610733732689765E-4	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999695284977	WITHOUT_CLASSIFICATION	3.0471502381479125E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999928377483018	WITHOUT_CLASSIFICATION	7.162251698238974E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999997406277767	WITHOUT_CLASSIFICATION	2.5937222330244443E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999809871366594	WITHOUT_CLASSIFICATION	1.9012863340539724E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999878639317	WITHOUT_CLASSIFICATION	1.213606812712438E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996410359057	WITHOUT_CLASSIFICATION	3.5896409430528445E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999989231124969	WITHOUT_CLASSIFICATION	1.0768875030115231E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999985249031	WITHOUT_CLASSIFICATION	1.475096827354472E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999950751275831	WITHOUT_CLASSIFICATION	4.924872416802132E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999961040031273	WITHOUT_CLASSIFICATION	3.895996872627677E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999995334297326	WITHOUT_CLASSIFICATION	4.665702673242031E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999438912117	WITHOUT_CLASSIFICATION	5.6108788241361094E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999991713346984	WITHOUT_CLASSIFICATION	8.286653015382414E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999766692377369	WITHOUT_CLASSIFICATION	2.3330762263122775E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999700901129	WITHOUT_CLASSIFICATION	2.990988717604628E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998600988288	WITHOUT_CLASSIFICATION	1.399011712355852E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999992119494513	WITHOUT_CLASSIFICATION	7.88050548686173E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999972121616809	WITHOUT_CLASSIFICATION	2.787838318980035E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999622630469213	WITHOUT_CLASSIFICATION	3.773695307873175E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999999923493806	WITHOUT_CLASSIFICATION	7.650619405151678E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999766692377369	WITHOUT_CLASSIFICATION	2.3330762263122775E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999996466477159	WITHOUT_CLASSIFICATION	3.533522841111309E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999991947968	WITHOUT_CLASSIFICATION	8.052032614388076E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997820773651547	WITHOUT_CLASSIFICATION	2.1792263484529645E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999983148326219	WITHOUT_CLASSIFICATION	1.6851673781408247E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999805321621	WITHOUT_CLASSIFICATION	1.946783790366282E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999678444493589	WITHOUT_CLASSIFICATION	3.215555064104339E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999638851279	WITHOUT_CLASSIFICATION	3.6114872056963536E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999491377098	WITHOUT_CLASSIFICATION	5.0862290152329825E-8	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999983643611323	WITHOUT_CLASSIFICATION	1.6356388676806917E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999983148326219	WITHOUT_CLASSIFICATION	1.6851673781408247E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999949081377572	WITHOUT_CLASSIFICATION	5.0918622428362565E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999504775329	WITHOUT_CLASSIFICATION	4.9522467094999984E-8	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999997064616831	WITHOUT_CLASSIFICATION	2.9353831692404153E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999813121996732	WITHOUT_CLASSIFICATION	1.868780032680531E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999995120630928	WITHOUT_CLASSIFICATION	4.879369071152637E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999061435995	WITHOUT_CLASSIFICATION	9.385640058357014E-8	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998873076085	WITHOUT_CLASSIFICATION	1.126923914901901E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999966178609057	WITHOUT_CLASSIFICATION	3.3821390944471296E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999990847908424	WITHOUT_CLASSIFICATION	9.152091576557649E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999996258160292	WITHOUT_CLASSIFICATION	3.7418397084084424E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999982608350004	WITHOUT_CLASSIFICATION	1.7391649996074454E-5	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999990316966558	WITHOUT_CLASSIFICATION	9.683033441569835E-7	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999886090914017	WITHOUT_CLASSIFICATION	1.1390908598239018E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999986850730664	WITHOUT_CLASSIFICATION	1.3149269335194183E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999961828683531	WITHOUT_CLASSIFICATION	3.817131646851115E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999998792358669	WITHOUT_CLASSIFICATION	1.2076413314494622E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999727995825511	WITHOUT_CLASSIFICATION	2.720041744890469E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999765680304	WITHOUT_CLASSIFICATION	2.343196957924049E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999957566686	WITHOUT_CLASSIFICATION	4.243331404123166E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999994637568342	WITHOUT_CLASSIFICATION	5.36243165810252E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999947248818	WITHOUT_CLASSIFICATION	5.275118300013492E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999996992985671	WITHOUT_CLASSIFICATION	3.007014328208044E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999976997369646	WITHOUT_CLASSIFICATION	2.3002630354538437E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.99999924714243	WITHOUT_CLASSIFICATION	7.528575699605119E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999997583597886	WITHOUT_CLASSIFICATION	2.4164021135299676E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999933390160302	WITHOUT_CLASSIFICATION	6.660983969736874E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999987845622008	WITHOUT_CLASSIFICATION	1.2154377991848961E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999890257001	WITHOUT_CLASSIFICATION	1.0974299935457817E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999503804443	WITHOUT_CLASSIFICATION	4.96195556990609E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999992071080573	WITHOUT_CLASSIFICATION	7.928919425939895E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999983024089321	WITHOUT_CLASSIFICATION	1.6975910679579987E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999920280530147	WITHOUT_CLASSIFICATION	7.971946985304896E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999995076389536	WITHOUT_CLASSIFICATION	4.923610464064907E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997568026608	WITHOUT_CLASSIFICATION	2.431973391680168E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997454709658	WITHOUT_CLASSIFICATION	2.5452903422518554E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999998675383011	WITHOUT_CLASSIFICATION	1.3246169899733942E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999997797024951	WITHOUT_CLASSIFICATION	2.202975049179098E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997781338504	WITHOUT_CLASSIFICATION	2.218661495497259E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999989837874	WITHOUT_CLASSIFICATION	1.0162125307190012E-9	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999998197226283	WITHOUT_CLASSIFICATION	1.8027737164543145E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999994300133603	WITHOUT_CLASSIFICATION	5.699866397532848E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999992603215	WITHOUT_CLASSIFICATION	7.396784983507155E-9	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999435003548	WITHOUT_CLASSIFICATION	5.649964520590046E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999995083856087	WITHOUT_CLASSIFICATION	4.916143914370616E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999999772756163	WITHOUT_CLASSIFICATION	2.2724383697887906E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999983150394114	WITHOUT_CLASSIFICATION	1.6849605885293422E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998315182635	WITHOUT_CLASSIFICATION	1.6848173650782874E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999924503434	WITHOUT_CLASSIFICATION	7.54965654219922E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999998855187746	WITHOUT_CLASSIFICATION	1.144812254007851E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999579875464	WITHOUT_CLASSIFICATION	4.201245360338281E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999693848587317	WITHOUT_CLASSIFICATION	3.06151412682495E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999998097398271	WITHOUT_CLASSIFICATION	1.9026017290105388E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999992345000439	WITHOUT_CLASSIFICATION	7.654999560423129E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999993511768206	WITHOUT_CLASSIFICATION	6.488231793617828E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999974504162419	WITHOUT_CLASSIFICATION	2.5495837580593633E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999999015095447	WITHOUT_CLASSIFICATION	9.84904552998878E-7	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999789142265	WITHOUT_CLASSIFICATION	2.1085773445671115E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999993795221623	WITHOUT_CLASSIFICATION	6.204778376321886E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999921142845	WITHOUT_CLASSIFICATION	7.885715491490765E-9	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999997694431988	WITHOUT_CLASSIFICATION	2.3055680124610636E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999957374134809	WITHOUT_CLASSIFICATION	4.262586519106891E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999980044050824	WITHOUT_CLASSIFICATION	1.995594917627315E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997568026608	WITHOUT_CLASSIFICATION	2.431973391680168E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999860613806	WITHOUT_CLASSIFICATION	1.393861943265315E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999995686636	WITHOUT_CLASSIFICATION	4.3133635303836685E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.999999056806831	WITHOUT_CLASSIFICATION	9.431931690714435E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999928056421633	WITHOUT_CLASSIFICATION	7.1943578367490025E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998941637085	WITHOUT_CLASSIFICATION	1.0583629147137192E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995973788584	WITHOUT_CLASSIFICATION	4.0262114159083825E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988967432485	WITHOUT_CLASSIFICATION	1.1032567515022378E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999960959415	WITHOUT_CLASSIFICATION	3.904058492729311E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999864322118	WITHOUT_CLASSIFICATION	1.3567788132617609E-8	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999976575347286	WITHOUT_CLASSIFICATION	2.3424652713658275E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999915503823	WITHOUT_CLASSIFICATION	8.4496175678672E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998766424196156	WITHOUT_CLASSIFICATION	1.2335758038431503E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998962225098	WITHOUT_CLASSIFICATION	1.0377749012069995E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999994127697013	WITHOUT_CLASSIFICATION	5.872302987432189E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999993842860152	WITHOUT_CLASSIFICATION	6.157139848322205E-7	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999924834864	WITHOUT_CLASSIFICATION	7.516513624269015E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999989163151	WITHOUT_CLASSIFICATION	1.0836849638358362E-9	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998410481176	WITHOUT_CLASSIFICATION	1.5895188243830853E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.999999624366489	WITHOUT_CLASSIFICATION	3.7563351099540364E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999994174814	WITHOUT_CLASSIFICATION	5.825185138405812E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999949224015567	WITHOUT_CLASSIFICATION	5.077598443185203E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999949224015567	WITHOUT_CLASSIFICATION	5.077598443185203E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997446678841	WITHOUT_CLASSIFICATION	2.553321158939645E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999987781599613	WITHOUT_CLASSIFICATION	1.2218400387165717E-6	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999355713579	WITHOUT_CLASSIFICATION	6.442864209745068E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999994431346617	WITHOUT_CLASSIFICATION	5.568653382882513E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999480345788	WITHOUT_CLASSIFICATION	5.196542119616206E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999771108691	WITHOUT_CLASSIFICATION	2.2889130947623826E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999955689418766	WITHOUT_CLASSIFICATION	4.431058123416327E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998340722271	WITHOUT_CLASSIFICATION	1.6592777285210974E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998340722271	WITHOUT_CLASSIFICATION	1.6592777285210974E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999984719429163	WITHOUT_CLASSIFICATION	1.5280570837022958E-5	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999991890321175	WITHOUT_CLASSIFICATION	8.109678826554381E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999163553943	WITHOUT_CLASSIFICATION	8.36446057045472E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997236781262	WITHOUT_CLASSIFICATION	2.763218738460759E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997236781262	WITHOUT_CLASSIFICATION	2.763218738460759E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997236781262	WITHOUT_CLASSIFICATION	2.763218738460759E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999999808178451	WITHOUT_CLASSIFICATION	1.9182154891794282E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999996514293414	WITHOUT_CLASSIFICATION	3.4857065856517803E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999972807049939	WITHOUT_CLASSIFICATION	2.719295006025087E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999976595634559	WITHOUT_CLASSIFICATION	2.3404365441678663E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999874067023	WITHOUT_CLASSIFICATION	1.2593297870298765E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999952158557	WITHOUT_CLASSIFICATION	4.784144314031179E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999719661222	WITHOUT_CLASSIFICATION	2.803387766133644E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999703208909814	WITHOUT_CLASSIFICATION	2.9679109018694495E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998338627424	WITHOUT_CLASSIFICATION	1.661372577020773E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999992706346429	WITHOUT_CLASSIFICATION	7.293653571162103E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999990060579758	WITHOUT_CLASSIFICATION	9.939420242775842E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999995280248035	WITHOUT_CLASSIFICATION	4.719751965300986E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999777390282	WITHOUT_CLASSIFICATION	2.2260971893238972E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999821850186	WITHOUT_CLASSIFICATION	1.7814981388554046E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999809398407	WITHOUT_CLASSIFICATION	1.9060159300673933E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999996673592214	WITHOUT_CLASSIFICATION	3.326407785640194E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999977113989239	WITHOUT_CLASSIFICATION	2.288601076068746E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999977113989239	WITHOUT_CLASSIFICATION	2.288601076068746E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982418034069	WITHOUT_CLASSIFICATION	1.758196593052044E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982418034069	WITHOUT_CLASSIFICATION	1.758196593052044E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999998223343766	WITHOUT_CLASSIFICATION	1.7766562339726035E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.99999847446131	WITHOUT_CLASSIFICATION	1.5255386900042762E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.99999847446131	WITHOUT_CLASSIFICATION	1.5255386900042762E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999992366834427	WITHOUT_CLASSIFICATION	7.633165572258408E-7	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999997926788696	WITHOUT_CLASSIFICATION	2.0732113040266077E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999974254084	WITHOUT_CLASSIFICATION	2.5745916037594698E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999949224015567	WITHOUT_CLASSIFICATION	5.077598443185203E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999623956309	WITHOUT_CLASSIFICATION	3.760436900530337E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999997926788696	WITHOUT_CLASSIFICATION	2.0732113040266077E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999994932255226	WITHOUT_CLASSIFICATION	5.067744773004646E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999997668910492	WITHOUT_CLASSIFICATION	2.3310895076394085E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999984724212083	WITHOUT_CLASSIFICATION	1.52757879170003E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999999162664525	WITHOUT_CLASSIFICATION	8.373354748860191E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999895150484	WITHOUT_CLASSIFICATION	1.0484951499929885E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999954849223732	WITHOUT_CLASSIFICATION	4.515077626801464E-6	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999995970115669	WITHOUT_CLASSIFICATION	4.0298843305788805E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999993957457934	WITHOUT_CLASSIFICATION	6.042542066551314E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999074238014	WITHOUT_CLASSIFICATION	9.257619861440403E-8	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999888007023366	WITHOUT_CLASSIFICATION	1.119929766337832E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999994565265	WITHOUT_CLASSIFICATION	5.434734959638274E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999977074080811	WITHOUT_CLASSIFICATION	2.2925919188678005E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995580005758	WITHOUT_CLASSIFICATION	4.4199942420991175E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999979505627011	WITHOUT_CLASSIFICATION	2.0494372988485536E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999974934923866	WITHOUT_CLASSIFICATION	2.506507613330829E-6	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999381221489	WITHOUT_CLASSIFICATION	6.187785108312985E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999703384904	WITHOUT_CLASSIFICATION	2.9661509655580433E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999992847552795	WITHOUT_CLASSIFICATION	7.152447205042089E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999992847552795	WITHOUT_CLASSIFICATION	7.152447205042089E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999992869515668	WITHOUT_CLASSIFICATION	7.130484331398721E-7	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999986038062701	WITHOUT_CLASSIFICATION	1.3961937298804616E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994836898033	WITHOUT_CLASSIFICATION	5.163101967785338E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999999353266902	WITHOUT_CLASSIFICATION	6.467330980389729E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994569064529	WITHOUT_CLASSIFICATION	5.430935470664918E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998981249142	WITHOUT_CLASSIFICATION	1.0187508582655563E-7	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999949117587	WITHOUT_CLASSIFICATION	5.088241274200329E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999959229886047	WITHOUT_CLASSIFICATION	4.077011395272266E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999998061011186	WITHOUT_CLASSIFICATION	1.9389888144194307E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999786639736	WITHOUT_CLASSIFICATION	2.133602637301254E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999860757004	WITHOUT_CLASSIFICATION	1.392429959417407E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998766424196156	WITHOUT_CLASSIFICATION	1.2335758038431503E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999946813466	WITHOUT_CLASSIFICATION	5.318653329626793E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999995766126826	WITHOUT_CLASSIFICATION	4.2338731742640956E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999997295065962	WITHOUT_CLASSIFICATION	2.70493403792704E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999997558314543	WITHOUT_CLASSIFICATION	2.441685457356647E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999766838057	WITHOUT_CLASSIFICATION	2.331619433669356E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999766838057	WITHOUT_CLASSIFICATION	2.331619433669356E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999964720532234	WITHOUT_CLASSIFICATION	3.527946776734655E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997708877753	WITHOUT_CLASSIFICATION	2.291122246748627E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999994019584358	WITHOUT_CLASSIFICATION	5.980415641846441E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999974925924029	WITHOUT_CLASSIFICATION	2.507407597086075E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.999999249932309	WITHOUT_CLASSIFICATION	7.500676909941718E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999968496386681	WITHOUT_CLASSIFICATION	3.1503613319195275E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999991249168049	WITHOUT_CLASSIFICATION	8.750831951454484E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999953432128	WITHOUT_CLASSIFICATION	4.6567872040786214E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999786310543	WITHOUT_CLASSIFICATION	2.1368945692818754E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999598868018	WITHOUT_CLASSIFICATION	4.011319817527284E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999257786683	WITHOUT_CLASSIFICATION	7.422133173937683E-8	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999953432128	WITHOUT_CLASSIFICATION	4.6567872040786214E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999443792227	WITHOUT_CLASSIFICATION	5.5620777187158465E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998847635112	WITHOUT_CLASSIFICATION	1.1523648892068954E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999595683856	WITHOUT_CLASSIFICATION	4.043161448299716E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999959085740445	WITHOUT_CLASSIFICATION	4.091425955564168E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999897517247	WITHOUT_CLASSIFICATION	1.024827526829374E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999671368444	WITHOUT_CLASSIFICATION	3.286315561885408E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999765556493	WITHOUT_CLASSIFICATION	2.344435071193547E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999122714693	WITHOUT_CLASSIFICATION	8.772853058468157E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999758184209	WITHOUT_CLASSIFICATION	2.4181579088184864E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999951205255302	WITHOUT_CLASSIFICATION	4.87947446979571E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999991847920225	WITHOUT_CLASSIFICATION	8.152079774307884E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999581151859	WITHOUT_CLASSIFICATION	4.18848140589843E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999998584179902	WITHOUT_CLASSIFICATION	1.4158200986196345E-7	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994877697398	WITHOUT_CLASSIFICATION	5.122302602721968E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999977803087663	WITHOUT_CLASSIFICATION	2.2196912337457587E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999982903800729	WITHOUT_CLASSIFICATION	1.7096199271471954E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999978451282834	WITHOUT_CLASSIFICATION	2.154871716666343E-6	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999780551159223	WITHOUT_CLASSIFICATION	2.194488407770188E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999657762397057	WITHOUT_CLASSIFICATION	3.422376029424435E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999770417922	WITHOUT_CLASSIFICATION	2.2958207775660164E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999999627519384	WITHOUT_CLASSIFICATION	3.7248061595253685E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998776376529	WITHOUT_CLASSIFICATION	1.2236234716426876E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999983294863876	WITHOUT_CLASSIFICATION	1.67051361239966E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999942424999573	WITHOUT_CLASSIFICATION	5.757500042692288E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999944688073	WITHOUT_CLASSIFICATION	5.531192701493768E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999960536124812	WITHOUT_CLASSIFICATION	3.946387518807526E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999784674439	WITHOUT_CLASSIFICATION	2.153255610053223E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999950066715	WITHOUT_CLASSIFICATION	4.993328556731634E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999913465749	WITHOUT_CLASSIFICATION	8.653425175442385E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999999284077222	WITHOUT_CLASSIFICATION	7.159227777621773E-8	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999999281921	WITHOUT_CLASSIFICATION	7.180791736487479E-10	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999421405124	WITHOUT_CLASSIFICATION	5.785948764334799E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999985091966976	WITHOUT_CLASSIFICATION	1.4908033023193684E-6	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998672876786	WITHOUT_CLASSIFICATION	1.3271232133445882E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998732021917	WITHOUT_CLASSIFICATION	1.2679780826397328E-7	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999991184874591	WITHOUT_CLASSIFICATION	8.815125409500398E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999962600797	WITHOUT_CLASSIFICATION	3.739920227040552E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999935929762	WITHOUT_CLASSIFICATION	6.40702380564088E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999997153481804	WITHOUT_CLASSIFICATION	2.8465181959259974E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999434697335	WITHOUT_CLASSIFICATION	5.653026638037898E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999985224962027	WITHOUT_CLASSIFICATION	1.4775037972752592E-6	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999905666193	WITHOUT_CLASSIFICATION	9.433380775278681E-9	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999958583925	WITHOUT_CLASSIFICATION	4.1416074646374884E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999945712453	WITHOUT_CLASSIFICATION	5.428754630605028E-9	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999998128972359	WITHOUT_CLASSIFICATION	1.87102763977925E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999941630501	WITHOUT_CLASSIFICATION	5.836949913568576E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998702634437	WITHOUT_CLASSIFICATION	1.297365562502069E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999585349406988	WITHOUT_CLASSIFICATION	4.1465059301163064E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999963336779002	WITHOUT_CLASSIFICATION	3.6663220997980153E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997170323661	WITHOUT_CLASSIFICATION	2.829676339330615E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968920945906	WITHOUT_CLASSIFICATION	3.107905409249703E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997121053431	WITHOUT_CLASSIFICATION	2.878946568827784E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999697771588	WITHOUT_CLASSIFICATION	3.022284120707249E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999628646042	WITHOUT_CLASSIFICATION	3.713539579858885E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999814610127	WITHOUT_CLASSIFICATION	1.8538987349333034E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998519521303	WITHOUT_CLASSIFICATION	1.4804786970652615E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997966796609	WITHOUT_CLASSIFICATION	2.0332033920000008E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999682246676	WITHOUT_CLASSIFICATION	3.177533237612315E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999997069859514	WITHOUT_CLASSIFICATION	2.9301404854498774E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999990225260026	WITHOUT_CLASSIFICATION	9.77473997438264E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998928238484	WITHOUT_CLASSIFICATION	1.0717615160614269E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999996351216217	WITHOUT_CLASSIFICATION	3.648783782807739E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999455591995	WITHOUT_CLASSIFICATION	5.444080064481671E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999241766457407	WITHOUT_CLASSIFICATION	7.582335425935062E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999995263160983	WITHOUT_CLASSIFICATION	4.736839017384925E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999970709432143	WITHOUT_CLASSIFICATION	2.929056785662629E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968920945906	WITHOUT_CLASSIFICATION	3.107905409249703E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999999403159565	WITHOUT_CLASSIFICATION	5.968404352982584E-8	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999999861558629	WITHOUT_CLASSIFICATION	1.384413710755241E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999640474523	WITHOUT_CLASSIFICATION	3.59525476486331E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999592394576	WITHOUT_CLASSIFICATION	4.0760542407830366E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999969243683682	WITHOUT_CLASSIFICATION	3.0756316318542275E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999989525198644	WITHOUT_CLASSIFICATION	1.0474801356605292E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999786310543	WITHOUT_CLASSIFICATION	2.1368945692818754E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999397609483754	WITHOUT_CLASSIFICATION	6.023905162444953E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998732021917	WITHOUT_CLASSIFICATION	1.2679780826397328E-7	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999977867198173	WITHOUT_CLASSIFICATION	2.2132801827138577E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999659985394	WITHOUT_CLASSIFICATION	3.4001460607541875E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999992472266074	WITHOUT_CLASSIFICATION	7.527733926267849E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999992860363374	WITHOUT_CLASSIFICATION	7.139636626628514E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994481646992	WITHOUT_CLASSIFICATION	5.518353007127138E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999993744023985	WITHOUT_CLASSIFICATION	6.255976015466037E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999992038517789	WITHOUT_CLASSIFICATION	7.961482210609023E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997824131897	WITHOUT_CLASSIFICATION	2.1758681036250075E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999938380579	WITHOUT_CLASSIFICATION	6.161942155332338E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999955066247	WITHOUT_CLASSIFICATION	4.4933753705919605E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998444735966	WITHOUT_CLASSIFICATION	1.5552640345025311E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999470682525	WITHOUT_CLASSIFICATION	5.2931747661399704E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999396298593	WITHOUT_CLASSIFICATION	6.037014062658517E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999396298593	WITHOUT_CLASSIFICATION	6.037014062658517E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999607213642	WITHOUT_CLASSIFICATION	3.927863584655554E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997032605794	WITHOUT_CLASSIFICATION	2.9673942062102355E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998217069835	WITHOUT_CLASSIFICATION	1.782930165090497E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999975068018532	WITHOUT_CLASSIFICATION	2.4931981468989175E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999991955408	WITHOUT_CLASSIFICATION	8.044591996755125E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999209399754	WITHOUT_CLASSIFICATION	7.906002455029989E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999958655965	WITHOUT_CLASSIFICATION	4.1344035517685366E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999983067565839	WITHOUT_CLASSIFICATION	1.693243416247799E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999160336714	WITHOUT_CLASSIFICATION	8.396632855964531E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999966477391959	WITHOUT_CLASSIFICATION	3.352260804157176E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999998820336776	WITHOUT_CLASSIFICATION	1.1796632233210365E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997329830705	WITHOUT_CLASSIFICATION	2.6701692938563684E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999865465038	WITHOUT_CLASSIFICATION	1.3453496052232732E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999970738853	WITHOUT_CLASSIFICATION	2.9261146243486546E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999186301094	WITHOUT_CLASSIFICATION	8.136989068741524E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998443414805	WITHOUT_CLASSIFICATION	1.5565851962082002E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999980914449662	WITHOUT_CLASSIFICATION	1.9085550339038287E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999631754022	WITHOUT_CLASSIFICATION	3.682459771648001E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999836814801	WITHOUT_CLASSIFICATION	1.6318519885879348E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999946215501593	WITHOUT_CLASSIFICATION	5.378449840787977E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999015025097	WITHOUT_CLASSIFICATION	9.849749032026779E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999993337320191	WITHOUT_CLASSIFICATION	6.662679809953249E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998900116432	WITHOUT_CLASSIFICATION	1.0998835679736616E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9998794231850061	WITHOUT_CLASSIFICATION	1.2057681499391551E-4	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990789240426	WITHOUT_CLASSIFICATION	9.210759572421221E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994501229124	WITHOUT_CLASSIFICATION	5.498770876746518E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996415977281	WITHOUT_CLASSIFICATION	3.5840227177978956E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999949577552	WITHOUT_CLASSIFICATION	5.042244938802903E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999909061886543	WITHOUT_CLASSIFICATION	9.093811345766136E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999777934228	WITHOUT_CLASSIFICATION	2.2206577202894647E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997043880957622	WITHOUT_CLASSIFICATION	2.956119042376964E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999591694867938	WITHOUT_CLASSIFICATION	4.0830513206317457E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999836545623	WITHOUT_CLASSIFICATION	1.634543770863493E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999987662006	WITHOUT_CLASSIFICATION	1.2337994020125784E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999995305860802	WITHOUT_CLASSIFICATION	4.694139199621286E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996780398817	WITHOUT_CLASSIFICATION	3.219601182753764E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999901743992861	WITHOUT_CLASSIFICATION	9.825600713970581E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999861621836	WITHOUT_CLASSIFICATION	1.3837816424020151E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999161013775	WITHOUT_CLASSIFICATION	8.389862246424258E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999983593912067	WITHOUT_CLASSIFICATION	1.64060879325108E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997544336694	WITHOUT_CLASSIFICATION	2.455663306230375E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999986422491	WITHOUT_CLASSIFICATION	1.3577509090787E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999172533208058	WITHOUT_CLASSIFICATION	8.27466791941221E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999886907365052	WITHOUT_CLASSIFICATION	1.1309263494747473E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999955551264973	WITHOUT_CLASSIFICATION	4.444873502658914E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999718065841	WITHOUT_CLASSIFICATION	2.8193415898091914E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9949011176709638	WITHOUT_CLASSIFICATION	0.005098882329036202	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999613162825	WITHOUT_CLASSIFICATION	3.8683717520897254E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999863624335	WITHOUT_CLASSIFICATION	1.3637566548967688E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999788905988	WITHOUT_CLASSIFICATION	2.110940119095824E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998122632808	WITHOUT_CLASSIFICATION	1.8773671922044387E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999912419669	WITHOUT_CLASSIFICATION	8.758033007971528E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999979460492968	WITHOUT_CLASSIFICATION	2.0539507031448085E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999998554023907	WITHOUT_CLASSIFICATION	1.445976092543325E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997806581846	WITHOUT_CLASSIFICATION	2.1934181545327578E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999463783332	WITHOUT_CLASSIFICATION	5.362166678691814E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999965612892758	WITHOUT_CLASSIFICATION	3.438710724114141E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998767381105	WITHOUT_CLASSIFICATION	1.232618894983207E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999644313907	WITHOUT_CLASSIFICATION	3.556860925945703E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999872699517	WITHOUT_CLASSIFICATION	1.2730048309719816E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999991346829173	WITHOUT_CLASSIFICATION	8.653170826161516E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999153161238	WITHOUT_CLASSIFICATION	8.468387624730685E-8	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999994907966567	WITHOUT_CLASSIFICATION	5.092033432892E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998222887803	WITHOUT_CLASSIFICATION	1.7771121966091667E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999998618212576	WITHOUT_CLASSIFICATION	1.381787424469192E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998069244798	WITHOUT_CLASSIFICATION	1.9307552033632222E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999780726390426	WITHOUT_CLASSIFICATION	2.192736095748975E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999643466317	WITHOUT_CLASSIFICATION	3.565336825003612E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999915800855	WITHOUT_CLASSIFICATION	8.41991449079453E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999489636425	WITHOUT_CLASSIFICATION	5.1036357404584353E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999915800855	WITHOUT_CLASSIFICATION	8.41991449079453E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999812071623	WITHOUT_CLASSIFICATION	1.879283769495428E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999999980073339	WITHOUT_CLASSIFICATION	1.992666094068745E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999998452506214	WITHOUT_CLASSIFICATION	1.5474937864757487E-7	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999507782165	WITHOUT_CLASSIFICATION	4.9221783602045855E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999688648242	WITHOUT_CLASSIFICATION	3.113517570008609E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999903269012	WITHOUT_CLASSIFICATION	9.673098798332887E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997336721832	WITHOUT_CLASSIFICATION	2.6632781680371594E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999909289652293	WITHOUT_CLASSIFICATION	9.07103477071857E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999997721717966	WITHOUT_CLASSIFICATION	2.2782820335786379E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999967763213	WITHOUT_CLASSIFICATION	3.2236786538115206E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999998735380791	WITHOUT_CLASSIFICATION	1.2646192089370803E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999696041386	WITHOUT_CLASSIFICATION	3.0395861285767875E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998421358036	WITHOUT_CLASSIFICATION	1.5786419637918628E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999897562805009	WITHOUT_CLASSIFICATION	1.0243719499028507E-5	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999815793167	WITHOUT_CLASSIFICATION	1.8420683309940949E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999957716663	WITHOUT_CLASSIFICATION	4.228333698010485E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999933274795	WITHOUT_CLASSIFICATION	6.672520518148775E-9	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999577636903	WITHOUT_CLASSIFICATION	4.2236309656929734E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999758016993	WITHOUT_CLASSIFICATION	2.4198300728997238E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999975044862741	WITHOUT_CLASSIFICATION	2.495513725935904E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997326737591	WITHOUT_CLASSIFICATION	2.673262408683193E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999981595265874	WITHOUT_CLASSIFICATION	1.8404734126409061E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998692795536305	WITHOUT_CLASSIFICATION	1.307204463695843E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999219544785	WITHOUT_CLASSIFICATION	7.804552147973654E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999980279525653	WITHOUT_CLASSIFICATION	1.9720474347742244E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999341220049741	WITHOUT_CLASSIFICATION	6.587799502582323E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999938477449127	WITHOUT_CLASSIFICATION	6.152255087268851E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999980299235286	WITHOUT_CLASSIFICATION	1.9700764712972136E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998367001021	WITHOUT_CLASSIFICATION	1.6329989799780297E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999968256543721	WITHOUT_CLASSIFICATION	3.1743456279968907E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999911458744299	WITHOUT_CLASSIFICATION	8.854125569931035E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999975201084039	WITHOUT_CLASSIFICATION	2.4798915961047972E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999693479854	WITHOUT_CLASSIFICATION	3.065201466747304E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999996124720005	WITHOUT_CLASSIFICATION	3.8752799950376006E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999992002947261	WITHOUT_CLASSIFICATION	7.997052738837875E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999891690541962	WITHOUT_CLASSIFICATION	1.0830945803836698E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999915178136983	WITHOUT_CLASSIFICATION	8.482186301682814E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998251359208	WITHOUT_CLASSIFICATION	1.7486407914393508E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999677700930292	WITHOUT_CLASSIFICATION	3.2229906970810486E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999993792434277	WITHOUT_CLASSIFICATION	6.207565723781229E-7	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999904205161232	WITHOUT_CLASSIFICATION	9.579483876815365E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999995644361526	WITHOUT_CLASSIFICATION	4.355638474182289E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998206326825421	WITHOUT_CLASSIFICATION	1.793673174579081E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999341220049741	WITHOUT_CLASSIFICATION	6.587799502582323E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999662108547327	WITHOUT_CLASSIFICATION	3.3789145267331114E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999452907379	WITHOUT_CLASSIFICATION	5.470926211395083E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999755385297198	WITHOUT_CLASSIFICATION	2.446147028023274E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999959148973825	WITHOUT_CLASSIFICATION	4.0851026174608475E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999994019127836	WITHOUT_CLASSIFICATION	5.980872164378885E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999997480705264	WITHOUT_CLASSIFICATION	2.5192947363125723E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999886157477	WITHOUT_CLASSIFICATION	1.1384252304706585E-8	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999946213251281	WITHOUT_CLASSIFICATION	5.378674871961698E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999992454145952	WITHOUT_CLASSIFICATION	7.545854048120362E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999758261643	WITHOUT_CLASSIFICATION	2.417383567462135E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999953847778362	WITHOUT_CLASSIFICATION	4.615222163781304E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996034590668	WITHOUT_CLASSIFICATION	3.9654093329696067E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999913345821718	WITHOUT_CLASSIFICATION	8.665417828264484E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999943979256583	WITHOUT_CLASSIFICATION	5.602074341766635E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999375991265	WITHOUT_CLASSIFICATION	6.24008734863433E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999933804053	WITHOUT_CLASSIFICATION	6.619594764106584E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999997924866988	WITHOUT_CLASSIFICATION	2.0751330121286483E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999990976860349	WITHOUT_CLASSIFICATION	9.023139650480112E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999853703707	WITHOUT_CLASSIFICATION	1.4629629319872267E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999662108547327	WITHOUT_CLASSIFICATION	3.3789145267331114E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999970738195423	WITHOUT_CLASSIFICATION	2.9261804577646583E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997217651482	WITHOUT_CLASSIFICATION	2.782348519088677E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999993697094368	WITHOUT_CLASSIFICATION	6.302905632425864E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999222389545	WITHOUT_CLASSIFICATION	7.776104550816746E-8	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999134760216	WITHOUT_CLASSIFICATION	8.65239783714241E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999974077897171	WITHOUT_CLASSIFICATION	2.59221028285859E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999974077897171	WITHOUT_CLASSIFICATION	2.59221028285859E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998128352195	WITHOUT_CLASSIFICATION	1.8716478040815687E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999974077897171	WITHOUT_CLASSIFICATION	2.59221028285859E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999974077897171	WITHOUT_CLASSIFICATION	2.59221028285859E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999978780838853	WITHOUT_CLASSIFICATION	2.1219161146602056E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999976794912969	WITHOUT_CLASSIFICATION	2.3205087031002544E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999988042732152	WITHOUT_CLASSIFICATION	1.1957267847607662E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999986684206438	WITHOUT_CLASSIFICATION	1.3315793562594353E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999800618486	WITHOUT_CLASSIFICATION	1.9938151309106425E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999992998424451	WITHOUT_CLASSIFICATION	7.001575549028507E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999975213245312	WITHOUT_CLASSIFICATION	2.4786754688609425E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999888426530835	WITHOUT_CLASSIFICATION	1.1157346916421534E-5	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999975854327865	WITHOUT_CLASSIFICATION	2.414567213492286E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999686994128097	WITHOUT_CLASSIFICATION	3.130058719029991E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999971060600522	WITHOUT_CLASSIFICATION	2.893939947848334E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999991868636109	WITHOUT_CLASSIFICATION	8.131363891160554E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999984292633288	WITHOUT_CLASSIFICATION	1.570736671224682E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999944908971031	WITHOUT_CLASSIFICATION	5.509102896878011E-6	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999992778607978	WITHOUT_CLASSIFICATION	7.221392022889772E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998464197158499	WITHOUT_CLASSIFICATION	1.5358028415004432E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997533231629	WITHOUT_CLASSIFICATION	2.466768370595185E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999990063622856	WITHOUT_CLASSIFICATION	9.936377143896416E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999599061443856	WITHOUT_CLASSIFICATION	4.0093855614555616E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999993026422661	WITHOUT_CLASSIFICATION	6.973577339057216E-6	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999990931092378	WITHOUT_CLASSIFICATION	9.068907621133951E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999996673997031	WITHOUT_CLASSIFICATION	3.326002968897262E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997533231629	WITHOUT_CLASSIFICATION	2.466768370595185E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999938477449127	WITHOUT_CLASSIFICATION	6.152255087268851E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999934973834316	WITHOUT_CLASSIFICATION	6.502616568434585E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998918360082	WITHOUT_CLASSIFICATION	1.0816399179800288E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999319120185	WITHOUT_CLASSIFICATION	6.80879815723119E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999944454209035	WITHOUT_CLASSIFICATION	5.554579096556423E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999578552501	WITHOUT_CLASSIFICATION	4.214474987228439E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999957980642519	WITHOUT_CLASSIFICATION	4.201935748029553E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999999332637732	WITHOUT_CLASSIFICATION	6.673622680227647E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999997233275554	WITHOUT_CLASSIFICATION	2.7667244458652317E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998484895363	WITHOUT_CLASSIFICATION	1.515104636414379E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.99999921429751	WITHOUT_CLASSIFICATION	7.857024899984469E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997141357564	WITHOUT_CLASSIFICATION	2.8586424363973093E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999629869269	WITHOUT_CLASSIFICATION	3.7013073092255943E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998998987355	WITHOUT_CLASSIFICATION	1.0010126451457979E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999962802606677	WITHOUT_CLASSIFICATION	3.7197393322416306E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999794657779	WITHOUT_CLASSIFICATION	2.05342220999453E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999994302338517	WITHOUT_CLASSIFICATION	5.697661483291897E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999998701180589	WITHOUT_CLASSIFICATION	1.298819411092246E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998122527626	WITHOUT_CLASSIFICATION	1.8774723749504354E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999981937715687	WITHOUT_CLASSIFICATION	1.8062284312871197E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999997843270118	WITHOUT_CLASSIFICATION	2.1567298820402686E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999948439218973	WITHOUT_CLASSIFICATION	5.156078102784124E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999914693074	WITHOUT_CLASSIFICATION	8.530692579624048E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999997233275554	WITHOUT_CLASSIFICATION	2.7667244458652317E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999985178760743	WITHOUT_CLASSIFICATION	1.482123925736421E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999991200163375	WITHOUT_CLASSIFICATION	8.799836624123208E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999995659881568	WITHOUT_CLASSIFICATION	4.3401184324853765E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999984408898903	WITHOUT_CLASSIFICATION	1.5591101097395897E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981690763003	WITHOUT_CLASSIFICATION	1.83092369973859E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999894920463038	WITHOUT_CLASSIFICATION	1.0507953696160926E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999960259443139	WITHOUT_CLASSIFICATION	3.974055686059509E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999998770255863	WITHOUT_CLASSIFICATION	1.2297441357612668E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999986195998284	WITHOUT_CLASSIFICATION	1.380400171651837E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999913358400034	WITHOUT_CLASSIFICATION	8.664159996630462E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998883734309	WITHOUT_CLASSIFICATION	1.1162656911096228E-7	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999171352716	WITHOUT_CLASSIFICATION	8.286472843531157E-8	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999981195954811	WITHOUT_CLASSIFICATION	1.8804045188466324E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999969935568636	WITHOUT_CLASSIFICATION	3.0064431364658752E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999839644460243	WITHOUT_CLASSIFICATION	1.6035553975736084E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994899461372	WITHOUT_CLASSIFICATION	5.100538628570002E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998883734309	WITHOUT_CLASSIFICATION	1.1162656911096228E-7	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999986049763475	WITHOUT_CLASSIFICATION	1.3950236525528074E-6	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999982332880507	WITHOUT_CLASSIFICATION	1.766711949275799E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999164662122	WITHOUT_CLASSIFICATION	8.353378780316694E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999973894461776	WITHOUT_CLASSIFICATION	2.610553822584685E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999998120079763	WITHOUT_CLASSIFICATION	1.87992023656072E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999839080359	WITHOUT_CLASSIFICATION	1.6091964095633022E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999798685308	WITHOUT_CLASSIFICATION	2.0131469075785918E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995426556575	WITHOUT_CLASSIFICATION	4.5734434256366667E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999137549861	WITHOUT_CLASSIFICATION	8.624501394695394E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993410734909	WITHOUT_CLASSIFICATION	6.589265091234651E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998909248762	WITHOUT_CLASSIFICATION	1.0907512378131551E-7	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996801536244	WITHOUT_CLASSIFICATION	3.1984637561348794E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999049648789	WITHOUT_CLASSIFICATION	9.503512114255402E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999049648789	WITHOUT_CLASSIFICATION	9.503512114255402E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999902500394656	WITHOUT_CLASSIFICATION	9.749960534373876E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999442233976	WITHOUT_CLASSIFICATION	5.577660238088444E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999997736016685	WITHOUT_CLASSIFICATION	2.2639833153811987E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997773097139	WITHOUT_CLASSIFICATION	2.2269028600712344E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999893557756553	WITHOUT_CLASSIFICATION	1.0644224344724237E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997181058546	WITHOUT_CLASSIFICATION	2.8189414529156673E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986543721404	WITHOUT_CLASSIFICATION	1.3456278595958807E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976594027993	WITHOUT_CLASSIFICATION	2.3405972007796897E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999989464709101	WITHOUT_CLASSIFICATION	1.0535290898144706E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991868357906	WITHOUT_CLASSIFICATION	8.13164209460586E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997181058546	WITHOUT_CLASSIFICATION	2.8189414529156673E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986543721404	WITHOUT_CLASSIFICATION	1.3456278595958807E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976594027993	WITHOUT_CLASSIFICATION	2.3405972007796897E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999988345760832	WITHOUT_CLASSIFICATION	1.1654239167888996E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999875955000677	WITHOUT_CLASSIFICATION	1.2404499932313709E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998933457128	WITHOUT_CLASSIFICATION	1.0665428717868601E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999989210185417	WITHOUT_CLASSIFICATION	1.078981458264029E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.99999983066692	WITHOUT_CLASSIFICATION	1.693330800051442E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999662676814889	WITHOUT_CLASSIFICATION	3.373231851105168E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999980508746242	WITHOUT_CLASSIFICATION	1.949125375784264E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999860934720551	WITHOUT_CLASSIFICATION	1.3906527944742762E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999227737693399	WITHOUT_CLASSIFICATION	7.722623066002696E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999993992689163	WITHOUT_CLASSIFICATION	6.007310837128763E-7	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999994218503294	WITHOUT_CLASSIFICATION	5.781496706245806E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998337056382057	WITHOUT_CLASSIFICATION	1.6629436179425663E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999767775209596	WITHOUT_CLASSIFICATION	2.3222479040476966E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999320379499	WITHOUT_CLASSIFICATION	6.79620501085005E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999982854372	WITHOUT_CLASSIFICATION	1.714562808567352E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999986086571474	WITHOUT_CLASSIFICATION	1.3913428526199361E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9977191328222764	WITHOUT_CLASSIFICATION	0.002280867177723534	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999782126123521	WITHOUT_CLASSIFICATION	2.178738764785656E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998205939669	WITHOUT_CLASSIFICATION	1.7940603310501806E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999993064776954	WITHOUT_CLASSIFICATION	6.935223046518912E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999997273988364	WITHOUT_CLASSIFICATION	2.726011636441652E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998337903642	WITHOUT_CLASSIFICATION	1.662096358749489E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999989372807757	WITHOUT_CLASSIFICATION	1.0627192242651743E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999897250876	WITHOUT_CLASSIFICATION	1.0274912414237527E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999593262077	WITHOUT_CLASSIFICATION	4.06737923460575E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999922150467802	WITHOUT_CLASSIFICATION	7.784953219810106E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974888807365	WITHOUT_CLASSIFICATION	2.5111192635691224E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949006073788	WITHOUT_CLASSIFICATION	5.099392621243395E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999997816542496	WITHOUT_CLASSIFICATION	2.1834575036052423E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967868547307	WITHOUT_CLASSIFICATION	3.213145269368115E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997397334601	WITHOUT_CLASSIFICATION	2.602665398896256E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999997096903577	WITHOUT_CLASSIFICATION	2.903096423128551E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999997096903577	WITHOUT_CLASSIFICATION	2.903096423128551E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999986809122526	WITHOUT_CLASSIFICATION	1.3190877473635897E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999959885674816	WITHOUT_CLASSIFICATION	4.011432518403974E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999999007338736	WITHOUT_CLASSIFICATION	9.926612645568957E-8	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998766424196156	WITHOUT_CLASSIFICATION	1.2335758038431503E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999993790476687	WITHOUT_CLASSIFICATION	6.209523313169977E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998587487995	WITHOUT_CLASSIFICATION	1.4125120051579924E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999638278485855	WITHOUT_CLASSIFICATION	3.617215141444352E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.999999851143208	WITHOUT_CLASSIFICATION	1.4885679190987705E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999997900645213	WITHOUT_CLASSIFICATION	2.0993547858825564E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996954769047	WITHOUT_CLASSIFICATION	3.045230953317541E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998269450663	WITHOUT_CLASSIFICATION	1.7305493373686086E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997702420972	WITHOUT_CLASSIFICATION	2.2975790280711382E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999587661283	WITHOUT_CLASSIFICATION	4.123387170220111E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996519494933	WITHOUT_CLASSIFICATION	3.480505067729903E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993348965087	WITHOUT_CLASSIFICATION	6.651034911813598E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996174586459	WITHOUT_CLASSIFICATION	3.8254135415439767E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998372233366	WITHOUT_CLASSIFICATION	1.6277666335228203E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998357273521	WITHOUT_CLASSIFICATION	1.6427264792125894E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992505935894	WITHOUT_CLASSIFICATION	7.494064105684782E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994078972286	WITHOUT_CLASSIFICATION	5.921027714038741E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999846666292	WITHOUT_CLASSIFICATION	1.5333370782670627E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999940305966869	WITHOUT_CLASSIFICATION	5.969403313041854E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999231682881385	WITHOUT_CLASSIFICATION	7.683171186151098E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999418147758	WITHOUT_CLASSIFICATION	5.818522425268369E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999600761993	WITHOUT_CLASSIFICATION	3.9923800708733285E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999247901283	WITHOUT_CLASSIFICATION	7.520987173965108E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999970692573286	WITHOUT_CLASSIFICATION	2.930742671413911E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999605201731	WITHOUT_CLASSIFICATION	3.94798267591883E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999231682881385	WITHOUT_CLASSIFICATION	7.683171186151098E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999231682881385	WITHOUT_CLASSIFICATION	7.683171186151098E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999475697045155	WITHOUT_CLASSIFICATION	5.24302954844522E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999587103451	WITHOUT_CLASSIFICATION	4.1289654833101555E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999789754806028	WITHOUT_CLASSIFICATION	2.1024519397259283E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999989529999558	WITHOUT_CLASSIFICATION	1.0470000442075468E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995580005758	WITHOUT_CLASSIFICATION	4.4199942420991175E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999993064776954	WITHOUT_CLASSIFICATION	6.935223046518912E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999993649275296	WITHOUT_CLASSIFICATION	6.350724703544319E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998306819781	WITHOUT_CLASSIFICATION	1.6931802193429868E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999996496902064	WITHOUT_CLASSIFICATION	3.503097937036018E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984401895334	WITHOUT_CLASSIFICATION	1.5598104665104576E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999998827599724	WITHOUT_CLASSIFICATION	1.1724002761288906E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981448020369	WITHOUT_CLASSIFICATION	1.8551979631048914E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997613314504	WITHOUT_CLASSIFICATION	2.386685495231558E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997613314504	WITHOUT_CLASSIFICATION	2.386685495231558E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996135651015	WITHOUT_CLASSIFICATION	3.864348984244184E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996135651015	WITHOUT_CLASSIFICATION	3.864348984244184E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989788781357	WITHOUT_CLASSIFICATION	1.0211218643035624E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995686096371	WITHOUT_CLASSIFICATION	4.3139036280944754E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999947339157397	WITHOUT_CLASSIFICATION	5.2660842603053684E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915482714096	WITHOUT_CLASSIFICATION	8.451728590407798E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999903009184	WITHOUT_CLASSIFICATION	9.699081637280803E-9	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998391121806	WITHOUT_CLASSIFICATION	1.6088781936772536E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987392039765	WITHOUT_CLASSIFICATION	1.2607960233704021E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998928116586	WITHOUT_CLASSIFICATION	1.0718834151763805E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998111570567	WITHOUT_CLASSIFICATION	1.8884294320172142E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999519171401454	WITHOUT_CLASSIFICATION	4.808285985465965E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999992634887301	WITHOUT_CLASSIFICATION	7.365112697489147E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998126917158	WITHOUT_CLASSIFICATION	1.873082842221349E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999996008574921	WITHOUT_CLASSIFICATION	3.991425078506751E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999026295896	WITHOUT_CLASSIFICATION	9.737041040072299E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999986984849023	WITHOUT_CLASSIFICATION	1.3015150976992636E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999999781329188	WITHOUT_CLASSIFICATION	2.1867081194860857E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.999999781329188	WITHOUT_CLASSIFICATION	2.1867081194860857E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999992602778934	WITHOUT_CLASSIFICATION	7.397221066179279E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999987358281884	WITHOUT_CLASSIFICATION	1.2641718115610046E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999061627736	WITHOUT_CLASSIFICATION	9.383722647569298E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999958509660689	WITHOUT_CLASSIFICATION	4.149033931076375E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997767754675	WITHOUT_CLASSIFICATION	2.2322453250384832E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941635774986	WITHOUT_CLASSIFICATION	5.836422501385199E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999817564902	WITHOUT_CLASSIFICATION	1.8243509898093007E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998385808846	WITHOUT_CLASSIFICATION	1.614191154541615E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999950035022	WITHOUT_CLASSIFICATION	4.9964977906954295E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999617013575	WITHOUT_CLASSIFICATION	3.829864247587312E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999984434219	WITHOUT_CLASSIFICATION	1.5565781697444226E-9	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999395683868	WITHOUT_CLASSIFICATION	6.043161318319739E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997659387051	WITHOUT_CLASSIFICATION	2.3406129480205375E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998993101857	WITHOUT_CLASSIFICATION	1.006898142761546E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999995927225407	WITHOUT_CLASSIFICATION	4.072774592791691E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999977154142005	WITHOUT_CLASSIFICATION	2.2845857994747924E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997219721479	WITHOUT_CLASSIFICATION	2.7802785207734687E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999993516502002	WITHOUT_CLASSIFICATION	6.483497997799898E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999992559957135	WITHOUT_CLASSIFICATION	7.440042864724801E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999887683754	WITHOUT_CLASSIFICATION	1.1231624505684662E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999712771789	WITHOUT_CLASSIFICATION	2.8722821055624046E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999991633944417	WITHOUT_CLASSIFICATION	8.366055583242742E-7	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998918491982	WITHOUT_CLASSIFICATION	1.0815080178206837E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990462592614	WITHOUT_CLASSIFICATION	9.537407385849023E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998700390541	WITHOUT_CLASSIFICATION	1.2996094597666503E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998799631398	WITHOUT_CLASSIFICATION	1.2003686018417207E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999990677307561	WITHOUT_CLASSIFICATION	9.322692439507726E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999974126710768	WITHOUT_CLASSIFICATION	2.5873289232737015E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997554698137	WITHOUT_CLASSIFICATION	2.445301863526323E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999964359657508	WITHOUT_CLASSIFICATION	3.564034249061934E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999640207315	WITHOUT_CLASSIFICATION	3.597926841772484E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996464043318	WITHOUT_CLASSIFICATION	3.5359566817836957E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999964090369163	WITHOUT_CLASSIFICATION	3.590963083612779E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999404155543	WITHOUT_CLASSIFICATION	5.958444574466436E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999594024595869	WITHOUT_CLASSIFICATION	4.059754041305281E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.99999928609452	WITHOUT_CLASSIFICATION	7.139054799175333E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999985249031	WITHOUT_CLASSIFICATION	1.475096827354472E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999998978392847	WITHOUT_CLASSIFICATION	1.0216071533905028E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999984815381	WITHOUT_CLASSIFICATION	1.5184619030026637E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999996203399045	WITHOUT_CLASSIFICATION	3.7966009550866343E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999781704694	WITHOUT_CLASSIFICATION	2.182953059025923E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999713923285	WITHOUT_CLASSIFICATION	2.8607671442661124E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999983710051117	WITHOUT_CLASSIFICATION	1.6289948882866797E-6	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999686586306	WITHOUT_CLASSIFICATION	3.134136940170456E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999999031618046	WITHOUT_CLASSIFICATION	9.68381953946081E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999985920940717	WITHOUT_CLASSIFICATION	1.407905928264286E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999985578048567	WITHOUT_CLASSIFICATION	1.4421951433397252E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999813044935835	WITHOUT_CLASSIFICATION	1.8695506416562588E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999997770616322	WITHOUT_CLASSIFICATION	2.2293836773652476E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9983865340397498	WITHOUT_CLASSIFICATION	0.0016134659602501532	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999997973816618	WITHOUT_CLASSIFICATION	2.0261833823445107E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999110429058496	WITHOUT_CLASSIFICATION	8.895709415037812E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999669467846	WITHOUT_CLASSIFICATION	3.305321540477389E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999814973276369	WITHOUT_CLASSIFICATION	1.850267236320368E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999983880191503	WITHOUT_CLASSIFICATION	1.61198084962689E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999997748059022	WITHOUT_CLASSIFICATION	2.2519409770922705E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9988781370026841	WITHOUT_CLASSIFICATION	0.0011218629973158848	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999976282871235	WITHOUT_CLASSIFICATION	2.3717128766283394E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999997775063284	WITHOUT_CLASSIFICATION	2.2249367149955862E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998830198444469	WITHOUT_CLASSIFICATION	1.1698015555310795E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999786376559	WITHOUT_CLASSIFICATION	2.1362344030558378E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998394445926	WITHOUT_CLASSIFICATION	1.6055540736008164E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999988525190179	WITHOUT_CLASSIFICATION	1.147480982049314E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999986716672639	WITHOUT_CLASSIFICATION	1.3283327360275381E-6	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999944834141	WITHOUT_CLASSIFICATION	5.516585896545095E-8	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999953826514	WITHOUT_CLASSIFICATION	4.617348649416249E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999931699715	WITHOUT_CLASSIFICATION	6.830028521611107E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998061031418	WITHOUT_CLASSIFICATION	1.9389685833784517E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999766692377369	WITHOUT_CLASSIFICATION	2.3330762263122775E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999766692377369	WITHOUT_CLASSIFICATION	2.3330762263122775E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999986270243415	WITHOUT_CLASSIFICATION	1.372975658483614E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999982294299001	WITHOUT_CLASSIFICATION	1.770570099879739E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999316980591	WITHOUT_CLASSIFICATION	6.830194093473965E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999994658568286	WITHOUT_CLASSIFICATION	5.341431713344765E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999870462111	WITHOUT_CLASSIFICATION	1.2953789007563897E-8	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999963396904813	WITHOUT_CLASSIFICATION	3.6603095186274836E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999998587176318	WITHOUT_CLASSIFICATION	1.412823682930806E-7	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999380741806	WITHOUT_CLASSIFICATION	6.192581936056585E-8	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999979214946512	WITHOUT_CLASSIFICATION	2.07850534874802E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999992029950564	WITHOUT_CLASSIFICATION	7.970049435335623E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.99999996792112	WITHOUT_CLASSIFICATION	3.207887996967093E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999696669807	WITHOUT_CLASSIFICATION	3.03330192826381E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999984350779058	WITHOUT_CLASSIFICATION	1.564922094258323E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999876226334	WITHOUT_CLASSIFICATION	1.2377366490634783E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999991072511795	WITHOUT_CLASSIFICATION	8.927488206237248E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999963011121731	WITHOUT_CLASSIFICATION	3.6988878269839422E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999994080758442	WITHOUT_CLASSIFICATION	5.919241557243389E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999997773575358	WITHOUT_CLASSIFICATION	2.2264246419758564E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999995329366399	WITHOUT_CLASSIFICATION	4.670633600201092E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999980725539985	WITHOUT_CLASSIFICATION	1.927446001366001E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998078088547	WITHOUT_CLASSIFICATION	1.9219114521263674E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999994899464205	WITHOUT_CLASSIFICATION	5.100535794721898E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999821840247946	WITHOUT_CLASSIFICATION	1.7815975205456957E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999955349369358	WITHOUT_CLASSIFICATION	4.465063064216795E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999548141356	WITHOUT_CLASSIFICATION	4.5185864404511226E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999985012637035	WITHOUT_CLASSIFICATION	1.4987362964263512E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999998177274598	WITHOUT_CLASSIFICATION	1.822725401442432E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999970944084022	WITHOUT_CLASSIFICATION	2.905591597701622E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999989977593551	WITHOUT_CLASSIFICATION	1.0022406449622097E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999626616346	WITHOUT_CLASSIFICATION	3.733836546600755E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999993842595633	WITHOUT_CLASSIFICATION	6.157404367724891E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999172095412	WITHOUT_CLASSIFICATION	8.279045881702124E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997409266351	WITHOUT_CLASSIFICATION	2.590733648034435E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.999999610302365	WITHOUT_CLASSIFICATION	3.8969763511712253E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999993034511848	WITHOUT_CLASSIFICATION	6.965488151761986E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999993034511848	WITHOUT_CLASSIFICATION	6.965488151761986E-7	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998026331338	WITHOUT_CLASSIFICATION	1.973668662610915E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999921053557508	WITHOUT_CLASSIFICATION	7.894644249304322E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997321359562	WITHOUT_CLASSIFICATION	2.678640438402833E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999991657301395	WITHOUT_CLASSIFICATION	8.34269860506959E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998461299126	WITHOUT_CLASSIFICATION	1.5387008747988047E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999978580667544	WITHOUT_CLASSIFICATION	2.141933245602082E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.99999964926178	WITHOUT_CLASSIFICATION	3.5073822007298997E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999948462037	WITHOUT_CLASSIFICATION	5.153796188097373E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998457855074397	WITHOUT_CLASSIFICATION	1.5421449256029126E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999250381281	WITHOUT_CLASSIFICATION	7.496187190794169E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999676216671	WITHOUT_CLASSIFICATION	3.237833298493147E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999987808412721	WITHOUT_CLASSIFICATION	1.219158727773237E-6	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999996663611973	WITHOUT_CLASSIFICATION	3.3363880270479406E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998592153243	WITHOUT_CLASSIFICATION	1.40784675712649E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999991229926759	WITHOUT_CLASSIFICATION	8.770073241364887E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999992404794026	WITHOUT_CLASSIFICATION	7.595205974060745E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999992404794026	WITHOUT_CLASSIFICATION	7.595205974060745E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999964512537	WITHOUT_CLASSIFICATION	3.5487462627552696E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996768097658	WITHOUT_CLASSIFICATION	3.2319023429020797E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999991286401287	WITHOUT_CLASSIFICATION	8.713598713198705E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999333643993	WITHOUT_CLASSIFICATION	6.66356006580778E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999622630469213	WITHOUT_CLASSIFICATION	3.773695307873175E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999264517556	WITHOUT_CLASSIFICATION	7.354824430528171E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999991318547496	WITHOUT_CLASSIFICATION	8.681452504430385E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999991318547496	WITHOUT_CLASSIFICATION	8.681452504430385E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999999568051185	WITHOUT_CLASSIFICATION	4.3194881511116745E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999950005033	WITHOUT_CLASSIFICATION	4.999496631145974E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999971861902057	WITHOUT_CLASSIFICATION	2.8138097942794152E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999973637831	WITHOUT_CLASSIFICATION	2.6362169567199236E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999994370759919	WITHOUT_CLASSIFICATION	5.629240079759556E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999813121996732	WITHOUT_CLASSIFICATION	1.868780032680531E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999872752304	WITHOUT_CLASSIFICATION	1.2724769464855466E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999974254084	WITHOUT_CLASSIFICATION	2.5745916037594698E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999270384514	WITHOUT_CLASSIFICATION	7.296154857454306E-8	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999897005507427	WITHOUT_CLASSIFICATION	1.02994492573176E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999993511768206	WITHOUT_CLASSIFICATION	6.488231793617828E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999928056421633	WITHOUT_CLASSIFICATION	7.1943578367490025E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999998108199274	WITHOUT_CLASSIFICATION	1.8918007259507937E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999998223343766	WITHOUT_CLASSIFICATION	1.7766562339726035E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999909061886543	WITHOUT_CLASSIFICATION	9.093811345766136E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998137817443	WITHOUT_CLASSIFICATION	1.8621825567522672E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999993747492788	WITHOUT_CLASSIFICATION	6.252507211023507E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999983715089099	WITHOUT_CLASSIFICATION	1.6284910900715277E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999983878000852	WITHOUT_CLASSIFICATION	1.612199914721321E-6	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999999693637589	WITHOUT_CLASSIFICATION	3.063624110159508E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999993681543224	WITHOUT_CLASSIFICATION	6.318456775501067E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999992366834427	WITHOUT_CLASSIFICATION	7.633165572258408E-7	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999754214314639	WITHOUT_CLASSIFICATION	2.4578568536072005E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997462708572	WITHOUT_CLASSIFICATION	2.537291427624647E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997225742867	WITHOUT_CLASSIFICATION	2.774257133629231E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999997376984111	WITHOUT_CLASSIFICATION	2.623015888498388E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999788658111932	WITHOUT_CLASSIFICATION	2.1134188806779105E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998730232784	WITHOUT_CLASSIFICATION	1.269767215834479E-7	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999957130294	WITHOUT_CLASSIFICATION	4.286970544660973E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999766838057	WITHOUT_CLASSIFICATION	2.331619433669356E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999872541208253	WITHOUT_CLASSIFICATION	1.2745879174753416E-5	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999989152845226	WITHOUT_CLASSIFICATION	1.0847154774536705E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999999656933856	WITHOUT_CLASSIFICATION	3.430661439917981E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999994597446943	WITHOUT_CLASSIFICATION	5.402553057102532E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999952480468219	WITHOUT_CLASSIFICATION	4.751953178120445E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999944348084047	WITHOUT_CLASSIFICATION	5.565191595410255E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.999998705675433	WITHOUT_CLASSIFICATION	1.2943245669417444E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999998720961177	WITHOUT_CLASSIFICATION	1.2790388228707363E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999993715036816	WITHOUT_CLASSIFICATION	6.284963185453031E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999246549523	WITHOUT_CLASSIFICATION	7.534504769828871E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998046295109	WITHOUT_CLASSIFICATION	1.953704892583714E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999994082833171	WITHOUT_CLASSIFICATION	5.91716682880615E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999981798197265	WITHOUT_CLASSIFICATION	1.8201802734597414E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998035295061	WITHOUT_CLASSIFICATION	1.9647049398423204E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999835796818	WITHOUT_CLASSIFICATION	1.6420318188166397E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999992839856242	WITHOUT_CLASSIFICATION	7.160143758056009E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999993715036816	WITHOUT_CLASSIFICATION	6.284963185453031E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999246549523	WITHOUT_CLASSIFICATION	7.534504769828871E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999997832824348	WITHOUT_CLASSIFICATION	2.1671756521121505E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999981470228266	WITHOUT_CLASSIFICATION	1.852977173469829E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999999861029484	WITHOUT_CLASSIFICATION	1.3897051588979416E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999993516575071	WITHOUT_CLASSIFICATION	6.483424928867246E-7	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999878794857	WITHOUT_CLASSIFICATION	1.2120514129458867E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999992940408392	WITHOUT_CLASSIFICATION	7.059591608406422E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999886630234137	WITHOUT_CLASSIFICATION	1.1336976586314332E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.999994738559503	WITHOUT_CLASSIFICATION	5.261440496948043E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999522101334	WITHOUT_CLASSIFICATION	4.778986663733769E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999912459821401	WITHOUT_CLASSIFICATION	8.754017859860903E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999996548965123	WITHOUT_CLASSIFICATION	3.4510348774724784E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999912459821401	WITHOUT_CLASSIFICATION	8.754017859860903E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999933023247197	WITHOUT_CLASSIFICATION	6.6976752802517504E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999962918093033	WITHOUT_CLASSIFICATION	3.708190696672753E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999887205826449	WITHOUT_CLASSIFICATION	1.1279417355062333E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978030448203	WITHOUT_CLASSIFICATION	2.1969551797231345E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999989718141481	WITHOUT_CLASSIFICATION	1.0281858519964163E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.999835881397729	WITHOUT_CLASSIFICATION	1.6411860227092984E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.999835881397729	WITHOUT_CLASSIFICATION	1.6411860227092984E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999954394693216	WITHOUT_CLASSIFICATION	4.56053067839092E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999993885530334	WITHOUT_CLASSIFICATION	6.114469667425694E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999986601143136	WITHOUT_CLASSIFICATION	1.3398856863332383E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999973805638748	WITHOUT_CLASSIFICATION	2.619436125116833E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999984465075353	WITHOUT_CLASSIFICATION	1.5534924647020489E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999695995435154	WITHOUT_CLASSIFICATION	3.0400456484607323E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999963708875503	WITHOUT_CLASSIFICATION	3.6291124497161772E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994468094272	WITHOUT_CLASSIFICATION	5.531905727683227E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999949592121979	WITHOUT_CLASSIFICATION	5.04078780213538E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999852742754097	WITHOUT_CLASSIFICATION	1.4725724590236252E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999943425659406	WITHOUT_CLASSIFICATION	5.6574340594592446E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999985129351312	WITHOUT_CLASSIFICATION	1.4870648687930534E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999478150982319	WITHOUT_CLASSIFICATION	5.218490176807999E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.99999955159373	WITHOUT_CLASSIFICATION	4.4840626998037615E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999993771909145	WITHOUT_CLASSIFICATION	6.228090854916141E-7	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999978917244	WITHOUT_CLASSIFICATION	2.108275603638215E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998666764861	WITHOUT_CLASSIFICATION	1.3332351390891822E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999404635767	WITHOUT_CLASSIFICATION	5.9536423340691604E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999992305759124	WITHOUT_CLASSIFICATION	7.694240876241465E-7	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998034342054677	WITHOUT_CLASSIFICATION	1.9656579453225292E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999986563444	WITHOUT_CLASSIFICATION	1.34365560504996E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.99999688223406	WITHOUT_CLASSIFICATION	3.1177659399544963E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998948310675	WITHOUT_CLASSIFICATION	1.0516893253929026E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999992562024266	WITHOUT_CLASSIFICATION	7.437975733983395E-7	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999995324023994	WITHOUT_CLASSIFICATION	4.675976005884104E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999799678272852	WITHOUT_CLASSIFICATION	2.003217271488961E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999999987640464	WITHOUT_CLASSIFICATION	1.2359536007486637E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999966652001262	WITHOUT_CLASSIFICATION	3.334799873830267E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996517328403	WITHOUT_CLASSIFICATION	3.482671596599312E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999990635284409	WITHOUT_CLASSIFICATION	9.364715591287686E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999749604062338	WITHOUT_CLASSIFICATION	2.503959376616206E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999913595529535	WITHOUT_CLASSIFICATION	8.640447046584606E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999963708875503	WITHOUT_CLASSIFICATION	3.6291124497161772E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999999941715512	WITHOUT_CLASSIFICATION	5.828448811658843E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999709404152719	WITHOUT_CLASSIFICATION	2.905958472806231E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9968376621144075	WITHOUT_CLASSIFICATION	0.003162337885592522	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999156842120113	WITHOUT_CLASSIFICATION	8.431578798875175E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999997748205275	WITHOUT_CLASSIFICATION	2.2517947251164837E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999960219266996	WITHOUT_CLASSIFICATION	3.978073300501022E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999973805638748	WITHOUT_CLASSIFICATION	2.619436125116833E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999973805638748	WITHOUT_CLASSIFICATION	2.619436125116833E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999992198868601	WITHOUT_CLASSIFICATION	7.801131397827511E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999904975496972	WITHOUT_CLASSIFICATION	9.502450302907826E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999986136261335	WITHOUT_CLASSIFICATION	1.3863738664367052E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996814687422	WITHOUT_CLASSIFICATION	3.185312578774823E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999996359434814	WITHOUT_CLASSIFICATION	3.6405651861349025E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998042406921	WITHOUT_CLASSIFICATION	1.9575930798119635E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999996425457435	WITHOUT_CLASSIFICATION	3.574542565503361E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999999979994877	WITHOUT_CLASSIFICATION	2.0005122942165896E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999998310472428	WITHOUT_CLASSIFICATION	1.6895275729378058E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999242535252	WITHOUT_CLASSIFICATION	7.574647471083763E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999962860981692	WITHOUT_CLASSIFICATION	3.7139018308769766E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.99988414780891	WITHOUT_CLASSIFICATION	1.1585219109005711E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999941807355565	WITHOUT_CLASSIFICATION	5.819264443637816E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999242535252	WITHOUT_CLASSIFICATION	7.574647471083763E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999993401512287	WITHOUT_CLASSIFICATION	6.598487712638917E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999997538198794	WITHOUT_CLASSIFICATION	2.461801205991038E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999993218998002	WITHOUT_CLASSIFICATION	6.781001997184043E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9981881667554187	WITHOUT_CLASSIFICATION	0.0018118332445813492	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.99988414780891	WITHOUT_CLASSIFICATION	1.1585219109005711E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999971248858431	WITHOUT_CLASSIFICATION	2.8751141568525407E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999779029973	WITHOUT_CLASSIFICATION	2.2097002730179802E-8	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999715292509	WITHOUT_CLASSIFICATION	2.8470749075858563E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999813834476	WITHOUT_CLASSIFICATION	1.861655240000117E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999374159267086	WITHOUT_CLASSIFICATION	6.258407329135716E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991659657543	WITHOUT_CLASSIFICATION	8.340342456611988E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999998902253524	WITHOUT_CLASSIFICATION	1.0977464763778086E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999983299526405	WITHOUT_CLASSIFICATION	1.6700473595284485E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999991100364574	WITHOUT_CLASSIFICATION	8.899635426840673E-7	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999995512599433	WITHOUT_CLASSIFICATION	4.4874005663194706E-7	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999746325936	WITHOUT_CLASSIFICATION	2.5367406420272548E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999669390919	WITHOUT_CLASSIFICATION	3.306090800804538E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999242535252	WITHOUT_CLASSIFICATION	7.574647471083763E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999971248858431	WITHOUT_CLASSIFICATION	2.8751141568525407E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999715292509	WITHOUT_CLASSIFICATION	2.8470749075858563E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999994468873352	WITHOUT_CLASSIFICATION	5.531126648444423E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999956518339842	WITHOUT_CLASSIFICATION	4.348166015874088E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999998610828124	WITHOUT_CLASSIFICATION	1.389171875785496E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.99988414780891	WITHOUT_CLASSIFICATION	1.1585219109005711E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999899913001867	WITHOUT_CLASSIFICATION	1.0008699813348964E-5	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999996973225859	WITHOUT_CLASSIFICATION	3.026774140920564E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999944631140144	WITHOUT_CLASSIFICATION	5.53688598552189E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951626616872	WITHOUT_CLASSIFICATION	4.837338312809721E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999983299526405	WITHOUT_CLASSIFICATION	1.6700473595284485E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999993401512287	WITHOUT_CLASSIFICATION	6.598487712638917E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999955007558446	WITHOUT_CLASSIFICATION	4.4992441553514E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999963466708789	WITHOUT_CLASSIFICATION	3.6533291210419454E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999965677160234	WITHOUT_CLASSIFICATION	3.4322839765674223E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999954425743213	WITHOUT_CLASSIFICATION	4.557425678643309E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999947609235622	WITHOUT_CLASSIFICATION	5.239076437793855E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999946801110519	WITHOUT_CLASSIFICATION	5.319888948198699E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999953098187401	WITHOUT_CLASSIFICATION	4.690181259898962E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978030448203	WITHOUT_CLASSIFICATION	2.1969551797231345E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999587398041	WITHOUT_CLASSIFICATION	4.126019588427419E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998075893846	WITHOUT_CLASSIFICATION	1.924106154608539E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999829433832715	WITHOUT_CLASSIFICATION	1.7056616728499026E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999960975698764	WITHOUT_CLASSIFICATION	3.902430123527475E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995352629949	WITHOUT_CLASSIFICATION	4.647370050806738E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.99999998563842	WITHOUT_CLASSIFICATION	1.4361580122842518E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.999999368625343	WITHOUT_CLASSIFICATION	6.313746570457264E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999402821176	WITHOUT_CLASSIFICATION	5.971788241933306E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951626616872	WITHOUT_CLASSIFICATION	4.837338312809721E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999949009888239	WITHOUT_CLASSIFICATION	5.099011176106973E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999943964144795	WITHOUT_CLASSIFICATION	5.603585520500215E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999848166273494	WITHOUT_CLASSIFICATION	1.5183372650733214E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999996725844945	WITHOUT_CLASSIFICATION	3.274155054892014E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999941436587528	WITHOUT_CLASSIFICATION	5.8563412472089905E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999820023382	WITHOUT_CLASSIFICATION	1.7997661804984264E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999998537292681	WITHOUT_CLASSIFICATION	1.4627073188243827E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999890719739682	WITHOUT_CLASSIFICATION	1.092802603174739E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999997579873416	WITHOUT_CLASSIFICATION	2.4201265830849913E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998782957760551	WITHOUT_CLASSIFICATION	1.2170422394483808E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999961552933908	WITHOUT_CLASSIFICATION	3.844706609230206E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999926822019742	WITHOUT_CLASSIFICATION	7.31779802575951E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999972804922255	WITHOUT_CLASSIFICATION	2.71950777453948E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999986641586202	WITHOUT_CLASSIFICATION	1.335841379786875E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998628611665	WITHOUT_CLASSIFICATION	1.371388335334273E-7	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999996356294459	WITHOUT_CLASSIFICATION	3.6437055407151803E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999736191671	WITHOUT_CLASSIFICATION	2.6380832902986947E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999701857513	WITHOUT_CLASSIFICATION	2.9814248641460563E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999989004505551	WITHOUT_CLASSIFICATION	1.0995494449795208E-6	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999997641781771	WITHOUT_CLASSIFICATION	2.358218228983813E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999975986415062	WITHOUT_CLASSIFICATION	2.401358493918357E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999999691260582	WITHOUT_CLASSIFICATION	3.0873941793004964E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999995730847644	WITHOUT_CLASSIFICATION	4.269152356175465E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999616326425	WITHOUT_CLASSIFICATION	3.836735748764123E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999023601693	WITHOUT_CLASSIFICATION	9.763983061344826E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997957438226311	WITHOUT_CLASSIFICATION	2.0425617736888644E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999949930941202	WITHOUT_CLASSIFICATION	5.006905879784403E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999875337387684	WITHOUT_CLASSIFICATION	1.2466261231617376E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996299536764	WITHOUT_CLASSIFICATION	3.700463236383642E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9998218755868995	WITHOUT_CLASSIFICATION	1.7812441310047832E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999258010684	WITHOUT_CLASSIFICATION	7.419893155471145E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999951205255302	WITHOUT_CLASSIFICATION	4.87947446979571E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998890467211	WITHOUT_CLASSIFICATION	1.1095327902047736E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999397609483754	WITHOUT_CLASSIFICATION	6.023905162444953E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999992836339868	WITHOUT_CLASSIFICATION	7.163660132589639E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999997462421767	WITHOUT_CLASSIFICATION	2.5375782335826456E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998929939071	WITHOUT_CLASSIFICATION	1.0700609276828037E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997691640216	WITHOUT_CLASSIFICATION	2.3083597840281874E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999997462421767	WITHOUT_CLASSIFICATION	2.5375782335826456E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999992836339868	WITHOUT_CLASSIFICATION	7.163660132589639E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998929939071	WITHOUT_CLASSIFICATION	1.0700609276828037E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999996180563723	WITHOUT_CLASSIFICATION	3.8194362782653975E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996738479858	WITHOUT_CLASSIFICATION	3.2615201413553977E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999995831109025	WITHOUT_CLASSIFICATION	4.1688909742311893E-7	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999994537060475	WITHOUT_CLASSIFICATION	5.462939524826878E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999845632154	WITHOUT_CLASSIFICATION	1.5436784602872625E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999242371967927	WITHOUT_CLASSIFICATION	7.576280320731337E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999954369266746	WITHOUT_CLASSIFICATION	4.563073325335541E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999952137284849	WITHOUT_CLASSIFICATION	4.78627151513685E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999998859006547	WITHOUT_CLASSIFICATION	1.1409934523712028E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999989455011024	WITHOUT_CLASSIFICATION	1.054498897688533E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999993674983462	WITHOUT_CLASSIFICATION	6.325016538846497E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999992377643881	WITHOUT_CLASSIFICATION	7.622356119824733E-7	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998359806863	WITHOUT_CLASSIFICATION	1.6401931369796026E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999950390882515	WITHOUT_CLASSIFICATION	4.960911748467118E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996194644587	WITHOUT_CLASSIFICATION	3.805355413439857E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999597822172	WITHOUT_CLASSIFICATION	4.021778277571624E-8	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998852221746	WITHOUT_CLASSIFICATION	1.147778254157389E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999136278305	WITHOUT_CLASSIFICATION	8.637216954713333E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997936324713	WITHOUT_CLASSIFICATION	2.0636752867388948E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999968876782701	WITHOUT_CLASSIFICATION	3.1123217299274937E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999998544024405	WITHOUT_CLASSIFICATION	1.4559755949951122E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999921052007	WITHOUT_CLASSIFICATION	7.894799153512752E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999983249894366	WITHOUT_CLASSIFICATION	1.6750105633898477E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999257767596	WITHOUT_CLASSIFICATION	7.422324046348924E-8	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999926252370452	WITHOUT_CLASSIFICATION	7.374762954695439E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999926252370452	WITHOUT_CLASSIFICATION	7.374762954695439E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999818435016	WITHOUT_CLASSIFICATION	1.8156498458304792E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999818435016	WITHOUT_CLASSIFICATION	1.8156498458304792E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999999238438948	WITHOUT_CLASSIFICATION	7.615610519751958E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998852221746	WITHOUT_CLASSIFICATION	1.147778254157389E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999993624868766	WITHOUT_CLASSIFICATION	6.375131234229294E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999947418301	WITHOUT_CLASSIFICATION	5.258170010052793E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992767833896	WITHOUT_CLASSIFICATION	7.232166104559846E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992767833896	WITHOUT_CLASSIFICATION	7.232166104559846E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998168285585	WITHOUT_CLASSIFICATION	1.8317144151352868E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999994751413454	WITHOUT_CLASSIFICATION	5.248586546087428E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999673750762	WITHOUT_CLASSIFICATION	3.262492383412742E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999972228362726	WITHOUT_CLASSIFICATION	2.7771637274967146E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999993578988269	WITHOUT_CLASSIFICATION	6.421011732159281E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998947935926	WITHOUT_CLASSIFICATION	1.0520640734839287E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999896364322428	WITHOUT_CLASSIFICATION	1.0363567757278165E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999984918284162	WITHOUT_CLASSIFICATION	1.508171583856661E-6	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999989811068921	WITHOUT_CLASSIFICATION	1.0188931078851096E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998903488629	WITHOUT_CLASSIFICATION	1.0965113709431872E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999998457771624	WITHOUT_CLASSIFICATION	1.5422283758496872E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999987793439874	WITHOUT_CLASSIFICATION	1.2206560126347573E-6	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999999304812042	WITHOUT_CLASSIFICATION	6.951879578878101E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999983862845352	WITHOUT_CLASSIFICATION	1.6137154648124527E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999972589028965	WITHOUT_CLASSIFICATION	2.7410971034356893E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999993423514598	WITHOUT_CLASSIFICATION	6.576485401046183E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406475876	WITHOUT_CLASSIFICATION	1.6593524123808954E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999603847232	WITHOUT_CLASSIFICATION	3.9615276800636224E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999919861431	WITHOUT_CLASSIFICATION	8.013856914761747E-9	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999988515886	WITHOUT_CLASSIFICATION	1.148411397575511E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999964526058	WITHOUT_CLASSIFICATION	3.547394113753358E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999982637102455	WITHOUT_CLASSIFICATION	1.7362897545103893E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999863668874	WITHOUT_CLASSIFICATION	1.363311250897254E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999907995126	WITHOUT_CLASSIFICATION	9.200487395735478E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998766424196156	WITHOUT_CLASSIFICATION	1.2335758038431503E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999992009572778	WITHOUT_CLASSIFICATION	7.990427222762483E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999926822019742	WITHOUT_CLASSIFICATION	7.31779802575951E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999998972266896	WITHOUT_CLASSIFICATION	1.0277331040011752E-6	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997778539018	WITHOUT_CLASSIFICATION	2.2214609830135394E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988189534051	WITHOUT_CLASSIFICATION	1.1810465948799264E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999768724415	WITHOUT_CLASSIFICATION	2.3127558491817774E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984824819749	WITHOUT_CLASSIFICATION	1.5175180250483465E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984824819749	WITHOUT_CLASSIFICATION	1.5175180250483465E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995319912639	WITHOUT_CLASSIFICATION	4.6800873605126644E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.999999548907798	WITHOUT_CLASSIFICATION	4.5109220212353514E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999963620445198	WITHOUT_CLASSIFICATION	3.6379554802925766E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999963620445198	WITHOUT_CLASSIFICATION	3.6379554802925766E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997966796609	WITHOUT_CLASSIFICATION	2.0332033920000008E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999998178620088	WITHOUT_CLASSIFICATION	1.8213799133493489E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.99999567469691	WITHOUT_CLASSIFICATION	4.325303090040203E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995580005758	WITHOUT_CLASSIFICATION	4.4199942420991175E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999983852216688	WITHOUT_CLASSIFICATION	1.6147783312333201E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999970914699041	WITHOUT_CLASSIFICATION	2.908530095799637E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999996964577711	WITHOUT_CLASSIFICATION	3.035422289412175E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999996880747547	WITHOUT_CLASSIFICATION	3.1192524524833023E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999316624685	WITHOUT_CLASSIFICATION	6.83375314494175E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999316624685	WITHOUT_CLASSIFICATION	6.83375314494175E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999995288774	WITHOUT_CLASSIFICATION	4.711225509954284E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998911565638	WITHOUT_CLASSIFICATION	1.088434360786914E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998911565638	WITHOUT_CLASSIFICATION	1.088434360786914E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999741967208	WITHOUT_CLASSIFICATION	2.5803279143667785E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999996792023721	WITHOUT_CLASSIFICATION	3.2079762784885945E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9917717921154281	WITHOUT_CLASSIFICATION	0.00822820788457193	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998890949888	WITHOUT_CLASSIFICATION	1.1090501117574351E-7	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999999966783234	WITHOUT_CLASSIFICATION	3.3216766070301435E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998771162879	WITHOUT_CLASSIFICATION	1.2288371212357334E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999991791686453	WITHOUT_CLASSIFICATION	8.208313547169463E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999264958839383	WITHOUT_CLASSIFICATION	7.35041160616574E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999642582693	WITHOUT_CLASSIFICATION	3.5741730758065785E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999913012391615	WITHOUT_CLASSIFICATION	8.698760838611686E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999895560509	WITHOUT_CLASSIFICATION	1.0443949282715599E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999998913183912	WITHOUT_CLASSIFICATION	1.086816087778226E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999926705767266	WITHOUT_CLASSIFICATION	7.329423273407355E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999926705767266	WITHOUT_CLASSIFICATION	7.329423273407355E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999926705767266	WITHOUT_CLASSIFICATION	7.329423273407355E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999926705767266	WITHOUT_CLASSIFICATION	7.329423273407355E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995771620125	WITHOUT_CLASSIFICATION	4.228379874435449E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999981141939582	WITHOUT_CLASSIFICATION	1.8858060417528298E-6	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999994984967512	WITHOUT_CLASSIFICATION	5.015032487909436E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999848778431234	WITHOUT_CLASSIFICATION	1.5122156876608206E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999969544619401	WITHOUT_CLASSIFICATION	3.045538059901579E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999990891690769	WITHOUT_CLASSIFICATION	9.108309231095404E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999934792490562	WITHOUT_CLASSIFICATION	6.520750943773242E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999974521914365	WITHOUT_CLASSIFICATION	2.5478085634610055E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999823874554	WITHOUT_CLASSIFICATION	1.7612544682888957E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999300130701	WITHOUT_CLASSIFICATION	6.998692990279172E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999993776829896	WITHOUT_CLASSIFICATION	6.223170103943575E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991830542952	WITHOUT_CLASSIFICATION	8.169457047552227E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9944809949295396	WITHOUT_CLASSIFICATION	0.005519005070460469	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999816794099781	WITHOUT_CLASSIFICATION	1.8320590021988428E-5	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999969352075075	WITHOUT_CLASSIFICATION	3.064792492532337E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991830542952	WITHOUT_CLASSIFICATION	8.169457047552227E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999357340145023	WITHOUT_CLASSIFICATION	6.426598549762754E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999992029812	WITHOUT_CLASSIFICATION	7.970187361221929E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999777102605	WITHOUT_CLASSIFICATION	2.228973952460129E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999883916439247	WITHOUT_CLASSIFICATION	1.1608356075256902E-5	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999995328397159	WITHOUT_CLASSIFICATION	4.671602841992589E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996108817041	WITHOUT_CLASSIFICATION	3.891182959496964E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999986986431	WITHOUT_CLASSIFICATION	1.301356892762809E-9	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999998011514227	WITHOUT_CLASSIFICATION	1.9884857723908043E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998890215775	WITHOUT_CLASSIFICATION	1.109784224289334E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999659732659	WITHOUT_CLASSIFICATION	3.4026734052635705E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998042209021	WITHOUT_CLASSIFICATION	1.9577909785096104E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997798926371	WITHOUT_CLASSIFICATION	2.2010736290378933E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999984507598837	WITHOUT_CLASSIFICATION	1.5492401163582278E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999804894045781	WITHOUT_CLASSIFICATION	1.9510595421900538E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998055693413	WITHOUT_CLASSIFICATION	1.944306586983303E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999982096288661	WITHOUT_CLASSIFICATION	1.7903711339154538E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996111746248	WITHOUT_CLASSIFICATION	3.8882537520758763E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997296829751	WITHOUT_CLASSIFICATION	2.703170248781917E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999984696630708	WITHOUT_CLASSIFICATION	1.5303369292337745E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997296829751	WITHOUT_CLASSIFICATION	2.703170248781917E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999570394121	WITHOUT_CLASSIFICATION	4.296058781845678E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989472112025	WITHOUT_CLASSIFICATION	1.0527887973933174E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999998922137694	WITHOUT_CLASSIFICATION	1.0778623066266374E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999992374014053	WITHOUT_CLASSIFICATION	7.625985946932907E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996111746248	WITHOUT_CLASSIFICATION	3.8882537520758763E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999984696630708	WITHOUT_CLASSIFICATION	1.5303369292337745E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999570394121	WITHOUT_CLASSIFICATION	4.296058781845678E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998059760671	WITHOUT_CLASSIFICATION	1.9402393296849333E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999998215870752	WITHOUT_CLASSIFICATION	1.7841292482240302E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999939606320984	WITHOUT_CLASSIFICATION	6.039367901619471E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999978494303774	WITHOUT_CLASSIFICATION	2.1505696226103625E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998872467447	WITHOUT_CLASSIFICATION	1.1275325528639729E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999494855498	WITHOUT_CLASSIFICATION	5.05144502337517E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406475876	WITHOUT_CLASSIFICATION	1.6593524123808954E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999989472112025	WITHOUT_CLASSIFICATION	1.0527887973933174E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997524916692	WITHOUT_CLASSIFICATION	2.475083308661E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999998852426162	WITHOUT_CLASSIFICATION	1.147573837340538E-7	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999336744575	WITHOUT_CLASSIFICATION	6.632554256889265E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406475876	WITHOUT_CLASSIFICATION	1.6593524123808954E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999996100331325	WITHOUT_CLASSIFICATION	3.8996686740973054E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406475876	WITHOUT_CLASSIFICATION	1.6593524123808954E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999438567365	WITHOUT_CLASSIFICATION	5.614326336201285E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999983593912067	WITHOUT_CLASSIFICATION	1.64060879325108E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999991549983183	WITHOUT_CLASSIFICATION	8.450016817317455E-7	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.99999994156969	WITHOUT_CLASSIFICATION	5.8430310045150476E-8	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999613162825	WITHOUT_CLASSIFICATION	3.8683717520897254E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999997097480056	WITHOUT_CLASSIFICATION	2.902519943361651E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999990088513124	WITHOUT_CLASSIFICATION	9.911486875889126E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999986652140963	WITHOUT_CLASSIFICATION	1.334785903746557E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999980964463031	WITHOUT_CLASSIFICATION	1.9035536969614453E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999975271915416	WITHOUT_CLASSIFICATION	2.4728084583994923E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999766692377369	WITHOUT_CLASSIFICATION	2.3330762263122775E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999992455709195	WITHOUT_CLASSIFICATION	7.544290804649021E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9917717921154281	WITHOUT_CLASSIFICATION	0.00822820788457193	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999923125720217	WITHOUT_CLASSIFICATION	7.6874279783343E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999863554303263	WITHOUT_CLASSIFICATION	1.3644569673691708E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999991537923324	WITHOUT_CLASSIFICATION	8.462076676099756E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999172533208058	WITHOUT_CLASSIFICATION	8.27466791941221E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999382419154	WITHOUT_CLASSIFICATION	6.175808467478644E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999050618071	WITHOUT_CLASSIFICATION	9.493819284865268E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999946770686	WITHOUT_CLASSIFICATION	5.322931497191864E-9	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999967098667847	WITHOUT_CLASSIFICATION	3.2901332152697825E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999896022574	WITHOUT_CLASSIFICATION	1.039774254477169E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999226518481	WITHOUT_CLASSIFICATION	7.734815190701825E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9898585697256858	WITHOUT_CLASSIFICATION	0.010141430274314234	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999866728850036	WITHOUT_CLASSIFICATION	1.3327114996486247E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999966413316868	WITHOUT_CLASSIFICATION	3.3586683133866865E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999887461440404	WITHOUT_CLASSIFICATION	1.1253855959509613E-5	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999989575187962	WITHOUT_CLASSIFICATION	1.0424812037287536E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999606815851624	WITHOUT_CLASSIFICATION	3.93184148375196E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999989293295489	WITHOUT_CLASSIFICATION	1.0706704510140358E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999953106824	WITHOUT_CLASSIFICATION	4.6893176239238866E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999957654767	WITHOUT_CLASSIFICATION	4.234523275517906E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999877763143863	WITHOUT_CLASSIFICATION	1.2223685613690558E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999785304574939	WITHOUT_CLASSIFICATION	2.146954250616325E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.995936922637431	WITHOUT_CLASSIFICATION	0.004063077362568989	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999780726390426	WITHOUT_CLASSIFICATION	2.192736095748975E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999983630198969	WITHOUT_CLASSIFICATION	1.6369801030896043E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999937168086784	WITHOUT_CLASSIFICATION	6.2831913215779005E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999240137614241	WITHOUT_CLASSIFICATION	7.598623857578998E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999953684656452	WITHOUT_CLASSIFICATION	4.6315343547426916E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9915952051439069	WITHOUT_CLASSIFICATION	0.00840479485609323	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999246076128	WITHOUT_CLASSIFICATION	7.539238724656661E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999986419990401	WITHOUT_CLASSIFICATION	1.3580009598814432E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.999979649923167	WITHOUT_CLASSIFICATION	2.0350076833008675E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.999979649923167	WITHOUT_CLASSIFICATION	2.0350076833008675E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999997945134805	WITHOUT_CLASSIFICATION	2.0548651951604984E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999986652140963	WITHOUT_CLASSIFICATION	1.334785903746557E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999998809505918	WITHOUT_CLASSIFICATION	1.1904940819374187E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999983582626174	WITHOUT_CLASSIFICATION	1.641737382559051E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999934034492	WITHOUT_CLASSIFICATION	6.5965507922487694E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999309460952	WITHOUT_CLASSIFICATION	6.905390481711994E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999934550309292	WITHOUT_CLASSIFICATION	6.544969070854708E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998414825609646	WITHOUT_CLASSIFICATION	1.5851743903528122E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999824060937139	WITHOUT_CLASSIFICATION	1.759390628609015E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999999267894203	WITHOUT_CLASSIFICATION	7.321057970328874E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999464327353	WITHOUT_CLASSIFICATION	5.3567264775494454E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999795369593	WITHOUT_CLASSIFICATION	2.046304064620151E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997704564785	WITHOUT_CLASSIFICATION	2.2954352156076373E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999623656081326	WITHOUT_CLASSIFICATION	3.7634391867370393E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997521139193	WITHOUT_CLASSIFICATION	2.47886080658569E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998838023794	WITHOUT_CLASSIFICATION	1.161976205724706E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999313851635	WITHOUT_CLASSIFICATION	6.86148364838773E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999905533081	WITHOUT_CLASSIFICATION	9.446691853392902E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999530922619	WITHOUT_CLASSIFICATION	4.690773819985139E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999606635892	WITHOUT_CLASSIFICATION	3.933641081217162E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999980189889	WITHOUT_CLASSIFICATION	1.981011260476839E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999405607871	WITHOUT_CLASSIFICATION	5.9439212821642064E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999999694908641	WITHOUT_CLASSIFICATION	3.05091358939051E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999133553777	WITHOUT_CLASSIFICATION	8.664462232831602E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9915952051439069	WITHOUT_CLASSIFICATION	0.00840479485609323	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999159210721	WITHOUT_CLASSIFICATION	8.407892790876183E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999870720271	WITHOUT_CLASSIFICATION	1.2927972871126058E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999886049648	WITHOUT_CLASSIFICATION	1.1395035323402434E-8	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999854363270259	WITHOUT_CLASSIFICATION	1.4563672974243262E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999998684667193	WITHOUT_CLASSIFICATION	1.3153328059613136E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999998064448434	WITHOUT_CLASSIFICATION	1.9355515657496133E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999295214904572	WITHOUT_CLASSIFICATION	7.047850954280194E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997225399277	WITHOUT_CLASSIFICATION	2.7746007216796234E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998998995246	WITHOUT_CLASSIFICATION	1.001004752561609E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999997056781003	WITHOUT_CLASSIFICATION	2.943218998055816E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995992272449	WITHOUT_CLASSIFICATION	4.007727550828021E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995220892992289	WITHOUT_CLASSIFICATION	4.779107007711034E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999839026274316	WITHOUT_CLASSIFICATION	1.6097372568332714E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999992027818572	WITHOUT_CLASSIFICATION	7.972181427348248E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999815147974	WITHOUT_CLASSIFICATION	1.848520253560926E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999815147974	WITHOUT_CLASSIFICATION	1.848520253560926E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999121449618	WITHOUT_CLASSIFICATION	8.78550382443754E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999996855545277	WITHOUT_CLASSIFICATION	3.144454723622688E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999996064974554	WITHOUT_CLASSIFICATION	3.935025446008517E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999996064974554	WITHOUT_CLASSIFICATION	3.935025446008517E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999909457753	WITHOUT_CLASSIFICATION	9.054224762398497E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999991868636109	WITHOUT_CLASSIFICATION	8.131363891160554E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999804097779	WITHOUT_CLASSIFICATION	1.9590222128478043E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999973122347906	WITHOUT_CLASSIFICATION	2.6877652094537397E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999970142161752	WITHOUT_CLASSIFICATION	2.985783824788579E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993234276574	WITHOUT_CLASSIFICATION	6.765723425934304E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999892051922	WITHOUT_CLASSIFICATION	1.0794807863953413E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999892051922	WITHOUT_CLASSIFICATION	1.0794807863953413E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999979694279537	WITHOUT_CLASSIFICATION	2.0305720463671004E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999997838631197	WITHOUT_CLASSIFICATION	2.16136880214601E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999877133880947	WITHOUT_CLASSIFICATION	1.2286611905418115E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999999972023847	WITHOUT_CLASSIFICATION	2.7976152894153894E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.999999972023847	WITHOUT_CLASSIFICATION	2.7976152894153894E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998373271636	WITHOUT_CLASSIFICATION	1.626728364537764E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999788431306	WITHOUT_CLASSIFICATION	2.115686933986027E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994826358345	WITHOUT_CLASSIFICATION	5.173641655076822E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.999999577536449	WITHOUT_CLASSIFICATION	4.2246355114691183E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998469543224	WITHOUT_CLASSIFICATION	1.5304567764257502E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998378905287	WITHOUT_CLASSIFICATION	1.621094713321589E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999611282051	WITHOUT_CLASSIFICATION	3.887179495199272E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999998824719855	WITHOUT_CLASSIFICATION	1.1752801447075594E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999214589571	WITHOUT_CLASSIFICATION	7.854104287761339E-8	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999997046545078	WITHOUT_CLASSIFICATION	2.9534549219282423E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999996971224454	WITHOUT_CLASSIFICATION	3.028775546363622E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999982060902511	WITHOUT_CLASSIFICATION	1.7939097488018601E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999167459362355	WITHOUT_CLASSIFICATION	8.325406376460408E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999987543082299	WITHOUT_CLASSIFICATION	1.2456917700453152E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.999998719450066	WITHOUT_CLASSIFICATION	1.2805499339229568E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999975759670323	WITHOUT_CLASSIFICATION	2.4240329676712527E-6	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999856580117	WITHOUT_CLASSIFICATION	1.4341988163084577E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999990131726725	WITHOUT_CLASSIFICATION	9.868273275279734E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999997509501479	WITHOUT_CLASSIFICATION	2.490498521095212E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999995535858247	WITHOUT_CLASSIFICATION	4.464141753069385E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999999165668171	WITHOUT_CLASSIFICATION	8.343318287958096E-8	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999999801552132	WITHOUT_CLASSIFICATION	1.9844786809154626E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999886305130681	WITHOUT_CLASSIFICATION	1.1369486931980159E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999252931977543	WITHOUT_CLASSIFICATION	7.470680224580986E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999734300306669	WITHOUT_CLASSIFICATION	2.6569969333133962E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999998326647366	WITHOUT_CLASSIFICATION	1.6733526339953418E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999995754097337	WITHOUT_CLASSIFICATION	4.245902663310675E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999984699794744	WITHOUT_CLASSIFICATION	1.5300205255903683E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999955520504	WITHOUT_CLASSIFICATION	4.447949609332902E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999982854372	WITHOUT_CLASSIFICATION	1.714562808567352E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999998337903642	WITHOUT_CLASSIFICATION	1.662096358749489E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999775031946	WITHOUT_CLASSIFICATION	2.2496805425844564E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999380435463	WITHOUT_CLASSIFICATION	6.195645372766912E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999977334466054	WITHOUT_CLASSIFICATION	2.2665533947058683E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999999985978118	WITHOUT_CLASSIFICATION	1.4021882026093732E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999769430203526	WITHOUT_CLASSIFICATION	2.3056979647362595E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999868030614939	WITHOUT_CLASSIFICATION	1.3196938506109855E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999984363606413	WITHOUT_CLASSIFICATION	1.5636393586463268E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999995604680824	WITHOUT_CLASSIFICATION	4.395319176529897E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998715733652	WITHOUT_CLASSIFICATION	1.2842663471391747E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998993007784	WITHOUT_CLASSIFICATION	1.0069922162822001E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996655504833	WITHOUT_CLASSIFICATION	3.344495168123753E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999997342220608	WITHOUT_CLASSIFICATION	2.6577793915430085E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999702923151	WITHOUT_CLASSIFICATION	2.970768474570042E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999996101310471	WITHOUT_CLASSIFICATION	3.8986895293267406E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999999887143496	WITHOUT_CLASSIFICATION	1.1285650406372362E-7	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997110551369	WITHOUT_CLASSIFICATION	2.8894486323690787E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999963258682764	WITHOUT_CLASSIFICATION	3.6741317235495004E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999998811069922	WITHOUT_CLASSIFICATION	1.188930077014481E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999943767157179	WITHOUT_CLASSIFICATION	5.62328428203369E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999996836866076	WITHOUT_CLASSIFICATION	3.1631339239636555E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999999969939164	WITHOUT_CLASSIFICATION	3.0060836112081253E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999965213760484	WITHOUT_CLASSIFICATION	3.4786239516323382E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999999987893725	WITHOUT_CLASSIFICATION	1.2106274986588056E-8	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999999701266979	WITHOUT_CLASSIFICATION	2.9873302101439885E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996409037133	WITHOUT_CLASSIFICATION	3.5909628665928037E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999391895569	WITHOUT_CLASSIFICATION	6.081044313113057E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999860241193	WITHOUT_CLASSIFICATION	1.3975880687579526E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999997910278728	WITHOUT_CLASSIFICATION	2.089721272609744E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999782902896246	WITHOUT_CLASSIFICATION	2.1709710375409798E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997239209207	WITHOUT_CLASSIFICATION	2.760790792647066E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999997239209207	WITHOUT_CLASSIFICATION	2.760790792647066E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999435133152825	WITHOUT_CLASSIFICATION	5.6486684717504566E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999703507178739	WITHOUT_CLASSIFICATION	2.9649282126084312E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999663496646	WITHOUT_CLASSIFICATION	3.365033547131523E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999661480257	WITHOUT_CLASSIFICATION	3.385197429032598E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999996237633711	WITHOUT_CLASSIFICATION	3.7623662895956634E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999986642968018	WITHOUT_CLASSIFICATION	1.3357031981100913E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999447976945	WITHOUT_CLASSIFICATION	5.520230545696184E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999973759902	WITHOUT_CLASSIFICATION	2.6240096847222585E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999990686246762	WITHOUT_CLASSIFICATION	9.313753236580874E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999951986435082	WITHOUT_CLASSIFICATION	4.801356491772609E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999540450135	WITHOUT_CLASSIFICATION	4.5954986521513685E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999971287653955	WITHOUT_CLASSIFICATION	2.8712346044008057E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998790676323	WITHOUT_CLASSIFICATION	1.2093236760183252E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999590067841	WITHOUT_CLASSIFICATION	4.099321592859531E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994899461372	WITHOUT_CLASSIFICATION	5.100538628570002E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999994899461372	WITHOUT_CLASSIFICATION	5.100538628570002E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999419864221	WITHOUT_CLASSIFICATION	5.80135779450367E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999995868281486	WITHOUT_CLASSIFICATION	4.131718514716018E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999995796961838	WITHOUT_CLASSIFICATION	4.203038162464856E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999867191178	WITHOUT_CLASSIFICATION	1.3280882119937483E-8	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998883734309	WITHOUT_CLASSIFICATION	1.1162656911096228E-7	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968569634937	WITHOUT_CLASSIFICATION	3.143036506232001E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999942686958763	WITHOUT_CLASSIFICATION	5.731304123726745E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999828686972695	WITHOUT_CLASSIFICATION	1.713130273049326E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999999997681072	WITHOUT_CLASSIFICATION	2.3189280447677164E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999615163373301	WITHOUT_CLASSIFICATION	3.8483662669765785E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999992112956	WITHOUT_CLASSIFICATION	7.887044951239383E-10	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999976971644168	WITHOUT_CLASSIFICATION	2.302835583279596E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999831145827	WITHOUT_CLASSIFICATION	1.6885417215534067E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996649742506	WITHOUT_CLASSIFICATION	3.35025749429698E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999980331064978	WITHOUT_CLASSIFICATION	1.9668935021604353E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997269428695	WITHOUT_CLASSIFICATION	2.730571304745004E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999942491673852	WITHOUT_CLASSIFICATION	5.750832614845092E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999959561592551	WITHOUT_CLASSIFICATION	4.04384074489228E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999225653045	WITHOUT_CLASSIFICATION	7.743469560054899E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999906697045	WITHOUT_CLASSIFICATION	9.33029559405889E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999637998064	WITHOUT_CLASSIFICATION	3.620019358472274E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999947123382	WITHOUT_CLASSIFICATION	5.2876617726931886E-9	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997843576638	WITHOUT_CLASSIFICATION	2.1564233621933544E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999769544451081	WITHOUT_CLASSIFICATION	2.3045554891899482E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998337056382057	WITHOUT_CLASSIFICATION	1.6629436179425663E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999996169673421	WITHOUT_CLASSIFICATION	3.830326578832087E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999933918083	WITHOUT_CLASSIFICATION	6.608191680638113E-9	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999656612572	WITHOUT_CLASSIFICATION	3.4338742727786806E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999880336156645	WITHOUT_CLASSIFICATION	1.1966384335656752E-5	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999014693463	WITHOUT_CLASSIFICATION	9.853065375030328E-8	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999219752486546	WITHOUT_CLASSIFICATION	7.802475134543174E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998747987325	WITHOUT_CLASSIFICATION	1.252012674614861E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999985131925	WITHOUT_CLASSIFICATION	1.4868075409224656E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999848196213	WITHOUT_CLASSIFICATION	1.518037870325713E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999988379400008	WITHOUT_CLASSIFICATION	1.1620599992158732E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999402898544	WITHOUT_CLASSIFICATION	5.971014559245008E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999744522962	WITHOUT_CLASSIFICATION	2.5547703860914923E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999983527128711	WITHOUT_CLASSIFICATION	1.6472871289884273E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999998788406466	WITHOUT_CLASSIFICATION	1.2115935339385607E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999766449272	WITHOUT_CLASSIFICATION	2.3355072751271974E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994383086526	WITHOUT_CLASSIFICATION	5.616913473723913E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994383086526	WITHOUT_CLASSIFICATION	5.616913473723913E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999994977035782	WITHOUT_CLASSIFICATION	5.022964217202986E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999988260264716	WITHOUT_CLASSIFICATION	1.1739735284197434E-6	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999889797595	WITHOUT_CLASSIFICATION	1.1020240528507648E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999998880605332	WITHOUT_CLASSIFICATION	1.1193946679940654E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999599811173	WITHOUT_CLASSIFICATION	4.001888267844463E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999939950032	WITHOUT_CLASSIFICATION	6.004996849613218E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999338600652	WITHOUT_CLASSIFICATION	6.613993481006515E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999989577303948	WITHOUT_CLASSIFICATION	1.0422696051863942E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999634792677	WITHOUT_CLASSIFICATION	3.6520732349937184E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995867570953	WITHOUT_CLASSIFICATION	4.1324290467600245E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996776722896	WITHOUT_CLASSIFICATION	3.223277104176671E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999231682881385	WITHOUT_CLASSIFICATION	7.683171186151098E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999814790040539	WITHOUT_CLASSIFICATION	1.8520995946170257E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996995562351	WITHOUT_CLASSIFICATION	3.0044376486323346E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999996451295264	WITHOUT_CLASSIFICATION	3.548704736588011E-7	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999993482898858	WITHOUT_CLASSIFICATION	6.517101142207994E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999849476228	WITHOUT_CLASSIFICATION	1.5052377322447512E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999982389259	WITHOUT_CLASSIFICATION	1.7610741042373961E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999957017239495	WITHOUT_CLASSIFICATION	4.298276050533405E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999957553029712	WITHOUT_CLASSIFICATION	4.244697028707403E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999994153306465	WITHOUT_CLASSIFICATION	5.846693534915691E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999131295931	WITHOUT_CLASSIFICATION	8.687040687726985E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999991114300058	WITHOUT_CLASSIFICATION	8.885699941875107E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999948518240116	WITHOUT_CLASSIFICATION	5.14817598842407E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999870648489178	WITHOUT_CLASSIFICATION	1.2935151082223979E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999963734783994	WITHOUT_CLASSIFICATION	3.6265216006747023E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999930351313	WITHOUT_CLASSIFICATION	6.9648685847500686E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999936822479074	WITHOUT_CLASSIFICATION	6.317752092647408E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999581638066	WITHOUT_CLASSIFICATION	4.183619341145481E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999529499629	WITHOUT_CLASSIFICATION	4.7050037065938434E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999691160039	WITHOUT_CLASSIFICATION	3.088399619267224E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999992052533926	WITHOUT_CLASSIFICATION	7.947466072912756E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999717351229	WITHOUT_CLASSIFICATION	2.8264877069435188E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999955066247	WITHOUT_CLASSIFICATION	4.4933753705919605E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999977216680238	WITHOUT_CLASSIFICATION	2.2783319763034536E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999219544785	WITHOUT_CLASSIFICATION	7.804552147973654E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999997028849313	WITHOUT_CLASSIFICATION	2.9711506863282494E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999547232066	WITHOUT_CLASSIFICATION	4.527679340561665E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999920331171674	WITHOUT_CLASSIFICATION	7.96688283256627E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999958209496291	WITHOUT_CLASSIFICATION	4.179050370832012E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999991400263948	WITHOUT_CLASSIFICATION	8.599736052442368E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999854970774	WITHOUT_CLASSIFICATION	1.4502922749026931E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999895476144	WITHOUT_CLASSIFICATION	1.0452385683240519E-8	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998235715429845	WITHOUT_CLASSIFICATION	1.7642845701547187E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999749775196	WITHOUT_CLASSIFICATION	2.5022480405240363E-7	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999999639002801	WITHOUT_CLASSIFICATION	3.609971990880287E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999803779436	WITHOUT_CLASSIFICATION	1.962205638951585E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998790676323	WITHOUT_CLASSIFICATION	1.2093236760183252E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999993045340638	WITHOUT_CLASSIFICATION	6.954659361902822E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998992361183	WITHOUT_CLASSIFICATION	1.0076388165802547E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999082027585	WITHOUT_CLASSIFICATION	9.179724146873055E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998744211435	WITHOUT_CLASSIFICATION	1.2557885653188687E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999582848378	WITHOUT_CLASSIFICATION	4.171516210370181E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999750192193	WITHOUT_CLASSIFICATION	2.4980780642073215E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999983645053246	WITHOUT_CLASSIFICATION	1.6354946753984738E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999841834149531	WITHOUT_CLASSIFICATION	1.5816585046968146E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999992634887301	WITHOUT_CLASSIFICATION	7.365112697489147E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999996626392254	WITHOUT_CLASSIFICATION	3.373607746791551E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999495372547	WITHOUT_CLASSIFICATION	5.0462745260740625E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999222389545	WITHOUT_CLASSIFICATION	7.776104550816746E-8	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999990158060225	WITHOUT_CLASSIFICATION	9.84193977607588E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999451001523	WITHOUT_CLASSIFICATION	5.4899847555727586E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995081814886	WITHOUT_CLASSIFICATION	4.918185113192678E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999953847638299	WITHOUT_CLASSIFICATION	4.615236170121877E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999944296252506	WITHOUT_CLASSIFICATION	5.570374749324711E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999773599927	WITHOUT_CLASSIFICATION	2.2640007250329396E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999970857301536	WITHOUT_CLASSIFICATION	2.914269846440845E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995081814886	WITHOUT_CLASSIFICATION	4.918185113192678E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9991995910750948	WITHOUT_CLASSIFICATION	8.004089249050901E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999740088177	WITHOUT_CLASSIFICATION	2.5991182300781896E-7	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999937173443	WITHOUT_CLASSIFICATION	6.282655696835016E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999005980965	WITHOUT_CLASSIFICATION	9.940190350056649E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999988331557556	WITHOUT_CLASSIFICATION	1.1668442444133116E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999268261043	WITHOUT_CLASSIFICATION	7.317389565406699E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999890981751	WITHOUT_CLASSIFICATION	1.0901824940490772E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999995444391293	WITHOUT_CLASSIFICATION	4.5556087070460926E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999209523931	WITHOUT_CLASSIFICATION	7.904760691842848E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999473836184	WITHOUT_CLASSIFICATION	5.26163816156893E-8	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999994919912903	WITHOUT_CLASSIFICATION	5.080087096862797E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998577964246533	WITHOUT_CLASSIFICATION	1.4220357534665585E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999975138744	WITHOUT_CLASSIFICATION	2.486125674771258E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999817658718	WITHOUT_CLASSIFICATION	1.8234128200715982E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999233458328	WITHOUT_CLASSIFICATION	7.66541672306571E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999133553777	WITHOUT_CLASSIFICATION	8.664462232831602E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999669160956	WITHOUT_CLASSIFICATION	3.3083904494120676E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999904832704	WITHOUT_CLASSIFICATION	9.516729673360208E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999774074822494	WITHOUT_CLASSIFICATION	2.2592517750539947E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999757273293	WITHOUT_CLASSIFICATION	2.4272670588496805E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999958813519	WITHOUT_CLASSIFICATION	4.118648094733692E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999195032484	WITHOUT_CLASSIFICATION	8.049675157993919E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999947563687	WITHOUT_CLASSIFICATION	5.243631338504169E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999992174591	WITHOUT_CLASSIFICATION	7.825409877393518E-10	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999988042344	WITHOUT_CLASSIFICATION	1.1957656129915578E-9	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999995676894375	WITHOUT_CLASSIFICATION	4.323105624183331E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999984176038429	WITHOUT_CLASSIFICATION	1.5823961570948575E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997219721479	WITHOUT_CLASSIFICATION	2.7802785207734687E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999990928849383	WITHOUT_CLASSIFICATION	9.071150617745848E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999999484997255	WITHOUT_CLASSIFICATION	5.1500274486767196E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999160602182	WITHOUT_CLASSIFICATION	8.393978169281569E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999998379382653	WITHOUT_CLASSIFICATION	1.6206173470509744E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999998544567487	WITHOUT_CLASSIFICATION	1.4554325129491628E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999993901787	WITHOUT_CLASSIFICATION	6.098213015451477E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999674840214	WITHOUT_CLASSIFICATION	3.251597862578577E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998970539743	WITHOUT_CLASSIFICATION	1.0294602574344218E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999993528661694	WITHOUT_CLASSIFICATION	6.471338305901325E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999995839459007	WITHOUT_CLASSIFICATION	4.1605409928529554E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999677540866	WITHOUT_CLASSIFICATION	3.224591329393553E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999548141356	WITHOUT_CLASSIFICATION	4.5185864404511226E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999529921793	WITHOUT_CLASSIFICATION	4.7007820702479187E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999529921793	WITHOUT_CLASSIFICATION	4.7007820702479187E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999978580667544	WITHOUT_CLASSIFICATION	2.141933245602082E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999250381281	WITHOUT_CLASSIFICATION	7.496187190794169E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999333643993	WITHOUT_CLASSIFICATION	6.66356006580778E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.9005203118142533	TEST	0.09947968818574673	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995580005758	WITHOUT_CLASSIFICATION	4.4199942420991175E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999995580005758	WITHOUT_CLASSIFICATION	4.4199942420991175E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999957990514908	WITHOUT_CLASSIFICATION	4.200948509223941E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998137817443	WITHOUT_CLASSIFICATION	1.8621825567522672E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999116223143849	WITHOUT_CLASSIFICATION	8.837768561502463E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999754214314639	WITHOUT_CLASSIFICATION	2.4578568536072005E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999060123096	WITHOUT_CLASSIFICATION	9.398769038369192E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999993983382356	WITHOUT_CLASSIFICATION	6.016617643753279E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999996065351601	WITHOUT_CLASSIFICATION	3.9346483993962096E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998069546	WITHOUT_CLASSIFICATION	1.9304540001297074E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999382012526313	WITHOUT_CLASSIFICATION	6.179874736869943E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968465953767	WITHOUT_CLASSIFICATION	3.1534046232189924E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968465953767	WITHOUT_CLASSIFICATION	3.1534046232189924E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999965720733439	WITHOUT_CLASSIFICATION	3.4279266561984555E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999983299526405	WITHOUT_CLASSIFICATION	1.6700473595284485E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991659657543	WITHOUT_CLASSIFICATION	8.340342456611988E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998923286381662	WITHOUT_CLASSIFICATION	1.076713618338238E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999949100428374	WITHOUT_CLASSIFICATION	5.089957162637152E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999587398041	WITHOUT_CLASSIFICATION	4.126019588427419E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990946902554	WITHOUT_CLASSIFICATION	9.053097446024893E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998083915776	WITHOUT_CLASSIFICATION	1.916084224589592E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999992994555558	WITHOUT_CLASSIFICATION	7.005444441971501E-7	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999995204895361	WITHOUT_CLASSIFICATION	4.795104639088822E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999664272712	WITHOUT_CLASSIFICATION	3.357272875589989E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999473836184	WITHOUT_CLASSIFICATION	5.26163816156893E-8	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999463055864	WITHOUT_CLASSIFICATION	5.369441364314335E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999699984554825	WITHOUT_CLASSIFICATION	3.0001544517478893E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999797349274	WITHOUT_CLASSIFICATION	2.0265072592825925E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999996604234969	WITHOUT_CLASSIFICATION	3.395765031052826E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999942962445922	WITHOUT_CLASSIFICATION	5.7037554078106165E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999977997655066	WITHOUT_CLASSIFICATION	2.200234493465845E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999655200964879	WITHOUT_CLASSIFICATION	3.447990351210407E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999999934799576	WITHOUT_CLASSIFICATION	6.520042390684897E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999451923536	WITHOUT_CLASSIFICATION	5.480764634116874E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999991509983779	WITHOUT_CLASSIFICATION	8.490016220712464E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999991509983779	WITHOUT_CLASSIFICATION	8.490016220712464E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999991830542952	WITHOUT_CLASSIFICATION	8.169457047552227E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999997808852	WITHOUT_CLASSIFICATION	2.1911472445398763E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999662941837095	WITHOUT_CLASSIFICATION	3.370581629048223E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999999141811783	WITHOUT_CLASSIFICATION	8.58188218324962E-8	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997817567406	WITHOUT_CLASSIFICATION	2.182432593594661E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999854113633	WITHOUT_CLASSIFICATION	1.4588636786141405E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998055693413	WITHOUT_CLASSIFICATION	1.944306586983303E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999954658989	WITHOUT_CLASSIFICATION	4.534101106888022E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998059760671	WITHOUT_CLASSIFICATION	1.9402393296849333E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999991571791226	WITHOUT_CLASSIFICATION	8.428208775338881E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406475876	WITHOUT_CLASSIFICATION	1.6593524123808954E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999989951483714	WITHOUT_CLASSIFICATION	1.0048516286032435E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998864687637	WITHOUT_CLASSIFICATION	1.1353123633880773E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998720005895	WITHOUT_CLASSIFICATION	1.279994104805985E-7	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999424718637	WITHOUT_CLASSIFICATION	5.7528136344244514E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999912881449	WITHOUT_CLASSIFICATION	8.711855113931572E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999663950087	WITHOUT_CLASSIFICATION	3.360499130017616E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962460965702	WITHOUT_CLASSIFICATION	3.75390342989901E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999992809573474	WITHOUT_CLASSIFICATION	7.190426526940919E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999997625524399	WITHOUT_CLASSIFICATION	2.3744756009815853E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999101036157	WITHOUT_CLASSIFICATION	8.989638433455042E-8	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999745436111	WITHOUT_CLASSIFICATION	2.545638889596747E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999994826358345	WITHOUT_CLASSIFICATION	5.173641655076822E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999684272908	WITHOUT_CLASSIFICATION	3.157270913552022E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999889343969	WITHOUT_CLASSIFICATION	1.1065603044970957E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999889343969	WITHOUT_CLASSIFICATION	1.1065603044970957E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999996869349378	WITHOUT_CLASSIFICATION	3.130650622039223E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995688597684	WITHOUT_CLASSIFICATION	4.311402316435027E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999771083574	WITHOUT_CLASSIFICATION	2.289164253055799E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999493874799	WITHOUT_CLASSIFICATION	5.061252012322323E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997897731359	WITHOUT_CLASSIFICATION	2.102268641878115E-7	TEST
