//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994873845519019	WITHOUT_CLASSIFICATION	5.12615448098112E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999743912096201	WITHOUT_CLASSIFICATION	2.560879037997974E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999136842355	WITHOUT_CLASSIFICATION	8.631576453039579E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999992284782888	WITHOUT_CLASSIFICATION	7.715217111184115E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998298183257	WITHOUT_CLASSIFICATION	1.7018167437392644E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998298183257	WITHOUT_CLASSIFICATION	1.7018167437392644E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999834977021	WITHOUT_CLASSIFICATION	1.6502297882949196E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999933684193	WITHOUT_CLASSIFICATION	6.631580685642213E-8	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996198675918	WITHOUT_CLASSIFICATION	3.801324081813881E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999470915436	WITHOUT_CLASSIFICATION	5.290845636061088E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996366204551	WITHOUT_CLASSIFICATION	3.6337954488184854E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996366204551	WITHOUT_CLASSIFICATION	3.6337954488184854E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980930751264	WITHOUT_CLASSIFICATION	1.9069248735670096E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999571023639	WITHOUT_CLASSIFICATION	4.28976361347684E-8	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999194511391	WITHOUT_CLASSIFICATION	8.05488608719006E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999953459424181	WITHOUT_CLASSIFICATION	4.654057581824572E-6	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999814955816	WITHOUT_CLASSIFICATION	1.8504418391348722E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999974616430912	WITHOUT_CLASSIFICATION	2.538356908773879E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999955060086151	WITHOUT_CLASSIFICATION	4.493991384885278E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999955901155634	WITHOUT_CLASSIFICATION	4.409884436532205E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957339191731	WITHOUT_CLASSIFICATION	4.266080827027209E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9997630359511893	WITHOUT_CLASSIFICATION	2.3696404881056205E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999980259046102	WITHOUT_CLASSIFICATION	1.9740953898730898E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999975136178518	WITHOUT_CLASSIFICATION	2.486382148280837E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999346643577	WITHOUT_CLASSIFICATION	6.533564233896061E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999632151384	WITHOUT_CLASSIFICATION	3.6784861599727838E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999632151384	WITHOUT_CLASSIFICATION	3.6784861599727838E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997691369722	WITHOUT_CLASSIFICATION	2.3086302773710892E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999940987538378	WITHOUT_CLASSIFICATION	5.901246162228821E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999504515152	WITHOUT_CLASSIFICATION	4.954848472755606E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999655918097	WITHOUT_CLASSIFICATION	3.44081901805334E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999984365847042	WITHOUT_CLASSIFICATION	1.5634152957221587E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.8976895563154064	TEST	0.1023104436845937	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.8976895563154064	TEST	0.1023104436845937	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999394685056	WITHOUT_CLASSIFICATION	6.053149436877683E-8	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999855479881947	WITHOUT_CLASSIFICATION	1.4452011805307284E-5	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999518918983	WITHOUT_CLASSIFICATION	4.8108101707660285E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999996759469191	WITHOUT_CLASSIFICATION	3.240530808917294E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999999293934677	WITHOUT_CLASSIFICATION	7.06065323002637E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985818923799	WITHOUT_CLASSIFICATION	1.4181076201143396E-6	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987623274561	WITHOUT_CLASSIFICATION	1.237672543902205E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999627760335	WITHOUT_CLASSIFICATION	3.722396649500538E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999917733050575	WITHOUT_CLASSIFICATION	8.226694942582515E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999206709315	WITHOUT_CLASSIFICATION	7.932906846797565E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999991395543822	WITHOUT_CLASSIFICATION	8.604456176054917E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999917733050575	WITHOUT_CLASSIFICATION	8.226694942582515E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999991395543822	WITHOUT_CLASSIFICATION	8.604456176054917E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994980314796	WITHOUT_CLASSIFICATION	5.019685203845592E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9991381624643285	WITHOUT_CLASSIFICATION	8.618375356714457E-4	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999995583707041	WITHOUT_CLASSIFICATION	4.416292959438559E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999994234273365	WITHOUT_CLASSIFICATION	5.765726635585541E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999926537614754	WITHOUT_CLASSIFICATION	7.346238524663202E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999820534024979	WITHOUT_CLASSIFICATION	1.7946597502092864E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999891692507937	WITHOUT_CLASSIFICATION	1.0830749206298666E-4	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999996601523965	WITHOUT_CLASSIFICATION	3.398476034838769E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999994135455805	WITHOUT_CLASSIFICATION	5.864544194901837E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999957883071425	WITHOUT_CLASSIFICATION	4.2116928574331765E-6	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999995563303861	WITHOUT_CLASSIFICATION	4.436696138957816E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999998864601333	WITHOUT_CLASSIFICATION	1.1353986682275181E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999398005035	WITHOUT_CLASSIFICATION	6.019949652187097E-8	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999303558664	WITHOUT_CLASSIFICATION	6.964413361710054E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999786323612	WITHOUT_CLASSIFICATION	2.1367638786105818E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999967030876276	WITHOUT_CLASSIFICATION	3.2969123724072536E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999916267598	WITHOUT_CLASSIFICATION	8.373240227373926E-9	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999593341049	WITHOUT_CLASSIFICATION	4.066589503449825E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999846592563	WITHOUT_CLASSIFICATION	1.5340743699611187E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999893973534	WITHOUT_CLASSIFICATION	1.0602646611219119E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.99999875132088	WITHOUT_CLASSIFICATION	1.2486791200103985E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999168835052	WITHOUT_CLASSIFICATION	8.311649481641922E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999943085893	WITHOUT_CLASSIFICATION	5.691410700438394E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967809458318	WITHOUT_CLASSIFICATION	3.219054168199346E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999904123754215	WITHOUT_CLASSIFICATION	9.587624578518719E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999684960984	WITHOUT_CLASSIFICATION	3.1503901581609714E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999934732171	WITHOUT_CLASSIFICATION	6.52678282584026E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999973825067446	WITHOUT_CLASSIFICATION	2.6174932554003172E-6	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999984856589967	WITHOUT_CLASSIFICATION	1.5143410032369158E-6	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988169307152	WITHOUT_CLASSIFICATION	1.1830692847266428E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999989122760784	WITHOUT_CLASSIFICATION	1.0877239215362737E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999923497188	WITHOUT_CLASSIFICATION	7.650281083564422E-9	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999157846311	WITHOUT_CLASSIFICATION	8.421536883860909E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999855118273	WITHOUT_CLASSIFICATION	1.4488172669309901E-8	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999258871719	WITHOUT_CLASSIFICATION	7.411282810859514E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999993778834619	WITHOUT_CLASSIFICATION	6.221165380280529E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999855118273	WITHOUT_CLASSIFICATION	1.4488172669309901E-8	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999867617358	WITHOUT_CLASSIFICATION	1.3238264185417462E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999901688151	WITHOUT_CLASSIFICATION	9.831184894597514E-8	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999996376813117	WITHOUT_CLASSIFICATION	3.623186883241827E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999998301477597	WITHOUT_CLASSIFICATION	1.698522402817299E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999456525211	WITHOUT_CLASSIFICATION	5.43474789039254E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999920279055	WITHOUT_CLASSIFICATION	7.972094554977582E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999920279055	WITHOUT_CLASSIFICATION	7.972094554977582E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999993982676721	WITHOUT_CLASSIFICATION	6.017323279452398E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999980717318135	WITHOUT_CLASSIFICATION	1.9282681863594522E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999980688826073	WITHOUT_CLASSIFICATION	1.9311173926091615E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999805983366	WITHOUT_CLASSIFICATION	1.9401663418192513E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999487088072	WITHOUT_CLASSIFICATION	5.1291192914408225E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999574957285	WITHOUT_CLASSIFICATION	4.250427156881563E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998516979259	WITHOUT_CLASSIFICATION	1.4830207418770264E-7	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999862533046	WITHOUT_CLASSIFICATION	1.3746695431435377E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998148248982	WITHOUT_CLASSIFICATION	1.8517510174453236E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999593948192	WITHOUT_CLASSIFICATION	4.060518081106416E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999096932392	WITHOUT_CLASSIFICATION	9.030676083327052E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999096932392	WITHOUT_CLASSIFICATION	9.030676083327052E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999881493696	WITHOUT_CLASSIFICATION	1.185063031382526E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999535752746	WITHOUT_CLASSIFICATION	4.642472548852219E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999995514802485	WITHOUT_CLASSIFICATION	4.485197513945695E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999096932392	WITHOUT_CLASSIFICATION	9.030676083327052E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999881493696	WITHOUT_CLASSIFICATION	1.185063031382526E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999881493696	WITHOUT_CLASSIFICATION	1.185063031382526E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999951844473177	WITHOUT_CLASSIFICATION	4.815552682351983E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999994239920716	WITHOUT_CLASSIFICATION	5.760079283158634E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999288022469	WITHOUT_CLASSIFICATION	7.119775311961044E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.99999946325177	WITHOUT_CLASSIFICATION	5.367482300171705E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999995438865231	WITHOUT_CLASSIFICATION	4.5611347684048383E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999995438865231	WITHOUT_CLASSIFICATION	4.5611347684048383E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999992947721792	WITHOUT_CLASSIFICATION	7.052278207668336E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999985943238011	WITHOUT_CLASSIFICATION	1.4056761988847058E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999997625862743	WITHOUT_CLASSIFICATION	2.374137258008015E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998577581555	WITHOUT_CLASSIFICATION	1.4224184446772244E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998577581555	WITHOUT_CLASSIFICATION	1.4224184446772244E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999992918001058	WITHOUT_CLASSIFICATION	7.081998941801989E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999978816335798	WITHOUT_CLASSIFICATION	2.118366420251635E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999957159808626	WITHOUT_CLASSIFICATION	4.284019137484475E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999541087556	WITHOUT_CLASSIFICATION	4.589124438923692E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999979075864306	WITHOUT_CLASSIFICATION	2.0924135693952998E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999994384041837	WITHOUT_CLASSIFICATION	5.61595816214973E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999971754117286	WITHOUT_CLASSIFICATION	2.824588271364072E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999087302911	WITHOUT_CLASSIFICATION	9.126970895172734E-8	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999962429152475	WITHOUT_CLASSIFICATION	3.7570847524803216E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999957159808626	WITHOUT_CLASSIFICATION	4.284019137484475E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999905198570859	WITHOUT_CLASSIFICATION	9.480142914076966E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970779138253	WITHOUT_CLASSIFICATION	2.922086174762169E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970779138253	WITHOUT_CLASSIFICATION	2.922086174762169E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998419491356	WITHOUT_CLASSIFICATION	1.580508645091793E-7	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.99999421411645	WITHOUT_CLASSIFICATION	5.785883550071112E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999998830966161	WITHOUT_CLASSIFICATION	1.169033838946405E-6	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999893454478314	WITHOUT_CLASSIFICATION	1.06545521686881E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999975321779417	WITHOUT_CLASSIFICATION	2.46782205822011E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999930948818625	WITHOUT_CLASSIFICATION	6.905118137517097E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999998592765957	WITHOUT_CLASSIFICATION	1.4072340429159153E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999884607736	WITHOUT_CLASSIFICATION	1.1539226436284181E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999885443402	WITHOUT_CLASSIFICATION	1.1455659676106982E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999885443402	WITHOUT_CLASSIFICATION	1.1455659676106982E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9994873845519019	WITHOUT_CLASSIFICATION	5.12615448098112E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997102240361	WITHOUT_CLASSIFICATION	2.897759638732955E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998402516618	WITHOUT_CLASSIFICATION	1.5974833829072486E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999994518635351	WITHOUT_CLASSIFICATION	5.481364648257665E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999993682943009	WITHOUT_CLASSIFICATION	6.317056991132607E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999997612459865	WITHOUT_CLASSIFICATION	2.38754013511398E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999997531982274	WITHOUT_CLASSIFICATION	2.4680177254878797E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996144156106	WITHOUT_CLASSIFICATION	3.8558438954054877E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.999997046764062	WITHOUT_CLASSIFICATION	2.9532359380577914E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999986294749194	WITHOUT_CLASSIFICATION	1.3705250806925712E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999993292290081	WITHOUT_CLASSIFICATION	6.707709919345653E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999136842355	WITHOUT_CLASSIFICATION	8.631576453039579E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998095783471	WITHOUT_CLASSIFICATION	1.9042165285920742E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998095783471	WITHOUT_CLASSIFICATION	1.9042165285920742E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999994202129335	WITHOUT_CLASSIFICATION	5.797870663813833E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999927136465991	WITHOUT_CLASSIFICATION	7.2863534008665E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.99999995570094	WITHOUT_CLASSIFICATION	4.429906002348322E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999995262964853	WITHOUT_CLASSIFICATION	4.737035146955636E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999997256292809	WITHOUT_CLASSIFICATION	2.743707192082753E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999923329069	WITHOUT_CLASSIFICATION	7.66709311010611E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998298183257	WITHOUT_CLASSIFICATION	1.7018167437392644E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997109401164	WITHOUT_CLASSIFICATION	2.8905988364375734E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999990806622872	WITHOUT_CLASSIFICATION	9.19337712836912E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997351368188	WITHOUT_CLASSIFICATION	2.648631811725482E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998294709667	WITHOUT_CLASSIFICATION	1.7052903327184304E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999995768761599	WITHOUT_CLASSIFICATION	4.231238401616985E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999994323704658	WITHOUT_CLASSIFICATION	5.676295341638071E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996526524603	WITHOUT_CLASSIFICATION	3.473475398107883E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999866951516	WITHOUT_CLASSIFICATION	1.330484840881523E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999759778637	WITHOUT_CLASSIFICATION	2.402213635092107E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999998265144532	WITHOUT_CLASSIFICATION	1.734855467506329E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998263844909	WITHOUT_CLASSIFICATION	1.7361550901295757E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999102837238	WITHOUT_CLASSIFICATION	8.971627624858207E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999995256265188	WITHOUT_CLASSIFICATION	4.7437348113255235E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999986294749194	WITHOUT_CLASSIFICATION	1.3705250806925712E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998095783471	WITHOUT_CLASSIFICATION	1.9042165285920742E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996526524603	WITHOUT_CLASSIFICATION	3.473475398107883E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999834977021	WITHOUT_CLASSIFICATION	1.6502297882949196E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998350806387	WITHOUT_CLASSIFICATION	1.6491936122922425E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999991085646053	WITHOUT_CLASSIFICATION	8.914353947279091E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999128505497	WITHOUT_CLASSIFICATION	8.714945037624429E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999970384587337	WITHOUT_CLASSIFICATION	2.9615412663435933E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999995937191963	WITHOUT_CLASSIFICATION	4.0628080355421483E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999990172568202	WITHOUT_CLASSIFICATION	9.827431798676518E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999503162644	WITHOUT_CLASSIFICATION	4.968373564242547E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999891256779412	WITHOUT_CLASSIFICATION	1.0874322058880605E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999949437500971	WITHOUT_CLASSIFICATION	5.056249902900874E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999962002870431	WITHOUT_CLASSIFICATION	3.799712957031828E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999962002870431	WITHOUT_CLASSIFICATION	3.799712957031828E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999629724352	WITHOUT_CLASSIFICATION	3.702756479969984E-8	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999922242124	WITHOUT_CLASSIFICATION	7.775787536601346E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999958645794804	WITHOUT_CLASSIFICATION	4.135420519554309E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999996805535527	WITHOUT_CLASSIFICATION	3.194464472879948E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999841002185	WITHOUT_CLASSIFICATION	1.5899781506662084E-8	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999926885005	WITHOUT_CLASSIFICATION	7.3114994952652096E-9	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998147781789	WITHOUT_CLASSIFICATION	1.852218210558117E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999933684193	WITHOUT_CLASSIFICATION	6.631580685642213E-8	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.999999681689144	WITHOUT_CLASSIFICATION	3.1831085595718283E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999642326914	WITHOUT_CLASSIFICATION	3.576730844989677E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999642326914	WITHOUT_CLASSIFICATION	3.576730844989677E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999997756354734	WITHOUT_CLASSIFICATION	2.243645266530393E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998287933676	WITHOUT_CLASSIFICATION	1.7120663243657782E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998850429823	WITHOUT_CLASSIFICATION	1.1495701776329756E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999613768957	WITHOUT_CLASSIFICATION	3.862310435567118E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.999999168144178	WITHOUT_CLASSIFICATION	8.318558220105086E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999088611562	WITHOUT_CLASSIFICATION	9.113884372204834E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999986294749194	WITHOUT_CLASSIFICATION	1.3705250806925712E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999136842355	WITHOUT_CLASSIFICATION	8.631576453039579E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996526524603	WITHOUT_CLASSIFICATION	3.473475398107883E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999996526524603	WITHOUT_CLASSIFICATION	3.473475398107883E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999353083605	WITHOUT_CLASSIFICATION	6.469163950684269E-8	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999353083605	WITHOUT_CLASSIFICATION	6.469163950684269E-8	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999999809593171	WITHOUT_CLASSIFICATION	1.904068289653573E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999994842084482	WITHOUT_CLASSIFICATION	5.157915517595135E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999994842084482	WITHOUT_CLASSIFICATION	5.157915517595135E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999998857797501	WITHOUT_CLASSIFICATION	1.1422024985263355E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999999337737325	WITHOUT_CLASSIFICATION	6.622626738532863E-8	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997218864293	WITHOUT_CLASSIFICATION	2.7811357076800046E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999996794589764	WITHOUT_CLASSIFICATION	3.2054102365653083E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999261479685	WITHOUT_CLASSIFICATION	7.385203145002298E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999470915436	WITHOUT_CLASSIFICATION	5.290845636061088E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999470915436	WITHOUT_CLASSIFICATION	5.290845636061088E-8	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999993504364731	WITHOUT_CLASSIFICATION	6.495635267245323E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999999332041315	WITHOUT_CLASSIFICATION	6.679586846049701E-8	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999992550464922	WITHOUT_CLASSIFICATION	7.449535076851891E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999982991896033	WITHOUT_CLASSIFICATION	1.7008103968243086E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999994924701608	WITHOUT_CLASSIFICATION	5.075298392060124E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.999995832622894	WITHOUT_CLASSIFICATION	4.1673771059483774E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996366204551	WITHOUT_CLASSIFICATION	3.6337954488184854E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999993589119914	WITHOUT_CLASSIFICATION	6.410880085061829E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999993589119914	WITHOUT_CLASSIFICATION	6.410880085061829E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980930751264	WITHOUT_CLASSIFICATION	1.9069248735670096E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980930751264	WITHOUT_CLASSIFICATION	1.9069248735670096E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999995821619324	WITHOUT_CLASSIFICATION	4.17838067524965E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999995821619324	WITHOUT_CLASSIFICATION	4.17838067524965E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997894723762	WITHOUT_CLASSIFICATION	2.105276238475707E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997894723762	WITHOUT_CLASSIFICATION	2.105276238475707E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999470915436	WITHOUT_CLASSIFICATION	5.290845636061088E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.9999996366204551	WITHOUT_CLASSIFICATION	3.6337954488184854E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999993589119914	WITHOUT_CLASSIFICATION	6.410880085061829E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999993589119914	WITHOUT_CLASSIFICATION	6.410880085061829E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999980930751264	WITHOUT_CLASSIFICATION	1.9069248735670096E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999995821619324	WITHOUT_CLASSIFICATION	4.17838067524965E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999995821619324	WITHOUT_CLASSIFICATION	4.17838067524965E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997894723762	WITHOUT_CLASSIFICATION	2.105276238475707E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999999876386451	WITHOUT_CLASSIFICATION	1.2361354893083615E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999992233289122	WITHOUT_CLASSIFICATION	7.766710877130925E-7	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999984057173543	WITHOUT_CLASSIFICATION	1.5942826456819208E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999979236902454	WITHOUT_CLASSIFICATION	2.0763097545933355E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999994070921147	WITHOUT_CLASSIFICATION	5.929078853725239E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999986858566423	WITHOUT_CLASSIFICATION	1.3141433576973668E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999784137607	WITHOUT_CLASSIFICATION	2.158623929352665E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999315426618	WITHOUT_CLASSIFICATION	6.845733819967877E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999992690057231	WITHOUT_CLASSIFICATION	7.309942769209103E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999997177714669	WITHOUT_CLASSIFICATION	2.8222853318431154E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999111223784	WITHOUT_CLASSIFICATION	8.88776215435791E-8	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997829734645	WITHOUT_CLASSIFICATION	2.170265356168444E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999993982676721	WITHOUT_CLASSIFICATION	6.017323279452398E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999986858566423	WITHOUT_CLASSIFICATION	1.3141433576973668E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999783127348645	WITHOUT_CLASSIFICATION	2.1687265135539054E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999783127348645	WITHOUT_CLASSIFICATION	2.1687265135539054E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999197896858	WITHOUT_CLASSIFICATION	8.021031409612199E-8	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999995539332065	WITHOUT_CLASSIFICATION	4.460667934745281E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999995539332065	WITHOUT_CLASSIFICATION	4.460667934745281E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999989682528247	WITHOUT_CLASSIFICATION	1.0317471752884157E-6	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999970009123287	WITHOUT_CLASSIFICATION	2.9990876713164236E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999995570041597	WITHOUT_CLASSIFICATION	4.42995840253898E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999556796981	WITHOUT_CLASSIFICATION	4.432030183648215E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999999556796981	WITHOUT_CLASSIFICATION	4.432030183648215E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999814955816	WITHOUT_CLASSIFICATION	1.8504418391348722E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999786189576	WITHOUT_CLASSIFICATION	2.1381042403891635E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999786189576	WITHOUT_CLASSIFICATION	2.1381042403891635E-8	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999875219270885	WITHOUT_CLASSIFICATION	1.2478072911403636E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996430397797	WITHOUT_CLASSIFICATION	3.5696022029657524E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999998609623496	WITHOUT_CLASSIFICATION	1.3903765043493406E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999937268952414	WITHOUT_CLASSIFICATION	6.273104758688386E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999969665278989	WITHOUT_CLASSIFICATION	3.0334721009915942E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999970427122664	WITHOUT_CLASSIFICATION	2.9572877335830063E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999974616430912	WITHOUT_CLASSIFICATION	2.538356908773879E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999978649560839	WITHOUT_CLASSIFICATION	2.1350439161697504E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9985558594902796	WITHOUT_CLASSIFICATION	0.0014441405097204082	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999944096265053	WITHOUT_CLASSIFICATION	5.590373494751846E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999900693726222	WITHOUT_CLASSIFICATION	9.930627377805765E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957339191731	WITHOUT_CLASSIFICATION	4.266080827027209E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998978922379	WITHOUT_CLASSIFICATION	1.0210776215225745E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999617941697139	WITHOUT_CLASSIFICATION	3.820583028607802E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999776428049397	WITHOUT_CLASSIFICATION	2.2357195060324653E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957339191731	WITHOUT_CLASSIFICATION	4.266080827027209E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999912577188	WITHOUT_CLASSIFICATION	8.74228133642072E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999904350576	WITHOUT_CLASSIFICATION	9.564942440907896E-9	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999983143461089	WITHOUT_CLASSIFICATION	1.6856538912083398E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999960411981121	WITHOUT_CLASSIFICATION	3.9588018878138274E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999986347506296	WITHOUT_CLASSIFICATION	1.3652493704114624E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999997285934816	WITHOUT_CLASSIFICATION	2.7140651839331266E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999990205297964	WITHOUT_CLASSIFICATION	9.79470203591894E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999975136178518	WITHOUT_CLASSIFICATION	2.486382148280837E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999997256544942	WITHOUT_CLASSIFICATION	2.7434550579484376E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999346643577	WITHOUT_CLASSIFICATION	6.533564233896061E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999994558162102	WITHOUT_CLASSIFICATION	5.441837897416417E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999551961779	WITHOUT_CLASSIFICATION	4.480382208787247E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999964385869973	WITHOUT_CLASSIFICATION	3.561413002733235E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999974616430912	WITHOUT_CLASSIFICATION	2.538356908773879E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999997256544942	WITHOUT_CLASSIFICATION	2.7434550579484376E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999994558162102	WITHOUT_CLASSIFICATION	5.441837897416417E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999964385869973	WITHOUT_CLASSIFICATION	3.561413002733235E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999713626482	WITHOUT_CLASSIFICATION	2.863735171414383E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999926063122389	WITHOUT_CLASSIFICATION	7.393687761195673E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999916887187	WITHOUT_CLASSIFICATION	8.311281428581694E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999632151384	WITHOUT_CLASSIFICATION	3.6784861599727838E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999979389920165	WITHOUT_CLASSIFICATION	2.061007983522749E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999053845464	WITHOUT_CLASSIFICATION	9.461545357539085E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999974759002682	WITHOUT_CLASSIFICATION	2.524099731777881E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995584307584	WITHOUT_CLASSIFICATION	4.415692415800254E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999979833761569	WITHOUT_CLASSIFICATION	2.016623843071924E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999551080462	WITHOUT_CLASSIFICATION	4.489195388660349E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999989897581696	WITHOUT_CLASSIFICATION	1.010241830407962E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999993419015405	WITHOUT_CLASSIFICATION	6.580984594981533E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999924917002	WITHOUT_CLASSIFICATION	7.50829982113844E-9	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997023837423	WITHOUT_CLASSIFICATION	2.976162576658965E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999958533642155	WITHOUT_CLASSIFICATION	4.146635784595683E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999974629025447	WITHOUT_CLASSIFICATION	2.537097455296891E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999940987538378	WITHOUT_CLASSIFICATION	5.901246162228821E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999930407081135	WITHOUT_CLASSIFICATION	6.959291886490229E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999971003865481	WITHOUT_CLASSIFICATION	2.8996134518728644E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999997256544942	WITHOUT_CLASSIFICATION	2.7434550579484376E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998684499855	WITHOUT_CLASSIFICATION	1.3155001452329688E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999998986517384	WITHOUT_CLASSIFICATION	1.0134826149406005E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999729183855	WITHOUT_CLASSIFICATION	2.708161458446507E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9991108768554153	WITHOUT_CLASSIFICATION	8.891231445847387E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999996421164394	WITHOUT_CLASSIFICATION	3.578835606026764E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.99999969640669	WITHOUT_CLASSIFICATION	3.0359331000317253E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999993057309	WITHOUT_CLASSIFICATION	6.942691701850917E-10	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999944568386	WITHOUT_CLASSIFICATION	5.5431613996390735E-9	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999982734890864	WITHOUT_CLASSIFICATION	1.7265109134931953E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999955438307658	WITHOUT_CLASSIFICATION	4.456169234186444E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999981081565041	WITHOUT_CLASSIFICATION	1.89184349587521E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999963038417656	WITHOUT_CLASSIFICATION	3.6961582343564922E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999474478259	WITHOUT_CLASSIFICATION	5.255217401738137E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999655918097	WITHOUT_CLASSIFICATION	3.44081901805334E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999713875554	WITHOUT_CLASSIFICATION	2.861244460968297E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999540686123	WITHOUT_CLASSIFICATION	4.593138765491156E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999984608694974	WITHOUT_CLASSIFICATION	1.5391305025941054E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999999906148692	WITHOUT_CLASSIFICATION	9.385130801682674E-8	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999650710812	WITHOUT_CLASSIFICATION	3.4928918746677054E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999991941191658	WITHOUT_CLASSIFICATION	8.058808340828491E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999946162431	WITHOUT_CLASSIFICATION	5.383756898690688E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999992181472377	WITHOUT_CLASSIFICATION	7.81852762304678E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998692366333	WITHOUT_CLASSIFICATION	1.3076336670370123E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999962961264928	WITHOUT_CLASSIFICATION	3.7038735071699643E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999991779037093	WITHOUT_CLASSIFICATION	8.220962907617234E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999991779037093	WITHOUT_CLASSIFICATION	8.220962907617234E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999940140772555	WITHOUT_CLASSIFICATION	5.985922744405488E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999770878369	WITHOUT_CLASSIFICATION	2.2912163047930937E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999242710779	WITHOUT_CLASSIFICATION	7.572892221522746E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999998109386105	WITHOUT_CLASSIFICATION	1.890613895105587E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999984286046958	WITHOUT_CLASSIFICATION	1.5713953042339092E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996406548199	WITHOUT_CLASSIFICATION	3.593451800621631E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999268332448	WITHOUT_CLASSIFICATION	7.316675520342977E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999951551197509	WITHOUT_CLASSIFICATION	4.8448802491361205E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999956088546588	WITHOUT_CLASSIFICATION	4.391145341207043E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999993117938671	WITHOUT_CLASSIFICATION	6.882061329417613E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999980609454413	WITHOUT_CLASSIFICATION	1.939054558756026E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998012592224	WITHOUT_CLASSIFICATION	1.9874077759482018E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999986540264554	WITHOUT_CLASSIFICATION	1.3459735445168219E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.99999985942792	WITHOUT_CLASSIFICATION	1.4057207999848754E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998529672668	WITHOUT_CLASSIFICATION	1.470327332293527E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999264103366	WITHOUT_CLASSIFICATION	7.358966339385384E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999999249837107	WITHOUT_CLASSIFICATION	7.501628927446776E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998505417996	WITHOUT_CLASSIFICATION	1.494582003787579E-7	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999984931264985	WITHOUT_CLASSIFICATION	1.5068735015151767E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999992399173169	WITHOUT_CLASSIFICATION	7.60082683113331E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995589797142	WITHOUT_CLASSIFICATION	4.41020285728304E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995589797142	WITHOUT_CLASSIFICATION	4.41020285728304E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999966745423261	WITHOUT_CLASSIFICATION	3.325457673920985E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999966745423261	WITHOUT_CLASSIFICATION	3.325457673920985E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999998692366333	WITHOUT_CLASSIFICATION	1.3076336670370123E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997552807498	WITHOUT_CLASSIFICATION	2.447192501596639E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999938262110943	WITHOUT_CLASSIFICATION	6.173788905593116E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999969922346381	WITHOUT_CLASSIFICATION	3.007765361903942E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999938262110943	WITHOUT_CLASSIFICATION	6.173788905593116E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999969922346381	WITHOUT_CLASSIFICATION	3.007765361903942E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981681649149	WITHOUT_CLASSIFICATION	1.831835085031939E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999846896281573	WITHOUT_CLASSIFICATION	1.531037184265905E-5	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999879132114	WITHOUT_CLASSIFICATION	1.2086788600517204E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999069473845	WITHOUT_CLASSIFICATION	9.305261555742267E-8	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999974323117357	WITHOUT_CLASSIFICATION	2.5676882643480134E-6	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999934755532943	WITHOUT_CLASSIFICATION	6.524446705609641E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999912723601	WITHOUT_CLASSIFICATION	8.72763989385833E-8	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999992388919896	WITHOUT_CLASSIFICATION	7.611080103947197E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999983750411577	WITHOUT_CLASSIFICATION	1.624958842273399E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999946908622	WITHOUT_CLASSIFICATION	5.3091377973222334E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999998216576326	WITHOUT_CLASSIFICATION	1.7834236738581528E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999987566341	WITHOUT_CLASSIFICATION	1.2433657652102698E-9	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998323092546	WITHOUT_CLASSIFICATION	1.6769074531357715E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999737260522666	WITHOUT_CLASSIFICATION	2.6273947733329394E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999745178135213	WITHOUT_CLASSIFICATION	2.548218647875306E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998207434330603	WITHOUT_CLASSIFICATION	1.792565669396306E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998207434330603	WITHOUT_CLASSIFICATION	1.792565669396306E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999880405318	WITHOUT_CLASSIFICATION	1.1959468221980007E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981681649149	WITHOUT_CLASSIFICATION	1.831835085031939E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999994662476134	WITHOUT_CLASSIFICATION	5.337523865596662E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999920038902673	WITHOUT_CLASSIFICATION	7.996109732669257E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999992610765297	WITHOUT_CLASSIFICATION	7.389234702217664E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999933037446261	WITHOUT_CLASSIFICATION	6.6962553738587884E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999924496659871	WITHOUT_CLASSIFICATION	7.550334012893619E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981681649149	WITHOUT_CLASSIFICATION	1.831835085031939E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999933037446261	WITHOUT_CLASSIFICATION	6.6962553738587884E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999924496659871	WITHOUT_CLASSIFICATION	7.550334012893619E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999983778552523	WITHOUT_CLASSIFICATION	1.6221447476997238E-5	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999979038486444	WITHOUT_CLASSIFICATION	2.096151355523259E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999500671588	WITHOUT_CLASSIFICATION	4.993284120542828E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981681649149	WITHOUT_CLASSIFICATION	1.831835085031939E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981681649149	WITHOUT_CLASSIFICATION	1.831835085031939E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999993680036174	WITHOUT_CLASSIFICATION	6.319963824636354E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.999999684134905	WITHOUT_CLASSIFICATION	3.158650949849051E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999995308482829	WITHOUT_CLASSIFICATION	4.691517171685017E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999719371527	WITHOUT_CLASSIFICATION	2.806284726251791E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998147892623	WITHOUT_CLASSIFICATION	1.8521073769794623E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998923679567	WITHOUT_CLASSIFICATION	1.0763204331409676E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999995391705634	WITHOUT_CLASSIFICATION	4.608294365285781E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999350426919	WITHOUT_CLASSIFICATION	6.495730808615188E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999978872712	WITHOUT_CLASSIFICATION	2.1127288023551126E-8	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999991066213256	WITHOUT_CLASSIFICATION	8.933786744462723E-7	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999332186166	WITHOUT_CLASSIFICATION	6.678138346037415E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999997762827525	WITHOUT_CLASSIFICATION	2.2371724756947104E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997335439013	WITHOUT_CLASSIFICATION	2.6645609878709075E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999999017985243	WITHOUT_CLASSIFICATION	9.820147569376536E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998380981999	WITHOUT_CLASSIFICATION	1.6190180016394196E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999968133117676	WITHOUT_CLASSIFICATION	3.1866882325353824E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999996759469191	WITHOUT_CLASSIFICATION	3.240530808917294E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999705415079211	WITHOUT_CLASSIFICATION	2.945849207891772E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999928681486715	WITHOUT_CLASSIFICATION	7.131851328484501E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999768513342	WITHOUT_CLASSIFICATION	2.314866578825975E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999957457678491	WITHOUT_CLASSIFICATION	4.254232150856263E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999950014536139	WITHOUT_CLASSIFICATION	4.998546386228728E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999950014536139	WITHOUT_CLASSIFICATION	4.998546386228728E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999996759469191	WITHOUT_CLASSIFICATION	3.240530808917294E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997350568466509	WITHOUT_CLASSIFICATION	2.6494315334920634E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999889233703507	WITHOUT_CLASSIFICATION	1.107662964936835E-5	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999347844577016	WITHOUT_CLASSIFICATION	6.521554229841614E-5	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999996771841903	WITHOUT_CLASSIFICATION	3.2281580970521673E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928358776065	WITHOUT_CLASSIFICATION	7.164122393592817E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998482660395	WITHOUT_CLASSIFICATION	1.5173396050621179E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999739136166	WITHOUT_CLASSIFICATION	2.6086383464944927E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999996799876644	WITHOUT_CLASSIFICATION	3.2001233564168566E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999900748278	WITHOUT_CLASSIFICATION	9.925172120284364E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999945007482	WITHOUT_CLASSIFICATION	5.499251810335033E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996423258153	WITHOUT_CLASSIFICATION	3.576741847695459E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999823289449029	WITHOUT_CLASSIFICATION	1.7671055097086064E-5	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999716127289175	WITHOUT_CLASSIFICATION	2.838727108248984E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.99999999456561	WITHOUT_CLASSIFICATION	5.434390022078489E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999675462903	WITHOUT_CLASSIFICATION	3.245370974005405E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999992745887539	WITHOUT_CLASSIFICATION	7.254112461548937E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999969046434	WITHOUT_CLASSIFICATION	3.095356602973222E-9	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999992457223275	WITHOUT_CLASSIFICATION	7.542776725142706E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999691806878	WITHOUT_CLASSIFICATION	3.081931217682298E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999827147766	WITHOUT_CLASSIFICATION	1.7285223390758534E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999532929699	WITHOUT_CLASSIFICATION	4.670703018843047E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999622350385	WITHOUT_CLASSIFICATION	3.776496154406786E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998557487952	WITHOUT_CLASSIFICATION	1.4425120475374824E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977634819394	WITHOUT_CLASSIFICATION	2.236518060603686E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996548287995	WITHOUT_CLASSIFICATION	3.45171200517669E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996331805149	WITHOUT_CLASSIFICATION	3.668194850526272E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980955002133	WITHOUT_CLASSIFICATION	1.9044997867653307E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992919633659	WITHOUT_CLASSIFICATION	7.080366341595162E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994715965789	WITHOUT_CLASSIFICATION	5.284034210832824E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997909590796	WITHOUT_CLASSIFICATION	2.0904092033188204E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999998635144839	WITHOUT_CLASSIFICATION	1.3648551599331864E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999706459531	WITHOUT_CLASSIFICATION	2.9354046964808598E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999745900706	WITHOUT_CLASSIFICATION	2.5409929411974744E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995094728146	WITHOUT_CLASSIFICATION	4.905271853806107E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999420643041	WITHOUT_CLASSIFICATION	5.79356958466755E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981650643953	WITHOUT_CLASSIFICATION	1.8349356047844361E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999840001648	WITHOUT_CLASSIFICATION	1.599983519765098E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997945125739	WITHOUT_CLASSIFICATION	2.0548742616944775E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998336488652	WITHOUT_CLASSIFICATION	1.6635113475138796E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989349350177	WITHOUT_CLASSIFICATION	1.0650649823326872E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999979687934706	WITHOUT_CLASSIFICATION	2.031206529434388E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997846970935	WITHOUT_CLASSIFICATION	2.1530290655109531E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999944669291191	WITHOUT_CLASSIFICATION	5.533070880918853E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999859869699	WITHOUT_CLASSIFICATION	1.4013030113142992E-7	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999840317648	WITHOUT_CLASSIFICATION	1.5968235241264444E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997795325396975	WITHOUT_CLASSIFICATION	2.2046746030248985E-4	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999981742278411	WITHOUT_CLASSIFICATION	1.825772158934751E-6	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999988180993334	WITHOUT_CLASSIFICATION	1.1819006665836527E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999982685646093	WITHOUT_CLASSIFICATION	1.7314353907506011E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999982625836824	WITHOUT_CLASSIFICATION	1.7374163176406782E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999976733692589	WITHOUT_CLASSIFICATION	2.326630741016737E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999924490761541	WITHOUT_CLASSIFICATION	7.550923845880011E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999982088595167	WITHOUT_CLASSIFICATION	1.7911404832859684E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999983762613038	WITHOUT_CLASSIFICATION	1.6237386961427837E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995455232272	WITHOUT_CLASSIFICATION	4.544767726927769E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999997502225686	WITHOUT_CLASSIFICATION	2.497774313871858E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999999792056084	WITHOUT_CLASSIFICATION	2.07943915965722E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999963466112324	WITHOUT_CLASSIFICATION	3.653388767589293E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999974548861	WITHOUT_CLASSIFICATION	2.54511386624068E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998565255281	WITHOUT_CLASSIFICATION	1.4347447181782764E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998437256205	WITHOUT_CLASSIFICATION	1.5627437966751518E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992059345121	WITHOUT_CLASSIFICATION	7.940654879208108E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997520254662	WITHOUT_CLASSIFICATION	2.4797453376019894E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999929473382375	WITHOUT_CLASSIFICATION	7.052661762569946E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999986329801	WITHOUT_CLASSIFICATION	1.3670198971138485E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999725471012	WITHOUT_CLASSIFICATION	2.7452898841646316E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999490857819	WITHOUT_CLASSIFICATION	5.091421806011076E-8	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989076701838	WITHOUT_CLASSIFICATION	1.0923298162087158E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999839145151	WITHOUT_CLASSIFICATION	1.608548498852393E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999966364142339	WITHOUT_CLASSIFICATION	3.3635857660552677E-6	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999461177184	WITHOUT_CLASSIFICATION	5.388228164986572E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999998016094	WITHOUT_CLASSIFICATION	1.983906029752928E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999940820646824	WITHOUT_CLASSIFICATION	5.917935317583757E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999579491716	WITHOUT_CLASSIFICATION	4.205082835238372E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999445223736	WITHOUT_CLASSIFICATION	5.547762649984779E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999984635928799	WITHOUT_CLASSIFICATION	1.5364071200228055E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997795325396975	WITHOUT_CLASSIFICATION	2.2046746030248985E-4	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999171131442	WITHOUT_CLASSIFICATION	8.288685583205822E-8	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999915972066	WITHOUT_CLASSIFICATION	8.402793364489563E-9	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999821905295	WITHOUT_CLASSIFICATION	1.780947038156486E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999810594858	WITHOUT_CLASSIFICATION	1.894051419769495E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999818887848	WITHOUT_CLASSIFICATION	1.8111215185829567E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999994235866893	WITHOUT_CLASSIFICATION	5.764133106696453E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999671368520225	WITHOUT_CLASSIFICATION	3.286314797754991E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997041996845	WITHOUT_CLASSIFICATION	2.958003154549236E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999701915854	WITHOUT_CLASSIFICATION	2.980841463466945E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999959312793	WITHOUT_CLASSIFICATION	4.068720708280382E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999998591099	WITHOUT_CLASSIFICATION	1.4089009992160175E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999833537668	WITHOUT_CLASSIFICATION	1.664623318582973E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999482797804	WITHOUT_CLASSIFICATION	5.1720219606770466E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999959904272	WITHOUT_CLASSIFICATION	4.009572753013882E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999968677429026	WITHOUT_CLASSIFICATION	3.1322570974006556E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997325426605	WITHOUT_CLASSIFICATION	2.6745733954226565E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999975996220564	WITHOUT_CLASSIFICATION	2.4003779437189235E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998971973	WITHOUT_CLASSIFICATION	1.0280270000577527E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999256238902	WITHOUT_CLASSIFICATION	7.437610974911582E-8	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999967046020298	WITHOUT_CLASSIFICATION	3.295397970118186E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999937179033	WITHOUT_CLASSIFICATION	6.282096844199266E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999991131583127	WITHOUT_CLASSIFICATION	8.868416871699493E-7	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999992724989232	WITHOUT_CLASSIFICATION	7.275010768675318E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998463470824	WITHOUT_CLASSIFICATION	1.536529176694596E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994479531136	WITHOUT_CLASSIFICATION	5.520468864948581E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.999999604550325	WITHOUT_CLASSIFICATION	3.9544967497894196E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997630359511893	WITHOUT_CLASSIFICATION	2.3696404881056205E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998268905236	WITHOUT_CLASSIFICATION	1.7310947646418686E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996527450367	WITHOUT_CLASSIFICATION	3.4725496327089807E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999074041065	WITHOUT_CLASSIFICATION	9.259589353478614E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997795325396975	WITHOUT_CLASSIFICATION	2.2046746030248985E-4	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999999510088382	WITHOUT_CLASSIFICATION	4.899116180249372E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999154067982	WITHOUT_CLASSIFICATION	8.459320179154879E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998679477515797	WITHOUT_CLASSIFICATION	1.3205224842029124E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997795325396975	WITHOUT_CLASSIFICATION	2.2046746030248985E-4	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992716578989	WITHOUT_CLASSIFICATION	7.283421009613356E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999937179033	WITHOUT_CLASSIFICATION	6.282096844199266E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999951704067152	WITHOUT_CLASSIFICATION	4.829593284889998E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9991797446674211	WITHOUT_CLASSIFICATION	8.202553325788218E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999996130002481	WITHOUT_CLASSIFICATION	3.869997519088862E-6	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999959312793	WITHOUT_CLASSIFICATION	4.068720708280382E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.99999998591099	WITHOUT_CLASSIFICATION	1.4089009992160175E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999833537668	WITHOUT_CLASSIFICATION	1.664623318582973E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999982891058643	WITHOUT_CLASSIFICATION	1.7108941357175788E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999996511250344	WITHOUT_CLASSIFICATION	3.48874965651799E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999992894217239	WITHOUT_CLASSIFICATION	7.105782760638592E-7	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997946167519	WITHOUT_CLASSIFICATION	2.0538324806731753E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999994359259363	WITHOUT_CLASSIFICATION	5.640740637583271E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997795325396975	WITHOUT_CLASSIFICATION	2.2046746030248985E-4	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999482797804	WITHOUT_CLASSIFICATION	5.1720219606770466E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999959904272	WITHOUT_CLASSIFICATION	4.009572753013882E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999653033808	WITHOUT_CLASSIFICATION	3.469661927100216E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999793459903	WITHOUT_CLASSIFICATION	2.0654009765180683E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999997252944968	WITHOUT_CLASSIFICATION	2.74705503269047E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999984193564031	WITHOUT_CLASSIFICATION	1.5806435968872036E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999984640188573	WITHOUT_CLASSIFICATION	1.5359811427521638E-6	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999561184003	WITHOUT_CLASSIFICATION	4.3881599632098016E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989349350177	WITHOUT_CLASSIFICATION	1.0650649823326872E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999997356442292	WITHOUT_CLASSIFICATION	2.6435577080371923E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999914307620648	WITHOUT_CLASSIFICATION	8.569237935228629E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999993010577682	WITHOUT_CLASSIFICATION	6.989422316707267E-7	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999974315613	WITHOUT_CLASSIFICATION	2.5684387104029897E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999751951664	WITHOUT_CLASSIFICATION	2.4804833720395168E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980955002133	WITHOUT_CLASSIFICATION	1.9044997867653307E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992919633659	WITHOUT_CLASSIFICATION	7.080366341595162E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995094728146	WITHOUT_CLASSIFICATION	4.905271853806107E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999751951664	WITHOUT_CLASSIFICATION	2.4804833720395168E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999915384647	WITHOUT_CLASSIFICATION	8.461535172567348E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999952627879	WITHOUT_CLASSIFICATION	4.7372120984719014E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998036745336	WITHOUT_CLASSIFICATION	1.9632546641596036E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993319715978	WITHOUT_CLASSIFICATION	6.680284022423978E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999998242032251	WITHOUT_CLASSIFICATION	1.7579677497636548E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999788056437131	WITHOUT_CLASSIFICATION	2.119435628688184E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999420643041	WITHOUT_CLASSIFICATION	5.79356958466755E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997945125739	WITHOUT_CLASSIFICATION	2.0548742616944775E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999998016094	WITHOUT_CLASSIFICATION	1.983906029752928E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999993371144533	WITHOUT_CLASSIFICATION	6.628855466428857E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999953852748	WITHOUT_CLASSIFICATION	4.614725162658674E-9	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999769990752	WITHOUT_CLASSIFICATION	2.3000924754212553E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999926207234747	WITHOUT_CLASSIFICATION	7.379276525224062E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999997802645995	WITHOUT_CLASSIFICATION	2.1973540049341538E-7	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998096025	WITHOUT_CLASSIFICATION	1.9039749988405588E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999982476373821	WITHOUT_CLASSIFICATION	1.7523626179687698E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999900748278	WITHOUT_CLASSIFICATION	9.925172120284364E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999668440602	WITHOUT_CLASSIFICATION	3.3155939716044285E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999828043724	WITHOUT_CLASSIFICATION	1.719562764510461E-8	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998999601247	WITHOUT_CLASSIFICATION	1.0003987536731924E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999982544596749	WITHOUT_CLASSIFICATION	1.7455403249781325E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999797303906	WITHOUT_CLASSIFICATION	2.0269609380609202E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990273038899	WITHOUT_CLASSIFICATION	9.726961101159161E-7	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999277508312	WITHOUT_CLASSIFICATION	7.224916877032891E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998906618348	WITHOUT_CLASSIFICATION	1.0933816506905026E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998740200313	WITHOUT_CLASSIFICATION	1.259799686168284E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999998478662298	WITHOUT_CLASSIFICATION	1.5213377020506688E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999893831960625	WITHOUT_CLASSIFICATION	1.0616803937619837E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997934523676	WITHOUT_CLASSIFICATION	2.0654763233151387E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998585894684	WITHOUT_CLASSIFICATION	1.4141053156854052E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999663869636	WITHOUT_CLASSIFICATION	3.361303635426291E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999322785215	WITHOUT_CLASSIFICATION	6.772147855205722E-8	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999999006599769	WITHOUT_CLASSIFICATION	9.934002301221607E-8	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999997301132701	WITHOUT_CLASSIFICATION	2.6988672990164406E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999619060096	WITHOUT_CLASSIFICATION	3.8093990424035315E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999999759007796	WITHOUT_CLASSIFICATION	2.4099220397110865E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997882471012	WITHOUT_CLASSIFICATION	2.1175289880617116E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998523785146	WITHOUT_CLASSIFICATION	1.4762148526394027E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999998940118044	WITHOUT_CLASSIFICATION	1.0598819557163382E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999984552503828	WITHOUT_CLASSIFICATION	1.544749617318888E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999429544321	WITHOUT_CLASSIFICATION	5.7045568047701145E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999734897372	WITHOUT_CLASSIFICATION	2.6510262768700278E-8	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999973975538907	WITHOUT_CLASSIFICATION	2.602446109302784E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999665448818266	WITHOUT_CLASSIFICATION	3.345511817349421E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999982948874924	WITHOUT_CLASSIFICATION	1.7051125075561777E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999706460494	WITHOUT_CLASSIFICATION	2.9353950550192716E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999990178045622	WITHOUT_CLASSIFICATION	9.821954377468022E-7	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999706165025	WITHOUT_CLASSIFICATION	2.9383497570467256E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999962083662	WITHOUT_CLASSIFICATION	3.791633793635321E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999990972096655	WITHOUT_CLASSIFICATION	9.027903345148913E-7	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999882720306964	WITHOUT_CLASSIFICATION	1.1727969303644082E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999510224573	WITHOUT_CLASSIFICATION	4.897754270354228E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999993094887686	WITHOUT_CLASSIFICATION	6.905112314027345E-6	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999999764720089	WITHOUT_CLASSIFICATION	2.3527991090363433E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999990318899992	WITHOUT_CLASSIFICATION	9.681100008707594E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993145853524	WITHOUT_CLASSIFICATION	6.854146476153321E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998911452564262	WITHOUT_CLASSIFICATION	1.0885474357381684E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999525788321068	WITHOUT_CLASSIFICATION	4.742116789322877E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999736273578	WITHOUT_CLASSIFICATION	2.6372642103404706E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999982210427919	WITHOUT_CLASSIFICATION	1.778957208165349E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999890465738	WITHOUT_CLASSIFICATION	1.0953426090535177E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999997108821204	WITHOUT_CLASSIFICATION	2.8911787971781767E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999997068399878	WITHOUT_CLASSIFICATION	2.9316001213592486E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999648458703	WITHOUT_CLASSIFICATION	3.515412982802015E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999748517056	WITHOUT_CLASSIFICATION	2.5148294432518686E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993252667657	WITHOUT_CLASSIFICATION	6.747332343177744E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999131063214	WITHOUT_CLASSIFICATION	8.689367854745285E-8	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999779281662	WITHOUT_CLASSIFICATION	2.207183382752441E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997507222123	WITHOUT_CLASSIFICATION	2.492777877995427E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998724882058	WITHOUT_CLASSIFICATION	1.2751179425641366E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999933602747	WITHOUT_CLASSIFICATION	6.639725308636114E-9	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999995714151106	WITHOUT_CLASSIFICATION	4.285848894109865E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999997221683975	WITHOUT_CLASSIFICATION	2.778316025995035E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999998627544757	WITHOUT_CLASSIFICATION	1.3724552419827655E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999999017718467	WITHOUT_CLASSIFICATION	9.822815326920377E-8	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999995223287911	WITHOUT_CLASSIFICATION	4.776712088696888E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999998063804413	WITHOUT_CLASSIFICATION	1.9361955872222147E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999999212302191	WITHOUT_CLASSIFICATION	7.8769780833969E-8	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999987062007899	WITHOUT_CLASSIFICATION	1.2937992101367894E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.99999962819253	WITHOUT_CLASSIFICATION	3.71807470049251E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999999305432266	WITHOUT_CLASSIFICATION	6.945677340328903E-7	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999979107750502	WITHOUT_CLASSIFICATION	2.0892249497384493E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999925244233744	WITHOUT_CLASSIFICATION	7.4755766256599855E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998212323586	WITHOUT_CLASSIFICATION	1.7876764142024242E-7	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998935467018	WITHOUT_CLASSIFICATION	1.0645329813440947E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999898017054997	WITHOUT_CLASSIFICATION	1.0198294500369457E-5	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999895579664851	WITHOUT_CLASSIFICATION	1.0442033514920556E-5	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999999462928194	WITHOUT_CLASSIFICATION	5.370718061288045E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999676747102	WITHOUT_CLASSIFICATION	3.2325289794422777E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999987228546491	WITHOUT_CLASSIFICATION	1.277145350891413E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999208896301	WITHOUT_CLASSIFICATION	7.911036998698295E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999992560930233	WITHOUT_CLASSIFICATION	7.439069766801601E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999944110667973	WITHOUT_CLASSIFICATION	5.588933202714981E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999982593038049	WITHOUT_CLASSIFICATION	1.7406961950981006E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998988829109489	WITHOUT_CLASSIFICATION	1.0111708905113852E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999960803093666	WITHOUT_CLASSIFICATION	3.919690633404968E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999987303978027	WITHOUT_CLASSIFICATION	1.2696021973393878E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999959854573252	WITHOUT_CLASSIFICATION	4.014542674867441E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982863956905	WITHOUT_CLASSIFICATION	1.7136043094900402E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997744188852	WITHOUT_CLASSIFICATION	2.2558111482223757E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999938926145515	WITHOUT_CLASSIFICATION	6.107385448480619E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999958040995894	WITHOUT_CLASSIFICATION	4.195900410521932E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999813481898625	WITHOUT_CLASSIFICATION	1.865181013743467E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999990935604214	WITHOUT_CLASSIFICATION	9.064395785990974E-7	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999940308582324	WITHOUT_CLASSIFICATION	5.969141767559237E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998604170629	WITHOUT_CLASSIFICATION	1.39582937103917E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999998139181	WITHOUT_CLASSIFICATION	1.8608194299399473E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999992182073046	WITHOUT_CLASSIFICATION	7.817926954154404E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999914790087346	WITHOUT_CLASSIFICATION	8.52099126544586E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999974476181474	WITHOUT_CLASSIFICATION	2.5523818527111195E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999992182073046	WITHOUT_CLASSIFICATION	7.817926954154404E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999853529334	WITHOUT_CLASSIFICATION	1.4647066611172158E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997946385886	WITHOUT_CLASSIFICATION	2.053614114996716E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999982693133075	WITHOUT_CLASSIFICATION	1.7306866925274667E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999967640069443	WITHOUT_CLASSIFICATION	3.2359930557599486E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999765862937	WITHOUT_CLASSIFICATION	2.341370638037894E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999529015146	WITHOUT_CLASSIFICATION	4.709848535448135E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999765410606778	WITHOUT_CLASSIFICATION	2.345893932230747E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999660471138	WITHOUT_CLASSIFICATION	3.395288619903647E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999999987886591	WITHOUT_CLASSIFICATION	1.2113408970337823E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999978266756256	WITHOUT_CLASSIFICATION	2.173324374286231E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999856499195	WITHOUT_CLASSIFICATION	1.4350080424379395E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999182976275	WITHOUT_CLASSIFICATION	8.170237249185442E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999110634055	WITHOUT_CLASSIFICATION	8.893659450570261E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999968936609088	WITHOUT_CLASSIFICATION	3.1063390911255653E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998982205839	WITHOUT_CLASSIFICATION	1.0177941614960284E-7	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999989581258372	WITHOUT_CLASSIFICATION	1.0418741629007152E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999923504635597	WITHOUT_CLASSIFICATION	7.649536440290394E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999923504635597	WITHOUT_CLASSIFICATION	7.649536440290394E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999888878538	WITHOUT_CLASSIFICATION	1.1112146101397716E-8	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999830000737213	WITHOUT_CLASSIFICATION	1.69999262787312E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999895575829361	WITHOUT_CLASSIFICATION	1.0442417063913677E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999884593332181	WITHOUT_CLASSIFICATION	1.1540666781857889E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999533376582	WITHOUT_CLASSIFICATION	4.6662341826726594E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999646760142629	WITHOUT_CLASSIFICATION	3.532398573722095E-5	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.999996751175324	WITHOUT_CLASSIFICATION	3.248824675906935E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999996950296	WITHOUT_CLASSIFICATION	3.0497040584436913E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999997665748461	WITHOUT_CLASSIFICATION	2.3342515397183178E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999998895105646	WITHOUT_CLASSIFICATION	1.1048943545403283E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999997543241909	WITHOUT_CLASSIFICATION	2.456758091476618E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999998029235	WITHOUT_CLASSIFICATION	1.9707650862084304E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999999802355738	WITHOUT_CLASSIFICATION	1.9764426203813606E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999990466188344	WITHOUT_CLASSIFICATION	9.533811655400827E-7	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999910458263	WITHOUT_CLASSIFICATION	8.954173800207954E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999990273038899	WITHOUT_CLASSIFICATION	9.726961101159161E-7	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999900315315675	WITHOUT_CLASSIFICATION	9.968468432528586E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998978917745	WITHOUT_CLASSIFICATION	1.0210822559139151E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999962318162126	WITHOUT_CLASSIFICATION	3.7681837875686364E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.996271135490969	WITHOUT_CLASSIFICATION	0.003728864509030984	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999999991444616	WITHOUT_CLASSIFICATION	8.555383858074568E-9	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.999996416531205	WITHOUT_CLASSIFICATION	3.583468794941932E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999491309112	WITHOUT_CLASSIFICATION	5.086908891539405E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999161461957	WITHOUT_CLASSIFICATION	8.385380441164158E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999968611197	WITHOUT_CLASSIFICATION	3.1388803475165576E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999964828148	WITHOUT_CLASSIFICATION	3.5171851943072513E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999993173035068	WITHOUT_CLASSIFICATION	6.826964932216946E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999501912097	WITHOUT_CLASSIFICATION	4.9808790374029386E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999960290713548	WITHOUT_CLASSIFICATION	3.970928645277716E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999990205362618	WITHOUT_CLASSIFICATION	9.794637381908207E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999994096470852	WITHOUT_CLASSIFICATION	5.903529146770673E-7	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997615528999	WITHOUT_CLASSIFICATION	2.3844710013225544E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999936159844622	WITHOUT_CLASSIFICATION	6.384015537653392E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970636311223	WITHOUT_CLASSIFICATION	2.9363688776516737E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999992626553811	WITHOUT_CLASSIFICATION	7.373446189151653E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998442640533	WITHOUT_CLASSIFICATION	1.5573594675367626E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999998623424096	WITHOUT_CLASSIFICATION	1.3765759039257994E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999997061021687	WITHOUT_CLASSIFICATION	2.938978312348351E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997485399402	WITHOUT_CLASSIFICATION	2.514600597039804E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999995147868894	WITHOUT_CLASSIFICATION	4.852131106114327E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999991296097115	WITHOUT_CLASSIFICATION	8.703902886027042E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999996363110991	WITHOUT_CLASSIFICATION	3.6368890100390083E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999850245029	WITHOUT_CLASSIFICATION	1.497549710630802E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999751895713	WITHOUT_CLASSIFICATION	2.4810428632248625E-8	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996108103953	WITHOUT_CLASSIFICATION	3.891896046850591E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999199400667	WITHOUT_CLASSIFICATION	8.00599333135572E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997885755624	WITHOUT_CLASSIFICATION	2.1142443754676392E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998331388111	WITHOUT_CLASSIFICATION	1.6686118893479736E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998317824532	WITHOUT_CLASSIFICATION	1.6821754676519297E-7	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999955557739	WITHOUT_CLASSIFICATION	4.4442261976701E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999987137528	WITHOUT_CLASSIFICATION	1.2862472073847133E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997259644892	WITHOUT_CLASSIFICATION	2.740355107900321E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999991437505	WITHOUT_CLASSIFICATION	8.56249532011967E-10	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997845702578	WITHOUT_CLASSIFICATION	2.1542974211834782E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998004158699	WITHOUT_CLASSIFICATION	1.9958413002860233E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999997845702578	WITHOUT_CLASSIFICATION	2.1542974211834782E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994460124261	WITHOUT_CLASSIFICATION	5.539875739030237E-7	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998378270518	WITHOUT_CLASSIFICATION	1.6217294820468366E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.999999573906176	WITHOUT_CLASSIFICATION	4.260938240212125E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999421185451	WITHOUT_CLASSIFICATION	5.7881454940103756E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999991817120114	WITHOUT_CLASSIFICATION	8.182879886168248E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999919133560452	WITHOUT_CLASSIFICATION	8.086643954776898E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999603592961	WITHOUT_CLASSIFICATION	3.9640703934929337E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998457949472	WITHOUT_CLASSIFICATION	1.54205052903596E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999416072454	WITHOUT_CLASSIFICATION	5.839275458491691E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999927701951216	WITHOUT_CLASSIFICATION	7.229804878365054E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999921477326	WITHOUT_CLASSIFICATION	7.852267301491351E-9	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999969104302	WITHOUT_CLASSIFICATION	3.0895697722545256E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999957817638149	WITHOUT_CLASSIFICATION	4.218236185169226E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999984827374147	WITHOUT_CLASSIFICATION	1.5172625853136785E-6	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999309597905	WITHOUT_CLASSIFICATION	6.904020958984766E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999988294096	WITHOUT_CLASSIFICATION	1.1705904261982174E-9	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999877931564014	WITHOUT_CLASSIFICATION	1.2206843598583951E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999877931564014	WITHOUT_CLASSIFICATION	1.2206843598583951E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999993329732072	WITHOUT_CLASSIFICATION	6.67026792798732E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999961619421562	WITHOUT_CLASSIFICATION	3.838057843691155E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999995314539	WITHOUT_CLASSIFICATION	4.685460953763547E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999705664344	WITHOUT_CLASSIFICATION	2.9433565528816196E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999018885374	WITHOUT_CLASSIFICATION	9.811146263969361E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995445698173	WITHOUT_CLASSIFICATION	4.554301826742219E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999986999174111	WITHOUT_CLASSIFICATION	1.3000825889884885E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999973442001671	WITHOUT_CLASSIFICATION	2.6557998329349853E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999996320572466	WITHOUT_CLASSIFICATION	3.679427533284676E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999993870705	WITHOUT_CLASSIFICATION	6.1292948896389684E-9	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998810524532	WITHOUT_CLASSIFICATION	1.1894754668765665E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997781572	WITHOUT_CLASSIFICATION	2.2184279999456226E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999748059674	WITHOUT_CLASSIFICATION	2.519403265285213E-8	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998772673857	WITHOUT_CLASSIFICATION	1.2273261437874003E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998599597775	WITHOUT_CLASSIFICATION	1.4004022252480066E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997884335343	WITHOUT_CLASSIFICATION	2.1156646562423927E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999484442141	WITHOUT_CLASSIFICATION	5.155578578192599E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999998001878068	WITHOUT_CLASSIFICATION	1.9981219320906587E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999449708974	WITHOUT_CLASSIFICATION	5.5029102724261155E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.99999999974237	WITHOUT_CLASSIFICATION	2.5762999572842103E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998526366111	WITHOUT_CLASSIFICATION	1.4736338889502215E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999541946091	WITHOUT_CLASSIFICATION	4.58053908454861E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999845264084	WITHOUT_CLASSIFICATION	1.5473591542865694E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999938829722	WITHOUT_CLASSIFICATION	6.1170277474745035E-9	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999990150554812	WITHOUT_CLASSIFICATION	9.849445187695523E-7	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997443614422	WITHOUT_CLASSIFICATION	2.5563855772299163E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999993417954814	WITHOUT_CLASSIFICATION	6.582045184981339E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999998720324922	WITHOUT_CLASSIFICATION	1.2796750780049331E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999943068624597	WITHOUT_CLASSIFICATION	5.693137540289979E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999987861749783	WITHOUT_CLASSIFICATION	1.2138250217422507E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999908959240386	WITHOUT_CLASSIFICATION	9.104075961404245E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999986834868877	WITHOUT_CLASSIFICATION	1.3165131123846295E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999402256330666	WITHOUT_CLASSIFICATION	5.977436693349543E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999965090868035	WITHOUT_CLASSIFICATION	3.4909131965620834E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999993767278946	WITHOUT_CLASSIFICATION	6.232721052767241E-7	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999757054074	WITHOUT_CLASSIFICATION	2.4294592521572153E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999847661559	WITHOUT_CLASSIFICATION	1.5233844088913964E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999991568560938	WITHOUT_CLASSIFICATION	8.431439062128517E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999697684232	WITHOUT_CLASSIFICATION	3.023157671562491E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999539709168	WITHOUT_CLASSIFICATION	4.602908322096818E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999658009424	WITHOUT_CLASSIFICATION	3.41990574794408E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991849177743	WITHOUT_CLASSIFICATION	8.150822257866701E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999967680162962	WITHOUT_CLASSIFICATION	3.2319837036853856E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999784511726	WITHOUT_CLASSIFICATION	2.154882741497243E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999969224067	WITHOUT_CLASSIFICATION	3.0775933131204247E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999999873322186	WITHOUT_CLASSIFICATION	1.2667781320500338E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999561791371	WITHOUT_CLASSIFICATION	4.3820862872060774E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999849783837	WITHOUT_CLASSIFICATION	1.5021616322327748E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999999408137092	WITHOUT_CLASSIFICATION	5.918629061479235E-8	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999965382750873	WITHOUT_CLASSIFICATION	3.4617249127995466E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986858654492	WITHOUT_CLASSIFICATION	1.3141345508257839E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999997542543701	WITHOUT_CLASSIFICATION	2.4574562990185388E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999987087463067	WITHOUT_CLASSIFICATION	1.2912536933227878E-6	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999991456706095	WITHOUT_CLASSIFICATION	8.543293903546908E-7	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999965522811958	WITHOUT_CLASSIFICATION	3.447718804197876E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992716578989	WITHOUT_CLASSIFICATION	7.283421009613356E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992716578989	WITHOUT_CLASSIFICATION	7.283421009613356E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998878151361179	WITHOUT_CLASSIFICATION	1.1218486388206114E-4	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.99999684405881	WITHOUT_CLASSIFICATION	3.1559411900898328E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999502749242	WITHOUT_CLASSIFICATION	4.972507585649628E-8	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999681233317	WITHOUT_CLASSIFICATION	3.187666820783789E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999769783977	WITHOUT_CLASSIFICATION	2.3021602181858766E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999999230686323	WITHOUT_CLASSIFICATION	7.693136777901628E-8	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999750140061	WITHOUT_CLASSIFICATION	2.4985993869835455E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999996078143455	WITHOUT_CLASSIFICATION	3.9218565451342826E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999573562948257	WITHOUT_CLASSIFICATION	4.264370517422756E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999770011693	WITHOUT_CLASSIFICATION	2.299883072778553E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999952188655848	WITHOUT_CLASSIFICATION	4.781134415164993E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998328282198	WITHOUT_CLASSIFICATION	1.6717178019253946E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999861936414363	WITHOUT_CLASSIFICATION	1.3806358563710073E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999915855335	WITHOUT_CLASSIFICATION	8.414466405320705E-9	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996308701307	WITHOUT_CLASSIFICATION	3.691298694058002E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999987879247572	WITHOUT_CLASSIFICATION	1.2120752429123851E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999999035991	WITHOUT_CLASSIFICATION	9.640089567728872E-10	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999973048310974	WITHOUT_CLASSIFICATION	2.6951689026650108E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999981868154276	WITHOUT_CLASSIFICATION	1.813184572366136E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997710685352	WITHOUT_CLASSIFICATION	2.2893146489229578E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999748365141	WITHOUT_CLASSIFICATION	2.516348587982566E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999994135394038	WITHOUT_CLASSIFICATION	5.864605960675384E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999850610624791	WITHOUT_CLASSIFICATION	1.4938937520859323E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999770276216	WITHOUT_CLASSIFICATION	2.2972378395505822E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998725332743	WITHOUT_CLASSIFICATION	1.2746672571210763E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999992871142209	WITHOUT_CLASSIFICATION	7.128857789926493E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999983485061581	WITHOUT_CLASSIFICATION	1.651493841938207E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999715928242745	WITHOUT_CLASSIFICATION	2.840717572538977E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999444719864	WITHOUT_CLASSIFICATION	5.55280136635795E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999850610624791	WITHOUT_CLASSIFICATION	1.4938937520859323E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998417946222	WITHOUT_CLASSIFICATION	1.5820537789166255E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999995547141	WITHOUT_CLASSIFICATION	4.452859200138717E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.999870406822311	WITHOUT_CLASSIFICATION	1.2959317768899108E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999991657094034	WITHOUT_CLASSIFICATION	8.342905966950791E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999693583923	WITHOUT_CLASSIFICATION	3.064160761952264E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999854237692184	WITHOUT_CLASSIFICATION	1.4576230781612988E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999665273536	WITHOUT_CLASSIFICATION	3.347264633862479E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999269779407	WITHOUT_CLASSIFICATION	7.302205935250897E-8	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999998771175635	WITHOUT_CLASSIFICATION	1.2288243649371004E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999991657094034	WITHOUT_CLASSIFICATION	8.342905966950791E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999947136939074	WITHOUT_CLASSIFICATION	5.286306092700678E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999223010635	WITHOUT_CLASSIFICATION	7.769893656342654E-8	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999998182885589	WITHOUT_CLASSIFICATION	1.817114411064611E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999881668419021	WITHOUT_CLASSIFICATION	1.1833158097910433E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999996862518956	WITHOUT_CLASSIFICATION	3.137481043660852E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998810524532	WITHOUT_CLASSIFICATION	1.1894754668765665E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998889532675	WITHOUT_CLASSIFICATION	1.1104673248991598E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999973000682242	WITHOUT_CLASSIFICATION	2.6999317757642337E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999995705076261	WITHOUT_CLASSIFICATION	4.294923739069959E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998298679882	WITHOUT_CLASSIFICATION	1.7013201178963312E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999901179530678	WITHOUT_CLASSIFICATION	9.88204693216068E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.999999160206236	WITHOUT_CLASSIFICATION	8.397937640430298E-7	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999899490366748	WITHOUT_CLASSIFICATION	1.0050963325189738E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999991285904914	WITHOUT_CLASSIFICATION	8.714095086024694E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999970961876767	WITHOUT_CLASSIFICATION	2.903812323199613E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999999100717061	WITHOUT_CLASSIFICATION	8.992829394669969E-8	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999805386483085	WITHOUT_CLASSIFICATION	1.9461351691498564E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999753018778	WITHOUT_CLASSIFICATION	2.4698122314185424E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999355334439	WITHOUT_CLASSIFICATION	6.446655604922178E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999997025129919	WITHOUT_CLASSIFICATION	2.9748700819661334E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999956079062	WITHOUT_CLASSIFICATION	4.3920938186023315E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999997227130201	WITHOUT_CLASSIFICATION	2.7728697990330327E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999984552945016	WITHOUT_CLASSIFICATION	1.5447054983861249E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999999506180036	WITHOUT_CLASSIFICATION	4.938199640907309E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999998634078252	WITHOUT_CLASSIFICATION	1.3659217476401772E-7	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999923323530241	WITHOUT_CLASSIFICATION	7.667646975944608E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999998634416191	WITHOUT_CLASSIFICATION	1.365583809059492E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999928316896	WITHOUT_CLASSIFICATION	7.168310380177183E-9	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999994674407662	WITHOUT_CLASSIFICATION	5.32559233876055E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999991262311628	WITHOUT_CLASSIFICATION	8.737688371864926E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999983832212033	WITHOUT_CLASSIFICATION	1.616778796822927E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999933041869752	WITHOUT_CLASSIFICATION	6.695813024800927E-6	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999996035533039	WITHOUT_CLASSIFICATION	3.964466961092815E-7	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998002165532	WITHOUT_CLASSIFICATION	1.9978344673083044E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998374479709	WITHOUT_CLASSIFICATION	1.6255202904892937E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999998045647667	WITHOUT_CLASSIFICATION	1.9543523332233945E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999998207469727	WITHOUT_CLASSIFICATION	1.79253027334414E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997896559657	WITHOUT_CLASSIFICATION	2.1034403421044064E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999991397228	WITHOUT_CLASSIFICATION	8.60277108034656E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999997521124944	WITHOUT_CLASSIFICATION	2.478875056748652E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996234965683	WITHOUT_CLASSIFICATION	3.765034316676555E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999932926545	WITHOUT_CLASSIFICATION	6.707345349816918E-9	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999955797596	WITHOUT_CLASSIFICATION	4.420240391020013E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999998106388003	WITHOUT_CLASSIFICATION	1.8936119979252654E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999998315828221	WITHOUT_CLASSIFICATION	1.684171779203536E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999986387608059	WITHOUT_CLASSIFICATION	1.3612391941194376E-6	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999125009942	WITHOUT_CLASSIFICATION	8.749900582605946E-8	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999943692764	WITHOUT_CLASSIFICATION	5.630723559689168E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999969395292903	WITHOUT_CLASSIFICATION	3.0604707097543427E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997046652462	WITHOUT_CLASSIFICATION	2.953347537672989E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999833912534039	WITHOUT_CLASSIFICATION	1.660874659606923E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999977660072884	WITHOUT_CLASSIFICATION	2.2339927115278193E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999995061578585	WITHOUT_CLASSIFICATION	4.93842141459209E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999994762852837	WITHOUT_CLASSIFICATION	5.237147162430414E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999979187177901	WITHOUT_CLASSIFICATION	2.081282209809158E-6	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999991814974136	WITHOUT_CLASSIFICATION	8.185025863102492E-7	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999862871608	WITHOUT_CLASSIFICATION	1.3712839294034193E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999993774890699	WITHOUT_CLASSIFICATION	6.225109300909488E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999854773767	WITHOUT_CLASSIFICATION	1.4522623406257679E-8	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999998554646264	WITHOUT_CLASSIFICATION	1.4453537349048136E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999793660176652	WITHOUT_CLASSIFICATION	2.0633982334727668E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999976806809141	WITHOUT_CLASSIFICATION	2.3193190860278686E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998002165532	WITHOUT_CLASSIFICATION	1.9978344673083044E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999866316732	WITHOUT_CLASSIFICATION	1.3368326787884765E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999997604756	WITHOUT_CLASSIFICATION	2.39524394611357E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.999999286251054	WITHOUT_CLASSIFICATION	7.137489459966113E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999947664796874	WITHOUT_CLASSIFICATION	5.233520312617419E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999623541301	WITHOUT_CLASSIFICATION	3.764586986570505E-8	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999994780090402	WITHOUT_CLASSIFICATION	5.219909597413302E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999281200808	WITHOUT_CLASSIFICATION	7.18799191923111E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999616228463	WITHOUT_CLASSIFICATION	3.837715372692226E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999931919464	WITHOUT_CLASSIFICATION	6.8080536494135E-9	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999982053064708	WITHOUT_CLASSIFICATION	1.79469352933208E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999960300623	WITHOUT_CLASSIFICATION	3.9699377268519E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999041905012679	WITHOUT_CLASSIFICATION	9.580949873201778E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999491756753	WITHOUT_CLASSIFICATION	5.08243247109959E-8	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999992952276914	WITHOUT_CLASSIFICATION	7.047723085653133E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994460124261	WITHOUT_CLASSIFICATION	5.539875739030237E-7	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999954781225	WITHOUT_CLASSIFICATION	4.5218775290846585E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999995537894	WITHOUT_CLASSIFICATION	4.4621067508561295E-10	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998758559696	WITHOUT_CLASSIFICATION	1.2414403049455274E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999997740851764	WITHOUT_CLASSIFICATION	2.259148237209265E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999990422203	WITHOUT_CLASSIFICATION	9.577798055775363E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999967975533153	WITHOUT_CLASSIFICATION	3.202446684820895E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999967975533153	WITHOUT_CLASSIFICATION	3.202446684820895E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997486424484	WITHOUT_CLASSIFICATION	2.513575515679912E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999991949789245	WITHOUT_CLASSIFICATION	8.050210753498075E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999918104365	WITHOUT_CLASSIFICATION	8.189563495580625E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999995445496849	WITHOUT_CLASSIFICATION	4.5545031514461536E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999525223067	WITHOUT_CLASSIFICATION	4.747769330121558E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999840925038	WITHOUT_CLASSIFICATION	1.5907496287186058E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999967189620264	WITHOUT_CLASSIFICATION	3.2810379737101935E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997869214746	WITHOUT_CLASSIFICATION	2.130785253583465E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997869214746	WITHOUT_CLASSIFICATION	2.130785253583465E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999927122957402	WITHOUT_CLASSIFICATION	7.2877042599121935E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999993354406415	WITHOUT_CLASSIFICATION	6.64559358569167E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999426349806	WITHOUT_CLASSIFICATION	5.736501943964261E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994114555608	WITHOUT_CLASSIFICATION	5.885444392117548E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994114555608	WITHOUT_CLASSIFICATION	5.885444392117548E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994114555608	WITHOUT_CLASSIFICATION	5.885444392117548E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997511304407	WITHOUT_CLASSIFICATION	2.488695593168757E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999999599871654	WITHOUT_CLASSIFICATION	4.001283459961222E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999973818080519	WITHOUT_CLASSIFICATION	2.618191948170742E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999958038620117	WITHOUT_CLASSIFICATION	4.196137988287472E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999902253593	WITHOUT_CLASSIFICATION	9.774640715166277E-9	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999937644579	WITHOUT_CLASSIFICATION	6.235542143852988E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999359941503	WITHOUT_CLASSIFICATION	6.400584976894284E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999737943266515	WITHOUT_CLASSIFICATION	2.620567334846879E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999999872088203	WITHOUT_CLASSIFICATION	1.2791179702032545E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999993717895154	WITHOUT_CLASSIFICATION	6.282104846680518E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999109693033	WITHOUT_CLASSIFICATION	8.903069671633126E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999995824614507	WITHOUT_CLASSIFICATION	4.1753854930159815E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999487125852	WITHOUT_CLASSIFICATION	5.128741471854149E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999826236693	WITHOUT_CLASSIFICATION	1.737633064504642E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999744288929	WITHOUT_CLASSIFICATION	2.557110707770423E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999996438538326	WITHOUT_CLASSIFICATION	3.5614616739888337E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999981155440135	WITHOUT_CLASSIFICATION	1.8844559865030888E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999981155440135	WITHOUT_CLASSIFICATION	1.8844559865030888E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999985953707696	WITHOUT_CLASSIFICATION	1.4046292303994703E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999985953707696	WITHOUT_CLASSIFICATION	1.4046292303994703E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999985814253434	WITHOUT_CLASSIFICATION	1.4185746566200677E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.99999858946946	WITHOUT_CLASSIFICATION	1.410530539993227E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.99999858946946	WITHOUT_CLASSIFICATION	1.410530539993227E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999339108601	WITHOUT_CLASSIFICATION	6.608913990173445E-7	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999980849678691	WITHOUT_CLASSIFICATION	1.915032130886788E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999921256	WITHOUT_CLASSIFICATION	7.874399996867977E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999967975533153	WITHOUT_CLASSIFICATION	3.202446684820895E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999999962449895	WITHOUT_CLASSIFICATION	3.755010511672973E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999980849678691	WITHOUT_CLASSIFICATION	1.915032130886788E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999995188047883	WITHOUT_CLASSIFICATION	4.811952117585129E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999998159865049	WITHOUT_CLASSIFICATION	1.8401349509812608E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999987907887873	WITHOUT_CLASSIFICATION	1.2092112127186658E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999993473978499	WITHOUT_CLASSIFICATION	6.526021500483897E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999914005545	WITHOUT_CLASSIFICATION	8.599445484290604E-9	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999927491810356	WITHOUT_CLASSIFICATION	7.250818964344931E-6	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999422214407	WITHOUT_CLASSIFICATION	5.777855930414513E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999991083384392	WITHOUT_CLASSIFICATION	8.916615607906823E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998449322703	WITHOUT_CLASSIFICATION	1.5506772971748439E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999869842996214	WITHOUT_CLASSIFICATION	1.3015700378697426E-5	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999945674322	WITHOUT_CLASSIFICATION	5.432567810511215E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999982596778675	WITHOUT_CLASSIFICATION	1.7403221324976714E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996836892454	WITHOUT_CLASSIFICATION	3.1631075463260924E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999985397728761	WITHOUT_CLASSIFICATION	1.4602271239175252E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999990357837836	WITHOUT_CLASSIFICATION	9.642162164222222E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999960622723	WITHOUT_CLASSIFICATION	3.9377277007404426E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999714255129	WITHOUT_CLASSIFICATION	2.857448717931974E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999599751965	WITHOUT_CLASSIFICATION	4.0024803512698106E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999599751965	WITHOUT_CLASSIFICATION	4.0024803512698106E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999994949906732	WITHOUT_CLASSIFICATION	5.050093268810191E-7	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999991634012332	WITHOUT_CLASSIFICATION	8.365987667913122E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996316394876	WITHOUT_CLASSIFICATION	3.683605124867814E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999990413568739	WITHOUT_CLASSIFICATION	9.586431261108423E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994737464254	WITHOUT_CLASSIFICATION	5.262535745649634E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999085784025	WITHOUT_CLASSIFICATION	9.142159758019057E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999953019384	WITHOUT_CLASSIFICATION	4.6980616040576095E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999926957983041	WITHOUT_CLASSIFICATION	7.304201695996307E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999998830227923	WITHOUT_CLASSIFICATION	1.1697720776851721E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999866478969	WITHOUT_CLASSIFICATION	1.3352103089103246E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999211771687	WITHOUT_CLASSIFICATION	7.882283130872963E-8	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999041905012679	WITHOUT_CLASSIFICATION	9.580949873201778E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999957801782	WITHOUT_CLASSIFICATION	4.219821883351879E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999638049422	WITHOUT_CLASSIFICATION	3.6195057785232776E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999996464886318	WITHOUT_CLASSIFICATION	3.535113680995694E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999996376332477	WITHOUT_CLASSIFICATION	3.6236675226263565E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999793355019	WITHOUT_CLASSIFICATION	2.0664498170789912E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999793355019	WITHOUT_CLASSIFICATION	2.0664498170789912E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999962307475188	WITHOUT_CLASSIFICATION	3.7692524812847784E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997354870518	WITHOUT_CLASSIFICATION	2.645129483198477E-7	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999995264242524	WITHOUT_CLASSIFICATION	4.735757476541257E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999982106123981	WITHOUT_CLASSIFICATION	1.7893876018208636E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999994506557032	WITHOUT_CLASSIFICATION	5.493442967969716E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999974724581919	WITHOUT_CLASSIFICATION	2.5275418081640224E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999994392392603	WITHOUT_CLASSIFICATION	5.607607397310872E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999709124688	WITHOUT_CLASSIFICATION	2.9087531130779046E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999828255269	WITHOUT_CLASSIFICATION	1.7174473014074234E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999720959378	WITHOUT_CLASSIFICATION	2.790406214882541E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999999945233842	WITHOUT_CLASSIFICATION	5.4766158167613056E-8	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999709124688	WITHOUT_CLASSIFICATION	2.9087531130779046E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999693840574	WITHOUT_CLASSIFICATION	3.0615942602996464E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998712967677	WITHOUT_CLASSIFICATION	1.2870323237359408E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999427896479	WITHOUT_CLASSIFICATION	5.721035211584362E-8	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999956898668642	WITHOUT_CLASSIFICATION	4.3101331357898845E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999865512589	WITHOUT_CLASSIFICATION	1.3448741131115782E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999811420629	WITHOUT_CLASSIFICATION	1.8857937024254877E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.99999997892759	WITHOUT_CLASSIFICATION	2.1072409984468093E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999483743501	WITHOUT_CLASSIFICATION	5.162564990525156E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999868743032	WITHOUT_CLASSIFICATION	1.3125696827967468E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999981271703706	WITHOUT_CLASSIFICATION	1.8728296294653738E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999993039306676	WITHOUT_CLASSIFICATION	6.960693324581347E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999558015363	WITHOUT_CLASSIFICATION	4.4198463679783944E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999095550858	WITHOUT_CLASSIFICATION	9.044491422877822E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996726219744	WITHOUT_CLASSIFICATION	3.273780255564056E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999975409676232	WITHOUT_CLASSIFICATION	2.4590323768272143E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999985517857405	WITHOUT_CLASSIFICATION	1.4482142595253441E-6	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999980017005243	WITHOUT_CLASSIFICATION	1.9982994756309145E-6	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999745461770557	WITHOUT_CLASSIFICATION	2.54538229442353E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999579800959346	WITHOUT_CLASSIFICATION	4.201990406535957E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999819589062	WITHOUT_CLASSIFICATION	1.804109381949055E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996679195805	WITHOUT_CLASSIFICATION	3.320804194549856E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999360062395	WITHOUT_CLASSIFICATION	6.399376043132094E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999779298759196	WITHOUT_CLASSIFICATION	2.2070124080372117E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999959639975664	WITHOUT_CLASSIFICATION	4.036002433540303E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999648381417	WITHOUT_CLASSIFICATION	3.516185835345051E-8	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999970779138253	WITHOUT_CLASSIFICATION	2.922086174762169E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999749187056	WITHOUT_CLASSIFICATION	2.5081294405797483E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999960280914	WITHOUT_CLASSIFICATION	3.97190854979674E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999949897408	WITHOUT_CLASSIFICATION	5.010259146886861E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.999999935266992	WITHOUT_CLASSIFICATION	6.473300803372982E-8	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999989460652	WITHOUT_CLASSIFICATION	1.05393478497933E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999299415355	WITHOUT_CLASSIFICATION	7.00584645665381E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999990937901921	WITHOUT_CLASSIFICATION	9.062098077903991E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998800026736	WITHOUT_CLASSIFICATION	1.1999732638409128E-7	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999230743586	WITHOUT_CLASSIFICATION	7.692564141573424E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999993790003381	WITHOUT_CLASSIFICATION	6.209996619846011E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999969633346	WITHOUT_CLASSIFICATION	3.03666534306609E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999959650071	WITHOUT_CLASSIFICATION	4.034992898737501E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995702484341	WITHOUT_CLASSIFICATION	4.297515658578701E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999612536264	WITHOUT_CLASSIFICATION	3.874637363560362E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999986426543608	WITHOUT_CLASSIFICATION	1.357345639193264E-6	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999885111214	WITHOUT_CLASSIFICATION	1.1488878590368576E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999999992554989	WITHOUT_CLASSIFICATION	7.445010998293177E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999946875682	WITHOUT_CLASSIFICATION	5.3124317464788974E-9	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999998900168942	WITHOUT_CLASSIFICATION	1.0998310585572116E-7	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999954304916	WITHOUT_CLASSIFICATION	4.56950841283628E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999033146065	WITHOUT_CLASSIFICATION	9.668539352160502E-8	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999653478260196	WITHOUT_CLASSIFICATION	3.465217398030827E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999961579711525	WITHOUT_CLASSIFICATION	3.842028847519408E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997887532621	WITHOUT_CLASSIFICATION	2.1124673794837762E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976782241214	WITHOUT_CLASSIFICATION	2.3217758785866536E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997751934896	WITHOUT_CLASSIFICATION	2.248065104403257E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999787724814	WITHOUT_CLASSIFICATION	2.1227518597652185E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997961017152	WITHOUT_CLASSIFICATION	2.0389828481481908E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999886115326	WITHOUT_CLASSIFICATION	1.1388467401843667E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998426789741	WITHOUT_CLASSIFICATION	1.5732102591632897E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998702593588	WITHOUT_CLASSIFICATION	1.2974064126045246E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999562464925	WITHOUT_CLASSIFICATION	4.37535074929029E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999997989068288	WITHOUT_CLASSIFICATION	2.01093171141099E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999988787598146	WITHOUT_CLASSIFICATION	1.1212401853927954E-6	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999999216585115	WITHOUT_CLASSIFICATION	7.834148851334081E-8	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999993732260809	WITHOUT_CLASSIFICATION	6.267739191317811E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999616919537	WITHOUT_CLASSIFICATION	3.8308046262636326E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999472532352796	WITHOUT_CLASSIFICATION	5.27467647204149E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999995419490224	WITHOUT_CLASSIFICATION	4.5805097758632955E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999975244914492	WITHOUT_CLASSIFICATION	2.47550855095472E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976782241214	WITHOUT_CLASSIFICATION	2.3217758785866536E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999998616556138	WITHOUT_CLASSIFICATION	1.383443861365212E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999998325944544	WITHOUT_CLASSIFICATION	1.674055456581916E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999835546215	WITHOUT_CLASSIFICATION	1.6445378516301353E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999666313124	WITHOUT_CLASSIFICATION	3.336868759199376E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999966826056766	WITHOUT_CLASSIFICATION	3.317394323467759E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999988667019802	WITHOUT_CLASSIFICATION	1.1332980197440985E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999828255269	WITHOUT_CLASSIFICATION	1.7174473014074234E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999422326485257	WITHOUT_CLASSIFICATION	5.776735147423389E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999230743586	WITHOUT_CLASSIFICATION	7.692564141573424E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999978610530821	WITHOUT_CLASSIFICATION	2.138946917941369E-6	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999843986902	WITHOUT_CLASSIFICATION	1.560130976326032E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995819808353	WITHOUT_CLASSIFICATION	4.180191647259682E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995812722118	WITHOUT_CLASSIFICATION	4.1872778822620466E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999996246498019	WITHOUT_CLASSIFICATION	3.7535019822757013E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996932939502	WITHOUT_CLASSIFICATION	3.067060498126907E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995663855926	WITHOUT_CLASSIFICATION	4.3361440728706055E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996901184453	WITHOUT_CLASSIFICATION	3.098815547452553E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999961844352	WITHOUT_CLASSIFICATION	3.815564807837344E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999976151233	WITHOUT_CLASSIFICATION	2.3848767810612763E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999236060682	WITHOUT_CLASSIFICATION	7.639393184480038E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999719627333	WITHOUT_CLASSIFICATION	2.8037266772475248E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999654909274	WITHOUT_CLASSIFICATION	3.4509072528190083E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999654909274	WITHOUT_CLASSIFICATION	3.4509072528190083E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999682846394	WITHOUT_CLASSIFICATION	3.171536057360967E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999811047806	WITHOUT_CLASSIFICATION	1.8895219407490603E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998459923883	WITHOUT_CLASSIFICATION	1.5400761164640147E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999987350248665	WITHOUT_CLASSIFICATION	1.2649751335333225E-6	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999993226134	WITHOUT_CLASSIFICATION	6.773866067139554E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999436096546	WITHOUT_CLASSIFICATION	5.6390345311181685E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999994122721	WITHOUT_CLASSIFICATION	5.87727903278295E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999989651322801	WITHOUT_CLASSIFICATION	1.0348677198270056E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999557883394	WITHOUT_CLASSIFICATION	4.4211660619595465E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999973429924014	WITHOUT_CLASSIFICATION	2.6570075985807715E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999069165579	WITHOUT_CLASSIFICATION	9.308344216134387E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997990606293	WITHOUT_CLASSIFICATION	2.0093937074248382E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999888895261	WITHOUT_CLASSIFICATION	1.1110473935773161E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999966713733	WITHOUT_CLASSIFICATION	3.3286268056413053E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999521256511	WITHOUT_CLASSIFICATION	4.787434893049178E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998943771273	WITHOUT_CLASSIFICATION	1.0562287265551809E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999992032023348	WITHOUT_CLASSIFICATION	7.967976651706156E-7	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999573515101	WITHOUT_CLASSIFICATION	4.264848993415692E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999818761576	WITHOUT_CLASSIFICATION	1.8123842448133663E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999996998952023	WITHOUT_CLASSIFICATION	3.0010479769154716E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999413595272	WITHOUT_CLASSIFICATION	5.864047266468658E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999993441754644	WITHOUT_CLASSIFICATION	6.558245356593213E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999345996307	WITHOUT_CLASSIFICATION	6.540036932108472E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999275821897977	WITHOUT_CLASSIFICATION	7.241781020231451E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999993221287877	WITHOUT_CLASSIFICATION	6.778712122184818E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996789148075	WITHOUT_CLASSIFICATION	3.210851925351131E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996423258153	WITHOUT_CLASSIFICATION	3.576741847695459E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999965154259	WITHOUT_CLASSIFICATION	3.4845739880016204E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999931535171719	WITHOUT_CLASSIFICATION	6.846482828196255E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998330285982	WITHOUT_CLASSIFICATION	1.6697140180151233E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9997630359511893	WITHOUT_CLASSIFICATION	2.3696404881056205E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999591879101921	WITHOUT_CLASSIFICATION	4.0812089807955846E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999852655745	WITHOUT_CLASSIFICATION	1.4734425470971466E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.99999999866797	WITHOUT_CLASSIFICATION	1.3320300006769218E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996903429595	WITHOUT_CLASSIFICATION	3.096570404815564E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999639760123	WITHOUT_CLASSIFICATION	3.6023987698878495E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999931679787103	WITHOUT_CLASSIFICATION	6.8320212896684035E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999898962519	WITHOUT_CLASSIFICATION	1.010374797329421E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999999955937054	WITHOUT_CLASSIFICATION	4.406294583790672E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999987960584679	WITHOUT_CLASSIFICATION	1.2039415321971102E-6	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998406332372	WITHOUT_CLASSIFICATION	1.5936676275073034E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999823666651	WITHOUT_CLASSIFICATION	1.7633334915553976E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999442403212977	WITHOUT_CLASSIFICATION	5.575967870238383E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999895124249149	WITHOUT_CLASSIFICATION	1.0487575085177058E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999995580105945	WITHOUT_CLASSIFICATION	4.419894054943135E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998036745336	WITHOUT_CLASSIFICATION	1.9632546641596036E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9955009924130318	WITHOUT_CLASSIFICATION	0.004499007586968182	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999679234665	WITHOUT_CLASSIFICATION	3.207653351162384E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999980544661	WITHOUT_CLASSIFICATION	1.9455339015045512E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997956677885	WITHOUT_CLASSIFICATION	2.043322113806507E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998783289409	WITHOUT_CLASSIFICATION	1.21671059140323E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999928504946	WITHOUT_CLASSIFICATION	7.149505540033643E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999980867931062	WITHOUT_CLASSIFICATION	1.9132068938848577E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999998193290616	WITHOUT_CLASSIFICATION	1.8067093845640388E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998341473245	WITHOUT_CLASSIFICATION	1.6585267550208027E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999659408485	WITHOUT_CLASSIFICATION	3.405915147807521E-8	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999950409800062	WITHOUT_CLASSIFICATION	4.959019993740079E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999999067928746	WITHOUT_CLASSIFICATION	9.320712531114503E-8	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999737118835	WITHOUT_CLASSIFICATION	2.6288116530170942E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999999215941212	WITHOUT_CLASSIFICATION	7.840587878827447E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999985838140721	WITHOUT_CLASSIFICATION	1.4161859278636E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999999885565549	WITHOUT_CLASSIFICATION	1.1443445092781256E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999996188845166	WITHOUT_CLASSIFICATION	3.81115483311481E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999999602873758	WITHOUT_CLASSIFICATION	3.971262419520236E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999999933497913	WITHOUT_CLASSIFICATION	6.650208693158759E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998360590666	WITHOUT_CLASSIFICATION	1.6394093339376068E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999774920959364	WITHOUT_CLASSIFICATION	2.2507904063516066E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999698756392	WITHOUT_CLASSIFICATION	3.012436084288347E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999450892747	WITHOUT_CLASSIFICATION	5.491072535096133E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999640017052	WITHOUT_CLASSIFICATION	3.5998294849902507E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999450892747	WITHOUT_CLASSIFICATION	5.491072535096133E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998651088235	WITHOUT_CLASSIFICATION	1.3489117649134898E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999905213045	WITHOUT_CLASSIFICATION	9.478695450758998E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999999095112886	WITHOUT_CLASSIFICATION	9.048871142118108E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999590121821	WITHOUT_CLASSIFICATION	4.098781799212718E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999811563329	WITHOUT_CLASSIFICATION	1.8843667051562187E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999999932302172	WITHOUT_CLASSIFICATION	6.769782803756104E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997260571939	WITHOUT_CLASSIFICATION	2.73942806121918E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999911337903011	WITHOUT_CLASSIFICATION	8.8662096988908E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999994011343034	WITHOUT_CLASSIFICATION	5.988656964867224E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999995335058	WITHOUT_CLASSIFICATION	4.664941904060719E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999990148699789	WITHOUT_CLASSIFICATION	9.851300211563132E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999727111564	WITHOUT_CLASSIFICATION	2.7288843721766002E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998960223463	WITHOUT_CLASSIFICATION	1.0397765379255567E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999902702865356	WITHOUT_CLASSIFICATION	9.729713464309834E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998557036937	WITHOUT_CLASSIFICATION	1.4429630626001122E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999960373578	WITHOUT_CLASSIFICATION	3.9626422304709024E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999999989391442	WITHOUT_CLASSIFICATION	1.0608558089606066E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999211003341	WITHOUT_CLASSIFICATION	7.889966596963229E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999985445028	WITHOUT_CLASSIFICATION	1.4554972011776113E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999986460029918	WITHOUT_CLASSIFICATION	1.3539970082288893E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996675778556	WITHOUT_CLASSIFICATION	3.324221442474573E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999998391801354	WITHOUT_CLASSIFICATION	1.6081986460802183E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999836366573055	WITHOUT_CLASSIFICATION	1.6363342694512012E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999537242215	WITHOUT_CLASSIFICATION	4.627577861021657E-8	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999972849089356	WITHOUT_CLASSIFICATION	2.7150910643870664E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999572062140252	WITHOUT_CLASSIFICATION	4.279378597480751E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999966961647637	WITHOUT_CLASSIFICATION	3.3038352363362856E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999989120997664	WITHOUT_CLASSIFICATION	1.0879002336167322E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998878837554	WITHOUT_CLASSIFICATION	1.1211624463321284E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999986232018463	WITHOUT_CLASSIFICATION	1.3767981536883734E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999949309780082	WITHOUT_CLASSIFICATION	5.06902199188641E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999987660847548	WITHOUT_CLASSIFICATION	1.2339152452444896E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999257171042	WITHOUT_CLASSIFICATION	7.42828958263786E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999997625945749	WITHOUT_CLASSIFICATION	2.3740542499297546E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999995714682874	WITHOUT_CLASSIFICATION	4.285317124903703E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999930147068803	WITHOUT_CLASSIFICATION	6.985293119782506E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999953314267105	WITHOUT_CLASSIFICATION	4.6685732894748395E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998878439065	WITHOUT_CLASSIFICATION	1.1215609361847281E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999819436070132	WITHOUT_CLASSIFICATION	1.805639298675505E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999989456342318	WITHOUT_CLASSIFICATION	1.0543657682371183E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999931153729391	WITHOUT_CLASSIFICATION	6.884627060893033E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999997644048804	WITHOUT_CLASSIFICATION	2.3559511968749955E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998679477515797	WITHOUT_CLASSIFICATION	1.3205224842029124E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999572062140252	WITHOUT_CLASSIFICATION	4.279378597480751E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999797286040057	WITHOUT_CLASSIFICATION	2.0271395994249327E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999999298104805	WITHOUT_CLASSIFICATION	7.018951954012967E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999836781085685	WITHOUT_CLASSIFICATION	1.632189143155586E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999974986801197	WITHOUT_CLASSIFICATION	2.501319880448375E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.999999677936947	WITHOUT_CLASSIFICATION	3.2206305300713765E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998521020885	WITHOUT_CLASSIFICATION	1.4789791147138224E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999944634548	WITHOUT_CLASSIFICATION	5.536545274627388E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999970491794995	WITHOUT_CLASSIFICATION	2.9508205005883516E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989232827847	WITHOUT_CLASSIFICATION	1.076717215275616E-6	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999856966141	WITHOUT_CLASSIFICATION	1.4303385909971655E-8	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999997283793564	WITHOUT_CLASSIFICATION	2.7162064360121918E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999997198401572	WITHOUT_CLASSIFICATION	2.80159842774671E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999934060825788	WITHOUT_CLASSIFICATION	6.593917421261088E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999996103132672	WITHOUT_CLASSIFICATION	3.896867328110771E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999679699111	WITHOUT_CLASSIFICATION	3.2030088960071504E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999952959189	WITHOUT_CLASSIFICATION	4.7040811262822475E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999999874017447	WITHOUT_CLASSIFICATION	1.2598255305257713E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999995348982731	WITHOUT_CLASSIFICATION	4.651017269492557E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999906764615	WITHOUT_CLASSIFICATION	9.323538520753887E-9	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999797286040057	WITHOUT_CLASSIFICATION	2.0271395994249327E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999968760723859	WITHOUT_CLASSIFICATION	3.1239276142323368E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999998405183993	WITHOUT_CLASSIFICATION	1.5948160067682536E-7	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999996472003057	WITHOUT_CLASSIFICATION	3.5279969434347063E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999892985141	WITHOUT_CLASSIFICATION	1.0701485908733536E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997956630591	WITHOUT_CLASSIFICATION	2.0433694082371345E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999977045552582	WITHOUT_CLASSIFICATION	2.295444741785825E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999977045552582	WITHOUT_CLASSIFICATION	2.295444741785825E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998276415891	WITHOUT_CLASSIFICATION	1.7235841078569624E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999977045552582	WITHOUT_CLASSIFICATION	2.295444741785825E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999977045552582	WITHOUT_CLASSIFICATION	2.295444741785825E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999992146875782	WITHOUT_CLASSIFICATION	7.853124217752975E-7	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999959057791187	WITHOUT_CLASSIFICATION	4.094220881361194E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999991611598146	WITHOUT_CLASSIFICATION	8.388401855105204E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999990233228755	WITHOUT_CLASSIFICATION	9.766771245110016E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999780390487	WITHOUT_CLASSIFICATION	2.1960951277582823E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999990739119634	WITHOUT_CLASSIFICATION	9.260880365637938E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999981955779694	WITHOUT_CLASSIFICATION	1.804422030616145E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999996594664515	WITHOUT_CLASSIFICATION	3.4053354850291436E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999985758933373	WITHOUT_CLASSIFICATION	1.4241066626466858E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999708279420508	WITHOUT_CLASSIFICATION	2.9172057949231596E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999983205893285	WITHOUT_CLASSIFICATION	1.6794106715857665E-6	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995146205064	WITHOUT_CLASSIFICATION	4.853794937032956E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999987000523173	WITHOUT_CLASSIFICATION	1.2999476827096853E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999933530395639	WITHOUT_CLASSIFICATION	6.646960436055719E-6	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999996106103224	WITHOUT_CLASSIFICATION	3.893896776890601E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998995916406723	WITHOUT_CLASSIFICATION	1.0040835932760156E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997259644892	WITHOUT_CLASSIFICATION	2.740355107900321E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999913738273033	WITHOUT_CLASSIFICATION	8.626172696692245E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999970371222425	WITHOUT_CLASSIFICATION	2.962877757496235E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999919347743993	WITHOUT_CLASSIFICATION	8.065225600690096E-6	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999999472211269	WITHOUT_CLASSIFICATION	5.277887309698752E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999997756234218	WITHOUT_CLASSIFICATION	2.2437657810593045E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997259644892	WITHOUT_CLASSIFICATION	2.740355107900321E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999966961647637	WITHOUT_CLASSIFICATION	3.3038352363362856E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999958655427956	WITHOUT_CLASSIFICATION	4.134457204381389E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999322785215	WITHOUT_CLASSIFICATION	6.772147855205722E-8	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999619060096	WITHOUT_CLASSIFICATION	3.8093990424035315E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999972405288553	WITHOUT_CLASSIFICATION	2.759471144714829E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999768492047	WITHOUT_CLASSIFICATION	2.3150795264920113E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999968085470363	WITHOUT_CLASSIFICATION	3.191452963703079E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999995249806517	WITHOUT_CLASSIFICATION	4.750193482310867E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999772936243	WITHOUT_CLASSIFICATION	2.2706375707366438E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999999130811806	WITHOUT_CLASSIFICATION	8.691881929865392E-8	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999994343801427	WITHOUT_CLASSIFICATION	5.656198572964792E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997136193496	WITHOUT_CLASSIFICATION	2.863806503770778E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999740540039	WITHOUT_CLASSIFICATION	2.5945996093578287E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999024806241	WITHOUT_CLASSIFICATION	9.75193759539762E-8	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.99999638560845	WITHOUT_CLASSIFICATION	3.614391549981197E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999831411723	WITHOUT_CLASSIFICATION	1.6858827645586175E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997320410303	WITHOUT_CLASSIFICATION	2.6795896978187276E-7	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999990598648308	WITHOUT_CLASSIFICATION	9.40135169123961E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999869323599	WITHOUT_CLASSIFICATION	1.306764010211512E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999983149745952	WITHOUT_CLASSIFICATION	1.68502540471587E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999987452781346	WITHOUT_CLASSIFICATION	1.2547218655018124E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999969301277364	WITHOUT_CLASSIFICATION	3.0698722635534296E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999952969842	WITHOUT_CLASSIFICATION	4.7030157684540595E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999772936243	WITHOUT_CLASSIFICATION	2.2706375707366438E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999990505789472	WITHOUT_CLASSIFICATION	9.494210527403402E-7	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999996815114346	WITHOUT_CLASSIFICATION	3.184885654988775E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999997746293404	WITHOUT_CLASSIFICATION	2.2537065948189112E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999988486245116	WITHOUT_CLASSIFICATION	1.151375488394119E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971486716804	WITHOUT_CLASSIFICATION	2.8513283195454236E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999937984949405	WITHOUT_CLASSIFICATION	6.201505059444086E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999977191491538	WITHOUT_CLASSIFICATION	2.280850846240355E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999999267274359	WITHOUT_CLASSIFICATION	7.327256407779396E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.99999924153158	WITHOUT_CLASSIFICATION	7.58468420017642E-7	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999955653279987	WITHOUT_CLASSIFICATION	4.4346720012846815E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999220149166	WITHOUT_CLASSIFICATION	7.798508332466691E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999512041012	WITHOUT_CLASSIFICATION	4.879589866876732E-8	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999988038403553	WITHOUT_CLASSIFICATION	1.1961596445891517E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999987974556218	WITHOUT_CLASSIFICATION	1.2025443781291333E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999919250258108	WITHOUT_CLASSIFICATION	8.074974189122693E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996778332317	WITHOUT_CLASSIFICATION	3.2216676832300586E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999220149166	WITHOUT_CLASSIFICATION	7.798508332466691E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999991371508185	WITHOUT_CLASSIFICATION	8.628491814643936E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999988549060342	WITHOUT_CLASSIFICATION	1.1450939656764785E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999464092357	WITHOUT_CLASSIFICATION	5.359076428876789E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999963658179097	WITHOUT_CLASSIFICATION	3.634182090312623E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.999999872885372	WITHOUT_CLASSIFICATION	1.2711462809574097E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999484047541	WITHOUT_CLASSIFICATION	5.159524578133277E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999805429423	WITHOUT_CLASSIFICATION	1.9457057728778077E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999452098705	WITHOUT_CLASSIFICATION	5.479012949398631E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999933659605	WITHOUT_CLASSIFICATION	6.634039501841076E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995555307818	WITHOUT_CLASSIFICATION	4.444692181434269E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999012007532	WITHOUT_CLASSIFICATION	9.879924671174949E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998015306066	WITHOUT_CLASSIFICATION	1.9846939343986405E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999464915299	WITHOUT_CLASSIFICATION	5.350847007229469E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999464915299	WITHOUT_CLASSIFICATION	5.350847007229469E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999946416517046	WITHOUT_CLASSIFICATION	5.358348295487934E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999471274795	WITHOUT_CLASSIFICATION	5.287252050760626E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999998744088028	WITHOUT_CLASSIFICATION	1.2559119727565295E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999998593222537	WITHOUT_CLASSIFICATION	1.4067774635773805E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999874514008209	WITHOUT_CLASSIFICATION	1.2548599179031692E-5	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997674889323	WITHOUT_CLASSIFICATION	2.3251106766872112E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987856017779	WITHOUT_CLASSIFICATION	1.2143982220875803E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982550275173	WITHOUT_CLASSIFICATION	1.7449724827614146E-6	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999990667698064	WITHOUT_CLASSIFICATION	9.332301934761586E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992696210336	WITHOUT_CLASSIFICATION	7.303789664164723E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997674889323	WITHOUT_CLASSIFICATION	2.3251106766872112E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987856017779	WITHOUT_CLASSIFICATION	1.2143982220875803E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982550275173	WITHOUT_CLASSIFICATION	1.7449724827614146E-6	TEST
// Caches	WITHOUT_CLASSIFICATION	0.999999239297318	WITHOUT_CLASSIFICATION	7.607026819345833E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999935468847363	WITHOUT_CLASSIFICATION	6.453115263673139E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999351195331	WITHOUT_CLASSIFICATION	6.488046682329173E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999993209781547	WITHOUT_CLASSIFICATION	6.790218452834145E-7	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999064255045	WITHOUT_CLASSIFICATION	9.357449544716781E-8	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999414815626474	WITHOUT_CLASSIFICATION	5.851843735275457E-5	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999988718312384	WITHOUT_CLASSIFICATION	1.128168761594574E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.999992116747148	WITHOUT_CLASSIFICATION	7.883252852039713E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999556860710395	WITHOUT_CLASSIFICATION	4.431392896054979E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999991377268496	WITHOUT_CLASSIFICATION	8.622731503803836E-7	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999996381622058	WITHOUT_CLASSIFICATION	3.618377941814898E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998999457777051	WITHOUT_CLASSIFICATION	1.0005422229488401E-4	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999928309161991	WITHOUT_CLASSIFICATION	7.169083800932419E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999544719479	WITHOUT_CLASSIFICATION	4.5528052069794905E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999864508712	WITHOUT_CLASSIFICATION	1.3549128923000853E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999994173323761	WITHOUT_CLASSIFICATION	5.826676240366221E-7	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9982293396456376	WITHOUT_CLASSIFICATION	0.001770660354362391	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999845846153674	WITHOUT_CLASSIFICATION	1.5415384632599687E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998939017894	WITHOUT_CLASSIFICATION	1.060982105925585E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999994576077945	WITHOUT_CLASSIFICATION	5.423922055517889E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999998852499209	WITHOUT_CLASSIFICATION	1.1475007907403997E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997887945307	WITHOUT_CLASSIFICATION	2.1120546921140145E-7	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999993955546865	WITHOUT_CLASSIFICATION	6.044453134152716E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999900778506	WITHOUT_CLASSIFICATION	9.922149407261619E-9	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999477502388	WITHOUT_CLASSIFICATION	5.224976115611068E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999957125992234	WITHOUT_CLASSIFICATION	4.28740077659409E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980213321408	WITHOUT_CLASSIFICATION	1.978667859190176E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995067174885	WITHOUT_CLASSIFICATION	4.932825115043218E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999215506837	WITHOUT_CLASSIFICATION	7.844931622367774E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970305479852	WITHOUT_CLASSIFICATION	2.9694520148680617E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997904613123	WITHOUT_CLASSIFICATION	2.0953868770178936E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982863956905	WITHOUT_CLASSIFICATION	1.7136043094900402E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982863956905	WITHOUT_CLASSIFICATION	1.7136043094900402E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999993328900064	WITHOUT_CLASSIFICATION	6.671099936367885E-7	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999781035934823	WITHOUT_CLASSIFICATION	2.1896406517715E-5	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.99999986691691	WITHOUT_CLASSIFICATION	1.3308308999388708E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999041905012679	WITHOUT_CLASSIFICATION	9.580949873201778E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999999446904368	WITHOUT_CLASSIFICATION	5.530956319203145E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999999876830048	WITHOUT_CLASSIFICATION	1.2316995205852846E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999780840011749	WITHOUT_CLASSIFICATION	2.191599882504402E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999998808537162	WITHOUT_CLASSIFICATION	1.1914628393891022E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999998604170629	WITHOUT_CLASSIFICATION	1.39582937103917E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994855035321	WITHOUT_CLASSIFICATION	5.14496467899316E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999688824281	WITHOUT_CLASSIFICATION	3.111757190232253E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996756520825	WITHOUT_CLASSIFICATION	3.243479175113335E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999431749932	WITHOUT_CLASSIFICATION	5.682500680349565E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995018318956	WITHOUT_CLASSIFICATION	4.981681045297932E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988144678394	WITHOUT_CLASSIFICATION	1.1855321605965254E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995441855191	WITHOUT_CLASSIFICATION	4.558144810545395E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997068576856	WITHOUT_CLASSIFICATION	2.9314231435542817E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997599445763	WITHOUT_CLASSIFICATION	2.4005542364230187E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990722817723	WITHOUT_CLASSIFICATION	9.277182276835579E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991198629417	WITHOUT_CLASSIFICATION	8.801370583248643E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999849534764	WITHOUT_CLASSIFICATION	1.5046523576927874E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999937340825945	WITHOUT_CLASSIFICATION	6.265917405516664E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999736517472185	WITHOUT_CLASSIFICATION	2.634825278145344E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999776578095	WITHOUT_CLASSIFICATION	2.234219050070817E-8	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996984802989	WITHOUT_CLASSIFICATION	3.015197010516811E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.999999938552037	WITHOUT_CLASSIFICATION	6.144796304158185E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999980995735188	WITHOUT_CLASSIFICATION	1.9004264812959417E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999791187123	WITHOUT_CLASSIFICATION	2.0881287601618577E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999736517472185	WITHOUT_CLASSIFICATION	2.634825278145344E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999736517472185	WITHOUT_CLASSIFICATION	2.634825278145344E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999693066772548	WITHOUT_CLASSIFICATION	3.069332274513468E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999730532478	WITHOUT_CLASSIFICATION	2.6946752120093916E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999986458237719	WITHOUT_CLASSIFICATION	1.3541762281094173E-5	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999991422713195	WITHOUT_CLASSIFICATION	8.577286806659516E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996836892454	WITHOUT_CLASSIFICATION	3.1631075463260924E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999994576077945	WITHOUT_CLASSIFICATION	5.423922055517889E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999994715707168	WITHOUT_CLASSIFICATION	5.284292830888881E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999863064175	WITHOUT_CLASSIFICATION	1.369358249639665E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995220079747	WITHOUT_CLASSIFICATION	4.77992025264775E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998898616218	WITHOUT_CLASSIFICATION	1.1013837819071033E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996402383504	WITHOUT_CLASSIFICATION	3.597616495359976E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999092157018	WITHOUT_CLASSIFICATION	9.078429820784442E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998332007163	WITHOUT_CLASSIFICATION	1.667992838132623E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999998332007163	WITHOUT_CLASSIFICATION	1.667992838132623E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996837915514	WITHOUT_CLASSIFICATION	3.162084486390583E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996837915514	WITHOUT_CLASSIFICATION	3.162084486390583E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993737531597	WITHOUT_CLASSIFICATION	6.262468403421718E-7	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997235507888	WITHOUT_CLASSIFICATION	2.7644921123749905E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999941877551877	WITHOUT_CLASSIFICATION	5.812244812305322E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943035275375	WITHOUT_CLASSIFICATION	5.696472462567844E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999945966285	WITHOUT_CLASSIFICATION	5.403371605555508E-9	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998951658149	WITHOUT_CLASSIFICATION	1.0483418507646552E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991393084238	WITHOUT_CLASSIFICATION	8.60691576328068E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999203445915	WITHOUT_CLASSIFICATION	7.965540846672262E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999837549487	WITHOUT_CLASSIFICATION	1.6245051307073753E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999566868004673	WITHOUT_CLASSIFICATION	4.331319953261329E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994441286686	WITHOUT_CLASSIFICATION	5.558713314506025E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999998323061093	WITHOUT_CLASSIFICATION	1.6769389071885078E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999999572902163	WITHOUT_CLASSIFICATION	4.2709783696724645E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999259091689	WITHOUT_CLASSIFICATION	7.409083113693113E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999992012562201	WITHOUT_CLASSIFICATION	7.987437798509835E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998445930686	WITHOUT_CLASSIFICATION	1.5540693143941676E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999998445930686	WITHOUT_CLASSIFICATION	1.5540693143941676E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999993941481187	WITHOUT_CLASSIFICATION	6.058518813872967E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999993188586694	WITHOUT_CLASSIFICATION	6.811413306160678E-7	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998664387453	WITHOUT_CLASSIFICATION	1.3356125474819517E-7	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999968440875708	WITHOUT_CLASSIFICATION	3.15591242922544E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983330252556	WITHOUT_CLASSIFICATION	1.6669747443499614E-6	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892377899976	WITHOUT_CLASSIFICATION	1.0762210002388347E-5	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999916127001	WITHOUT_CLASSIFICATION	8.38729998108517E-9	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998553427757	WITHOUT_CLASSIFICATION	1.4465722421244273E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999956215436	WITHOUT_CLASSIFICATION	4.378456339690363E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999543710628	WITHOUT_CLASSIFICATION	4.562893715997841E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999993409696	WITHOUT_CLASSIFICATION	6.590304148135272E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999727723332	WITHOUT_CLASSIFICATION	2.7227666835089677E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998380981999	WITHOUT_CLASSIFICATION	1.6190180016394196E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999129452999	WITHOUT_CLASSIFICATION	8.705470012322609E-8	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999999519961714	WITHOUT_CLASSIFICATION	4.80038285940915E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999983157315202	WITHOUT_CLASSIFICATION	1.6842684797484233E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997190330675	WITHOUT_CLASSIFICATION	2.809669324881099E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999996208687698	WITHOUT_CLASSIFICATION	3.7913123018258335E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999995904769535	WITHOUT_CLASSIFICATION	4.0952304652464275E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999916535852	WITHOUT_CLASSIFICATION	8.346414796359825E-9	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999593506504	WITHOUT_CLASSIFICATION	4.064934956102267E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999991776290043	WITHOUT_CLASSIFICATION	8.223709957500378E-7	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999308391759	WITHOUT_CLASSIFICATION	6.916082410806379E-8	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990364026706	WITHOUT_CLASSIFICATION	9.635973292881385E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999999164463608	WITHOUT_CLASSIFICATION	8.355363918935137E-8	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998733873822	WITHOUT_CLASSIFICATION	1.266126179078716E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999995858877277	WITHOUT_CLASSIFICATION	4.1411227222673254E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999986229277606	WITHOUT_CLASSIFICATION	1.377072239374612E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998412666816	WITHOUT_CLASSIFICATION	1.5873331836465307E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970636311223	WITHOUT_CLASSIFICATION	2.9363688776516737E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999724473164	WITHOUT_CLASSIFICATION	2.75526836098452E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998289348042	WITHOUT_CLASSIFICATION	1.7106519581494638E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999984731011459	WITHOUT_CLASSIFICATION	1.52689885409771E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999514107674	WITHOUT_CLASSIFICATION	4.8589232637233514E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999734248761262	WITHOUT_CLASSIFICATION	2.6575123873825262E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999995220431046	WITHOUT_CLASSIFICATION	4.77956895309572E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999999035991	WITHOUT_CLASSIFICATION	9.640089567728872E-10	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999425671058	WITHOUT_CLASSIFICATION	5.7432894158569466E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999910965458	WITHOUT_CLASSIFICATION	8.903454230634711E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999998208419361	WITHOUT_CLASSIFICATION	1.7915806395590994E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999842180097	WITHOUT_CLASSIFICATION	1.578199027083948E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999999955503356	WITHOUT_CLASSIFICATION	4.4496644048704755E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.99999855119727	WITHOUT_CLASSIFICATION	1.4488027300293685E-6	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999816488111	WITHOUT_CLASSIFICATION	1.8351188935987547E-8	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999993650098141	WITHOUT_CLASSIFICATION	6.349901858420687E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999992534925468	WITHOUT_CLASSIFICATION	7.465074532145393E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999993202330983	WITHOUT_CLASSIFICATION	6.797669016352666E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999877931564014	WITHOUT_CLASSIFICATION	1.2206843598583951E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999998751920315	WITHOUT_CLASSIFICATION	1.2480796852128436E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9992218041159461	WITHOUT_CLASSIFICATION	7.781958840539802E-4	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999998844958884	WITHOUT_CLASSIFICATION	1.1550411166642208E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999940440564959	WITHOUT_CLASSIFICATION	5.955943504094032E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999998561472838	WITHOUT_CLASSIFICATION	1.4385271608286546E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999731023447832	WITHOUT_CLASSIFICATION	2.6897655216781188E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999990094094215	WITHOUT_CLASSIFICATION	9.905905783800586E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999998177585327	WITHOUT_CLASSIFICATION	1.822414673615863E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9995189306111762	WITHOUT_CLASSIFICATION	4.8106938882374527E-4	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999981099803467	WITHOUT_CLASSIFICATION	1.8900196533089952E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998172559317	WITHOUT_CLASSIFICATION	1.8274406836880934E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998993663711105	WITHOUT_CLASSIFICATION	1.0063362888947348E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999833395554	WITHOUT_CLASSIFICATION	1.6660444641439358E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999027868088	WITHOUT_CLASSIFICATION	9.721319122884692E-8	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999983024371596	WITHOUT_CLASSIFICATION	1.6975628404280764E-6	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999990014827326	WITHOUT_CLASSIFICATION	9.985172674282115E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999601636665	WITHOUT_CLASSIFICATION	3.9836333496586966E-8	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999960991289	WITHOUT_CLASSIFICATION	3.90087101062145E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999971025193	WITHOUT_CLASSIFICATION	2.8974807964022148E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999885709624	WITHOUT_CLASSIFICATION	1.1429037605502428E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999850610624791	WITHOUT_CLASSIFICATION	1.4938937520859323E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999850610624791	WITHOUT_CLASSIFICATION	1.4938937520859323E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999983180867167	WITHOUT_CLASSIFICATION	1.6819132834115843E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999997674683965	WITHOUT_CLASSIFICATION	2.3253160348115663E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999595946725	WITHOUT_CLASSIFICATION	4.040532746994722E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996721225607	WITHOUT_CLASSIFICATION	3.278774392834387E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999912711558	WITHOUT_CLASSIFICATION	8.72884410984983E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999968503957773	WITHOUT_CLASSIFICATION	3.149604222624306E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999401933057	WITHOUT_CLASSIFICATION	5.980669428508578E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999017612716	WITHOUT_CLASSIFICATION	9.823872840155659E-8	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999991175028619	WITHOUT_CLASSIFICATION	8.824971382061396E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999995897484399	WITHOUT_CLASSIFICATION	4.102515601194079E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999841070494	WITHOUT_CLASSIFICATION	1.5892950588420345E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999850983877	WITHOUT_CLASSIFICATION	1.490161235149687E-8	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999988612318441	WITHOUT_CLASSIFICATION	1.1387681558671337E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999991185989	WITHOUT_CLASSIFICATION	8.814010993939698E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999999496259657	WITHOUT_CLASSIFICATION	5.037403429885411E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999980468459817	WITHOUT_CLASSIFICATION	1.9531540183357986E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999995979921692	WITHOUT_CLASSIFICATION	4.0200783085045967E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999989746693528	WITHOUT_CLASSIFICATION	1.0253306471540739E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999990234118661	WITHOUT_CLASSIFICATION	9.7658813383761E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999985755381366	WITHOUT_CLASSIFICATION	1.4244618633932362E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998473186575	WITHOUT_CLASSIFICATION	1.5268134248734479E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997618169632	WITHOUT_CLASSIFICATION	2.3818303691458272E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999905104212653	WITHOUT_CLASSIFICATION	9.48957873473424E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999966893885922	WITHOUT_CLASSIFICATION	3.3106114076953604E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999713083689	WITHOUT_CLASSIFICATION	2.8691631087220185E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999990513245602	WITHOUT_CLASSIFICATION	9.486754397945592E-7	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997746807548	WITHOUT_CLASSIFICATION	2.253192451455941E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999976503862446	WITHOUT_CLASSIFICATION	2.3496137555290317E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999993779597927	WITHOUT_CLASSIFICATION	6.220402073378016E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999644728998	WITHOUT_CLASSIFICATION	3.5527100245508215E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999995771886762	WITHOUT_CLASSIFICATION	4.228113238432499E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.99999993596791	WITHOUT_CLASSIFICATION	6.403208986507513E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998518980494	WITHOUT_CLASSIFICATION	1.4810195062845995E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999997506328053	WITHOUT_CLASSIFICATION	2.493671947343742E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994805614245	WITHOUT_CLASSIFICATION	5.194385754215678E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999994805614245	WITHOUT_CLASSIFICATION	5.194385754215678E-7	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998846440787	WITHOUT_CLASSIFICATION	1.1535592129312145E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999959211481246	WITHOUT_CLASSIFICATION	4.078851875342556E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999995978364837	WITHOUT_CLASSIFICATION	4.021635162719676E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999986822384475	WITHOUT_CLASSIFICATION	1.3177615524399836E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998487330047	WITHOUT_CLASSIFICATION	1.51266995313849E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999858805801584	WITHOUT_CLASSIFICATION	1.411941984168632E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999994186605067	WITHOUT_CLASSIFICATION	5.813394933244663E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999964807397	WITHOUT_CLASSIFICATION	3.5192603758391307E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998616939396102	WITHOUT_CLASSIFICATION	1.3830606038972343E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999521596472	WITHOUT_CLASSIFICATION	4.784035280097205E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999738475307	WITHOUT_CLASSIFICATION	2.61524693287548E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999993091733353	WITHOUT_CLASSIFICATION	6.90826664675951E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999982663084962	WITHOUT_CLASSIFICATION	1.7336915038336388E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999999291081854	WITHOUT_CLASSIFICATION	7.089181473076417E-8	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999995086252037	WITHOUT_CLASSIFICATION	4.91374796272641E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999955693924861	WITHOUT_CLASSIFICATION	4.430607513856504E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999955693924861	WITHOUT_CLASSIFICATION	4.430607513856504E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999976402928	WITHOUT_CLASSIFICATION	2.3597071554306717E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999998739236844	WITHOUT_CLASSIFICATION	1.260763155659509E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999992342048063	WITHOUT_CLASSIFICATION	7.657951936592094E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999371381693	WITHOUT_CLASSIFICATION	6.286183074167871E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999715928242745	WITHOUT_CLASSIFICATION	2.840717572538977E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999508530145	WITHOUT_CLASSIFICATION	4.9146985439596106E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994520451049	WITHOUT_CLASSIFICATION	5.479548951035025E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999994520451049	WITHOUT_CLASSIFICATION	5.479548951035025E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999994518518335	WITHOUT_CLASSIFICATION	5.48148166468895E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999995940292	WITHOUT_CLASSIFICATION	4.059708015950893E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999978199610943	WITHOUT_CLASSIFICATION	2.1800389056569815E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999983370278	WITHOUT_CLASSIFICATION	1.662972284939819E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999996541746365	WITHOUT_CLASSIFICATION	3.4582536341212466E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999881668419021	WITHOUT_CLASSIFICATION	1.1833158097910433E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999999992964955	WITHOUT_CLASSIFICATION	7.0350450103981765E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999999921256	WITHOUT_CLASSIFICATION	7.874399996867977E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998790937695	WITHOUT_CLASSIFICATION	1.2090623046418877E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999885899612649	WITHOUT_CLASSIFICATION	1.1410038735022279E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999994762852837	WITHOUT_CLASSIFICATION	5.237147162430414E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999947664796874	WITHOUT_CLASSIFICATION	5.233520312617419E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999985958982264	WITHOUT_CLASSIFICATION	1.4041017736874812E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999985814253434	WITHOUT_CLASSIFICATION	1.4185746566200677E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999931535171719	WITHOUT_CLASSIFICATION	6.846482828196255E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999249297341	WITHOUT_CLASSIFICATION	7.507026586502625E-8	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999995044194695	WITHOUT_CLASSIFICATION	4.955805305466022E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999991981500058	WITHOUT_CLASSIFICATION	8.018499942752701E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999990623862554	WITHOUT_CLASSIFICATION	9.376137447200065E-7	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999998271605993	WITHOUT_CLASSIFICATION	1.7283940067726007E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994857073911	WITHOUT_CLASSIFICATION	5.142926089308847E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999339108601	WITHOUT_CLASSIFICATION	6.608913990173445E-7	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999817925112465	WITHOUT_CLASSIFICATION	1.8207488753387104E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998045618769	WITHOUT_CLASSIFICATION	1.954381230908089E-7	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998565312798	WITHOUT_CLASSIFICATION	1.4346872022906083E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999998284879407	WITHOUT_CLASSIFICATION	1.7151205940955206E-7	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999851969379785	WITHOUT_CLASSIFICATION	1.4803062021510717E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999183352652	WITHOUT_CLASSIFICATION	8.166473474862086E-8	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999974492929	WITHOUT_CLASSIFICATION	2.550707148222825E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999793355019	WITHOUT_CLASSIFICATION	2.0664498170789912E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999918291190093	WITHOUT_CLASSIFICATION	8.170880990598828E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999992719427897	WITHOUT_CLASSIFICATION	7.280572103492459E-7	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999993795994069	WITHOUT_CLASSIFICATION	6.204005930866295E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999996602607628	WITHOUT_CLASSIFICATION	3.397392372814734E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999977139009625	WITHOUT_CLASSIFICATION	2.286099037459588E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999958686600602	WITHOUT_CLASSIFICATION	4.1313399398242485E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999990976621	WITHOUT_CLASSIFICATION	9.023379000482414E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999999025113443	WITHOUT_CLASSIFICATION	9.748865581963037E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999995265865207	WITHOUT_CLASSIFICATION	4.7341347938878666E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995457839529	WITHOUT_CLASSIFICATION	4.5421604716329907E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999924589005	WITHOUT_CLASSIFICATION	7.541099506657483E-8	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999994660068562	WITHOUT_CLASSIFICATION	5.339931437656274E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999988452506507	WITHOUT_CLASSIFICATION	1.1547493492572766E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998149626417	WITHOUT_CLASSIFICATION	1.8503735822860897E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999869162209	WITHOUT_CLASSIFICATION	1.308377915041976E-8	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999996297006748	WITHOUT_CLASSIFICATION	3.7029932523005575E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999995265865207	WITHOUT_CLASSIFICATION	4.7341347938878666E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995457839529	WITHOUT_CLASSIFICATION	4.5421604716329907E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999973492920432	WITHOUT_CLASSIFICATION	2.650707956757349E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999986756253403	WITHOUT_CLASSIFICATION	1.3243746596702725E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999029038823	WITHOUT_CLASSIFICATION	9.709611767584742E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999995091961742	WITHOUT_CLASSIFICATION	4.908038258446184E-7	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999937843272	WITHOUT_CLASSIFICATION	6.2156727756448025E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999994332278097	WITHOUT_CLASSIFICATION	5.667721902476583E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999883279165844	WITHOUT_CLASSIFICATION	1.1672083415508868E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999976452610297	WITHOUT_CLASSIFICATION	2.354738970239911E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999999961298025	WITHOUT_CLASSIFICATION	3.870197500791575E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999923416045132	WITHOUT_CLASSIFICATION	7.658395486861655E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999997785802816	WITHOUT_CLASSIFICATION	2.2141971832558918E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999923416045132	WITHOUT_CLASSIFICATION	7.658395486861655E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999962958761677	WITHOUT_CLASSIFICATION	3.7041238323678197E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999972935303182	WITHOUT_CLASSIFICATION	2.706469681743645E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999938365406494	WITHOUT_CLASSIFICATION	6.163459350544625E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981582724966	WITHOUT_CLASSIFICATION	1.8417275034097837E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999989484165956	WITHOUT_CLASSIFICATION	1.0515834044115375E-6	TEST
//}	WITHOUT_CLASSIFICATION	0.9999698385399238	WITHOUT_CLASSIFICATION	3.01614600761345E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.9999698385399238	WITHOUT_CLASSIFICATION	3.01614600761345E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999940081266909	WITHOUT_CLASSIFICATION	5.991873309005107E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999993239430846	WITHOUT_CLASSIFICATION	6.760569155538353E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999987898584194	WITHOUT_CLASSIFICATION	1.2101415805957618E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999981835008531	WITHOUT_CLASSIFICATION	1.816499146900749E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999992034330552	WITHOUT_CLASSIFICATION	7.965669448055612E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999441096735097	WITHOUT_CLASSIFICATION	5.589032649028389E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977837224008	WITHOUT_CLASSIFICATION	2.216277599129859E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999996490022137	WITHOUT_CLASSIFICATION	3.509977861901034E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999964385869973	WITHOUT_CLASSIFICATION	3.561413002733235E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999923174612203	WITHOUT_CLASSIFICATION	7.682538779657018E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999967376404713	WITHOUT_CLASSIFICATION	3.2623595288101934E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999992586219157	WITHOUT_CLASSIFICATION	7.413780841532316E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999723724299132	WITHOUT_CLASSIFICATION	2.7627570086714843E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999997025364368	WITHOUT_CLASSIFICATION	2.97463563194114E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999993298399755	WITHOUT_CLASSIFICATION	6.701600243903385E-7	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999987647569	WITHOUT_CLASSIFICATION	1.235243156990441E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999041274688	WITHOUT_CLASSIFICATION	9.587253129157332E-8	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999476222201	WITHOUT_CLASSIFICATION	5.2377779805593654E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999988432731651	WITHOUT_CLASSIFICATION	1.1567268349248232E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998780678601469	WITHOUT_CLASSIFICATION	1.2193213985308534E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999899451174	WITHOUT_CLASSIFICATION	1.0054882618733952E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999963735764755	WITHOUT_CLASSIFICATION	3.6264235244111514E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999243877307	WITHOUT_CLASSIFICATION	7.561226941516756E-8	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999993345831842	WITHOUT_CLASSIFICATION	6.654168158545506E-7	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999578514526	WITHOUT_CLASSIFICATION	4.214854739283283E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999868941309447	WITHOUT_CLASSIFICATION	1.3105869055370143E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999922925361	WITHOUT_CLASSIFICATION	7.707463838277341E-9	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999979944833941	WITHOUT_CLASSIFICATION	2.0055166058248E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998272796632	WITHOUT_CLASSIFICATION	1.7272033675270884E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999995727189606	WITHOUT_CLASSIFICATION	4.272810393774218E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999736855864522	WITHOUT_CLASSIFICATION	2.6314413547883806E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999920957331889	WITHOUT_CLASSIFICATION	7.904266811080981E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977837224008	WITHOUT_CLASSIFICATION	2.216277599129859E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999999960778566	WITHOUT_CLASSIFICATION	3.922143410439233E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999848847317562	WITHOUT_CLASSIFICATION	1.5115268243876037E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9955230306680566	WITHOUT_CLASSIFICATION	0.004476969331943401	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999539722913175	WITHOUT_CLASSIFICATION	4.6027708682383256E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999999856286048	WITHOUT_CLASSIFICATION	1.4371395204240916E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999978166758204	WITHOUT_CLASSIFICATION	2.183324179521466E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999981835008531	WITHOUT_CLASSIFICATION	1.816499146900749E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999981835008531	WITHOUT_CLASSIFICATION	1.816499146900749E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999995371035659	WITHOUT_CLASSIFICATION	4.628964341153965E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999950263531802	WITHOUT_CLASSIFICATION	4.973646819885535E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999992357308198	WITHOUT_CLASSIFICATION	7.64269180125652E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998042724332	WITHOUT_CLASSIFICATION	1.9572756672504515E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999997567068311	WITHOUT_CLASSIFICATION	2.43293168951759E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998575050026	WITHOUT_CLASSIFICATION	1.424949973646946E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999996693330118	WITHOUT_CLASSIFICATION	3.3066698825750523E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999833966682	WITHOUT_CLASSIFICATION	1.6603331804044877E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999999916031255	WITHOUT_CLASSIFICATION	8.396874500192203E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999487115638	WITHOUT_CLASSIFICATION	5.128843619182525E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999962609228332	WITHOUT_CLASSIFICATION	3.7390771667955176E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999183223972176	WITHOUT_CLASSIFICATION	8.167760278239741E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.999996396850218	WITHOUT_CLASSIFICATION	3.6031497820451628E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999487115638	WITHOUT_CLASSIFICATION	5.128843619182525E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999995224291759	WITHOUT_CLASSIFICATION	4.775708241498084E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999997646163771	WITHOUT_CLASSIFICATION	2.353836229572917E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999995439438747	WITHOUT_CLASSIFICATION	4.5605612528883336E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.998150998693702	WITHOUT_CLASSIFICATION	0.0018490013062980126	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999183223972176	WITHOUT_CLASSIFICATION	8.167760278239741E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986117173558	WITHOUT_CLASSIFICATION	1.3882826442339234E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999939201951	WITHOUT_CLASSIFICATION	6.079804843332577E-9	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999921329268	WITHOUT_CLASSIFICATION	7.867073161634814E-9	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999853062066	WITHOUT_CLASSIFICATION	1.4693793348558148E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.999961790634147	WITHOUT_CLASSIFICATION	3.820936585297863E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993827626253	WITHOUT_CLASSIFICATION	6.172373746899267E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999423535476	WITHOUT_CLASSIFICATION	5.76464525193473E-8	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999988569124295	WITHOUT_CLASSIFICATION	1.143087570531353E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999963494307498	WITHOUT_CLASSIFICATION	3.650569250169945E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999979994801976	WITHOUT_CLASSIFICATION	2.000519802340899E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999999989678715	WITHOUT_CLASSIFICATION	1.0321284957767698E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999858638368	WITHOUT_CLASSIFICATION	1.4136163190275429E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999487115638	WITHOUT_CLASSIFICATION	5.128843619182525E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999986117173558	WITHOUT_CLASSIFICATION	1.3882826442339234E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999921329268	WITHOUT_CLASSIFICATION	7.867073161634814E-9	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996756272906	WITHOUT_CLASSIFICATION	3.2437270929592384E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999967397814981	WITHOUT_CLASSIFICATION	3.2602185020110725E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999219919486	WITHOUT_CLASSIFICATION	7.800805136633798E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999183223972176	WITHOUT_CLASSIFICATION	8.167760278239741E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999903776694559	WITHOUT_CLASSIFICATION	9.622330544161644E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999978432959395	WITHOUT_CLASSIFICATION	2.1567040604190614E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999957339191731	WITHOUT_CLASSIFICATION	4.266080827027209E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999632151384	WITHOUT_CLASSIFICATION	3.6784861599727838E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999988569124295	WITHOUT_CLASSIFICATION	1.143087570531353E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999995224291759	WITHOUT_CLASSIFICATION	4.775708241498084E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999964740454715	WITHOUT_CLASSIFICATION	3.525954528325516E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999855961981877	WITHOUT_CLASSIFICATION	1.4403801812383584E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999981426459147	WITHOUT_CLASSIFICATION	1.8573540852667269E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999965408272681	WITHOUT_CLASSIFICATION	3.4591727318799505E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999960635043763	WITHOUT_CLASSIFICATION	3.936495623751247E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999961493476157	WITHOUT_CLASSIFICATION	3.850652384239311E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.999997911534747	WITHOUT_CLASSIFICATION	2.088465252930895E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981582724966	WITHOUT_CLASSIFICATION	1.8417275034097837E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999777391223	WITHOUT_CLASSIFICATION	2.22608776589837E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998795983255	WITHOUT_CLASSIFICATION	1.20401674479483E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999238792487743	WITHOUT_CLASSIFICATION	7.612075122571671E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999982745757487	WITHOUT_CLASSIFICATION	1.7254242511913507E-6	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997675029242	WITHOUT_CLASSIFICATION	2.3249707584444876E-7	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999914393235	WITHOUT_CLASSIFICATION	8.560676530949375E-9	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999995733707734	WITHOUT_CLASSIFICATION	4.2662922660131054E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999217116302	WITHOUT_CLASSIFICATION	7.828836977107178E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999632151384	WITHOUT_CLASSIFICATION	3.6784861599727838E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999933961508507	WITHOUT_CLASSIFICATION	6.603849149358637E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999955447264472	WITHOUT_CLASSIFICATION	4.455273552757151E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999897175144931	WITHOUT_CLASSIFICATION	1.0282485506937477E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999978631813949	WITHOUT_CLASSIFICATION	2.1368186050020224E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999966483847847	WITHOUT_CLASSIFICATION	3.351615215180494E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999862989317	WITHOUT_CLASSIFICATION	1.3701068279553154E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999998579711021	WITHOUT_CLASSIFICATION	1.4202889781120446E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999913905120192	WITHOUT_CLASSIFICATION	8.609487980782886E-6	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999997574605719	WITHOUT_CLASSIFICATION	2.4253942809850426E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999400889689865	WITHOUT_CLASSIFICATION	5.991103101362013E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999977010018004	WITHOUT_CLASSIFICATION	2.2989981995380013E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999941618956443	WITHOUT_CLASSIFICATION	5.838104355751272E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999979809922865	WITHOUT_CLASSIFICATION	2.019007713504683E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999980137727443	WITHOUT_CLASSIFICATION	1.986227255666336E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999019652939	WITHOUT_CLASSIFICATION	9.803470617582082E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997936098851	WITHOUT_CLASSIFICATION	2.0639011496518764E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999971049685	WITHOUT_CLASSIFICATION	2.8950315060162685E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999822777423	WITHOUT_CLASSIFICATION	1.772225764533889E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999993962262173	WITHOUT_CLASSIFICATION	6.037737827323507E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999981342791973	WITHOUT_CLASSIFICATION	1.8657208028261716E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999983709820172	WITHOUT_CLASSIFICATION	1.6290179828368724E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999997503992294	WITHOUT_CLASSIFICATION	2.496007706346738E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997292446801	WITHOUT_CLASSIFICATION	2.7075531994183757E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999759749336	WITHOUT_CLASSIFICATION	2.4025066327362425E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999029939449	WITHOUT_CLASSIFICATION	9.700605503092463E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997812781916757	WITHOUT_CLASSIFICATION	2.1872180832424663E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999970557427939	WITHOUT_CLASSIFICATION	2.9442572061109303E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999994729372754	WITHOUT_CLASSIFICATION	5.27062724594725E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999997405424184	WITHOUT_CLASSIFICATION	2.5945758168486874E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997387831723804	WITHOUT_CLASSIFICATION	2.612168276196086E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999954590609	WITHOUT_CLASSIFICATION	4.540939104115033E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999981271703706	WITHOUT_CLASSIFICATION	1.8728296294653738E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999259309287	WITHOUT_CLASSIFICATION	7.406907122283578E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999422326485257	WITHOUT_CLASSIFICATION	5.776735147423389E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999996007287307	WITHOUT_CLASSIFICATION	3.99271269156554E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999866570173	WITHOUT_CLASSIFICATION	1.3342982693765129E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999381277659	WITHOUT_CLASSIFICATION	6.187223410869392E-8	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997710756264	WITHOUT_CLASSIFICATION	2.2892437344374777E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.999999866570173	WITHOUT_CLASSIFICATION	1.3342982693765129E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999996007287307	WITHOUT_CLASSIFICATION	3.99271269156554E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999381277659	WITHOUT_CLASSIFICATION	6.187223410869392E-8	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999997450661275	WITHOUT_CLASSIFICATION	2.5493387243573787E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999994912535746	WITHOUT_CLASSIFICATION	5.087464255079303E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999998128226276	WITHOUT_CLASSIFICATION	1.8717737234634477E-7	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999997018579697	WITHOUT_CLASSIFICATION	2.9814203038479764E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999691523287	WITHOUT_CLASSIFICATION	3.084767130970804E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9992218622465197	WITHOUT_CLASSIFICATION	7.781377534802056E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999962621967249	WITHOUT_CLASSIFICATION	3.737803275218513E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999973064061599	WITHOUT_CLASSIFICATION	2.693593840174869E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999931637016	WITHOUT_CLASSIFICATION	6.836298407248905E-8	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999992584835423	WITHOUT_CLASSIFICATION	7.415164575958497E-7	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999996465947499	WITHOUT_CLASSIFICATION	3.5340524994909434E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999989722656439	WITHOUT_CLASSIFICATION	1.027734356055731E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998578660658	WITHOUT_CLASSIFICATION	1.421339340473812E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999997789511908	WITHOUT_CLASSIFICATION	2.210488092061479E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996085696848	WITHOUT_CLASSIFICATION	3.9143031515856085E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999584126135	WITHOUT_CLASSIFICATION	4.158738643529713E-8	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999522136324	WITHOUT_CLASSIFICATION	4.778636756234195E-8	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999937521544	WITHOUT_CLASSIFICATION	6.247845589872079E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996993333977	WITHOUT_CLASSIFICATION	3.006666023126891E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999980233762805	WITHOUT_CLASSIFICATION	1.9766237195356323E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999985014909886	WITHOUT_CLASSIFICATION	1.4985090114499607E-6	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999953497024	WITHOUT_CLASSIFICATION	4.650297603741133E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999984609569725	WITHOUT_CLASSIFICATION	1.5390430274780198E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999934295702	WITHOUT_CLASSIFICATION	6.570429796526589E-8	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999928717778029	WITHOUT_CLASSIFICATION	7.128222197163181E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999928717778029	WITHOUT_CLASSIFICATION	7.128222197163181E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999987828597	WITHOUT_CLASSIFICATION	1.2171402912994911E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999987828597	WITHOUT_CLASSIFICATION	1.2171402912994911E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999999514506232	WITHOUT_CLASSIFICATION	4.854937678997524E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999522136324	WITHOUT_CLASSIFICATION	4.778636756234195E-8	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999994468269291	WITHOUT_CLASSIFICATION	5.531730708707657E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999953171954	WITHOUT_CLASSIFICATION	4.682804538673987E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996346031714	WITHOUT_CLASSIFICATION	3.6539682857478593E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996346031714	WITHOUT_CLASSIFICATION	3.6539682857478593E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998816396775	WITHOUT_CLASSIFICATION	1.1836032255433048E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999995174771427	WITHOUT_CLASSIFICATION	4.825228574067587E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999893049237	WITHOUT_CLASSIFICATION	1.0695076243661367E-8	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999986689279818	WITHOUT_CLASSIFICATION	1.3310720182556758E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999994495495955	WITHOUT_CLASSIFICATION	5.504504045401584E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999265170717	WITHOUT_CLASSIFICATION	7.348292831943828E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999950425234552	WITHOUT_CLASSIFICATION	4.957476544893485E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999994205878974	WITHOUT_CLASSIFICATION	5.794121026741234E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999995160932037	WITHOUT_CLASSIFICATION	4.839067962969576E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998982138989	WITHOUT_CLASSIFICATION	1.0178610116124563E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999999366456255	WITHOUT_CLASSIFICATION	6.335437452275962E-8	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999991400352575	WITHOUT_CLASSIFICATION	8.599647425027613E-7	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996427257786	WITHOUT_CLASSIFICATION	3.572742213714924E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999990182399912	WITHOUT_CLASSIFICATION	9.817600088620295E-7	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999975181313988	WITHOUT_CLASSIFICATION	2.481868601206645E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999418770096	WITHOUT_CLASSIFICATION	5.812299040643398E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998651885201	WITHOUT_CLASSIFICATION	1.3481147989948406E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999706731496	WITHOUT_CLASSIFICATION	2.9326850469847502E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999859951526	WITHOUT_CLASSIFICATION	1.4004847496224589E-8	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999847798563	WITHOUT_CLASSIFICATION	1.5220143685126834E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999957791107	WITHOUT_CLASSIFICATION	4.220889302345082E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999989010613146	WITHOUT_CLASSIFICATION	1.098938685335826E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999849962086	WITHOUT_CLASSIFICATION	1.5003791425384703E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999933402299	WITHOUT_CLASSIFICATION	6.659770077317647E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999041905012679	WITHOUT_CLASSIFICATION	9.580949873201778E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999991676161183	WITHOUT_CLASSIFICATION	8.323838818477138E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999941618956443	WITHOUT_CLASSIFICATION	5.838104355751272E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999992539015254	WITHOUT_CLASSIFICATION	7.460984745848511E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997497381451	WITHOUT_CLASSIFICATION	2.5026185493209265E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989925599957	WITHOUT_CLASSIFICATION	1.0074400043340286E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999815015375	WITHOUT_CLASSIFICATION	1.8498462502247449E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999990151902702	WITHOUT_CLASSIFICATION	9.848097297557631E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999990151902702	WITHOUT_CLASSIFICATION	9.848097297557631E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999999800227335	WITHOUT_CLASSIFICATION	1.9977266503511603E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999996120931274	WITHOUT_CLASSIFICATION	3.8790687256684304E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967219745827	WITHOUT_CLASSIFICATION	3.2780254172236713E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999967219745827	WITHOUT_CLASSIFICATION	3.2780254172236713E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998702593588	WITHOUT_CLASSIFICATION	1.2974064126045246E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999998367575701	WITHOUT_CLASSIFICATION	1.6324242990387605E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999971255359723	WITHOUT_CLASSIFICATION	2.8744640277621893E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996836892454	WITHOUT_CLASSIFICATION	3.1631075463260924E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999989868723341	WITHOUT_CLASSIFICATION	1.013127665813036E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999982099660519	WITHOUT_CLASSIFICATION	1.7900339481407404E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999997116771535	WITHOUT_CLASSIFICATION	2.883228464718545E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999999876386451	WITHOUT_CLASSIFICATION	1.2361354893083615E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999954615224	WITHOUT_CLASSIFICATION	4.5384776048913294E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999954615224	WITHOUT_CLASSIFICATION	4.5384776048913294E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999999999005655	WITHOUT_CLASSIFICATION	9.943450616125877E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998531201952	WITHOUT_CLASSIFICATION	1.4687980471879698E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998531201952	WITHOUT_CLASSIFICATION	1.4687980471879698E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999809122734	WITHOUT_CLASSIFICATION	1.90877265794233E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999997968008358	WITHOUT_CLASSIFICATION	2.0319916415794886E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9933535949363074	WITHOUT_CLASSIFICATION	0.006646405063692693	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999161228167	WITHOUT_CLASSIFICATION	8.387718330909375E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999804657258	WITHOUT_CLASSIFICATION	1.9534274214983635E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999126192757	WITHOUT_CLASSIFICATION	8.738072432364517E-8	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999995612190358	WITHOUT_CLASSIFICATION	4.387809642160683E-7	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999541329934888	WITHOUT_CLASSIFICATION	4.586700651127955E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999672034923	WITHOUT_CLASSIFICATION	3.279650778798604E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999947759664735	WITHOUT_CLASSIFICATION	5.224033526429498E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999829874248	WITHOUT_CLASSIFICATION	1.7012575299376564E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999945509482	WITHOUT_CLASSIFICATION	5.449051787616619E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928358776065	WITHOUT_CLASSIFICATION	7.164122393592817E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928358776065	WITHOUT_CLASSIFICATION	7.164122393592817E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928358776065	WITHOUT_CLASSIFICATION	7.164122393592817E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999928358776065	WITHOUT_CLASSIFICATION	7.164122393592817E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999994831428067	WITHOUT_CLASSIFICATION	5.168571933729268E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999984850675477	WITHOUT_CLASSIFICATION	1.5149324523305475E-6	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999974445544789	WITHOUT_CLASSIFICATION	2.5554455210508508E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.999991005489201	WITHOUT_CLASSIFICATION	8.994510799085181E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999980045280901	WITHOUT_CLASSIFICATION	1.9954719098584313E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999996420503389	WITHOUT_CLASSIFICATION	3.5794966114613895E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999963517087076	WITHOUT_CLASSIFICATION	3.6482912924465588E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999986314623871	WITHOUT_CLASSIFICATION	1.368537612885145E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999761769269	WITHOUT_CLASSIFICATION	2.3823073104194705E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.999999953524682	WITHOUT_CLASSIFICATION	4.647531806613954E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999995605153985	WITHOUT_CLASSIFICATION	4.3948460148605824E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995910959971	WITHOUT_CLASSIFICATION	4.089040029021857E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9922176769218342	WITHOUT_CLASSIFICATION	0.007782323078165924	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999932052632398	WITHOUT_CLASSIFICATION	6.794736760182411E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999972655958631	WITHOUT_CLASSIFICATION	2.734404136836983E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995910959971	WITHOUT_CLASSIFICATION	4.089040029021857E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999698215421936	WITHOUT_CLASSIFICATION	3.0178457806408158E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999995396881	WITHOUT_CLASSIFICATION	4.6031193182066015E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999860808705	WITHOUT_CLASSIFICATION	1.391912964173129E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999961662560268	WITHOUT_CLASSIFICATION	3.8337439731641884E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997679614742	WITHOUT_CLASSIFICATION	2.3203852590140995E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996661985427	WITHOUT_CLASSIFICATION	3.3380145729894697E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999991177275	WITHOUT_CLASSIFICATION	8.822724946939298E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999998966203718	WITHOUT_CLASSIFICATION	1.0337962819588827E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999499152429	WITHOUT_CLASSIFICATION	5.008475715019587E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999730678664	WITHOUT_CLASSIFICATION	2.693213360464385E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999146255638	WITHOUT_CLASSIFICATION	8.53744362007099E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998884696555	WITHOUT_CLASSIFICATION	1.1153034451906038E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999986666904926	WITHOUT_CLASSIFICATION	1.3333095073127797E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998586592613797	WITHOUT_CLASSIFICATION	1.4134073862034742E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998819382239	WITHOUT_CLASSIFICATION	1.1806177611920787E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999992380397306	WITHOUT_CLASSIFICATION	7.619602694652334E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998336788245	WITHOUT_CLASSIFICATION	1.663211754367707E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997991166358	WITHOUT_CLASSIFICATION	2.0088336429062276E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999309334014	WITHOUT_CLASSIFICATION	6.906659859242454E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999997991166358	WITHOUT_CLASSIFICATION	2.0088336429062276E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999763564614	WITHOUT_CLASSIFICATION	2.3643538606051437E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999287771612	WITHOUT_CLASSIFICATION	7.122283880205487E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999999329704913	WITHOUT_CLASSIFICATION	6.702950875163562E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999946370356512	WITHOUT_CLASSIFICATION	5.362964348733253E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998336788245	WITHOUT_CLASSIFICATION	1.663211754367707E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999999309334014	WITHOUT_CLASSIFICATION	6.906659859242454E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999763564614	WITHOUT_CLASSIFICATION	2.3643538606051437E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998695835898	WITHOUT_CLASSIFICATION	1.3041641026930086E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999999066288282	WITHOUT_CLASSIFICATION	9.337117182392152E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999960965836614	WITHOUT_CLASSIFICATION	3.903416338629054E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999983843284526	WITHOUT_CLASSIFICATION	1.6156715474243619E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999999019068484	WITHOUT_CLASSIFICATION	9.809315153070505E-8	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999495048761	WITHOUT_CLASSIFICATION	5.049512390717433E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998651885201	WITHOUT_CLASSIFICATION	1.3481147989948406E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999287771612	WITHOUT_CLASSIFICATION	7.122283880205487E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999193415793	WITHOUT_CLASSIFICATION	8.065842070866818E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999446985941	WITHOUT_CLASSIFICATION	5.53014059338786E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999638948589	WITHOUT_CLASSIFICATION	3.610514104422591E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998651885201	WITHOUT_CLASSIFICATION	1.3481147989948406E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999997684086934	WITHOUT_CLASSIFICATION	2.3159130653709996E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998651885201	WITHOUT_CLASSIFICATION	1.3481147989948406E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998883563872	WITHOUT_CLASSIFICATION	1.1164361282227135E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999987960584679	WITHOUT_CLASSIFICATION	1.2039415321971102E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999991461683655	WITHOUT_CLASSIFICATION	8.538316345163568E-7	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999488347017	WITHOUT_CLASSIFICATION	5.1165298415808213E-8	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999679234665	WITHOUT_CLASSIFICATION	3.207653351162384E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999998104248164	WITHOUT_CLASSIFICATION	1.8957518345256711E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999996398014793	WITHOUT_CLASSIFICATION	3.601985206678907E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999999496333533	WITHOUT_CLASSIFICATION	5.036664669285328E-7	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987373162325	WITHOUT_CLASSIFICATION	1.2626837674488846E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999962395507624	WITHOUT_CLASSIFICATION	3.760449237608928E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999850610624791	WITHOUT_CLASSIFICATION	1.4938937520859323E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999993489639412	WITHOUT_CLASSIFICATION	6.51036058771348E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9933535949363074	WITHOUT_CLASSIFICATION	0.006646405063692693	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999948020629622	WITHOUT_CLASSIFICATION	5.197937037787082E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999923941233921	WITHOUT_CLASSIFICATION	7.605876607911069E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999940940409521	WITHOUT_CLASSIFICATION	5.905959047934832E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999442403212977	WITHOUT_CLASSIFICATION	5.575967870238383E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999396344044	WITHOUT_CLASSIFICATION	6.036559567360449E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999898833841	WITHOUT_CLASSIFICATION	1.0116615911961417E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999868471278	WITHOUT_CLASSIFICATION	1.3152872225308108E-8	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999979741593172	WITHOUT_CLASSIFICATION	2.0258406827323444E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999956228475	WITHOUT_CLASSIFICATION	4.377152540198759E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999003357388	WITHOUT_CLASSIFICATION	9.9664261137607E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9918170438849943	WITHOUT_CLASSIFICATION	0.008182956115005743	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999783098569759	WITHOUT_CLASSIFICATION	2.1690143024024953E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999936980743519	WITHOUT_CLASSIFICATION	6.3019256480269005E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999911412258619	WITHOUT_CLASSIFICATION	8.858774138160296E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999987825282718	WITHOUT_CLASSIFICATION	1.2174717281500868E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999783127348645	WITHOUT_CLASSIFICATION	2.1687265135539054E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984722844328	WITHOUT_CLASSIFICATION	1.527715567182307E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999962988186	WITHOUT_CLASSIFICATION	3.701181385533652E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999973108258	WITHOUT_CLASSIFICATION	2.6891741476462057E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999910115085527	WITHOUT_CLASSIFICATION	8.988491447226163E-6	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999888856528182	WITHOUT_CLASSIFICATION	1.1114347181812285E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9966733137109368	WITHOUT_CLASSIFICATION	0.0033266862890631316	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999774920959364	WITHOUT_CLASSIFICATION	2.2507904063516066E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999989963697132	WITHOUT_CLASSIFICATION	1.0036302867622955E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999968411981568	WITHOUT_CLASSIFICATION	3.1588018433350152E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999572673304146	WITHOUT_CLASSIFICATION	4.273266958538823E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999996979734459	WITHOUT_CLASSIFICATION	3.0202655410128164E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.992679371205658	WITHOUT_CLASSIFICATION	0.007320628794342048	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999470138741	WITHOUT_CLASSIFICATION	5.2986125879792144E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999989803518622	WITHOUT_CLASSIFICATION	1.019648137827984E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999869808540094	WITHOUT_CLASSIFICATION	1.3019145990545215E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999869808540094	WITHOUT_CLASSIFICATION	1.3019145990545215E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999996921091597	WITHOUT_CLASSIFICATION	3.0789084021801497E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999999496333533	WITHOUT_CLASSIFICATION	5.036664669285328E-7	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999988731656065	WITHOUT_CLASSIFICATION	1.1268343934175947E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999982103200336	WITHOUT_CLASSIFICATION	1.7896799665185715E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999963013144	WITHOUT_CLASSIFICATION	3.6986856195153194E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999620473057	WITHOUT_CLASSIFICATION	3.795269423636018E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999939733373671	WITHOUT_CLASSIFICATION	6.026662632944973E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998932022968087	WITHOUT_CLASSIFICATION	1.0679770319124013E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999694828995744	WITHOUT_CLASSIFICATION	3.0517100425448183E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999992072880408	WITHOUT_CLASSIFICATION	7.92711959202355E-7	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999969638741	WITHOUT_CLASSIFICATION	3.036125888565077E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999883216832	WITHOUT_CLASSIFICATION	1.1678316775803022E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998282435641	WITHOUT_CLASSIFICATION	1.7175643586030186E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999544828640133	WITHOUT_CLASSIFICATION	4.551713598666229E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996809522866	WITHOUT_CLASSIFICATION	3.190477133465851E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999076797746	WITHOUT_CLASSIFICATION	9.232022532142558E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999546610444	WITHOUT_CLASSIFICATION	4.53389555418182E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999908640868	WITHOUT_CLASSIFICATION	9.135913217791734E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.99999995522595	WITHOUT_CLASSIFICATION	4.477405007399084E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999733493091	WITHOUT_CLASSIFICATION	2.6650690794417426E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999983582805	WITHOUT_CLASSIFICATION	1.641719550011871E-9	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999545549669	WITHOUT_CLASSIFICATION	4.5445032985220196E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997898688974	WITHOUT_CLASSIFICATION	2.1013110273820474E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998873189461	WITHOUT_CLASSIFICATION	1.1268105392449397E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.992679371205658	WITHOUT_CLASSIFICATION	0.007320628794342048	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999436521286	WITHOUT_CLASSIFICATION	5.6347871299295834E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999819732882	WITHOUT_CLASSIFICATION	1.8026711841452248E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999921439894	WITHOUT_CLASSIFICATION	7.85601057019657E-9	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999910600961237	WITHOUT_CLASSIFICATION	8.939903876277833E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999998198114589	WITHOUT_CLASSIFICATION	1.8018854115666888E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999998636451448	WITHOUT_CLASSIFICATION	1.3635485519458844E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999485708960477	WITHOUT_CLASSIFICATION	5.142910395227965E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999798959795	WITHOUT_CLASSIFICATION	2.0104020500389723E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999361694352	WITHOUT_CLASSIFICATION	6.383056490736997E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998373774598	WITHOUT_CLASSIFICATION	1.6262254027824226E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997295603146	WITHOUT_CLASSIFICATION	2.7043968544485975E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996288262361639	WITHOUT_CLASSIFICATION	3.711737638360916E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999882145526892	WITHOUT_CLASSIFICATION	1.1785447310782015E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999990207529595	WITHOUT_CLASSIFICATION	9.792470404204464E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999891845264	WITHOUT_CLASSIFICATION	1.0815473583113904E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999891845264	WITHOUT_CLASSIFICATION	1.0815473583113904E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999501639009	WITHOUT_CLASSIFICATION	4.983609916176527E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999997292542376	WITHOUT_CLASSIFICATION	2.7074576236921985E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999971561107828	WITHOUT_CLASSIFICATION	2.8438892171668474E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999971561107828	WITHOUT_CLASSIFICATION	2.8438892171668474E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999942096272	WITHOUT_CLASSIFICATION	5.790372823462808E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999995146205064	WITHOUT_CLASSIFICATION	4.853794937032956E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999870302173	WITHOUT_CLASSIFICATION	1.2969782662628742E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999988551208447	WITHOUT_CLASSIFICATION	1.1448791552506283E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999978587638699	WITHOUT_CLASSIFICATION	2.1412361300809593E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995092249684	WITHOUT_CLASSIFICATION	4.907750316918529E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999935290738	WITHOUT_CLASSIFICATION	6.470926164123492E-9	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999935290738	WITHOUT_CLASSIFICATION	6.470926164123492E-9	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999984433766037	WITHOUT_CLASSIFICATION	1.5566233963123754E-6	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999999911643971	WITHOUT_CLASSIFICATION	8.835602899544235E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999862755757828	WITHOUT_CLASSIFICATION	1.372442421726114E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999814345136	WITHOUT_CLASSIFICATION	1.8565486464631976E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999814345136	WITHOUT_CLASSIFICATION	1.8565486464631976E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998339925511	WITHOUT_CLASSIFICATION	1.6600744887346508E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999833066184	WITHOUT_CLASSIFICATION	1.669338159342998E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999925723573454	WITHOUT_CLASSIFICATION	7.4276426544926705E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.999999748166565	WITHOUT_CLASSIFICATION	2.5183343500992206E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998990949027	WITHOUT_CLASSIFICATION	1.0090509725818856E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998631739466	WITHOUT_CLASSIFICATION	1.3682605345538965E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999690677525	WITHOUT_CLASSIFICATION	3.0932247570183476E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.9999999158022116	WITHOUT_CLASSIFICATION	8.4197788472714E-8	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999359246527	WITHOUT_CLASSIFICATION	6.40753471540222E-8	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999981431098495	WITHOUT_CLASSIFICATION	1.8568901504409262E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999997952012707	WITHOUT_CLASSIFICATION	2.0479872932902212E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999990528864358	WITHOUT_CLASSIFICATION	9.471135642620156E-7	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999612742465841	WITHOUT_CLASSIFICATION	3.872575341583679E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999987734147294	WITHOUT_CLASSIFICATION	1.2265852705844294E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999992155696211	WITHOUT_CLASSIFICATION	7.844303789984923E-7	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999988450425836	WITHOUT_CLASSIFICATION	1.1549574163314354E-6	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999928845149	WITHOUT_CLASSIFICATION	7.115485132247225E-9	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999988868591525	WITHOUT_CLASSIFICATION	1.113140847541773E-6	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999998028941671	WITHOUT_CLASSIFICATION	1.9710583292508162E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999996852906429	WITHOUT_CLASSIFICATION	3.147093571883043E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999999405886341	WITHOUT_CLASSIFICATION	5.9411365987806715E-8	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999997623977774	WITHOUT_CLASSIFICATION	2.3760222256902937E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999904432657145	WITHOUT_CLASSIFICATION	9.556734285547177E-6	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999490581562629	WITHOUT_CLASSIFICATION	5.094184373697549E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999834640860277	WITHOUT_CLASSIFICATION	1.6535913972312235E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.999999921172717	WITHOUT_CLASSIFICATION	7.882728307977022E-8	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999996020591636	WITHOUT_CLASSIFICATION	3.9794083645191806E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999879893976811	WITHOUT_CLASSIFICATION	1.2010602318898804E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999997563936	WITHOUT_CLASSIFICATION	2.436064075324215E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999864508712	WITHOUT_CLASSIFICATION	1.3549128923000853E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999997887945307	WITHOUT_CLASSIFICATION	2.1120546921140145E-7	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999770350039	WITHOUT_CLASSIFICATION	2.2964996119249305E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999243669784	WITHOUT_CLASSIFICATION	7.563302170772706E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999985268743073	WITHOUT_CLASSIFICATION	1.4731256926443047E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999803518944	WITHOUT_CLASSIFICATION	1.9648105618705216E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999793864944848	WITHOUT_CLASSIFICATION	2.061350551515553E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999927249198939	WITHOUT_CLASSIFICATION	7.2750801061522276E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999989840513629	WITHOUT_CLASSIFICATION	1.0159486371385475E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999999822792015	WITHOUT_CLASSIFICATION	1.772079850160415E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998854686412	WITHOUT_CLASSIFICATION	1.1453135885604617E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999395988036	WITHOUT_CLASSIFICATION	6.040119631093262E-8	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999999632968591	WITHOUT_CLASSIFICATION	3.670314090360767E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999998207587785	WITHOUT_CLASSIFICATION	1.7924122159707934E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999785390322	WITHOUT_CLASSIFICATION	2.1460967855177065E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999997658034486	WITHOUT_CLASSIFICATION	2.341965513521775E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999153633359	WITHOUT_CLASSIFICATION	8.463666414420927E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997020604896	WITHOUT_CLASSIFICATION	2.9793951045043037E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999981324299737	WITHOUT_CLASSIFICATION	1.8675700263327133E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999230804402	WITHOUT_CLASSIFICATION	7.691955982564994E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999951777818981	WITHOUT_CLASSIFICATION	4.822218101894706E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999998028182676	WITHOUT_CLASSIFICATION	1.9718173250811816E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999822753053	WITHOUT_CLASSIFICATION	1.7724694640775157E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999972558404814	WITHOUT_CLASSIFICATION	2.744159518522251E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999941013528	WITHOUT_CLASSIFICATION	5.898647245722369E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999996826900553	WITHOUT_CLASSIFICATION	3.1730994458833456E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999998312813595	WITHOUT_CLASSIFICATION	1.68718640476256E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999468648738	WITHOUT_CLASSIFICATION	5.313512613618906E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999158547658	WITHOUT_CLASSIFICATION	8.41452342736751E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999999844559939	WITHOUT_CLASSIFICATION	1.554400611213795E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998323569659349	WITHOUT_CLASSIFICATION	1.676430340650756E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998490097444	WITHOUT_CLASSIFICATION	1.5099025562459792E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998490097444	WITHOUT_CLASSIFICATION	1.5099025562459792E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999726088840619	WITHOUT_CLASSIFICATION	2.739111593805213E-5	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999746464708186	WITHOUT_CLASSIFICATION	2.5353529181414467E-5	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999346308334	WITHOUT_CLASSIFICATION	6.536916662086204E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999803206142	WITHOUT_CLASSIFICATION	1.9679385743442923E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999995694826563	WITHOUT_CLASSIFICATION	4.3051734363828815E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999982883157732	WITHOUT_CLASSIFICATION	1.7116842267602434E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999636495948	WITHOUT_CLASSIFICATION	3.6350405194850756E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999978972226	WITHOUT_CLASSIFICATION	2.1027774018663085E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999991684052895	WITHOUT_CLASSIFICATION	8.315947104749993E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999966842358899	WITHOUT_CLASSIFICATION	3.3157641101348037E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999675340798	WITHOUT_CLASSIFICATION	3.2465920240997406E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999974491992738	WITHOUT_CLASSIFICATION	2.5508007261239435E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999308874783	WITHOUT_CLASSIFICATION	6.911252173377068E-8	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999845768075	WITHOUT_CLASSIFICATION	1.542319246565432E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996778332317	WITHOUT_CLASSIFICATION	3.2216676832300586E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996778332317	WITHOUT_CLASSIFICATION	3.2216676832300586E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999622785608	WITHOUT_CLASSIFICATION	3.772143919472441E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999999731517861	WITHOUT_CLASSIFICATION	2.684821390334164E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997708757159	WITHOUT_CLASSIFICATION	2.2912428418478397E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999999994196549	WITHOUT_CLASSIFICATION	5.803451106950831E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999220149166	WITHOUT_CLASSIFICATION	7.798508332466691E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968105305878	WITHOUT_CLASSIFICATION	3.1894694121912636E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.999997423643242	WITHOUT_CLASSIFICATION	2.5763567579268177E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999920438648683	WITHOUT_CLASSIFICATION	7.956135131776421E-6	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999986679852	WITHOUT_CLASSIFICATION	1.3320149163905858E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999713643293898	WITHOUT_CLASSIFICATION	2.863567061018516E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999991286678	WITHOUT_CLASSIFICATION	8.713322983894966E-10	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999987972130449	WITHOUT_CLASSIFICATION	1.2027869551802405E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999818716215	WITHOUT_CLASSIFICATION	1.812837857261831E-8	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999528725328	WITHOUT_CLASSIFICATION	4.7127467188921795E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999998688158824	WITHOUT_CLASSIFICATION	1.3118411760910596E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999171131442	WITHOUT_CLASSIFICATION	8.288685583205822E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999996130002481	WITHOUT_CLASSIFICATION	3.869997519088862E-6	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999970203385051	WITHOUT_CLASSIFICATION	2.979661494906625E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999999946396106	WITHOUT_CLASSIFICATION	5.360389398826222E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999845020524	WITHOUT_CLASSIFICATION	1.5497947532733604E-8	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999849044185	WITHOUT_CLASSIFICATION	1.5095581514284363E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999916296848	WITHOUT_CLASSIFICATION	8.370315271950502E-9	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998185098676	WITHOUT_CLASSIFICATION	1.8149013227451567E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999751979487986	WITHOUT_CLASSIFICATION	2.4802051201345817E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998999457777051	WITHOUT_CLASSIFICATION	1.0005422229488401E-4	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999993713847878	WITHOUT_CLASSIFICATION	6.286152121513168E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999921199921	WITHOUT_CLASSIFICATION	7.880007975089563E-9	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999224453606	WITHOUT_CLASSIFICATION	7.755463929566935E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999918296841847	WITHOUT_CLASSIFICATION	8.170315815332685E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999271013427	WITHOUT_CLASSIFICATION	7.289865737042135E-8	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999546620296793	WITHOUT_CLASSIFICATION	4.533797032062774E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999997545862053	WITHOUT_CLASSIFICATION	2.454137947901385E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999988072562	WITHOUT_CLASSIFICATION	1.1927438211721404E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999989234929	WITHOUT_CLASSIFICATION	1.0765071028529881E-8	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999985147731125	WITHOUT_CLASSIFICATION	1.4852268874575532E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999863003077	WITHOUT_CLASSIFICATION	1.3699692299801406E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999865517962	WITHOUT_CLASSIFICATION	1.3448203872458555E-8	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999990612973001	WITHOUT_CLASSIFICATION	9.38702700002764E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999992574210808	WITHOUT_CLASSIFICATION	7.425789193335049E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999440120072	WITHOUT_CLASSIFICATION	5.5987992728987725E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994166951417	WITHOUT_CLASSIFICATION	5.833048583155583E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999994166951417	WITHOUT_CLASSIFICATION	5.833048583155583E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999997798276777	WITHOUT_CLASSIFICATION	2.2017232221620897E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993651707444	WITHOUT_CLASSIFICATION	6.348292556006582E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999847278487	WITHOUT_CLASSIFICATION	1.527215129820469E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999316649291	WITHOUT_CLASSIFICATION	6.833507088746699E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999736389925	WITHOUT_CLASSIFICATION	2.636100743707369E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999946044995	WITHOUT_CLASSIFICATION	5.395500594062343E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999616250778	WITHOUT_CLASSIFICATION	3.837492214334019E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999988789054973	WITHOUT_CLASSIFICATION	1.1210945027068174E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999999986617487	WITHOUT_CLASSIFICATION	1.3382512972128427E-8	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992771986119	WITHOUT_CLASSIFICATION	7.228013881198225E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996052349496	WITHOUT_CLASSIFICATION	3.9476505041503653E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999736517472185	WITHOUT_CLASSIFICATION	2.634825278145344E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999902160816536	WITHOUT_CLASSIFICATION	9.783918346388542E-6	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998239672069	WITHOUT_CLASSIFICATION	1.7603279309496075E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999999877393038	WITHOUT_CLASSIFICATION	1.2260696207179E-7	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999996758327787	WITHOUT_CLASSIFICATION	3.241672213064827E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999829002251	WITHOUT_CLASSIFICATION	1.7099774881855502E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999980186687	WITHOUT_CLASSIFICATION	1.981331205347839E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999955957770732	WITHOUT_CLASSIFICATION	4.404222926879717E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999965879391115	WITHOUT_CLASSIFICATION	3.4120608884496846E-6	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999994205776271	WITHOUT_CLASSIFICATION	5.794223728122211E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999510313806	WITHOUT_CLASSIFICATION	4.89686194308512E-8	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999950406691377	WITHOUT_CLASSIFICATION	4.959330862257854E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999944527432129	WITHOUT_CLASSIFICATION	5.5472567871095115E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999883481120574	WITHOUT_CLASSIFICATION	1.16518879426792E-5	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999977333950436	WITHOUT_CLASSIFICATION	2.266604956460629E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999952892797	WITHOUT_CLASSIFICATION	4.710720211708997E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999913377813234	WITHOUT_CLASSIFICATION	8.662218676579548E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999621050419	WITHOUT_CLASSIFICATION	3.789495814204974E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999574733457	WITHOUT_CLASSIFICATION	4.252665438672453E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999785956631	WITHOUT_CLASSIFICATION	2.140433680352114E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995468605409	WITHOUT_CLASSIFICATION	4.5313945911762184E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999799497855	WITHOUT_CLASSIFICATION	2.005021441673965E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999976151233	WITHOUT_CLASSIFICATION	2.3848767810612763E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999978404166776	WITHOUT_CLASSIFICATION	2.1595833224403054E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999537242215	WITHOUT_CLASSIFICATION	4.627577861021657E-8	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995987814343	WITHOUT_CLASSIFICATION	4.012185657858982E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999623185305	WITHOUT_CLASSIFICATION	3.768146950810095E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999906367727756	WITHOUT_CLASSIFICATION	9.363227224359142E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.999997650312265	WITHOUT_CLASSIFICATION	2.349687735018683E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999368498761	WITHOUT_CLASSIFICATION	6.315012389473634E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999818247254	WITHOUT_CLASSIFICATION	1.817527466953376E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999921492009	WITHOUT_CLASSIFICATION	7.850799192650442E-9	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998324278007499	WITHOUT_CLASSIFICATION	1.675721992502095E-4	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998017049085	WITHOUT_CLASSIFICATION	1.9829509143067496E-7	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999997952235776	WITHOUT_CLASSIFICATION	2.0477642223281993E-7	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997347224225	WITHOUT_CLASSIFICATION	2.6527757746303236E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999308874783	WITHOUT_CLASSIFICATION	6.911252173377068E-8	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999993903442926	WITHOUT_CLASSIFICATION	6.096557072825125E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999341896875	WITHOUT_CLASSIFICATION	6.581031252841982E-8	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999612901743	WITHOUT_CLASSIFICATION	3.870982570509901E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998867784988	WITHOUT_CLASSIFICATION	1.1322150113225552E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999389941808	WITHOUT_CLASSIFICATION	6.100581913145499E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999816700402	WITHOUT_CLASSIFICATION	1.8329959726066686E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999992496550111	WITHOUT_CLASSIFICATION	7.503449887954107E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999913036556815	WITHOUT_CLASSIFICATION	8.69634431846506E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994441286686	WITHOUT_CLASSIFICATION	5.558713314506025E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999997497435701	WITHOUT_CLASSIFICATION	2.5025642990194327E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999107916596	WITHOUT_CLASSIFICATION	8.920834041054026E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999892985141	WITHOUT_CLASSIFICATION	1.0701485908733536E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999993460637397	WITHOUT_CLASSIFICATION	6.53936260317388E-7	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999128162494	WITHOUT_CLASSIFICATION	8.718375055018768E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995021146083	WITHOUT_CLASSIFICATION	4.978853917763621E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999997076339279	WITHOUT_CLASSIFICATION	2.9236607208845157E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999965620376478	WITHOUT_CLASSIFICATION	3.4379623522176834E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999787750294	WITHOUT_CLASSIFICATION	2.1224970553072946E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999986585504814	WITHOUT_CLASSIFICATION	1.3414495186016837E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995021146083	WITHOUT_CLASSIFICATION	4.978853917763621E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997694888815004	WITHOUT_CLASSIFICATION	2.305111184994958E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999449932931	WITHOUT_CLASSIFICATION	5.5006706918144675E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999509571396	WITHOUT_CLASSIFICATION	4.904286040092203E-8	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999517749343	WITHOUT_CLASSIFICATION	4.822506571218136E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999956452962949	WITHOUT_CLASSIFICATION	4.354703705009549E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999699190073	WITHOUT_CLASSIFICATION	3.008099266969925E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999945099497	WITHOUT_CLASSIFICATION	5.490050325094023E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999963219846603	WITHOUT_CLASSIFICATION	3.67801533975702E-6	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999313983102	WITHOUT_CLASSIFICATION	6.860168986180992E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999074498065	WITHOUT_CLASSIFICATION	9.255019355088165E-8	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999996931730093	WITHOUT_CLASSIFICATION	3.068269907823843E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999204406534433	WITHOUT_CLASSIFICATION	7.955934655674234E-5	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999968349425	WITHOUT_CLASSIFICATION	3.165057579866251E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999999990607012	WITHOUT_CLASSIFICATION	9.39298803014228E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999633046337	WITHOUT_CLASSIFICATION	3.6695366297701663E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998873189461	WITHOUT_CLASSIFICATION	1.1268105392449397E-7	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999455568056	WITHOUT_CLASSIFICATION	5.4443194275052E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999863811878	WITHOUT_CLASSIFICATION	1.3618812211878463E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999980036190891	WITHOUT_CLASSIFICATION	1.996380910901781E-5	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999805331349	WITHOUT_CLASSIFICATION	1.9466865095415924E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999625425072	WITHOUT_CLASSIFICATION	3.745749272484876E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999395377571	WITHOUT_CLASSIFICATION	6.046224282732402E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.99999999706062	WITHOUT_CLASSIFICATION	2.9393798627810135E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999988805953	WITHOUT_CLASSIFICATION	1.1194046256506515E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999990227554	WITHOUT_CLASSIFICATION	9.77244568896169E-10	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999997747267416	WITHOUT_CLASSIFICATION	2.2527325838474983E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999608363340473	WITHOUT_CLASSIFICATION	3.91636659527087E-5	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997190330675	WITHOUT_CLASSIFICATION	2.809669324881099E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999977730325122	WITHOUT_CLASSIFICATION	2.2269674877082122E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.999999932823654	WITHOUT_CLASSIFICATION	6.717634603665844E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999566833067	WITHOUT_CLASSIFICATION	4.3316693331209505E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999990219033094	WITHOUT_CLASSIFICATION	9.780966906446578E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999179894494	WITHOUT_CLASSIFICATION	8.201055060668824E-8	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999962469958	WITHOUT_CLASSIFICATION	3.753004239304731E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999720106899	WITHOUT_CLASSIFICATION	2.7989310031234134E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999453747324	WITHOUT_CLASSIFICATION	5.462526753902746E-8	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999964022962633	WITHOUT_CLASSIFICATION	3.5977037366898667E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999996951910646	WITHOUT_CLASSIFICATION	3.0480893548514203E-7	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999814769545	WITHOUT_CLASSIFICATION	1.8523045503071136E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999713083689	WITHOUT_CLASSIFICATION	2.8691631087220185E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999748281413	WITHOUT_CLASSIFICATION	2.5171858653450376E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999748281413	WITHOUT_CLASSIFICATION	2.5171858653450376E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999858805801584	WITHOUT_CLASSIFICATION	1.411941984168632E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999521596472	WITHOUT_CLASSIFICATION	4.784035280097205E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999371381693	WITHOUT_CLASSIFICATION	6.286183074167871E-8	TEST
/**	WITHOUT_CLASSIFICATION	0.8976895563154064	TEST	0.1023104436845937	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996836892454	WITHOUT_CLASSIFICATION	3.1631075463260924E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996836892454	WITHOUT_CLASSIFICATION	3.1631075463260924E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.999997791497402	WITHOUT_CLASSIFICATION	2.2085025979967347E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999249297341	WITHOUT_CLASSIFICATION	7.507026586502625E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999443003266567	WITHOUT_CLASSIFICATION	5.56996733433364E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999817925112465	WITHOUT_CLASSIFICATION	1.8207488753387104E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999902279596	WITHOUT_CLASSIFICATION	9.77204040032201E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999993616961097	WITHOUT_CLASSIFICATION	6.383038903000401E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997853926494	WITHOUT_CLASSIFICATION	2.1460735045888964E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998741585764	WITHOUT_CLASSIFICATION	1.258414235670924E-7	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999196915547709	WITHOUT_CLASSIFICATION	8.030844522908178E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979169294395	WITHOUT_CLASSIFICATION	2.0830705605053622E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979169294395	WITHOUT_CLASSIFICATION	2.0830705605053622E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999932383495309	WITHOUT_CLASSIFICATION	6.761650469019083E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999988569124295	WITHOUT_CLASSIFICATION	1.143087570531353E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993827626253	WITHOUT_CLASSIFICATION	6.172373746899267E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999282661692683	WITHOUT_CLASSIFICATION	7.173383073170322E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999967723287896	WITHOUT_CLASSIFICATION	3.227671210389682E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999777391223	WITHOUT_CLASSIFICATION	2.22608776589837E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992438055144	WITHOUT_CLASSIFICATION	7.56194485604342E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998679157247	WITHOUT_CLASSIFICATION	1.320842753036426E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999998753792894	WITHOUT_CLASSIFICATION	1.246207105956559E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999997176317161	WITHOUT_CLASSIFICATION	2.8236828384171853E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999686601988	WITHOUT_CLASSIFICATION	3.1339801242258875E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999074498065	WITHOUT_CLASSIFICATION	9.255019355088165E-8	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999692307747	WITHOUT_CLASSIFICATION	3.076922529981137E-8	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999777091879721	WITHOUT_CLASSIFICATION	2.2290812027870202E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999890937128	WITHOUT_CLASSIFICATION	1.0906287192590625E-8	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999998353641917	WITHOUT_CLASSIFICATION	1.6463580836625338E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999994698669369	WITHOUT_CLASSIFICATION	5.301330631036163E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999977411062826	WITHOUT_CLASSIFICATION	2.258893717348144E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999983038322001	WITHOUT_CLASSIFICATION	1.6961677999041403E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999128577952	WITHOUT_CLASSIFICATION	8.71422047362663E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999712451192	WITHOUT_CLASSIFICATION	2.8754880881226268E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999993750213373	WITHOUT_CLASSIFICATION	6.249786627299313E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999993750213373	WITHOUT_CLASSIFICATION	6.249786627299313E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995910959971	WITHOUT_CLASSIFICATION	4.089040029021857E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999996462826	WITHOUT_CLASSIFICATION	3.5371736531078586E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999770767466771	WITHOUT_CLASSIFICATION	2.2923253322774128E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999999941833728	WITHOUT_CLASSIFICATION	5.81662719286124E-8	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999998301477597	WITHOUT_CLASSIFICATION	1.698522402817299E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999890970117	WITHOUT_CLASSIFICATION	1.0902988229067523E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998819382239	WITHOUT_CLASSIFICATION	1.1806177611920787E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999959556616	WITHOUT_CLASSIFICATION	4.044338339209287E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999998695835898	WITHOUT_CLASSIFICATION	1.3041641026930086E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999994234273365	WITHOUT_CLASSIFICATION	5.765726635585541E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998651885201	WITHOUT_CLASSIFICATION	1.3481147989948406E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999989279907487	WITHOUT_CLASSIFICATION	1.0720092512780223E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998971299113	WITHOUT_CLASSIFICATION	1.0287008877648986E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999398005035	WITHOUT_CLASSIFICATION	6.019949652187097E-8	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999627609386	WITHOUT_CLASSIFICATION	3.7239061330873135E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999943085893	WITHOUT_CLASSIFICATION	5.691410700438394E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999638355718	WITHOUT_CLASSIFICATION	3.616442819428014E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967809458318	WITHOUT_CLASSIFICATION	3.219054168199346E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999999466706824	WITHOUT_CLASSIFICATION	5.332931759780923E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998622467902	WITHOUT_CLASSIFICATION	1.3775320986028961E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998713351906	WITHOUT_CLASSIFICATION	1.2866480943722177E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995381957705	WITHOUT_CLASSIFICATION	4.6180422955058455E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999925723573454	WITHOUT_CLASSIFICATION	7.4276426544926705E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999354636957	WITHOUT_CLASSIFICATION	6.453630422201347E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999920279055	WITHOUT_CLASSIFICATION	7.972094554977582E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999920279055	WITHOUT_CLASSIFICATION	7.972094554977582E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999978816335798	WITHOUT_CLASSIFICATION	2.118366420251635E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999998830966161	WITHOUT_CLASSIFICATION	1.169033838946405E-6	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999895934771	WITHOUT_CLASSIFICATION	1.0406522845328998E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999804378779	WITHOUT_CLASSIFICATION	1.9562122190404377E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998575483187	WITHOUT_CLASSIFICATION	1.4245168145366126E-7	TEST
