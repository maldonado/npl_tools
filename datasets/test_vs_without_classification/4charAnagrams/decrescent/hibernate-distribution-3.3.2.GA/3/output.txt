//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997710296883423	WITHOUT_CLASSIFICATION	2.2897031165764752E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999479920510445	WITHOUT_CLASSIFICATION	5.20079489554064E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998210389486	WITHOUT_CLASSIFICATION	1.789610515628497E-7	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999974251975257	WITHOUT_CLASSIFICATION	2.574802474328774E-6	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997435764855	WITHOUT_CLASSIFICATION	2.564235145612365E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997435764855	WITHOUT_CLASSIFICATION	2.564235145612365E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995242620565	WITHOUT_CLASSIFICATION	4.757379434716478E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999416770089	WITHOUT_CLASSIFICATION	5.832299101874058E-8	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999995412535592	WITHOUT_CLASSIFICATION	4.587464407522926E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998255605187	WITHOUT_CLASSIFICATION	1.7443948128157378E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999991170060479	WITHOUT_CLASSIFICATION	8.829939521953102E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999991170060479	WITHOUT_CLASSIFICATION	8.829939521953102E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999959124369999	WITHOUT_CLASSIFICATION	4.0875630001398384E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999998848193155	WITHOUT_CLASSIFICATION	1.1518068447606788E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.999999718530774	WITHOUT_CLASSIFICATION	2.814692260643872E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999875826010609	WITHOUT_CLASSIFICATION	1.241739893905313E-5	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998960726592	WITHOUT_CLASSIFICATION	1.0392734081715475E-7	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999946131281715	WITHOUT_CLASSIFICATION	5.38687182854442E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999924309608524	WITHOUT_CLASSIFICATION	7.5690391475932285E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999901774415277	WITHOUT_CLASSIFICATION	9.822558472349683E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999893319956276	WITHOUT_CLASSIFICATION	1.0668004372512777E-5	TEST
/*	WITHOUT_CLASSIFICATION	0.9994547635755244	WITHOUT_CLASSIFICATION	5.452364244755198E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999958867693272	WITHOUT_CLASSIFICATION	4.113230672849848E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999933595333274	WITHOUT_CLASSIFICATION	6.640466672622875E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999998879321884	WITHOUT_CLASSIFICATION	1.1206781162013743E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999909690621103	WITHOUT_CLASSIFICATION	9.030937889786388E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999909690621103	WITHOUT_CLASSIFICATION	9.030937889786388E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999994001197933	WITHOUT_CLASSIFICATION	5.998802067920944E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999903778694531	WITHOUT_CLASSIFICATION	9.622130546918757E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999996113456209	WITHOUT_CLASSIFICATION	3.8865437913474984E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999791445113	WITHOUT_CLASSIFICATION	2.085548869436866E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999981991053344	WITHOUT_CLASSIFICATION	1.800894665701316E-6	TEST
/**	WITHOUT_CLASSIFICATION	0.9990898459545153	WITHOUT_CLASSIFICATION	9.1015404548464E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
/**	WITHOUT_CLASSIFICATION	0.9990898459545153	WITHOUT_CLASSIFICATION	9.1015404548464E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999072502653	WITHOUT_CLASSIFICATION	9.27497347324505E-8	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999993217392216	WITHOUT_CLASSIFICATION	6.78260778483935E-7	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999772929521	WITHOUT_CLASSIFICATION	2.27070479193541E-8	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999972878235461	WITHOUT_CLASSIFICATION	2.7121764539336616E-6	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998418614385	WITHOUT_CLASSIFICATION	1.581385614117529E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993976679397	WITHOUT_CLASSIFICATION	6.023320603219108E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994094882982	WITHOUT_CLASSIFICATION	5.905117017575926E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995618269113	WITHOUT_CLASSIFICATION	4.3817308876314274E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999816279417504	WITHOUT_CLASSIFICATION	1.8372058249639527E-5	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999572023197	WITHOUT_CLASSIFICATION	4.279768020044846E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999915189584986	WITHOUT_CLASSIFICATION	8.481041501504399E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999816279417504	WITHOUT_CLASSIFICATION	1.8372058249639527E-5	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999915189584986	WITHOUT_CLASSIFICATION	8.481041501504399E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999923921902718	WITHOUT_CLASSIFICATION	7.607809728201038E-6	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9986588785904644	WITHOUT_CLASSIFICATION	0.0013411214095355802	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999979757564544	WITHOUT_CLASSIFICATION	2.0242435455926036E-6	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970135474057	WITHOUT_CLASSIFICATION	2.9864525943591618E-6	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999262121657575	WITHOUT_CLASSIFICATION	7.378783424241955E-5	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999978476097315	WITHOUT_CLASSIFICATION	2.152390268435268E-6	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999465908962383	WITHOUT_CLASSIFICATION	5.340910376174037E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999978771762744	WITHOUT_CLASSIFICATION	2.1228237256352627E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999978491692556	WITHOUT_CLASSIFICATION	2.150830744396014E-6	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999865193725702	WITHOUT_CLASSIFICATION	1.3480627429819357E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999997748753535	WITHOUT_CLASSIFICATION	2.2512464646433754E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.999999150792742	WITHOUT_CLASSIFICATION	8.492072579294585E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996854679811	WITHOUT_CLASSIFICATION	3.1453201887683486E-7	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999995779720177	WITHOUT_CLASSIFICATION	4.2202798230524787E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999995381786682	WITHOUT_CLASSIFICATION	4.618213317699052E-7	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999712211446241	WITHOUT_CLASSIFICATION	2.8778855375928225E-5	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999960952802	WITHOUT_CLASSIFICATION	3.9047197995816394E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999998791009327	WITHOUT_CLASSIFICATION	1.2089906722439592E-7	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996393193672	WITHOUT_CLASSIFICATION	3.6068063273412985E-7	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997882466491	WITHOUT_CLASSIFICATION	2.1175335093564747E-7	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999995881585299	WITHOUT_CLASSIFICATION	4.118414701010563E-6	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997631869812	WITHOUT_CLASSIFICATION	2.3681301885391276E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999341693191	WITHOUT_CLASSIFICATION	6.583068088998415E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999965225916385	WITHOUT_CLASSIFICATION	3.4774083616137437E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999990269537126	WITHOUT_CLASSIFICATION	9.730462874354145E-7	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998617382695	WITHOUT_CLASSIFICATION	1.3826173059586592E-7	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999986773505	WITHOUT_CLASSIFICATION	1.3226495039320265E-8	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999900465385	WITHOUT_CLASSIFICATION	9.953461568256082E-9	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999877676456823	WITHOUT_CLASSIFICATION	1.2232354317815822E-5	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999964247096043	WITHOUT_CLASSIFICATION	3.5752903955872694E-6	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999970135289447	WITHOUT_CLASSIFICATION	2.986471055234246E-6	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999594064303	WITHOUT_CLASSIFICATION	4.059356971744738E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998991814886	WITHOUT_CLASSIFICATION	1.0081851143517342E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998491484302	WITHOUT_CLASSIFICATION	1.5085156985294095E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999429600708	WITHOUT_CLASSIFICATION	5.7039929224013844E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998837852592	WITHOUT_CLASSIFICATION	1.162147408152268E-7	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998491484302	WITHOUT_CLASSIFICATION	1.5085156985294095E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998797906242	WITHOUT_CLASSIFICATION	1.2020937577260112E-7	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998651117848	WITHOUT_CLASSIFICATION	1.3488821524708067E-7	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999993915543424	WITHOUT_CLASSIFICATION	6.084456576481894E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997074998604	WITHOUT_CLASSIFICATION	2.925001395507604E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999997935361384	WITHOUT_CLASSIFICATION	2.064638615627481E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999646269054	WITHOUT_CLASSIFICATION	3.537309446151991E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999646269054	WITHOUT_CLASSIFICATION	3.537309446151991E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999995044116185	WITHOUT_CLASSIFICATION	4.9558838150984825E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999947045957107	WITHOUT_CLASSIFICATION	5.295404289258497E-6	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999964727649466	WITHOUT_CLASSIFICATION	3.527235053420295E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999942388826	WITHOUT_CLASSIFICATION	5.76111741682767E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998164451048	WITHOUT_CLASSIFICATION	1.8355489521603805E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998402207806	WITHOUT_CLASSIFICATION	1.5977921937913236E-7	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999217203371	WITHOUT_CLASSIFICATION	7.827966285024924E-8	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999464290285	WITHOUT_CLASSIFICATION	5.357097142137239E-8	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995456932703	WITHOUT_CLASSIFICATION	4.5430672973602943E-7	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999100523539	WITHOUT_CLASSIFICATION	8.994764608032676E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999781486246	WITHOUT_CLASSIFICATION	2.1851375404281487E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999781486246	WITHOUT_CLASSIFICATION	2.1851375404281487E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999797140892	WITHOUT_CLASSIFICATION	2.028591080644155E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999618596132	WITHOUT_CLASSIFICATION	3.814038693027988E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999980329997094	WITHOUT_CLASSIFICATION	1.967000290577271E-6	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999781486246	WITHOUT_CLASSIFICATION	2.1851375404281487E-7	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999797140892	WITHOUT_CLASSIFICATION	2.028591080644155E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999797140892	WITHOUT_CLASSIFICATION	2.028591080644155E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999920454053648	WITHOUT_CLASSIFICATION	7.954594635175674E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999994724415203	WITHOUT_CLASSIFICATION	5.275584797501361E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999094247252	WITHOUT_CLASSIFICATION	9.057527485736419E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999976891539054	WITHOUT_CLASSIFICATION	2.310846094658354E-6	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999993503406792	WITHOUT_CLASSIFICATION	6.496593207875982E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999993503406792	WITHOUT_CLASSIFICATION	6.496593207875982E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999936037520766	WITHOUT_CLASSIFICATION	6.396247923426015E-6	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999935865399406	WITHOUT_CLASSIFICATION	6.413460059335771E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999992898834488	WITHOUT_CLASSIFICATION	7.101165511271323E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996156612426	WITHOUT_CLASSIFICATION	3.8433875738632104E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996156612426	WITHOUT_CLASSIFICATION	3.8433875738632104E-7	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999959880983955	WITHOUT_CLASSIFICATION	4.011901604407608E-6	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999994969033397	WITHOUT_CLASSIFICATION	5.030966603590637E-7	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999968131951422	WITHOUT_CLASSIFICATION	3.1868048578398466E-6	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999994437110458	WITHOUT_CLASSIFICATION	5.562889543353067E-7	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999905558638869	WITHOUT_CLASSIFICATION	9.444136113152572E-6	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999995067222106	WITHOUT_CLASSIFICATION	4.93277789351925E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999886529138173	WITHOUT_CLASSIFICATION	1.134708618262684E-5	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998626579686	WITHOUT_CLASSIFICATION	1.3734203141756675E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999967638835091	WITHOUT_CLASSIFICATION	3.2361164908115204E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999968131951422	WITHOUT_CLASSIFICATION	3.1868048578398466E-6	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.9999915598385329	WITHOUT_CLASSIFICATION	8.440161467066406E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951596902683	WITHOUT_CLASSIFICATION	4.840309731712418E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951596902683	WITHOUT_CLASSIFICATION	4.840309731712418E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999111649779	WITHOUT_CLASSIFICATION	8.883502202284374E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999987692796337	WITHOUT_CLASSIFICATION	1.2307203662976011E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999989278752173	WITHOUT_CLASSIFICATION	1.072124782773584E-6	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999780138677091	WITHOUT_CLASSIFICATION	2.1986132290847614E-5	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999997458331757	WITHOUT_CLASSIFICATION	2.5416682430114365E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999888035168809	WITHOUT_CLASSIFICATION	1.1196483118981492E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999998255701603	WITHOUT_CLASSIFICATION	1.7442983958943994E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999144537509	WITHOUT_CLASSIFICATION	8.554624914895663E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999434244173	WITHOUT_CLASSIFICATION	5.657558263607646E-8	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999434244173	WITHOUT_CLASSIFICATION	5.657558263607646E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997710296883423	WITHOUT_CLASSIFICATION	2.2897031165764752E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997477389548	WITHOUT_CLASSIFICATION	2.522610451632285E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997576827442	WITHOUT_CLASSIFICATION	2.4231725582697003E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999985126470409	WITHOUT_CLASSIFICATION	1.4873529591469434E-6	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999988958105805	WITHOUT_CLASSIFICATION	1.1041894194366588E-6	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999967555449785	WITHOUT_CLASSIFICATION	3.2444550215891197E-6	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999990778010398	WITHOUT_CLASSIFICATION	9.221989602391209E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999993324536128	WITHOUT_CLASSIFICATION	6.675463872707559E-7	TEST
// new	WITHOUT_CLASSIFICATION	0.9999929460044662	WITHOUT_CLASSIFICATION	7.0539955337657825E-6	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999968123472442	WITHOUT_CLASSIFICATION	3.187652755836603E-6	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999981504779968	WITHOUT_CLASSIFICATION	1.8495220031924939E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998210389486	WITHOUT_CLASSIFICATION	1.789610515628497E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998126600337	WITHOUT_CLASSIFICATION	1.873399663313028E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998126600337	WITHOUT_CLASSIFICATION	1.873399663313028E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.999998866149606	WITHOUT_CLASSIFICATION	1.1338503940806192E-6	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999566362908546	WITHOUT_CLASSIFICATION	4.336370914528734E-5	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998346304787	WITHOUT_CLASSIFICATION	1.6536952125560123E-7	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999942941600511	WITHOUT_CLASSIFICATION	5.705839948821116E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999995055705477	WITHOUT_CLASSIFICATION	4.944294523668219E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999801263746	WITHOUT_CLASSIFICATION	1.9873625406362203E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997435764855	WITHOUT_CLASSIFICATION	2.564235145612365E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998013085855	WITHOUT_CLASSIFICATION	1.986914146308537E-7	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999981945242196	WITHOUT_CLASSIFICATION	1.8054757803981666E-6	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.99999924236295	WITHOUT_CLASSIFICATION	7.576370500743711E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999995914321207	WITHOUT_CLASSIFICATION	4.0856787933023336E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.999998765531047	WITHOUT_CLASSIFICATION	1.234468952968557E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.999998378670916	WITHOUT_CLASSIFICATION	1.6213290839686669E-6	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999994645599813	WITHOUT_CLASSIFICATION	5.354400186110309E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998207679883	WITHOUT_CLASSIFICATION	1.7923201160726485E-7	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999369208614	WITHOUT_CLASSIFICATION	6.307913858521227E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999997773646131	WITHOUT_CLASSIFICATION	2.2263538678431239E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998737482931	WITHOUT_CLASSIFICATION	1.2625170685662973E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997866381332	WITHOUT_CLASSIFICATION	2.1336186680160135E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999985130843073	WITHOUT_CLASSIFICATION	1.4869156927044174E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999968123472442	WITHOUT_CLASSIFICATION	3.187652755836603E-6	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998126600337	WITHOUT_CLASSIFICATION	1.873399663313028E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999994645599813	WITHOUT_CLASSIFICATION	5.354400186110309E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995242620565	WITHOUT_CLASSIFICATION	4.757379434716478E-7	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999993622437485	WITHOUT_CLASSIFICATION	6.377562514882402E-7	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999979408816863	WITHOUT_CLASSIFICATION	2.0591183136793617E-6	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999995633909058	WITHOUT_CLASSIFICATION	4.3660909425087315E-7	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999946787852925	WITHOUT_CLASSIFICATION	5.321214707483385E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996469616445	WITHOUT_CLASSIFICATION	3.530383556497014E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999976450471565	WITHOUT_CLASSIFICATION	2.3549528435708706E-6	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998917642967	WITHOUT_CLASSIFICATION	1.082357033123944E-7	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999713526039128	WITHOUT_CLASSIFICATION	2.8647396087237236E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999970995015649	WITHOUT_CLASSIFICATION	2.9004984350953557E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999860696144012	WITHOUT_CLASSIFICATION	1.3930385598982795E-5	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999860696144012	WITHOUT_CLASSIFICATION	1.3930385598982795E-5	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998924457076	WITHOUT_CLASSIFICATION	1.0755429238504267E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999905666767	WITHOUT_CLASSIFICATION	9.433323371933394E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999789517015268	WITHOUT_CLASSIFICATION	2.104829847319428E-5	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999991013523777	WITHOUT_CLASSIFICATION	8.986476223078287E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999194818976	WITHOUT_CLASSIFICATION	8.051810240275235E-8	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999312384216	WITHOUT_CLASSIFICATION	6.876157848692246E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999996309879666	WITHOUT_CLASSIFICATION	3.6901203339819396E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999416770089	WITHOUT_CLASSIFICATION	5.832299101874058E-8	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999994542102563	WITHOUT_CLASSIFICATION	5.457897438706754E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998770898311	WITHOUT_CLASSIFICATION	1.2291016894150333E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998770898311	WITHOUT_CLASSIFICATION	1.2291016894150333E-7	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999994093758656	WITHOUT_CLASSIFICATION	5.906241342878783E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997223063645	WITHOUT_CLASSIFICATION	2.7769363559076254E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994499719888	WITHOUT_CLASSIFICATION	5.500280112580509E-7	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.99999994306162	WITHOUT_CLASSIFICATION	5.693837996255408E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999988339093859	WITHOUT_CLASSIFICATION	1.1660906140096225E-6	TEST
// return	WITHOUT_CLASSIFICATION	0.9999997984087523	WITHOUT_CLASSIFICATION	2.015912477232361E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999968123472442	WITHOUT_CLASSIFICATION	3.187652755836603E-6	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998210389486	WITHOUT_CLASSIFICATION	1.789610515628497E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999994645599813	WITHOUT_CLASSIFICATION	5.354400186110309E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999994645599813	WITHOUT_CLASSIFICATION	5.354400186110309E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999158094974	WITHOUT_CLASSIFICATION	8.419050259145915E-8	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999158094974	WITHOUT_CLASSIFICATION	8.419050259145915E-8	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999996808648149	WITHOUT_CLASSIFICATION	3.1913518502323876E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999988206354028	WITHOUT_CLASSIFICATION	1.1793645972197768E-6	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999988206354028	WITHOUT_CLASSIFICATION	1.1793645972197768E-6	TEST
// putfield	WITHOUT_CLASSIFICATION	0.999999645582167	WITHOUT_CLASSIFICATION	3.544178330017947E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999998404150326	WITHOUT_CLASSIFICATION	1.595849674210087E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.99999930105656	WITHOUT_CLASSIFICATION	6.989434400000939E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999997728941171	WITHOUT_CLASSIFICATION	2.2710588282228954E-7	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999222218301	WITHOUT_CLASSIFICATION	7.777816991889902E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998255605187	WITHOUT_CLASSIFICATION	1.7443948128157378E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998255605187	WITHOUT_CLASSIFICATION	1.7443948128157378E-7	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999982632281992	WITHOUT_CLASSIFICATION	1.7367718007150765E-6	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999997560736935	WITHOUT_CLASSIFICATION	2.4392630652442026E-7	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999994676675359	WITHOUT_CLASSIFICATION	5.323324640416922E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999966926283234	WITHOUT_CLASSIFICATION	3.3073716766591247E-6	TEST
// char	WITHOUT_CLASSIFICATION	0.9999983319830482	WITHOUT_CLASSIFICATION	1.6680169517217281E-6	TEST
// short	WITHOUT_CLASSIFICATION	0.9999964463415569	WITHOUT_CLASSIFICATION	3.5536584430601996E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.9999991170060479	WITHOUT_CLASSIFICATION	8.829939521953102E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989542839712	WITHOUT_CLASSIFICATION	1.0457160288323862E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989542839712	WITHOUT_CLASSIFICATION	1.0457160288323862E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999959124369999	WITHOUT_CLASSIFICATION	4.0875630001398384E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999959124369999	WITHOUT_CLASSIFICATION	4.0875630001398384E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999986476648113	WITHOUT_CLASSIFICATION	1.3523351886590811E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999986476648113	WITHOUT_CLASSIFICATION	1.3523351886590811E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998417827337	WITHOUT_CLASSIFICATION	1.5821726632635944E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998417827337	WITHOUT_CLASSIFICATION	1.5821726632635944E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999998255605187	WITHOUT_CLASSIFICATION	1.7443948128157378E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.9999991170060479	WITHOUT_CLASSIFICATION	8.829939521953102E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989542839712	WITHOUT_CLASSIFICATION	1.0457160288323862E-6	TEST
// float	WITHOUT_CLASSIFICATION	0.9999989542839712	WITHOUT_CLASSIFICATION	1.0457160288323862E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999959124369999	WITHOUT_CLASSIFICATION	4.0875630001398384E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999986476648113	WITHOUT_CLASSIFICATION	1.3523351886590811E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999986476648113	WITHOUT_CLASSIFICATION	1.3523351886590811E-6	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998417827337	WITHOUT_CLASSIFICATION	1.5821726632635944E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999603696134	WITHOUT_CLASSIFICATION	3.9630386585452605E-8	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999973429273784	WITHOUT_CLASSIFICATION	2.6570726216472967E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999982056178194	WITHOUT_CLASSIFICATION	1.794382180668946E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999983537507666	WITHOUT_CLASSIFICATION	1.6462492333737296E-6	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999937055798	WITHOUT_CLASSIFICATION	6.2944201999941816E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999967054125232	WITHOUT_CLASSIFICATION	3.2945874768820138E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999997080811083	WITHOUT_CLASSIFICATION	2.9191889171588925E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999985404150363	WITHOUT_CLASSIFICATION	1.4595849635781482E-6	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999993738459217	WITHOUT_CLASSIFICATION	6.261540782955774E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999986972512886	WITHOUT_CLASSIFICATION	1.3027487112981662E-6	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998209897647	WITHOUT_CLASSIFICATION	1.7901023519881043E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999993853446217	WITHOUT_CLASSIFICATION	6.146553782565062E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999995044116185	WITHOUT_CLASSIFICATION	4.9558838150984825E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999967054125232	WITHOUT_CLASSIFICATION	3.2945874768820138E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999373368914825	WITHOUT_CLASSIFICATION	6.26631085175194E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999373368914825	WITHOUT_CLASSIFICATION	6.26631085175194E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999061479877	WITHOUT_CLASSIFICATION	9.385201225392007E-8	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991318779748	WITHOUT_CLASSIFICATION	8.681220250831462E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991318779748	WITHOUT_CLASSIFICATION	8.681220250831462E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999780176993628	WITHOUT_CLASSIFICATION	2.1982300637171456E-5	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999937930889903	WITHOUT_CLASSIFICATION	6.206911009730552E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999955452450437	WITHOUT_CLASSIFICATION	4.454754956260202E-6	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997291473681	WITHOUT_CLASSIFICATION	2.708526318689359E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997291473681	WITHOUT_CLASSIFICATION	2.708526318689359E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998960726592	WITHOUT_CLASSIFICATION	1.0392734081715475E-7	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998091901137	WITHOUT_CLASSIFICATION	1.9080988639167098E-7	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998091901137	WITHOUT_CLASSIFICATION	1.9080988639167098E-7	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999658340799618	WITHOUT_CLASSIFICATION	3.4165920038282046E-5	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996034963607	WITHOUT_CLASSIFICATION	3.965036392077541E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999999784521346	WITHOUT_CLASSIFICATION	2.1547865403446618E-7	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999888259656612	WITHOUT_CLASSIFICATION	1.1174034338723707E-5	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999929824422655	WITHOUT_CLASSIFICATION	7.0175577344795025E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999930523608671	WITHOUT_CLASSIFICATION	6.947639132999114E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999946131281715	WITHOUT_CLASSIFICATION	5.38687182854442E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999941268009257	WITHOUT_CLASSIFICATION	5.873199074390249E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9987903576076668	WITHOUT_CLASSIFICATION	0.001209642392333266	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999935874410758	WITHOUT_CLASSIFICATION	6.412558924136936E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999879972534257	WITHOUT_CLASSIFICATION	1.2002746574318656E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999893319956276	WITHOUT_CLASSIFICATION	1.0668004372512777E-5	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997255178126	WITHOUT_CLASSIFICATION	2.7448218744715875E-7	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998587270574564	WITHOUT_CLASSIFICATION	1.4127294254352374E-4	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999494665590557	WITHOUT_CLASSIFICATION	5.053344094429198E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999893319956276	WITHOUT_CLASSIFICATION	1.0668004372512777E-5	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999728765736	WITHOUT_CLASSIFICATION	2.712342632783933E-8	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999842830394	WITHOUT_CLASSIFICATION	1.5716960582878094E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999964120608574	WITHOUT_CLASSIFICATION	3.5879391426547657E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.99999536087324	WITHOUT_CLASSIFICATION	4.639126759986567E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999962863537268	WITHOUT_CLASSIFICATION	3.7136462732697876E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999922243880052	WITHOUT_CLASSIFICATION	7.775611994770466E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999795148987813	WITHOUT_CLASSIFICATION	2.0485101218610775E-5	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999933595333274	WITHOUT_CLASSIFICATION	6.640466672622875E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999920717130637	WITHOUT_CLASSIFICATION	7.928286936327814E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999998879321884	WITHOUT_CLASSIFICATION	1.1206781162013743E-7	TEST
// properties	WITHOUT_CLASSIFICATION	0.999998562583661	WITHOUT_CLASSIFICATION	1.4374163389658782E-6	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999997348620981	WITHOUT_CLASSIFICATION	2.6513790177677587E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999935365401393	WITHOUT_CLASSIFICATION	6.463459860770581E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999946131281715	WITHOUT_CLASSIFICATION	5.38687182854442E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999920717130637	WITHOUT_CLASSIFICATION	7.928286936327814E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.999998562583661	WITHOUT_CLASSIFICATION	1.4374163389658782E-6	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999935365401393	WITHOUT_CLASSIFICATION	6.463459860770581E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999181922616	WITHOUT_CLASSIFICATION	8.180773831532305E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999904540214861	WITHOUT_CLASSIFICATION	9.54597851386611E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999980559557	WITHOUT_CLASSIFICATION	1.944044311758696E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999909690621103	WITHOUT_CLASSIFICATION	9.030937889786388E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999952720363896	WITHOUT_CLASSIFICATION	4.727963610378024E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999995307826411	WITHOUT_CLASSIFICATION	4.6921735881639816E-7	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999961680295519	WITHOUT_CLASSIFICATION	3.831970448103316E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999996620787825	WITHOUT_CLASSIFICATION	3.379212174043568E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999986259551262	WITHOUT_CLASSIFICATION	1.3740448738094233E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999260473579	WITHOUT_CLASSIFICATION	7.39526420658559E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999709849393	WITHOUT_CLASSIFICATION	2.9015060704002603E-7	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999986513987463	WITHOUT_CLASSIFICATION	1.348601253636255E-6	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999444301529	WITHOUT_CLASSIFICATION	5.5569846973941853E-8	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998723459187	WITHOUT_CLASSIFICATION	1.2765408143241793E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999924025754807	WITHOUT_CLASSIFICATION	7.597424519262339E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999948729451356	WITHOUT_CLASSIFICATION	5.12705486448746E-6	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999903778694531	WITHOUT_CLASSIFICATION	9.622130546918757E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999901268690938	WITHOUT_CLASSIFICATION	9.873130906061544E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999924600829111	WITHOUT_CLASSIFICATION	7.539917088957435E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999920717130637	WITHOUT_CLASSIFICATION	7.928286936327814E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995229231571	WITHOUT_CLASSIFICATION	4.770768429072923E-7	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993031738331	WITHOUT_CLASSIFICATION	6.968261668791226E-7	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999030524644	WITHOUT_CLASSIFICATION	9.694753545014487E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9984211627233566	WITHOUT_CLASSIFICATION	0.0015788372766434933	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999991679803572	WITHOUT_CLASSIFICATION	8.320196427916052E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998270506851	WITHOUT_CLASSIFICATION	1.7294931491380574E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999900627776	WITHOUT_CLASSIFICATION	9.937222320558967E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999518795931	WITHOUT_CLASSIFICATION	4.812040682864558E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999921502273719	WITHOUT_CLASSIFICATION	7.849772628224853E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999892793955749	WITHOUT_CLASSIFICATION	1.0720604425105117E-5	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967380622627	WITHOUT_CLASSIFICATION	3.2619377372717227E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999992270334544	WITHOUT_CLASSIFICATION	7.729665456083548E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999997680831637	WITHOUT_CLASSIFICATION	2.3191683636752777E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999791445113	WITHOUT_CLASSIFICATION	2.085548869436866E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998729094212	WITHOUT_CLASSIFICATION	1.2709057879456073E-7	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996902931959	WITHOUT_CLASSIFICATION	3.097068041118782E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999985811747482	WITHOUT_CLASSIFICATION	1.4188252518139217E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999997003504978	WITHOUT_CLASSIFICATION	2.9964950227508375E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999404143426	WITHOUT_CLASSIFICATION	5.958565746471595E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999979032652488	WITHOUT_CLASSIFICATION	2.0967347511418993E-6	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999773323482	WITHOUT_CLASSIFICATION	2.2667651738453494E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999999691854431	WITHOUT_CLASSIFICATION	3.081455688604402E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999994230299379	WITHOUT_CLASSIFICATION	5.769700620151219E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999891122246352	WITHOUT_CLASSIFICATION	1.0887775364903065E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999947553344206	WITHOUT_CLASSIFICATION	5.244665579462749E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999947553344206	WITHOUT_CLASSIFICATION	5.244665579462749E-6	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999922785561864	WITHOUT_CLASSIFICATION	7.72144381353827E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999998046541012	WITHOUT_CLASSIFICATION	1.9534589884464355E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999995378225797	WITHOUT_CLASSIFICATION	4.621774203501142E-7	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995251325485	WITHOUT_CLASSIFICATION	4.748674513877562E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999932804792183	WITHOUT_CLASSIFICATION	6.719520781645646E-6	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.99999924273562	WITHOUT_CLASSIFICATION	7.572643799491668E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999997641635058	WITHOUT_CLASSIFICATION	2.3583649427189886E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999990356453169	WITHOUT_CLASSIFICATION	9.643546830912763E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999707516452968	WITHOUT_CLASSIFICATION	2.9248354703197798E-5	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999970620640409	WITHOUT_CLASSIFICATION	2.937935959182397E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.9999937944201084	WITHOUT_CLASSIFICATION	6.205579891564834E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998850218494	WITHOUT_CLASSIFICATION	1.14978150612182E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999977470567378	WITHOUT_CLASSIFICATION	2.2529432622277096E-6	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999990869659527	WITHOUT_CLASSIFICATION	9.130340471924318E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997086450654	WITHOUT_CLASSIFICATION	2.913549345899354E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994118424468	WITHOUT_CLASSIFICATION	5.881575532142582E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999986396892903	WITHOUT_CLASSIFICATION	1.3603107097496302E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999168546089	WITHOUT_CLASSIFICATION	8.314539122512886E-8	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999947371098629	WITHOUT_CLASSIFICATION	5.262890137062704E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999986772989323	WITHOUT_CLASSIFICATION	1.3227010677772624E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// found	WITHOUT_CLASSIFICATION	0.9999989184139128	WITHOUT_CLASSIFICATION	1.0815860872533454E-6	TEST
// found	WITHOUT_CLASSIFICATION	0.9999989184139128	WITHOUT_CLASSIFICATION	1.0815860872533454E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999914172568033	WITHOUT_CLASSIFICATION	8.582743196594066E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999914172568033	WITHOUT_CLASSIFICATION	8.582743196594066E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999994230299379	WITHOUT_CLASSIFICATION	5.769700620151219E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999995150886308	WITHOUT_CLASSIFICATION	4.84911369259425E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999903302989092	WITHOUT_CLASSIFICATION	9.669701090846841E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999988378224153	WITHOUT_CLASSIFICATION	1.1621775847941273E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999903302989092	WITHOUT_CLASSIFICATION	9.669701090846841E-6	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999988378224153	WITHOUT_CLASSIFICATION	1.1621775847941273E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999898823652091	WITHOUT_CLASSIFICATION	1.011763479085724E-5	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998434514057445	WITHOUT_CLASSIFICATION	1.565485942555052E-4	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999838710993	WITHOUT_CLASSIFICATION	1.6128900685912504E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998685224607	WITHOUT_CLASSIFICATION	1.3147753927023226E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999990432449606	WITHOUT_CLASSIFICATION	9.567550394478811E-7	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.99987431871806	WITHOUT_CLASSIFICATION	1.2568128193995887E-4	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999995736970754	WITHOUT_CLASSIFICATION	4.2630292455392155E-7	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.999995662939253	WITHOUT_CLASSIFICATION	4.337060747029784E-6	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999999079695998	WITHOUT_CLASSIFICATION	9.203040020751707E-7	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998958150611	WITHOUT_CLASSIFICATION	1.0418493892178383E-7	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999993411236121	WITHOUT_CLASSIFICATION	6.588763878768217E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999976249779	WITHOUT_CLASSIFICATION	2.3750221049034156E-9	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997141703296	WITHOUT_CLASSIFICATION	2.858296704485088E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999789967936317	WITHOUT_CLASSIFICATION	2.100320636829615E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999791681789004	WITHOUT_CLASSIFICATION	2.0831821099501726E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999646864834641	WITHOUT_CLASSIFICATION	3.531351653588956E-4	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999646864834641	WITHOUT_CLASSIFICATION	3.531351653588956E-4	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999675975304	WITHOUT_CLASSIFICATION	3.24024696496485E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999898823652091	WITHOUT_CLASSIFICATION	1.011763479085724E-5	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999995594207902	WITHOUT_CLASSIFICATION	4.405792098189667E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999602679949825	WITHOUT_CLASSIFICATION	3.973200501744305E-5	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999321485691	WITHOUT_CLASSIFICATION	6.785143086638185E-8	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999863957397541	WITHOUT_CLASSIFICATION	1.3604260245916477E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999289418189536	WITHOUT_CLASSIFICATION	7.105818104640972E-4	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999898823652091	WITHOUT_CLASSIFICATION	1.011763479085724E-5	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999863957397541	WITHOUT_CLASSIFICATION	1.3604260245916477E-5	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999289418189536	WITHOUT_CLASSIFICATION	7.105818104640972E-4	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999945526982796	WITHOUT_CLASSIFICATION	5.44730172029528E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999961554629436	WITHOUT_CLASSIFICATION	3.8445370563858955E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999289712956	WITHOUT_CLASSIFICATION	7.102870435682955E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999898823652091	WITHOUT_CLASSIFICATION	1.011763479085724E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999898823652091	WITHOUT_CLASSIFICATION	1.011763479085724E-5	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999990166555063	WITHOUT_CLASSIFICATION	9.833444937266913E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999993360753751	WITHOUT_CLASSIFICATION	6.639246248433531E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.999997642849884	WITHOUT_CLASSIFICATION	2.3571501159516166E-6	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999997563895345	WITHOUT_CLASSIFICATION	2.436104654293581E-7	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999993058782137	WITHOUT_CLASSIFICATION	6.941217862882062E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999997067079489	WITHOUT_CLASSIFICATION	2.932920511070744E-7	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999997489726743	WITHOUT_CLASSIFICATION	2.5102732568579787E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998876261387	WITHOUT_CLASSIFICATION	1.123738613495658E-7	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999998045638522	WITHOUT_CLASSIFICATION	1.9543614770984694E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999985151792841	WITHOUT_CLASSIFICATION	1.4848207158902408E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998723905769	WITHOUT_CLASSIFICATION	1.2760942327119667E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999991858695313	WITHOUT_CLASSIFICATION	8.14130468624751E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997068672271	WITHOUT_CLASSIFICATION	2.931327729005315E-7	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997075341637	WITHOUT_CLASSIFICATION	2.924658363269876E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997278745515	WITHOUT_CLASSIFICATION	2.72125448568557E-7	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999565650291511	WITHOUT_CLASSIFICATION	4.343497084886483E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999972878235461	WITHOUT_CLASSIFICATION	2.7121764539336616E-6	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999205719192392	WITHOUT_CLASSIFICATION	7.942808076080376E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999726109791323	WITHOUT_CLASSIFICATION	2.7389020867754463E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999468289839	WITHOUT_CLASSIFICATION	5.317101610202606E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999847961821593	WITHOUT_CLASSIFICATION	1.5203817840781592E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999739168155696	WITHOUT_CLASSIFICATION	2.608318443048431E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999739168155696	WITHOUT_CLASSIFICATION	2.608318443048431E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999972878235461	WITHOUT_CLASSIFICATION	2.7121764539336616E-6	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9959379532051981	WITHOUT_CLASSIFICATION	0.004062046794801915	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999181557352175	WITHOUT_CLASSIFICATION	8.184426478257631E-5	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9996637129145202	WITHOUT_CLASSIFICATION	3.362870854798223E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999971434550402	WITHOUT_CLASSIFICATION	2.8565449598032644E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999881210528131	WITHOUT_CLASSIFICATION	1.1878947186870363E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999196649202	WITHOUT_CLASSIFICATION	8.033507978426953E-8	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.99999998183017	WITHOUT_CLASSIFICATION	1.8169830011833297E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999987557664152	WITHOUT_CLASSIFICATION	1.244233584768648E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999940133171	WITHOUT_CLASSIFICATION	5.986682884505535E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999839048983	WITHOUT_CLASSIFICATION	1.6095101695055816E-7	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997640462779	WITHOUT_CLASSIFICATION	2.3595372209167268E-7	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999901928892286	WITHOUT_CLASSIFICATION	9.807110771337157E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999758310134096	WITHOUT_CLASSIFICATION	2.4168986590420606E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999555532663	WITHOUT_CLASSIFICATION	4.4446733724519126E-8	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999963466114	WITHOUT_CLASSIFICATION	3.6533886078042054E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999945518545261	WITHOUT_CLASSIFICATION	5.448145473821717E-6	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999746474147	WITHOUT_CLASSIFICATION	2.5352585282930665E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999957627481177	WITHOUT_CLASSIFICATION	4.2372518822011515E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999228480444	WITHOUT_CLASSIFICATION	7.715195561151022E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999397337719	WITHOUT_CLASSIFICATION	6.026622817574633E-8	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997584665736	WITHOUT_CLASSIFICATION	2.4153342638412823E-7	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998615837525	WITHOUT_CLASSIFICATION	1.38416247562704E-7	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995784207841	WITHOUT_CLASSIFICATION	4.2157921597355495E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978724953231	WITHOUT_CLASSIFICATION	2.1275046768195514E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999518909296	WITHOUT_CLASSIFICATION	4.810907041668622E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991635422977	WITHOUT_CLASSIFICATION	8.364577023829892E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980534337315	WITHOUT_CLASSIFICATION	1.9465662685305024E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985899195214	WITHOUT_CLASSIFICATION	1.4100804786081745E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988811382357	WITHOUT_CLASSIFICATION	1.11886176436944E-6	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997585749951	WITHOUT_CLASSIFICATION	2.41425004913083E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.999999665085492	WITHOUT_CLASSIFICATION	3.349145080356636E-7	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999191739364	WITHOUT_CLASSIFICATION	8.082606352099942E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994361718738	WITHOUT_CLASSIFICATION	5.638281262582477E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988584525207	WITHOUT_CLASSIFICATION	1.1415474793563228E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998749321797	WITHOUT_CLASSIFICATION	1.2506782039361666E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985221862377	WITHOUT_CLASSIFICATION	1.4778137621630456E-6	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990205752325	WITHOUT_CLASSIFICATION	9.794247675171268E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995865354592	WITHOUT_CLASSIFICATION	4.134645407704581E-7	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997423417604	WITHOUT_CLASSIFICATION	2.5765823960078703E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997816577668	WITHOUT_CLASSIFICATION	2.183422332135422E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999952096272874	WITHOUT_CLASSIFICATION	4.790372712559243E-6	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996413464192	WITHOUT_CLASSIFICATION	3.586535808345308E-7	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999789015334423	WITHOUT_CLASSIFICATION	2.1098466557681402E-5	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981552744108	WITHOUT_CLASSIFICATION	1.8447255891160535E-6	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999997897553056	WITHOUT_CLASSIFICATION	2.1024469439248808E-7	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999624431242414	WITHOUT_CLASSIFICATION	3.755687575858077E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999855800160482	WITHOUT_CLASSIFICATION	1.4419983951809243E-5	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999979186103646	WITHOUT_CLASSIFICATION	2.081389635380363E-6	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999990311690152	WITHOUT_CLASSIFICATION	9.688309847647629E-7	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999957821332308	WITHOUT_CLASSIFICATION	4.217866769274253E-6	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999958667559572	WITHOUT_CLASSIFICATION	4.1332440429120935E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999922867212052	WITHOUT_CLASSIFICATION	7.713278794736594E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999996249181212	WITHOUT_CLASSIFICATION	3.750818788035838E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999953275193703	WITHOUT_CLASSIFICATION	4.672480629822264E-6	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999978417838216	WITHOUT_CLASSIFICATION	2.158216178535143E-6	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999999726925007	WITHOUT_CLASSIFICATION	2.7307499294570895E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997768312578	WITHOUT_CLASSIFICATION	2.2316874220290181E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999878307922305	WITHOUT_CLASSIFICATION	1.2169207769454346E-5	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999881880827	WITHOUT_CLASSIFICATION	1.1811917458319357E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997230757466	WITHOUT_CLASSIFICATION	2.7692425345940107E-7	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994320500526	WITHOUT_CLASSIFICATION	5.679499474239061E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994009280692	WITHOUT_CLASSIFICATION	5.99071930811396E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994623060529	WITHOUT_CLASSIFICATION	5.376939471539525E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.999998944972374	WITHOUT_CLASSIFICATION	1.055027625995779E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999472011009	WITHOUT_CLASSIFICATION	5.2798899097384416E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999287495674	WITHOUT_CLASSIFICATION	7.125043251341138E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999997957999509	WITHOUT_CLASSIFICATION	2.0420004901949762E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989683310343	WITHOUT_CLASSIFICATION	1.0316689658081916E-6	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999939692352	WITHOUT_CLASSIFICATION	6.030764803548465E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999899099954912	WITHOUT_CLASSIFICATION	1.0090004508732533E-5	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999910625124	WITHOUT_CLASSIFICATION	8.937487589106908E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999964360529	WITHOUT_CLASSIFICATION	3.5639472944497114E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999981779992015	WITHOUT_CLASSIFICATION	1.8220007983809738E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999897686748	WITHOUT_CLASSIFICATION	1.0231325244639728E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999995651218987	WITHOUT_CLASSIFICATION	4.3487810133476535E-7	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999999397924971	WITHOUT_CLASSIFICATION	6.020750289871867E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999624431242414	WITHOUT_CLASSIFICATION	3.755687575858077E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997957493066	WITHOUT_CLASSIFICATION	2.0425069332379202E-7	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999999988341029	WITHOUT_CLASSIFICATION	1.1658971132772361E-8	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999998842675759	WITHOUT_CLASSIFICATION	1.1573242409735837E-7	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981170275982	WITHOUT_CLASSIFICATION	1.8829724017153313E-6	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999718297038	WITHOUT_CLASSIFICATION	2.8170296147867126E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999995733940409	WITHOUT_CLASSIFICATION	4.266059590734389E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999929542181659	WITHOUT_CLASSIFICATION	7.045781834044945E-6	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999992587681802	WITHOUT_CLASSIFICATION	7.412318197480754E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999995820917401	WITHOUT_CLASSIFICATION	4.1790825983582845E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998924432664	WITHOUT_CLASSIFICATION	1.0755673362319409E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999667809533	WITHOUT_CLASSIFICATION	3.32190467568561E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999974584269	WITHOUT_CLASSIFICATION	2.5415730879645947E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999056725427	WITHOUT_CLASSIFICATION	9.432745730312236E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999753201647	WITHOUT_CLASSIFICATION	2.4679835218267126E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999656957017453	WITHOUT_CLASSIFICATION	3.4304298254662066E-5	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999998083212214	WITHOUT_CLASSIFICATION	1.9167877849834267E-7	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999985185787728	WITHOUT_CLASSIFICATION	1.4814212272937626E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999939667292332	WITHOUT_CLASSIFICATION	6.033270766711475E-6	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998292306335	WITHOUT_CLASSIFICATION	1.7076936656832135E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999918559778085	WITHOUT_CLASSIFICATION	8.144022191505947E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999871973791	WITHOUT_CLASSIFICATION	1.2802620761422027E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999968123393544	WITHOUT_CLASSIFICATION	3.1876606454538913E-6	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999984551567793	WITHOUT_CLASSIFICATION	1.5448432206085969E-6	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999999139509087	WITHOUT_CLASSIFICATION	8.604909128741603E-8	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994488860727	WITHOUT_CLASSIFICATION	5.511139272031513E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999987441311295	WITHOUT_CLASSIFICATION	1.255868870473161E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9994547635755244	WITHOUT_CLASSIFICATION	5.452364244755198E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999989476650112	WITHOUT_CLASSIFICATION	1.0523349888451199E-6	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999985475062745	WITHOUT_CLASSIFICATION	1.4524937254799772E-6	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985516839714	WITHOUT_CLASSIFICATION	1.4483160284466804E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999624431242414	WITHOUT_CLASSIFICATION	3.755687575858077E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999990804470127	WITHOUT_CLASSIFICATION	9.195529871714343E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999993231799472	WITHOUT_CLASSIFICATION	6.768200528142167E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995265001808193	WITHOUT_CLASSIFICATION	4.734998191806574E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999624431242414	WITHOUT_CLASSIFICATION	3.755687575858077E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999975246182852	WITHOUT_CLASSIFICATION	2.4753817149166163E-6	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999871973791	WITHOUT_CLASSIFICATION	1.2802620761422027E-8	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999731679094808	WITHOUT_CLASSIFICATION	2.6832090519217555E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999476986273264	WITHOUT_CLASSIFICATION	5.2301372673669105E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999510123930664	WITHOUT_CLASSIFICATION	4.898760693372281E-5	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998924432664	WITHOUT_CLASSIFICATION	1.0755673362319409E-7	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999667809533	WITHOUT_CLASSIFICATION	3.32190467568561E-8	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999974584269	WITHOUT_CLASSIFICATION	2.5415730879645947E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999974345563603	WITHOUT_CLASSIFICATION	2.5654436397469963E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999996606301282	WITHOUT_CLASSIFICATION	3.3936987177734613E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999981485793523	WITHOUT_CLASSIFICATION	1.8514206477072704E-6	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997544852977	WITHOUT_CLASSIFICATION	2.4551470235833977E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999985691354798	WITHOUT_CLASSIFICATION	1.4308645201707396E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999624431242414	WITHOUT_CLASSIFICATION	3.755687575858077E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999056725427	WITHOUT_CLASSIFICATION	9.432745730312236E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999753201647	WITHOUT_CLASSIFICATION	2.4679835218267126E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998725751934	WITHOUT_CLASSIFICATION	1.274248065114182E-7	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999023640269	WITHOUT_CLASSIFICATION	9.763597311381224E-8	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999990614589379	WITHOUT_CLASSIFICATION	9.38541062131855E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999962025817963	WITHOUT_CLASSIFICATION	3.797418203600966E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999992568907584	WITHOUT_CLASSIFICATION	7.431092416433073E-7	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999321786687	WITHOUT_CLASSIFICATION	6.782133133409176E-8	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997816577668	WITHOUT_CLASSIFICATION	2.183422332135422E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999940727032601	WITHOUT_CLASSIFICATION	5.927296739878966E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999228465873643	WITHOUT_CLASSIFICATION	7.71534126356962E-5	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999978290625589	WITHOUT_CLASSIFICATION	2.1709374410964843E-6	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999994884411	WITHOUT_CLASSIFICATION	5.115588879007214E-9	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999616456741	WITHOUT_CLASSIFICATION	3.8354325963817855E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980534337315	WITHOUT_CLASSIFICATION	1.9465662685305024E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985899195214	WITHOUT_CLASSIFICATION	1.4100804786081745E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988584525207	WITHOUT_CLASSIFICATION	1.1415474793563228E-6	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999616456741	WITHOUT_CLASSIFICATION	3.8354325963817855E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999751033656	WITHOUT_CLASSIFICATION	2.4896634496642562E-8	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999538236976	WITHOUT_CLASSIFICATION	4.6176302352435136E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995870728806	WITHOUT_CLASSIFICATION	4.129271194076754E-7	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988143939242	WITHOUT_CLASSIFICATION	1.185606075788663E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999981063496778	WITHOUT_CLASSIFICATION	1.893650322199558E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999506734278709	WITHOUT_CLASSIFICATION	4.932657212900021E-5	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998749321797	WITHOUT_CLASSIFICATION	1.2506782039361666E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995865354592	WITHOUT_CLASSIFICATION	4.134645407704581E-7	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999964360529	WITHOUT_CLASSIFICATION	3.5639472944497114E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999985308037248	WITHOUT_CLASSIFICATION	1.4691962752833541E-6	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999341951882	WITHOUT_CLASSIFICATION	6.58048118192445E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999360943467	WITHOUT_CLASSIFICATION	6.390565329711702E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999994284223225	WITHOUT_CLASSIFICATION	5.7157767750035056E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999380012131	WITHOUT_CLASSIFICATION	6.199878685769671E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999999417115745	WITHOUT_CLASSIFICATION	5.828842550204219E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999971139175742	WITHOUT_CLASSIFICATION	2.886082425773186E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999940133171	WITHOUT_CLASSIFICATION	5.986682884505535E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999855824258	WITHOUT_CLASSIFICATION	1.4417574241780552E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999993761074922	WITHOUT_CLASSIFICATION	6.23892507711245E-7	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999998489473944	WITHOUT_CLASSIFICATION	1.510526056938196E-7	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999974701193509	WITHOUT_CLASSIFICATION	2.529880649057374E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999504770409	WITHOUT_CLASSIFICATION	4.9522958978283375E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999942754061577	WITHOUT_CLASSIFICATION	5.724593842236447E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996302262851	WITHOUT_CLASSIFICATION	3.6977371492896934E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999522490218	WITHOUT_CLASSIFICATION	4.775097817706171E-8	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998710787803	WITHOUT_CLASSIFICATION	1.2892121963184284E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999986837542657	WITHOUT_CLASSIFICATION	1.3162457342229989E-6	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999899325579663	WITHOUT_CLASSIFICATION	1.0067442033728331E-5	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998288619192	WITHOUT_CLASSIFICATION	1.7113808078014827E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998315872077	WITHOUT_CLASSIFICATION	1.6841279228744738E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999312521521	WITHOUT_CLASSIFICATION	6.874784785577676E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999156340369	WITHOUT_CLASSIFICATION	8.436596301848217E-8	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999999228728431	WITHOUT_CLASSIFICATION	7.712715688636273E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999980639321722	WITHOUT_CLASSIFICATION	1.9360678278256647E-6	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999230770247	WITHOUT_CLASSIFICATION	7.692297529314959E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999985549644483	WITHOUT_CLASSIFICATION	1.4450355515923444E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997659245873	WITHOUT_CLASSIFICATION	2.3407541274726215E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998566284388	WITHOUT_CLASSIFICATION	1.433715611400614E-7	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999996256090281	WITHOUT_CLASSIFICATION	3.7439097199486506E-7	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999961038633998	WITHOUT_CLASSIFICATION	3.896136600245773E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997333360201	WITHOUT_CLASSIFICATION	2.6666397989632424E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999998583322033	WITHOUT_CLASSIFICATION	1.4166779670069035E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999882347868544	WITHOUT_CLASSIFICATION	1.1765213145661914E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999817638570156	WITHOUT_CLASSIFICATION	1.8236142984370488E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984814679611	WITHOUT_CLASSIFICATION	1.5185320387916742E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999343730681	WITHOUT_CLASSIFICATION	6.562693184935419E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999984924619705	WITHOUT_CLASSIFICATION	1.5075380295648733E-6	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998465817704	WITHOUT_CLASSIFICATION	1.5341822957714807E-7	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999917091945	WITHOUT_CLASSIFICATION	8.29080544157079E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999998932116409	WITHOUT_CLASSIFICATION	1.0678835909547331E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999954818944203	WITHOUT_CLASSIFICATION	4.518105579685629E-6	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999998901371019	WITHOUT_CLASSIFICATION	1.0986289808457899E-7	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999863749511718	WITHOUT_CLASSIFICATION	1.3625048828205045E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999996560731694	WITHOUT_CLASSIFICATION	3.43926830621248E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999994094106349	WITHOUT_CLASSIFICATION	5.905893650033778E-7	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999972487042742	WITHOUT_CLASSIFICATION	2.75129572577557E-6	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999495071946012	WITHOUT_CLASSIFICATION	5.049280539872309E-5	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998983853280261	WITHOUT_CLASSIFICATION	1.0161467197391765E-4	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999999888914245	WITHOUT_CLASSIFICATION	1.1108575492241365E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999958998285017	WITHOUT_CLASSIFICATION	4.100171498357049E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999292772338	WITHOUT_CLASSIFICATION	7.072276626266864E-8	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999997795919371	WITHOUT_CLASSIFICATION	2.2040806289962728E-6	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999997524816142	WITHOUT_CLASSIFICATION	2.475183857549264E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998649211317	WITHOUT_CLASSIFICATION	1.3507886824271955E-7	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999747803033	WITHOUT_CLASSIFICATION	2.521969670421124E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999999000708638	WITHOUT_CLASSIFICATION	9.992913619454565E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999996561506405	WITHOUT_CLASSIFICATION	3.4384935955739713E-7	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999827758885	WITHOUT_CLASSIFICATION	1.722411146563568E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999996814974429	WITHOUT_CLASSIFICATION	3.1850255703034523E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999994320558229	WITHOUT_CLASSIFICATION	5.679441771465229E-7	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999871540147	WITHOUT_CLASSIFICATION	1.28459853514515E-8	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998855338385	WITHOUT_CLASSIFICATION	1.14466161448299E-7	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999978152533469	WITHOUT_CLASSIFICATION	2.1847466530776765E-6	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999995059096562	WITHOUT_CLASSIFICATION	4.940903436648122E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998615477188	WITHOUT_CLASSIFICATION	1.3845228121719618E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999982312786151	WITHOUT_CLASSIFICATION	1.7687213848496638E-6	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999848135741	WITHOUT_CLASSIFICATION	1.5186425901653578E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999995976717151	WITHOUT_CLASSIFICATION	4.0232828491887865E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999939326572767	WITHOUT_CLASSIFICATION	6.067342723428848E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999996278249321	WITHOUT_CLASSIFICATION	3.7217506779441535E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999952958149804	WITHOUT_CLASSIFICATION	4.704185019606867E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999963518942538	WITHOUT_CLASSIFICATION	3.648105746038092E-6	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999769306408617	WITHOUT_CLASSIFICATION	2.306935913825194E-5	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999972150739748	WITHOUT_CLASSIFICATION	2.7849260252648897E-6	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999997939992316	WITHOUT_CLASSIFICATION	2.0600076850566408E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999971527839496	WITHOUT_CLASSIFICATION	2.847216050411412E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999970420599145	WITHOUT_CLASSIFICATION	2.9579400855445657E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999999333012139	WITHOUT_CLASSIFICATION	6.669878611077856E-7	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999984795339089	WITHOUT_CLASSIFICATION	1.5204660911435456E-6	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999997743067698	WITHOUT_CLASSIFICATION	2.2569323020397165E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996026955096	WITHOUT_CLASSIFICATION	3.9730449049346723E-7	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999994729846449	WITHOUT_CLASSIFICATION	5.270153552013011E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.9999796151049127	WITHOUT_CLASSIFICATION	2.0384895087270877E-5	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999957302499801	WITHOUT_CLASSIFICATION	4.269750019964456E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9996282128041192	WITHOUT_CLASSIFICATION	3.7178719588080257E-4	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999953928666194	WITHOUT_CLASSIFICATION	4.607133380598673E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999980341843261	WITHOUT_CLASSIFICATION	1.965815673889497E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999936881662789	WITHOUT_CLASSIFICATION	6.311833721112837E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985875986265	WITHOUT_CLASSIFICATION	1.4124013735142822E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999993404763697	WITHOUT_CLASSIFICATION	6.595236302983819E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999585757751766	WITHOUT_CLASSIFICATION	4.142422482347225E-5	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999907746480237	WITHOUT_CLASSIFICATION	9.225351976350319E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999814062288326	WITHOUT_CLASSIFICATION	1.8593771167405117E-5	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999979893058611	WITHOUT_CLASSIFICATION	2.010694138897721E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999950797122948	WITHOUT_CLASSIFICATION	4.92028770517068E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992755872477	WITHOUT_CLASSIFICATION	7.24412752442132E-7	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999997438028	WITHOUT_CLASSIFICATION	2.5619709076691985E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999980498334851	WITHOUT_CLASSIFICATION	1.9501665149723064E-6	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999966265548993	WITHOUT_CLASSIFICATION	3.3734451006093605E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999974424323216	WITHOUT_CLASSIFICATION	2.55756767831796E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999980498334851	WITHOUT_CLASSIFICATION	1.9501665149723064E-6	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999997957711229	WITHOUT_CLASSIFICATION	2.0422887709579834E-7	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999996028601256	WITHOUT_CLASSIFICATION	3.9713987447554107E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999955108532961	WITHOUT_CLASSIFICATION	4.489146703844215E-6	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999993669826433	WITHOUT_CLASSIFICATION	6.3301735668819155E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999840016319	WITHOUT_CLASSIFICATION	1.5998368015209086E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998881402061	WITHOUT_CLASSIFICATION	1.1185979385225008E-7	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999308561423794	WITHOUT_CLASSIFICATION	6.91438576205138E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999992621583894	WITHOUT_CLASSIFICATION	7.378416104726192E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999773239204	WITHOUT_CLASSIFICATION	2.2676079620925145E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999945306150319	WITHOUT_CLASSIFICATION	5.469384968187384E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999576544758	WITHOUT_CLASSIFICATION	4.234552430744368E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999995073687848	WITHOUT_CLASSIFICATION	4.926312151167241E-7	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999971999746221	WITHOUT_CLASSIFICATION	2.8000253779676254E-6	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999995027362344	WITHOUT_CLASSIFICATION	4.972637655907714E-6	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999988638149684	WITHOUT_CLASSIFICATION	1.1361850315355514E-6	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999962513194143	WITHOUT_CLASSIFICATION	3.748680585723346E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999876506043334	WITHOUT_CLASSIFICATION	1.2349395666599131E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999876506043334	WITHOUT_CLASSIFICATION	1.2349395666599131E-5	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998382127656	WITHOUT_CLASSIFICATION	1.6178723437875353E-7	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999588967162016	WITHOUT_CLASSIFICATION	4.1103283798323955E-5	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999768898598655	WITHOUT_CLASSIFICATION	2.311014013444624E-5	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999834609087215	WITHOUT_CLASSIFICATION	1.6539091278584367E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999037639224	WITHOUT_CLASSIFICATION	9.623607754620577E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998366396222745	WITHOUT_CLASSIFICATION	1.633603777254988E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999897642916328	WITHOUT_CLASSIFICATION	1.02357083671808E-5	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999975986904	WITHOUT_CLASSIFICATION	2.401309604657262E-8	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999989128988458	WITHOUT_CLASSIFICATION	1.0871011541598316E-6	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999969835095942	WITHOUT_CLASSIFICATION	3.016490405784565E-6	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999999128393646	WITHOUT_CLASSIFICATION	8.71606354040055E-7	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999969888427	WITHOUT_CLASSIFICATION	3.01115727256922E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999995622674729	WITHOUT_CLASSIFICATION	4.37732527022266E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999988953207434	WITHOUT_CLASSIFICATION	1.1046792566190628E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999631936436	WITHOUT_CLASSIFICATION	3.6806356449446746E-8	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999942754061577	WITHOUT_CLASSIFICATION	5.724593842236447E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999793099742108	WITHOUT_CLASSIFICATION	2.069002578920897E-5	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998020057977	WITHOUT_CLASSIFICATION	1.9799420212264628E-7	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999979023144498	WITHOUT_CLASSIFICATION	2.0976855501923E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9972042464246219	WITHOUT_CLASSIFICATION	0.002795753575378107	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999906177849	WITHOUT_CLASSIFICATION	9.382215051229047E-9	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999933203014122	WITHOUT_CLASSIFICATION	6.679698587775615E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998719527785	WITHOUT_CLASSIFICATION	1.280472214372552E-7	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999192186166	WITHOUT_CLASSIFICATION	8.078138336534621E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999936771199	WITHOUT_CLASSIFICATION	6.322880232198263E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999932106484	WITHOUT_CLASSIFICATION	6.789351612566052E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999995753193688	WITHOUT_CLASSIFICATION	4.2468063128234374E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999997177572663	WITHOUT_CLASSIFICATION	2.8224273373648417E-7	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999990862243715	WITHOUT_CLASSIFICATION	9.137756285456074E-7	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999929027798957	WITHOUT_CLASSIFICATION	7.097220104265948E-6	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999994285935154	WITHOUT_CLASSIFICATION	5.714064845890156E-7	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999992249287158	WITHOUT_CLASSIFICATION	7.750712841881093E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999795161985823	WITHOUT_CLASSIFICATION	2.0483801417698653E-5	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999968642884303	WITHOUT_CLASSIFICATION	3.135711569816214E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999995211329689	WITHOUT_CLASSIFICATION	4.788670310371808E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999995320577388	WITHOUT_CLASSIFICATION	4.6794226110723044E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999964185211719	WITHOUT_CLASSIFICATION	3.5814788280374103E-6	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999996500485384	WITHOUT_CLASSIFICATION	3.499514615484367E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997730749639	WITHOUT_CLASSIFICATION	2.2692503615966815E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999979148563225	WITHOUT_CLASSIFICATION	2.085143677535448E-6	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999990066946864	WITHOUT_CLASSIFICATION	9.933053135025588E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999987339540958	WITHOUT_CLASSIFICATION	1.266045904133556E-6	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999689908454	WITHOUT_CLASSIFICATION	3.100915464853209E-8	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998899639119	WITHOUT_CLASSIFICATION	1.1003608807585305E-7	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999989291965204	WITHOUT_CLASSIFICATION	1.0708034795317645E-6	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999993571164186	WITHOUT_CLASSIFICATION	6.428835814394227E-7	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993657223198	WITHOUT_CLASSIFICATION	6.342776802337658E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995079477757	WITHOUT_CLASSIFICATION	4.920522243435794E-7	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989866165432	WITHOUT_CLASSIFICATION	1.0133834568391393E-6	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999587519836	WITHOUT_CLASSIFICATION	4.124801637865733E-8	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999649480357	WITHOUT_CLASSIFICATION	3.505196439069931E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997714928206	WITHOUT_CLASSIFICATION	2.2850717943179845E-7	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998112318826	WITHOUT_CLASSIFICATION	1.8876811743438498E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999995171084398	WITHOUT_CLASSIFICATION	4.82891560080598E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989787302174	WITHOUT_CLASSIFICATION	1.0212697826863823E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999995171084398	WITHOUT_CLASSIFICATION	4.82891560080598E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989034739458	WITHOUT_CLASSIFICATION	1.0965260542035806E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999786995446	WITHOUT_CLASSIFICATION	2.130045541343739E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999983398359109	WITHOUT_CLASSIFICATION	1.6601640890576557E-6	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99999954827166	WITHOUT_CLASSIFICATION	4.5172833991413526E-7	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999963051312927	WITHOUT_CLASSIFICATION	3.6948687074569002E-6	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999883676280409	WITHOUT_CLASSIFICATION	1.163237195913076E-5	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998735373643	WITHOUT_CLASSIFICATION	1.2646263568768362E-7	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999997021227783	WITHOUT_CLASSIFICATION	2.9787722167337086E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999999957301192	WITHOUT_CLASSIFICATION	4.269880804369921E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999934639669696	WITHOUT_CLASSIFICATION	6.5360330302539646E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999825435825	WITHOUT_CLASSIFICATION	1.7456417492420703E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999782363744	WITHOUT_CLASSIFICATION	2.1763625459714852E-8	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999712739690226	WITHOUT_CLASSIFICATION	2.8726030977334077E-5	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999762467404396	WITHOUT_CLASSIFICATION	2.37532595603566E-5	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999994965860838	WITHOUT_CLASSIFICATION	5.034139162861806E-7	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999866452819	WITHOUT_CLASSIFICATION	1.3354718136308372E-8	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999662617587465	WITHOUT_CLASSIFICATION	3.373824125357502E-5	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999662617587465	WITHOUT_CLASSIFICATION	3.373824125357502E-5	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999966318904202	WITHOUT_CLASSIFICATION	3.368109579714403E-6	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999924414957367	WITHOUT_CLASSIFICATION	7.558504263273349E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999342060355	WITHOUT_CLASSIFICATION	6.579396452299146E-8	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998416526751	WITHOUT_CLASSIFICATION	1.5834732481253607E-7	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999987656106248	WITHOUT_CLASSIFICATION	1.2343893751256792E-6	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999994827107181	WITHOUT_CLASSIFICATION	5.172892818975492E-6	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999971392772676	WITHOUT_CLASSIFICATION	2.8607227323611485E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999831050240817	WITHOUT_CLASSIFICATION	1.6894975918248518E-5	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999990585539101	WITHOUT_CLASSIFICATION	9.414460898519975E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999658471426	WITHOUT_CLASSIFICATION	3.415285752604509E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997688665346	WITHOUT_CLASSIFICATION	2.3113346524752315E-7	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997547746713	WITHOUT_CLASSIFICATION	2.452253287424744E-7	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999999714280163	WITHOUT_CLASSIFICATION	2.8571983702620597E-7	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999995347910569	WITHOUT_CLASSIFICATION	4.652089432159763E-7	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998072124581	WITHOUT_CLASSIFICATION	1.9278754194268493E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999994365225712	WITHOUT_CLASSIFICATION	5.634774288974169E-7	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999996802025488	WITHOUT_CLASSIFICATION	3.197974512022514E-7	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999928470123541	WITHOUT_CLASSIFICATION	7.152987645778978E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999996635571337	WITHOUT_CLASSIFICATION	3.364428663222114E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999991346472	WITHOUT_CLASSIFICATION	8.653528343714532E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999995005633947	WITHOUT_CLASSIFICATION	4.994366052280542E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999999952185887	WITHOUT_CLASSIFICATION	4.781411296419614E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999966366034	WITHOUT_CLASSIFICATION	3.3633965856898374E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999999993692556	WITHOUT_CLASSIFICATION	6.3074441052632145E-9	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999957534249841	WITHOUT_CLASSIFICATION	4.246575015858892E-6	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997271468252	WITHOUT_CLASSIFICATION	2.728531748055629E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999988505868759	WITHOUT_CLASSIFICATION	1.1494131241181432E-6	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999875598906456	WITHOUT_CLASSIFICATION	1.244010935441713E-5	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999824738718696	WITHOUT_CLASSIFICATION	1.7526128130454395E-5	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999982961414833	WITHOUT_CLASSIFICATION	1.7038585167140227E-6	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999691310588249	WITHOUT_CLASSIFICATION	3.086894117513384E-5	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999986867750803	WITHOUT_CLASSIFICATION	1.313224919655683E-6	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999568746897076	WITHOUT_CLASSIFICATION	4.312531029242122E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999821977311628	WITHOUT_CLASSIFICATION	1.7802268837252264E-5	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999975365224737	WITHOUT_CLASSIFICATION	2.4634775262275997E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999802689998	WITHOUT_CLASSIFICATION	1.9731000179477818E-8	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999893867589	WITHOUT_CLASSIFICATION	1.0613241122272931E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999893309921573	WITHOUT_CLASSIFICATION	1.0669007842830556E-5	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999201150229	WITHOUT_CLASSIFICATION	7.988497705305817E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999652923901	WITHOUT_CLASSIFICATION	3.4707609787472184E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999755160132	WITHOUT_CLASSIFICATION	2.4483986746594717E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978828791193	WITHOUT_CLASSIFICATION	2.117120880604572E-6	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999810911948951	WITHOUT_CLASSIFICATION	1.890880510488818E-5	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999999966295616	WITHOUT_CLASSIFICATION	3.370438389085647E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999989873176	WITHOUT_CLASSIFICATION	1.0126823765717577E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999998074525561	WITHOUT_CLASSIFICATION	1.925474438355814E-7	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999038679062	WITHOUT_CLASSIFICATION	9.613209382014484E-8	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999795994788	WITHOUT_CLASSIFICATION	2.040052115149168E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999999859079917	WITHOUT_CLASSIFICATION	1.409200830655381E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999971877152698	WITHOUT_CLASSIFICATION	2.8122847303000348E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968317051795	WITHOUT_CLASSIFICATION	3.1682948204973367E-6	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999777529811285	WITHOUT_CLASSIFICATION	2.22470188714789E-5	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999885070258632	WITHOUT_CLASSIFICATION	1.1492974136852383E-5	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999974423736241	WITHOUT_CLASSIFICATION	2.5576263759336433E-6	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999949505676917	WITHOUT_CLASSIFICATION	5.049432308267173E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999975246182852	WITHOUT_CLASSIFICATION	2.4753817149166163E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999975246182852	WITHOUT_CLASSIFICATION	2.4753817149166163E-6	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999632127635321	WITHOUT_CLASSIFICATION	3.6787236468029184E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999918390709965	WITHOUT_CLASSIFICATION	8.160929003380637E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998638975764	WITHOUT_CLASSIFICATION	1.361024235706136E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999997863319823	WITHOUT_CLASSIFICATION	2.1366801768030376E-7	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998021149947	WITHOUT_CLASSIFICATION	1.9788500534197075E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997060152402	WITHOUT_CLASSIFICATION	2.9398475974740694E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999998940257695	WITHOUT_CLASSIFICATION	1.0597423051849557E-7	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999999812830579	WITHOUT_CLASSIFICATION	1.8716942148570697E-8	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999292822497238	WITHOUT_CLASSIFICATION	7.071775027619484E-5	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999850089705	WITHOUT_CLASSIFICATION	1.499102956270352E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999979146892554	WITHOUT_CLASSIFICATION	2.0853107446774893E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999999581941824	WITHOUT_CLASSIFICATION	4.180581759933089E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999678294767963	WITHOUT_CLASSIFICATION	3.217052320376151E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999815626134	WITHOUT_CLASSIFICATION	1.8437386609803588E-8	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999812383352895	WITHOUT_CLASSIFICATION	1.8761664710499976E-5	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999670983776738	WITHOUT_CLASSIFICATION	3.290162232611049E-5	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999914106249	WITHOUT_CLASSIFICATION	8.589375153411645E-9	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999859479165557	WITHOUT_CLASSIFICATION	1.4052083444252942E-5	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999996035544994	WITHOUT_CLASSIFICATION	3.964455005978172E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999977796298128	WITHOUT_CLASSIFICATION	2.2203701871934334E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999738702547	WITHOUT_CLASSIFICATION	2.612974526583786E-8	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999963285396938	WITHOUT_CLASSIFICATION	3.6714603062176173E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999501871417179	WITHOUT_CLASSIFICATION	4.981285828213778E-5	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999319544151	WITHOUT_CLASSIFICATION	6.804558483935973E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999998367985421	WITHOUT_CLASSIFICATION	1.6320145790911604E-7	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999987449290894	WITHOUT_CLASSIFICATION	1.2550709105726133E-6	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999967800325229	WITHOUT_CLASSIFICATION	3.219967476971518E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999412755172195	WITHOUT_CLASSIFICATION	5.872448278061242E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999504091571	WITHOUT_CLASSIFICATION	4.9590842909286083E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999501871417179	WITHOUT_CLASSIFICATION	4.981285828213778E-5	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999999834287145	WITHOUT_CLASSIFICATION	1.6571285499300978E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999991613626	WITHOUT_CLASSIFICATION	8.386374779388558E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.9997213971827481	WITHOUT_CLASSIFICATION	2.786028172519528E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999990609345529	WITHOUT_CLASSIFICATION	9.390654470999544E-6	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997400014815	WITHOUT_CLASSIFICATION	2.599985184377333E-7	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999685389042309	WITHOUT_CLASSIFICATION	3.1461095769222314E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999200099463	WITHOUT_CLASSIFICATION	7.999005360986633E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996612278989	WITHOUT_CLASSIFICATION	3.387721012062572E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999969558831013	WITHOUT_CLASSIFICATION	3.0441168985990864E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.999990609345529	WITHOUT_CLASSIFICATION	9.390654470999544E-6	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999998239175452	WITHOUT_CLASSIFICATION	1.7608245478623026E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996736320975	WITHOUT_CLASSIFICATION	3.263679023708699E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999997452377316	WITHOUT_CLASSIFICATION	2.5476226835693376E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999642214374781	WITHOUT_CLASSIFICATION	3.577856252180836E-5	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999984670117915	WITHOUT_CLASSIFICATION	1.5329882085561853E-6	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997688665346	WITHOUT_CLASSIFICATION	2.3113346524752315E-7	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999995043552071	WITHOUT_CLASSIFICATION	4.956447929620589E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999843549363663	WITHOUT_CLASSIFICATION	1.5645063633609395E-5	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999970566893216	WITHOUT_CLASSIFICATION	2.9433106784291355E-6	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999992765895778	WITHOUT_CLASSIFICATION	7.234104222064683E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999990600365874	WITHOUT_CLASSIFICATION	9.399634126128219E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999977245438719	WITHOUT_CLASSIFICATION	2.2754561281308612E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999905784856974	WITHOUT_CLASSIFICATION	9.421514302598772E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999982316919548	WITHOUT_CLASSIFICATION	1.7683080451609944E-6	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999913625892924	WITHOUT_CLASSIFICATION	8.637410707596464E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999999479953505	WITHOUT_CLASSIFICATION	5.200464950620504E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999495098529447	WITHOUT_CLASSIFICATION	5.049014705540633E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999400427724	WITHOUT_CLASSIFICATION	5.99572275485096E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999242055488	WITHOUT_CLASSIFICATION	7.579445112723519E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999995826247087	WITHOUT_CLASSIFICATION	4.1737529138059256E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999685089374	WITHOUT_CLASSIFICATION	3.149106268241403E-8	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999986823650879	WITHOUT_CLASSIFICATION	1.317634912023707E-6	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999973968224254	WITHOUT_CLASSIFICATION	2.6031775746624976E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997541158826	WITHOUT_CLASSIFICATION	2.458841174249829E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999169833707	WITHOUT_CLASSIFICATION	8.301662944953812E-8	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999874296077954	WITHOUT_CLASSIFICATION	1.2570392204649954E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999977924640951	WITHOUT_CLASSIFICATION	2.2075359048345166E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999858166907	WITHOUT_CLASSIFICATION	1.4183309322141888E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999991139908652	WITHOUT_CLASSIFICATION	8.860091347532416E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999922308399894	WITHOUT_CLASSIFICATION	7.769160010461052E-6	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999980175124655	WITHOUT_CLASSIFICATION	1.9824875345409487E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999659619199598	WITHOUT_CLASSIFICATION	3.403808004028474E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999980645910748	WITHOUT_CLASSIFICATION	1.9354089252491236E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997118475322	WITHOUT_CLASSIFICATION	2.881524678234174E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995742103347	WITHOUT_CLASSIFICATION	4.257896653260662E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999997952577039	WITHOUT_CLASSIFICATION	2.047422961376838E-7	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999996026535273	WITHOUT_CLASSIFICATION	3.973464726106676E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999996498248723	WITHOUT_CLASSIFICATION	3.5017512765022943E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999990620863	WITHOUT_CLASSIFICATION	9.3791373786025E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999999401933436	WITHOUT_CLASSIFICATION	5.980665640769942E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999995141981537	WITHOUT_CLASSIFICATION	4.858018462417947E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999703358389	WITHOUT_CLASSIFICATION	2.9664161205300698E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999157079243	WITHOUT_CLASSIFICATION	8.429207566302795E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999984037200518	WITHOUT_CLASSIFICATION	1.5962799482252366E-6	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999984914799803	WITHOUT_CLASSIFICATION	1.5085200196297988E-6	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999991471216644	WITHOUT_CLASSIFICATION	8.528783356538325E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999999296408926	WITHOUT_CLASSIFICATION	7.035910740052092E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999755400943	WITHOUT_CLASSIFICATION	2.4459905672304196E-8	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999980078195819	WITHOUT_CLASSIFICATION	1.9921804180263475E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999822342271	WITHOUT_CLASSIFICATION	1.7765772892408198E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999339174246151	WITHOUT_CLASSIFICATION	6.608257538487447E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999966224218806	WITHOUT_CLASSIFICATION	3.377578119330662E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999986299861896	WITHOUT_CLASSIFICATION	1.370013810400023E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999995439729001	WITHOUT_CLASSIFICATION	4.56027099754875E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999996062850188	WITHOUT_CLASSIFICATION	3.937149811473327E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999991901413855	WITHOUT_CLASSIFICATION	8.098586143854608E-7	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999746818432	WITHOUT_CLASSIFICATION	2.5318156762050475E-8	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999990148124291	WITHOUT_CLASSIFICATION	9.851875708534589E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999965283232	WITHOUT_CLASSIFICATION	3.4716768028027972E-9	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999987768218035	WITHOUT_CLASSIFICATION	1.2231781965373764E-6	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999350469103295	WITHOUT_CLASSIFICATION	6.495308967054777E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999969153838616	WITHOUT_CLASSIFICATION	3.0846161383659648E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997118475322	WITHOUT_CLASSIFICATION	2.881524678234174E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999410023431	WITHOUT_CLASSIFICATION	5.899765689933746E-8	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999986012598	WITHOUT_CLASSIFICATION	1.3987401511796854E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999983452260192	WITHOUT_CLASSIFICATION	1.6547739808715817E-6	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.999996191285759	WITHOUT_CLASSIFICATION	3.8087142409273504E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999998289371088	WITHOUT_CLASSIFICATION	1.7106289126420623E-7	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999999813047964	WITHOUT_CLASSIFICATION	1.8695203705363853E-8	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977322613024	WITHOUT_CLASSIFICATION	2.2677386975618086E-6	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999803026203	WITHOUT_CLASSIFICATION	1.969737973043921E-8	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999270088449	WITHOUT_CLASSIFICATION	7.299115509557487E-8	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999984615384221	WITHOUT_CLASSIFICATION	1.5384615778680693E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999805029525	WITHOUT_CLASSIFICATION	1.9497047509346187E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997747608423138	WITHOUT_CLASSIFICATION	2.252391576862108E-4	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999997568487461	WITHOUT_CLASSIFICATION	2.4315125391854804E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999983319181089	WITHOUT_CLASSIFICATION	1.6680818910636893E-6	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989034739458	WITHOUT_CLASSIFICATION	1.0965260542035806E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999932502402	WITHOUT_CLASSIFICATION	6.749759768795444E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999972950822	WITHOUT_CLASSIFICATION	2.7049178244253497E-9	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998265852865	WITHOUT_CLASSIFICATION	1.7341471352587835E-7	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999995811476577	WITHOUT_CLASSIFICATION	4.188523422955688E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999975846955	WITHOUT_CLASSIFICATION	2.4153045239428073E-9	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999944796896362	WITHOUT_CLASSIFICATION	5.520310363851792E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999944796896362	WITHOUT_CLASSIFICATION	5.520310363851792E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999987164385288	WITHOUT_CLASSIFICATION	1.2835614712293907E-6	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999995888645623	WITHOUT_CLASSIFICATION	4.1113543766396354E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999083636356	WITHOUT_CLASSIFICATION	9.163636433651314E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999974262504508	WITHOUT_CLASSIFICATION	2.573749549150211E-6	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999535012324	WITHOUT_CLASSIFICATION	4.6498767699942956E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999791465639	WITHOUT_CLASSIFICATION	2.0853436184426358E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999994304994842	WITHOUT_CLASSIFICATION	5.695005158091584E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998926906897	WITHOUT_CLASSIFICATION	1.0730931030181132E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998926906897	WITHOUT_CLASSIFICATION	1.0730931030181132E-6	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999647048421968	WITHOUT_CLASSIFICATION	3.5295157803083236E-5	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999994387851231	WITHOUT_CLASSIFICATION	5.612148769785986E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999999844645516	WITHOUT_CLASSIFICATION	1.5535448409768647E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999787980045	WITHOUT_CLASSIFICATION	2.1201995498025888E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999787980045	WITHOUT_CLASSIFICATION	2.1201995498025888E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999787980045	WITHOUT_CLASSIFICATION	2.1201995498025888E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999999581132422	WITHOUT_CLASSIFICATION	4.1886757793148075E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999997860326464	WITHOUT_CLASSIFICATION	2.1396735369107394E-7	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999991558248287	WITHOUT_CLASSIFICATION	8.441751713114003E-7	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999951596262565	WITHOUT_CLASSIFICATION	4.840373743423222E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999668195756	WITHOUT_CLASSIFICATION	3.318042445401629E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999913256592	WITHOUT_CLASSIFICATION	8.674340856725009E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999389297272	WITHOUT_CLASSIFICATION	6.107027284233727E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999745403477798	WITHOUT_CLASSIFICATION	2.54596522201761E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999995190888378	WITHOUT_CLASSIFICATION	4.809111621828203E-7	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999993252074989	WITHOUT_CLASSIFICATION	6.747925011843534E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999980414664951	WITHOUT_CLASSIFICATION	1.9585335049158857E-6	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997551573208	WITHOUT_CLASSIFICATION	2.448426793217132E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999777277303	WITHOUT_CLASSIFICATION	2.227226973582406E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999872975786	WITHOUT_CLASSIFICATION	1.2702421327966196E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999901104522	WITHOUT_CLASSIFICATION	9.889547776407677E-9	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999997582157375	WITHOUT_CLASSIFICATION	2.41784262460652E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999950190860569	WITHOUT_CLASSIFICATION	4.980913943049838E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999950190860569	WITHOUT_CLASSIFICATION	4.980913943049838E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999957879335111	WITHOUT_CLASSIFICATION	4.212066488885392E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999957879335111	WITHOUT_CLASSIFICATION	4.212066488885392E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999957235585504	WITHOUT_CLASSIFICATION	4.276441449683511E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960579314885	WITHOUT_CLASSIFICATION	3.94206851144667E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960579314885	WITHOUT_CLASSIFICATION	3.94206851144667E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999972365231591	WITHOUT_CLASSIFICATION	2.7634768408954203E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999939355538572	WITHOUT_CLASSIFICATION	6.064446142820717E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999909941212	WITHOUT_CLASSIFICATION	9.00587880683052E-9	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999944796896362	WITHOUT_CLASSIFICATION	5.520310363851792E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999754012281	WITHOUT_CLASSIFICATION	2.4598771964665935E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999939355538572	WITHOUT_CLASSIFICATION	6.064446142820717E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999981706578539	WITHOUT_CLASSIFICATION	1.8293421461581792E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999995524290354	WITHOUT_CLASSIFICATION	4.475709645618682E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999972151995299	WITHOUT_CLASSIFICATION	2.7848004701403087E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999982728982626	WITHOUT_CLASSIFICATION	1.7271017374459582E-6	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999564992927	WITHOUT_CLASSIFICATION	4.3500707365443196E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999995111650832	WITHOUT_CLASSIFICATION	4.888349168087691E-6	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996905694015	WITHOUT_CLASSIFICATION	3.094305983992667E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999996161660657	WITHOUT_CLASSIFICATION	3.838339343029406E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999999951254852	WITHOUT_CLASSIFICATION	4.874514799385415E-8	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999938239892139	WITHOUT_CLASSIFICATION	6.176010786068703E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999945775316	WITHOUT_CLASSIFICATION	5.4224682583588926E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999964354579737	WITHOUT_CLASSIFICATION	3.564542026186091E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996319757136	WITHOUT_CLASSIFICATION	3.6802428631863343E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999963452737134	WITHOUT_CLASSIFICATION	3.6547262866222547E-6	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999995909631293	WITHOUT_CLASSIFICATION	4.090368707187588E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999183706815	WITHOUT_CLASSIFICATION	8.162931846349293E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999851168901	WITHOUT_CLASSIFICATION	1.4883109775348721E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999996770787226	WITHOUT_CLASSIFICATION	3.2292127739667225E-6	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999996770787226	WITHOUT_CLASSIFICATION	3.2292127739667225E-6	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999990214572682	WITHOUT_CLASSIFICATION	9.78542731842351E-7	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999992829945947	WITHOUT_CLASSIFICATION	7.170054052474102E-7	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999311229511	WITHOUT_CLASSIFICATION	6.88770488974691E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999991252821262	WITHOUT_CLASSIFICATION	8.747178737260097E-7	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994218305168	WITHOUT_CLASSIFICATION	5.781694830672185E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999702755251	WITHOUT_CLASSIFICATION	2.9724474848998078E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999782232417	WITHOUT_CLASSIFICATION	2.177675826434133E-8	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999992187584258	WITHOUT_CLASSIFICATION	7.812415742126522E-7	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999997215731694	WITHOUT_CLASSIFICATION	2.784268305932171E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999940409061	WITHOUT_CLASSIFICATION	5.959093827992009E-9	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998062419525	WITHOUT_CLASSIFICATION	1.9375804744160163E-7	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997747608423138	WITHOUT_CLASSIFICATION	2.252391576862108E-4	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999953304127	WITHOUT_CLASSIFICATION	4.669587325140265E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994162568099	WITHOUT_CLASSIFICATION	5.837431901125126E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999999147971808	WITHOUT_CLASSIFICATION	8.520281919520366E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999998970984836	WITHOUT_CLASSIFICATION	1.0290151646272463E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999728149088	WITHOUT_CLASSIFICATION	2.718509117925768E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999728149088	WITHOUT_CLASSIFICATION	2.718509117925768E-8	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999957965548671	WITHOUT_CLASSIFICATION	4.203445132922778E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999983863499095	WITHOUT_CLASSIFICATION	1.6136500905464465E-6	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999992467894725	WITHOUT_CLASSIFICATION	7.53210527407986E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999975958028197	WITHOUT_CLASSIFICATION	2.404197180329889E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.99999921174536	WITHOUT_CLASSIFICATION	7.882546399549274E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999928087034026	WITHOUT_CLASSIFICATION	7.191296597416385E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999759062157	WITHOUT_CLASSIFICATION	2.409378430123131E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999726067808	WITHOUT_CLASSIFICATION	2.7393219241094753E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999119605857	WITHOUT_CLASSIFICATION	8.80394142706219E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998323154822	WITHOUT_CLASSIFICATION	1.6768451783121787E-7	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999993653356969	WITHOUT_CLASSIFICATION	6.346643031285531E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999726067808	WITHOUT_CLASSIFICATION	2.7393219241094753E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999544594287	WITHOUT_CLASSIFICATION	4.5540571368295335E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998529209471	WITHOUT_CLASSIFICATION	1.470790528448082E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999849059595	WITHOUT_CLASSIFICATION	1.509404049913592E-7	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999992567360813	WITHOUT_CLASSIFICATION	7.432639187655923E-7	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999972875396	WITHOUT_CLASSIFICATION	2.712460344544306E-9	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999122653941	WITHOUT_CLASSIFICATION	8.773460588912597E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999316632231	WITHOUT_CLASSIFICATION	6.833677684849436E-8	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998398690387	WITHOUT_CLASSIFICATION	1.6013096131674475E-7	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999659488392	WITHOUT_CLASSIFICATION	3.405116081661765E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999917574024623	WITHOUT_CLASSIFICATION	8.242597537750777E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999988832717914	WITHOUT_CLASSIFICATION	1.1167282085282319E-6	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999888370425	WITHOUT_CLASSIFICATION	1.1162957498920079E-7	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999530528929	WITHOUT_CLASSIFICATION	4.6947107045994367E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994069365128	WITHOUT_CLASSIFICATION	5.930634871486528E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999970325687435	WITHOUT_CLASSIFICATION	2.9674312564261355E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999887290294802	WITHOUT_CLASSIFICATION	1.1270970519744037E-5	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999895372498072	WITHOUT_CLASSIFICATION	1.0462750192706695E-5	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999975305041584	WITHOUT_CLASSIFICATION	2.4694958416043316E-6	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999996199154453	WITHOUT_CLASSIFICATION	3.800845546914066E-6	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999385265036	WITHOUT_CLASSIFICATION	6.147349642364756E-8	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999992268759944	WITHOUT_CLASSIFICATION	7.731240055526598E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998664826186	WITHOUT_CLASSIFICATION	1.33517381450966E-7	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999801108695631	WITHOUT_CLASSIFICATION	1.988913043692285E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999917785695545	WITHOUT_CLASSIFICATION	8.221430445572657E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998791157896	WITHOUT_CLASSIFICATION	1.2088421046198625E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999951596902683	WITHOUT_CLASSIFICATION	4.840309731712418E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999643157748	WITHOUT_CLASSIFICATION	3.568422522347076E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999935777739	WITHOUT_CLASSIFICATION	6.422226121180584E-9	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999992070847	WITHOUT_CLASSIFICATION	7.929152982500922E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999990593012941	WITHOUT_CLASSIFICATION	9.406987059792331E-7	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999973626253	WITHOUT_CLASSIFICATION	2.6373746562577018E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999999726242994	WITHOUT_CLASSIFICATION	2.7375700568342852E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999990220964456	WITHOUT_CLASSIFICATION	9.779035542934503E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999813850321	WITHOUT_CLASSIFICATION	1.8614967922854785E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999353348245	WITHOUT_CLASSIFICATION	6.466517557321913E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999968142897558	WITHOUT_CLASSIFICATION	3.1857102442881197E-6	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999974121732	WITHOUT_CLASSIFICATION	2.5878269063301737E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999995270393	WITHOUT_CLASSIFICATION	4.7296070481750465E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999996178456011	WITHOUT_CLASSIFICATION	3.821543988514708E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999594067722	WITHOUT_CLASSIFICATION	4.0593227697461204E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999980142737633	WITHOUT_CLASSIFICATION	1.9857262366668197E-6	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999695826729	WITHOUT_CLASSIFICATION	3.041732711798366E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999748167919	WITHOUT_CLASSIFICATION	2.5183208169170844E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998978026458	WITHOUT_CLASSIFICATION	1.021973542929598E-7	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999101661466	WITHOUT_CLASSIFICATION	8.983385333552523E-8	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999996647505127	WITHOUT_CLASSIFICATION	3.352494872712212E-7	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999990934264046	WITHOUT_CLASSIFICATION	9.065735954000805E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999940542825946	WITHOUT_CLASSIFICATION	5.945717405512252E-6	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999992736231879	WITHOUT_CLASSIFICATION	7.263768121319979E-7	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999996819191325	WITHOUT_CLASSIFICATION	3.180808676135412E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986851062713	WITHOUT_CLASSIFICATION	1.3148937285984404E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998944098234	WITHOUT_CLASSIFICATION	1.0559017668893798E-7	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999119124072	WITHOUT_CLASSIFICATION	8.80875927867326E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999988864475682	WITHOUT_CLASSIFICATION	1.113552431792967E-6	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999432664157	WITHOUT_CLASSIFICATION	5.673358423532799E-8	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999997208042655	WITHOUT_CLASSIFICATION	2.7919573449102685E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997698683658	WITHOUT_CLASSIFICATION	2.3013163418961752E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999375531289	WITHOUT_CLASSIFICATION	6.244687102906481E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999992793097506	WITHOUT_CLASSIFICATION	7.206902492396401E-7	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999995007815119	WITHOUT_CLASSIFICATION	4.992184880248697E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999999118232777	WITHOUT_CLASSIFICATION	8.817672221204712E-8	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997187164784	WITHOUT_CLASSIFICATION	2.812835215921996E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999715220621	WITHOUT_CLASSIFICATION	2.84779379775923E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999872585738913	WITHOUT_CLASSIFICATION	1.2741426108738423E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999989711474427	WITHOUT_CLASSIFICATION	1.0288525573448552E-6	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999997080272571	WITHOUT_CLASSIFICATION	2.919727429199716E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986851062713	WITHOUT_CLASSIFICATION	1.3148937285984404E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999996699271291	WITHOUT_CLASSIFICATION	3.3007287091550113E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999456329299	WITHOUT_CLASSIFICATION	5.436707005909707E-8	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999887743484	WITHOUT_CLASSIFICATION	1.1225651700903042E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999681909437	WITHOUT_CLASSIFICATION	3.180905623506402E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999995629012848	WITHOUT_CLASSIFICATION	4.370987152303973E-7	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999966092913827	WITHOUT_CLASSIFICATION	3.3907086173524413E-6	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999119605857	WITHOUT_CLASSIFICATION	8.80394142706219E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999730349734304	WITHOUT_CLASSIFICATION	2.696502656965702E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999353348245	WITHOUT_CLASSIFICATION	6.466517557321913E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999996111168243	WITHOUT_CLASSIFICATION	3.888831756312114E-7	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999927796252	WITHOUT_CLASSIFICATION	7.220374803946537E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999963912193679	WITHOUT_CLASSIFICATION	3.6087806320865275E-6	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999963551720148	WITHOUT_CLASSIFICATION	3.644827985072468E-6	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999998640738889	WITHOUT_CLASSIFICATION	1.3592611113140975E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996266154907	WITHOUT_CLASSIFICATION	3.7338450930043017E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999996965924025	WITHOUT_CLASSIFICATION	3.034075975013379E-6	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998309705782	WITHOUT_CLASSIFICATION	1.6902942182707951E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999900514559	WITHOUT_CLASSIFICATION	9.948544083525757E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999522754852	WITHOUT_CLASSIFICATION	4.7724514712818277E-8	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999990694488121	WITHOUT_CLASSIFICATION	9.305511877512081E-7	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999283188381	WITHOUT_CLASSIFICATION	7.168116190142905E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998082614772	WITHOUT_CLASSIFICATION	1.9173852289604617E-7	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998082614772	WITHOUT_CLASSIFICATION	1.9173852289604617E-7	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999730226365	WITHOUT_CLASSIFICATION	2.697736344090448E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999978862724206	WITHOUT_CLASSIFICATION	2.113727579379512E-6	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999992653869124	WITHOUT_CLASSIFICATION	7.346130876495383E-7	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999997788900554	WITHOUT_CLASSIFICATION	2.211099446391885E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999900851296	WITHOUT_CLASSIFICATION	9.914870283472544E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999253115551	WITHOUT_CLASSIFICATION	7.468844497054823E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999899368437	WITHOUT_CLASSIFICATION	1.006315636984482E-8	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999994775035911	WITHOUT_CLASSIFICATION	5.224964088930801E-7	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999504892411	WITHOUT_CLASSIFICATION	4.9510758888873484E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999995925840426	WITHOUT_CLASSIFICATION	4.074159574065269E-6	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999999805673788	WITHOUT_CLASSIFICATION	1.9432621201885966E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999995058360607	WITHOUT_CLASSIFICATION	4.94163939371925E-7	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999747998339	WITHOUT_CLASSIFICATION	2.520016606097594E-8	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999927984005	WITHOUT_CLASSIFICATION	7.201599617550498E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999999423769148	WITHOUT_CLASSIFICATION	5.7623085267482625E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998729101597	WITHOUT_CLASSIFICATION	1.2708984036722162E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999939268836817	WITHOUT_CLASSIFICATION	6.073116318181845E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999374377926	WITHOUT_CLASSIFICATION	6.256220738534009E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999978471362	WITHOUT_CLASSIFICATION	2.1528637981697747E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999994297698032	WITHOUT_CLASSIFICATION	5.702301968915418E-7	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999995883674281	WITHOUT_CLASSIFICATION	4.116325720046046E-7	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999993242235815	WITHOUT_CLASSIFICATION	6.757764184761063E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999999936595086	WITHOUT_CLASSIFICATION	6.340491401515989E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999590896753986	WITHOUT_CLASSIFICATION	4.091032460144716E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999120961832	WITHOUT_CLASSIFICATION	8.790381689213488E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987521873789	WITHOUT_CLASSIFICATION	1.2478126210580623E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997640462779	WITHOUT_CLASSIFICATION	2.3595372209167268E-7	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999632432856	WITHOUT_CLASSIFICATION	3.6756714489972916E-8	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999757651138079	WITHOUT_CLASSIFICATION	2.4234886191993647E-5	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981028570791	WITHOUT_CLASSIFICATION	1.8971429208530766E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9994547635755244	WITHOUT_CLASSIFICATION	5.452364244755198E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999491032922622	WITHOUT_CLASSIFICATION	5.0896707737919914E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998689091122	WITHOUT_CLASSIFICATION	1.3109088780054045E-7	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999943639502	WITHOUT_CLASSIFICATION	5.636049837364173E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999997315650068	WITHOUT_CLASSIFICATION	2.684349931902468E-6	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997453418974	WITHOUT_CLASSIFICATION	2.546581026008854E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999757304510917	WITHOUT_CLASSIFICATION	2.4269548908284952E-5	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999999976174138	WITHOUT_CLASSIFICATION	2.38258619578143E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999998558674564	WITHOUT_CLASSIFICATION	1.441325435334928E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991476560115	WITHOUT_CLASSIFICATION	8.523439883838364E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999658322256	WITHOUT_CLASSIFICATION	3.416777440051276E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999866371267	WITHOUT_CLASSIFICATION	1.3362873133786977E-8	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998898474439329	WITHOUT_CLASSIFICATION	1.1015255606707318E-4	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999724036672835	WITHOUT_CLASSIFICATION	2.7596332716525183E-5	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999787504481376	WITHOUT_CLASSIFICATION	2.124955186239115E-5	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995870728806	WITHOUT_CLASSIFICATION	4.129271194076754E-7	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9952182158277249	WITHOUT_CLASSIFICATION	0.004781784172275167	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998938078463	WITHOUT_CLASSIFICATION	1.0619215369881147E-7	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999954089739	WITHOUT_CLASSIFICATION	4.591026113029366E-8	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999990144657168	WITHOUT_CLASSIFICATION	9.855342830775398E-7	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999585964849	WITHOUT_CLASSIFICATION	4.1403515101410215E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999907051389	WITHOUT_CLASSIFICATION	9.29486119029129E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999971137342418	WITHOUT_CLASSIFICATION	2.8862657581670293E-6	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999999512192376	WITHOUT_CLASSIFICATION	4.878076240149347E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998515120287	WITHOUT_CLASSIFICATION	1.4848797117925382E-7	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994191222352	WITHOUT_CLASSIFICATION	5.808777647398518E-7	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999974201931676	WITHOUT_CLASSIFICATION	2.5798068324465465E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998637028528	WITHOUT_CLASSIFICATION	1.3629714721935702E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.9999999499023142	WITHOUT_CLASSIFICATION	5.0097685863646504E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998334540819	WITHOUT_CLASSIFICATION	1.6654591806959597E-7	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999984129040331	WITHOUT_CLASSIFICATION	1.587095966863475E-6	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999999883966368	WITHOUT_CLASSIFICATION	1.1603363211386898E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999995359156487	WITHOUT_CLASSIFICATION	4.6408435120376226E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999997217618444	WITHOUT_CLASSIFICATION	2.782381555862008E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999998814725622	WITHOUT_CLASSIFICATION	1.1852743768944849E-7	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999694244569	WITHOUT_CLASSIFICATION	3.0575543096971625E-7	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999891780009925	WITHOUT_CLASSIFICATION	1.082199900760764E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999999812764763	WITHOUT_CLASSIFICATION	1.87235236942957E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998502968364	WITHOUT_CLASSIFICATION	1.4970316365086277E-7	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999998081786008	WITHOUT_CLASSIFICATION	1.918213992642355E-7	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998502968364	WITHOUT_CLASSIFICATION	1.4970316365086277E-7	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999851916039	WITHOUT_CLASSIFICATION	1.4808396093103625E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999555256839	WITHOUT_CLASSIFICATION	4.4474316071356166E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999999200779567	WITHOUT_CLASSIFICATION	7.99220433077057E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999359550071	WITHOUT_CLASSIFICATION	6.404499294334689E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999432119918	WITHOUT_CLASSIFICATION	5.678800817303283E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999220416257	WITHOUT_CLASSIFICATION	7.795837424017706E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999998788078446	WITHOUT_CLASSIFICATION	1.2119215545627047E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999733761909905	WITHOUT_CLASSIFICATION	2.6623809009527693E-5	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999999041384419	WITHOUT_CLASSIFICATION	9.586155813591553E-8	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999959076092	WITHOUT_CLASSIFICATION	4.0923908286928374E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999988806156427	WITHOUT_CLASSIFICATION	1.1193843573760641E-6	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999530748832	WITHOUT_CLASSIFICATION	4.692511683524908E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998564603141	WITHOUT_CLASSIFICATION	1.4353968580901416E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999854617153152	WITHOUT_CLASSIFICATION	1.4538284684723E-5	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998023245004	WITHOUT_CLASSIFICATION	1.9767549956232713E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999931510839	WITHOUT_CLASSIFICATION	6.848916055310665E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999747640944	WITHOUT_CLASSIFICATION	2.5235905501988615E-8	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999339702689	WITHOUT_CLASSIFICATION	6.602973107111434E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999859700754	WITHOUT_CLASSIFICATION	1.4029924556943303E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999907161940358	WITHOUT_CLASSIFICATION	9.283805964190876E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999783170999	WITHOUT_CLASSIFICATION	2.1682900109383007E-8	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999966278543361	WITHOUT_CLASSIFICATION	3.3721456639156634E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999381273516286	WITHOUT_CLASSIFICATION	6.18726483714489E-5	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999689534406	WITHOUT_CLASSIFICATION	3.104655940089072E-7	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999981997254406	WITHOUT_CLASSIFICATION	1.8002745594761268E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999701377479054	WITHOUT_CLASSIFICATION	2.986225209465106E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999871745037209	WITHOUT_CLASSIFICATION	1.2825496279141251E-5	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999957565090409	WITHOUT_CLASSIFICATION	4.2434909590739824E-6	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999823141932	WITHOUT_CLASSIFICATION	1.7685806783316475E-7	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999944893755118	WITHOUT_CLASSIFICATION	5.5106244881775255E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999893375639094	WITHOUT_CLASSIFICATION	1.066243609063052E-5	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999988528928224	WITHOUT_CLASSIFICATION	1.147107177530836E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999992327104376	WITHOUT_CLASSIFICATION	7.672895625133719E-7	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999988699345767	WITHOUT_CLASSIFICATION	1.1300654233330921E-6	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999989457209348	WITHOUT_CLASSIFICATION	1.054279065116447E-6	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999742759761597	WITHOUT_CLASSIFICATION	2.5724023840279987E-5	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999900858013033	WITHOUT_CLASSIFICATION	9.914198696556464E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996944462348	WITHOUT_CLASSIFICATION	3.0555376516214845E-7	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999713303839283	WITHOUT_CLASSIFICATION	2.866961607174876E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999970746454244	WITHOUT_CLASSIFICATION	2.9253545756360693E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999973368153579	WITHOUT_CLASSIFICATION	2.6631846421434935E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.999999429962092	WITHOUT_CLASSIFICATION	5.70037907967922E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995265001808193	WITHOUT_CLASSIFICATION	4.734998191806574E-4	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999701377479054	WITHOUT_CLASSIFICATION	2.986225209465106E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999636862120224	WITHOUT_CLASSIFICATION	3.631378797772763E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.999999787327578	WITHOUT_CLASSIFICATION	2.1267242206032977E-7	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999639427589452	WITHOUT_CLASSIFICATION	3.605724105485086E-5	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999735258591761	WITHOUT_CLASSIFICATION	2.6474140823803357E-5	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999984118984026	WITHOUT_CLASSIFICATION	1.5881015974389052E-6	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998532545041	WITHOUT_CLASSIFICATION	1.467454958203383E-7	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999410314975	WITHOUT_CLASSIFICATION	5.896850268225052E-8	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999494280268387	WITHOUT_CLASSIFICATION	5.0571973161302194E-5	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999991706463587	WITHOUT_CLASSIFICATION	8.29353641438844E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998560569886	WITHOUT_CLASSIFICATION	1.439430113813445E-7	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999935304641618	WITHOUT_CLASSIFICATION	6.469535838156392E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999997611195071	WITHOUT_CLASSIFICATION	2.3888049293436735E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999930303293719	WITHOUT_CLASSIFICATION	6.9696706279898146E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999886663680078	WITHOUT_CLASSIFICATION	1.1333631992264346E-5	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997646180203	WITHOUT_CLASSIFICATION	2.3538197970063597E-7	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999958539483	WITHOUT_CLASSIFICATION	4.146051772324208E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999999292825273	WITHOUT_CLASSIFICATION	7.071747270366472E-7	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999975538957763	WITHOUT_CLASSIFICATION	2.446104223703063E-6	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999999948870244	WITHOUT_CLASSIFICATION	5.112975597900018E-8	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.9999636862120224	WITHOUT_CLASSIFICATION	3.631378797772763E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999925546251817	WITHOUT_CLASSIFICATION	7.4453748184168095E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999987025504109	WITHOUT_CLASSIFICATION	1.2974495890297468E-6	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999928393692358	WITHOUT_CLASSIFICATION	7.160630764337462E-6	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999970110369996	WITHOUT_CLASSIFICATION	2.9889630004001533E-6	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998209655997	WITHOUT_CLASSIFICATION	1.7903440034412927E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999940363980566	WITHOUT_CLASSIFICATION	5.96360194337586E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999940363980566	WITHOUT_CLASSIFICATION	5.96360194337586E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999084606883	WITHOUT_CLASSIFICATION	9.153931167090706E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999940363980566	WITHOUT_CLASSIFICATION	5.96360194337586E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9999940363980566	WITHOUT_CLASSIFICATION	5.96360194337586E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999942692797605	WITHOUT_CLASSIFICATION	5.730720239473513E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999821096195299	WITHOUT_CLASSIFICATION	1.7890380470078372E-5	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999965084218703	WITHOUT_CLASSIFICATION	3.4915781297052688E-6	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999951791013056	WITHOUT_CLASSIFICATION	4.820898694388602E-6	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999835370631	WITHOUT_CLASSIFICATION	1.6462936883732955E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999917995456997	WITHOUT_CLASSIFICATION	8.200454300173972E-6	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999923352471457	WITHOUT_CLASSIFICATION	7.664752854294583E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999992850253549	WITHOUT_CLASSIFICATION	7.149746450993862E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999963297149748	WITHOUT_CLASSIFICATION	3.670285025205597E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999129522310204	WITHOUT_CLASSIFICATION	8.704776897957152E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999696311773926	WITHOUT_CLASSIFICATION	3.0368822607525325E-5	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999990406823013	WITHOUT_CLASSIFICATION	9.593176987575938E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999926993183799	WITHOUT_CLASSIFICATION	7.300681620150773E-6	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999755319924426	WITHOUT_CLASSIFICATION	2.4468007557424518E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999967510593735	WITHOUT_CLASSIFICATION	3.248940626494003E-6	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998821922481019	WITHOUT_CLASSIFICATION	1.1780775189813732E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997714928206	WITHOUT_CLASSIFICATION	2.2850717943179845E-7	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999736268178598	WITHOUT_CLASSIFICATION	2.6373182140205086E-5	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999980926653322	WITHOUT_CLASSIFICATION	1.9073346677967788E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999704564381012	WITHOUT_CLASSIFICATION	2.9543561898713026E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999992717083712	WITHOUT_CLASSIFICATION	7.282916287114213E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999993653772913	WITHOUT_CLASSIFICATION	6.346227087143994E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997714928206	WITHOUT_CLASSIFICATION	2.2850717943179845E-7	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999871745037209	WITHOUT_CLASSIFICATION	1.2825496279141251E-5	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999852067903111	WITHOUT_CLASSIFICATION	1.4793209688837727E-5	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999156340369	WITHOUT_CLASSIFICATION	8.436596301848217E-8	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999230770247	WITHOUT_CLASSIFICATION	7.692297529314959E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999923912188813	WITHOUT_CLASSIFICATION	7.6087811186692215E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999997297268024	WITHOUT_CLASSIFICATION	2.7027319756151874E-7	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999904704391547	WITHOUT_CLASSIFICATION	9.52956084542859E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999984751791495	WITHOUT_CLASSIFICATION	1.5248208505096794E-6	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999591268748	WITHOUT_CLASSIFICATION	4.0873125193334187E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999995959047069	WITHOUT_CLASSIFICATION	4.04095293032642E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999974115279469	WITHOUT_CLASSIFICATION	2.5884720531747285E-6	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998794206755	WITHOUT_CLASSIFICATION	1.205793244763086E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999466153193	WITHOUT_CLASSIFICATION	5.33846807045397E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998751213929	WITHOUT_CLASSIFICATION	1.2487860720555202E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999897148056318	WITHOUT_CLASSIFICATION	1.028519436814303E-5	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999884810325	WITHOUT_CLASSIFICATION	1.1518967514040529E-7	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999989597329034	WITHOUT_CLASSIFICATION	1.0402670965747338E-6	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999952064374722	WITHOUT_CLASSIFICATION	4.793562527807123E-6	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999991856954585	WITHOUT_CLASSIFICATION	8.143045414337373E-7	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999912796651789	WITHOUT_CLASSIFICATION	8.720334821092761E-6	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999968861000175	WITHOUT_CLASSIFICATION	3.113899982451768E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999948945009006	WITHOUT_CLASSIFICATION	5.10549909932188E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999984543224	WITHOUT_CLASSIFICATION	1.5456775848614542E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999999591268748	WITHOUT_CLASSIFICATION	4.0873125193334187E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999959175590681	WITHOUT_CLASSIFICATION	4.082440931888903E-6	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999982054048967	WITHOUT_CLASSIFICATION	1.7945951032599896E-6	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999991653350894	WITHOUT_CLASSIFICATION	8.346649107280268E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999978787508437	WITHOUT_CLASSIFICATION	2.121249156388211E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985821643563	WITHOUT_CLASSIFICATION	1.4178356435945562E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999769831171317	WITHOUT_CLASSIFICATION	2.3016882868351E-5	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999923708465951	WITHOUT_CLASSIFICATION	7.6291534048954965E-6	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.9999997917897148	WITHOUT_CLASSIFICATION	2.0821028519848887E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.999997121963738	WITHOUT_CLASSIFICATION	2.878036262108759E-6	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999755968160476	WITHOUT_CLASSIFICATION	2.4403183952354187E-5	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997916758363	WITHOUT_CLASSIFICATION	2.0832416374396152E-7	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998143731363	WITHOUT_CLASSIFICATION	1.8562686375511355E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999904316818929	WITHOUT_CLASSIFICATION	9.56831810699989E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999881463369263	WITHOUT_CLASSIFICATION	1.1853663073572345E-5	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999881771337724	WITHOUT_CLASSIFICATION	1.1822866227567744E-5	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992513658397	WITHOUT_CLASSIFICATION	7.48634160381413E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997916758363	WITHOUT_CLASSIFICATION	2.0832416374396152E-7	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999962911615795	WITHOUT_CLASSIFICATION	3.7088384205480163E-6	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999940773054218	WITHOUT_CLASSIFICATION	5.922694578182177E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997868388131	WITHOUT_CLASSIFICATION	2.1316118690208842E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999990995989189	WITHOUT_CLASSIFICATION	9.004010810942526E-7	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999997853144521	WITHOUT_CLASSIFICATION	2.1468554800491774E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999448802994	WITHOUT_CLASSIFICATION	5.5119700620250454E-8	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999661557496	WITHOUT_CLASSIFICATION	3.384425036404805E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991062872394	WITHOUT_CLASSIFICATION	8.937127606305697E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997420798419	WITHOUT_CLASSIFICATION	2.579201581597433E-7	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998183749848	WITHOUT_CLASSIFICATION	1.8162501523056829E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999845377969	WITHOUT_CLASSIFICATION	1.5462202983930976E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999486414165	WITHOUT_CLASSIFICATION	5.1358583492345543E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999004171714	WITHOUT_CLASSIFICATION	9.958282862677992E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999004171714	WITHOUT_CLASSIFICATION	9.958282862677992E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999489379696666	WITHOUT_CLASSIFICATION	5.106203033352663E-5	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999293131576	WITHOUT_CLASSIFICATION	7.068684229495057E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999995957197155	WITHOUT_CLASSIFICATION	4.0428028443844854E-7	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999999490258012	WITHOUT_CLASSIFICATION	5.097419879902724E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999977203532866	WITHOUT_CLASSIFICATION	2.2796467134326404E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725305029	WITHOUT_CLASSIFICATION	9.274694972215877E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966906687152	WITHOUT_CLASSIFICATION	3.3093312848643745E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992077006449	WITHOUT_CLASSIFICATION	7.922993551712529E-7	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999982271740377	WITHOUT_CLASSIFICATION	1.7728259623045642E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990623360077	WITHOUT_CLASSIFICATION	9.376639923854031E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725305029	WITHOUT_CLASSIFICATION	9.274694972215877E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966906687152	WITHOUT_CLASSIFICATION	3.3093312848643745E-6	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992077006449	WITHOUT_CLASSIFICATION	7.922993551712529E-7	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999979120639914	WITHOUT_CLASSIFICATION	2.0879360086882733E-6	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999872491300199	WITHOUT_CLASSIFICATION	1.2750869979996361E-5	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999997953191554	WITHOUT_CLASSIFICATION	2.046808445214854E-7	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999965765961808	WITHOUT_CLASSIFICATION	3.423403819327842E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999997563677232	WITHOUT_CLASSIFICATION	2.436322768103161E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999970067075591	WITHOUT_CLASSIFICATION	2.993292440923062E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999979929221078	WITHOUT_CLASSIFICATION	2.0070778921826572E-6	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999870448839895	WITHOUT_CLASSIFICATION	1.2955116010432576E-5	TEST
//stats	WITHOUT_CLASSIFICATION	0.9998713126065963	WITHOUT_CLASSIFICATION	1.2868739340367668E-4	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999993690111462	WITHOUT_CLASSIFICATION	6.309888538760962E-7	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999993801917253	WITHOUT_CLASSIFICATION	6.198082748257654E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999779411948094	WITHOUT_CLASSIFICATION	2.2058805190627506E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999458510561894	WITHOUT_CLASSIFICATION	5.41489438105312E-5	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999109127563	WITHOUT_CLASSIFICATION	8.908724368263092E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999828770084	WITHOUT_CLASSIFICATION	1.7122991683640587E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999997405904541	WITHOUT_CLASSIFICATION	2.5940954590724192E-6	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9988097334930048	WITHOUT_CLASSIFICATION	0.001190266506995188	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999637349614099	WITHOUT_CLASSIFICATION	3.626503859006857E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999997662874318	WITHOUT_CLASSIFICATION	2.3371256817890034E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999970794843143	WITHOUT_CLASSIFICATION	2.9205156857626366E-6	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999990976270039	WITHOUT_CLASSIFICATION	9.023729960045553E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999573640208	WITHOUT_CLASSIFICATION	4.26359792693251E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999982806349571	WITHOUT_CLASSIFICATION	1.7193650429950607E-6	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999279490165	WITHOUT_CLASSIFICATION	7.2050983474411E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999998628310626	WITHOUT_CLASSIFICATION	1.3716893740801202E-7	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999933572550241	WITHOUT_CLASSIFICATION	6.642744975858398E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998165522039	WITHOUT_CLASSIFICATION	1.8344779609737358E-6	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941130965607	WITHOUT_CLASSIFICATION	5.886903439247144E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999996062747216	WITHOUT_CLASSIFICATION	3.937252783277656E-7	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964529065317	WITHOUT_CLASSIFICATION	3.547093468253098E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960711622978	WITHOUT_CLASSIFICATION	3.928837702161163E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985875986265	WITHOUT_CLASSIFICATION	1.4124013735142822E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985875986265	WITHOUT_CLASSIFICATION	1.4124013735142822E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999998067419869	WITHOUT_CLASSIFICATION	1.9325801310265286E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999926529655634	WITHOUT_CLASSIFICATION	7.34703443660729E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999999347330806	WITHOUT_CLASSIFICATION	6.5266919492839E-8	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997747608423138	WITHOUT_CLASSIFICATION	2.252391576862108E-4	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999992048401645	WITHOUT_CLASSIFICATION	7.951598354010119E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999999549030617	WITHOUT_CLASSIFICATION	4.5096938296823823E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.9999501774692405	WITHOUT_CLASSIFICATION	4.982253075935419E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.999999863244382	WITHOUT_CLASSIFICATION	1.367556179873919E-7	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999992755872477	WITHOUT_CLASSIFICATION	7.24412752442132E-7	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988779341622	WITHOUT_CLASSIFICATION	1.1220658378570604E-6	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994630674639	WITHOUT_CLASSIFICATION	5.369325360678647E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999387005696	WITHOUT_CLASSIFICATION	6.129943040897719E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998190201723	WITHOUT_CLASSIFICATION	1.809798277114897E-6	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988912379323	WITHOUT_CLASSIFICATION	1.108762067737736E-6	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976726310953	WITHOUT_CLASSIFICATION	2.3273689047134544E-6	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986218331666	WITHOUT_CLASSIFICATION	1.378166833436464E-6	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994982027939	WITHOUT_CLASSIFICATION	5.017972061391008E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994275341723	WITHOUT_CLASSIFICATION	5.724658277413474E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983406786089	WITHOUT_CLASSIFICATION	1.65932139113433E-6	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998019669904	WITHOUT_CLASSIFICATION	1.9803300960349137E-6	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999998046842117	WITHOUT_CLASSIFICATION	1.9531578846126598E-7	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999940527997899	WITHOUT_CLASSIFICATION	5.947200210066363E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999556526643782	WITHOUT_CLASSIFICATION	4.434733562165303E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998579753174	WITHOUT_CLASSIFICATION	1.420246825217795E-7	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999994043569551	WITHOUT_CLASSIFICATION	5.956430448711203E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999146012264	WITHOUT_CLASSIFICATION	8.53987736647441E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999980073083173	WITHOUT_CLASSIFICATION	1.992691682696511E-6	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999454458042	WITHOUT_CLASSIFICATION	5.455419581429584E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999556526643782	WITHOUT_CLASSIFICATION	4.434733562165303E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999556526643782	WITHOUT_CLASSIFICATION	4.434733562165303E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999867846223991	WITHOUT_CLASSIFICATION	1.3215377600959518E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999839047111	WITHOUT_CLASSIFICATION	1.6095288820616864E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997269932308	WITHOUT_CLASSIFICATION	2.730067692387522E-7	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999982541090388	WITHOUT_CLASSIFICATION	1.7458909611831988E-6	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996319757136	WITHOUT_CLASSIFICATION	3.6802428631863343E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999970794843143	WITHOUT_CLASSIFICATION	2.9205156857626366E-6	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999974213876197	WITHOUT_CLASSIFICATION	2.578612380352511E-6	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998498391212	WITHOUT_CLASSIFICATION	1.5016087883620466E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995421396763	WITHOUT_CLASSIFICATION	4.578603237080887E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982533656357	WITHOUT_CLASSIFICATION	1.7466343642649204E-6	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999986729290837	WITHOUT_CLASSIFICATION	1.3270709162859119E-6	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665346553	WITHOUT_CLASSIFICATION	1.1334653446698412E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997757832352	WITHOUT_CLASSIFICATION	2.2421676484741365E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997757832352	WITHOUT_CLASSIFICATION	2.2421676484741365E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995669725362	WITHOUT_CLASSIFICATION	4.33027463841048E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995669725362	WITHOUT_CLASSIFICATION	4.33027463841048E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999822921291	WITHOUT_CLASSIFICATION	1.7707870899290795E-7	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991297370061	WITHOUT_CLASSIFICATION	8.702629938487662E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999875019286872	WITHOUT_CLASSIFICATION	1.2498071312784553E-5	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997339840763	WITHOUT_CLASSIFICATION	2.660159238198843E-7	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999526583289	WITHOUT_CLASSIFICATION	4.734167112274196E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999998841556623	WITHOUT_CLASSIFICATION	1.1584433766041188E-7	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985797767603	WITHOUT_CLASSIFICATION	1.4202232396429335E-6	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991581247031	WITHOUT_CLASSIFICATION	8.418752968865808E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998711812865	WITHOUT_CLASSIFICATION	1.288187135303321E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999587865203596	WITHOUT_CLASSIFICATION	4.1213479640264226E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996879969556	WITHOUT_CLASSIFICATION	3.1200304432193464E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999993038830229	WITHOUT_CLASSIFICATION	6.961169770361487E-7	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999993077535324	WITHOUT_CLASSIFICATION	6.922464675373724E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998598650647	WITHOUT_CLASSIFICATION	1.4013493542193473E-7	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999967039059816	WITHOUT_CLASSIFICATION	3.2960940183329845E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999995332287054	WITHOUT_CLASSIFICATION	4.6677129463670294E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999995332287054	WITHOUT_CLASSIFICATION	4.6677129463670294E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996534385371	WITHOUT_CLASSIFICATION	3.465614628869953E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999988583960272	WITHOUT_CLASSIFICATION	1.1416039727907095E-6	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999946775882	WITHOUT_CLASSIFICATION	5.322411804855375E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999918390709965	WITHOUT_CLASSIFICATION	8.160929003380637E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991248733873	WITHOUT_CLASSIFICATION	8.751266126576162E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981368849611	WITHOUT_CLASSIFICATION	1.8631150389221126E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999779135633	WITHOUT_CLASSIFICATION	2.2086436622312056E-8	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999713803545	WITHOUT_CLASSIFICATION	2.8619645479028624E-8	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999422989575	WITHOUT_CLASSIFICATION	5.770104248748301E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999998866157721	WITHOUT_CLASSIFICATION	1.1338422797496591E-7	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999654930347	WITHOUT_CLASSIFICATION	3.4506965336227285E-8	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999398649955	WITHOUT_CLASSIFICATION	6.01350045453365E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997278745515	WITHOUT_CLASSIFICATION	2.72125448568557E-7	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998957280523	WITHOUT_CLASSIFICATION	1.042719477606491E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999999709412568	WITHOUT_CLASSIFICATION	2.9058743193882983E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.99999722775219	WITHOUT_CLASSIFICATION	2.772247809948909E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998502237669	WITHOUT_CLASSIFICATION	1.4977623297436513E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999999605014066	WITHOUT_CLASSIFICATION	3.949859340108093E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999996111820494	WITHOUT_CLASSIFICATION	3.88817950641023E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999694326629	WITHOUT_CLASSIFICATION	3.0567337046775406E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999158867038	WITHOUT_CLASSIFICATION	8.411329615587441E-8	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999989615437358	WITHOUT_CLASSIFICATION	1.0384562641448603E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999355783752	WITHOUT_CLASSIFICATION	6.442162490750466E-8	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995672563197	WITHOUT_CLASSIFICATION	4.3274368034862103E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996187709826	WITHOUT_CLASSIFICATION	3.812290174082192E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998360032938	WITHOUT_CLASSIFICATION	1.6399670609849064E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999969818286903	WITHOUT_CLASSIFICATION	3.0181713096492526E-6	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999977233148687	WITHOUT_CLASSIFICATION	2.2766851313287107E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999993340569852	WITHOUT_CLASSIFICATION	6.659430147583611E-7	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999968642884303	WITHOUT_CLASSIFICATION	3.135711569816214E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999872710755	WITHOUT_CLASSIFICATION	1.272892442649591E-8	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999989649231689	WITHOUT_CLASSIFICATION	1.0350768311526042E-6	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999936511967109	WITHOUT_CLASSIFICATION	6.348803289122761E-6	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999998449015739	WITHOUT_CLASSIFICATION	1.5509842605170817E-7	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999425550264488	WITHOUT_CLASSIFICATION	5.744497355118093E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999979712844014	WITHOUT_CLASSIFICATION	2.0287155985693393E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999914106249	WITHOUT_CLASSIFICATION	8.589375153411645E-9	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999999340495832	WITHOUT_CLASSIFICATION	6.595041681218034E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999686334415	WITHOUT_CLASSIFICATION	3.1366558411450076E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999995906416421	WITHOUT_CLASSIFICATION	4.093583578663406E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999660425095	WITHOUT_CLASSIFICATION	3.395749049903018E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998809677957	WITHOUT_CLASSIFICATION	1.1903220437254219E-7	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999987609127748	WITHOUT_CLASSIFICATION	1.2390872251947523E-5	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998403884424	WITHOUT_CLASSIFICATION	1.596115576763025E-7	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999926223034776	WITHOUT_CLASSIFICATION	7.377696522373016E-6	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999979365545443	WITHOUT_CLASSIFICATION	2.0634454557423565E-6	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999966442365752	WITHOUT_CLASSIFICATION	3.3557634247626782E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999662617587465	WITHOUT_CLASSIFICATION	3.373824125357502E-5	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999994285311304	WITHOUT_CLASSIFICATION	5.714688694717646E-7	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9971313236379834	WITHOUT_CLASSIFICATION	0.002868676362016557	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999994148738227	WITHOUT_CLASSIFICATION	5.851261773062342E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998536557194806	WITHOUT_CLASSIFICATION	1.463442805193706E-4	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999990342845446	WITHOUT_CLASSIFICATION	9.657154553147803E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999600087329711	WITHOUT_CLASSIFICATION	3.999126702884787E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999959986023373	WITHOUT_CLASSIFICATION	4.001397662670751E-6	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999994268463783	WITHOUT_CLASSIFICATION	5.731536216712562E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9988496913140388	WITHOUT_CLASSIFICATION	0.001150308685961194	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.999993758209645	WITHOUT_CLASSIFICATION	6.241790355042521E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999407682246	WITHOUT_CLASSIFICATION	5.923177539586796E-7	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999162601716809	WITHOUT_CLASSIFICATION	8.373982831909123E-5	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998983534419	WITHOUT_CLASSIFICATION	1.0164655807013971E-7	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994609252244	WITHOUT_CLASSIFICATION	5.390747755216399E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999892216196337	WITHOUT_CLASSIFICATION	1.07783803663578E-5	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999992112704795	WITHOUT_CLASSIFICATION	7.88729520579921E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998820798192	WITHOUT_CLASSIFICATION	1.179201808227013E-7	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999610316668	WITHOUT_CLASSIFICATION	3.896833330448924E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999705327066	WITHOUT_CLASSIFICATION	2.9467293402632813E-8	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998525460794	WITHOUT_CLASSIFICATION	1.4745392066750529E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999501871417179	WITHOUT_CLASSIFICATION	4.981285828213778E-5	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999501871417179	WITHOUT_CLASSIFICATION	4.981285828213778E-5	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999946471979982	WITHOUT_CLASSIFICATION	5.352802001826454E-6	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999985558274204	WITHOUT_CLASSIFICATION	1.4441725795648107E-6	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999443739764	WITHOUT_CLASSIFICATION	5.5626023694445006E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999985008136024	WITHOUT_CLASSIFICATION	1.4991863975572512E-6	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999638719179	WITHOUT_CLASSIFICATION	3.612808207393652E-8	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999946303250931	WITHOUT_CLASSIFICATION	5.369674906957662E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999958436231	WITHOUT_CLASSIFICATION	4.1563769039678084E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999982861114505	WITHOUT_CLASSIFICATION	1.7138885495291867E-6	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999958374206006	WITHOUT_CLASSIFICATION	4.162579399365765E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999999817576556	WITHOUT_CLASSIFICATION	1.8242344404980698E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997056113127	WITHOUT_CLASSIFICATION	2.94388687327449E-7	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999903422155	WITHOUT_CLASSIFICATION	9.657784382089073E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999977967547302	WITHOUT_CLASSIFICATION	2.203245269772857E-6	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999787130122	WITHOUT_CLASSIFICATION	2.1286987850455165E-8	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999978730478414	WITHOUT_CLASSIFICATION	2.1269521586488573E-6	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999968054454172	WITHOUT_CLASSIFICATION	3.194554582814624E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999992692377949	WITHOUT_CLASSIFICATION	7.307622049996033E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999979944112778	WITHOUT_CLASSIFICATION	2.0055887222441876E-6	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999990807985648	WITHOUT_CLASSIFICATION	9.192014352047929E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999971117030935	WITHOUT_CLASSIFICATION	2.888296906453051E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999996503190397	WITHOUT_CLASSIFICATION	3.4968096031049886E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996013845766	WITHOUT_CLASSIFICATION	3.9861542345249154E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999970092240307	WITHOUT_CLASSIFICATION	2.9907759692954967E-5	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999971498433862	WITHOUT_CLASSIFICATION	2.8501566138148367E-6	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999995489214653	WITHOUT_CLASSIFICATION	4.510785347875821E-7	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999978444802526	WITHOUT_CLASSIFICATION	2.1555197473271856E-6	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999999173115246	WITHOUT_CLASSIFICATION	8.268847540095688E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999951675672197	WITHOUT_CLASSIFICATION	4.832432780189686E-6	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999980686644304	WITHOUT_CLASSIFICATION	1.931335569520627E-6	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999996398243953	WITHOUT_CLASSIFICATION	3.6017560459332967E-7	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999988722485347	WITHOUT_CLASSIFICATION	1.1277514652425183E-6	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998696228742	WITHOUT_CLASSIFICATION	1.303771257915712E-7	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999993453671082	WITHOUT_CLASSIFICATION	6.546328917046214E-7	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999994400823747	WITHOUT_CLASSIFICATION	5.59917625252929E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999987221037123	WITHOUT_CLASSIFICATION	1.2778962876674233E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999987221037123	WITHOUT_CLASSIFICATION	1.2778962876674233E-6	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998033612977	WITHOUT_CLASSIFICATION	1.9663870241642635E-7	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999982288036184	WITHOUT_CLASSIFICATION	1.7711963816025322E-5	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997519796675	WITHOUT_CLASSIFICATION	2.4802033252151745E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999987018828692	WITHOUT_CLASSIFICATION	1.2981171308727438E-6	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999996024808231	WITHOUT_CLASSIFICATION	3.975191769758619E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999847852579379	WITHOUT_CLASSIFICATION	1.5214742062122167E-5	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999996461922434	WITHOUT_CLASSIFICATION	3.5380775666636567E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999840387632	WITHOUT_CLASSIFICATION	1.5961236730822554E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999722842720552	WITHOUT_CLASSIFICATION	2.771572794480339E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999228110805	WITHOUT_CLASSIFICATION	7.718891948332073E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999124862767	WITHOUT_CLASSIFICATION	8.751372325835719E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999986996584603	WITHOUT_CLASSIFICATION	1.300341539675839E-6	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999975374478288	WITHOUT_CLASSIFICATION	2.4625521711258227E-6	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998585536677	WITHOUT_CLASSIFICATION	1.4144633241975149E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999994250440447	WITHOUT_CLASSIFICATION	5.749559553073188E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999836447343151	WITHOUT_CLASSIFICATION	1.63552656849091E-5	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999836447343151	WITHOUT_CLASSIFICATION	1.63552656849091E-5	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999969789435	WITHOUT_CLASSIFICATION	3.0210565373832172E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999991668363226	WITHOUT_CLASSIFICATION	8.331636773282652E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999996765942464	WITHOUT_CLASSIFICATION	3.234057536617759E-7	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999995245295452	WITHOUT_CLASSIFICATION	4.7547045489809444E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999412755172195	WITHOUT_CLASSIFICATION	5.872448278061242E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998679332847	WITHOUT_CLASSIFICATION	1.3206671526414308E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995950739138	WITHOUT_CLASSIFICATION	4.0492608615926316E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999995950739138	WITHOUT_CLASSIFICATION	4.0492608615926316E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999997188693818	WITHOUT_CLASSIFICATION	2.811306182592196E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999971672568	WITHOUT_CLASSIFICATION	2.8327431000243605E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999959595408932	WITHOUT_CLASSIFICATION	4.040459106821391E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999979069393312	WITHOUT_CLASSIFICATION	2.0930606687458396E-6	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999991017601619	WITHOUT_CLASSIFICATION	8.982398381660404E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999642214374781	WITHOUT_CLASSIFICATION	3.577856252180836E-5	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999260012242	WITHOUT_CLASSIFICATION	7.39987757582953E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999909941212	WITHOUT_CLASSIFICATION	9.00587880683052E-9	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998261283681	WITHOUT_CLASSIFICATION	1.7387163189606106E-7	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999927093571657	WITHOUT_CLASSIFICATION	7.290642834355887E-6	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999995439729001	WITHOUT_CLASSIFICATION	4.56027099754875E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.999996191285759	WITHOUT_CLASSIFICATION	3.8087142409273504E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999934237683938	WITHOUT_CLASSIFICATION	6.576231606137654E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999957235585504	WITHOUT_CLASSIFICATION	4.276441449683511E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999757651138079	WITHOUT_CLASSIFICATION	2.4234886191993647E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997743894775	WITHOUT_CLASSIFICATION	2.256105225300006E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999953205863918	WITHOUT_CLASSIFICATION	4.679413608133538E-6	TEST
//by default	WITHOUT_CLASSIFICATION	0.9999970051260095	WITHOUT_CLASSIFICATION	2.9948739904741506E-6	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999996180026348	WITHOUT_CLASSIFICATION	3.8199736518825337E-7	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999999478610192	WITHOUT_CLASSIFICATION	5.213898090237338E-8	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999986861294509	WITHOUT_CLASSIFICATION	1.3138705492215364E-6	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999972365231591	WITHOUT_CLASSIFICATION	2.7634768408954203E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998847515386835	WITHOUT_CLASSIFICATION	1.1524846131644551E-4	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999999084441008	WITHOUT_CLASSIFICATION	9.155589917836194E-8	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998773967336	WITHOUT_CLASSIFICATION	1.226032664592883E-7	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999999458866731	WITHOUT_CLASSIFICATION	5.411332694190858E-8	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996905995496965	WITHOUT_CLASSIFICATION	3.0940045030349906E-4	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999361676208	WITHOUT_CLASSIFICATION	6.383237916109713E-8	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999896635849	WITHOUT_CLASSIFICATION	1.0336415091513867E-8	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999728149088	WITHOUT_CLASSIFICATION	2.718509117925768E-8	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999965779315599	WITHOUT_CLASSIFICATION	3.422068440092287E-5	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999982212211413	WITHOUT_CLASSIFICATION	1.778778858648661E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999987787843968	WITHOUT_CLASSIFICATION	1.2212156032072292E-6	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999966226970398	WITHOUT_CLASSIFICATION	3.3773029601911016E-6	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999868487302207	WITHOUT_CLASSIFICATION	1.3151269779360083E-5	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999989194297305	WITHOUT_CLASSIFICATION	1.0805702694948659E-5	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999965562625796	WITHOUT_CLASSIFICATION	3.4437374204983467E-6	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999997001854208	WITHOUT_CLASSIFICATION	2.9981457911112836E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999989391471881	WITHOUT_CLASSIFICATION	1.060852811956187E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983638126199	WITHOUT_CLASSIFICATION	1.6361873800605545E-6	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999663591272	WITHOUT_CLASSIFICATION	3.3640872794901854E-7	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.9999995041149672	WITHOUT_CLASSIFICATION	4.958850327210158E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999997336757558	WITHOUT_CLASSIFICATION	2.663242442096272E-6	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997642131069	WITHOUT_CLASSIFICATION	2.3578689307038285E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999910927004	WITHOUT_CLASSIFICATION	8.907299638091328E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999977407373698	WITHOUT_CLASSIFICATION	2.259262630259347E-6	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999989391471881	WITHOUT_CLASSIFICATION	1.060852811956187E-6	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983638126199	WITHOUT_CLASSIFICATION	1.6361873800605545E-6	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999915075161863	WITHOUT_CLASSIFICATION	8.492483813824164E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999979596314239	WITHOUT_CLASSIFICATION	2.040368576144653E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997173069864	WITHOUT_CLASSIFICATION	2.8269301350993794E-7	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999947708764111	WITHOUT_CLASSIFICATION	5.229123588960502E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999429186085	WITHOUT_CLASSIFICATION	5.7081391452844694E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999995154765454	WITHOUT_CLASSIFICATION	4.845234546084022E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999752964592196	WITHOUT_CLASSIFICATION	2.470354078039712E-5	TEST
// }	WITHOUT_CLASSIFICATION	0.9999928491899938	WITHOUT_CLASSIFICATION	7.150810006334791E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999773300436	WITHOUT_CLASSIFICATION	2.2669956372374414E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999819990753647	WITHOUT_CLASSIFICATION	1.800092463537502E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999992687381676	WITHOUT_CLASSIFICATION	7.31261832378247E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999819990753647	WITHOUT_CLASSIFICATION	1.800092463537502E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999998213587857	WITHOUT_CLASSIFICATION	1.7864121430209226E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999941139367501	WITHOUT_CLASSIFICATION	5.8860632499071175E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999979456285866	WITHOUT_CLASSIFICATION	2.0543714134270072E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983328728197	WITHOUT_CLASSIFICATION	1.6671271802688356E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999994879275002	WITHOUT_CLASSIFICATION	5.12072499814153E-7	TEST
//}	WITHOUT_CLASSIFICATION	0.9997956503805201	WITHOUT_CLASSIFICATION	2.0434961947999727E-4	TEST
//}	WITHOUT_CLASSIFICATION	0.9997956503805201	WITHOUT_CLASSIFICATION	2.0434961947999727E-4	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999861710329476	WITHOUT_CLASSIFICATION	1.382896705233014E-5	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999983294677779	WITHOUT_CLASSIFICATION	1.6705322220788015E-6	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999961138988482	WITHOUT_CLASSIFICATION	3.886101151748511E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999996183381934	WITHOUT_CLASSIFICATION	3.816618066052235E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999962615555303	WITHOUT_CLASSIFICATION	3.73844446957769E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999675130438479	WITHOUT_CLASSIFICATION	3.248695615206778E-5	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999973078452759	WITHOUT_CLASSIFICATION	2.6921547241528025E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994418910704	WITHOUT_CLASSIFICATION	5.581089295504972E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999935365401393	WITHOUT_CLASSIFICATION	6.463459860770581E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999765083196316	WITHOUT_CLASSIFICATION	2.34916803683908E-5	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999862935296112	WITHOUT_CLASSIFICATION	1.3706470388799839E-5	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999980165849308	WITHOUT_CLASSIFICATION	1.9834150690795926E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999296946367539	WITHOUT_CLASSIFICATION	7.030536324620994E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999991140565875	WITHOUT_CLASSIFICATION	8.859434124885678E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999981769532812	WITHOUT_CLASSIFICATION	1.8230467188317618E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999995059143	WITHOUT_CLASSIFICATION	4.940856988475856E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998537102964	WITHOUT_CLASSIFICATION	1.462897035445634E-7	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999671073106	WITHOUT_CLASSIFICATION	3.289268931334277E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999976459362206	WITHOUT_CLASSIFICATION	2.3540637792496927E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998147272509986	WITHOUT_CLASSIFICATION	1.8527274900139996E-4	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999914630563	WITHOUT_CLASSIFICATION	8.536943772544718E-9	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999945490751511	WITHOUT_CLASSIFICATION	5.4509248488852605E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999898766017	WITHOUT_CLASSIFICATION	1.0123398297487797E-7	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999983918509757	WITHOUT_CLASSIFICATION	1.6081490242757752E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999987668176616	WITHOUT_CLASSIFICATION	1.2331823383461248E-6	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999604847266912	WITHOUT_CLASSIFICATION	3.951527330889456E-5	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999999976493197	WITHOUT_CLASSIFICATION	2.3506802928664073E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999993781028133	WITHOUT_CLASSIFICATION	6.218971867420136E-7	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999998335842086	WITHOUT_CLASSIFICATION	1.664157912833562E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999996343993529	WITHOUT_CLASSIFICATION	3.65600647128737E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999658844698452	WITHOUT_CLASSIFICATION	3.4115530154716135E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999997976871328	WITHOUT_CLASSIFICATION	2.0231286720218877E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999973078452759	WITHOUT_CLASSIFICATION	2.6921547241528025E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999998225981906	WITHOUT_CLASSIFICATION	1.774018092809797E-7	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999213233644145	WITHOUT_CLASSIFICATION	7.867663558543322E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986673778446935	WITHOUT_CLASSIFICATION	0.0013326221553065377	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999891693241585	WITHOUT_CLASSIFICATION	1.0830675841575461E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999996592706502	WITHOUT_CLASSIFICATION	3.4072934993741086E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999949716310135	WITHOUT_CLASSIFICATION	5.028368986544502E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999996183381934	WITHOUT_CLASSIFICATION	3.816618066052235E-6	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999996183381934	WITHOUT_CLASSIFICATION	3.816618066052235E-6	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999989531007362	WITHOUT_CLASSIFICATION	1.0468992638280106E-6	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999965482463564	WITHOUT_CLASSIFICATION	3.45175364345577E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999981434154416	WITHOUT_CLASSIFICATION	1.856584558504915E-6	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996349899722	WITHOUT_CLASSIFICATION	3.6501002775995675E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999979915349746	WITHOUT_CLASSIFICATION	2.0084650254965705E-6	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999997963615816	WITHOUT_CLASSIFICATION	2.036384183048932E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999996200843909	WITHOUT_CLASSIFICATION	3.7991560904273396E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999087335998	WITHOUT_CLASSIFICATION	9.12664002794725E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999992731239855	WITHOUT_CLASSIFICATION	7.268760145731761E-7	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997563492969	WITHOUT_CLASSIFICATION	2.436507030920166E-7	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999883827390943	WITHOUT_CLASSIFICATION	1.1617260905783226E-5	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998442292695714	WITHOUT_CLASSIFICATION	1.5577073042869743E-4	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999895667078206	WITHOUT_CLASSIFICATION	1.0433292179342656E-5	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997563492969	WITHOUT_CLASSIFICATION	2.436507030920166E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999982431418276	WITHOUT_CLASSIFICATION	1.756858172429118E-6	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999999761982335	WITHOUT_CLASSIFICATION	2.3801766505472961E-7	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999989412486578	WITHOUT_CLASSIFICATION	1.058751342147188E-6	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9978898662077464	WITHOUT_CLASSIFICATION	0.002110133792253597	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998442292695714	WITHOUT_CLASSIFICATION	1.5577073042869743E-4	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999918613389223	WITHOUT_CLASSIFICATION	8.13866107777102E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999298056702	WITHOUT_CLASSIFICATION	7.019432980186984E-8	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998894331903	WITHOUT_CLASSIFICATION	1.1056680958271863E-7	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999896884125	WITHOUT_CLASSIFICATION	1.0311587487143172E-8	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998979875182911	WITHOUT_CLASSIFICATION	1.0201248170893347E-4	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999987978476319	WITHOUT_CLASSIFICATION	1.2021523679980284E-6	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996322505683	WITHOUT_CLASSIFICATION	3.6774943167115137E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999960314313682	WITHOUT_CLASSIFICATION	3.968568631890308E-6	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999997514071925	WITHOUT_CLASSIFICATION	2.485928075022729E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999987016985202	WITHOUT_CLASSIFICATION	1.2983014796762301E-6	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999999824970907	WITHOUT_CLASSIFICATION	1.750290929395519E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999344636503	WITHOUT_CLASSIFICATION	6.553634966749081E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997563492969	WITHOUT_CLASSIFICATION	2.436507030920166E-7	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999918613389223	WITHOUT_CLASSIFICATION	8.13866107777102E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998894331903	WITHOUT_CLASSIFICATION	1.1056680958271863E-7	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999988003706967	WITHOUT_CLASSIFICATION	1.19962930338527E-6	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999913007316723	WITHOUT_CLASSIFICATION	8.699268327679845E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999998607564363	WITHOUT_CLASSIFICATION	1.3924356369075092E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998442292695714	WITHOUT_CLASSIFICATION	1.5577073042869743E-4	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999830208896074	WITHOUT_CLASSIFICATION	1.697911039258759E-5	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999937427615874	WITHOUT_CLASSIFICATION	6.257238412543773E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999893319956276	WITHOUT_CLASSIFICATION	1.0668004372512777E-5	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999909690621103	WITHOUT_CLASSIFICATION	9.030937889786388E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999960314313682	WITHOUT_CLASSIFICATION	3.968568631890308E-6	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999982431418276	WITHOUT_CLASSIFICATION	1.756858172429118E-6	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.999992791237305	WITHOUT_CLASSIFICATION	7.208762695076792E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999948687175537	WITHOUT_CLASSIFICATION	5.131282446312595E-6	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999890402877604	WITHOUT_CLASSIFICATION	1.0959712239601308E-5	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999774550391672	WITHOUT_CLASSIFICATION	2.254496083274628E-5	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999458807016824	WITHOUT_CLASSIFICATION	5.4119298317446715E-5	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999486101058307	WITHOUT_CLASSIFICATION	5.138989416926374E-5	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999913085720864	WITHOUT_CLASSIFICATION	8.69142791370139E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983328728197	WITHOUT_CLASSIFICATION	1.6671271802688356E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998092966834	WITHOUT_CLASSIFICATION	1.907033165774365E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999993515112179	WITHOUT_CLASSIFICATION	6.484887821131527E-7	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9993393037440095	WITHOUT_CLASSIFICATION	6.606962559905748E-4	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999891718134153	WITHOUT_CLASSIFICATION	1.0828186584654574E-5	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999985444311333	WITHOUT_CLASSIFICATION	1.4555688667206103E-6	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999874113223	WITHOUT_CLASSIFICATION	1.2588677588254667E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999983987062901	WITHOUT_CLASSIFICATION	1.6012937098428562E-6	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997808916633	WITHOUT_CLASSIFICATION	2.1910833662553884E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999909690621103	WITHOUT_CLASSIFICATION	9.030937889786388E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999931661238332	WITHOUT_CLASSIFICATION	6.833876166874054E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.9999922219948317	WITHOUT_CLASSIFICATION	7.778005168261128E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999658741692707	WITHOUT_CLASSIFICATION	3.4125830729356835E-5	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999926364993834	WITHOUT_CLASSIFICATION	7.3635006165522845E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9999830422279964	WITHOUT_CLASSIFICATION	1.695777200366165E-5	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999963414272	WITHOUT_CLASSIFICATION	3.65857269107401E-9	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999999731681821	WITHOUT_CLASSIFICATION	2.68318179010407E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.99999780758562	WITHOUT_CLASSIFICATION	2.192414379946005E-6	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999994040262266	WITHOUT_CLASSIFICATION	5.959737734647711E-7	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999894886238169	WITHOUT_CLASSIFICATION	1.0511376183154995E-5	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999971524134326	WITHOUT_CLASSIFICATION	2.847586567405409E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999924913514787	WITHOUT_CLASSIFICATION	7.508648521274296E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999845380204391	WITHOUT_CLASSIFICATION	1.546197956090574E-5	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999976610010303	WITHOUT_CLASSIFICATION	2.3389989698114427E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999259987523	WITHOUT_CLASSIFICATION	7.400124765315802E-8	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999993389541137	WITHOUT_CLASSIFICATION	6.610458862004825E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999961465957	WITHOUT_CLASSIFICATION	3.853404296354689E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999312624388	WITHOUT_CLASSIFICATION	6.873756118220287E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999990768701896	WITHOUT_CLASSIFICATION	9.231298103556603E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999950373249785	WITHOUT_CLASSIFICATION	4.962675021436095E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999964885525892	WITHOUT_CLASSIFICATION	3.5114474108915117E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999995431781864	WITHOUT_CLASSIFICATION	4.5682181357608653E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999994766176344	WITHOUT_CLASSIFICATION	5.233823656154528E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998742385888	WITHOUT_CLASSIFICATION	1.2576141121049525E-7	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996678340465	WITHOUT_CLASSIFICATION	3.3216595348036835E-7	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997430025705032	WITHOUT_CLASSIFICATION	2.569974294967229E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999799458608662	WITHOUT_CLASSIFICATION	2.0054139133774626E-5	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999758771880569	WITHOUT_CLASSIFICATION	2.4122811943054624E-5	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999987844640259	WITHOUT_CLASSIFICATION	1.2155359740053733E-6	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997712418625068	WITHOUT_CLASSIFICATION	2.2875813749319315E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999990277815586	WITHOUT_CLASSIFICATION	9.722184413811111E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999917574024623	WITHOUT_CLASSIFICATION	8.242597537750777E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997211595277	WITHOUT_CLASSIFICATION	2.7884047237512314E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999730349734304	WITHOUT_CLASSIFICATION	2.696502656965702E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999989181095904	WITHOUT_CLASSIFICATION	1.081890409540959E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994163013275	WITHOUT_CLASSIFICATION	5.836986725784621E-7	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998585802603	WITHOUT_CLASSIFICATION	1.4141973971437852E-7	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999994490069545	WITHOUT_CLASSIFICATION	5.509930455166061E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994163013275	WITHOUT_CLASSIFICATION	5.836986725784621E-7	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999989181095904	WITHOUT_CLASSIFICATION	1.081890409540959E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998585802603	WITHOUT_CLASSIFICATION	1.4141973971437852E-7	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999997020919689	WITHOUT_CLASSIFICATION	2.9790803111538696E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999997278295972	WITHOUT_CLASSIFICATION	2.7217040280953126E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999959236911581	WITHOUT_CLASSIFICATION	4.07630884195974E-6	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999105694493	WITHOUT_CLASSIFICATION	8.943055070245307E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999514745362	WITHOUT_CLASSIFICATION	4.8525463852953256E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9985093616673472	WITHOUT_CLASSIFICATION	0.0014906383326528459	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999937647984124	WITHOUT_CLASSIFICATION	6.235201587610666E-6	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999972257285721	WITHOUT_CLASSIFICATION	2.7742714278586645E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999996646726098	WITHOUT_CLASSIFICATION	3.3532739028519883E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999995238845419	WITHOUT_CLASSIFICATION	4.7611545810001616E-7	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999986434438888	WITHOUT_CLASSIFICATION	1.356556111285538E-6	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999969017892154	WITHOUT_CLASSIFICATION	3.098210784635799E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999993790177519	WITHOUT_CLASSIFICATION	6.209822481433604E-7	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999920038721394	WITHOUT_CLASSIFICATION	7.99612786062682E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999992917056231	WITHOUT_CLASSIFICATION	7.082943768786114E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996136063208	WITHOUT_CLASSIFICATION	3.8639367926227026E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997986629501	WITHOUT_CLASSIFICATION	2.0133704992820294E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999060817435	WITHOUT_CLASSIFICATION	9.39182564177997E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999979959847843	WITHOUT_CLASSIFICATION	2.0040152157378017E-6	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999997626278229	WITHOUT_CLASSIFICATION	2.3737217710612457E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999993472082441	WITHOUT_CLASSIFICATION	6.527917559502213E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999641575466	WITHOUT_CLASSIFICATION	3.5842453400069655E-8	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999995039475045	WITHOUT_CLASSIFICATION	4.960524954952636E-7	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999994455699422	WITHOUT_CLASSIFICATION	5.544300578139428E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999965957803801	WITHOUT_CLASSIFICATION	3.4042196198114593E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999965957803801	WITHOUT_CLASSIFICATION	3.4042196198114593E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999585679776	WITHOUT_CLASSIFICATION	4.1432022292046164E-8	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999585679776	WITHOUT_CLASSIFICATION	4.1432022292046164E-8	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9999974188921023	WITHOUT_CLASSIFICATION	2.5811078977143307E-6	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999997986629501	WITHOUT_CLASSIFICATION	2.0133704992820294E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999995781782272	WITHOUT_CLASSIFICATION	4.2182177287738534E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999862790558	WITHOUT_CLASSIFICATION	1.3720944112181884E-8	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999983314311008	WITHOUT_CLASSIFICATION	1.6685688991054399E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999983314311008	WITHOUT_CLASSIFICATION	1.6685688991054399E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998647096402	WITHOUT_CLASSIFICATION	1.3529035986331776E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999953402560376	WITHOUT_CLASSIFICATION	4.6597439623799185E-6	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999998930541799	WITHOUT_CLASSIFICATION	1.0694582002172588E-7	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999970796582696	WITHOUT_CLASSIFICATION	2.9203417305246033E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999993419006296	WITHOUT_CLASSIFICATION	6.5809937051893E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999997948423175	WITHOUT_CLASSIFICATION	2.051576825723197E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999859142363644	WITHOUT_CLASSIFICATION	1.4085763635537908E-5	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999987678375853	WITHOUT_CLASSIFICATION	1.232162414695728E-5	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.9999975896297341	WITHOUT_CLASSIFICATION	2.410370265876291E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999564183404	WITHOUT_CLASSIFICATION	4.358165956780045E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999993058298967	WITHOUT_CLASSIFICATION	6.941701033581801E-7	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999991313544414	WITHOUT_CLASSIFICATION	8.686455587016677E-7	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999994391215532	WITHOUT_CLASSIFICATION	5.608784467977345E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.999994772254345	WITHOUT_CLASSIFICATION	5.227745655069246E-6	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999984133771176	WITHOUT_CLASSIFICATION	1.5866228823970155E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999999741380388	WITHOUT_CLASSIFICATION	2.5861961189301694E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972049796012	WITHOUT_CLASSIFICATION	2.795020398780578E-6	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999999988616228	WITHOUT_CLASSIFICATION	1.1383772096780924E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998555780748	WITHOUT_CLASSIFICATION	1.4442192517742597E-7	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999976014446	WITHOUT_CLASSIFICATION	2.3985552880291387E-9	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999853991537	WITHOUT_CLASSIFICATION	1.4600846344683389E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999989121245222	WITHOUT_CLASSIFICATION	1.0878754778353292E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999701338602	WITHOUT_CLASSIFICATION	2.986613989481178E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999886373345	WITHOUT_CLASSIFICATION	1.1362665469985176E-8	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997747608423138	WITHOUT_CLASSIFICATION	2.252391576862108E-4	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999393460053	WITHOUT_CLASSIFICATION	6.06539947020896E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999924913514787	WITHOUT_CLASSIFICATION	7.508648521274296E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999992153165217	WITHOUT_CLASSIFICATION	7.846834782785753E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996846303764	WITHOUT_CLASSIFICATION	3.1536962364958063E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985353426912	WITHOUT_CLASSIFICATION	1.4646573087496384E-6	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992986602138	WITHOUT_CLASSIFICATION	7.013397862208522E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999997450711774	WITHOUT_CLASSIFICATION	2.549288225979778E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.999997450711774	WITHOUT_CLASSIFICATION	2.549288225979778E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994863134715	WITHOUT_CLASSIFICATION	5.136865285473255E-7	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999992256705071	WITHOUT_CLASSIFICATION	7.7432949289266E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999965308568762	WITHOUT_CLASSIFICATION	3.4691431238013467E-6	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999965308568762	WITHOUT_CLASSIFICATION	3.4691431238013467E-6	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997698683658	WITHOUT_CLASSIFICATION	2.3013163418961752E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999995840732105	WITHOUT_CLASSIFICATION	4.159267894587358E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999956274124026	WITHOUT_CLASSIFICATION	4.372587597474399E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996319757136	WITHOUT_CLASSIFICATION	3.6802428631863343E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999963375056532	WITHOUT_CLASSIFICATION	3.6624943469631236E-6	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999892752239928	WITHOUT_CLASSIFICATION	1.0724776007094955E-5	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999994609811126	WITHOUT_CLASSIFICATION	5.390188873917431E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999603696134	WITHOUT_CLASSIFICATION	3.9630386585452605E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997273879192	WITHOUT_CLASSIFICATION	2.726120808562546E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997273879192	WITHOUT_CLASSIFICATION	2.726120808562546E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999984903916	WITHOUT_CLASSIFICATION	1.5096085094967416E-9	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999995604336314	WITHOUT_CLASSIFICATION	4.395663686083135E-7	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999995604336314	WITHOUT_CLASSIFICATION	4.395663686083135E-7	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998991266817	WITHOUT_CLASSIFICATION	1.0087331815981027E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999994906991699	WITHOUT_CLASSIFICATION	5.093008300655735E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9916912873242768	WITHOUT_CLASSIFICATION	0.008308712675723222	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999188672223	WITHOUT_CLASSIFICATION	8.113277767649733E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999808857891	WITHOUT_CLASSIFICATION	1.9114210900698985E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999993104464227	WITHOUT_CLASSIFICATION	6.895535772170677E-7	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999854198970236	WITHOUT_CLASSIFICATION	1.4580102976284361E-5	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999425151148826	WITHOUT_CLASSIFICATION	5.748488511740815E-5	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999733939803	WITHOUT_CLASSIFICATION	2.660601967856888E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999911920462485	WITHOUT_CLASSIFICATION	8.807953751462212E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999423313376	WITHOUT_CLASSIFICATION	5.7668662471737116E-8	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999996698256316	WITHOUT_CLASSIFICATION	3.3017436840427465E-7	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999881210528131	WITHOUT_CLASSIFICATION	1.1878947186870363E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999881210528131	WITHOUT_CLASSIFICATION	1.1878947186870363E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999881210528131	WITHOUT_CLASSIFICATION	1.1878947186870363E-5	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999881210528131	WITHOUT_CLASSIFICATION	1.1878947186870363E-5	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999998093506185	WITHOUT_CLASSIFICATION	1.9064938155103552E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999992019847606	WITHOUT_CLASSIFICATION	7.980152394833935E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999901917478017	WITHOUT_CLASSIFICATION	9.80825219827583E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999742641037945	WITHOUT_CLASSIFICATION	2.5735896205532366E-5	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999939268398483	WITHOUT_CLASSIFICATION	6.073160151705515E-6	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999968036417968	WITHOUT_CLASSIFICATION	3.1963582031725437E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999254752268272	WITHOUT_CLASSIFICATION	7.452477317278668E-5	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999962386878681	WITHOUT_CLASSIFICATION	3.7613121318904213E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999886386256	WITHOUT_CLASSIFICATION	1.1361374280507247E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997412998627	WITHOUT_CLASSIFICATION	2.587001373476476E-7	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999987507357982	WITHOUT_CLASSIFICATION	1.2492642017341894E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995306516236	WITHOUT_CLASSIFICATION	4.6934837629783017E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9940887285500716	WITHOUT_CLASSIFICATION	0.005911271449928461	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999538757619869	WITHOUT_CLASSIFICATION	4.612423801318184E-5	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999974984059277	WITHOUT_CLASSIFICATION	2.5015940722353714E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995306516236	WITHOUT_CLASSIFICATION	4.6934837629783017E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999627558092572	WITHOUT_CLASSIFICATION	3.724419074280403E-4	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999956554168	WITHOUT_CLASSIFICATION	4.34458324053638E-9	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999888999031	WITHOUT_CLASSIFICATION	1.1100096900896346E-7	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999906418761988	WITHOUT_CLASSIFICATION	9.358123801238218E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999997908852907	WITHOUT_CLASSIFICATION	2.091147093060915E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999986897465855	WITHOUT_CLASSIFICATION	1.3102534144644847E-6	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999992109661	WITHOUT_CLASSIFICATION	7.890339006057414E-9	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999993668527553	WITHOUT_CLASSIFICATION	6.331472448215844E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997539990982	WITHOUT_CLASSIFICATION	2.460009016917287E-7	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999766479951	WITHOUT_CLASSIFICATION	2.3352004915149382E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991030518344	WITHOUT_CLASSIFICATION	8.969481655982205E-7	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999251023028	WITHOUT_CLASSIFICATION	7.489769715244588E-8	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999952239851442	WITHOUT_CLASSIFICATION	4.776014855770955E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999658522946994	WITHOUT_CLASSIFICATION	3.414770530060375E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999505604644	WITHOUT_CLASSIFICATION	4.9439535612941236E-8	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999942250345915	WITHOUT_CLASSIFICATION	5.774965408553537E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999995982755744	WITHOUT_CLASSIFICATION	4.0172442569442983E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999286674889	WITHOUT_CLASSIFICATION	7.133251110192457E-8	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999979298440497	WITHOUT_CLASSIFICATION	2.070155950346264E-6	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999286674889	WITHOUT_CLASSIFICATION	7.133251110192457E-8	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999918032618	WITHOUT_CLASSIFICATION	8.196738239273338E-9	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999966003303585	WITHOUT_CLASSIFICATION	3.3996696415242453E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999998824217916	WITHOUT_CLASSIFICATION	1.1757820837700392E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999875526541441	WITHOUT_CLASSIFICATION	1.2447345855921437E-5	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999995982755744	WITHOUT_CLASSIFICATION	4.0172442569442983E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999979298440497	WITHOUT_CLASSIFICATION	2.070155950346264E-6	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999918032618	WITHOUT_CLASSIFICATION	8.196738239273338E-9	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999635561801	WITHOUT_CLASSIFICATION	3.6443819797142565E-8	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999995672269323	WITHOUT_CLASSIFICATION	4.32773067728905E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.99999217994666	WITHOUT_CLASSIFICATION	7.820053340032211E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999958027697684	WITHOUT_CLASSIFICATION	4.197230231580622E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999999325361649	WITHOUT_CLASSIFICATION	6.746383502827049E-8	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998613200691	WITHOUT_CLASSIFICATION	1.3867993084776362E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972049796012	WITHOUT_CLASSIFICATION	2.795020398780578E-6	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999966003303585	WITHOUT_CLASSIFICATION	3.3996696415242453E-6	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998448627101	WITHOUT_CLASSIFICATION	1.551372899590906E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999998753891898	WITHOUT_CLASSIFICATION	1.2461081020918844E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999161113905	WITHOUT_CLASSIFICATION	8.388860951780318E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972049796012	WITHOUT_CLASSIFICATION	2.795020398780578E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999995291197105	WITHOUT_CLASSIFICATION	4.7088028960396915E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972049796012	WITHOUT_CLASSIFICATION	2.795020398780578E-6	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997168741576	WITHOUT_CLASSIFICATION	2.8312584245369157E-7	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991476560115	WITHOUT_CLASSIFICATION	8.523439883838364E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999933109999968	WITHOUT_CLASSIFICATION	6.689000003204037E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999590182872	WITHOUT_CLASSIFICATION	4.0981712821999514E-8	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998938078463	WITHOUT_CLASSIFICATION	1.0619215369881147E-7	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999994189251158	WITHOUT_CLASSIFICATION	5.810748841647259E-7	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999993136768071	WITHOUT_CLASSIFICATION	6.863231928984039E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999957528772385	WITHOUT_CLASSIFICATION	4.24712276150628E-6	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999963399508415	WITHOUT_CLASSIFICATION	3.6600491585052796E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999961584237076	WITHOUT_CLASSIFICATION	3.841576292392477E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999501871417179	WITHOUT_CLASSIFICATION	4.981285828213778E-5	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999996121783741	WITHOUT_CLASSIFICATION	3.8782162594106674E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.9916912873242768	WITHOUT_CLASSIFICATION	0.008308712675723222	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999987306924048	WITHOUT_CLASSIFICATION	1.2693075951988155E-5	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999831527939108	WITHOUT_CLASSIFICATION	1.6847206089144705E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999916100120945	WITHOUT_CLASSIFICATION	8.389987905545054E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998898474439329	WITHOUT_CLASSIFICATION	1.1015255606707318E-4	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999192619194	WITHOUT_CLASSIFICATION	8.073808055184425E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999735896901	WITHOUT_CLASSIFICATION	2.641030989506562E-7	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999941726817	WITHOUT_CLASSIFICATION	5.82731823449393E-9	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999857012152317	WITHOUT_CLASSIFICATION	1.4298784768321696E-5	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999096146422	WITHOUT_CLASSIFICATION	9.038535772200297E-8	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999997036181713	WITHOUT_CLASSIFICATION	2.96381828739746E-7	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9894438481544789	WITHOUT_CLASSIFICATION	0.010556151845520988	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999648637894414	WITHOUT_CLASSIFICATION	3.5136210558563454E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999870049357616	WITHOUT_CLASSIFICATION	1.2995064238278268E-5	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999905106155251	WITHOUT_CLASSIFICATION	9.489384474861912E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999980931464156	WITHOUT_CLASSIFICATION	1.9068535843701022E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999373368914825	WITHOUT_CLASSIFICATION	6.26631085175194E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999994765668455	WITHOUT_CLASSIFICATION	5.234331544316066E-7	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999892062854	WITHOUT_CLASSIFICATION	1.0793714569089518E-8	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999999780954099	WITHOUT_CLASSIFICATION	2.1904590108648488E-8	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999726114381541	WITHOUT_CLASSIFICATION	2.7388561845874342E-5	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999650282706284	WITHOUT_CLASSIFICATION	3.4971729371674644E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9950012392992557	WITHOUT_CLASSIFICATION	0.0049987607007442635	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999891780009925	WITHOUT_CLASSIFICATION	1.082199900760764E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999989846929777	WITHOUT_CLASSIFICATION	1.0153070223703996E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999691506785557	WITHOUT_CLASSIFICATION	3.084932144419416E-5	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997921077615396	WITHOUT_CLASSIFICATION	2.0789223846047952E-4	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999994658231841	WITHOUT_CLASSIFICATION	5.341768157719012E-7	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9890698575690162	WITHOUT_CLASSIFICATION	0.010930142430983695	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999376135082	WITHOUT_CLASSIFICATION	6.238649181973506E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999974503162602	WITHOUT_CLASSIFICATION	2.549683739832627E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999712262692533	WITHOUT_CLASSIFICATION	2.877373074676928E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999712262692533	WITHOUT_CLASSIFICATION	2.877373074676928E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999994598746903	WITHOUT_CLASSIFICATION	5.401253097059574E-7	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999957528772385	WITHOUT_CLASSIFICATION	4.24712276150628E-6	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999990484577023	WITHOUT_CLASSIFICATION	9.515422977130237E-7	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999930180527271	WITHOUT_CLASSIFICATION	6.981947272899873E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999932547285	WITHOUT_CLASSIFICATION	6.745271380094228E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.99999970109987	WITHOUT_CLASSIFICATION	2.989001299907571E-7	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999919931808617	WITHOUT_CLASSIFICATION	8.006819138173869E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9998058060025558	WITHOUT_CLASSIFICATION	1.94193997444204E-4	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999659384819608	WITHOUT_CLASSIFICATION	3.406151803926522E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999975759916909	WITHOUT_CLASSIFICATION	2.424008309127304E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999152192972	WITHOUT_CLASSIFICATION	8.478070274965226E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999676226572	WITHOUT_CLASSIFICATION	3.2377342829954985E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998642970674	WITHOUT_CLASSIFICATION	1.3570293248001886E-7	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999896912966767	WITHOUT_CLASSIFICATION	1.030870332326839E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997746420373	WITHOUT_CLASSIFICATION	2.2535796269540486E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998149439256	WITHOUT_CLASSIFICATION	1.8505607439967235E-7	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998587603202	WITHOUT_CLASSIFICATION	1.4123967983284743E-7	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999799414944	WITHOUT_CLASSIFICATION	2.0058505605702698E-8	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999285893183	WITHOUT_CLASSIFICATION	7.141068175275709E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999893924092	WITHOUT_CLASSIFICATION	1.0607590719114142E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999990272425	WITHOUT_CLASSIFICATION	9.72757538536449E-10	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999998222980495	WITHOUT_CLASSIFICATION	1.7770195053072563E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997957215724	WITHOUT_CLASSIFICATION	2.0427842758848708E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999030261252	WITHOUT_CLASSIFICATION	9.697387480808664E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9890698575690162	WITHOUT_CLASSIFICATION	0.010930142430983695	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999458161691	WITHOUT_CLASSIFICATION	5.418383081153261E-8	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999999981141923	WITHOUT_CLASSIFICATION	1.885807701016539E-8	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999591315963	WITHOUT_CLASSIFICATION	4.0868403719141976E-8	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999917631736454	WITHOUT_CLASSIFICATION	8.23682635471303E-6	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999997745117396	WITHOUT_CLASSIFICATION	2.254882603870974E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997295971699	WITHOUT_CLASSIFICATION	2.704028300361278E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999893390294955	WITHOUT_CLASSIFICATION	1.0660970504497119E-4	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999990106982767	WITHOUT_CLASSIFICATION	9.893017234068727E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997407686295	WITHOUT_CLASSIFICATION	2.592313704300206E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999996839091556	WITHOUT_CLASSIFICATION	3.1609084435231034E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999993466292834	WITHOUT_CLASSIFICATION	6.533707167172735E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996869859421752	WITHOUT_CLASSIFICATION	3.13014057824816E-4	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999681863627521	WITHOUT_CLASSIFICATION	3.181363724787523E-5	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999997464645861	WITHOUT_CLASSIFICATION	2.5353541389631593E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997317406726	WITHOUT_CLASSIFICATION	2.6825932744570465E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999997317406726	WITHOUT_CLASSIFICATION	2.6825932744570465E-7	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999998638495814	WITHOUT_CLASSIFICATION	1.361504185640264E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999997571598663	WITHOUT_CLASSIFICATION	2.428401336220981E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999974294751571	WITHOUT_CLASSIFICATION	2.5705248428073426E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999974294751571	WITHOUT_CLASSIFICATION	2.5705248428073426E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999738278162	WITHOUT_CLASSIFICATION	2.617218373715633E-8	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999990406823013	WITHOUT_CLASSIFICATION	9.593176987575938E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999733977161	WITHOUT_CLASSIFICATION	2.6602283872266522E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999982877369096	WITHOUT_CLASSIFICATION	1.7122630903730096E-6	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999968135795431	WITHOUT_CLASSIFICATION	3.186420456954838E-6	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996278863126	WITHOUT_CLASSIFICATION	3.7211368734658925E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999718738577	WITHOUT_CLASSIFICATION	2.8126142400398707E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999718738577	WITHOUT_CLASSIFICATION	2.8126142400398707E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992412219849	WITHOUT_CLASSIFICATION	7.587780151363203E-7	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995242159265	WITHOUT_CLASSIFICATION	4.757840734336638E-7	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999656724143151	WITHOUT_CLASSIFICATION	3.432758568498267E-5	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999497762744	WITHOUT_CLASSIFICATION	5.0223725582960674E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999497762744	WITHOUT_CLASSIFICATION	5.0223725582960674E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999997682024888	WITHOUT_CLASSIFICATION	2.3179751128607232E-7	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999356236055	WITHOUT_CLASSIFICATION	6.437639446198821E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999428949057	WITHOUT_CLASSIFICATION	5.710509429375532E-7	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.999999532901235	WITHOUT_CLASSIFICATION	4.6709876489982545E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999990411948583	WITHOUT_CLASSIFICATION	9.58805141671072E-7	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994872819885	WITHOUT_CLASSIFICATION	5.127180115353161E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999363505302	WITHOUT_CLASSIFICATION	6.364946980388689E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.999999870151532	WITHOUT_CLASSIFICATION	1.2984846790342868E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999811954009	WITHOUT_CLASSIFICATION	1.8804599089765532E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999978714121905	WITHOUT_CLASSIFICATION	2.1285878094943513E-6	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999994708654075	WITHOUT_CLASSIFICATION	5.291345925180214E-7	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999994928322441	WITHOUT_CLASSIFICATION	5.071677558866007E-7	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.999876147347827	WITHOUT_CLASSIFICATION	1.238526521729974E-4	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999998444028205	WITHOUT_CLASSIFICATION	1.5559717949063434E-6	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.999998125050976	WITHOUT_CLASSIFICATION	1.8749490240069344E-6	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999993251700041	WITHOUT_CLASSIFICATION	6.74829995785413E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999852753126	WITHOUT_CLASSIFICATION	1.4724687437174841E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999999665877704	WITHOUT_CLASSIFICATION	3.341222960363315E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999996708505914	WITHOUT_CLASSIFICATION	3.29149408616428E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999988422369167	WITHOUT_CLASSIFICATION	1.1577630833243598E-6	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999997453851545	WITHOUT_CLASSIFICATION	2.546148455707674E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999999074511167	WITHOUT_CLASSIFICATION	9.254888329815694E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999731703389912	WITHOUT_CLASSIFICATION	2.6829661008779593E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998316342949068	WITHOUT_CLASSIFICATION	1.6836570509306262E-4	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999614562793252	WITHOUT_CLASSIFICATION	3.854372067474701E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999995945220769	WITHOUT_CLASSIFICATION	4.0547792314852557E-7	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999995220261845	WITHOUT_CLASSIFICATION	4.779738155447201E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999666310896719	WITHOUT_CLASSIFICATION	3.33689103280645E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999954100648	WITHOUT_CLASSIFICATION	4.589935221869421E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999828770084	WITHOUT_CLASSIFICATION	1.7122991683640587E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999573640208	WITHOUT_CLASSIFICATION	4.26359792693251E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999376013908	WITHOUT_CLASSIFICATION	6.239860919812688E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999692937497	WITHOUT_CLASSIFICATION	3.070625028777517E-7	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999955780893273	WITHOUT_CLASSIFICATION	4.4219106727560164E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999999611431422	WITHOUT_CLASSIFICATION	3.885685781506056E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999622468405233	WITHOUT_CLASSIFICATION	3.7753159476809216E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999717596647775	WITHOUT_CLASSIFICATION	2.8240335222569278E-5	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999973446735269	WITHOUT_CLASSIFICATION	2.6553264730851793E-6	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999996850845673	WITHOUT_CLASSIFICATION	3.149154326844311E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995667396364	WITHOUT_CLASSIFICATION	4.332603636588983E-7	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998580803102	WITHOUT_CLASSIFICATION	1.419196897842151E-7	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999999776472426	WITHOUT_CLASSIFICATION	2.2352757398983823E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999997196017987	WITHOUT_CLASSIFICATION	2.8039820128883716E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999364369884	WITHOUT_CLASSIFICATION	6.356301166575478E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999993739453816	WITHOUT_CLASSIFICATION	6.260546183292647E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997961912971	WITHOUT_CLASSIFICATION	2.0380870291459552E-7	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999996400726213	WITHOUT_CLASSIFICATION	3.599273786712035E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999915135118788	WITHOUT_CLASSIFICATION	8.48648812133995E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999998385448305	WITHOUT_CLASSIFICATION	1.6145516950045247E-7	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999944510562746	WITHOUT_CLASSIFICATION	5.5489437253939004E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999991582147729	WITHOUT_CLASSIFICATION	8.417852270429453E-7	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999116267808	WITHOUT_CLASSIFICATION	8.837321913832163E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999996304524356	WITHOUT_CLASSIFICATION	3.695475644002485E-6	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999476536642	WITHOUT_CLASSIFICATION	5.234633590925116E-8	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999997803143165	WITHOUT_CLASSIFICATION	2.196856834158254E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996534415252	WITHOUT_CLASSIFICATION	3.4655847482511017E-7	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999131331009	WITHOUT_CLASSIFICATION	8.68668990419384E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999758334341	WITHOUT_CLASSIFICATION	2.4166565906496086E-7	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999998610417283	WITHOUT_CLASSIFICATION	1.3895827163369774E-7	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998197868845862	WITHOUT_CLASSIFICATION	1.8021311541389446E-4	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995904067258	WITHOUT_CLASSIFICATION	4.0959327424146143E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999995904067258	WITHOUT_CLASSIFICATION	4.0959327424146143E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9997243494899186	WITHOUT_CLASSIFICATION	2.756505100814299E-4	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9996957117855481	WITHOUT_CLASSIFICATION	3.042882144518334E-4	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999379311234	WITHOUT_CLASSIFICATION	6.20688766573388E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999998163125806	WITHOUT_CLASSIFICATION	1.8368741950094622E-7	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999989308139798	WITHOUT_CLASSIFICATION	1.0691860201052038E-6	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999923732196623	WITHOUT_CLASSIFICATION	7.626780337765902E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999061800961	WITHOUT_CLASSIFICATION	9.381990390097284E-7	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999718932794	WITHOUT_CLASSIFICATION	2.810672051695832E-8	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999990107582516	WITHOUT_CLASSIFICATION	9.892417484362857E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999929497973191	WITHOUT_CLASSIFICATION	7.050202680861091E-6	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999171741908	WITHOUT_CLASSIFICATION	8.282580928859795E-8	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999944104988381	WITHOUT_CLASSIFICATION	5.58950116187325E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997883026588	WITHOUT_CLASSIFICATION	2.11697341332059E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999883458629	WITHOUT_CLASSIFICATION	1.165413706096979E-8	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992513658397	WITHOUT_CLASSIFICATION	7.48634160381413E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992513658397	WITHOUT_CLASSIFICATION	7.48634160381413E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999270168285	WITHOUT_CLASSIFICATION	7.298317157331626E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999979344826228	WITHOUT_CLASSIFICATION	2.0655173772313033E-6	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999992416023117	WITHOUT_CLASSIFICATION	7.583976882272919E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999910895758	WITHOUT_CLASSIFICATION	8.910424196574342E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997916758363	WITHOUT_CLASSIFICATION	2.0832416374396152E-7	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933031053482	WITHOUT_CLASSIFICATION	6.6968946518783685E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.999996601822973	WITHOUT_CLASSIFICATION	3.398177026975297E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999834205065574	WITHOUT_CLASSIFICATION	1.6579493442631145E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999896558458	WITHOUT_CLASSIFICATION	1.0344154212470968E-8	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999972370300086	WITHOUT_CLASSIFICATION	2.7629699913276863E-6	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999945670084	WITHOUT_CLASSIFICATION	5.432991552362335E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999951441400013	WITHOUT_CLASSIFICATION	4.855859998649724E-6	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999990554367	WITHOUT_CLASSIFICATION	9.445633036919676E-9	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999993317201841	WITHOUT_CLASSIFICATION	6.682798158408538E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999887113067802	WITHOUT_CLASSIFICATION	1.1288693219680382E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997957493066	WITHOUT_CLASSIFICATION	2.0425069332379202E-7	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999510123930664	WITHOUT_CLASSIFICATION	4.898760693372281E-5	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999981811028023	WITHOUT_CLASSIFICATION	1.8188971978338912E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999998268527653	WITHOUT_CLASSIFICATION	1.7314723469158023E-7	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999925367813	WITHOUT_CLASSIFICATION	7.46321879129021E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999580883845	WITHOUT_CLASSIFICATION	4.1911615544337906E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999810165786	WITHOUT_CLASSIFICATION	1.8983421292629224E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999994755061854	WITHOUT_CLASSIFICATION	5.244938145556645E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999692120782587	WITHOUT_CLASSIFICATION	3.0787921741297155E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999779411948094	WITHOUT_CLASSIFICATION	2.2058805190627506E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999982869887353	WITHOUT_CLASSIFICATION	1.7130112647120431E-6	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999673197352	WITHOUT_CLASSIFICATION	3.268026488507409E-8	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999995880927268	WITHOUT_CLASSIFICATION	4.119072731215769E-7	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999913772222225	WITHOUT_CLASSIFICATION	8.622777777424154E-6	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999989789139389	WITHOUT_CLASSIFICATION	1.0210860611957622E-6	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999486089059862	WITHOUT_CLASSIFICATION	5.139109401381512E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999996260965042	WITHOUT_CLASSIFICATION	3.739034958360718E-7	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999968093032	WITHOUT_CLASSIFICATION	3.190696837533773E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998134112598	WITHOUT_CLASSIFICATION	1.865887402649957E-7	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999996361435634	WITHOUT_CLASSIFICATION	3.6385643655132503E-7	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999992114886687	WITHOUT_CLASSIFICATION	7.885113313474982E-7	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999978855492	WITHOUT_CLASSIFICATION	2.114450851629625E-9	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999943871359941	WITHOUT_CLASSIFICATION	5.6128640058761275E-6	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999969350910208	WITHOUT_CLASSIFICATION	3.0649089790937718E-6	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999996568719228	WITHOUT_CLASSIFICATION	3.4312807712272596E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998745062352	WITHOUT_CLASSIFICATION	1.254937647862619E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999998745062352	WITHOUT_CLASSIFICATION	1.254937647862619E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999995058814557	WITHOUT_CLASSIFICATION	4.941185442967753E-7	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999994793862634	WITHOUT_CLASSIFICATION	5.206137365510448E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999682989804	WITHOUT_CLASSIFICATION	3.1701019646383974E-8	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999042897539	WITHOUT_CLASSIFICATION	9.571024598448483E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999739269997	WITHOUT_CLASSIFICATION	2.607300032403367E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999711679656	WITHOUT_CLASSIFICATION	2.883203439431359E-8	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999995235170386	WITHOUT_CLASSIFICATION	4.764829615003455E-7	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999955483859129	WITHOUT_CLASSIFICATION	4.451614087120581E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999927023514	WITHOUT_CLASSIFICATION	7.2976486069633E-9	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984435243536	WITHOUT_CLASSIFICATION	1.556475646368328E-6	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982688705562	WITHOUT_CLASSIFICATION	1.7311294438069833E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999556526643782	WITHOUT_CLASSIFICATION	4.434733562165303E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999742712645298	WITHOUT_CLASSIFICATION	2.5728735470313352E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999821167173	WITHOUT_CLASSIFICATION	1.7883282757793314E-8	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999989695130358	WITHOUT_CLASSIFICATION	1.0304869641726374E-6	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999995508813593	WITHOUT_CLASSIFICATION	4.4911864077885244E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999746891928	WITHOUT_CLASSIFICATION	2.5310807123766292E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999990310935	WITHOUT_CLASSIFICATION	9.689065774620814E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999260720528	WITHOUT_CLASSIFICATION	7.392794727918434E-8	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997428794327	WITHOUT_CLASSIFICATION	2.5712056729940434E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999582365304	WITHOUT_CLASSIFICATION	4.1763469613894723E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999997906305099	WITHOUT_CLASSIFICATION	2.0936949001215347E-7	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999937582496053	WITHOUT_CLASSIFICATION	6.241750394603985E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999913568930928	WITHOUT_CLASSIFICATION	8.643106907201182E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999981829834	WITHOUT_CLASSIFICATION	1.8170165999566326E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999945794788189	WITHOUT_CLASSIFICATION	5.420521181109095E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999230234156	WITHOUT_CLASSIFICATION	7.697658452195606E-8	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999976679692599	WITHOUT_CLASSIFICATION	2.3320307401057127E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999985395613343	WITHOUT_CLASSIFICATION	1.4604386656321928E-6	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999998849503751	WITHOUT_CLASSIFICATION	1.1504962499035825E-7	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999748681	WITHOUT_CLASSIFICATION	2.5131900019201014E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999893896366	WITHOUT_CLASSIFICATION	1.0610363400673818E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998670246025	WITHOUT_CLASSIFICATION	1.329753973601024E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999522754852	WITHOUT_CLASSIFICATION	4.7724514712818277E-8	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999991237199396	WITHOUT_CLASSIFICATION	8.762800603202321E-7	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999999689534406	WITHOUT_CLASSIFICATION	3.104655940089072E-7	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999815069205	WITHOUT_CLASSIFICATION	1.8493079548154104E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999869947785	WITHOUT_CLASSIFICATION	1.3005221407763673E-8	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999955211134006	WITHOUT_CLASSIFICATION	4.478886599342195E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999974280331467	WITHOUT_CLASSIFICATION	2.5719668533786856E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999945084507568	WITHOUT_CLASSIFICATION	5.491549243283428E-6	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999636037885	WITHOUT_CLASSIFICATION	3.639621142097571E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999886744858	WITHOUT_CLASSIFICATION	1.132551412456536E-8	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999876287335348	WITHOUT_CLASSIFICATION	1.2371266465289738E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999515528296	WITHOUT_CLASSIFICATION	4.844717041269188E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999986792328944	WITHOUT_CLASSIFICATION	1.320767105602842E-6	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999960211551467	WITHOUT_CLASSIFICATION	3.9788448532196525E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997883026588	WITHOUT_CLASSIFICATION	2.11697341332059E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999951708899573	WITHOUT_CLASSIFICATION	4.829110042743964E-6	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999992427561601	WITHOUT_CLASSIFICATION	7.572438398848376E-7	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999991846387651	WITHOUT_CLASSIFICATION	8.153612348420897E-7	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999993699054407	WITHOUT_CLASSIFICATION	6.300945593199663E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999158038715	WITHOUT_CLASSIFICATION	8.419612851981718E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999757794383	WITHOUT_CLASSIFICATION	2.4220561757635738E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999977812969372	WITHOUT_CLASSIFICATION	2.2187030628760755E-6	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999101850292572	WITHOUT_CLASSIFICATION	8.981497074281445E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996879969556	WITHOUT_CLASSIFICATION	3.1200304432193464E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999993435604959	WITHOUT_CLASSIFICATION	6.564395041112754E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997339146299	WITHOUT_CLASSIFICATION	2.660853700242467E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999970110369996	WITHOUT_CLASSIFICATION	2.9889630004001533E-6	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999939525912402	WITHOUT_CLASSIFICATION	6.047408759806078E-6	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998992499084	WITHOUT_CLASSIFICATION	1.0075009157416591E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993770996218	WITHOUT_CLASSIFICATION	6.229003781730289E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999823214942576	WITHOUT_CLASSIFICATION	1.7678505742450684E-5	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999889718496342	WITHOUT_CLASSIFICATION	1.102815036571002E-5	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999785559872	WITHOUT_CLASSIFICATION	2.1444012701390596E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999749831599721	WITHOUT_CLASSIFICATION	2.5016840027819927E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993770996218	WITHOUT_CLASSIFICATION	6.229003781730289E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.998369600919104	WITHOUT_CLASSIFICATION	0.0016303990808961407	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999979806624105	WITHOUT_CLASSIFICATION	2.01933758948559E-6	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999749061554	WITHOUT_CLASSIFICATION	2.5093844603818766E-7	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999977341628027	WITHOUT_CLASSIFICATION	2.2658371973406107E-6	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999732545771686	WITHOUT_CLASSIFICATION	2.6745422831450783E-5	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998545969128	WITHOUT_CLASSIFICATION	1.4540308731484487E-7	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999270157662	WITHOUT_CLASSIFICATION	7.29842338069414E-8	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999948995058817	WITHOUT_CLASSIFICATION	5.1004941182960806E-5	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999896716879	WITHOUT_CLASSIFICATION	1.032831209696388E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999093135234	WITHOUT_CLASSIFICATION	9.068647653762284E-8	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999991928588802	WITHOUT_CLASSIFICATION	8.071411197565804E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9995811884195879	WITHOUT_CLASSIFICATION	4.188115804121564E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999885289053	WITHOUT_CLASSIFICATION	1.1471094718693868E-8	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999823685054	WITHOUT_CLASSIFICATION	1.7631494631926184E-8	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999998997655842	WITHOUT_CLASSIFICATION	1.0023441579441397E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999030261252	WITHOUT_CLASSIFICATION	9.697387480808664E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999530856725	WITHOUT_CLASSIFICATION	4.6914327654976956E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999000785208	WITHOUT_CLASSIFICATION	9.992147924459751E-8	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999974562705282	WITHOUT_CLASSIFICATION	2.543729471887068E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999996931777511	WITHOUT_CLASSIFICATION	3.0682224890031676E-7	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999647452453	WITHOUT_CLASSIFICATION	3.525475467738842E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999400931737	WITHOUT_CLASSIFICATION	5.990682623766921E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999931979364	WITHOUT_CLASSIFICATION	6.802063579556974E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999998388086	WITHOUT_CLASSIFICATION	1.6119140114005617E-9	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999970280228	WITHOUT_CLASSIFICATION	2.971977320696338E-9	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999985425442581	WITHOUT_CLASSIFICATION	1.4574557418495373E-6	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999944845713575	WITHOUT_CLASSIFICATION	5.515428642448967E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998502237669	WITHOUT_CLASSIFICATION	1.4977623297436513E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999977657755715	WITHOUT_CLASSIFICATION	2.234224428565506E-6	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999995061636253	WITHOUT_CLASSIFICATION	4.938363747123946E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999051105801	WITHOUT_CLASSIFICATION	9.488941993198361E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999960880609363	WITHOUT_CLASSIFICATION	3.911939063692876E-6	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999992713174136	WITHOUT_CLASSIFICATION	7.286825864489663E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999935800539	WITHOUT_CLASSIFICATION	6.419946170166538E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999523556742	WITHOUT_CLASSIFICATION	4.7644325882790146E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999715858413	WITHOUT_CLASSIFICATION	2.8414158632285124E-8	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999869408141048	WITHOUT_CLASSIFICATION	1.3059185895270306E-5	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999145724342	WITHOUT_CLASSIFICATION	8.542756579678753E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999812789369	WITHOUT_CLASSIFICATION	1.8721063071009978E-8	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999995489214653	WITHOUT_CLASSIFICATION	4.510785347875821E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99999987683519	WITHOUT_CLASSIFICATION	1.2316481007641265E-7	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99999987683519	WITHOUT_CLASSIFICATION	1.2316481007641265E-7	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999847852579379	WITHOUT_CLASSIFICATION	1.5214742062122167E-5	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999228110805	WITHOUT_CLASSIFICATION	7.718891948332073E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999995245295452	WITHOUT_CLASSIFICATION	4.7547045489809444E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.9990898459545153	WITHOUT_CLASSIFICATION	9.1015404548464E-4	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996319757136	WITHOUT_CLASSIFICATION	3.6802428631863343E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999996319757136	WITHOUT_CLASSIFICATION	3.6802428631863343E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999922874853614	WITHOUT_CLASSIFICATION	7.712514638669847E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997743894775	WITHOUT_CLASSIFICATION	2.256105225300006E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9998520497592823	WITHOUT_CLASSIFICATION	1.479502407177138E-4	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998847515386835	WITHOUT_CLASSIFICATION	1.1524846131644551E-4	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999995498106271	WITHOUT_CLASSIFICATION	4.501893728853333E-7	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999989887560619	WITHOUT_CLASSIFICATION	1.0112439381599032E-6	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997196273539	WITHOUT_CLASSIFICATION	2.803726460920094E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999278036128	WITHOUT_CLASSIFICATION	7.219638721199446E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999991345311278	WITHOUT_CLASSIFICATION	8.654688722058144E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943442350192	WITHOUT_CLASSIFICATION	5.6557649808889345E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943442350192	WITHOUT_CLASSIFICATION	5.6557649808889345E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999948028004502	WITHOUT_CLASSIFICATION	5.1971995498864165E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999960314313682	WITHOUT_CLASSIFICATION	3.968568631890308E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999987978476319	WITHOUT_CLASSIFICATION	1.2021523679980284E-6	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998598682420485	WITHOUT_CLASSIFICATION	1.40131757951517E-4	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999683935649315	WITHOUT_CLASSIFICATION	3.160643506854085E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998092966834	WITHOUT_CLASSIFICATION	1.907033165774365E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858186423026	WITHOUT_CLASSIFICATION	1.4181357697336156E-5	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995837681165	WITHOUT_CLASSIFICATION	4.162318835210094E-7	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999969446700203	WITHOUT_CLASSIFICATION	3.0553299796524197E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999998259664054	WITHOUT_CLASSIFICATION	1.7403359460464081E-6	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999993557170639	WITHOUT_CLASSIFICATION	6.442829362147895E-7	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999093135234	WITHOUT_CLASSIFICATION	9.068647653762284E-8	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999986534134329	WITHOUT_CLASSIFICATION	1.3465865671296746E-6	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999425099074255	WITHOUT_CLASSIFICATION	5.749009257455093E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997669378166	WITHOUT_CLASSIFICATION	2.3306218349179045E-7	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.999999199600433	WITHOUT_CLASSIFICATION	8.003995670680883E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999661692386149	WITHOUT_CLASSIFICATION	3.383076138516125E-5	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999956979535356	WITHOUT_CLASSIFICATION	4.302046464449372E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999734998595441	WITHOUT_CLASSIFICATION	2.650014045594999E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999501791434	WITHOUT_CLASSIFICATION	4.982085660043756E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995615704964	WITHOUT_CLASSIFICATION	4.384295036320665E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999984664743704	WITHOUT_CLASSIFICATION	1.5335256295491098E-6	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999984664743704	WITHOUT_CLASSIFICATION	1.5335256295491098E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995306516236	WITHOUT_CLASSIFICATION	4.6934837629783017E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999999077649	WITHOUT_CLASSIFICATION	9.223508594601259E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999509924059987	WITHOUT_CLASSIFICATION	4.900759400125056E-5	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999999796584006	WITHOUT_CLASSIFICATION	2.0341599400225573E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999997074998604	WITHOUT_CLASSIFICATION	2.925001395507604E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999110553426	WITHOUT_CLASSIFICATION	8.894465741216505E-8	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999505604644	WITHOUT_CLASSIFICATION	4.9439535612941236E-8	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998881253136	WITHOUT_CLASSIFICATION	1.1187468648330938E-7	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999635561801	WITHOUT_CLASSIFICATION	3.6443819797142565E-8	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970135474057	WITHOUT_CLASSIFICATION	2.9864525943591618E-6	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972049796012	WITHOUT_CLASSIFICATION	2.795020398780578E-6	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999944076947372	WITHOUT_CLASSIFICATION	5.59230526278861E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998967762809	WITHOUT_CLASSIFICATION	1.0322371913430908E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996854679811	WITHOUT_CLASSIFICATION	3.1453201887683486E-7	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999993014954582	WITHOUT_CLASSIFICATION	6.985045416848142E-7	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999341693191	WITHOUT_CLASSIFICATION	6.583068088998415E-8	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998177608129	WITHOUT_CLASSIFICATION	1.822391871226877E-7	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999965225916385	WITHOUT_CLASSIFICATION	3.4774083616137437E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999984211389532	WITHOUT_CLASSIFICATION	1.5788610467944104E-6	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999998336998837	WITHOUT_CLASSIFICATION	1.6630011630825555E-6	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999522069504	WITHOUT_CLASSIFICATION	4.779304961914486E-8	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999963449419303	WITHOUT_CLASSIFICATION	3.655058069601608E-6	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999428949057	WITHOUT_CLASSIFICATION	5.710509429375532E-7	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998660743838	WITHOUT_CLASSIFICATION	1.3392561620753627E-7	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999646269054	WITHOUT_CLASSIFICATION	3.537309446151991E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999646269054	WITHOUT_CLASSIFICATION	3.537309446151991E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999994969033397	WITHOUT_CLASSIFICATION	5.030966603590637E-7	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999989278752173	WITHOUT_CLASSIFICATION	1.072124782773584E-6	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999998941103022	WITHOUT_CLASSIFICATION	1.0588969780578037E-7	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999997232837011	WITHOUT_CLASSIFICATION	2.7671629884570853E-7	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998095845594	WITHOUT_CLASSIFICATION	1.904154406895679E-7	TEST
