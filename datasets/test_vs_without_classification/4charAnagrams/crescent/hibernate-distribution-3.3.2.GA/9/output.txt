//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991684328326078	WITHOUT_CLASSIFICATION	8.315671673923179E-4	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999872501785413	WITHOUT_CLASSIFICATION	1.27498214586905E-5	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395173906	WITHOUT_CLASSIFICATION	6.048260939931964E-8	TEST
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999994194948396	WITHOUT_CLASSIFICATION	5.805051604346537E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412484974	WITHOUT_CLASSIFICATION	5.875150261766822E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412484974	WITHOUT_CLASSIFICATION	5.875150261766822E-8	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999625004167	WITHOUT_CLASSIFICATION	3.7499583419441346E-8	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998159523884	WITHOUT_CLASSIFICATION	1.8404761161187982E-7	TEST
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999982126090519	WITHOUT_CLASSIFICATION	1.7873909481465505E-6	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759148573	WITHOUT_CLASSIFICATION	2.4085142618966606E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.999999815937514	WITHOUT_CLASSIFICATION	1.840624860468772E-7	TEST
// double	WITHOUT_CLASSIFICATION	0.999999815937514	WITHOUT_CLASSIFICATION	1.840624860468772E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807398537	WITHOUT_CLASSIFICATION	7.192601462784271E-7	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999901060788	WITHOUT_CLASSIFICATION	9.893921283586666E-9	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999999781422029	WITHOUT_CLASSIFICATION	2.1857797211120296E-8	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990453708796	WITHOUT_CLASSIFICATION	9.546291204278426E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999679839247	WITHOUT_CLASSIFICATION	3.201607536053606E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855683282	WITHOUT_CLASSIFICATION	1.0144316717555394E-6	TEST
// ROW ID	WITHOUT_CLASSIFICATION	0.9999973752250547	WITHOUT_CLASSIFICATION	2.6247749453184004E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999974569255035	WITHOUT_CLASSIFICATION	2.5430744964272537E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880494686	WITHOUT_CLASSIFICATION	2.8119505314533576E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734823392886	WITHOUT_CLASSIFICATION	1.2651766071125086E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999988925338253	WITHOUT_CLASSIFICATION	1.1074661747294803E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999988135325867	WITHOUT_CLASSIFICATION	1.1864674133595719E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999672169249	WITHOUT_CLASSIFICATION	3.2783075188585305E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454203869	WITHOUT_CLASSIFICATION	1.8545796131131251E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454203869	WITHOUT_CLASSIFICATION	1.8545796131131251E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.99999992816837	WITHOUT_CLASSIFICATION	7.183162996233845E-8	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999978441733212	WITHOUT_CLASSIFICATION	2.155826678878802E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999869590991	WITHOUT_CLASSIFICATION	1.3040900925934838E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999841723309	WITHOUT_CLASSIFICATION	1.5827669003712924E-8	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999996817115312	WITHOUT_CLASSIFICATION	3.1828846881480274E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.5438926243151708	WITHOUT_CLASSIFICATION	0.45610737568482934	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
/**	WITHOUT_CLASSIFICATION	0.5438926243151708	WITHOUT_CLASSIFICATION	0.45610737568482934	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998030777382	WITHOUT_CLASSIFICATION	1.96922261777354E-7	TEST
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999998412710986	WITHOUT_CLASSIFICATION	1.5872890139430167E-6	TEST
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999965926152	WITHOUT_CLASSIFICATION	3.4073849466780226E-9	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993500007852	WITHOUT_CLASSIFICATION	6.499992147807884E-7	TEST
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.99999998015068	WITHOUT_CLASSIFICATION	1.984931994949468E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999291911687	WITHOUT_CLASSIFICATION	7.080883130297102E-7	TEST
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993184125491	WITHOUT_CLASSIFICATION	6.815874508979479E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999713014102	WITHOUT_CLASSIFICATION	2.8698589817649373E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999948822518987	WITHOUT_CLASSIFICATION	5.1177481012982725E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999986682737	WITHOUT_CLASSIFICATION	1.3317263028342838E-8	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995222608374	WITHOUT_CLASSIFICATION	4.777391626742602E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999948822518987	WITHOUT_CLASSIFICATION	5.1177481012982725E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999995222608374	WITHOUT_CLASSIFICATION	4.777391626742602E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995190617803	WITHOUT_CLASSIFICATION	4.809382196974596E-7	TEST
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.997624698931861	WITHOUT_CLASSIFICATION	0.0023753010681390307	TEST
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993950209066	WITHOUT_CLASSIFICATION	6.049790933470328E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996677789073	WITHOUT_CLASSIFICATION	3.3222109264011183E-7	TEST
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999985317563209	WITHOUT_CLASSIFICATION	1.4682436790984127E-6	TEST
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999862169371476	WITHOUT_CLASSIFICATION	1.3783062852501293E-5	TEST
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999239572809311	WITHOUT_CLASSIFICATION	7.604271906889682E-5	TEST
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999996903454074	WITHOUT_CLASSIFICATION	3.096545926612881E-7	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998280741105	WITHOUT_CLASSIFICATION	1.7192588955723338E-7	TEST
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999865419098312	WITHOUT_CLASSIFICATION	1.3458090168952592E-5	TEST
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999994750616998	WITHOUT_CLASSIFICATION	5.249383001313685E-7	TEST
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999999517673118	WITHOUT_CLASSIFICATION	4.823268819062398E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999914992019	WITHOUT_CLASSIFICATION	8.50079808949437E-9	TEST
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999999718310675	WITHOUT_CLASSIFICATION	2.816893252281626E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999999885800109	WITHOUT_CLASSIFICATION	1.1419989139319199E-8	TEST
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999972877971186	WITHOUT_CLASSIFICATION	2.7122028815056548E-6	TEST
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999890321817	WITHOUT_CLASSIFICATION	1.0967818343558018E-8	TEST
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999999981506804	WITHOUT_CLASSIFICATION	1.8493196022253923E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999367780762	WITHOUT_CLASSIFICATION	6.322192385325836E-8	TEST
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999520978153	WITHOUT_CLASSIFICATION	4.7902184780765576E-8	TEST
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999997873264833	WITHOUT_CLASSIFICATION	2.1267351658840293E-7	TEST
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999742499095	WITHOUT_CLASSIFICATION	2.5750090516411104E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999952698454	WITHOUT_CLASSIFICATION	4.730154565715837E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980904049829	WITHOUT_CLASSIFICATION	1.9095950171383666E-6	TEST
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999960914436056	WITHOUT_CLASSIFICATION	3.908556394424834E-6	TEST
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999882130223	WITHOUT_CLASSIFICATION	1.1786977641701658E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999980786601	WITHOUT_CLASSIFICATION	1.9213399170935987E-9	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999993005984548	WITHOUT_CLASSIFICATION	6.994015453555672E-7	TEST
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999990206983752	WITHOUT_CLASSIFICATION	9.793016247807385E-7	TEST
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999992241012156	WITHOUT_CLASSIFICATION	7.75898784364472E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999997138086292	WITHOUT_CLASSIFICATION	2.86191370876547E-7	TEST
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999896209731	WITHOUT_CLASSIFICATION	1.0379026926371438E-8	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999376350477	WITHOUT_CLASSIFICATION	6.236495239299368E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999964455499	WITHOUT_CLASSIFICATION	3.554450103496636E-9	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999415672831	WITHOUT_CLASSIFICATION	5.843271684141409E-8	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999958225203	WITHOUT_CLASSIFICATION	4.177479690860625E-8	TEST
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999964455499	WITHOUT_CLASSIFICATION	3.554450103496636E-9	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999835578122	WITHOUT_CLASSIFICATION	1.644218782124496E-8	TEST
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999873863652	WITHOUT_CLASSIFICATION	1.261363482781444E-8	TEST
// ignore!	WITHOUT_CLASSIFICATION	0.9999998334080488	WITHOUT_CLASSIFICATION	1.6659195113889513E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999276603254	WITHOUT_CLASSIFICATION	7.233967452217544E-8	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999655577217	WITHOUT_CLASSIFICATION	3.444227819292678E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843536	WITHOUT_CLASSIFICATION	1.6156463959996894E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843536	WITHOUT_CLASSIFICATION	1.6156463959996894E-9	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.99999954300909	WITHOUT_CLASSIFICATION	4.5699090998274455E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998583783511	WITHOUT_CLASSIFICATION	1.4162164884602664E-7	TEST
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999974885847785	WITHOUT_CLASSIFICATION	2.5114152214779183E-6	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999981543309	WITHOUT_CLASSIFICATION	1.8456691012342853E-8	TEST
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999718346635	WITHOUT_CLASSIFICATION	2.8165336499256144E-8	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999709760862	WITHOUT_CLASSIFICATION	2.9023913875002165E-8	TEST
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999943582476	WITHOUT_CLASSIFICATION	5.6417524021948605E-8	TEST
// return the connection	WITHOUT_CLASSIFICATION	0.9999999948014175	WITHOUT_CLASSIFICATION	5.198582456492265E-9	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999191105717	WITHOUT_CLASSIFICATION	8.088942824310163E-8	TEST
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999601711286	WITHOUT_CLASSIFICATION	3.9828871448106714E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739161837	WITHOUT_CLASSIFICATION	2.6083816293050045E-8	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739161837	WITHOUT_CLASSIFICATION	2.6083816293050045E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999983503064	WITHOUT_CLASSIFICATION	1.6496936010519155E-8	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999648760163	WITHOUT_CLASSIFICATION	3.51239838094711E-8	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999992474325247	WITHOUT_CLASSIFICATION	7.525674753926044E-7	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999739161837	WITHOUT_CLASSIFICATION	2.6083816293050045E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999983503064	WITHOUT_CLASSIFICATION	1.6496936010519155E-8	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999983503064	WITHOUT_CLASSIFICATION	1.6496936010519155E-8	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999953023292307	WITHOUT_CLASSIFICATION	4.697670769296793E-6	TEST
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999998567683522	WITHOUT_CLASSIFICATION	1.4323164775757222E-7	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999616760796	WITHOUT_CLASSIFICATION	3.8323920347693804E-8	TEST
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999990458303246	WITHOUT_CLASSIFICATION	9.541696754047993E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997773140995	WITHOUT_CLASSIFICATION	2.2268590052014307E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999997773140995	WITHOUT_CLASSIFICATION	2.2268590052014307E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999996976289339	WITHOUT_CLASSIFICATION	3.0237106608266086E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999988221430695	WITHOUT_CLASSIFICATION	1.1778569305459627E-6	TEST
// default is POJO	WITHOUT_CLASSIFICATION	0.9999998450598141	WITHOUT_CLASSIFICATION	1.549401858742953E-7	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999335698874	WITHOUT_CLASSIFICATION	6.643011262407793E-8	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999335698874	WITHOUT_CLASSIFICATION	6.643011262407793E-8	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999994416113839	WITHOUT_CLASSIFICATION	5.583886162287734E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974765963725	WITHOUT_CLASSIFICATION	2.523403627530259E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999536166544126	WITHOUT_CLASSIFICATION	4.638334558734777E-5	TEST
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999407634207	WITHOUT_CLASSIFICATION	5.923657938255571E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999996238101634	WITHOUT_CLASSIFICATION	3.7618983662089195E-7	TEST
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999995783372572	WITHOUT_CLASSIFICATION	4.21662742809907E-7	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999986767359191	WITHOUT_CLASSIFICATION	1.3232640808473896E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999996424549384	WITHOUT_CLASSIFICATION	3.57545061542515E-7	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999950728357331	WITHOUT_CLASSIFICATION	4.927164266958896E-6	TEST
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999536166544126	WITHOUT_CLASSIFICATION	4.638334558734777E-5	TEST
//then by fk	WITHOUT_CLASSIFICATION	0.999990323054936	WITHOUT_CLASSIFICATION	9.676945064065214E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111250778	WITHOUT_CLASSIFICATION	1.4888749221663525E-6	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111250778	WITHOUT_CLASSIFICATION	1.4888749221663525E-6	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999172312422	WITHOUT_CLASSIFICATION	8.276875788674657E-8	TEST
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999984318631827	WITHOUT_CLASSIFICATION	1.5681368172342403E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996989933335	WITHOUT_CLASSIFICATION	3.010066664068153E-7	TEST
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999923662837912	WITHOUT_CLASSIFICATION	7.633716208830889E-6	TEST
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999967604980381	WITHOUT_CLASSIFICATION	3.2395019620536436E-6	TEST
//then by id	WITHOUT_CLASSIFICATION	0.9999923807840951	WITHOUT_CLASSIFICATION	7.61921590488097E-6	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9999999658139933	WITHOUT_CLASSIFICATION	3.4186006685904696E-8	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999914172807	WITHOUT_CLASSIFICATION	8.582719302864935E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927778895	WITHOUT_CLASSIFICATION	7.222110429340409E-9	TEST
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927778895	WITHOUT_CLASSIFICATION	7.222110429340409E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9991684328326078	WITHOUT_CLASSIFICATION	8.315671673923179E-4	TEST
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999827780555	WITHOUT_CLASSIFICATION	1.72219445036162E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.999999914168764	WITHOUT_CLASSIFICATION	8.583123602658232E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999995014085061	WITHOUT_CLASSIFICATION	4.985914939338319E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999996659524006	WITHOUT_CLASSIFICATION	3.3404759944705E-7	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999990124837517	WITHOUT_CLASSIFICATION	9.875162483100252E-7	TEST
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999998725554856	WITHOUT_CLASSIFICATION	1.2744451432709273E-7	TEST
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999999082280859	WITHOUT_CLASSIFICATION	9.177191413530015E-8	TEST
// new	WITHOUT_CLASSIFICATION	0.9999990959321743	WITHOUT_CLASSIFICATION	9.040678256616668E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409029083	WITHOUT_CLASSIFICATION	6.590970916199154E-7	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999499724558	WITHOUT_CLASSIFICATION	5.002754420111152E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395173906	WITHOUT_CLASSIFICATION	6.048260939931964E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020552749	WITHOUT_CLASSIFICATION	9.794472513648848E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020552749	WITHOUT_CLASSIFICATION	9.794472513648848E-8	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997057233095	WITHOUT_CLASSIFICATION	2.9427669047321515E-7	TEST
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999996948502868	WITHOUT_CLASSIFICATION	3.0514971320168133E-6	TEST
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999879885928	WITHOUT_CLASSIFICATION	1.2011407273545053E-8	TEST
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999973703513598	WITHOUT_CLASSIFICATION	2.629648640315106E-6	TEST
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999997738019347	WITHOUT_CLASSIFICATION	2.2619806530309745E-7	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999682168786	WITHOUT_CLASSIFICATION	3.178312146336035E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999412484974	WITHOUT_CLASSIFICATION	5.875150261766822E-8	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999999005728258	WITHOUT_CLASSIFICATION	9.94271741811983E-8	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999999641036746	WITHOUT_CLASSIFICATION	3.5896325400690404E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997688308462	WITHOUT_CLASSIFICATION	2.3116915382517462E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998558396472	WITHOUT_CLASSIFICATION	1.4416035288223743E-7	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999998407504807	WITHOUT_CLASSIFICATION	1.5924951936601996E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999995800811305	WITHOUT_CLASSIFICATION	4.199188694880439E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.999999821229972	WITHOUT_CLASSIFICATION	1.7877002811859134E-7	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999441186412	WITHOUT_CLASSIFICATION	5.5881358816764864E-8	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999766244221	WITHOUT_CLASSIFICATION	2.3375577984667153E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999999469016813	WITHOUT_CLASSIFICATION	5.309831871869705E-8	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999999400767495	WITHOUT_CLASSIFICATION	5.992325048775931E-8	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999490991012	WITHOUT_CLASSIFICATION	5.0900898749451834E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.9999997122114025	WITHOUT_CLASSIFICATION	2.8778859743254807E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409029083	WITHOUT_CLASSIFICATION	6.590970916199154E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999020552749	WITHOUT_CLASSIFICATION	9.794472513648848E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.999999821229972	WITHOUT_CLASSIFICATION	1.7877002811859134E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999625004167	WITHOUT_CLASSIFICATION	3.7499583419441346E-8	TEST
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999257318923	WITHOUT_CLASSIFICATION	7.426810761409295E-8	TEST
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997480518172	WITHOUT_CLASSIFICATION	2.519481828612726E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999513131712	WITHOUT_CLASSIFICATION	4.868682871682721E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999986152948092	WITHOUT_CLASSIFICATION	1.3847051908491965E-6	TEST
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999999852256904	WITHOUT_CLASSIFICATION	1.4774309606513589E-7	TEST
// athrow	WITHOUT_CLASSIFICATION	0.9999994787262781	WITHOUT_CLASSIFICATION	5.212737218859305E-7	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999999965891747	WITHOUT_CLASSIFICATION	3.4108252973421166E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999896852844513	WITHOUT_CLASSIFICATION	1.0314715548659636E-5	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999985806468695	WITHOUT_CLASSIFICATION	1.4193531305026195E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963039216765	WITHOUT_CLASSIFICATION	3.6960783234454185E-6	TEST
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963039216765	WITHOUT_CLASSIFICATION	3.6960783234454185E-6	TEST
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998333353669	WITHOUT_CLASSIFICATION	1.666646330847752E-7	TEST
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999799634992	WITHOUT_CLASSIFICATION	2.0036500717193704E-8	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999983334671434	WITHOUT_CLASSIFICATION	1.666532856681439E-6	TEST
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999999801244971	WITHOUT_CLASSIFICATION	1.9875502892989064E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998989474044	WITHOUT_CLASSIFICATION	1.010525956769864E-7	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999842166429	WITHOUT_CLASSIFICATION	1.5783357022753245E-8	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999999114946145	WITHOUT_CLASSIFICATION	8.850538549141777E-7	TEST
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998159523884	WITHOUT_CLASSIFICATION	1.8404761161187982E-7	TEST
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999998417570954	WITHOUT_CLASSIFICATION	1.5824290466437997E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999877614595	WITHOUT_CLASSIFICATION	1.223854053333573E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999877614595	WITHOUT_CLASSIFICATION	1.223854053333573E-8	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998939141014	WITHOUT_CLASSIFICATION	1.0608589857437727E-7	TEST
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999995445424332	WITHOUT_CLASSIFICATION	4.5545756677904377E-7	TEST
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999334992684	WITHOUT_CLASSIFICATION	6.65007315527478E-8	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999727950044	WITHOUT_CLASSIFICATION	2.7204995609725036E-8	TEST
// int	WITHOUT_CLASSIFICATION	0.9999996062765403	WITHOUT_CLASSIFICATION	3.937234596729248E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.9999999605502202	WITHOUT_CLASSIFICATION	3.9449779715817894E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999993409029083	WITHOUT_CLASSIFICATION	6.590970916199154E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999395173906	WITHOUT_CLASSIFICATION	6.048260939931964E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.999999821229972	WITHOUT_CLASSIFICATION	1.7877002811859134E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.999999821229972	WITHOUT_CLASSIFICATION	1.7877002811859134E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998165199308	WITHOUT_CLASSIFICATION	1.8348006928222144E-7	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998165199308	WITHOUT_CLASSIFICATION	1.8348006928222144E-7	TEST
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999999008964136	WITHOUT_CLASSIFICATION	9.910358643982487E-8	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999996774714167	WITHOUT_CLASSIFICATION	3.225285832256344E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999996774714167	WITHOUT_CLASSIFICATION	3.225285832256344E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999996551287818	WITHOUT_CLASSIFICATION	3.4487121824050946E-7	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999999768427827	WITHOUT_CLASSIFICATION	2.3157217288275378E-8	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.999999387269496	WITHOUT_CLASSIFICATION	6.127305040488184E-7	TEST
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999975561087103	WITHOUT_CLASSIFICATION	2.4438912896496125E-6	TEST
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999677396564	WITHOUT_CLASSIFICATION	3.2260343612484626E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759148573	WITHOUT_CLASSIFICATION	2.4085142618966606E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759148573	WITHOUT_CLASSIFICATION	2.4085142618966606E-8	TEST
// not array	WITHOUT_CLASSIFICATION	0.9999997204073718	WITHOUT_CLASSIFICATION	2.795926281280549E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999999652769793	WITHOUT_CLASSIFICATION	3.4723020624268496E-8	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999996252068392	WITHOUT_CLASSIFICATION	3.74793160831172E-7	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999991872875219	WITHOUT_CLASSIFICATION	8.127124780252667E-7	TEST
// char	WITHOUT_CLASSIFICATION	0.9999998081656355	WITHOUT_CLASSIFICATION	1.918343644193885E-7	TEST
// short	WITHOUT_CLASSIFICATION	0.9999983348913214	WITHOUT_CLASSIFICATION	1.6651086786556847E-6	TEST
// double	WITHOUT_CLASSIFICATION	0.999999815937514	WITHOUT_CLASSIFICATION	1.840624860468772E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025421851	WITHOUT_CLASSIFICATION	4.974578148856106E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025421851	WITHOUT_CLASSIFICATION	4.974578148856106E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807398537	WITHOUT_CLASSIFICATION	7.192601462784271E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807398537	WITHOUT_CLASSIFICATION	7.192601462784271E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999999812316845	WITHOUT_CLASSIFICATION	1.8768315509943776E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999999812316845	WITHOUT_CLASSIFICATION	1.8768315509943776E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974983567	WITHOUT_CLASSIFICATION	1.0250164325930436E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974983567	WITHOUT_CLASSIFICATION	1.0250164325930436E-7	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999999759148573	WITHOUT_CLASSIFICATION	2.4085142618966606E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.999999815937514	WITHOUT_CLASSIFICATION	1.840624860468772E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025421851	WITHOUT_CLASSIFICATION	4.974578148856106E-7	TEST
// float	WITHOUT_CLASSIFICATION	0.9999995025421851	WITHOUT_CLASSIFICATION	4.974578148856106E-7	TEST
// long	WITHOUT_CLASSIFICATION	0.9999992807398537	WITHOUT_CLASSIFICATION	7.192601462784271E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999999812316845	WITHOUT_CLASSIFICATION	1.8768315509943776E-7	TEST
// bad type	WITHOUT_CLASSIFICATION	0.999999812316845	WITHOUT_CLASSIFICATION	1.8768315509943776E-7	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998974983567	WITHOUT_CLASSIFICATION	1.0250164325930436E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999105830403	WITHOUT_CLASSIFICATION	8.941695972445608E-8	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999989302263659	WITHOUT_CLASSIFICATION	1.0697736341665413E-6	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999991013197368	WITHOUT_CLASSIFICATION	8.986802631442872E-7	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999995465340528	WITHOUT_CLASSIFICATION	4.534659472675128E-7	TEST
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999986997928957	WITHOUT_CLASSIFICATION	1.30020710427974E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999993844608247	WITHOUT_CLASSIFICATION	6.155391753195187E-7	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998500317611	WITHOUT_CLASSIFICATION	1.4996823897989565E-7	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999996458277558	WITHOUT_CLASSIFICATION	3.54172244260664E-7	TEST
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999994044110421	WITHOUT_CLASSIFICATION	5.955889578846531E-7	TEST
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998677131223	WITHOUT_CLASSIFICATION	1.3228687762164587E-7	TEST
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.99999993150256	WITHOUT_CLASSIFICATION	6.849744003089223E-8	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997987794235	WITHOUT_CLASSIFICATION	2.012205765620381E-7	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.99999954300909	WITHOUT_CLASSIFICATION	4.5699090998274455E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999993844608247	WITHOUT_CLASSIFICATION	6.155391753195187E-7	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854564131043	WITHOUT_CLASSIFICATION	1.4543586895603533E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854564131043	WITHOUT_CLASSIFICATION	1.4543586895603533E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997832564747	WITHOUT_CLASSIFICATION	2.1674352525584354E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998482242927	WITHOUT_CLASSIFICATION	1.517757072743351E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998482242927	WITHOUT_CLASSIFICATION	1.517757072743351E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999998824780655	WITHOUT_CLASSIFICATION	1.1752193452763516E-7	TEST
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999987130798704	WITHOUT_CLASSIFICATION	1.2869201294810158E-6	TEST
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996067486604	WITHOUT_CLASSIFICATION	3.9325133965874593E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999973166782	WITHOUT_CLASSIFICATION	2.6833217947073536E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999999973166782	WITHOUT_CLASSIFICATION	2.6833217947073536E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999679839247	WITHOUT_CLASSIFICATION	3.201607536053606E-8	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999925759903	WITHOUT_CLASSIFICATION	7.424009743915683E-9	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999925759903	WITHOUT_CLASSIFICATION	7.424009743915683E-9	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999969194132031	WITHOUT_CLASSIFICATION	3.0805867967929717E-6	TEST
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997006701389	WITHOUT_CLASSIFICATION	2.9932986118606364E-7	TEST
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999233919555	WITHOUT_CLASSIFICATION	7.660804448592832E-8	TEST
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999970188198168	WITHOUT_CLASSIFICATION	2.9811801832198764E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999986375475154	WITHOUT_CLASSIFICATION	1.3624524845720243E-6	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999984520985992	WITHOUT_CLASSIFICATION	1.5479014008080565E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855683282	WITHOUT_CLASSIFICATION	1.0144316717555394E-6	TEST
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999988812782281	WITHOUT_CLASSIFICATION	1.118721771906863E-6	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9990825286119187	WITHOUT_CLASSIFICATION	9.174713880812016E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999968839422521	WITHOUT_CLASSIFICATION	3.1160577478825396E-6	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999994647808491	WITHOUT_CLASSIFICATION	5.352191509020435E-6	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880494686	WITHOUT_CLASSIFICATION	2.8119505314533576E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999684124805	WITHOUT_CLASSIFICATION	3.1587519487275754E-8	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999754642725142	WITHOUT_CLASSIFICATION	2.4535727485903178E-5	TEST
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999987390242048	WITHOUT_CLASSIFICATION	1.2609757952057674E-5	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880494686	WITHOUT_CLASSIFICATION	2.8119505314533576E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999968275868	WITHOUT_CLASSIFICATION	3.172413267319135E-9	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999933787906	WITHOUT_CLASSIFICATION	6.621209466931357E-9	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999990289640355	WITHOUT_CLASSIFICATION	9.710359644745342E-7	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999978082091024	WITHOUT_CLASSIFICATION	2.1917908974595855E-6	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999994849916388	WITHOUT_CLASSIFICATION	5.150083611931489E-7	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999982465207331	WITHOUT_CLASSIFICATION	1.75347926684945E-6	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999938569859446	WITHOUT_CLASSIFICATION	6.14301405550007E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999988135325867	WITHOUT_CLASSIFICATION	1.1864674133595719E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273957944	WITHOUT_CLASSIFICATION	1.3726042055601585E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999672169249	WITHOUT_CLASSIFICATION	3.2783075188585305E-8	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996448976181	WITHOUT_CLASSIFICATION	3.5510238196410905E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999689039245	WITHOUT_CLASSIFICATION	3.109607551558537E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991182821	WITHOUT_CLASSIFICATION	1.6008817177567848E-6	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999989855683282	WITHOUT_CLASSIFICATION	1.0144316717555394E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273957944	WITHOUT_CLASSIFICATION	1.3726042055601585E-6	TEST
// properties	WITHOUT_CLASSIFICATION	0.9999996448976181	WITHOUT_CLASSIFICATION	3.5510238196410905E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991182821	WITHOUT_CLASSIFICATION	1.6008817177567848E-6	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999986698739	WITHOUT_CLASSIFICATION	1.3301261006428667E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999970439084924	WITHOUT_CLASSIFICATION	2.9560915076202794E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999965562307	WITHOUT_CLASSIFICATION	3.443769213987973E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454203869	WITHOUT_CLASSIFICATION	1.8545796131131251E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986377370774	WITHOUT_CLASSIFICATION	1.3622629225561214E-6	TEST
// column index	WITHOUT_CLASSIFICATION	0.9999999614907549	WITHOUT_CLASSIFICATION	3.850924522160393E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999981165614514	WITHOUT_CLASSIFICATION	1.8834385485077784E-6	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995235032043	WITHOUT_CLASSIFICATION	4.7649679574946977E-7	TEST
// for an any	WITHOUT_CLASSIFICATION	0.9999989642015339	WITHOUT_CLASSIFICATION	1.0357984661764044E-6	TEST
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999781425843	WITHOUT_CLASSIFICATION	2.185741573972007E-8	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987105546024	WITHOUT_CLASSIFICATION	1.2894453976060497E-6	TEST
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999996714455598	WITHOUT_CLASSIFICATION	3.285544402597368E-7	TEST
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999942315763	WITHOUT_CLASSIFICATION	5.768423743798017E-9	TEST
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993535221018	WITHOUT_CLASSIFICATION	6.46477898197273E-7	TEST
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999983208976188	WITHOUT_CLASSIFICATION	1.6791023812329497E-6	TEST
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999991815291855	WITHOUT_CLASSIFICATION	8.184708144297246E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999978441733212	WITHOUT_CLASSIFICATION	2.155826678878802E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999994547279275	WITHOUT_CLASSIFICATION	5.452720725060249E-6	TEST
// SORT	WITHOUT_CLASSIFICATION	0.9999984986724707	WITHOUT_CLASSIFICATION	1.5013275293324843E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999986273957944	WITHOUT_CLASSIFICATION	1.3726042055601585E-6	TEST
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999178165265	WITHOUT_CLASSIFICATION	8.218347343937464E-8	TEST
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999301244649	WITHOUT_CLASSIFICATION	6.987553509329397E-8	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.999999960094762	WITHOUT_CLASSIFICATION	3.9905238037851304E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999298968354042	WITHOUT_CLASSIFICATION	7.010316459581191E-4	TEST
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999995752546621	WITHOUT_CLASSIFICATION	4.247453379667335E-7	TEST
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998179393343	WITHOUT_CLASSIFICATION	1.8206066563637337E-7	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999997436372	WITHOUT_CLASSIFICATION	2.5636278811074456E-10	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999877137029	WITHOUT_CLASSIFICATION	1.2286297112993282E-8	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999987374409541	WITHOUT_CLASSIFICATION	1.262559045920189E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999978599466812	WITHOUT_CLASSIFICATION	2.1400533188755143E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999987020229273	WITHOUT_CLASSIFICATION	1.2979770727772943E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999972645405798	WITHOUT_CLASSIFICATION	2.735459420222222E-6	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999999600585606	WITHOUT_CLASSIFICATION	3.994143936717893E-8	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999841723309	WITHOUT_CLASSIFICATION	1.5827669003712924E-8	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999842071111	WITHOUT_CLASSIFICATION	1.5792888857687042E-8	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999792185457	WITHOUT_CLASSIFICATION	2.078145438563812E-8	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9999981717043659	WITHOUT_CLASSIFICATION	1.828295634099493E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999998796278087	WITHOUT_CLASSIFICATION	1.2037219137831455E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999999330427407	WITHOUT_CLASSIFICATION	6.695725933550571E-8	TEST
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999995361893672	WITHOUT_CLASSIFICATION	4.6381063282184694E-7	TEST
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999732593988	WITHOUT_CLASSIFICATION	2.674060124717956E-8	TEST
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999999752048397	WITHOUT_CLASSIFICATION	2.479516029388223E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999233584235	WITHOUT_CLASSIFICATION	7.664157660073431E-8	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999981376002253	WITHOUT_CLASSIFICATION	1.8623997747160816E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994711692949	WITHOUT_CLASSIFICATION	5.288307051105799E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999994711692949	WITHOUT_CLASSIFICATION	5.288307051105799E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999919664762954	WITHOUT_CLASSIFICATION	8.03352370460727E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999999782763794	WITHOUT_CLASSIFICATION	2.1723620636234056E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999999290229321	WITHOUT_CLASSIFICATION	7.097706792382148E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999999242029072	WITHOUT_CLASSIFICATION	7.579709288619344E-8	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999993013023157	WITHOUT_CLASSIFICATION	6.986976842383898E-7	TEST
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996427397078	WITHOUT_CLASSIFICATION	3.5726029228592504E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999999554437908	WITHOUT_CLASSIFICATION	4.4556209111036255E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999928789687358	WITHOUT_CLASSIFICATION	7.121031264178384E-6	TEST
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999975790591956	WITHOUT_CLASSIFICATION	2.420940804423809E-6	TEST
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999999523818153	WITHOUT_CLASSIFICATION	4.761818469412582E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//Schema export:	WITHOUT_CLASSIFICATION	0.999999218188205	WITHOUT_CLASSIFICATION	7.818117949774693E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999998709088347	WITHOUT_CLASSIFICATION	1.290911652393948E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999994655760555	WITHOUT_CLASSIFICATION	5.344239446129608E-7	TEST
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999998679674722	WITHOUT_CLASSIFICATION	1.3203252778598515E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997670553836	WITHOUT_CLASSIFICATION	2.3294461642536958E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998129974675	WITHOUT_CLASSIFICATION	1.870025324289409E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999999298545983	WITHOUT_CLASSIFICATION	7.014540175601645E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999023899344	WITHOUT_CLASSIFICATION	9.761006554320375E-8	TEST
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998440368654	WITHOUT_CLASSIFICATION	1.55963134725087E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999996759306286	WITHOUT_CLASSIFICATION	3.2406937144900873E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995714952593	WITHOUT_CLASSIFICATION	4.28504740608704E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999995714952593	WITHOUT_CLASSIFICATION	4.28504740608704E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999980582833411	WITHOUT_CLASSIFICATION	1.941716658919154E-6	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999980582833411	WITHOUT_CLASSIFICATION	1.941716658919154E-6	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999233584235	WITHOUT_CLASSIFICATION	7.664157660073431E-8	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997085631921	WITHOUT_CLASSIFICATION	2.9143680789476726E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.99998840575356	WITHOUT_CLASSIFICATION	1.1594246439973264E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999944213735139	WITHOUT_CLASSIFICATION	5.57862648612447E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.99998840575356	WITHOUT_CLASSIFICATION	1.1594246439973264E-5	TEST
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999944213735139	WITHOUT_CLASSIFICATION	5.57862648612447E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213531694	WITHOUT_CLASSIFICATION	2.578646830614287E-6	TEST
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999932975328657	WITHOUT_CLASSIFICATION	6.702467134290196E-6	TEST
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999819074968	WITHOUT_CLASSIFICATION	1.8092503166717732E-8	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.999999847789834	WITHOUT_CLASSIFICATION	1.5221016604752694E-7	TEST
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999991431192974	WITHOUT_CLASSIFICATION	8.568807025713066E-7	TEST
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999958486263802	WITHOUT_CLASSIFICATION	4.1513736196586485E-6	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999706018254	WITHOUT_CLASSIFICATION	2.9398174590007174E-8	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996567501191	WITHOUT_CLASSIFICATION	3.432498808542769E-7	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999960255852243	WITHOUT_CLASSIFICATION	3.974414775749554E-6	TEST
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999777520621	WITHOUT_CLASSIFICATION	2.224793802097198E-8	TEST
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999998660036481	WITHOUT_CLASSIFICATION	1.339963519245059E-7	TEST
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999991177756	WITHOUT_CLASSIFICATION	8.822242899460291E-10	TEST
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999996865499445	WITHOUT_CLASSIFICATION	3.1345005538720796E-7	TEST
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999991016587582	WITHOUT_CLASSIFICATION	8.983412417910432E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999915588202726	WITHOUT_CLASSIFICATION	8.441179727449289E-6	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999188679792926	WITHOUT_CLASSIFICATION	8.11320207073671E-5	TEST
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999188679792926	WITHOUT_CLASSIFICATION	8.11320207073671E-5	TEST
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999996311502	WITHOUT_CLASSIFICATION	3.688497945780141E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213531694	WITHOUT_CLASSIFICATION	2.578646830614287E-6	TEST
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999995811335338	WITHOUT_CLASSIFICATION	4.1886646624977846E-7	TEST
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999994084613952	WITHOUT_CLASSIFICATION	5.915386047951439E-6	TEST
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999998920430332	WITHOUT_CLASSIFICATION	1.079569669110906E-7	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987540841717	WITHOUT_CLASSIFICATION	1.2459158282453806E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999067202974133	WITHOUT_CLASSIFICATION	9.327970258662308E-5	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213531694	WITHOUT_CLASSIFICATION	2.578646830614287E-6	TEST
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999987540841717	WITHOUT_CLASSIFICATION	1.2459158282453806E-6	TEST
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999067202974133	WITHOUT_CLASSIFICATION	9.327970258662308E-5	TEST
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999908097364353	WITHOUT_CLASSIFICATION	9.19026356469402E-6	TEST
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999985835559791	WITHOUT_CLASSIFICATION	1.4164440207765972E-6	TEST
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999563355226	WITHOUT_CLASSIFICATION	4.3664477273710865E-8	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213531694	WITHOUT_CLASSIFICATION	2.578646830614287E-6	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999974213531694	WITHOUT_CLASSIFICATION	2.578646830614287E-6	TEST
// from Map	WITHOUT_CLASSIFICATION	0.9999996004946747	WITHOUT_CLASSIFICATION	3.9950532528380346E-7	TEST
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999997166838271	WITHOUT_CLASSIFICATION	2.8331617289151076E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.9999995615547294	WITHOUT_CLASSIFICATION	4.3844527064393473E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999999582235283	WITHOUT_CLASSIFICATION	4.177647168932971E-8	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998122246924	WITHOUT_CLASSIFICATION	1.8777530756342038E-7	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999653388729	WITHOUT_CLASSIFICATION	3.466112704618714E-8	TEST
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999990575668476	WITHOUT_CLASSIFICATION	9.424331523910963E-7	TEST
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999528847952	WITHOUT_CLASSIFICATION	4.711520482315291E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999993542175	WITHOUT_CLASSIFICATION	6.457824990932355E-9	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999984703459102	WITHOUT_CLASSIFICATION	1.5296540899231867E-6	TEST
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999999827694213	WITHOUT_CLASSIFICATION	1.7230578668672176E-8	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999998414857538	WITHOUT_CLASSIFICATION	1.5851424628674257E-7	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999230330976	WITHOUT_CLASSIFICATION	7.696690237213905E-8	TEST
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999999091869376	WITHOUT_CLASSIFICATION	9.081306240633675E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999532867629	WITHOUT_CLASSIFICATION	4.6713237083480446E-8	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989877091237	WITHOUT_CLASSIFICATION	1.0122908762921084E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993500007852	WITHOUT_CLASSIFICATION	6.499992147807884E-7	TEST
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999796204544529	WITHOUT_CLASSIFICATION	2.0379545547207502E-5	TEST
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999964518941801	WITHOUT_CLASSIFICATION	3.5481058199846826E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998348227149	WITHOUT_CLASSIFICATION	1.6517728512916813E-7	TEST
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999969942149077	WITHOUT_CLASSIFICATION	3.0057850922920737E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999917807000956	WITHOUT_CLASSIFICATION	8.219299904254499E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9999917807000956	WITHOUT_CLASSIFICATION	8.219299904254499E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999993500007852	WITHOUT_CLASSIFICATION	6.499992147807884E-7	TEST
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996845131257851	WITHOUT_CLASSIFICATION	3.154868742149796E-4	TEST
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999993921047073	WITHOUT_CLASSIFICATION	6.078952927018126E-6	TEST
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998522937206001	WITHOUT_CLASSIFICATION	1.477062793998639E-4	TEST
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999974834350895	WITHOUT_CLASSIFICATION	2.5165649103589795E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804489692	WITHOUT_CLASSIFICATION	6.319551030853031E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999162374523	WITHOUT_CLASSIFICATION	8.376254770694477E-8	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999618253118	WITHOUT_CLASSIFICATION	3.817468820714662E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999990642238599	WITHOUT_CLASSIFICATION	9.357761399759333E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999959331564	WITHOUT_CLASSIFICATION	4.066843618198561E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999709060309	WITHOUT_CLASSIFICATION	2.909396921804125E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999108484727	WITHOUT_CLASSIFICATION	8.915152737129347E-8	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999917327278512	WITHOUT_CLASSIFICATION	8.267272148739089E-6	TEST
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999816434653914	WITHOUT_CLASSIFICATION	1.835653460853481E-5	TEST
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999993847944	WITHOUT_CLASSIFICATION	6.152055314732117E-10	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999887249794	WITHOUT_CLASSIFICATION	1.1275020602119303E-8	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999649994246	WITHOUT_CLASSIFICATION	3.500057540928356E-7	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999865762139	WITHOUT_CLASSIFICATION	1.3423786153755304E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999997855403872	WITHOUT_CLASSIFICATION	2.144596128584897E-7	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999868294274	WITHOUT_CLASSIFICATION	1.3170572496909399E-8	TEST
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999961028392	WITHOUT_CLASSIFICATION	3.8971607993420184E-9	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999806801776	WITHOUT_CLASSIFICATION	1.9319822402265995E-8	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999830126937	WITHOUT_CLASSIFICATION	1.69873063533318E-8	TEST
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999304801969	WITHOUT_CLASSIFICATION	6.951980312778822E-8	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986678190168	WITHOUT_CLASSIFICATION	1.3321809832203119E-6	TEST
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997738650428	WITHOUT_CLASSIFICATION	2.2613495713406343E-7	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998577922515	WITHOUT_CLASSIFICATION	1.422077484835546E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998158248181	WITHOUT_CLASSIFICATION	1.8417518189992314E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994797666277	WITHOUT_CLASSIFICATION	5.202333723072939E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995741022131	WITHOUT_CLASSIFICATION	4.258977868863704E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998566875736	WITHOUT_CLASSIFICATION	1.4331242644017133E-7	TEST
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999484527502	WITHOUT_CLASSIFICATION	5.154724980525247E-8	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999972377774	WITHOUT_CLASSIFICATION	2.762222601236217E-8	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998553795979	WITHOUT_CLASSIFICATION	1.4462040205963994E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998388745012	WITHOUT_CLASSIFICATION	1.611254988460894E-7	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999972253473	WITHOUT_CLASSIFICATION	2.7746526949094327E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991299673873	WITHOUT_CLASSIFICATION	8.700326126920613E-7	TEST
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999923942566	WITHOUT_CLASSIFICATION	7.605743406676708E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999990064325	WITHOUT_CLASSIFICATION	9.935675004441981E-8	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999815120965	WITHOUT_CLASSIFICATION	1.8487903488763017E-7	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992309953427	WITHOUT_CLASSIFICATION	7.690046573186333E-7	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999994739256215	WITHOUT_CLASSIFICATION	5.260743785433572E-7	TEST
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999165783953	WITHOUT_CLASSIFICATION	8.342160467642546E-8	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999982865012951	WITHOUT_CLASSIFICATION	1.7134987049646142E-6	TEST
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999740911922	WITHOUT_CLASSIFICATION	2.5908807686735392E-8	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999938349518	WITHOUT_CLASSIFICATION	6.165048159690392E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037040544112	WITHOUT_CLASSIFICATION	9.629594558876254E-5	TEST
//" cascade";	WITHOUT_CLASSIFICATION	0.9999991114069358	WITHOUT_CLASSIFICATION	8.885930642130088E-7	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999993449068705	WITHOUT_CLASSIFICATION	6.550931294368391E-7	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999988833404289	WITHOUT_CLASSIFICATION	1.1166595711132346E-6	TEST
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999992209107744	WITHOUT_CLASSIFICATION	7.790892256394021E-7	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999987860335975	WITHOUT_CLASSIFICATION	1.213966402466918E-6	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999959347443064	WITHOUT_CLASSIFICATION	4.065255693656889E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999927536845613	WITHOUT_CLASSIFICATION	7.246315438775453E-6	TEST
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999992536053312	WITHOUT_CLASSIFICATION	7.4639466879019E-7	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995707628889	WITHOUT_CLASSIFICATION	4.2923711103494805E-7	TEST
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999998882543896	WITHOUT_CLASSIFICATION	1.1174561041417716E-7	TEST
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999997579682919	WITHOUT_CLASSIFICATION	2.420317080669926E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999987347165173	WITHOUT_CLASSIFICATION	1.2652834827054637E-6	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999985841272	WITHOUT_CLASSIFICATION	1.4158727932636093E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999021786505	WITHOUT_CLASSIFICATION	9.782134944752302E-8	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999264731491	WITHOUT_CLASSIFICATION	7.352685095838454E-8	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996130441845	WITHOUT_CLASSIFICATION	3.869558155713859E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999830476383	WITHOUT_CLASSIFICATION	1.695236170207382E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999947910365344	WITHOUT_CLASSIFICATION	5.208963465481169E-6	TEST
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999968531635	WITHOUT_CLASSIFICATION	3.1468365445516856E-9	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999717258554	WITHOUT_CLASSIFICATION	2.8274144524385526E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999284766042	WITHOUT_CLASSIFICATION	7.152339584476997E-8	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995566795544	WITHOUT_CLASSIFICATION	4.4332044547571965E-7	TEST
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999848278629	WITHOUT_CLASSIFICATION	1.5172137154768036E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999991115645783	WITHOUT_CLASSIFICATION	8.884354215432701E-7	TEST
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999865676087	WITHOUT_CLASSIFICATION	1.343239135163872E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993407888	WITHOUT_CLASSIFICATION	6.592111749316E-10	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999949253752886	WITHOUT_CLASSIFICATION	5.0746247114784085E-6	TEST
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999999588152608	WITHOUT_CLASSIFICATION	4.1184739220206326E-8	TEST
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999716061571	WITHOUT_CLASSIFICATION	2.8393842908165173E-8	TEST
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999996198474557	WITHOUT_CLASSIFICATION	3.8015254431264896E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037040544112	WITHOUT_CLASSIFICATION	9.629594558876254E-5	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999232556194	WITHOUT_CLASSIFICATION	7.67443805295708E-8	TEST
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.99999999595191	WITHOUT_CLASSIFICATION	4.048089961582308E-9	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999530945275	WITHOUT_CLASSIFICATION	4.6905472505586323E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998897788908	WITHOUT_CLASSIFICATION	1.1022110914653916E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999900761475	WITHOUT_CLASSIFICATION	9.923852560313794E-9	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999997521244485	WITHOUT_CLASSIFICATION	2.478755515523415E-7	TEST
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999678843872007	WITHOUT_CLASSIFICATION	3.211561279921415E-5	TEST
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998488299394	WITHOUT_CLASSIFICATION	1.511700606322125E-7	TEST
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999879225322	WITHOUT_CLASSIFICATION	1.2077467886000203E-8	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999831166057	WITHOUT_CLASSIFICATION	1.688339431653507E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999948830983	WITHOUT_CLASSIFICATION	5.11690178804562E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999990817446	WITHOUT_CLASSIFICATION	9.182554059593409E-9	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999801405246	WITHOUT_CLASSIFICATION	1.9859475464531753E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999978769637	WITHOUT_CLASSIFICATION	2.12303636734601E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999931472480531	WITHOUT_CLASSIFICATION	6.852751946883532E-6	TEST
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.99999995640601	WITHOUT_CLASSIFICATION	4.359398995542279E-8	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999975713583009	WITHOUT_CLASSIFICATION	2.4286416990585224E-6	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998414911561	WITHOUT_CLASSIFICATION	1.5850884390253742E-7	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998319518812	WITHOUT_CLASSIFICATION	1.680481187966011E-7	TEST
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999991629410292	WITHOUT_CLASSIFICATION	8.370589707561478E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999996384878	WITHOUT_CLASSIFICATION	3.615122006920548E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999992628220831	WITHOUT_CLASSIFICATION	7.371779169024877E-7	TEST
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999996089387932	WITHOUT_CLASSIFICATION	3.910612068088018E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998840424109	WITHOUT_CLASSIFICATION	1.1595758911749126E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994525163551	WITHOUT_CLASSIFICATION	5.474836449139063E-7	TEST
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997210292082	WITHOUT_CLASSIFICATION	2.789707918318978E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734823392886	WITHOUT_CLASSIFICATION	1.2651766071125086E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998698771707	WITHOUT_CLASSIFICATION	1.301228291824217E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996383525652	WITHOUT_CLASSIFICATION	3.616474348927148E-7	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999836949904	WITHOUT_CLASSIFICATION	1.6305009536256386E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037040544112	WITHOUT_CLASSIFICATION	9.629594558876254E-5	TEST
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999998816937643	WITHOUT_CLASSIFICATION	1.1830623564691883E-7	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999906069993	WITHOUT_CLASSIFICATION	9.393000813191399E-9	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999538206878739	WITHOUT_CLASSIFICATION	4.617931212604569E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037040544112	WITHOUT_CLASSIFICATION	9.629594558876254E-5	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.99999973381627	WITHOUT_CLASSIFICATION	2.6618372998201537E-7	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999996384878	WITHOUT_CLASSIFICATION	3.615122006920548E-9	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999975906744047	WITHOUT_CLASSIFICATION	2.4093255951928213E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993775592763614	WITHOUT_CLASSIFICATION	6.224407236386972E-4	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999993893373502	WITHOUT_CLASSIFICATION	6.10662649697523E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999831166057	WITHOUT_CLASSIFICATION	1.688339431653507E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999999948830983	WITHOUT_CLASSIFICATION	5.11690178804562E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999999990817446	WITHOUT_CLASSIFICATION	9.182554059593409E-9	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999970722204207	WITHOUT_CLASSIFICATION	2.9277795791997828E-6	TEST
// add the main query	WITHOUT_CLASSIFICATION	0.9999997342958801	WITHOUT_CLASSIFICATION	2.6570411986712993E-7	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999999184685457	WITHOUT_CLASSIFICATION	8.153145429007687E-7	TEST
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999998153078575	WITHOUT_CLASSIFICATION	1.8469214239638803E-7	TEST
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999996084170443	WITHOUT_CLASSIFICATION	3.9158295566464287E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999037040544112	WITHOUT_CLASSIFICATION	9.629594558876254E-5	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999801405246	WITHOUT_CLASSIFICATION	1.9859475464531753E-8	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999978769637	WITHOUT_CLASSIFICATION	2.12303636734601E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999690974564	WITHOUT_CLASSIFICATION	3.090254362224616E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999942756765	WITHOUT_CLASSIFICATION	5.724323408694472E-9	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998455304066	WITHOUT_CLASSIFICATION	1.5446959337512541E-7	TEST
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999972965916828	WITHOUT_CLASSIFICATION	2.7034083171629016E-6	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999993790806654	WITHOUT_CLASSIFICATION	6.209193346403945E-7	TEST
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999945634248	WITHOUT_CLASSIFICATION	5.436575232991927E-9	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992309953427	WITHOUT_CLASSIFICATION	7.690046573186333E-7	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999979180217882	WITHOUT_CLASSIFICATION	2.0819782118351897E-6	TEST
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999902462633757	WITHOUT_CLASSIFICATION	9.753736624278332E-6	TEST
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999992396980352	WITHOUT_CLASSIFICATION	7.603019647838201E-7	TEST
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999991802356	WITHOUT_CLASSIFICATION	8.197644633911894E-10	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999833185432	WITHOUT_CLASSIFICATION	1.6681456841152165E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998158248181	WITHOUT_CLASSIFICATION	1.8417518189992314E-6	TEST
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994797666277	WITHOUT_CLASSIFICATION	5.202333723072939E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998388745012	WITHOUT_CLASSIFICATION	1.611254988460894E-7	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999833185432	WITHOUT_CLASSIFICATION	1.6681456841152165E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999973186254	WITHOUT_CLASSIFICATION	2.6813744442362712E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999760924273	WITHOUT_CLASSIFICATION	2.3907572642026566E-8	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999303613729	WITHOUT_CLASSIFICATION	6.963862705738328E-8	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994697916745	WITHOUT_CLASSIFICATION	5.302083254583977E-7	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999999361567992	WITHOUT_CLASSIFICATION	6.384320080303383E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999922964148361	WITHOUT_CLASSIFICATION	7.703585163848043E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999972253473	WITHOUT_CLASSIFICATION	2.7746526949094327E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999990064325	WITHOUT_CLASSIFICATION	9.935675004441981E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993407888	WITHOUT_CLASSIFICATION	6.592111749316E-10	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999998584252274	WITHOUT_CLASSIFICATION	1.4157477247155027E-7	TEST
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999666243502	WITHOUT_CLASSIFICATION	3.337564978412583E-8	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999972555674	WITHOUT_CLASSIFICATION	2.7444324440032534E-9	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999942351444335	WITHOUT_CLASSIFICATION	5.764855566494412E-6	TEST
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999557927884	WITHOUT_CLASSIFICATION	4.420721154340787E-8	TEST
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999522747949	WITHOUT_CLASSIFICATION	4.772520516605545E-8	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999978363050427	WITHOUT_CLASSIFICATION	2.163694957374384E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999959331564	WITHOUT_CLASSIFICATION	4.066843618198561E-9	TEST
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999999886851031	WITHOUT_CLASSIFICATION	1.1314897024300996E-8	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999905864126	WITHOUT_CLASSIFICATION	9.413587349197027E-9	TEST
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999999927988651	WITHOUT_CLASSIFICATION	7.201134900359399E-8	TEST
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999998621943279	WITHOUT_CLASSIFICATION	1.3780567210061872E-6	TEST
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998929555509	WITHOUT_CLASSIFICATION	1.0704444901071334E-7	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991532954859	WITHOUT_CLASSIFICATION	8.467045139694569E-7	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999955437503	WITHOUT_CLASSIFICATION	4.456249695120819E-8	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999449445864	WITHOUT_CLASSIFICATION	5.5055413467962365E-8	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998866417404	WITHOUT_CLASSIFICATION	1.1335825962107012E-7	TEST
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999998827487148	WITHOUT_CLASSIFICATION	1.1725128521498714E-7	TEST
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999937442647872	WITHOUT_CLASSIFICATION	6.255735212803145E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997851141651	WITHOUT_CLASSIFICATION	2.1488583499346066E-7	TEST
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998104796837	WITHOUT_CLASSIFICATION	1.8952031631316182E-7	TEST
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999628278884	WITHOUT_CLASSIFICATION	3.7172111575623496E-8	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998454568517	WITHOUT_CLASSIFICATION	1.5454314826317368E-7	TEST
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998797775332	WITHOUT_CLASSIFICATION	1.2022246673861305E-7	TEST
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996328330351	WITHOUT_CLASSIFICATION	3.671669649651117E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999947409881	WITHOUT_CLASSIFICATION	5.259011901837501E-8	TEST
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999998289564178	WITHOUT_CLASSIFICATION	1.710435821556285E-7	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998151925479	WITHOUT_CLASSIFICATION	1.8480745218297618E-7	TEST
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999614778868	WITHOUT_CLASSIFICATION	3.8522113157381864E-8	TEST
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999191523173	WITHOUT_CLASSIFICATION	8.084768267139695E-8	TEST
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999956084066373	WITHOUT_CLASSIFICATION	4.391593362800001E-6	TEST
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999999768419362	WITHOUT_CLASSIFICATION	2.315806381070493E-8	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999999914947726	WITHOUT_CLASSIFICATION	8.505227367357974E-9	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999249581366028	WITHOUT_CLASSIFICATION	7.504186339724925E-5	TEST
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999911675757801	WITHOUT_CLASSIFICATION	8.832424219892537E-5	TEST
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984368319346	WITHOUT_CLASSIFICATION	1.5631680654461151E-6	TEST
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999798830908	WITHOUT_CLASSIFICATION	2.0116909188068864E-8	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999993034552567	WITHOUT_CLASSIFICATION	6.965447433441083E-7	TEST
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999761421762	WITHOUT_CLASSIFICATION	2.3857823765401064E-8	TEST
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999957850697	WITHOUT_CLASSIFICATION	4.2149303285445555E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999985038490221	WITHOUT_CLASSIFICATION	1.4961509779327075E-6	TEST
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999896062660646	WITHOUT_CLASSIFICATION	1.0393733935325788E-5	TEST
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999653695104	WITHOUT_CLASSIFICATION	3.4630489678529097E-8	TEST
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999860287884943	WITHOUT_CLASSIFICATION	1.397121150560104E-5	TEST
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998855927433	WITHOUT_CLASSIFICATION	1.1440725664674327E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999984997278957	WITHOUT_CLASSIFICATION	1.5002721043582952E-6	TEST
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993260297114	WITHOUT_CLASSIFICATION	6.739702884978616E-7	TEST
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.99974116940048	WITHOUT_CLASSIFICATION	2.588305995200949E-4	TEST
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999592124842841	WITHOUT_CLASSIFICATION	4.0787515715845124E-5	TEST
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999999875483777	WITHOUT_CLASSIFICATION	1.2451622216481618E-8	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.99999821192071	WITHOUT_CLASSIFICATION	1.78807928995016E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999976843149	WITHOUT_CLASSIFICATION	2.3156851586135397E-9	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999996579259919	WITHOUT_CLASSIFICATION	3.420740082054736E-7	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999997294549468	WITHOUT_CLASSIFICATION	2.7054505326421197E-7	TEST
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999698202426	WITHOUT_CLASSIFICATION	3.017975740747277E-8	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999784452932	WITHOUT_CLASSIFICATION	2.1554706811578175E-8	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993906009105	WITHOUT_CLASSIFICATION	6.093990895709403E-7	TEST
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999192190622	WITHOUT_CLASSIFICATION	8.078093780543156E-8	TEST
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999819949515	WITHOUT_CLASSIFICATION	1.8005048399786495E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998755384563	WITHOUT_CLASSIFICATION	1.2446154376112356E-7	TEST
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999383345857	WITHOUT_CLASSIFICATION	6.166541436452309E-8	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999949787821	WITHOUT_CLASSIFICATION	5.021217913652657E-9	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999619678138	WITHOUT_CLASSIFICATION	3.803218623795341E-8	TEST
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999991939740135	WITHOUT_CLASSIFICATION	8.060259865806607E-7	TEST
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999999431629628	WITHOUT_CLASSIFICATION	5.683703718705671E-8	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999999020850223	WITHOUT_CLASSIFICATION	9.79149777050448E-8	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999997461541316	WITHOUT_CLASSIFICATION	2.5384586837916414E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997757129956	WITHOUT_CLASSIFICATION	2.2428700449275257E-7	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999998939865048	WITHOUT_CLASSIFICATION	1.0601349511001797E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999997559493533	WITHOUT_CLASSIFICATION	2.4405064669705436E-6	TEST
// early exit...	WITHOUT_CLASSIFICATION	0.9999998952007672	WITHOUT_CLASSIFICATION	1.047992328115681E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999987478627406	WITHOUT_CLASSIFICATION	1.2521372594256237E-6	TEST
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999994327762548	WITHOUT_CLASSIFICATION	5.672237452451805E-7	TEST
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999948153642977	WITHOUT_CLASSIFICATION	5.184635702281968E-6	TEST
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999254553744	WITHOUT_CLASSIFICATION	7.454462563200387E-8	TEST
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999999861408046	WITHOUT_CLASSIFICATION	1.385919541377019E-7	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999932848137162	WITHOUT_CLASSIFICATION	6.715186283777918E-6	TEST
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999934111922637	WITHOUT_CLASSIFICATION	6.588807736378615E-6	TEST
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999983787146765	WITHOUT_CLASSIFICATION	1.6212853235357973E-6	TEST
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999992704822283	WITHOUT_CLASSIFICATION	7.295177716815663E-7	TEST
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999978141316748	WITHOUT_CLASSIFICATION	2.1858683252318497E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999604957568	WITHOUT_CLASSIFICATION	3.9504243218030465E-8	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999998641191368	WITHOUT_CLASSIFICATION	1.3588086320350089E-7	TEST
//bad cast	WITHOUT_CLASSIFICATION	0.999996084945818	WITHOUT_CLASSIFICATION	3.915054181876591E-6	TEST
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999982432873852	WITHOUT_CLASSIFICATION	1.7567126147570705E-6	TEST
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999607380054002	WITHOUT_CLASSIFICATION	3.9261994599787453E-5	TEST
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999979892687447	WITHOUT_CLASSIFICATION	2.010731255298043E-6	TEST
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999988079065307	WITHOUT_CLASSIFICATION	1.1920934693153499E-6	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999982924686476	WITHOUT_CLASSIFICATION	1.7075313524610726E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998428179868	WITHOUT_CLASSIFICATION	1.5718201320006998E-6	TEST
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999997148377041	WITHOUT_CLASSIFICATION	2.851622958690501E-7	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999939092272352	WITHOUT_CLASSIFICATION	6.0907727647141564E-6	TEST
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999968125714424	WITHOUT_CLASSIFICATION	3.187428557738796E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999924631273145	WITHOUT_CLASSIFICATION	7.536872685590656E-6	TEST
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999972135941638	WITHOUT_CLASSIFICATION	2.7864058362707144E-6	TEST
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999962107375225	WITHOUT_CLASSIFICATION	3.7892624773743814E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999534476433	WITHOUT_CLASSIFICATION	4.655235674803132E-8	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999993362073	WITHOUT_CLASSIFICATION	6.637926401588402E-10	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999996607478844	WITHOUT_CLASSIFICATION	3.392521155827499E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.999990387510526	WITHOUT_CLASSIFICATION	9.612489473918407E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999976008393333	WITHOUT_CLASSIFICATION	2.3991606668001354E-6	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9999996607478844	WITHOUT_CLASSIFICATION	3.392521155827499E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999069450725	WITHOUT_CLASSIFICATION	9.305492761514339E-8	TEST
// or its key changed	WITHOUT_CLASSIFICATION	0.9999997853695788	WITHOUT_CLASSIFICATION	2.1463042114706229E-7	TEST
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999993915436634	WITHOUT_CLASSIFICATION	6.084563366555893E-7	TEST
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999972690498894	WITHOUT_CLASSIFICATION	2.730950110675506E-6	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999842918341	WITHOUT_CLASSIFICATION	1.5708165911497217E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999542453162	WITHOUT_CLASSIFICATION	4.5754683810059466E-8	TEST
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999672187052989	WITHOUT_CLASSIFICATION	3.278129470111187E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999996298774209	WITHOUT_CLASSIFICATION	3.701225791745557E-7	TEST
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999870824704	WITHOUT_CLASSIFICATION	1.2917529562119251E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999982365530352	WITHOUT_CLASSIFICATION	1.7634469647433822E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999902442848	WITHOUT_CLASSIFICATION	9.755715235918998E-9	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999469435457	WITHOUT_CLASSIFICATION	5.305645433992616E-8	TEST
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998535074837	WITHOUT_CLASSIFICATION	1.4649251640038321E-7	TEST
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999408772606	WITHOUT_CLASSIFICATION	5.912273939534635E-7	TEST
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999747874414	WITHOUT_CLASSIFICATION	2.52125585488073E-8	TEST
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999772433887334	WITHOUT_CLASSIFICATION	2.2756611266531526E-5	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999941273382851	WITHOUT_CLASSIFICATION	5.872661714860271E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999941273382851	WITHOUT_CLASSIFICATION	5.872661714860271E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999920467227	WITHOUT_CLASSIFICATION	7.953277335200736E-9	TEST
//optimization	WITHOUT_CLASSIFICATION	0.9999929030528409	WITHOUT_CLASSIFICATION	7.096947159039618E-6	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999959768247831	WITHOUT_CLASSIFICATION	4.0231752169067206E-6	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999924153793694	WITHOUT_CLASSIFICATION	7.5846206306349984E-6	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999999719708424	WITHOUT_CLASSIFICATION	2.8029157655519012E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995342733688045	WITHOUT_CLASSIFICATION	4.6572663119540103E-4	TEST
//memory optimization	WITHOUT_CLASSIFICATION	0.9999981810277142	WITHOUT_CLASSIFICATION	1.8189722857853349E-6	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999972413222	WITHOUT_CLASSIFICATION	2.7586778564106137E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998151864002	WITHOUT_CLASSIFICATION	1.8481359984148407E-7	TEST
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999997499001761	WITHOUT_CLASSIFICATION	2.500998239214922E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999337456285	WITHOUT_CLASSIFICATION	6.625437150064035E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999979010308	WITHOUT_CLASSIFICATION	2.0989691986938574E-9	TEST
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999998791932015	WITHOUT_CLASSIFICATION	1.2080679835460594E-7	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999988671464958	WITHOUT_CLASSIFICATION	1.132853504151336E-6	TEST
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999946643043	WITHOUT_CLASSIFICATION	5.335695581662657E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991532954859	WITHOUT_CLASSIFICATION	8.467045139694569E-7	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999923744081674	WITHOUT_CLASSIFICATION	7.625591832636916E-6	TEST
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999498013427	WITHOUT_CLASSIFICATION	5.019865741547603E-8	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999979140252768	WITHOUT_CLASSIFICATION	2.0859747230981486E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9957300328836115	WITHOUT_CLASSIFICATION	0.004269967116388516	TEST
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999918445699	WITHOUT_CLASSIFICATION	8.155430125943655E-9	TEST
//unwrap it	WITHOUT_CLASSIFICATION	0.9999980200286234	WITHOUT_CLASSIFICATION	1.979971376746225E-6	TEST
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999599951405	WITHOUT_CLASSIFICATION	4.000485961506408E-8	TEST
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999691639421	WITHOUT_CLASSIFICATION	3.083605796301547E-8	TEST
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999968690286	WITHOUT_CLASSIFICATION	3.1309714040355466E-9	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999915436598	WITHOUT_CLASSIFICATION	8.45634012867024E-9	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997747796214	WITHOUT_CLASSIFICATION	2.2522037856382406E-7	TEST
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999999164743236	WITHOUT_CLASSIFICATION	8.352567638893525E-8	TEST
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999960210453339	WITHOUT_CLASSIFICATION	3.978954666073121E-6	TEST
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999993224671732	WITHOUT_CLASSIFICATION	6.775328268004588E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999954652290607	WITHOUT_CLASSIFICATION	4.534770939311399E-6	TEST
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996878052324	WITHOUT_CLASSIFICATION	3.121947675898952E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9999956671514533	WITHOUT_CLASSIFICATION	4.3328485466593905E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999945868941943	WITHOUT_CLASSIFICATION	5.413105805739267E-6	TEST
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999994485100686	WITHOUT_CLASSIFICATION	5.51489931304424E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998083454007	WITHOUT_CLASSIFICATION	1.916545993914723E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999893669793872	WITHOUT_CLASSIFICATION	1.0633020612821052E-5	TEST
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999997442707275	WITHOUT_CLASSIFICATION	2.557292725410986E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997273408701	WITHOUT_CLASSIFICATION	2.7265913000780173E-7	TEST
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999999138077521	WITHOUT_CLASSIFICATION	8.619224789794156E-7	TEST
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999993915342175	WITHOUT_CLASSIFICATION	6.084657825836865E-7	TEST
// create one	WITHOUT_CLASSIFICATION	0.9999998956799689	WITHOUT_CLASSIFICATION	1.0432003102118688E-7	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999968379389	WITHOUT_CLASSIFICATION	3.1620609942777937E-9	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999903654695	WITHOUT_CLASSIFICATION	9.634530568196463E-9	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996968724106	WITHOUT_CLASSIFICATION	3.0312758932480985E-7	TEST
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999999574426501	WITHOUT_CLASSIFICATION	4.255734987693638E-8	TEST
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999883424526	WITHOUT_CLASSIFICATION	1.1657547408167922E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999041295151	WITHOUT_CLASSIFICATION	9.587048494629467E-8	TEST
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999064392378	WITHOUT_CLASSIFICATION	9.356076225111217E-8	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999999995778193	WITHOUT_CLASSIFICATION	4.2218069778088686E-9	TEST
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999885770324	WITHOUT_CLASSIFICATION	1.142296761225773E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000166623	WITHOUT_CLASSIFICATION	9.998333768992928E-8	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999995820738	WITHOUT_CLASSIFICATION	4.179262750354634E-10	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999474882694	WITHOUT_CLASSIFICATION	5.251173064080612E-8	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999352947355	WITHOUT_CLASSIFICATION	6.470526442022644E-8	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9999999474882694	WITHOUT_CLASSIFICATION	5.251173064080612E-8	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999919202449012	WITHOUT_CLASSIFICATION	8.079755098825847E-6	TEST
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998062708805	WITHOUT_CLASSIFICATION	1.937291194773447E-7	TEST
// named parameter	WITHOUT_CLASSIFICATION	0.9999997617016402	WITHOUT_CLASSIFICATION	2.3829835987023915E-7	TEST
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999676566078	WITHOUT_CLASSIFICATION	3.23433921887962E-8	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999993569106136	WITHOUT_CLASSIFICATION	6.430893864296522E-7	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999953826255893	WITHOUT_CLASSIFICATION	4.6173744107374635E-6	TEST
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999999535766736	WITHOUT_CLASSIFICATION	4.6423326374515534E-8	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999021663806	WITHOUT_CLASSIFICATION	9.78336193847493E-8	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999999985413393	WITHOUT_CLASSIFICATION	1.4586607008590081E-8	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999997568827353	WITHOUT_CLASSIFICATION	2.4311726469884055E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999999706820455	WITHOUT_CLASSIFICATION	2.9317954539443666E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999987000341	WITHOUT_CLASSIFICATION	1.2999658981337287E-9	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999903790982977	WITHOUT_CLASSIFICATION	9.620901702295571E-6	TEST
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999993642242444	WITHOUT_CLASSIFICATION	6.357757556363394E-7	TEST
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999211723118	WITHOUT_CLASSIFICATION	7.882768819626306E-8	TEST
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999993254297	WITHOUT_CLASSIFICATION	6.745702170994284E-10	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501495058	WITHOUT_CLASSIFICATION	9.94985049419767E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501495058	WITHOUT_CLASSIFICATION	9.94985049419767E-6	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999997427352726	WITHOUT_CLASSIFICATION	2.572647274592657E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999969619775576	WITHOUT_CLASSIFICATION	3.038022442400289E-6	TEST
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999956093966	WITHOUT_CLASSIFICATION	4.39060347471202E-9	TEST
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999889254089	WITHOUT_CLASSIFICATION	1.1074591071464671E-8	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999951132474	WITHOUT_CLASSIFICATION	4.886752603797771E-8	TEST
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994741301133	WITHOUT_CLASSIFICATION	5.258698867058722E-7	TEST
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999972817119577	WITHOUT_CLASSIFICATION	2.7182880422514548E-6	TEST
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999998517408148	WITHOUT_CLASSIFICATION	1.482591851969628E-6	TEST
// grab its current state	WITHOUT_CLASSIFICATION	0.9999998602220901	WITHOUT_CLASSIFICATION	1.3977790993860913E-7	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999731392356	WITHOUT_CLASSIFICATION	2.6860764376236486E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999535230082	WITHOUT_CLASSIFICATION	4.647699168265723E-8	TEST
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999200189558	WITHOUT_CLASSIFICATION	7.9981044286337E-8	TEST
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999903824758	WITHOUT_CLASSIFICATION	9.6175242522865E-9	TEST
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999361929952	WITHOUT_CLASSIFICATION	6.380700478546482E-8	TEST
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999999374421661	WITHOUT_CLASSIFICATION	6.255783391568984E-8	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999389010457	WITHOUT_CLASSIFICATION	6.109895434569528E-8	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999269286802	WITHOUT_CLASSIFICATION	7.307131981659727E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999985993939157	WITHOUT_CLASSIFICATION	1.4006060842573987E-6	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999999491744663	WITHOUT_CLASSIFICATION	5.082553360509633E-8	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999999999551261	WITHOUT_CLASSIFICATION	4.4873905641762614E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997433386898	WITHOUT_CLASSIFICATION	2.566613101206193E-7	TEST
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999999958232335	WITHOUT_CLASSIFICATION	4.176766509596372E-8	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999806827627	WITHOUT_CLASSIFICATION	1.9317237268078092E-8	TEST
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999815081044	WITHOUT_CLASSIFICATION	1.849189550679465E-8	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999994424798699	WITHOUT_CLASSIFICATION	5.57520130126E-7	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999997689381883	WITHOUT_CLASSIFICATION	2.310618116687235E-7	TEST
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998307534145	WITHOUT_CLASSIFICATION	1.692465854795459E-7	TEST
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999984256674909	WITHOUT_CLASSIFICATION	1.5743325091197762E-6	TEST
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999978860618527	WITHOUT_CLASSIFICATION	2.113938147285335E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999995013299531	WITHOUT_CLASSIFICATION	4.98670046895276E-7	TEST
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999951418390335	WITHOUT_CLASSIFICATION	4.858160966500521E-6	TEST
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999997293756191	WITHOUT_CLASSIFICATION	2.706243809055641E-7	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999036535895429	WITHOUT_CLASSIFICATION	9.634641045708617E-5	TEST
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999985052313145	WITHOUT_CLASSIFICATION	1.4947686854773241E-6	TEST
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999995711626142	WITHOUT_CLASSIFICATION	4.2883738580761893E-7	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999925774973	WITHOUT_CLASSIFICATION	7.4225027295108165E-9	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999840206627	WITHOUT_CLASSIFICATION	1.597933727703219E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999992495741709	WITHOUT_CLASSIFICATION	7.50425829131317E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999878240774	WITHOUT_CLASSIFICATION	1.2175922721128432E-8	TEST
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999744117386	WITHOUT_CLASSIFICATION	2.5588261329720407E-8	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999889803077	WITHOUT_CLASSIFICATION	1.1019692314708477E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999698514916	WITHOUT_CLASSIFICATION	3.0148508398563405E-7	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.9999988576007556	WITHOUT_CLASSIFICATION	1.1423992444527362E-6	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999999821359551	WITHOUT_CLASSIFICATION	1.7864044840862065E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999984765663	WITHOUT_CLASSIFICATION	1.5234337045381735E-9	TEST
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999999979475531	WITHOUT_CLASSIFICATION	2.0524468954945993E-8	TEST
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999999942041677	WITHOUT_CLASSIFICATION	5.795832218541418E-9	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999701861092	WITHOUT_CLASSIFICATION	2.98138908140438E-8	TEST
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998557232291	WITHOUT_CLASSIFICATION	1.4427677073559282E-7	TEST
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999969846218559	WITHOUT_CLASSIFICATION	3.0153781442050733E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993730442153	WITHOUT_CLASSIFICATION	6.269557846590578E-7	TEST
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999966794452037	WITHOUT_CLASSIFICATION	3.3205547962937743E-6	TEST
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999990688630477	WITHOUT_CLASSIFICATION	9.311369522651851E-7	TEST
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999991249140634	WITHOUT_CLASSIFICATION	8.750859367017234E-7	TEST
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999980467166325	WITHOUT_CLASSIFICATION	1.9532833674060302E-6	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.99999973381627	WITHOUT_CLASSIFICATION	2.6618372998201537E-7	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.99999973381627	WITHOUT_CLASSIFICATION	2.6618372998201537E-7	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999935612858359	WITHOUT_CLASSIFICATION	6.438714164099881E-5	TEST
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999987397323782	WITHOUT_CLASSIFICATION	1.2602676219304576E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998532679015	WITHOUT_CLASSIFICATION	1.4673209839099677E-7	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999827978723	WITHOUT_CLASSIFICATION	1.7202127648755837E-8	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999921106731	WITHOUT_CLASSIFICATION	7.889326832297949E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999998900875646	WITHOUT_CLASSIFICATION	1.0991243547671221E-7	TEST
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999752483366	WITHOUT_CLASSIFICATION	2.475166337174015E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999995574615169	WITHOUT_CLASSIFICATION	4.4253848298156993E-7	TEST
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997954482052018	WITHOUT_CLASSIFICATION	2.045517947980682E-4	TEST
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999786281999	WITHOUT_CLASSIFICATION	2.137180017329876E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999919099026265	WITHOUT_CLASSIFICATION	8.090097373469084E-6	TEST
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998618605506	WITHOUT_CLASSIFICATION	1.3813944945228034E-7	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.99998652859579	WITHOUT_CLASSIFICATION	1.3471404210043402E-5	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999922495346	WITHOUT_CLASSIFICATION	7.750465359416585E-9	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999037209353	WITHOUT_CLASSIFICATION	9.627906468917182E-7	TEST
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999982031811188	WITHOUT_CLASSIFICATION	1.7968188812477737E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999999152246	WITHOUT_CLASSIFICATION	8.47754096244479E-10	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9999973642478457	WITHOUT_CLASSIFICATION	2.635752154386713E-6	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999959316651231	WITHOUT_CLASSIFICATION	4.068334876963531E-6	TEST
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999997022225644	WITHOUT_CLASSIFICATION	2.977774356299023E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999910434436	WITHOUT_CLASSIFICATION	8.956556397028474E-9	TEST
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999994103085244	WITHOUT_CLASSIFICATION	5.896914756321089E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219738416	WITHOUT_CLASSIFICATION	7.878026158398042E-6	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999999942552892	WITHOUT_CLASSIFICATION	5.744710915906365E-9	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999999653491903	WITHOUT_CLASSIFICATION	3.4650809681591834E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999998642960076	WITHOUT_CLASSIFICATION	1.3570399233028777E-7	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999990248829171	WITHOUT_CLASSIFICATION	9.751170828732085E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999730699568342	WITHOUT_CLASSIFICATION	2.693004316574843E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999134532239	WITHOUT_CLASSIFICATION	8.654677601624692E-8	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219738416	WITHOUT_CLASSIFICATION	7.878026158398042E-6	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998126320495	WITHOUT_CLASSIFICATION	1.8736795052697172E-7	TEST
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999996500817	WITHOUT_CLASSIFICATION	3.4991837328933514E-10	TEST
//DELETED	WITHOUT_CLASSIFICATION	0.999858595347332	WITHOUT_CLASSIFICATION	1.4140465266801244E-4	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993891465246	WITHOUT_CLASSIFICATION	6.108534753617786E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999249344366	WITHOUT_CLASSIFICATION	7.50655633469143E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999951699639389	WITHOUT_CLASSIFICATION	4.830036061094122E-5	TEST
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999814020718	WITHOUT_CLASSIFICATION	1.8597928262513664E-8	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998552960913	WITHOUT_CLASSIFICATION	1.4470390864659415E-7	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999966687648961	WITHOUT_CLASSIFICATION	3.3312351040127676E-6	TEST
//before cascade!	WITHOUT_CLASSIFICATION	0.9999993891465246	WITHOUT_CLASSIFICATION	6.108534753617786E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999911094654899	WITHOUT_CLASSIFICATION	8.890534510040844E-6	TEST
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998413063004	WITHOUT_CLASSIFICATION	1.5869369956372004E-7	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999998309223416	WITHOUT_CLASSIFICATION	1.6907765841666057E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999938342775178	WITHOUT_CLASSIFICATION	6.165722482246424E-6	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998495985198	WITHOUT_CLASSIFICATION	1.5040148007794502E-7	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999535230082	WITHOUT_CLASSIFICATION	4.647699168265723E-8	TEST
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999466713075	WITHOUT_CLASSIFICATION	5.332869243914963E-8	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999987968531879	WITHOUT_CLASSIFICATION	1.203146812131872E-6	TEST
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997885568642	WITHOUT_CLASSIFICATION	2.1144313583408283E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999998048999754	WITHOUT_CLASSIFICATION	1.9510002463242836E-7	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999909987123516	WITHOUT_CLASSIFICATION	9.00128764840907E-6	TEST
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999983323563778	WITHOUT_CLASSIFICATION	1.667643622131919E-6	TEST
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999831059741066	WITHOUT_CLASSIFICATION	1.6894025893489628E-5	TEST
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999990002730429	WITHOUT_CLASSIFICATION	9.997269571108163E-7	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.99999695497096	WITHOUT_CLASSIFICATION	3.0450290400307083E-6	TEST
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997966877332	WITHOUT_CLASSIFICATION	2.0331226683928114E-7	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999814960094511	WITHOUT_CLASSIFICATION	1.850399054898328E-5	TEST
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999844588949	WITHOUT_CLASSIFICATION	1.5541104995122474E-8	TEST
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999153666934	WITHOUT_CLASSIFICATION	8.463330658045597E-8	TEST
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999998912831207	WITHOUT_CLASSIFICATION	1.087168792427006E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999984129152	WITHOUT_CLASSIFICATION	1.5870848424982847E-9	TEST
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999998696218809	WITHOUT_CLASSIFICATION	1.303781191139618E-7	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999985939462498	WITHOUT_CLASSIFICATION	1.4060537501438329E-6	TEST
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998373406243	WITHOUT_CLASSIFICATION	1.6265937571099613E-7	TEST
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999524249482	WITHOUT_CLASSIFICATION	4.757505190356031E-8	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999994053334182	WITHOUT_CLASSIFICATION	5.946665817984467E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999984837913329	WITHOUT_CLASSIFICATION	1.5162086671195146E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.99999998608942	WITHOUT_CLASSIFICATION	1.3910579935633773E-8	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999993173924472	WITHOUT_CLASSIFICATION	6.826075528032201E-7	TEST
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999991241349248	WITHOUT_CLASSIFICATION	8.758650753780051E-7	TEST
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999986587261878	WITHOUT_CLASSIFICATION	1.3412738122222505E-6	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9999871029650402	WITHOUT_CLASSIFICATION	1.2897034959793704E-5	TEST
// Error message constants.	WITHOUT_CLASSIFICATION	0.99999992273821	WITHOUT_CLASSIFICATION	7.726178998524712E-8	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998763722031	WITHOUT_CLASSIFICATION	1.2362779693959258E-7	TEST
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999295606933	WITHOUT_CLASSIFICATION	7.043930673975101E-8	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999989359469832	WITHOUT_CLASSIFICATION	1.0640530167793052E-6	TEST
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999999726754047	WITHOUT_CLASSIFICATION	2.732459529657241E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999432223377	WITHOUT_CLASSIFICATION	5.6777662454346526E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999997331961	WITHOUT_CLASSIFICATION	2.6680397003004227E-10	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999994469232186	WITHOUT_CLASSIFICATION	5.530767813194211E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999997489671627	WITHOUT_CLASSIFICATION	2.510328372480033E-7	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999999899510406	WITHOUT_CLASSIFICATION	1.0048959460484546E-8	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999675393046	WITHOUT_CLASSIFICATION	3.2460695365706754E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999993852202184	WITHOUT_CLASSIFICATION	6.147797816616622E-7	TEST
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999258173631	WITHOUT_CLASSIFICATION	7.41826369649602E-8	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993436652178	WITHOUT_CLASSIFICATION	6.563347821460743E-7	TEST
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999185555108	WITHOUT_CLASSIFICATION	8.14444890928774E-8	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999945381036	WITHOUT_CLASSIFICATION	5.461896342131804E-9	TEST
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999964302825205	WITHOUT_CLASSIFICATION	3.5697174796090136E-6	TEST
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.99999954940366	WITHOUT_CLASSIFICATION	4.5059633999285357E-7	TEST
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99996810609746	WITHOUT_CLASSIFICATION	3.189390253997615E-5	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999983467833803	WITHOUT_CLASSIFICATION	1.6532166196911318E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999996203016782	WITHOUT_CLASSIFICATION	3.796983217721998E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999999282121244	WITHOUT_CLASSIFICATION	7.178787560027801E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999994100578395	WITHOUT_CLASSIFICATION	5.899421604366091E-7	TEST
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999975797333075	WITHOUT_CLASSIFICATION	2.4202666923770747E-6	TEST
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999999949274824	WITHOUT_CLASSIFICATION	5.072517744982374E-9	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999999791923953	WITHOUT_CLASSIFICATION	2.0807604689571886E-7	TEST
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999886909215	WITHOUT_CLASSIFICATION	1.1309078434600243E-8	TEST
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999998927084942	WITHOUT_CLASSIFICATION	1.0729150584988848E-7	TEST
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999791355377605	WITHOUT_CLASSIFICATION	2.0864462239396603E-5	TEST
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999911074380515	WITHOUT_CLASSIFICATION	8.892561948485558E-6	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998763722031	WITHOUT_CLASSIFICATION	1.2362779693959258E-7	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999936375902	WITHOUT_CLASSIFICATION	6.3624098056941576E-9	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999998529553	WITHOUT_CLASSIFICATION	1.4704483398149075E-10	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999996566745498	WITHOUT_CLASSIFICATION	3.433254500950262E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999988435406537	WITHOUT_CLASSIFICATION	1.156459346259444E-6	TEST
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999515675575	WITHOUT_CLASSIFICATION	4.84324425566085E-8	TEST
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997508343162	WITHOUT_CLASSIFICATION	2.4916568378243277E-7	TEST
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997847199584	WITHOUT_CLASSIFICATION	2.1528004166504437E-7	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999951777446	WITHOUT_CLASSIFICATION	4.822255362065517E-9	TEST
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.99999999304925	WITHOUT_CLASSIFICATION	6.950749907838348E-9	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999989994326771	WITHOUT_CLASSIFICATION	1.0005673228683064E-6	TEST
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999981830286	WITHOUT_CLASSIFICATION	1.8169714035415841E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406545727587	WITHOUT_CLASSIFICATION	5.9345427241188684E-5	TEST
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998991810406	WITHOUT_CLASSIFICATION	1.0081895929906087E-7	TEST
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999993842061823	WITHOUT_CLASSIFICATION	6.157938177983348E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999919202449012	WITHOUT_CLASSIFICATION	8.079755098825847E-6	TEST
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999986420464	WITHOUT_CLASSIFICATION	1.3579536326290797E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999999501486	WITHOUT_CLASSIFICATION	4.985140300255279E-10	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999755015766	WITHOUT_CLASSIFICATION	2.449842336719485E-8	TEST
// all clear	WITHOUT_CLASSIFICATION	0.9999999127172658	WITHOUT_CLASSIFICATION	8.72827341347132E-8	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999993789107	WITHOUT_CLASSIFICATION	6.210893582576054E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641717706	WITHOUT_CLASSIFICATION	2.1358282293223204E-6	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641717706	WITHOUT_CLASSIFICATION	2.1358282293223204E-6	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998722188509	WITHOUT_CLASSIFICATION	1.277811491692579E-7	TEST
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999993011011098	WITHOUT_CLASSIFICATION	6.988988902614533E-7	TEST
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999713631645	WITHOUT_CLASSIFICATION	2.863683554085959E-8	TEST
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999997815036207	WITHOUT_CLASSIFICATION	2.184963793415235E-7	TEST
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999999762905085	WITHOUT_CLASSIFICATION	2.3709491531847486E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999999989655523	WITHOUT_CLASSIFICATION	1.034447704104998E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999988780137679	WITHOUT_CLASSIFICATION	1.121986232055461E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998171223932	WITHOUT_CLASSIFICATION	1.8287760696113644E-7	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998171223932	WITHOUT_CLASSIFICATION	1.8287760696113644E-7	TEST
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999986571189039	WITHOUT_CLASSIFICATION	1.3428810960517164E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999995307084679	WITHOUT_CLASSIFICATION	4.692915319987246E-7	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999769203533	WITHOUT_CLASSIFICATION	2.3079646696274548E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999701398395	WITHOUT_CLASSIFICATION	2.9860160494269747E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999701398395	WITHOUT_CLASSIFICATION	2.9860160494269747E-7	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999701398395	WITHOUT_CLASSIFICATION	2.9860160494269747E-7	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999994288231285	WITHOUT_CLASSIFICATION	5.711768713397526E-7	TEST
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999264362383	WITHOUT_CLASSIFICATION	7.356376170257262E-8	TEST
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999975408035936	WITHOUT_CLASSIFICATION	2.4591964063817205E-6	TEST
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999926618104288	WITHOUT_CLASSIFICATION	7.3381895712107146E-6	TEST
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999885184853	WITHOUT_CLASSIFICATION	1.1481514734766678E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999923648513	WITHOUT_CLASSIFICATION	7.635148741251725E-9	TEST
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999813049519	WITHOUT_CLASSIFICATION	1.869504806388562E-8	TEST
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999821747909579	WITHOUT_CLASSIFICATION	1.7825209042129394E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999394570203	WITHOUT_CLASSIFICATION	6.054297979067907E-8	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9999997366392739	WITHOUT_CLASSIFICATION	2.633607261912129E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997997037746	WITHOUT_CLASSIFICATION	2.002962254272159E-7	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999997151675751	WITHOUT_CLASSIFICATION	2.848324247978633E-7	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999631778901	WITHOUT_CLASSIFICATION	3.682210985555478E-8	TEST
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999812337047	WITHOUT_CLASSIFICATION	1.8766295301413963E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999955549349	WITHOUT_CLASSIFICATION	4.445065101890082E-8	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999997149295812	WITHOUT_CLASSIFICATION	2.850704187912934E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999976655927626	WITHOUT_CLASSIFICATION	2.3344072374378253E-6	TEST
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999976655927626	WITHOUT_CLASSIFICATION	2.3344072374378253E-6	TEST
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982040654743	WITHOUT_CLASSIFICATION	1.795934525592203E-6	TEST
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982040654743	WITHOUT_CLASSIFICATION	1.795934525592203E-6	TEST
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999982210878271	WITHOUT_CLASSIFICATION	1.778912172896739E-6	TEST
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999978475270532	WITHOUT_CLASSIFICATION	2.15247294676774E-6	TEST
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999978475270532	WITHOUT_CLASSIFICATION	2.15247294676774E-6	TEST
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999987579992746	WITHOUT_CLASSIFICATION	1.2420007254412393E-6	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999996784028281	WITHOUT_CLASSIFICATION	3.2159717190151583E-6	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999221365684	WITHOUT_CLASSIFICATION	7.786343152806115E-8	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999978641717706	WITHOUT_CLASSIFICATION	2.1358282293223204E-6	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999722137227	WITHOUT_CLASSIFICATION	2.778627733169146E-8	TEST
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999996784028281	WITHOUT_CLASSIFICATION	3.2159717190151583E-6	TEST
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999994195702959	WITHOUT_CLASSIFICATION	5.804297041450661E-7	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999998478816421	WITHOUT_CLASSIFICATION	1.5211835803938993E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999988446610448	WITHOUT_CLASSIFICATION	1.1553389551469623E-6	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995230039755	WITHOUT_CLASSIFICATION	4.769960244508716E-7	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999532179484	WITHOUT_CLASSIFICATION	4.678205153427807E-8	TEST
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999424045162852	WITHOUT_CLASSIFICATION	5.7595483714834436E-5	TEST
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998590014036	WITHOUT_CLASSIFICATION	1.4099859637490334E-7	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999999390518608	WITHOUT_CLASSIFICATION	6.094813920839905E-7	TEST
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999990991272844	WITHOUT_CLASSIFICATION	9.008727156327483E-7	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999923870577151	WITHOUT_CLASSIFICATION	7.612942284918367E-6	TEST
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999962972236	WITHOUT_CLASSIFICATION	3.7027763526190197E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999991701317708	WITHOUT_CLASSIFICATION	8.298682291987977E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500344892	WITHOUT_CLASSIFICATION	1.4996551068636454E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.999999205098179	WITHOUT_CLASSIFICATION	7.949018211029195E-7	TEST
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999997417337962	WITHOUT_CLASSIFICATION	2.582662037662202E-7	TEST
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999746471698	WITHOUT_CLASSIFICATION	2.5352830129911906E-8	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999759521829	WITHOUT_CLASSIFICATION	2.4047817135009133E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997807046432	WITHOUT_CLASSIFICATION	2.1929535672538223E-7	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999997807046432	WITHOUT_CLASSIFICATION	2.1929535672538223E-7	TEST
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999981537042261	WITHOUT_CLASSIFICATION	1.8462957739205004E-6	TEST
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999987656310099	WITHOUT_CLASSIFICATION	1.2343689900809877E-6	TEST
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994219406476	WITHOUT_CLASSIFICATION	5.780593524768818E-7	TEST
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999989070675169	WITHOUT_CLASSIFICATION	1.092932483005091E-6	TEST
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999993315662259	WITHOUT_CLASSIFICATION	6.684337740960274E-7	TEST
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999999887804926	WITHOUT_CLASSIFICATION	1.1219507458892934E-8	TEST
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999973544591	WITHOUT_CLASSIFICATION	2.6455408449101284E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999940476438125	WITHOUT_CLASSIFICATION	5.95235618739567E-6	TEST
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999995600990714	WITHOUT_CLASSIFICATION	4.39900928508756E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999540793425	WITHOUT_CLASSIFICATION	4.5920657613678114E-8	TEST
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999344666592	WITHOUT_CLASSIFICATION	6.553334076213539E-8	TEST
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406545727587	WITHOUT_CLASSIFICATION	5.9345427241188684E-5	TEST
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999971810658	WITHOUT_CLASSIFICATION	2.818934248017518E-9	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996788223593	WITHOUT_CLASSIFICATION	3.2117764079313887E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999992581463083	WITHOUT_CLASSIFICATION	7.418536917233068E-7	TEST
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999992574724436	WITHOUT_CLASSIFICATION	7.425275563672751E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999990360458	WITHOUT_CLASSIFICATION	9.639542030538663E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999990360458	WITHOUT_CLASSIFICATION	9.639542030538663E-9	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999938740621349	WITHOUT_CLASSIFICATION	6.125937865026388E-6	TEST
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999216762208	WITHOUT_CLASSIFICATION	7.832377924668564E-8	TEST
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999996347857248	WITHOUT_CLASSIFICATION	3.652142751182308E-7	TEST
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999991637199831	WITHOUT_CLASSIFICATION	8.362800170119843E-7	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999993641231419	WITHOUT_CLASSIFICATION	6.358768580289466E-7	TEST
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999985920307202	WITHOUT_CLASSIFICATION	1.4079692797843215E-6	TEST
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999996793392832	WITHOUT_CLASSIFICATION	3.206607167932714E-7	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999661719187	WITHOUT_CLASSIFICATION	3.382808130418756E-8	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999998912816	WITHOUT_CLASSIFICATION	1.0871839977310479E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999897503901	WITHOUT_CLASSIFICATION	1.024960994464362E-8	TEST
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999701028182	WITHOUT_CLASSIFICATION	2.98971817594823E-8	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999661719187	WITHOUT_CLASSIFICATION	3.382808130418756E-8	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999999896563069	WITHOUT_CLASSIFICATION	1.0343693144069617E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999997388431752	WITHOUT_CLASSIFICATION	2.6115682491183574E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999937995638	WITHOUT_CLASSIFICATION	6.20043614656087E-9	TEST
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999978201548205	WITHOUT_CLASSIFICATION	2.1798451795970997E-6	TEST
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999805055267	WITHOUT_CLASSIFICATION	1.9494473284171468E-8	TEST
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999910302791	WITHOUT_CLASSIFICATION	8.969720963550375E-9	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999920139196	WITHOUT_CLASSIFICATION	7.98608036723725E-9	TEST
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999287072302	WITHOUT_CLASSIFICATION	7.129276975009974E-8	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999810981545	WITHOUT_CLASSIFICATION	1.8901845538734017E-8	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986770973838	WITHOUT_CLASSIFICATION	1.3229026162916174E-6	TEST
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999995595955239	WITHOUT_CLASSIFICATION	4.4040447611607966E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999553052143	WITHOUT_CLASSIFICATION	4.469478561384424E-8	TEST
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999674187708	WITHOUT_CLASSIFICATION	3.258122916807802E-8	TEST
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996202445276	WITHOUT_CLASSIFICATION	3.797554723552277E-7	TEST
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999984842677553	WITHOUT_CLASSIFICATION	1.5157322446238053E-6	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999992863400288	WITHOUT_CLASSIFICATION	7.136599712309233E-7	TEST
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994048415645	WITHOUT_CLASSIFICATION	5.951584354930693E-7	TEST
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999889031191435	WITHOUT_CLASSIFICATION	1.1096880856685327E-5	TEST
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999818301876184	WITHOUT_CLASSIFICATION	1.8169812381569274E-5	TEST
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999924517811	WITHOUT_CLASSIFICATION	7.548218887972373E-9	TEST
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998850139833	WITHOUT_CLASSIFICATION	1.1498601678358919E-7	TEST
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999777252697	WITHOUT_CLASSIFICATION	2.227473020903922E-8	TEST
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999883911351503	WITHOUT_CLASSIFICATION	1.1608864849827341E-5	TEST
// #2	WITHOUT_CLASSIFICATION	0.9999982788197213	WITHOUT_CLASSIFICATION	1.7211802787690076E-6	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999925874596	WITHOUT_CLASSIFICATION	7.412540382242475E-9	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999985111250778	WITHOUT_CLASSIFICATION	1.4888749221663525E-6	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999883891256	WITHOUT_CLASSIFICATION	1.1610874398890984E-8	TEST
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999990064421	WITHOUT_CLASSIFICATION	9.935578969572436E-10	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999984251474	WITHOUT_CLASSIFICATION	1.5748525413812354E-9	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999997844865056	WITHOUT_CLASSIFICATION	2.1551349441757663E-7	TEST
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999995574753	WITHOUT_CLASSIFICATION	4.425247156229786E-10	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999999952358668	WITHOUT_CLASSIFICATION	4.7641331888058286E-8	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999997387683254	WITHOUT_CLASSIFICATION	2.612316746797956E-7	TEST
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999999966313081	WITHOUT_CLASSIFICATION	3.368691914120828E-8	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999827494296	WITHOUT_CLASSIFICATION	1.725057047404442E-8	TEST
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998288551891	WITHOUT_CLASSIFICATION	1.711448107738476E-7	TEST
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999998407359	WITHOUT_CLASSIFICATION	1.592641009001456E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999965367501	WITHOUT_CLASSIFICATION	3.4632498276388943E-9	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999996974190889	WITHOUT_CLASSIFICATION	3.0258091111291915E-7	TEST
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999999736319511	WITHOUT_CLASSIFICATION	2.6368048889131703E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998324178324	WITHOUT_CLASSIFICATION	1.6758216757592972E-7	TEST
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999854826807	WITHOUT_CLASSIFICATION	1.451731927756334E-8	TEST
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999981353641	WITHOUT_CLASSIFICATION	1.8646358659150714E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999919262345	WITHOUT_CLASSIFICATION	8.073765656943959E-9	TEST
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999999971997769	WITHOUT_CLASSIFICATION	2.8002231064132076E-8	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999940364229	WITHOUT_CLASSIFICATION	5.963577054736686E-9	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998600043636	WITHOUT_CLASSIFICATION	1.3999563633389441E-7	TEST
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999893770528855	WITHOUT_CLASSIFICATION	1.062294711445911E-5	TEST
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999958858419614	WITHOUT_CLASSIFICATION	4.114158038602187E-6	TEST
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997501417672	WITHOUT_CLASSIFICATION	2.498582327241242E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984011694146	WITHOUT_CLASSIFICATION	1.598830585392914E-6	TEST
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999548411348	WITHOUT_CLASSIFICATION	4.5158865194281685E-8	TEST
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999825662037	WITHOUT_CLASSIFICATION	1.7433796270229583E-8	TEST
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999879070989	WITHOUT_CLASSIFICATION	1.2092901104887758E-7	TEST
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999961425782	WITHOUT_CLASSIFICATION	3.857421814655508E-9	TEST
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999856119433	WITHOUT_CLASSIFICATION	1.4388056701771308E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997585906862	WITHOUT_CLASSIFICATION	2.4140931369335993E-7	TEST
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999972239379	WITHOUT_CLASSIFICATION	2.7760621008541723E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999263074697	WITHOUT_CLASSIFICATION	7.36925302496295E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999993345595828	WITHOUT_CLASSIFICATION	6.654404171487667E-7	TEST
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998700921299	WITHOUT_CLASSIFICATION	1.299078702335443E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.99999965306095	WITHOUT_CLASSIFICATION	3.4693905003402717E-7	TEST
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999999662290822	WITHOUT_CLASSIFICATION	3.3770917949322646E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999834955241907	WITHOUT_CLASSIFICATION	1.6504475809261626E-5	TEST
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998138021207	WITHOUT_CLASSIFICATION	1.8619787941810125E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999973442811363	WITHOUT_CLASSIFICATION	2.655718863715776E-6	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984011694146	WITHOUT_CLASSIFICATION	1.598830585392914E-6	TEST
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999999893771786	WITHOUT_CLASSIFICATION	1.0622821400519963E-7	TEST
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999995496772097	WITHOUT_CLASSIFICATION	4.5032279033561826E-7	TEST
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999729233371	WITHOUT_CLASSIFICATION	2.7076662845552787E-8	TEST
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999805622962	WITHOUT_CLASSIFICATION	1.9437703850605745E-8	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999980704226432	WITHOUT_CLASSIFICATION	1.9295773568685545E-6	TEST
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997505878844	WITHOUT_CLASSIFICATION	2.4941211555292464E-7	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999998912816	WITHOUT_CLASSIFICATION	1.0871839977310479E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999723213876778	WITHOUT_CLASSIFICATION	2.7678612322184593E-5	TEST
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999827494296	WITHOUT_CLASSIFICATION	1.725057047404442E-8	TEST
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999999026091456	WITHOUT_CLASSIFICATION	9.73908544028858E-7	TEST
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999989231465	WITHOUT_CLASSIFICATION	1.0768535007114363E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995399763755	WITHOUT_CLASSIFICATION	4.600236245122682E-7	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999995785136306	WITHOUT_CLASSIFICATION	4.214863693560437E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999997066297825	WITHOUT_CLASSIFICATION	2.93370217536091E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999997850283978	WITHOUT_CLASSIFICATION	2.1497160222771958E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999990338960757	WITHOUT_CLASSIFICATION	9.661039242460737E-7	TEST
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997034394228	WITHOUT_CLASSIFICATION	2.965605772012857E-7	TEST
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999946004702	WITHOUT_CLASSIFICATION	5.399529818846518E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947579521	WITHOUT_CLASSIFICATION	5.242047837922971E-9	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999999000473465	WITHOUT_CLASSIFICATION	9.995265351943628E-8	TEST
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999598911209	WITHOUT_CLASSIFICATION	4.010887916399143E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999607308332	WITHOUT_CLASSIFICATION	3.926916690301379E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999607308332	WITHOUT_CLASSIFICATION	3.926916690301379E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999761778694	WITHOUT_CLASSIFICATION	2.3822130599958586E-8	TEST
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999996225440819	WITHOUT_CLASSIFICATION	3.774559180548015E-7	TEST
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999820334751	WITHOUT_CLASSIFICATION	1.7966524873683822E-8	TEST
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999642385078	WITHOUT_CLASSIFICATION	3.5761492203422717E-7	TEST
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999919724762	WITHOUT_CLASSIFICATION	8.027523740156548E-9	TEST
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999999650007441	WITHOUT_CLASSIFICATION	3.499925589037814E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999988411666	WITHOUT_CLASSIFICATION	1.1588333912744792E-9	TEST
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999997992762857	WITHOUT_CLASSIFICATION	2.0072371431373534E-6	TEST
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999886973727	WITHOUT_CLASSIFICATION	1.1302627199680358E-8	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994773918374	WITHOUT_CLASSIFICATION	5.226081626696475E-7	TEST
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999999691820127	WITHOUT_CLASSIFICATION	3.081798725853402E-8	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999476580849	WITHOUT_CLASSIFICATION	5.234191519850395E-8	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999999978429844	WITHOUT_CLASSIFICATION	2.1570155038436096E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999937558451	WITHOUT_CLASSIFICATION	6.244154910407756E-9	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999974683867	WITHOUT_CLASSIFICATION	2.5316132942676376E-8	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999506855707	WITHOUT_CLASSIFICATION	4.931442920930125E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999986376468843	WITHOUT_CLASSIFICATION	1.362353115678324E-6	TEST
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999719705044	WITHOUT_CLASSIFICATION	2.8029495564574407E-8	TEST
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999817297174	WITHOUT_CLASSIFICATION	1.8270282621681603E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999972054026813	WITHOUT_CLASSIFICATION	2.7945973187955267E-6	TEST
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.999999961185129	WITHOUT_CLASSIFICATION	3.881487103729296E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999994993435183	WITHOUT_CLASSIFICATION	5.006564816245933E-7	TEST
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999560322925	WITHOUT_CLASSIFICATION	4.396770748859655E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9999611849486328	WITHOUT_CLASSIFICATION	3.8815051367210283E-5	TEST
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990581268339	WITHOUT_CLASSIFICATION	9.418731660326165E-7	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999099903828	WITHOUT_CLASSIFICATION	9.000961712089266E-8	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999108484727	WITHOUT_CLASSIFICATION	8.915152737129347E-8	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999999997026341	WITHOUT_CLASSIFICATION	2.9736589979158576E-9	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999964382259725	WITHOUT_CLASSIFICATION	3.5617740274027708E-6	TEST
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999676115716	WITHOUT_CLASSIFICATION	3.2388428299809174E-8	TEST
/*	WITHOUT_CLASSIFICATION	0.9998734823392886	WITHOUT_CLASSIFICATION	1.2651766071125086E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999771997781146	WITHOUT_CLASSIFICATION	2.2800221885385494E-5	TEST
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999885752165	WITHOUT_CLASSIFICATION	1.1424783392900633E-8	TEST
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999999985338822	WITHOUT_CLASSIFICATION	1.4661178044694984E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998093463909	WITHOUT_CLASSIFICATION	1.9065360910099554E-7	TEST
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997906140156	WITHOUT_CLASSIFICATION	2.0938598453936301E-7	TEST
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999994892403324	WITHOUT_CLASSIFICATION	5.107596676030877E-6	TEST
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999999940964038	WITHOUT_CLASSIFICATION	5.903596101700547E-9	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999329302448	WITHOUT_CLASSIFICATION	6.706975515482001E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996501055337	WITHOUT_CLASSIFICATION	3.4989446622481935E-7	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998980067873	WITHOUT_CLASSIFICATION	1.019932126743611E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999941621291	WITHOUT_CLASSIFICATION	5.837870843614114E-9	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999726794821501	WITHOUT_CLASSIFICATION	2.732051784996663E-5	TEST
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999958318814854	WITHOUT_CLASSIFICATION	4.168118514558245E-6	TEST
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999983847558924	WITHOUT_CLASSIFICATION	1.6152441075605317E-6	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999303613729	WITHOUT_CLASSIFICATION	6.963862705738328E-8	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9972570157090208	WITHOUT_CLASSIFICATION	0.0027429842909792337	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999767609647	WITHOUT_CLASSIFICATION	2.323903529878062E-8	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999992968777	WITHOUT_CLASSIFICATION	7.031223065063426E-9	TEST
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999060157967	WITHOUT_CLASSIFICATION	9.398420332901679E-8	TEST
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999347923529	WITHOUT_CLASSIFICATION	6.520764703759486E-8	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999952004364	WITHOUT_CLASSIFICATION	4.799563546501474E-9	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999991703530208	WITHOUT_CLASSIFICATION	8.296469792011249E-7	TEST
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999997779334492	WITHOUT_CLASSIFICATION	2.2206655077049866E-7	TEST
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999999227248663	WITHOUT_CLASSIFICATION	7.72751337306135E-8	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999999974475743	WITHOUT_CLASSIFICATION	2.552425689259309E-9	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999970378462066	WITHOUT_CLASSIFICATION	2.9621537932485277E-6	TEST
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998911695388	WITHOUT_CLASSIFICATION	1.0883046124623394E-7	TEST
// Dialect function	WITHOUT_CLASSIFICATION	0.999999976221774	WITHOUT_CLASSIFICATION	2.3778226008975213E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999999294681925	WITHOUT_CLASSIFICATION	7.053180751455319E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999993647492136	WITHOUT_CLASSIFICATION	6.352507864417462E-7	TEST
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997970392581	WITHOUT_CLASSIFICATION	2.0296074190892562E-7	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999999090162703	WITHOUT_CLASSIFICATION	9.098372971298269E-8	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998599267079	WITHOUT_CLASSIFICATION	1.4007329215683131E-7	TEST
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999499215423	WITHOUT_CLASSIFICATION	5.007845782232611E-8	TEST
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999071140391	WITHOUT_CLASSIFICATION	9.288596086274807E-8	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999818889258445	WITHOUT_CLASSIFICATION	1.811107415560494E-5	TEST
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999750990898	WITHOUT_CLASSIFICATION	2.490091014797406E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999414409325	WITHOUT_CLASSIFICATION	5.855906750971302E-8	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999613657281	WITHOUT_CLASSIFICATION	3.8634271847452E-8	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999414409325	WITHOUT_CLASSIFICATION	5.855906750971302E-8	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998680534974	WITHOUT_CLASSIFICATION	1.3194650258243516E-7	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999999994366995	WITHOUT_CLASSIFICATION	5.6330049973535885E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999915970421	WITHOUT_CLASSIFICATION	8.402957904025944E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999628913693	WITHOUT_CLASSIFICATION	3.710863069554215E-8	TEST
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999697136298	WITHOUT_CLASSIFICATION	3.02863700934264E-8	TEST
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999255095359	WITHOUT_CLASSIFICATION	7.449046405774047E-8	TEST
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993626608984	WITHOUT_CLASSIFICATION	6.373391015120948E-7	TEST
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999965507604293	WITHOUT_CLASSIFICATION	3.4492395707508635E-6	TEST
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999996719970302	WITHOUT_CLASSIFICATION	3.280029697719377E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999868855186	WITHOUT_CLASSIFICATION	1.3114481349813467E-8	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999992397406822	WITHOUT_CLASSIFICATION	7.602593177450792E-7	TEST
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999789637083	WITHOUT_CLASSIFICATION	2.1036291748823094E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999788633547	WITHOUT_CLASSIFICATION	2.1136645314575358E-7	TEST
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999982330031227	WITHOUT_CLASSIFICATION	1.7669968771716097E-6	TEST
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999221106027	WITHOUT_CLASSIFICATION	7.788939725855862E-8	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999965931525	WITHOUT_CLASSIFICATION	3.406847564098943E-9	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999905798724	WITHOUT_CLASSIFICATION	9.420127587342458E-9	TEST
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999154326354	WITHOUT_CLASSIFICATION	8.456736466781168E-8	TEST
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999862292067	WITHOUT_CLASSIFICATION	1.3770793201057674E-8	TEST
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999975415578375	WITHOUT_CLASSIFICATION	2.4584421624355692E-6	TEST
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999994946163491	WITHOUT_CLASSIFICATION	5.053836509510145E-7	TEST
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999984391814029	WITHOUT_CLASSIFICATION	1.5608185970796156E-6	TEST
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998423958763935	WITHOUT_CLASSIFICATION	1.576041236066755E-4	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999941852905	WITHOUT_CLASSIFICATION	5.814709492391638E-9	TEST
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999981062127636	WITHOUT_CLASSIFICATION	1.8937872364143152E-6	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999863254408659	WITHOUT_CLASSIFICATION	1.3674559134264758E-5	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999968294607644	WITHOUT_CLASSIFICATION	3.170539235580743E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999992733545864	WITHOUT_CLASSIFICATION	7.266454136565001E-7	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99999994867929	WITHOUT_CLASSIFICATION	5.13207099842594E-8	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999945587286243	WITHOUT_CLASSIFICATION	5.441271375689863E-6	TEST
//after reset!	WITHOUT_CLASSIFICATION	0.9999929971651915	WITHOUT_CLASSIFICATION	7.0028348085509765E-6	TEST
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999997124740171	WITHOUT_CLASSIFICATION	2.87525982954684E-7	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999111424577	WITHOUT_CLASSIFICATION	8.885754229872767E-8	TEST
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999999828143999	WITHOUT_CLASSIFICATION	1.7185600097261675E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.99999973337228	WITHOUT_CLASSIFICATION	2.6662771997624283E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999958808290049	WITHOUT_CLASSIFICATION	4.119170994986059E-6	TEST
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999948518698031	WITHOUT_CLASSIFICATION	5.148130196844398E-6	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999480854862	WITHOUT_CLASSIFICATION	5.191451374891564E-8	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9999912005363975	WITHOUT_CLASSIFICATION	8.79946360254265E-6	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999989326459626	WITHOUT_CLASSIFICATION	1.067354037406659E-6	TEST
// an association	WITHOUT_CLASSIFICATION	0.9999974624252659	WITHOUT_CLASSIFICATION	2.5375747341612184E-6	TEST
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999996158303956	WITHOUT_CLASSIFICATION	3.841696043417623E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999538206878739	WITHOUT_CLASSIFICATION	4.617931212604569E-5	TEST
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999863254408659	WITHOUT_CLASSIFICATION	1.3674559134264758E-5	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999988535148787	WITHOUT_CLASSIFICATION	1.1464851212888728E-5	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.999999972095944	WITHOUT_CLASSIFICATION	2.7904055972196098E-8	TEST
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999942909068062	WITHOUT_CLASSIFICATION	5.709093193652277E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999983959644037	WITHOUT_CLASSIFICATION	1.6040355962982127E-6	TEST
//special case	WITHOUT_CLASSIFICATION	0.9999998137459202	WITHOUT_CLASSIFICATION	1.862540798319371E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999125218398	WITHOUT_CLASSIFICATION	8.74781601262784E-8	TEST
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999965965415	WITHOUT_CLASSIFICATION	3.403458551407535E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999934974893198	WITHOUT_CLASSIFICATION	6.5025106802353835E-6	TEST
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999992779125406	WITHOUT_CLASSIFICATION	7.220874594530617E-7	TEST
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999904906245	WITHOUT_CLASSIFICATION	9.509375456399295E-9	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.999997198158907	WITHOUT_CLASSIFICATION	2.801841092958949E-6	TEST
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998880879115	WITHOUT_CLASSIFICATION	1.1191208847719567E-7	TEST
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999951866801381	WITHOUT_CLASSIFICATION	4.813319861972311E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999981342793044	WITHOUT_CLASSIFICATION	1.8657206956154581E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999851367309	WITHOUT_CLASSIFICATION	1.4863269117516862E-8	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999955806439	WITHOUT_CLASSIFICATION	4.419356032234585E-9	TEST
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999067017586	WITHOUT_CLASSIFICATION	9.329824143463289E-8	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998334765153	WITHOUT_CLASSIFICATION	1.665234846153705E-7	TEST
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999952782397	WITHOUT_CLASSIFICATION	4.721760364153653E-9	TEST
//many-to-many	WITHOUT_CLASSIFICATION	0.999988535148787	WITHOUT_CLASSIFICATION	1.1464851212888728E-5	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999978007963257	WITHOUT_CLASSIFICATION	2.1992036742600442E-6	TEST
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999712352938	WITHOUT_CLASSIFICATION	2.8764706089123333E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999998832140792	WITHOUT_CLASSIFICATION	1.167859209238179E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998662801567	WITHOUT_CLASSIFICATION	1.3371984340973201E-7	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999999881991929	WITHOUT_CLASSIFICATION	1.1800807104502866E-7	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999859055991	WITHOUT_CLASSIFICATION	1.4094400900417974E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999859055991	WITHOUT_CLASSIFICATION	1.4094400900417974E-6	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999934548604	WITHOUT_CLASSIFICATION	6.545139600090215E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999859055991	WITHOUT_CLASSIFICATION	1.4094400900417974E-6	TEST
// not known!	WITHOUT_CLASSIFICATION	0.99999859055991	WITHOUT_CLASSIFICATION	1.4094400900417974E-6	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999982808959034	WITHOUT_CLASSIFICATION	1.7191040966236918E-6	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999977062565975	WITHOUT_CLASSIFICATION	2.2937434026208606E-6	TEST
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999518918416	WITHOUT_CLASSIFICATION	4.81081584041025E-7	TEST
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995346488111	WITHOUT_CLASSIFICATION	4.653511889749222E-7	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999730694562	WITHOUT_CLASSIFICATION	2.6930543723430423E-8	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998124945229	WITHOUT_CLASSIFICATION	1.8750547728100722E-7	TEST
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999992598792782	WITHOUT_CLASSIFICATION	7.401207219060359E-7	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999968803474761	WITHOUT_CLASSIFICATION	3.119652523958773E-6	TEST
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999989523420774	WITHOUT_CLASSIFICATION	1.0476579225784273E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999980278852389	WITHOUT_CLASSIFICATION	1.972114761095052E-5	TEST
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999992819274672	WITHOUT_CLASSIFICATION	7.180725327559665E-7	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994446742452	WITHOUT_CLASSIFICATION	5.553257548037343E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999992339460135	WITHOUT_CLASSIFICATION	7.660539865125621E-7	TEST
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999824435132489	WITHOUT_CLASSIFICATION	1.755648675111099E-5	TEST
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997355658949	WITHOUT_CLASSIFICATION	2.6443410515476865E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998813796381123	WITHOUT_CLASSIFICATION	1.1862036188765918E-4	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000166623	WITHOUT_CLASSIFICATION	9.998333768992928E-8	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999966209637484	WITHOUT_CLASSIFICATION	3.3790362515196484E-6	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999834079504695	WITHOUT_CLASSIFICATION	1.6592049530563763E-5	TEST
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999776800600061	WITHOUT_CLASSIFICATION	2.2319939993861246E-5	TEST
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999997020818356	WITHOUT_CLASSIFICATION	2.979181642875453E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999998485911563	WITHOUT_CLASSIFICATION	1.514088436076292E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999000166623	WITHOUT_CLASSIFICATION	9.998333768992928E-8	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9999968294607644	WITHOUT_CLASSIFICATION	3.170539235580743E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.999998214674882	WITHOUT_CLASSIFICATION	1.7853251180182137E-6	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998454568517	WITHOUT_CLASSIFICATION	1.5454314826317368E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999947409881	WITHOUT_CLASSIFICATION	5.259011901837501E-8	TEST
//anything else	WITHOUT_CLASSIFICATION	0.9999978580145019	WITHOUT_CLASSIFICATION	2.1419854980506446E-6	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999671846515	WITHOUT_CLASSIFICATION	3.2815348548827274E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999982463015118	WITHOUT_CLASSIFICATION	1.7536984882853576E-6	TEST
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999995623144948	WITHOUT_CLASSIFICATION	4.3768550525801227E-7	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999996982119409	WITHOUT_CLASSIFICATION	3.017880590826527E-7	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998276446042	WITHOUT_CLASSIFICATION	1.7235539580645654E-7	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999996260598423	WITHOUT_CLASSIFICATION	3.739401577403323E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998924354314	WITHOUT_CLASSIFICATION	1.0756456856103225E-7	TEST
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999998903994757	WITHOUT_CLASSIFICATION	1.0960052432468436E-7	TEST
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998423523387	WITHOUT_CLASSIFICATION	1.5764766133989314E-7	TEST
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.99999744438618	WITHOUT_CLASSIFICATION	2.5556138200857154E-6	TEST
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999818943736	WITHOUT_CLASSIFICATION	1.8105626453570387E-8	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999439891445	WITHOUT_CLASSIFICATION	5.6010855456544195E-8	TEST
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999996935220657	WITHOUT_CLASSIFICATION	3.064779342248442E-7	TEST
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999537067826	WITHOUT_CLASSIFICATION	4.6293217384531474E-8	TEST
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999770799722	WITHOUT_CLASSIFICATION	2.2920027798884457E-7	TEST
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999979482390743	WITHOUT_CLASSIFICATION	2.051760925670877E-6	TEST
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999952883159964	WITHOUT_CLASSIFICATION	4.711684003597479E-6	TEST
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999986226221	WITHOUT_CLASSIFICATION	1.377377939935297E-9	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999996982119409	WITHOUT_CLASSIFICATION	3.017880590826527E-7	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999992971694973	WITHOUT_CLASSIFICATION	7.028305026704324E-7	TEST
//do replacements	WITHOUT_CLASSIFICATION	0.9999997964577748	WITHOUT_CLASSIFICATION	2.0354222512379676E-7	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999998181217058	WITHOUT_CLASSIFICATION	1.8187829415880228E-7	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999984418289223	WITHOUT_CLASSIFICATION	1.558171077674206E-6	TEST
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981401559895	WITHOUT_CLASSIFICATION	1.8598440103813596E-6	TEST
//hilo params	WITHOUT_CLASSIFICATION	0.9999954752812634	WITHOUT_CLASSIFICATION	4.524718736554176E-6	TEST
//sql = query;	WITHOUT_CLASSIFICATION	0.9999990086906028	WITHOUT_CLASSIFICATION	9.913093972506896E-7	TEST
// performance opt	WITHOUT_CLASSIFICATION	0.999999955912546	WITHOUT_CLASSIFICATION	4.4087454050711415E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999991796765012	WITHOUT_CLASSIFICATION	8.203234987069963E-7	TEST
//hilo config	WITHOUT_CLASSIFICATION	0.9999972653048282	WITHOUT_CLASSIFICATION	2.7346951716808262E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999997399273	WITHOUT_CLASSIFICATION	2.6007269941157752E-8	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996873005137	WITHOUT_CLASSIFICATION	3.1269948625020366E-7	TEST
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999986230831633	WITHOUT_CLASSIFICATION	1.3769168367574547E-6	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999984215273446	WITHOUT_CLASSIFICATION	1.5784726553322104E-6	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999954906063919	WITHOUT_CLASSIFICATION	4.5093936080595465E-6	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772030025	WITHOUT_CLASSIFICATION	7.227969974059213E-7	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999997399273	WITHOUT_CLASSIFICATION	2.6007269941157752E-8	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999992373072119	WITHOUT_CLASSIFICATION	7.626927881972548E-7	TEST
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999989523672151	WITHOUT_CLASSIFICATION	1.0476327848588906E-6	TEST
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999506185375	WITHOUT_CLASSIFICATION	4.9381462455752204E-8	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.99999651858296	WITHOUT_CLASSIFICATION	3.4814170398799045E-6	TEST
// the default...	WITHOUT_CLASSIFICATION	0.9999999464237121	WITHOUT_CLASSIFICATION	5.357628798596641E-8	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999942987488	WITHOUT_CLASSIFICATION	5.701251271335111E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999893197788	WITHOUT_CLASSIFICATION	1.0680221230581267E-8	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997397682594	WITHOUT_CLASSIFICATION	2.602317405830189E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999610778175	WITHOUT_CLASSIFICATION	3.89221825193776E-8	TEST
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998460004673	WITHOUT_CLASSIFICATION	1.5399953259926162E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999483244918	WITHOUT_CLASSIFICATION	5.1675508312383787E-8	TEST
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998543676115	WITHOUT_CLASSIFICATION	1.4563238846588214E-7	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999678786329	WITHOUT_CLASSIFICATION	3.212136709028532E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999678786329	WITHOUT_CLASSIFICATION	3.212136709028532E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999955214892816	WITHOUT_CLASSIFICATION	4.478510718430124E-6	TEST
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999625429611	WITHOUT_CLASSIFICATION	3.74570390025549E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.999999935459903	WITHOUT_CLASSIFICATION	6.454009695294647E-8	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.9999999483776737	WITHOUT_CLASSIFICATION	5.1622326377403704E-8	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999960084713813	WITHOUT_CLASSIFICATION	3.991528618714064E-6	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998625603574	WITHOUT_CLASSIFICATION	1.3743964247403586E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990634921255	WITHOUT_CLASSIFICATION	9.365078745357727E-7	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993441380771	WITHOUT_CLASSIFICATION	6.558619229242291E-7	TEST
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999998295441179	WITHOUT_CLASSIFICATION	1.7045588209985003E-6	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996326209446	WITHOUT_CLASSIFICATION	3.673790553609238E-7	TEST
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998625603574	WITHOUT_CLASSIFICATION	1.3743964247403586E-7	TEST
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990634921255	WITHOUT_CLASSIFICATION	9.365078745357727E-7	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993441380771	WITHOUT_CLASSIFICATION	6.558619229242291E-7	TEST
// Caches	WITHOUT_CLASSIFICATION	0.9999996579198694	WITHOUT_CLASSIFICATION	3.4208013062125435E-7	TEST
//Generators:	WITHOUT_CLASSIFICATION	0.9999959240224113	WITHOUT_CLASSIFICATION	4.075977588556772E-6	TEST
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999418676427	WITHOUT_CLASSIFICATION	5.813235727616339E-8	TEST
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999981149247262	WITHOUT_CLASSIFICATION	1.8850752737630854E-6	TEST
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998187175579	WITHOUT_CLASSIFICATION	1.8128244206027114E-7	TEST
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999920766497448	WITHOUT_CLASSIFICATION	7.923350255311539E-6	TEST
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999992105265159	WITHOUT_CLASSIFICATION	7.89473484178985E-7	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999919434687059	WITHOUT_CLASSIFICATION	8.056531294085868E-6	TEST
//stats	WITHOUT_CLASSIFICATION	0.9999765149105029	WITHOUT_CLASSIFICATION	2.3485089497172344E-5	TEST
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999989331906035	WITHOUT_CLASSIFICATION	1.0668093965904829E-6	TEST
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998421996765	WITHOUT_CLASSIFICATION	1.5780032352586627E-7	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999699445531164	WITHOUT_CLASSIFICATION	3.0055446883600555E-5	TEST
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999992288331683	WITHOUT_CLASSIFICATION	7.711668317131187E-6	TEST
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999693944586	WITHOUT_CLASSIFICATION	3.060554139396778E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999701622948	WITHOUT_CLASSIFICATION	2.9837705120379595E-8	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999996123644758	WITHOUT_CLASSIFICATION	3.876355242001886E-7	TEST
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.998585196212005	WITHOUT_CLASSIFICATION	0.0014148037879949946	TEST
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999855178528545	WITHOUT_CLASSIFICATION	1.4482147145512422E-5	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999999491688499	WITHOUT_CLASSIFICATION	5.0831149987154886E-8	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995340949939	WITHOUT_CLASSIFICATION	4.659050062130022E-7	TEST
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996780238454	WITHOUT_CLASSIFICATION	3.2197615461783547E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999370788651	WITHOUT_CLASSIFICATION	6.292113485360335E-8	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999994732374489	WITHOUT_CLASSIFICATION	5.267625510988317E-7	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999815769071	WITHOUT_CLASSIFICATION	1.8423092962025014E-8	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999717453781	WITHOUT_CLASSIFICATION	2.8254621821105175E-8	TEST
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999938304035113	WITHOUT_CLASSIFICATION	6.169596488628714E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990573560719	WITHOUT_CLASSIFICATION	9.426439280132859E-7	TEST
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969186858387	WITHOUT_CLASSIFICATION	3.08131416128331E-6	TEST
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999832473964	WITHOUT_CLASSIFICATION	1.675260358620749E-8	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957837532556	WITHOUT_CLASSIFICATION	4.2162467444142784E-6	TEST
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980194726824	WITHOUT_CLASSIFICATION	1.980527317628451E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998428179868	WITHOUT_CLASSIFICATION	1.5718201320006998E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999998428179868	WITHOUT_CLASSIFICATION	1.5718201320006998E-6	TEST
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999984805778006	WITHOUT_CLASSIFICATION	1.519422199373408E-6	TEST
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999929493749408	WITHOUT_CLASSIFICATION	7.050625059179418E-6	TEST
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999997966463474	WITHOUT_CLASSIFICATION	2.0335365265842713E-7	TEST
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406545727587	WITHOUT_CLASSIFICATION	5.9345427241188684E-5	TEST
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998894381001	WITHOUT_CLASSIFICATION	1.1056189988343604E-7	TEST
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998167473091	WITHOUT_CLASSIFICATION	1.8325269085576355E-7	TEST
//for EJB3	WITHOUT_CLASSIFICATION	0.999985463585187	WITHOUT_CLASSIFICATION	1.453641481292721E-5	TEST
// just ignore	WITHOUT_CLASSIFICATION	0.9999999336579046	WITHOUT_CLASSIFICATION	6.634209543027805E-8	TEST
// do a check	WITHOUT_CLASSIFICATION	0.9999999534476433	WITHOUT_CLASSIFICATION	4.655235674803132E-8	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995333481967	WITHOUT_CLASSIFICATION	4.666518032421773E-7	TEST
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996996367355	WITHOUT_CLASSIFICATION	3.00363264426968E-7	TEST
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998887191486	WITHOUT_CLASSIFICATION	1.1128085133049269E-7	TEST
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996385381974	WITHOUT_CLASSIFICATION	3.614618026342849E-7	TEST
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999713618624	WITHOUT_CLASSIFICATION	2.8638137594347115E-7	TEST
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995465656414	WITHOUT_CLASSIFICATION	4.5343435864957965E-7	TEST
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995845330761	WITHOUT_CLASSIFICATION	4.154669237518956E-7	TEST
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998789127114	WITHOUT_CLASSIFICATION	1.2108728860286653E-7	TEST
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998775055225	WITHOUT_CLASSIFICATION	1.2249447743372253E-7	TEST
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999453121944	WITHOUT_CLASSIFICATION	5.468780560103606E-7	TEST
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996764335437	WITHOUT_CLASSIFICATION	3.2356645625700995E-7	TEST
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999969150529	WITHOUT_CLASSIFICATION	3.084947083613962E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999940452519004	WITHOUT_CLASSIFICATION	5.954748099640911E-6	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362349727039	WITHOUT_CLASSIFICATION	6.376502729621081E-5	TEST
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999900314636	WITHOUT_CLASSIFICATION	9.968536466982053E-9	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998817118209	WITHOUT_CLASSIFICATION	1.1828817916179959E-7	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999999029568152	WITHOUT_CLASSIFICATION	9.70431849078562E-8	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999994053838072	WITHOUT_CLASSIFICATION	5.94616192937606E-7	TEST
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999147991127	WITHOUT_CLASSIFICATION	8.520088730961531E-8	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362349727039	WITHOUT_CLASSIFICATION	6.376502729621081E-5	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362349727039	WITHOUT_CLASSIFICATION	6.376502729621081E-5	TEST
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999938864736387	WITHOUT_CLASSIFICATION	6.113526361298771E-5	TEST
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999262612966	WITHOUT_CLASSIFICATION	7.3738703308044E-8	TEST
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973816951327	WITHOUT_CLASSIFICATION	2.6183048671482638E-6	TEST
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999999803171153	WITHOUT_CLASSIFICATION	1.968288470073452E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500344892	WITHOUT_CLASSIFICATION	1.4996551068636454E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995340949939	WITHOUT_CLASSIFICATION	4.659050062130022E-7	TEST
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997249619814	WITHOUT_CLASSIFICATION	2.750380186009648E-7	TEST
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999998978404154	WITHOUT_CLASSIFICATION	1.0215958446285583E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999997491613477	WITHOUT_CLASSIFICATION	2.5083865230596076E-7	TEST
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991269784718	WITHOUT_CLASSIFICATION	8.730215282153291E-7	TEST
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996099997575	WITHOUT_CLASSIFICATION	3.9000024260415875E-7	TEST
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998016696647	WITHOUT_CLASSIFICATION	1.983303352881493E-7	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999242147974	WITHOUT_CLASSIFICATION	7.57852024998467E-8	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999999242147974	WITHOUT_CLASSIFICATION	7.57852024998467E-8	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997590952554	WITHOUT_CLASSIFICATION	2.409047445613554E-7	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999997590952554	WITHOUT_CLASSIFICATION	2.409047445613554E-7	TEST
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987095905802	WITHOUT_CLASSIFICATION	1.290409419833796E-6	TEST
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998362965292	WITHOUT_CLASSIFICATION	1.637034707635134E-7	TEST
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999950405921134	WITHOUT_CLASSIFICATION	4.9594078865281804E-6	TEST
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932200169889	WITHOUT_CLASSIFICATION	6.779983011167741E-6	TEST
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999847300783	WITHOUT_CLASSIFICATION	1.5269921741979423E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999999516827036	WITHOUT_CLASSIFICATION	4.831729638602068E-8	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997659602506	WITHOUT_CLASSIFICATION	2.3403974935403601E-7	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999998196257	WITHOUT_CLASSIFICATION	1.8037430005354594E-8	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998836941173	WITHOUT_CLASSIFICATION	1.1630588274494686E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999407345563551	WITHOUT_CLASSIFICATION	5.926544364498926E-5	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998342248995	WITHOUT_CLASSIFICATION	1.6577510048849087E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999999001146862	WITHOUT_CLASSIFICATION	9.988531388607751E-8	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999995283607916	WITHOUT_CLASSIFICATION	4.716392084366152E-7	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999999724199293	WITHOUT_CLASSIFICATION	2.7580070695286252E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999996036044494	WITHOUT_CLASSIFICATION	3.963955506421996E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999473567448	WITHOUT_CLASSIFICATION	5.2643255167403015E-8	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999999473567448	WITHOUT_CLASSIFICATION	5.2643255167403015E-8	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996581336829	WITHOUT_CLASSIFICATION	3.418663171699587E-7	TEST
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999018097182	WITHOUT_CLASSIFICATION	9.819028190325765E-8	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999949793491	WITHOUT_CLASSIFICATION	5.0206508902730356E-8	TEST
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999987397395154	WITHOUT_CLASSIFICATION	1.2602604846966904E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993247702461	WITHOUT_CLASSIFICATION	6.752297539648333E-7	TEST
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938984725394	WITHOUT_CLASSIFICATION	6.101527460618605E-6	TEST
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999929190396	WITHOUT_CLASSIFICATION	7.080960383915123E-9	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999551157284	WITHOUT_CLASSIFICATION	4.488427167953506E-8	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999999962302951	WITHOUT_CLASSIFICATION	3.769704871016636E-9	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999848308283	WITHOUT_CLASSIFICATION	1.5169171696569393E-8	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999997427751	WITHOUT_CLASSIFICATION	2.572248339444486E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999999688267585	WITHOUT_CLASSIFICATION	3.117324152237578E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999532867629	WITHOUT_CLASSIFICATION	4.6713237083480446E-8	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998444156513	WITHOUT_CLASSIFICATION	1.5558434882748842E-7	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999995595763456	WITHOUT_CLASSIFICATION	4.404236544195429E-7	TEST
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999989355263696	WITHOUT_CLASSIFICATION	1.064473630328602E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999573438446	WITHOUT_CLASSIFICATION	4.2656155394306435E-7	TEST
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999993915406067	WITHOUT_CLASSIFICATION	6.084593931829908E-7	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999994055571753	WITHOUT_CLASSIFICATION	5.944428248200237E-7	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999946850029	WITHOUT_CLASSIFICATION	5.314997082272104E-9	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998993509724	WITHOUT_CLASSIFICATION	1.0064902744171222E-7	TEST
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999985380395827	WITHOUT_CLASSIFICATION	1.461960417322322E-6	TEST
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998842768589	WITHOUT_CLASSIFICATION	1.1572314116268466E-7	TEST
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996523474771	WITHOUT_CLASSIFICATION	3.47652522826312E-7	TEST
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999997991681474	WITHOUT_CLASSIFICATION	2.0083185264498258E-7	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999992875216104	WITHOUT_CLASSIFICATION	7.124783896357206E-7	TEST
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997523216967	WITHOUT_CLASSIFICATION	2.4767830330183065E-7	TEST
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999991890352035	WITHOUT_CLASSIFICATION	8.109647964570328E-7	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999838644498	WITHOUT_CLASSIFICATION	1.6135550250066816E-8	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999945868941943	WITHOUT_CLASSIFICATION	5.413105805739267E-6	TEST
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999951471317	WITHOUT_CLASSIFICATION	4.852868288746926E-9	TEST
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998261055519	WITHOUT_CLASSIFICATION	1.7389444818176942E-7	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999999251561728	WITHOUT_CLASSIFICATION	7.48438272105779E-7	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999911510417	WITHOUT_CLASSIFICATION	8.848958403924857E-9	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999849611715178	WITHOUT_CLASSIFICATION	1.5038828482242483E-5	TEST
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999997087395062	WITHOUT_CLASSIFICATION	2.9126049381519617E-7	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999999999152246	WITHOUT_CLASSIFICATION	8.47754096244479E-10	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.999999963880456	WITHOUT_CLASSIFICATION	3.611954408707325E-8	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999975143052	WITHOUT_CLASSIFICATION	2.4856947026928457E-9	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999998451494416	WITHOUT_CLASSIFICATION	1.5485055849650798E-7	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999867259916	WITHOUT_CLASSIFICATION	1.32740084937939E-8	TEST
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999758703478	WITHOUT_CLASSIFICATION	2.4129652151512102E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999999648113397	WITHOUT_CLASSIFICATION	3.5188660298775436E-7	TEST
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999900884455	WITHOUT_CLASSIFICATION	9.911554430866734E-9	TEST
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995771005659	WITHOUT_CLASSIFICATION	4.2289943415068856E-7	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999996344026381	WITHOUT_CLASSIFICATION	3.6559736197959694E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.999998252776636	WITHOUT_CLASSIFICATION	1.7472233639539748E-6	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999900501495058	WITHOUT_CLASSIFICATION	9.94985049419767E-6	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999999407527288	WITHOUT_CLASSIFICATION	5.924727110902036E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9912596953906634	WITHOUT_CLASSIFICATION	0.008740304609336582	TEST
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999999014774087	WITHOUT_CLASSIFICATION	9.852259137209857E-8	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999633775227671	WITHOUT_CLASSIFICATION	3.662247723294015E-5	TEST
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999997912823114	WITHOUT_CLASSIFICATION	2.087176886446043E-7	TEST
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999537694639277	WITHOUT_CLASSIFICATION	4.6230536072256826E-5	TEST
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999990398882407	WITHOUT_CLASSIFICATION	9.601117594145878E-7	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999998887410383	WITHOUT_CLASSIFICATION	1.1125896174108678E-7	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9979655197572401	WITHOUT_CLASSIFICATION	0.002034480242759923	TEST
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999989191148558	WITHOUT_CLASSIFICATION	1.080885144255314E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999530668732	WITHOUT_CLASSIFICATION	4.693312669148781E-8	TEST
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998416223726203	WITHOUT_CLASSIFICATION	1.583776273797595E-4	TEST
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999943760102	WITHOUT_CLASSIFICATION	5.623989838380395E-9	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998509387206	WITHOUT_CLASSIFICATION	1.4906127946534735E-7	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999992346046624	WITHOUT_CLASSIFICATION	7.653953375273096E-7	TEST
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994001133135	WITHOUT_CLASSIFICATION	5.998866865890201E-7	TEST
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998764130523	WITHOUT_CLASSIFICATION	1.235869476555755E-7	TEST
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999997124763	WITHOUT_CLASSIFICATION	2.8752371219729954E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999958750658	WITHOUT_CLASSIFICATION	4.1249341503512956E-9	TEST
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997874434813	WITHOUT_CLASSIFICATION	2.125565186906809E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219738416	WITHOUT_CLASSIFICATION	7.878026158398042E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219738416	WITHOUT_CLASSIFICATION	7.878026158398042E-6	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999994462711732	WITHOUT_CLASSIFICATION	5.537288267496074E-7	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999999207606574	WITHOUT_CLASSIFICATION	7.923934259710733E-7	TEST
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999823546805	WITHOUT_CLASSIFICATION	1.7645319630448425E-8	TEST
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996322629396	WITHOUT_CLASSIFICATION	3.677370603500802E-7	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999935624653	WITHOUT_CLASSIFICATION	6.437534693032021E-9	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.99999848127351	WITHOUT_CLASSIFICATION	1.5187264899591695E-6	TEST
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999860438038	WITHOUT_CLASSIFICATION	1.395619624211868E-8	TEST
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997889007622	WITHOUT_CLASSIFICATION	2.1109923768001988E-7	TEST
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999992577535977	WITHOUT_CLASSIFICATION	7.422464022685996E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998160023711	WITHOUT_CLASSIFICATION	1.8399762886861845E-7	TEST
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999917178242	WITHOUT_CLASSIFICATION	8.282175796827583E-9	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999961067094	WITHOUT_CLASSIFICATION	3.893290504367299E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999995193996817	WITHOUT_CLASSIFICATION	4.806003183107873E-7	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999953311705	WITHOUT_CLASSIFICATION	4.668829439229417E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996540285846	WITHOUT_CLASSIFICATION	3.4597141538150535E-7	TEST
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999989231446531	WITHOUT_CLASSIFICATION	1.0768553470017903E-6	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999998370957237	WITHOUT_CLASSIFICATION	1.6290427632978503E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999998920339406	WITHOUT_CLASSIFICATION	1.0796605936036689E-7	TEST
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999994981767929	WITHOUT_CLASSIFICATION	5.018232071677054E-7	TEST
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999997505289203	WITHOUT_CLASSIFICATION	2.4947107970490048E-6	TEST
// we found it	WITHOUT_CLASSIFICATION	0.9999998865280655	WITHOUT_CLASSIFICATION	1.1347193447538897E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997635918308	WITHOUT_CLASSIFICATION	2.3640816901539957E-7	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999962900982412	WITHOUT_CLASSIFICATION	3.709901758823811E-6	TEST
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999629462886926	WITHOUT_CLASSIFICATION	3.705371130729056E-5	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999821384873	WITHOUT_CLASSIFICATION	1.7861512645689386E-8	TEST
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999993012998682	WITHOUT_CLASSIFICATION	6.987001317823672E-7	TEST
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999999796091513	WITHOUT_CLASSIFICATION	2.0390848698500698E-7	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999990492634593	WITHOUT_CLASSIFICATION	9.507365407418031E-7	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999996708618516	WITHOUT_CLASSIFICATION	3.291381484559922E-7	TEST
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999313851787	WITHOUT_CLASSIFICATION	6.861482122888253E-8	TEST
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997847071608	WITHOUT_CLASSIFICATION	2.1529283928602407E-7	TEST
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999518366142	WITHOUT_CLASSIFICATION	4.816338577319116E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999999092794306	WITHOUT_CLASSIFICATION	9.072056939412682E-8	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9999998579870204	WITHOUT_CLASSIFICATION	1.4201297956888733E-7	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999966226826387	WITHOUT_CLASSIFICATION	3.3773173613389072E-6	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999966226826387	WITHOUT_CLASSIFICATION	3.3773173613389072E-6	TEST
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999999227234171	WITHOUT_CLASSIFICATION	7.727658297475468E-8	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999962346569142	WITHOUT_CLASSIFICATION	3.765343085682497E-6	TEST
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999998940123913	WITHOUT_CLASSIFICATION	1.0598760869673298E-7	TEST
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999999330521735	WITHOUT_CLASSIFICATION	6.694782650588968E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999999928718504	WITHOUT_CLASSIFICATION	7.128149601063356E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999922430824392	WITHOUT_CLASSIFICATION	7.756917560895994E-6	TEST
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999993572402022	WITHOUT_CLASSIFICATION	6.427597978041278E-7	TEST
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999957096699	WITHOUT_CLASSIFICATION	4.290330081732396E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998685099980356	WITHOUT_CLASSIFICATION	1.3149000196444573E-4	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999881464356	WITHOUT_CLASSIFICATION	1.1853564304886217E-8	TEST
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999589350729	WITHOUT_CLASSIFICATION	4.106492718832361E-8	TEST
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999997090594385	WITHOUT_CLASSIFICATION	2.909405614387011E-7	TEST
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999994862099892	WITHOUT_CLASSIFICATION	5.137900106778384E-7	TEST
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999998987327783	WITHOUT_CLASSIFICATION	1.0126722170580048E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996524369917	WITHOUT_CLASSIFICATION	3.4756300822783336E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999986498163044	WITHOUT_CLASSIFICATION	1.350183695628951E-6	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999986498163044	WITHOUT_CLASSIFICATION	1.350183695628951E-6	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999952777365	WITHOUT_CLASSIFICATION	4.7222635767150425E-9	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999998737527495	WITHOUT_CLASSIFICATION	1.2624725045708525E-7	TEST
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999998794082629	WITHOUT_CLASSIFICATION	1.205917370894853E-6	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999824563281	WITHOUT_CLASSIFICATION	1.754367190210209E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999730699568342	WITHOUT_CLASSIFICATION	2.693004316574843E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999146979346	WITHOUT_CLASSIFICATION	8.530206545662572E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996855348695	WITHOUT_CLASSIFICATION	3.144651305494074E-7	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999996855348695	WITHOUT_CLASSIFICATION	3.144651305494074E-7	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999994761799955	WITHOUT_CLASSIFICATION	5.238200043938013E-7	TEST
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999964967626	WITHOUT_CLASSIFICATION	3.5032373654990275E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999979473211573	WITHOUT_CLASSIFICATION	2.0526788426099996E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999994087893	WITHOUT_CLASSIFICATION	5.912107523703008E-10	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999998141648113	WITHOUT_CLASSIFICATION	1.858351886961989E-7	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999938342775178	WITHOUT_CLASSIFICATION	6.165722482246424E-6	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999999961335184	WITHOUT_CLASSIFICATION	3.866481602470213E-9	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999221365684	WITHOUT_CLASSIFICATION	7.786343152806115E-8	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999302015504	WITHOUT_CLASSIFICATION	6.979844958428414E-8	TEST
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999851558509762	WITHOUT_CLASSIFICATION	1.4844149023850115E-5	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999999282121244	WITHOUT_CLASSIFICATION	7.178787560027801E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999988435406537	WITHOUT_CLASSIFICATION	1.156459346259444E-6	TEST
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999984449049868	WITHOUT_CLASSIFICATION	1.555095013297429E-6	TEST
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999982210878271	WITHOUT_CLASSIFICATION	1.778912172896739E-6	TEST
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999964382259725	WITHOUT_CLASSIFICATION	3.5617740274027708E-6	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998589822979	WITHOUT_CLASSIFICATION	1.4101770205388684E-7	TEST
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999998164362359	WITHOUT_CLASSIFICATION	1.8356376416334028E-7	TEST
//by default	WITHOUT_CLASSIFICATION	0.999999494524856	WITHOUT_CLASSIFICATION	5.054751439676659E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999991504855299	WITHOUT_CLASSIFICATION	8.49514470049078E-7	TEST
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999999430194316	WITHOUT_CLASSIFICATION	5.6980568402173547E-8	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997042755813	WITHOUT_CLASSIFICATION	2.9572441871849473E-7	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999987579992746	WITHOUT_CLASSIFICATION	1.2420007254412393E-6	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999948420990322	WITHOUT_CLASSIFICATION	5.157900967802771E-5	TEST
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999999796603267	WITHOUT_CLASSIFICATION	2.033967327339604E-8	TEST
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999573652593	WITHOUT_CLASSIFICATION	4.2634740682971864E-8	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999999483701744	WITHOUT_CLASSIFICATION	5.1629825659671516E-8	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999735091337694	WITHOUT_CLASSIFICATION	2.649086623065573E-5	TEST
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999027057209	WITHOUT_CLASSIFICATION	9.729427912003074E-8	TEST
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999999987596496	WITHOUT_CLASSIFICATION	1.2403504558570272E-9	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999990360458	WITHOUT_CLASSIFICATION	9.639542030538663E-9	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999996950772096	WITHOUT_CLASSIFICATION	3.0492279040639603E-6	TEST
//usually useless	WITHOUT_CLASSIFICATION	0.9999986172234837	WITHOUT_CLASSIFICATION	1.3827765162896716E-6	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997086762312	WITHOUT_CLASSIFICATION	2.9132376881985965E-7	TEST
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998740177932	WITHOUT_CLASSIFICATION	1.259822068804049E-7	TEST
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999989606179623	WITHOUT_CLASSIFICATION	1.0393820377337079E-6	TEST
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999967287964288	WITHOUT_CLASSIFICATION	3.2712035712964455E-6	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9999993619704993	WITHOUT_CLASSIFICATION	6.380295007813484E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999999402738079	WITHOUT_CLASSIFICATION	5.972619208474838E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997782291696	WITHOUT_CLASSIFICATION	2.217708304239728E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998183818877	WITHOUT_CLASSIFICATION	1.816181123927287E-7	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999214799284	WITHOUT_CLASSIFICATION	7.852007150571138E-8	TEST
// ignore it...	WITHOUT_CLASSIFICATION	0.999999868769882	WITHOUT_CLASSIFICATION	1.3123011792922073E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999993915966237	WITHOUT_CLASSIFICATION	6.084033763290225E-7	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998204467496	WITHOUT_CLASSIFICATION	1.7955325049321122E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999986177297	WITHOUT_CLASSIFICATION	1.3822702500478442E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995826192605	WITHOUT_CLASSIFICATION	4.1738073955969457E-7	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997782291696	WITHOUT_CLASSIFICATION	2.217708304239728E-7	TEST
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998183818877	WITHOUT_CLASSIFICATION	1.816181123927287E-7	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999983459651788	WITHOUT_CLASSIFICATION	1.6540348211278945E-6	TEST
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999988797836439	WITHOUT_CLASSIFICATION	1.1202163561177826E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999709956787	WITHOUT_CLASSIFICATION	2.9004321315845552E-8	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999987811064616	WITHOUT_CLASSIFICATION	1.2188935383715838E-6	TEST
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999999956563399	WITHOUT_CLASSIFICATION	4.343660119842606E-9	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998604804448	WITHOUT_CLASSIFICATION	1.3951955519637355E-7	TEST
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999957821380939	WITHOUT_CLASSIFICATION	4.217861906101397E-6	TEST
// }	WITHOUT_CLASSIFICATION	0.9999988334330209	WITHOUT_CLASSIFICATION	1.1665669791988365E-6	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999895567226	WITHOUT_CLASSIFICATION	1.0443277360514175E-8	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999950112574513	WITHOUT_CLASSIFICATION	4.988742548749321E-6	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999997266109969	WITHOUT_CLASSIFICATION	2.7338900307327224E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999950112574513	WITHOUT_CLASSIFICATION	4.988742548749321E-6	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999975813641895	WITHOUT_CLASSIFICATION	2.4186358104351802E-6	TEST
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999963368076256	WITHOUT_CLASSIFICATION	3.6631923745490527E-6	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999975744844357	WITHOUT_CLASSIFICATION	2.425515564316328E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988872526666	WITHOUT_CLASSIFICATION	1.112747333327628E-6	TEST
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999994767955506	WITHOUT_CLASSIFICATION	5.232044494086474E-7	TEST
//}	WITHOUT_CLASSIFICATION	0.999979608420757	WITHOUT_CLASSIFICATION	2.039157924300761E-5	TEST
//}	WITHOUT_CLASSIFICATION	0.999979608420757	WITHOUT_CLASSIFICATION	2.039157924300761E-5	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999939095018588	WITHOUT_CLASSIFICATION	6.09049814116994E-6	TEST
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999990354343884	WITHOUT_CLASSIFICATION	9.645656116079233E-7	TEST
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990186022474	WITHOUT_CLASSIFICATION	9.813977526313317E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999991588574694	WITHOUT_CLASSIFICATION	8.411425305506801E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999995207990208	WITHOUT_CLASSIFICATION	4.792009792914908E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999947093048887	WITHOUT_CLASSIFICATION	5.290695111356794E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986374537705	WITHOUT_CLASSIFICATION	1.3625462294503271E-6	TEST
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999995991195817	WITHOUT_CLASSIFICATION	4.0088041824115653E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999983991182821	WITHOUT_CLASSIFICATION	1.6008817177567848E-6	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999959312681809	WITHOUT_CLASSIFICATION	4.068731819079724E-6	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999987279755748	WITHOUT_CLASSIFICATION	1.272024425231714E-6	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999996749713015	WITHOUT_CLASSIFICATION	3.2502869849279205E-7	TEST
//types	WITHOUT_CLASSIFICATION	0.9999831235909167	WITHOUT_CLASSIFICATION	1.6876409083397747E-5	TEST
// custom sql	WITHOUT_CLASSIFICATION	0.9999998812508902	WITHOUT_CLASSIFICATION	1.1874910973453872E-7	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999983326573579	WITHOUT_CLASSIFICATION	1.6673426421268584E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999998876901	WITHOUT_CLASSIFICATION	1.1230989227131546E-9	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999306916234	WITHOUT_CLASSIFICATION	6.930837657261276E-8	TEST
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999158576656	WITHOUT_CLASSIFICATION	8.414233446264428E-8	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999984970929773	WITHOUT_CLASSIFICATION	1.5029070226074244E-6	TEST
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999092532885622	WITHOUT_CLASSIFICATION	9.074671143774136E-5	TEST
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999826053748	WITHOUT_CLASSIFICATION	1.7394625102694027E-8	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999997075166283	WITHOUT_CLASSIFICATION	2.924833716868959E-6	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999030800168	WITHOUT_CLASSIFICATION	9.69199832040172E-8	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999986353034944	WITHOUT_CLASSIFICATION	1.3646965055677393E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999992003296486	WITHOUT_CLASSIFICATION	7.99670351431215E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999935073868519	WITHOUT_CLASSIFICATION	6.492613148115215E-6	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999965589181	WITHOUT_CLASSIFICATION	3.4410818385697656E-9	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999969730696753	WITHOUT_CLASSIFICATION	3.026930324775232E-6	TEST
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996864678037	WITHOUT_CLASSIFICATION	3.135321963214811E-7	TEST
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999994302922357	WITHOUT_CLASSIFICATION	5.697077641801855E-7	TEST
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999972671909843	WITHOUT_CLASSIFICATION	2.7328090157083205E-5	TEST
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999950746030143	WITHOUT_CLASSIFICATION	4.925396985652076E-6	TEST
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986374537705	WITHOUT_CLASSIFICATION	1.3625462294503271E-6	TEST
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999999836798671	WITHOUT_CLASSIFICATION	1.632013296267607E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999832317683672	WITHOUT_CLASSIFICATION	1.6768231632762426E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9976022406852842	WITHOUT_CLASSIFICATION	0.0023977593147157116	TEST
//an assertion	WITHOUT_CLASSIFICATION	0.9999747765610593	WITHOUT_CLASSIFICATION	2.5223438940678542E-5	TEST
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999998162307018	WITHOUT_CLASSIFICATION	1.8376929814905343E-7	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999991470937688	WITHOUT_CLASSIFICATION	8.529062312525982E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999991588574694	WITHOUT_CLASSIFICATION	8.411425305506801E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999991588574694	WITHOUT_CLASSIFICATION	8.411425305506801E-7	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999999393602175	WITHOUT_CLASSIFICATION	6.063978249811992E-7	TEST
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999974263535554	WITHOUT_CLASSIFICATION	2.5736464445794677E-6	TEST
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999995450688768	WITHOUT_CLASSIFICATION	4.549311231689986E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999999398481565	WITHOUT_CLASSIFICATION	6.015184349134884E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999696270152	WITHOUT_CLASSIFICATION	3.037298480910476E-7	TEST
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995985390757	WITHOUT_CLASSIFICATION	4.0146092432209583E-7	TEST
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999998289981572	WITHOUT_CLASSIFICATION	1.7100184284637173E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999451230269	WITHOUT_CLASSIFICATION	5.4876972989629065E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999999283399532	WITHOUT_CLASSIFICATION	7.1660046815537E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999499004637	WITHOUT_CLASSIFICATION	5.009953624637645E-8	TEST
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999956505568216	WITHOUT_CLASSIFICATION	4.349443178352218E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444590587594	WITHOUT_CLASSIFICATION	5.554094124056448E-5	TEST
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999976682823393	WITHOUT_CLASSIFICATION	2.3317176607756265E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999499004637	WITHOUT_CLASSIFICATION	5.009953624637645E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998148988104	WITHOUT_CLASSIFICATION	1.851011894497023E-7	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999999284005272	WITHOUT_CLASSIFICATION	7.159947278836059E-8	TEST
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999994563324887	WITHOUT_CLASSIFICATION	5.436675113242666E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9985153075894181	WITHOUT_CLASSIFICATION	0.0014846924105818232	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444590587594	WITHOUT_CLASSIFICATION	5.554094124056448E-5	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985822879645	WITHOUT_CLASSIFICATION	1.4177120356049456E-6	TEST
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999912176979	WITHOUT_CLASSIFICATION	8.782302111284887E-9	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999831051085	WITHOUT_CLASSIFICATION	1.68948915075562E-8	TEST
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999984004776	WITHOUT_CLASSIFICATION	1.5995224651234466E-9	TEST
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999751747409283	WITHOUT_CLASSIFICATION	2.4825259071725377E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997369601826	WITHOUT_CLASSIFICATION	2.630398172858314E-7	TEST
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999628525253	WITHOUT_CLASSIFICATION	3.714747463436798E-8	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234264548	WITHOUT_CLASSIFICATION	4.765735451475546E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999977526883111	WITHOUT_CLASSIFICATION	2.2473116888864794E-6	TEST
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999990659031034	WITHOUT_CLASSIFICATION	9.340968965315895E-7	TEST
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999999996492017	WITHOUT_CLASSIFICATION	3.5079829990149936E-9	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999885472282	WITHOUT_CLASSIFICATION	1.1452771860790895E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999499004637	WITHOUT_CLASSIFICATION	5.009953624637645E-8	TEST
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985822879645	WITHOUT_CLASSIFICATION	1.4177120356049456E-6	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999831051085	WITHOUT_CLASSIFICATION	1.68948915075562E-8	TEST
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999997120364059	WITHOUT_CLASSIFICATION	2.879635941123516E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999951556822992	WITHOUT_CLASSIFICATION	4.844317700823612E-6	TEST
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999718536777	WITHOUT_CLASSIFICATION	2.8146322184895043E-8	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999444590587594	WITHOUT_CLASSIFICATION	5.554094124056448E-5	TEST
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999939335050204	WITHOUT_CLASSIFICATION	6.066494979474973E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999990043873497	WITHOUT_CLASSIFICATION	9.9561265029413E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999971880494686	WITHOUT_CLASSIFICATION	2.8119505314533576E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454203869	WITHOUT_CLASSIFICATION	1.8545796131131251E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234264548	WITHOUT_CLASSIFICATION	4.765735451475546E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998148988104	WITHOUT_CLASSIFICATION	1.851011894497023E-7	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999975076664449	WITHOUT_CLASSIFICATION	2.4923335550298906E-6	TEST
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999882334012635	WITHOUT_CLASSIFICATION	1.176659873649067E-5	TEST
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999998691444863	WITHOUT_CLASSIFICATION	1.308555136980185E-6	TEST
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999954774722654	WITHOUT_CLASSIFICATION	4.522527734619345E-6	TEST
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999965626448841	WITHOUT_CLASSIFICATION	3.4373551159610824E-6	TEST
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999959849971254	WITHOUT_CLASSIFICATION	4.0150028746303405E-6	TEST
//render the SQL	WITHOUT_CLASSIFICATION	0.9999986333388247	WITHOUT_CLASSIFICATION	1.3666611754453052E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988872526666	WITHOUT_CLASSIFICATION	1.112747333327628E-6	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999421491923	WITHOUT_CLASSIFICATION	5.7850807836412366E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999450357082	WITHOUT_CLASSIFICATION	5.496429182700165E-8	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999576628881345	WITHOUT_CLASSIFICATION	4.2337111865474754E-5	TEST
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999992169700344	WITHOUT_CLASSIFICATION	7.830299656144805E-7	TEST
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999155742904	WITHOUT_CLASSIFICATION	8.44257095952918E-8	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999866849348	WITHOUT_CLASSIFICATION	1.3315065203277594E-8	TEST
// SQL strings	WITHOUT_CLASSIFICATION	0.9999998184331078	WITHOUT_CLASSIFICATION	1.815668920507728E-7	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999504144224	WITHOUT_CLASSIFICATION	4.95855776197194E-8	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999981454203869	WITHOUT_CLASSIFICATION	1.8545796131131251E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999960353718719	WITHOUT_CLASSIFICATION	3.9646281280906525E-6	TEST
// VERSION	WITHOUT_CLASSIFICATION	0.999997474540352	WITHOUT_CLASSIFICATION	2.525459647987978E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999925021129631	WITHOUT_CLASSIFICATION	7.497887036875506E-6	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999986328449306	WITHOUT_CLASSIFICATION	1.3671550694111421E-6	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.999997362004248	WITHOUT_CLASSIFICATION	2.637995751934157E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999668979133	WITHOUT_CLASSIFICATION	3.3102086722530964E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997393249869	WITHOUT_CLASSIFICATION	2.606750131061969E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999898402357329	WITHOUT_CLASSIFICATION	1.0159764267151605E-5	TEST
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999092943885	WITHOUT_CLASSIFICATION	9.070561142632742E-8	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9992808215487934	WITHOUT_CLASSIFICATION	7.191784512066625E-4	TEST
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999986109708859	WITHOUT_CLASSIFICATION	1.389029113976281E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999946748942874	WITHOUT_CLASSIFICATION	5.325105712669714E-6	TEST
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999973049159107	WITHOUT_CLASSIFICATION	2.695084089253436E-6	TEST
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999986591210382	WITHOUT_CLASSIFICATION	1.3408789617804148E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999926161274	WITHOUT_CLASSIFICATION	7.3838726394226216E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999999863126631	WITHOUT_CLASSIFICATION	1.3687336890992345E-7	TEST
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999843833679	WITHOUT_CLASSIFICATION	1.5616632118482746E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999836511138	WITHOUT_CLASSIFICATION	1.6348886256727695E-8	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999136906164	WITHOUT_CLASSIFICATION	8.630938358266719E-7	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999987477155163	WITHOUT_CLASSIFICATION	1.2522844836042799E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999992712060678	WITHOUT_CLASSIFICATION	7.287939322629417E-7	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998271100192	WITHOUT_CLASSIFICATION	1.728899808118602E-7	TEST
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998557791137	WITHOUT_CLASSIFICATION	1.442208863482761E-7	TEST
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999782124621	WITHOUT_CLASSIFICATION	2.1787537824470267E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999688998106	WITHOUT_CLASSIFICATION	3.1100189364076616E-8	TEST
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997982788661252	WITHOUT_CLASSIFICATION	2.0172113387485562E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999966702716504	WITHOUT_CLASSIFICATION	3.3297283496701097E-6	TEST
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999992346461027	WITHOUT_CLASSIFICATION	7.653538973033445E-6	TEST
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996485298632	WITHOUT_CLASSIFICATION	3.514701367706854E-7	TEST
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9993793933033825	WITHOUT_CLASSIFICATION	6.206066966174749E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999859750176	WITHOUT_CLASSIFICATION	1.4024982395540427E-7	TEST
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999986770973838	WITHOUT_CLASSIFICATION	1.3229026162916174E-6	TEST
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999649776475	WITHOUT_CLASSIFICATION	3.5022352596791576E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999723213876778	WITHOUT_CLASSIFICATION	2.7678612322184593E-5	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983641650064	WITHOUT_CLASSIFICATION	1.6358349934786734E-6	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999216558006	WITHOUT_CLASSIFICATION	7.834419939906071E-8	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999571169469	WITHOUT_CLASSIFICATION	4.288305308031592E-8	TEST
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995265687586	WITHOUT_CLASSIFICATION	4.7343124133186896E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999216558006	WITHOUT_CLASSIFICATION	7.834419939906071E-8	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999983641650064	WITHOUT_CLASSIFICATION	1.6358349934786734E-6	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999571169469	WITHOUT_CLASSIFICATION	4.288305308031592E-8	TEST
// add the primary key	WITHOUT_CLASSIFICATION	0.9999997303101513	WITHOUT_CLASSIFICATION	2.6968984869075373E-7	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998556009627	WITHOUT_CLASSIFICATION	1.4439903727321873E-7	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999553079959	WITHOUT_CLASSIFICATION	4.469200416385777E-8	TEST
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999998666063529	WITHOUT_CLASSIFICATION	1.3339364709101462E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999734157153	WITHOUT_CLASSIFICATION	2.658428477074671E-8	TEST
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9997155860633584	WITHOUT_CLASSIFICATION	2.8441393664156977E-4	TEST
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999986151532418	WITHOUT_CLASSIFICATION	1.3848467582032914E-5	TEST
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999958894457424	WITHOUT_CLASSIFICATION	4.1105542576732926E-6	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999994570774898	WITHOUT_CLASSIFICATION	5.429225101334066E-7	TEST
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999983626014468	WITHOUT_CLASSIFICATION	1.6373985531724076E-6	TEST
// starting index	WITHOUT_CLASSIFICATION	0.9999998775492052	WITHOUT_CLASSIFICATION	1.2245079488640255E-7	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999975633901947	WITHOUT_CLASSIFICATION	2.4366098052530523E-6	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999999381111284	WITHOUT_CLASSIFICATION	6.188887156143585E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999984478561972	WITHOUT_CLASSIFICATION	1.5521438027420167E-6	TEST
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999999895953189	WITHOUT_CLASSIFICATION	1.0404681099750801E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998313328781	WITHOUT_CLASSIFICATION	1.6866712184903247E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998898306699	WITHOUT_CLASSIFICATION	1.1016933006931815E-7	TEST
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999980236444	WITHOUT_CLASSIFICATION	1.9763555977337714E-8	TEST
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995625363374	WITHOUT_CLASSIFICATION	4.374636626637519E-7	TEST
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999984662987819	WITHOUT_CLASSIFICATION	1.53370121816856E-6	TEST
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999993254902337	WITHOUT_CLASSIFICATION	6.745097663374774E-7	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999997969068	WITHOUT_CLASSIFICATION	2.0309319568628242E-9	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999984284583542	WITHOUT_CLASSIFICATION	1.5715416457964292E-6	TEST
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998817023718	WITHOUT_CLASSIFICATION	1.1829762814855886E-7	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999955901011752	WITHOUT_CLASSIFICATION	4.409898824855934E-6	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999955901011752	WITHOUT_CLASSIFICATION	4.409898824855934E-6	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999948766344	WITHOUT_CLASSIFICATION	5.123365577568817E-9	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999948766344	WITHOUT_CLASSIFICATION	5.123365577568817E-9	TEST
// not supported	WITHOUT_CLASSIFICATION	0.999999426627357	WITHOUT_CLASSIFICATION	5.73372642984784E-7	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998898306699	WITHOUT_CLASSIFICATION	1.1016933006931815E-7	TEST
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999998610821692	WITHOUT_CLASSIFICATION	1.3891783090978276E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999979247783	WITHOUT_CLASSIFICATION	2.075221622458737E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997007910655	WITHOUT_CLASSIFICATION	2.992089344595321E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999997007910655	WITHOUT_CLASSIFICATION	2.992089344595321E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998195477033	WITHOUT_CLASSIFICATION	1.8045229671426757E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996346729053	WITHOUT_CLASSIFICATION	3.653270946082324E-7	TEST
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999938115783	WITHOUT_CLASSIFICATION	6.18842162934764E-9	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999987351659788	WITHOUT_CLASSIFICATION	1.2648340211187513E-6	TEST
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999990703590952	WITHOUT_CLASSIFICATION	9.296409048335726E-7	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999819103829	WITHOUT_CLASSIFICATION	1.808961707957676E-8	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999947785403084	WITHOUT_CLASSIFICATION	5.221459691628882E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999995536500252	WITHOUT_CLASSIFICATION	4.4634997476000336E-7	TEST
//now render the joins	WITHOUT_CLASSIFICATION	0.999999378384188	WITHOUT_CLASSIFICATION	6.21615812017513E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999563850924	WITHOUT_CLASSIFICATION	4.3614907631225354E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999999525924725	WITHOUT_CLASSIFICATION	4.740752742862717E-8	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.99999922140306	WITHOUT_CLASSIFICATION	7.785969401072502E-7	TEST
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999999607731655	WITHOUT_CLASSIFICATION	3.92268345035994E-7	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999993581053074	WITHOUT_CLASSIFICATION	6.418946926435772E-7	TEST
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999979964053327	WITHOUT_CLASSIFICATION	2.0035946672413955E-6	TEST
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991989493137	WITHOUT_CLASSIFICATION	8.010506863895154E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387571252	WITHOUT_CLASSIFICATION	5.612428747683315E-7	TEST
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999999743990029	WITHOUT_CLASSIFICATION	2.5600997056109482E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999999945866335	WITHOUT_CLASSIFICATION	5.413366603800182E-9	TEST
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999754079627	WITHOUT_CLASSIFICATION	2.4592037218118572E-8	TEST
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999956702352	WITHOUT_CLASSIFICATION	4.329764846040063E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999998450742119	WITHOUT_CLASSIFICATION	1.5492578810573682E-6	TEST
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999781367136	WITHOUT_CLASSIFICATION	2.1863286389866912E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999946217212	WITHOUT_CLASSIFICATION	5.378278809717133E-9	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999406545727587	WITHOUT_CLASSIFICATION	5.9345427241188684E-5	TEST
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997608956274	WITHOUT_CLASSIFICATION	2.3910437260058865E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999946748942874	WITHOUT_CLASSIFICATION	5.325105712669714E-6	TEST
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999999464317163	WITHOUT_CLASSIFICATION	5.356828369777977E-7	TEST
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999998061068397	WITHOUT_CLASSIFICATION	1.9389316031404784E-7	TEST
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993370206663	WITHOUT_CLASSIFICATION	6.629793336753267E-7	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999884153647	WITHOUT_CLASSIFICATION	1.1584635299676148E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999994487020311	WITHOUT_CLASSIFICATION	5.512979689888578E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999994487020311	WITHOUT_CLASSIFICATION	5.512979689888578E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999999244274153	WITHOUT_CLASSIFICATION	7.557258485052848E-8	TEST
// try "get"	WITHOUT_CLASSIFICATION	0.9999998228767044	WITHOUT_CLASSIFICATION	1.7712329563445706E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999990625232217	WITHOUT_CLASSIFICATION	9.374767782222216E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999990625232217	WITHOUT_CLASSIFICATION	9.374767782222216E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999997585906862	WITHOUT_CLASSIFICATION	2.4140931369335993E-7	TEST
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999994536374751	WITHOUT_CLASSIFICATION	5.463625249272684E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999984316373403	WITHOUT_CLASSIFICATION	1.5683626597851219E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500344892	WITHOUT_CLASSIFICATION	1.4996551068636454E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999994938218397	WITHOUT_CLASSIFICATION	5.061781603871274E-7	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999985575045404	WITHOUT_CLASSIFICATION	1.4424954596592173E-6	TEST
// otherwise:	WITHOUT_CLASSIFICATION	0.9999997713073949	WITHOUT_CLASSIFICATION	2.2869260513365864E-7	TEST
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999999105830403	WITHOUT_CLASSIFICATION	8.941695972445608E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999609374386	WITHOUT_CLASSIFICATION	3.906256144083238E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999609374386	WITHOUT_CLASSIFICATION	3.906256144083238E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999998295236	WITHOUT_CLASSIFICATION	1.7047644942437483E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999922209656	WITHOUT_CLASSIFICATION	7.779034405349269E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999922209656	WITHOUT_CLASSIFICATION	7.779034405349269E-8	TEST
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999857821171	WITHOUT_CLASSIFICATION	1.4217882733447001E-8	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999259859166	WITHOUT_CLASSIFICATION	7.401408342531081E-8	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.996385533883087	WITHOUT_CLASSIFICATION	0.003614466116913031	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.999999956431842	WITHOUT_CLASSIFICATION	4.3568158011712124E-8	TEST
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999798478361	WITHOUT_CLASSIFICATION	2.0152163846600242E-8	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999734564903	WITHOUT_CLASSIFICATION	2.6543509711761367E-8	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999954550217711	WITHOUT_CLASSIFICATION	4.544978228908577E-6	TEST
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998830845166331	WITHOUT_CLASSIFICATION	1.1691548336679116E-4	TEST
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999765896226	WITHOUT_CLASSIFICATION	2.341037740448858E-8	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999910987375825	WITHOUT_CLASSIFICATION	8.901262417477203E-6	TEST
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999951603329	WITHOUT_CLASSIFICATION	4.839667098288314E-9	TEST
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999999221094369	WITHOUT_CLASSIFICATION	7.789056311751708E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804489692	WITHOUT_CLASSIFICATION	6.319551030853031E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804489692	WITHOUT_CLASSIFICATION	6.319551030853031E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804489692	WITHOUT_CLASSIFICATION	6.319551030853031E-6	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999936804489692	WITHOUT_CLASSIFICATION	6.319551030853031E-6	TEST
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995269096429	WITHOUT_CLASSIFICATION	4.7309035715667794E-7	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999996473301282	WITHOUT_CLASSIFICATION	3.526698717945811E-7	TEST
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999975816717602	WITHOUT_CLASSIFICATION	2.4183282398785255E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9999927759007723	WITHOUT_CLASSIFICATION	7.22409922774051E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993163861414	WITHOUT_CLASSIFICATION	6.836138585578335E-7	TEST
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999997310679719	WITHOUT_CLASSIFICATION	2.689320280756316E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999976170090917	WITHOUT_CLASSIFICATION	2.3829909081329926E-6	TEST
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999989325758297	WITHOUT_CLASSIFICATION	1.0674241702513324E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999519255253	WITHOUT_CLASSIFICATION	4.8074474718774705E-8	TEST
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999837359037	WITHOUT_CLASSIFICATION	1.6264096365953034E-8	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999998603307441	WITHOUT_CLASSIFICATION	1.3966925601864397E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999781624856	WITHOUT_CLASSIFICATION	2.1837514400103416E-7	TEST
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9547199305705717	WITHOUT_CLASSIFICATION	0.04528006942942827	TEST
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999996716862818	WITHOUT_CLASSIFICATION	3.283137182033548E-6	TEST
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999929969302215	WITHOUT_CLASSIFICATION	7.003069778615121E-6	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999781624856	WITHOUT_CLASSIFICATION	2.1837514400103416E-7	TEST
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999948069799256	WITHOUT_CLASSIFICATION	5.193020074400731E-5	TEST
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999999997633164	WITHOUT_CLASSIFICATION	2.366836096642176E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999862088277	WITHOUT_CLASSIFICATION	1.3791172371741798E-8	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999978889537583	WITHOUT_CLASSIFICATION	2.1110462415927326E-6	TEST
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998968672846	WITHOUT_CLASSIFICATION	1.031327152569447E-7	TEST
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998812180415	WITHOUT_CLASSIFICATION	1.1878195846150404E-7	TEST
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999996418711	WITHOUT_CLASSIFICATION	3.5812880066028577E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999997415784873	WITHOUT_CLASSIFICATION	2.5842151268293195E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999929578647	WITHOUT_CLASSIFICATION	7.042135384367269E-9	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999641816751	WITHOUT_CLASSIFICATION	3.581832481665612E-8	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999824797003	WITHOUT_CLASSIFICATION	1.7520299683277844E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998768313375	WITHOUT_CLASSIFICATION	1.2316866249350847E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999983118152427	WITHOUT_CLASSIFICATION	1.6881847572025843E-6	TEST
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998690632705102	WITHOUT_CLASSIFICATION	1.3093672948976385E-4	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998951134694	WITHOUT_CLASSIFICATION	1.0488653055569616E-7	TEST
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999995907349591	WITHOUT_CLASSIFICATION	4.092650408156315E-7	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998109468242	WITHOUT_CLASSIFICATION	1.8905317571153395E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999851944534	WITHOUT_CLASSIFICATION	1.4805546604137963E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991325196487	WITHOUT_CLASSIFICATION	8.674803513111333E-7	TEST
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999999851944534	WITHOUT_CLASSIFICATION	1.4805546604137963E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999777534776	WITHOUT_CLASSIFICATION	2.2246522395628397E-8	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999608930466	WITHOUT_CLASSIFICATION	3.910695339088907E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999999452620729	WITHOUT_CLASSIFICATION	5.473792705084842E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999945796714471	WITHOUT_CLASSIFICATION	5.42032855287206E-6	TEST
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998109468242	WITHOUT_CLASSIFICATION	1.8905317571153395E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991325196487	WITHOUT_CLASSIFICATION	8.674803513111333E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999777534776	WITHOUT_CLASSIFICATION	2.2246522395628397E-8	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999999892164114	WITHOUT_CLASSIFICATION	1.0783588595482654E-7	TEST
//return currentId;	WITHOUT_CLASSIFICATION	0.9999999507562347	WITHOUT_CLASSIFICATION	4.9243765265459E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9999956611918067	WITHOUT_CLASSIFICATION	4.3388081932879915E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//reset the version	WITHOUT_CLASSIFICATION	0.9999985028571577	WITHOUT_CLASSIFICATION	1.4971428422408492E-6	TEST
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999998303214797	WITHOUT_CLASSIFICATION	1.696785203641734E-7	TEST
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999917853667	WITHOUT_CLASSIFICATION	8.214633335113441E-9	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387571252	WITHOUT_CLASSIFICATION	5.612428747683315E-7	TEST
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999608930466	WITHOUT_CLASSIFICATION	3.910695339088907E-7	TEST
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998739093718	WITHOUT_CLASSIFICATION	1.2609062813610066E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999999452327912	WITHOUT_CLASSIFICATION	5.4767208777880857E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999875281274	WITHOUT_CLASSIFICATION	1.2471872685862037E-8	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387571252	WITHOUT_CLASSIFICATION	5.612428747683315E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999994898127037	WITHOUT_CLASSIFICATION	5.101872963411121E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387571252	WITHOUT_CLASSIFICATION	5.612428747683315E-7	TEST
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999164666532	WITHOUT_CLASSIFICATION	8.353334669188016E-8	TEST
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996501055337	WITHOUT_CLASSIFICATION	3.4989446622481935E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999998643901589	WITHOUT_CLASSIFICATION	1.356098410945157E-6	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999987058520087	WITHOUT_CLASSIFICATION	1.2941479913270724E-6	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999767609647	WITHOUT_CLASSIFICATION	2.323903529878062E-8	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999999096957077	WITHOUT_CLASSIFICATION	9.030429229764633E-8	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999999964844025	WITHOUT_CLASSIFICATION	3.515597495987465E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999999678820598	WITHOUT_CLASSIFICATION	3.211794019960178E-7	TEST
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999985312093113	WITHOUT_CLASSIFICATION	1.4687906887166946E-6	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999968803133206	WITHOUT_CLASSIFICATION	3.1196866794271782E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999921219738416	WITHOUT_CLASSIFICATION	7.878026158398042E-6	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995333637159	WITHOUT_CLASSIFICATION	4.66636283987762E-7	TEST
//TODO!	WITHOUT_CLASSIFICATION	0.996385533883087	WITHOUT_CLASSIFICATION	0.003614466116913031	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999949663144442	WITHOUT_CLASSIFICATION	5.033685555871216E-6	TEST
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999946948635602	WITHOUT_CLASSIFICATION	5.305136439735368E-6	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999995869481034	WITHOUT_CLASSIFICATION	4.130518965971468E-6	TEST
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999726794821501	WITHOUT_CLASSIFICATION	2.732051784996663E-5	TEST
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999961904134	WITHOUT_CLASSIFICATION	3.80958660478837E-8	TEST
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999796907081	WITHOUT_CLASSIFICATION	2.030929200579559E-8	TEST
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999911442993	WITHOUT_CLASSIFICATION	8.855700631109122E-9	TEST
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999963582359394	WITHOUT_CLASSIFICATION	3.6417640607218682E-6	TEST
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999989012391	WITHOUT_CLASSIFICATION	1.0987608391858107E-9	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999040547506	WITHOUT_CLASSIFICATION	9.594524938226952E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.9955919530483686	WITHOUT_CLASSIFICATION	0.00440804695163145	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999899172940334	WITHOUT_CLASSIFICATION	1.0082705966570912E-5	TEST
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999977635082292	WITHOUT_CLASSIFICATION	2.2364917707767674E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999938562259101	WITHOUT_CLASSIFICATION	6.143774089941042E-6	TEST
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999996436462646	WITHOUT_CLASSIFICATION	3.5635373540988924E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999854564131043	WITHOUT_CLASSIFICATION	1.4543586895603533E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999983757195391	WITHOUT_CLASSIFICATION	1.6242804608356504E-6	TEST
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999999982186429	WITHOUT_CLASSIFICATION	1.781357054389572E-9	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999999999165774	WITHOUT_CLASSIFICATION	8.342260974313219E-10	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999937507785243	WITHOUT_CLASSIFICATION	6.249221475722717E-6	TEST
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999759385115293	WITHOUT_CLASSIFICATION	2.4061488470679496E-5	TEST
//TODO	WITHOUT_CLASSIFICATION	0.9987201299375484	WITHOUT_CLASSIFICATION	0.001279870062451486	TEST
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999818889258445	WITHOUT_CLASSIFICATION	1.811107415560494E-5	TEST
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999987208094031	WITHOUT_CLASSIFICATION	1.2791905969929786E-6	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999970412905694	WITHOUT_CLASSIFICATION	2.9587094304791905E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999650140684195	WITHOUT_CLASSIFICATION	3.4985931580549224E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999987700873192	WITHOUT_CLASSIFICATION	1.2299126808869194E-6	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9961068524353188	WITHOUT_CLASSIFICATION	0.0038931475646811933	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999602094982	WITHOUT_CLASSIFICATION	3.9790501669566434E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995240687564	WITHOUT_CLASSIFICATION	4.759312435972309E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999900558880389	WITHOUT_CLASSIFICATION	9.944111961093645E-6	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999900558880389	WITHOUT_CLASSIFICATION	9.944111961093645E-6	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999621302299	WITHOUT_CLASSIFICATION	3.786977013015325E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999999678820598	WITHOUT_CLASSIFICATION	3.211794019960178E-7	TEST
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999991944098965	WITHOUT_CLASSIFICATION	8.055901034828632E-7	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999985800746539	WITHOUT_CLASSIFICATION	1.4199253460912996E-6	TEST
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999973844548	WITHOUT_CLASSIFICATION	2.6155451874259153E-9	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999782877855	WITHOUT_CLASSIFICATION	2.171221451770813E-8	TEST
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999964161784161	WITHOUT_CLASSIFICATION	3.583821584053504E-6	TEST
//NOOP	WITHOUT_CLASSIFICATION	0.9999116548939244	WITHOUT_CLASSIFICATION	8.834510607558153E-5	TEST
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999759019283159	WITHOUT_CLASSIFICATION	2.4098071684050265E-5	TEST
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999989317563032	WITHOUT_CLASSIFICATION	1.0682436967989616E-6	TEST
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999698685306	WITHOUT_CLASSIFICATION	3.013146950914676E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999999950447147	WITHOUT_CLASSIFICATION	4.9552852374528334E-9	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999707991103	WITHOUT_CLASSIFICATION	2.92008897828441E-8	TEST
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999624807068552	WITHOUT_CLASSIFICATION	3.7519293144801827E-5	TEST
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999990823775987	WITHOUT_CLASSIFICATION	9.176224011726648E-7	TEST
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999975338627	WITHOUT_CLASSIFICATION	2.4661373023598587E-8	TEST
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999680092925	WITHOUT_CLASSIFICATION	3.1990707433459556E-8	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999976213246	WITHOUT_CLASSIFICATION	2.378675490350851E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999982062032	WITHOUT_CLASSIFICATION	1.7937968044314293E-8	TEST
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999999991365249	WITHOUT_CLASSIFICATION	8.634751007594708E-9	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999991628352	WITHOUT_CLASSIFICATION	8.371648824404562E-10	TEST
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999999160435957	WITHOUT_CLASSIFICATION	8.395640428962129E-8	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996526739987	WITHOUT_CLASSIFICATION	3.4732600125306843E-7	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999417946367	WITHOUT_CLASSIFICATION	5.8205363304144594E-8	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9961068524353188	WITHOUT_CLASSIFICATION	0.0038931475646811933	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999911215759	WITHOUT_CLASSIFICATION	8.878424128151183E-9	TEST
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999960478226	WITHOUT_CLASSIFICATION	3.952177288717112E-9	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999943424314	WITHOUT_CLASSIFICATION	5.6575686529778865E-9	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999856307292027	WITHOUT_CLASSIFICATION	1.43692707974333E-5	TEST
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999999413835611	WITHOUT_CLASSIFICATION	5.861643886501689E-8	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997286137341	WITHOUT_CLASSIFICATION	2.7138626580809675E-7	TEST
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999914435238333	WITHOUT_CLASSIFICATION	8.556476166691674E-5	TEST
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998605014394	WITHOUT_CLASSIFICATION	1.39498560652685E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999999965971291	WITHOUT_CLASSIFICATION	3.402870909584725E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998893687325	WITHOUT_CLASSIFICATION	1.1063126748019005E-7	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998760840453	WITHOUT_CLASSIFICATION	1.23915954665966E-7	TEST
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999047083020808	WITHOUT_CLASSIFICATION	9.529169791921358E-5	TEST
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999969651170468	WITHOUT_CLASSIFICATION	3.0348829532314008E-6	TEST
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995194298378	WITHOUT_CLASSIFICATION	4.805701622057057E-7	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999989543211	WITHOUT_CLASSIFICATION	1.0456789073496784E-8	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999989543211	WITHOUT_CLASSIFICATION	1.0456789073496784E-8	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999416113012	WITHOUT_CLASSIFICATION	5.838869885336533E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999997657103148	WITHOUT_CLASSIFICATION	2.34289685235389E-7	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983620072306	WITHOUT_CLASSIFICATION	1.6379927693690609E-6	TEST
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983620072306	WITHOUT_CLASSIFICATION	1.6379927693690609E-6	TEST
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999959531298	WITHOUT_CLASSIFICATION	4.046870125834379E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999994446742452	WITHOUT_CLASSIFICATION	5.553257548037343E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999999833432188	WITHOUT_CLASSIFICATION	1.665678117179361E-8	TEST
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996387482033	WITHOUT_CLASSIFICATION	3.6125179673823594E-7	TEST
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990186464712	WITHOUT_CLASSIFICATION	9.813535288248007E-7	TEST
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997727471129	WITHOUT_CLASSIFICATION	2.2725288696475246E-7	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999860334176	WITHOUT_CLASSIFICATION	1.3966582478467663E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999860334176	WITHOUT_CLASSIFICATION	1.3966582478467663E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992423776195	WITHOUT_CLASSIFICATION	7.576223805468178E-7	TEST
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999999929324319	WITHOUT_CLASSIFICATION	7.067568097913522E-9	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999960110974304	WITHOUT_CLASSIFICATION	3.988902569574779E-6	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999931871815	WITHOUT_CLASSIFICATION	6.812818625785667E-9	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999931871815	WITHOUT_CLASSIFICATION	6.812818625785667E-9	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999477973932	WITHOUT_CLASSIFICATION	5.220260676173145E-8	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999973466181	WITHOUT_CLASSIFICATION	2.6533819109665494E-8	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999944955040069	WITHOUT_CLASSIFICATION	5.504495993188258E-6	TEST
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998310868753	WITHOUT_CLASSIFICATION	1.6891312470300627E-7	TEST
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999672879936	WITHOUT_CLASSIFICATION	3.27120063773697E-8	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998751401741	WITHOUT_CLASSIFICATION	1.248598259521519E-7	TEST
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999999747821133	WITHOUT_CLASSIFICATION	2.52178867236293E-8	TEST
// the current iterator	WITHOUT_CLASSIFICATION	0.999999895554569	WITHOUT_CLASSIFICATION	1.044454308700745E-7	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998814347443	WITHOUT_CLASSIFICATION	1.1856525569600304E-7	TEST
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.99999947021291	WITHOUT_CLASSIFICATION	5.297870900047996E-7	TEST
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999999630335649	WITHOUT_CLASSIFICATION	3.696643515281388E-8	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999966639987163	WITHOUT_CLASSIFICATION	3.3360012836341062E-6	TEST
//doable if needed	WITHOUT_CLASSIFICATION	0.9999548971189434	WITHOUT_CLASSIFICATION	4.5102881056590806E-5	TEST
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999993970304225	WITHOUT_CLASSIFICATION	6.029695774796415E-7	TEST
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994017889494	WITHOUT_CLASSIFICATION	5.982110506815632E-7	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999995094389346	WITHOUT_CLASSIFICATION	4.905610654540207E-7	TEST
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999989770611	WITHOUT_CLASSIFICATION	1.0229388967329896E-8	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999999143291541	WITHOUT_CLASSIFICATION	8.5670845905014E-7	TEST
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999999333344078	WITHOUT_CLASSIFICATION	6.666559222170189E-8	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999994843622005	WITHOUT_CLASSIFICATION	5.156377993847727E-7	TEST
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999998795336912	WITHOUT_CLASSIFICATION	1.2046630882587043E-7	TEST
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999998873130496	WITHOUT_CLASSIFICATION	1.1268695045124617E-7	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999805190223627	WITHOUT_CLASSIFICATION	1.948097763728201E-5	TEST
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999707869256932	WITHOUT_CLASSIFICATION	2.9213074306831985E-5	TEST
//faster?	WITHOUT_CLASSIFICATION	0.9999828996485457	WITHOUT_CLASSIFICATION	1.7100351454259432E-5	TEST
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999413982876	WITHOUT_CLASSIFICATION	5.8601712499100875E-8	TEST
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997765928903	WITHOUT_CLASSIFICATION	2.2340710968766106E-7	TEST
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999882134085953	WITHOUT_CLASSIFICATION	1.1786591404554305E-5	TEST
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999980613832	WITHOUT_CLASSIFICATION	1.9386167801180703E-9	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999701622948	WITHOUT_CLASSIFICATION	2.9837705120379595E-8	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999999370788651	WITHOUT_CLASSIFICATION	6.292113485360335E-8	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999880140781	WITHOUT_CLASSIFICATION	1.1985921807648998E-8	TEST
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999787006061	WITHOUT_CLASSIFICATION	2.129939390248156E-8	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999984111511954	WITHOUT_CLASSIFICATION	1.5888488045588572E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998726344546	WITHOUT_CLASSIFICATION	1.273655453976629E-7	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999842337446664	WITHOUT_CLASSIFICATION	1.576625533358445E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999965307324584	WITHOUT_CLASSIFICATION	3.469267541596242E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999991494334464	WITHOUT_CLASSIFICATION	8.505665536997437E-7	TEST
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999999897768758	WITHOUT_CLASSIFICATION	1.0223124196092746E-7	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999168148113	WITHOUT_CLASSIFICATION	8.318518872317342E-8	TEST
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999582372981	WITHOUT_CLASSIFICATION	4.1762701768955576E-8	TEST
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999999740915734	WITHOUT_CLASSIFICATION	2.5908426604426613E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999999057425895	WITHOUT_CLASSIFICATION	9.42574105493268E-8	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9999999901362107	WITHOUT_CLASSIFICATION	9.863789326637554E-9	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999998772849593	WITHOUT_CLASSIFICATION	1.227150406768378E-7	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999085413364	WITHOUT_CLASSIFICATION	9.145866366686523E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9999997490807992	WITHOUT_CLASSIFICATION	2.509192008115043E-7	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999989389465036	WITHOUT_CLASSIFICATION	1.061053496470479E-6	TEST
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999759170334	WITHOUT_CLASSIFICATION	2.408296659303004E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999958805190192	WITHOUT_CLASSIFICATION	4.119480980759965E-6	TEST
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999999468738282	WITHOUT_CLASSIFICATION	5.3126171724535685E-8	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999857245655	WITHOUT_CLASSIFICATION	1.427543444870831E-8	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999993623778771	WITHOUT_CLASSIFICATION	6.376221228795239E-7	TEST
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999988792655	WITHOUT_CLASSIFICATION	1.1207344804288206E-9	TEST
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999995474910538	WITHOUT_CLASSIFICATION	4.525089462843313E-7	TEST
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999428832611	WITHOUT_CLASSIFICATION	5.7116738854747654E-8	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999999718788947	WITHOUT_CLASSIFICATION	2.8121105236412396E-8	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999585001911	WITHOUT_CLASSIFICATION	4.149980890736216E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999999411290333	WITHOUT_CLASSIFICATION	5.8870966564629086E-8	TEST
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999282102814893	WITHOUT_CLASSIFICATION	7.178971851079918E-5	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998298271403	WITHOUT_CLASSIFICATION	1.7017285963912568E-7	TEST
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998298271403	WITHOUT_CLASSIFICATION	1.7017285963912568E-7	TEST
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999955141143719	WITHOUT_CLASSIFICATION	4.485885627998231E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999949570568302	WITHOUT_CLASSIFICATION	5.042943169765722E-6	TEST
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999791797782	WITHOUT_CLASSIFICATION	2.082022167054029E-8	TEST
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999793486546	WITHOUT_CLASSIFICATION	2.065134537243459E-8	TEST
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998715232965	WITHOUT_CLASSIFICATION	1.284767035588135E-7	TEST
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999985532716785	WITHOUT_CLASSIFICATION	1.4467283214298576E-6	TEST
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999786808079	WITHOUT_CLASSIFICATION	2.131919204943416E-8	TEST
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999989349754	WITHOUT_CLASSIFICATION	1.065024595294502E-9	TEST
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999999684276562	WITHOUT_CLASSIFICATION	3.157234379867727E-7	TEST
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999991707777879	WITHOUT_CLASSIFICATION	8.292222121852998E-7	TEST
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999995745752	WITHOUT_CLASSIFICATION	4.254247984099832E-9	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999943276977228	WITHOUT_CLASSIFICATION	5.672302277221954E-6	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999885704228	WITHOUT_CLASSIFICATION	1.1429577191201289E-7	TEST
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999920613564	WITHOUT_CLASSIFICATION	7.938643645203447E-9	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772030025	WITHOUT_CLASSIFICATION	7.227969974059213E-7	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992772030025	WITHOUT_CLASSIFICATION	7.227969974059213E-7	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999754374412	WITHOUT_CLASSIFICATION	2.4562558799450823E-8	TEST
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999998575524626	WITHOUT_CLASSIFICATION	1.4244753742460946E-7	TEST
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998792493947	WITHOUT_CLASSIFICATION	1.20750605260385E-7	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999974378289	WITHOUT_CLASSIFICATION	2.562171161436851E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99999997399273	WITHOUT_CLASSIFICATION	2.6007269941157752E-8	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980356928708	WITHOUT_CLASSIFICATION	1.964307129221456E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999976299398375	WITHOUT_CLASSIFICATION	2.370060162417203E-6	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999866055205875	WITHOUT_CLASSIFICATION	1.3394479412512705E-5	TEST
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999987662698	WITHOUT_CLASSIFICATION	1.2337302645165705E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999744466395492	WITHOUT_CLASSIFICATION	2.5553360450921973E-5	TEST
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999988465581	WITHOUT_CLASSIFICATION	1.1534418696426586E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991337540735	WITHOUT_CLASSIFICATION	8.662459266052589E-7	TEST
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999952708943	WITHOUT_CLASSIFICATION	4.729105601643242E-9	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998375613504	WITHOUT_CLASSIFICATION	1.6243864966022434E-7	TEST
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999985016396938	WITHOUT_CLASSIFICATION	1.4983603061186544E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999232556194	WITHOUT_CLASSIFICATION	7.67443805295708E-8	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999993893373502	WITHOUT_CLASSIFICATION	6.10662649697523E-7	TEST
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999990034717114	WITHOUT_CLASSIFICATION	9.96528288555749E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999729278561	WITHOUT_CLASSIFICATION	2.7072143882122708E-8	TEST
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999948795602	WITHOUT_CLASSIFICATION	5.120439814086149E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999896327554	WITHOUT_CLASSIFICATION	1.036724459381375E-8	TEST
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999810516008	WITHOUT_CLASSIFICATION	1.89483991695742E-8	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997762357115	WITHOUT_CLASSIFICATION	2.237642884887629E-7	TEST
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999844572417721	WITHOUT_CLASSIFICATION	1.554275822796128E-5	TEST
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999699445531164	WITHOUT_CLASSIFICATION	3.0055446883600555E-5	TEST
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999998880332909	WITHOUT_CLASSIFICATION	1.1196670912711878E-7	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999918112055	WITHOUT_CLASSIFICATION	8.18879453981186E-9	TEST
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999678351872	WITHOUT_CLASSIFICATION	3.216481274188216E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999991762760368	WITHOUT_CLASSIFICATION	8.237239631843183E-7	TEST
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998443273423	WITHOUT_CLASSIFICATION	1.5567265777125984E-7	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999736462218817	WITHOUT_CLASSIFICATION	2.6353778118314272E-5	TEST
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999163253963	WITHOUT_CLASSIFICATION	8.367460369444041E-8	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999985346787	WITHOUT_CLASSIFICATION	1.4653213353071006E-9	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999948745064	WITHOUT_CLASSIFICATION	5.125493602989519E-9	TEST
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999998434446503	WITHOUT_CLASSIFICATION	1.5655534969650502E-6	TEST
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999737352553	WITHOUT_CLASSIFICATION	2.626474480223593E-8	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999926035413	WITHOUT_CLASSIFICATION	7.396458653889691E-9	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999992952211267	WITHOUT_CLASSIFICATION	7.047788731355915E-7	TEST
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999996515363043	WITHOUT_CLASSIFICATION	3.4846369570478376E-7	TEST
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999572591552	WITHOUT_CLASSIFICATION	4.274084477548626E-8	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990538763167	WITHOUT_CLASSIFICATION	9.46123683279063E-7	TEST
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990538763167	WITHOUT_CLASSIFICATION	9.46123683279063E-7	TEST
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999162533603	WITHOUT_CLASSIFICATION	8.374663972400736E-8	TEST
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999990691521732	WITHOUT_CLASSIFICATION	9.308478268171761E-7	TEST
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999999978265383	WITHOUT_CLASSIFICATION	2.173461706570002E-9	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999999556844386	WITHOUT_CLASSIFICATION	4.431556143534854E-8	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999724215636	WITHOUT_CLASSIFICATION	2.7578436335615958E-8	TEST
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999955337692	WITHOUT_CLASSIFICATION	4.466230819587581E-9	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999881605585	WITHOUT_CLASSIFICATION	1.1839441660142229E-8	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999983204962982	WITHOUT_CLASSIFICATION	1.6795037018064139E-6	TEST
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999941651991	WITHOUT_CLASSIFICATION	5.8348008714393585E-9	TEST
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996709874102	WITHOUT_CLASSIFICATION	3.290125898535006E-7	TEST
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998338358752	WITHOUT_CLASSIFICATION	1.6616412491504514E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999362349727039	WITHOUT_CLASSIFICATION	6.376502729621081E-5	TEST
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999986861665613	WITHOUT_CLASSIFICATION	1.3138334386937412E-5	TEST
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998005285952	WITHOUT_CLASSIFICATION	1.9947140491236268E-7	TEST
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999851519719	WITHOUT_CLASSIFICATION	1.484802819303131E-8	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999999782812094	WITHOUT_CLASSIFICATION	2.1718790605470555E-7	TEST
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999820026357	WITHOUT_CLASSIFICATION	1.7997364249495182E-8	TEST
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999995543928	WITHOUT_CLASSIFICATION	4.4560729389230054E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999984231723039	WITHOUT_CLASSIFICATION	1.5768276960581513E-6	TEST
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999991384570475	WITHOUT_CLASSIFICATION	8.615429525441935E-7	TEST
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997220516574	WITHOUT_CLASSIFICATION	2.779483425610456E-7	TEST
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999910569178	WITHOUT_CLASSIFICATION	8.943082084874027E-9	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999934711674141	WITHOUT_CLASSIFICATION	6.528832585825413E-6	TEST
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999955618119712	WITHOUT_CLASSIFICATION	4.438188028763675E-6	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999942215108477	WITHOUT_CLASSIFICATION	5.77848915236409E-6	TEST
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999961645854204	WITHOUT_CLASSIFICATION	3.835414579599356E-6	TEST
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999985812209	WITHOUT_CLASSIFICATION	1.4187790413609818E-9	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999913112828209	WITHOUT_CLASSIFICATION	8.68871717898293E-6	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999885592528	WITHOUT_CLASSIFICATION	1.1440747295297288E-8	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999999560088645	WITHOUT_CLASSIFICATION	4.3991135536062754E-8	TEST
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999882578388	WITHOUT_CLASSIFICATION	1.174216130542608E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998926000877	WITHOUT_CLASSIFICATION	1.0739991226767111E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999882731931	WITHOUT_CLASSIFICATION	1.1726806917274869E-8	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947579521	WITHOUT_CLASSIFICATION	5.242047837922971E-9	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999918333254738	WITHOUT_CLASSIFICATION	8.166674526311286E-6	TEST
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999999941852905	WITHOUT_CLASSIFICATION	5.814709492391638E-9	TEST
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995420829029	WITHOUT_CLASSIFICATION	4.579170971700011E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999991192397	WITHOUT_CLASSIFICATION	8.807603019334693E-9	TEST
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999988055107916	WITHOUT_CLASSIFICATION	1.1944892085160974E-6	TEST
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999989437313761	WITHOUT_CLASSIFICATION	1.0562686238955408E-6	TEST
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997768300721	WITHOUT_CLASSIFICATION	2.2316992784549527E-7	TEST
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999898950136	WITHOUT_CLASSIFICATION	1.0104986402160926E-8	TEST
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997501555742	WITHOUT_CLASSIFICATION	2.4984442582578076E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999580336437948	WITHOUT_CLASSIFICATION	4.1966356205316814E-5	TEST
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999716306665	WITHOUT_CLASSIFICATION	2.8369333649403876E-8	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.99999993949195	WITHOUT_CLASSIFICATION	6.050805006378159E-8	TEST
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998989342359	WITHOUT_CLASSIFICATION	1.0106576401137887E-7	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999885704228	WITHOUT_CLASSIFICATION	1.1429577191201289E-7	TEST
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998805562711	WITHOUT_CLASSIFICATION	1.1944372885990344E-7	TEST
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999924397152	WITHOUT_CLASSIFICATION	7.560284904940754E-9	TEST
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999999878068877	WITHOUT_CLASSIFICATION	1.2193112303093017E-8	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999890860368	WITHOUT_CLASSIFICATION	1.0913963296734236E-8	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999925210157	WITHOUT_CLASSIFICATION	7.478984300528924E-8	TEST
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999807977623	WITHOUT_CLASSIFICATION	1.9202237603467596E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999996979112665	WITHOUT_CLASSIFICATION	3.020887334444741E-7	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999956635791812	WITHOUT_CLASSIFICATION	4.33642081880384E-6	TEST
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998342248995	WITHOUT_CLASSIFICATION	1.6577510048849087E-7	TEST
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999128837463	WITHOUT_CLASSIFICATION	8.711625361025712E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999832024193	WITHOUT_CLASSIFICATION	1.679758059746298E-8	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998662801567	WITHOUT_CLASSIFICATION	1.3371984340973201E-7	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999569493281	WITHOUT_CLASSIFICATION	4.305067186730654E-8	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999810614343	WITHOUT_CLASSIFICATION	1.8938565740548474E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996240091183	WITHOUT_CLASSIFICATION	3.759908816723592E-7	TEST
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999973266468551	WITHOUT_CLASSIFICATION	2.673353144792382E-6	TEST
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999981850404234	WITHOUT_CLASSIFICATION	1.8149595767056133E-6	TEST
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999533233536	WITHOUT_CLASSIFICATION	4.667664651289666E-8	TEST
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999991386086851	WITHOUT_CLASSIFICATION	8.61391315063651E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996240091183	WITHOUT_CLASSIFICATION	3.759908816723592E-7	TEST
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997849259238231	WITHOUT_CLASSIFICATION	2.150740761769901E-4	TEST
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999757944664	WITHOUT_CLASSIFICATION	2.420553359618481E-8	TEST
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999909816909	WITHOUT_CLASSIFICATION	9.018309047523742E-9	TEST
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999804652437	WITHOUT_CLASSIFICATION	1.953475620341285E-8	TEST
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999965762063512	WITHOUT_CLASSIFICATION	3.4237936489285806E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999301542186	WITHOUT_CLASSIFICATION	6.984578136939119E-8	TEST
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999988905883	WITHOUT_CLASSIFICATION	1.109411584934019E-9	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999991591446071	WITHOUT_CLASSIFICATION	8.408553928925055E-7	TEST
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999360344847	WITHOUT_CLASSIFICATION	6.396551537302977E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988156083995	WITHOUT_CLASSIFICATION	1.184391600484973E-6	TEST
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999991722762988	WITHOUT_CLASSIFICATION	8.277237012087002E-7	TEST
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9995561280928517	WITHOUT_CLASSIFICATION	4.4387190714836514E-4	TEST
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999887234196	WITHOUT_CLASSIFICATION	1.1276580505916218E-8	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999970770229	WITHOUT_CLASSIFICATION	2.922976991159339E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999658805685	WITHOUT_CLASSIFICATION	3.411943151660941E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999417946367	WITHOUT_CLASSIFICATION	5.8205363304144594E-8	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999790042029	WITHOUT_CLASSIFICATION	2.0995797020316224E-8	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999977313957	WITHOUT_CLASSIFICATION	2.2686042484086715E-9	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999912184964278	WITHOUT_CLASSIFICATION	8.781503572170341E-6	TEST
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999999853337401	WITHOUT_CLASSIFICATION	1.4666259831687576E-8	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999686872066	WITHOUT_CLASSIFICATION	3.1312793354362435E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999864293537	WITHOUT_CLASSIFICATION	1.3570646345799967E-8	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999967866205	WITHOUT_CLASSIFICATION	3.213379542588902E-9	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999996192617	WITHOUT_CLASSIFICATION	3.807383813471785E-10	TEST
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999987424035	WITHOUT_CLASSIFICATION	1.2575964043002442E-9	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999994757770121	WITHOUT_CLASSIFICATION	5.242229879476338E-7	TEST
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.99999457993274	WITHOUT_CLASSIFICATION	5.42006726001786E-6	TEST
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999573438446	WITHOUT_CLASSIFICATION	4.2656155394306435E-7	TEST
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999995236733953	WITHOUT_CLASSIFICATION	4.7632660465578815E-7	TEST
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999996859415466	WITHOUT_CLASSIFICATION	3.140584533233776E-7	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999457645771	WITHOUT_CLASSIFICATION	5.423542298865496E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999993731931464	WITHOUT_CLASSIFICATION	6.268068536430315E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999195631053	WITHOUT_CLASSIFICATION	8.043689474769799E-8	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999986056777	WITHOUT_CLASSIFICATION	1.394322291882633E-9	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999394174445	WITHOUT_CLASSIFICATION	6.05825554605394E-8	TEST
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997587459166	WITHOUT_CLASSIFICATION	2.412540833956084E-7	TEST
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999984150156564	WITHOUT_CLASSIFICATION	1.5849843435873374E-6	TEST
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999048224155	WITHOUT_CLASSIFICATION	9.517758446839029E-8	TEST
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999996186677	WITHOUT_CLASSIFICATION	3.813323016180689E-9	TEST
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999821384873	WITHOUT_CLASSIFICATION	1.7861512645689386E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999801740388	WITHOUT_CLASSIFICATION	1.98259611354527E-8	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999999801740388	WITHOUT_CLASSIFICATION	1.98259611354527E-8	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999922430824392	WITHOUT_CLASSIFICATION	7.756917560895994E-6	TEST
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999881464356	WITHOUT_CLASSIFICATION	1.1853564304886217E-8	TEST
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999824563281	WITHOUT_CLASSIFICATION	1.754367190210209E-7	TEST
/**	WITHOUT_CLASSIFICATION	0.5438926243151708	WITHOUT_CLASSIFICATION	0.45610737568482934	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500344892	WITHOUT_CLASSIFICATION	1.4996551068636454E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999998500344892	WITHOUT_CLASSIFICATION	1.4996551068636454E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999987837609159	WITHOUT_CLASSIFICATION	1.216239084106052E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999998589822979	WITHOUT_CLASSIFICATION	1.4101770205388684E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999721230602276	WITHOUT_CLASSIFICATION	2.7876939772277503E-5	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999948420990322	WITHOUT_CLASSIFICATION	5.157900967802771E-5	TEST
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999848277057	WITHOUT_CLASSIFICATION	1.5172294326276145E-8	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999994867698798	WITHOUT_CLASSIFICATION	5.132301201384522E-7	TEST
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997946146881	WITHOUT_CLASSIFICATION	2.0538531173894924E-7	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999356804846	WITHOUT_CLASSIFICATION	6.431951535006116E-8	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999130899671029	WITHOUT_CLASSIFICATION	8.691003289703273E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979831951485	WITHOUT_CLASSIFICATION	2.016804851429865E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979831951485	WITHOUT_CLASSIFICATION	2.016804851429865E-6	TEST
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999854424409139	WITHOUT_CLASSIFICATION	1.4557559085982915E-5	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999995234264548	WITHOUT_CLASSIFICATION	4.765735451475546E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997369601826	WITHOUT_CLASSIFICATION	2.630398172858314E-7	TEST
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999054445222392	WITHOUT_CLASSIFICATION	9.455547776078793E-5	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999971292905512	WITHOUT_CLASSIFICATION	2.8707094487997323E-5	TEST
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999421491923	WITHOUT_CLASSIFICATION	5.7850807836412366E-8	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951794325977	WITHOUT_CLASSIFICATION	4.820567402304224E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999340401932	WITHOUT_CLASSIFICATION	6.595980687955525E-8	TEST
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999983923599085	WITHOUT_CLASSIFICATION	1.6076400915190763E-6	TEST
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999997515684069	WITHOUT_CLASSIFICATION	2.484315930753265E-7	TEST
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999787574875	WITHOUT_CLASSIFICATION	2.1242512495266944E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999988156083995	WITHOUT_CLASSIFICATION	1.184391600484973E-6	TEST
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999926316596	WITHOUT_CLASSIFICATION	7.368340365473325E-9	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999718439236489	WITHOUT_CLASSIFICATION	2.8156076351128012E-5	TEST
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999967121602	WITHOUT_CLASSIFICATION	3.2878398755071974E-9	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999998529840038	WITHOUT_CLASSIFICATION	1.4701599603722708E-7	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999978805510099	WITHOUT_CLASSIFICATION	2.1194489900185844E-6	TEST
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999984858031504	WITHOUT_CLASSIFICATION	1.5141968495693484E-6	TEST
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999857886988966	WITHOUT_CLASSIFICATION	1.421130110331533E-5	TEST
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999480499416	WITHOUT_CLASSIFICATION	5.195005837875268E-8	TEST
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999807773838	WITHOUT_CLASSIFICATION	1.9222616185773942E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997907776923	WITHOUT_CLASSIFICATION	2.0922230767872855E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999997907776923	WITHOUT_CLASSIFICATION	2.0922230767872855E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999781624856	WITHOUT_CLASSIFICATION	2.1837514400103416E-7	TEST
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999999717731	WITHOUT_CLASSIFICATION	2.8226880652016443E-11	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9999937817024854	WITHOUT_CLASSIFICATION	6.2182975145962285E-6	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998596408106	WITHOUT_CLASSIFICATION	1.4035918933521159E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999999276603254	WITHOUT_CLASSIFICATION	7.233967452217544E-8	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999937434322	WITHOUT_CLASSIFICATION	6.256567821838511E-9	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998951134694	WITHOUT_CLASSIFICATION	1.0488653055569616E-7	TEST
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999997626987	WITHOUT_CLASSIFICATION	2.3730123654539555E-10	TEST
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999999892164114	WITHOUT_CLASSIFICATION	1.0783588595482654E-7	TEST
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999996677789073	WITHOUT_CLASSIFICATION	3.3222109264011183E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994387571252	WITHOUT_CLASSIFICATION	5.612428747683315E-7	TEST
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999979885668682	WITHOUT_CLASSIFICATION	2.0114331317787874E-6	TEST
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999633090022	WITHOUT_CLASSIFICATION	3.669099776905389E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999914992019	WITHOUT_CLASSIFICATION	8.50079808949437E-9	TEST
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999320958999	WITHOUT_CLASSIFICATION	6.7904100063415E-8	TEST
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999952698454	WITHOUT_CLASSIFICATION	4.730154565715837E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999824727213	WITHOUT_CLASSIFICATION	1.7527278791985935E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980904049829	WITHOUT_CLASSIFICATION	1.9095950171383666E-6	TEST
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999997883534141	WITHOUT_CLASSIFICATION	2.1164658597185526E-7	TEST
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999995511691753	WITHOUT_CLASSIFICATION	4.488308247103989E-7	TEST
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995905319066	WITHOUT_CLASSIFICATION	4.09468093430153E-7	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997411374831	WITHOUT_CLASSIFICATION	2.5886251695732415E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999944955040069	WITHOUT_CLASSIFICATION	5.504495993188258E-6	TEST
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999942984435	WITHOUT_CLASSIFICATION	5.701556493948209E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843536	WITHOUT_CLASSIFICATION	1.6156463959996894E-9	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999983843536	WITHOUT_CLASSIFICATION	1.6156463959996894E-9	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974765963725	WITHOUT_CLASSIFICATION	2.523403627530259E-6	TEST
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999996989933335	WITHOUT_CLASSIFICATION	3.010066664068153E-7	TEST
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999847640706	WITHOUT_CLASSIFICATION	1.5235929380736154E-8	TEST
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999951601948	WITHOUT_CLASSIFICATION	4.839805246201125E-9	TEST
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998467002699	WITHOUT_CLASSIFICATION	1.5329973010603865E-7	TEST
